// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TemDomain extends pulumi.CustomResource {
    /**
     * Get an existing TemDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemDomainState, opts?: pulumi.CustomResourceOptions): TemDomain {
        return new TemDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/temDomain:TemDomain';

    /**
     * Returns true if the given object is an instance of TemDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemDomain.__pulumiType;
    }

    /**
     * Accept the Scaleway Terms of Service
     */
    public readonly acceptTos!: pulumi.Output<boolean>;
    /**
     * Date and time of domain's creation (RFC 3339 format)
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * DKIM public key, as should be recorded in the DNS zone
     */
    public /*out*/ readonly dkimConfig!: pulumi.Output<string>;
    /**
     * DMARC record for the domain, as should be recorded in the DNS zone
     */
    public /*out*/ readonly dmarcConfig!: pulumi.Output<string>;
    /**
     * DMARC name for the domain, as should be recorded in the DNS zone
     */
    public /*out*/ readonly dmarcName!: pulumi.Output<string>;
    /**
     * Error message if the last check failed
     */
    public /*out*/ readonly lastError!: pulumi.Output<string>;
    /**
     * Date and time the domain was last found to be valid (RFC 3339 format)
     */
    public /*out*/ readonly lastValidAt!: pulumi.Output<string>;
    /**
     * The Scaleway's blackhole MX server to use
     */
    public /*out*/ readonly mxBlackhole!: pulumi.Output<string>;
    /**
     * The domain name used when sending emails
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Date and time of the next scheduled check (RFC 3339 format)
     */
    public /*out*/ readonly nextCheckAt!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The domain's reputation
     */
    public /*out*/ readonly reputations!: pulumi.Output<outputs.TemDomainReputation[]>;
    /**
     * Date and time of the revocation of the domain (RFC 3339 format)
     */
    public /*out*/ readonly revokedAt!: pulumi.Output<string>;
    /**
     * SMTP host to use to send emails
     */
    public /*out*/ readonly smtpHost!: pulumi.Output<string>;
    /**
     * SMTP port to use to send emails over TLS. (Port 587)
     */
    public /*out*/ readonly smtpPort!: pulumi.Output<number>;
    /**
     * SMTP port to use to send emails over TLS. (Port 2587)
     */
    public /*out*/ readonly smtpPortAlternative!: pulumi.Output<number>;
    /**
     * SMTP port to use to send emails. (Port 25)
     */
    public /*out*/ readonly smtpPortUnsecure!: pulumi.Output<number>;
    /**
     * SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email
     * transmission
     */
    public /*out*/ readonly smtpsAuthUser!: pulumi.Output<string>;
    /**
     * SMTPS port to use to send emails over TLS Wrapper. (Port 465)
     */
    public /*out*/ readonly smtpsPort!: pulumi.Output<number>;
    /**
     * SMTPS port to use to send emails over TLS Wrapper. (Port 2465)
     */
    public /*out*/ readonly smtpsPortAlternative!: pulumi.Output<number>;
    /**
     * Snippet of the SPF record that should be registered in the DNS zone
     */
    public /*out*/ readonly spfConfig!: pulumi.Output<string>;
    /**
     * Status of the domain
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.TemDomainTimeouts | undefined>;

    /**
     * Create a TemDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemDomainArgs | TemDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemDomainState | undefined;
            resourceInputs["acceptTos"] = state ? state.acceptTos : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dkimConfig"] = state ? state.dkimConfig : undefined;
            resourceInputs["dmarcConfig"] = state ? state.dmarcConfig : undefined;
            resourceInputs["dmarcName"] = state ? state.dmarcName : undefined;
            resourceInputs["lastError"] = state ? state.lastError : undefined;
            resourceInputs["lastValidAt"] = state ? state.lastValidAt : undefined;
            resourceInputs["mxBlackhole"] = state ? state.mxBlackhole : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextCheckAt"] = state ? state.nextCheckAt : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reputations"] = state ? state.reputations : undefined;
            resourceInputs["revokedAt"] = state ? state.revokedAt : undefined;
            resourceInputs["smtpHost"] = state ? state.smtpHost : undefined;
            resourceInputs["smtpPort"] = state ? state.smtpPort : undefined;
            resourceInputs["smtpPortAlternative"] = state ? state.smtpPortAlternative : undefined;
            resourceInputs["smtpPortUnsecure"] = state ? state.smtpPortUnsecure : undefined;
            resourceInputs["smtpsAuthUser"] = state ? state.smtpsAuthUser : undefined;
            resourceInputs["smtpsPort"] = state ? state.smtpsPort : undefined;
            resourceInputs["smtpsPortAlternative"] = state ? state.smtpsPortAlternative : undefined;
            resourceInputs["spfConfig"] = state ? state.spfConfig : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as TemDomainArgs | undefined;
            if ((!args || args.acceptTos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptTos'");
            }
            resourceInputs["acceptTos"] = args ? args.acceptTos : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dkimConfig"] = undefined /*out*/;
            resourceInputs["dmarcConfig"] = undefined /*out*/;
            resourceInputs["dmarcName"] = undefined /*out*/;
            resourceInputs["lastError"] = undefined /*out*/;
            resourceInputs["lastValidAt"] = undefined /*out*/;
            resourceInputs["mxBlackhole"] = undefined /*out*/;
            resourceInputs["nextCheckAt"] = undefined /*out*/;
            resourceInputs["reputations"] = undefined /*out*/;
            resourceInputs["revokedAt"] = undefined /*out*/;
            resourceInputs["smtpHost"] = undefined /*out*/;
            resourceInputs["smtpPort"] = undefined /*out*/;
            resourceInputs["smtpPortAlternative"] = undefined /*out*/;
            resourceInputs["smtpPortUnsecure"] = undefined /*out*/;
            resourceInputs["smtpsAuthUser"] = undefined /*out*/;
            resourceInputs["smtpsPort"] = undefined /*out*/;
            resourceInputs["smtpsPortAlternative"] = undefined /*out*/;
            resourceInputs["spfConfig"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TemDomain resources.
 */
export interface TemDomainState {
    /**
     * Accept the Scaleway Terms of Service
     */
    acceptTos?: pulumi.Input<boolean>;
    /**
     * Date and time of domain's creation (RFC 3339 format)
     */
    createdAt?: pulumi.Input<string>;
    /**
     * DKIM public key, as should be recorded in the DNS zone
     */
    dkimConfig?: pulumi.Input<string>;
    /**
     * DMARC record for the domain, as should be recorded in the DNS zone
     */
    dmarcConfig?: pulumi.Input<string>;
    /**
     * DMARC name for the domain, as should be recorded in the DNS zone
     */
    dmarcName?: pulumi.Input<string>;
    /**
     * Error message if the last check failed
     */
    lastError?: pulumi.Input<string>;
    /**
     * Date and time the domain was last found to be valid (RFC 3339 format)
     */
    lastValidAt?: pulumi.Input<string>;
    /**
     * The Scaleway's blackhole MX server to use
     */
    mxBlackhole?: pulumi.Input<string>;
    /**
     * The domain name used when sending emails
     */
    name?: pulumi.Input<string>;
    /**
     * Date and time of the next scheduled check (RFC 3339 format)
     */
    nextCheckAt?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The domain's reputation
     */
    reputations?: pulumi.Input<pulumi.Input<inputs.TemDomainReputation>[]>;
    /**
     * Date and time of the revocation of the domain (RFC 3339 format)
     */
    revokedAt?: pulumi.Input<string>;
    /**
     * SMTP host to use to send emails
     */
    smtpHost?: pulumi.Input<string>;
    /**
     * SMTP port to use to send emails over TLS. (Port 587)
     */
    smtpPort?: pulumi.Input<number>;
    /**
     * SMTP port to use to send emails over TLS. (Port 2587)
     */
    smtpPortAlternative?: pulumi.Input<number>;
    /**
     * SMTP port to use to send emails. (Port 25)
     */
    smtpPortUnsecure?: pulumi.Input<number>;
    /**
     * SMTPS auth user refers to the identifier for a user authorized to send emails via SMTPS, ensuring secure email
     * transmission
     */
    smtpsAuthUser?: pulumi.Input<string>;
    /**
     * SMTPS port to use to send emails over TLS Wrapper. (Port 465)
     */
    smtpsPort?: pulumi.Input<number>;
    /**
     * SMTPS port to use to send emails over TLS Wrapper. (Port 2465)
     */
    smtpsPortAlternative?: pulumi.Input<number>;
    /**
     * Snippet of the SPF record that should be registered in the DNS zone
     */
    spfConfig?: pulumi.Input<string>;
    /**
     * Status of the domain
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.TemDomainTimeouts>;
}

/**
 * The set of arguments for constructing a TemDomain resource.
 */
export interface TemDomainArgs {
    /**
     * Accept the Scaleway Terms of Service
     */
    acceptTos: pulumi.Input<boolean>;
    /**
     * The domain name used when sending emails
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.TemDomainTimeouts>;
}
