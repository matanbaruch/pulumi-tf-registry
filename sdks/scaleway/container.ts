// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerState, opts?: pulumi.CustomResourceOptions): Container {
        return new Container(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/container:Container';

    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Container {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }

    /**
     * The amount of vCPU computing resources to allocate to each container. Defaults to 70.
     */
    public readonly cpuLimit!: pulumi.Output<number>;
    /**
     * The cron status
     */
    public /*out*/ readonly cronStatus!: pulumi.Output<string>;
    /**
     * This allows you to control your production environment
     */
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    /**
     * The container description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The native container domain name.
     */
    public /*out*/ readonly domainName!: pulumi.Output<string>;
    /**
     * The environment variables to be injected into your container at runtime.
     */
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string}>;
    /**
     * The error description
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * HTTP traffic configuration
     */
    public readonly httpOption!: pulumi.Output<string | undefined>;
    /**
     * The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
     */
    public readonly maxConcurrency!: pulumi.Output<number>;
    /**
     * The maximum of number of instances this container can scale to. Default to 20.
     */
    public readonly maxScale!: pulumi.Output<number>;
    /**
     * The memory computing resources in MB to allocate to each container. Defaults to 128.
     */
    public readonly memoryLimit!: pulumi.Output<number>;
    /**
     * The minimum of running container instances continuously. Defaults to 0.
     */
    public readonly minScale!: pulumi.Output<number>;
    /**
     * The container name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The container namespace associated
     */
    public readonly namespaceId!: pulumi.Output<string>;
    /**
     * The port to expose the container. Defaults to 8080
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The privacy type define the way to authenticate to your container
     */
    public readonly privacy!: pulumi.Output<string | undefined>;
    /**
     * The communication protocol http1 or h2c. Defaults to http1.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The scaleway registry image address
     */
    public readonly registryImage!: pulumi.Output<string>;
    /**
     * The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string
     */
    public readonly registrySha256!: pulumi.Output<string | undefined>;
    /**
     * Execution environment of the container.
     */
    public readonly sandbox!: pulumi.Output<string>;
    /**
     * The secret environment variables to be injected into your container at runtime.
     */
    public readonly secretEnvironmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The container status
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
     * 300s.
     */
    public readonly timeout!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerTimeouts | undefined>;

    /**
     * Create a Container resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerArgs | ContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerState | undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cronStatus"] = state ? state.cronStatus : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["httpOption"] = state ? state.httpOption : undefined;
            resourceInputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            resourceInputs["maxScale"] = state ? state.maxScale : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["minScale"] = state ? state.minScale : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privacy"] = state ? state.privacy : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["registryImage"] = state ? state.registryImage : undefined;
            resourceInputs["registrySha256"] = state ? state.registrySha256 : undefined;
            resourceInputs["sandbox"] = state ? state.sandbox : undefined;
            resourceInputs["secretEnvironmentVariables"] = state ? state.secretEnvironmentVariables : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerArgs | undefined;
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["httpOption"] = args ? args.httpOption : undefined;
            resourceInputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            resourceInputs["maxScale"] = args ? args.maxScale : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["minScale"] = args ? args.minScale : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privacy"] = args ? args.privacy : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["registryImage"] = args ? args.registryImage : undefined;
            resourceInputs["registrySha256"] = args ? args.registrySha256 : undefined;
            resourceInputs["sandbox"] = args ? args.sandbox : undefined;
            resourceInputs["secretEnvironmentVariables"] = args?.secretEnvironmentVariables ? pulumi.secret(args.secretEnvironmentVariables) : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["cronStatus"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretEnvironmentVariables"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Container.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Container resources.
 */
export interface ContainerState {
    /**
     * The amount of vCPU computing resources to allocate to each container. Defaults to 70.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * The cron status
     */
    cronStatus?: pulumi.Input<string>;
    /**
     * This allows you to control your production environment
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * The container description
     */
    description?: pulumi.Input<string>;
    /**
     * The native container domain name.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The environment variables to be injected into your container at runtime.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The error description
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * HTTP traffic configuration
     */
    httpOption?: pulumi.Input<string>;
    /**
     * The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * The maximum of number of instances this container can scale to. Default to 20.
     */
    maxScale?: pulumi.Input<number>;
    /**
     * The memory computing resources in MB to allocate to each container. Defaults to 128.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The minimum of running container instances continuously. Defaults to 0.
     */
    minScale?: pulumi.Input<number>;
    /**
     * The container name
     */
    name?: pulumi.Input<string>;
    /**
     * The container namespace associated
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The port to expose the container. Defaults to 8080
     */
    port?: pulumi.Input<number>;
    /**
     * The privacy type define the way to authenticate to your container
     */
    privacy?: pulumi.Input<string>;
    /**
     * The communication protocol http1 or h2c. Defaults to http1.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The scaleway registry image address
     */
    registryImage?: pulumi.Input<string>;
    /**
     * The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string
     */
    registrySha256?: pulumi.Input<string>;
    /**
     * Execution environment of the container.
     */
    sandbox?: pulumi.Input<string>;
    /**
     * The secret environment variables to be injected into your container at runtime.
     */
    secretEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The container status
     */
    status?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
     * 300s.
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ContainerTimeouts>;
}

/**
 * The set of arguments for constructing a Container resource.
 */
export interface ContainerArgs {
    /**
     * The amount of vCPU computing resources to allocate to each container. Defaults to 70.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * This allows you to control your production environment
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * The container description
     */
    description?: pulumi.Input<string>;
    /**
     * The environment variables to be injected into your container at runtime.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * HTTP traffic configuration
     */
    httpOption?: pulumi.Input<string>;
    /**
     * The maximum the number of simultaneous requests your container can handle at the same time. Defaults to 50.
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * The maximum of number of instances this container can scale to. Default to 20.
     */
    maxScale?: pulumi.Input<number>;
    /**
     * The memory computing resources in MB to allocate to each container. Defaults to 128.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The minimum of running container instances continuously. Defaults to 0.
     */
    minScale?: pulumi.Input<number>;
    /**
     * The container name
     */
    name?: pulumi.Input<string>;
    /**
     * The container namespace associated
     */
    namespaceId: pulumi.Input<string>;
    /**
     * The port to expose the container. Defaults to 8080
     */
    port?: pulumi.Input<number>;
    /**
     * The privacy type define the way to authenticate to your container
     */
    privacy?: pulumi.Input<string>;
    /**
     * The communication protocol http1 or h2c. Defaults to http1.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The scaleway registry image address
     */
    registryImage?: pulumi.Input<string>;
    /**
     * The sha256 of your source registry image, changing it will re-apply the deployment. Can be any string
     */
    registrySha256?: pulumi.Input<string>;
    /**
     * Execution environment of the container.
     */
    sandbox?: pulumi.Input<string>;
    /**
     * The secret environment variables to be injected into your container at runtime.
     */
    secretEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The container status
     */
    status?: pulumi.Input<string>;
    /**
     * The maximum amount of time in seconds during which your container can process a request before we stop it. Defaults to
     * 300s.
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ContainerTimeouts>;
}
