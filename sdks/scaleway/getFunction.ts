// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFunction(args: GetFunctionArgs, opts?: pulumi.InvokeOptions): Promise<GetFunctionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getFunction:getFunction", {
        "functionId": args.functionId,
        "id": args.id,
        "name": args.name,
        "namespaceId": args.namespaceId,
        "projectId": args.projectId,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFunction.
 */
export interface GetFunctionArgs {
    functionId?: string;
    id?: string;
    name?: string;
    namespaceId: string;
    projectId?: string;
    region?: string;
}

/**
 * A collection of values returned by getFunction.
 */
export interface GetFunctionResult {
    readonly cpuLimit: number;
    readonly deploy: boolean;
    readonly description: string;
    readonly domainName: string;
    readonly environmentVariables: {[key: string]: string};
    readonly functionId?: string;
    readonly handler: string;
    readonly httpOption: string;
    readonly id: string;
    readonly maxScale: number;
    readonly memoryLimit: number;
    readonly minScale: number;
    readonly name?: string;
    readonly namespaceId: string;
    readonly organizationId: string;
    readonly privacy: string;
    readonly projectId?: string;
    readonly region?: string;
    readonly runtime: string;
    readonly sandbox: string;
    readonly secretEnvironmentVariables: {[key: string]: string};
    readonly timeout: number;
    readonly zipFile: string;
    readonly zipHash: string;
}
export function getFunctionOutput(args: GetFunctionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFunctionResult> {
    return pulumi.output(args).apply((a: any) => getFunction(a, opts))
}

/**
 * A collection of arguments for invoking getFunction.
 */
export interface GetFunctionOutputArgs {
    functionId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespaceId: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
