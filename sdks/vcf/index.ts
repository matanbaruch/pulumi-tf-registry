// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CeipArgs, CeipState } from "./ceip";
export type Ceip = import("./ceip").Ceip;
export const Ceip: typeof import("./ceip").Ceip = null as any;
utilities.lazyLoad(exports, ["Ceip"], () => require("./ceip"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateAuthorityArgs, CertificateAuthorityState } from "./certificateAuthority";
export type CertificateAuthority = import("./certificateAuthority").CertificateAuthority;
export const CertificateAuthority: typeof import("./certificateAuthority").CertificateAuthority = null as any;
utilities.lazyLoad(exports, ["CertificateAuthority"], () => require("./certificateAuthority"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterPersonalityArgs, ClusterPersonalityState } from "./clusterPersonality";
export type ClusterPersonality = import("./clusterPersonality").ClusterPersonality;
export const ClusterPersonality: typeof import("./clusterPersonality").ClusterPersonality = null as any;
utilities.lazyLoad(exports, ["ClusterPersonality"], () => require("./clusterPersonality"));

export { CredentialsAutoRotatePolicyArgs, CredentialsAutoRotatePolicyState } from "./credentialsAutoRotatePolicy";
export type CredentialsAutoRotatePolicy = import("./credentialsAutoRotatePolicy").CredentialsAutoRotatePolicy;
export const CredentialsAutoRotatePolicy: typeof import("./credentialsAutoRotatePolicy").CredentialsAutoRotatePolicy = null as any;
utilities.lazyLoad(exports, ["CredentialsAutoRotatePolicy"], () => require("./credentialsAutoRotatePolicy"));

export { CredentialsRotateArgs, CredentialsRotateState } from "./credentialsRotate";
export type CredentialsRotate = import("./credentialsRotate").CredentialsRotate;
export const CredentialsRotate: typeof import("./credentialsRotate").CredentialsRotate = null as any;
utilities.lazyLoad(exports, ["CredentialsRotate"], () => require("./credentialsRotate"));

export { CredentialsUpdateArgs, CredentialsUpdateState } from "./credentialsUpdate";
export type CredentialsUpdate = import("./credentialsUpdate").CredentialsUpdate;
export const CredentialsUpdate: typeof import("./credentialsUpdate").CredentialsUpdate = null as any;
utilities.lazyLoad(exports, ["CredentialsUpdate"], () => require("./credentialsUpdate"));

export { CsrArgs, CsrState } from "./csr";
export type Csr = import("./csr").Csr;
export const Csr: typeof import("./csr").Csr = null as any;
utilities.lazyLoad(exports, ["Csr"], () => require("./csr"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { EdgeClusterArgs, EdgeClusterState } from "./edgeCluster";
export type EdgeCluster = import("./edgeCluster").EdgeCluster;
export const EdgeCluster: typeof import("./edgeCluster").EdgeCluster = null as any;
utilities.lazyLoad(exports, ["EdgeCluster"], () => require("./edgeCluster"));

export { ExternalCertificateArgs, ExternalCertificateState } from "./externalCertificate";
export type ExternalCertificate = import("./externalCertificate").ExternalCertificate;
export const ExternalCertificate: typeof import("./externalCertificate").ExternalCertificate = null as any;
utilities.lazyLoad(exports, ["ExternalCertificate"], () => require("./externalCertificate"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetCredentialsArgs, GetCredentialsResult, GetCredentialsOutputArgs } from "./getCredentials";
export const getCredentials: typeof import("./getCredentials").getCredentials = null as any;
export const getCredentialsOutput: typeof import("./getCredentials").getCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCredentials","getCredentialsOutput"], () => require("./getCredentials"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { NetworkPoolArgs, NetworkPoolState } from "./networkPool";
export type NetworkPool = import("./networkPool").NetworkPool;
export const NetworkPool: typeof import("./networkPool").NetworkPool = null as any;
utilities.lazyLoad(exports, ["NetworkPool"], () => require("./networkPool"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vcf:index/ceip:Ceip":
                return new Ceip(name, <any>undefined, { urn })
            case "vcf:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "vcf:index/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "vcf:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "vcf:index/clusterPersonality:ClusterPersonality":
                return new ClusterPersonality(name, <any>undefined, { urn })
            case "vcf:index/credentialsAutoRotatePolicy:CredentialsAutoRotatePolicy":
                return new CredentialsAutoRotatePolicy(name, <any>undefined, { urn })
            case "vcf:index/credentialsRotate:CredentialsRotate":
                return new CredentialsRotate(name, <any>undefined, { urn })
            case "vcf:index/credentialsUpdate:CredentialsUpdate":
                return new CredentialsUpdate(name, <any>undefined, { urn })
            case "vcf:index/csr:Csr":
                return new Csr(name, <any>undefined, { urn })
            case "vcf:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "vcf:index/edgeCluster:EdgeCluster":
                return new EdgeCluster(name, <any>undefined, { urn })
            case "vcf:index/externalCertificate:ExternalCertificate":
                return new ExternalCertificate(name, <any>undefined, { urn })
            case "vcf:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "vcf:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "vcf:index/networkPool:NetworkPool":
                return new NetworkPool(name, <any>undefined, { urn })
            case "vcf:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vcf", "index/ceip", _module)
pulumi.runtime.registerResourceModule("vcf", "index/certificate", _module)
pulumi.runtime.registerResourceModule("vcf", "index/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("vcf", "index/cluster", _module)
pulumi.runtime.registerResourceModule("vcf", "index/clusterPersonality", _module)
pulumi.runtime.registerResourceModule("vcf", "index/credentialsAutoRotatePolicy", _module)
pulumi.runtime.registerResourceModule("vcf", "index/credentialsRotate", _module)
pulumi.runtime.registerResourceModule("vcf", "index/credentialsUpdate", _module)
pulumi.runtime.registerResourceModule("vcf", "index/csr", _module)
pulumi.runtime.registerResourceModule("vcf", "index/domain", _module)
pulumi.runtime.registerResourceModule("vcf", "index/edgeCluster", _module)
pulumi.runtime.registerResourceModule("vcf", "index/externalCertificate", _module)
pulumi.runtime.registerResourceModule("vcf", "index/host", _module)
pulumi.runtime.registerResourceModule("vcf", "index/instance", _module)
pulumi.runtime.registerResourceModule("vcf", "index/networkPool", _module)
pulumi.runtime.registerResourceModule("vcf", "index/user", _module)
pulumi.runtime.registerResourcePackage("vcf", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vcf") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
