// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CredentialsUpdate extends pulumi.CustomResource {
    /**
     * Get an existing CredentialsUpdate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialsUpdateState, opts?: pulumi.CustomResourceOptions): CredentialsUpdate {
        return new CredentialsUpdate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/credentialsUpdate:CredentialsUpdate';

    /**
     * Returns true if the given object is an instance of CredentialsUpdate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialsUpdate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialsUpdate.__pulumiType;
    }

    /**
     * The credentials that should be updated
     */
    public readonly credentials!: pulumi.Output<outputs.CredentialsUpdateCredential[]>;
    /**
     * The time of the last password rotation.
     */
    public /*out*/ readonly lastUpdateTime!: pulumi.Output<string>;
    /**
     * If set to true operation is executed only once otherwise rotation is done each time.
     */
    public readonly onceOnly!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the resource which credentials will be updated
     */
    public readonly resourceName!: pulumi.Output<string>;
    /**
     * The type of the resource which credentials will be updated
     */
    public readonly resourceType!: pulumi.Output<string>;

    /**
     * Create a CredentialsUpdate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialsUpdateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialsUpdateArgs | CredentialsUpdateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialsUpdateState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["lastUpdateTime"] = state ? state.lastUpdateTime : undefined;
            resourceInputs["onceOnly"] = state ? state.onceOnly : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        } else {
            const args = argsOrState as CredentialsUpdateArgs | undefined;
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["onceOnly"] = args ? args.onceOnly : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialsUpdate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CredentialsUpdate resources.
 */
export interface CredentialsUpdateState {
    /**
     * The credentials that should be updated
     */
    credentials?: pulumi.Input<pulumi.Input<inputs.CredentialsUpdateCredential>[]>;
    /**
     * The time of the last password rotation.
     */
    lastUpdateTime?: pulumi.Input<string>;
    /**
     * If set to true operation is executed only once otherwise rotation is done each time.
     */
    onceOnly?: pulumi.Input<boolean>;
    /**
     * The name of the resource which credentials will be updated
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The type of the resource which credentials will be updated
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialsUpdate resource.
 */
export interface CredentialsUpdateArgs {
    /**
     * The credentials that should be updated
     */
    credentials: pulumi.Input<pulumi.Input<inputs.CredentialsUpdateCredential>[]>;
    /**
     * If set to true operation is executed only once otherwise rotation is done each time.
     */
    onceOnly?: pulumi.Input<boolean>;
    /**
     * The name of the resource which credentials will be updated
     */
    resourceName: pulumi.Input<string>;
    /**
     * The type of the resource which credentials will be updated
     */
    resourceType: pulumi.Input<string>;
}
