// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateAuthorityState, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/certificateAuthority:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * Configuration describing Microsoft CA server
     */
    public readonly microsoft!: pulumi.Output<outputs.CertificateAuthorityMicrosoft | undefined>;
    /**
     * Configuration describing OpenSSL CA server
     */
    public readonly openSsl!: pulumi.Output<outputs.CertificateAuthorityOpenSsl | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CertificateAuthorityTimeouts | undefined>;
    /**
     * Certificate authority type. "id" has the same value. Microsoft or OpenSSL
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateAuthorityArgs | CertificateAuthorityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateAuthorityState | undefined;
            resourceInputs["microsoft"] = state ? state.microsoft : undefined;
            resourceInputs["openSsl"] = state ? state.openSsl : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CertificateAuthorityArgs | undefined;
            resourceInputs["microsoft"] = args ? args.microsoft : undefined;
            resourceInputs["openSsl"] = args ? args.openSsl : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateAuthority.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateAuthority resources.
 */
export interface CertificateAuthorityState {
    /**
     * Configuration describing Microsoft CA server
     */
    microsoft?: pulumi.Input<inputs.CertificateAuthorityMicrosoft>;
    /**
     * Configuration describing OpenSSL CA server
     */
    openSsl?: pulumi.Input<inputs.CertificateAuthorityOpenSsl>;
    timeouts?: pulumi.Input<inputs.CertificateAuthorityTimeouts>;
    /**
     * Certificate authority type. "id" has the same value. Microsoft or OpenSSL
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * Configuration describing Microsoft CA server
     */
    microsoft?: pulumi.Input<inputs.CertificateAuthorityMicrosoft>;
    /**
     * Configuration describing OpenSSL CA server
     */
    openSsl?: pulumi.Input<inputs.CertificateAuthorityOpenSsl>;
    timeouts?: pulumi.Input<inputs.CertificateAuthorityTimeouts>;
}
