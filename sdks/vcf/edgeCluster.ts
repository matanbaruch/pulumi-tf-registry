// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EdgeCluster extends pulumi.CustomResource {
    /**
     * Get an existing EdgeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeClusterState, opts?: pulumi.CustomResourceOptions): EdgeCluster {
        return new EdgeCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/edgeCluster:EdgeCluster';

    /**
     * Returns true if the given object is an instance of EdgeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeCluster.__pulumiType;
    }

    /**
     * Administrator password for the NSX manager
     */
    public readonly adminPassword!: pulumi.Output<string>;
    /**
     * ASN for the cluster
     */
    public readonly asn!: pulumi.Output<number | undefined>;
    /**
     * Audit user password for the NSX manager
     */
    public readonly auditPassword!: pulumi.Output<string>;
    /**
     * The nodes in the edge cluster
     */
    public readonly edgeNodes!: pulumi.Output<outputs.EdgeClusterEdgeNode[]>;
    /**
     * One among: XLARGE, LARGE, MEDIUM, SMALL
     */
    public readonly formFactor!: pulumi.Output<string>;
    /**
     * One among: ACTIVE_ACTIVE, ACTIVE_STANDBY
     */
    public readonly highAvailability!: pulumi.Output<string | undefined>;
    /**
     * Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and
     * distributed routers
     */
    public readonly internalTransitSubnets!: pulumi.Output<string[] | undefined>;
    /**
     * Maximum transmission unit size for the cluster
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * The name of the edge cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The specification for the edge cluster profile
     */
    public readonly profile!: pulumi.Output<outputs.EdgeClusterProfile | undefined>;
    /**
     * One among: DEFAULT, CUSTOM. If set to CUSTOM a 'profile' must be provided
     */
    public readonly profileType!: pulumi.Output<string>;
    /**
     * Root user password for the NSX manager
     */
    public readonly rootPassword!: pulumi.Output<string>;
    /**
     * One among: EBGP, STATIC
     */
    public readonly routingType!: pulumi.Output<string | undefined>;
    /**
     * Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)
     */
    public readonly skipTepRoutabilityCheck!: pulumi.Output<boolean | undefined>;
    /**
     * Name for the Tier-0 gateway
     */
    public readonly tier0Name!: pulumi.Output<string | undefined>;
    /**
     * Name for the Tier-1 gateway
     */
    public readonly tier1Name!: pulumi.Output<string | undefined>;
    /**
     * Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not (default value is false,
     * meaning hosted)
     */
    public readonly tier1Unhosted!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EdgeClusterTimeouts | undefined>;
    /**
     * Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and
     * Tier-1s
     */
    public readonly transitSubnets!: pulumi.Output<string[] | undefined>;

    /**
     * Create a EdgeCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeClusterArgs | EdgeClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeClusterState | undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["asn"] = state ? state.asn : undefined;
            resourceInputs["auditPassword"] = state ? state.auditPassword : undefined;
            resourceInputs["edgeNodes"] = state ? state.edgeNodes : undefined;
            resourceInputs["formFactor"] = state ? state.formFactor : undefined;
            resourceInputs["highAvailability"] = state ? state.highAvailability : undefined;
            resourceInputs["internalTransitSubnets"] = state ? state.internalTransitSubnets : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["rootPassword"] = state ? state.rootPassword : undefined;
            resourceInputs["routingType"] = state ? state.routingType : undefined;
            resourceInputs["skipTepRoutabilityCheck"] = state ? state.skipTepRoutabilityCheck : undefined;
            resourceInputs["tier0Name"] = state ? state.tier0Name : undefined;
            resourceInputs["tier1Name"] = state ? state.tier1Name : undefined;
            resourceInputs["tier1Unhosted"] = state ? state.tier1Unhosted : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transitSubnets"] = state ? state.transitSubnets : undefined;
        } else {
            const args = argsOrState as EdgeClusterArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.auditPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auditPassword'");
            }
            if ((!args || args.edgeNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeNodes'");
            }
            if ((!args || args.formFactor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formFactor'");
            }
            if ((!args || args.mtu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mtu'");
            }
            if ((!args || args.profileType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileType'");
            }
            if ((!args || args.rootPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootPassword'");
            }
            resourceInputs["adminPassword"] = args ? args.adminPassword : undefined;
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["auditPassword"] = args ? args.auditPassword : undefined;
            resourceInputs["edgeNodes"] = args ? args.edgeNodes : undefined;
            resourceInputs["formFactor"] = args ? args.formFactor : undefined;
            resourceInputs["highAvailability"] = args ? args.highAvailability : undefined;
            resourceInputs["internalTransitSubnets"] = args ? args.internalTransitSubnets : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["rootPassword"] = args ? args.rootPassword : undefined;
            resourceInputs["routingType"] = args ? args.routingType : undefined;
            resourceInputs["skipTepRoutabilityCheck"] = args ? args.skipTepRoutabilityCheck : undefined;
            resourceInputs["tier0Name"] = args ? args.tier0Name : undefined;
            resourceInputs["tier1Name"] = args ? args.tier1Name : undefined;
            resourceInputs["tier1Unhosted"] = args ? args.tier1Unhosted : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transitSubnets"] = args ? args.transitSubnets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgeCluster resources.
 */
export interface EdgeClusterState {
    /**
     * Administrator password for the NSX manager
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * ASN for the cluster
     */
    asn?: pulumi.Input<number>;
    /**
     * Audit user password for the NSX manager
     */
    auditPassword?: pulumi.Input<string>;
    /**
     * The nodes in the edge cluster
     */
    edgeNodes?: pulumi.Input<pulumi.Input<inputs.EdgeClusterEdgeNode>[]>;
    /**
     * One among: XLARGE, LARGE, MEDIUM, SMALL
     */
    formFactor?: pulumi.Input<string>;
    /**
     * One among: ACTIVE_ACTIVE, ACTIVE_STANDBY
     */
    highAvailability?: pulumi.Input<string>;
    /**
     * Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and
     * distributed routers
     */
    internalTransitSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum transmission unit size for the cluster
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the edge cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The specification for the edge cluster profile
     */
    profile?: pulumi.Input<inputs.EdgeClusterProfile>;
    /**
     * One among: DEFAULT, CUSTOM. If set to CUSTOM a 'profile' must be provided
     */
    profileType?: pulumi.Input<string>;
    /**
     * Root user password for the NSX manager
     */
    rootPassword?: pulumi.Input<string>;
    /**
     * One among: EBGP, STATIC
     */
    routingType?: pulumi.Input<string>;
    /**
     * Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)
     */
    skipTepRoutabilityCheck?: pulumi.Input<boolean>;
    /**
     * Name for the Tier-0 gateway
     */
    tier0Name?: pulumi.Input<string>;
    /**
     * Name for the Tier-1 gateway
     */
    tier1Name?: pulumi.Input<string>;
    /**
     * Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not (default value is false,
     * meaning hosted)
     */
    tier1Unhosted?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.EdgeClusterTimeouts>;
    /**
     * Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and
     * Tier-1s
     */
    transitSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EdgeCluster resource.
 */
export interface EdgeClusterArgs {
    /**
     * Administrator password for the NSX manager
     */
    adminPassword: pulumi.Input<string>;
    /**
     * ASN for the cluster
     */
    asn?: pulumi.Input<number>;
    /**
     * Audit user password for the NSX manager
     */
    auditPassword: pulumi.Input<string>;
    /**
     * The nodes in the edge cluster
     */
    edgeNodes: pulumi.Input<pulumi.Input<inputs.EdgeClusterEdgeNode>[]>;
    /**
     * One among: XLARGE, LARGE, MEDIUM, SMALL
     */
    formFactor: pulumi.Input<string>;
    /**
     * One among: ACTIVE_ACTIVE, ACTIVE_STANDBY
     */
    highAvailability?: pulumi.Input<string>;
    /**
     * Subnet addresses in CIDR notation that are used to assign addresses to logical links connecting service routers and
     * distributed routers
     */
    internalTransitSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum transmission unit size for the cluster
     */
    mtu: pulumi.Input<number>;
    /**
     * The name of the edge cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The specification for the edge cluster profile
     */
    profile?: pulumi.Input<inputs.EdgeClusterProfile>;
    /**
     * One among: DEFAULT, CUSTOM. If set to CUSTOM a 'profile' must be provided
     */
    profileType: pulumi.Input<string>;
    /**
     * Root user password for the NSX manager
     */
    rootPassword: pulumi.Input<string>;
    /**
     * One among: EBGP, STATIC
     */
    routingType?: pulumi.Input<string>;
    /**
     * Set to true to bypass normal ICMP-based check of Edge TEP / host TEP routability (default is false, meaning do check)
     */
    skipTepRoutabilityCheck?: pulumi.Input<boolean>;
    /**
     * Name for the Tier-0 gateway
     */
    tier0Name?: pulumi.Input<string>;
    /**
     * Name for the Tier-1 gateway
     */
    tier1Name?: pulumi.Input<string>;
    /**
     * Select whether Tier-1 being created per this spec is hosted on the new Edge cluster or not (default value is false,
     * meaning hosted)
     */
    tier1Unhosted?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.EdgeClusterTimeouts>;
    /**
     * Transit subnet addresses in CIDR notation that are used to assign addresses to logical links connecting Tier-0 and
     * Tier-1s
     */
    transitSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}
