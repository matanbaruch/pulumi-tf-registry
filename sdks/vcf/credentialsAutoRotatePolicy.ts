// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CredentialsAutoRotatePolicy extends pulumi.CustomResource {
    /**
     * Get an existing CredentialsAutoRotatePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialsAutoRotatePolicyState, opts?: pulumi.CustomResourceOptions): CredentialsAutoRotatePolicy {
        return new CredentialsAutoRotatePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/credentialsAutoRotatePolicy:CredentialsAutoRotatePolicy';

    /**
     * Returns true if the given object is an instance of CredentialsAutoRotatePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialsAutoRotatePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialsAutoRotatePolicy.__pulumiType;
    }

    /**
     * The number of days after the credentials will be automatically rotated. Must be between 1 and 90
     */
    public readonly autoRotateDays!: pulumi.Output<number | undefined>;
    /**
     * The next time automatic rotation will be started
     */
    public /*out*/ readonly autoRotateNextSchedule!: pulumi.Output<string>;
    /**
     * Enable or disable the automatic credential rotation
     */
    public readonly enableAutoRotation!: pulumi.Output<boolean>;
    /**
     * The ID of the resource which credentials autorotate policy will be managed
     */
    public readonly resourceId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource which credentials autorotate policy will be managed
     */
    public readonly resourceName!: pulumi.Output<string | undefined>;
    /**
     * The type of the resource which credentials autorotate policy will be managed
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The account name which autorotate policy will be managed
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a CredentialsAutoRotatePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialsAutoRotatePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialsAutoRotatePolicyArgs | CredentialsAutoRotatePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialsAutoRotatePolicyState | undefined;
            resourceInputs["autoRotateDays"] = state ? state.autoRotateDays : undefined;
            resourceInputs["autoRotateNextSchedule"] = state ? state.autoRotateNextSchedule : undefined;
            resourceInputs["enableAutoRotation"] = state ? state.enableAutoRotation : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as CredentialsAutoRotatePolicyArgs | undefined;
            if ((!args || args.enableAutoRotation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableAutoRotation'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["autoRotateDays"] = args ? args.autoRotateDays : undefined;
            resourceInputs["enableAutoRotation"] = args ? args.enableAutoRotation : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["autoRotateNextSchedule"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialsAutoRotatePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CredentialsAutoRotatePolicy resources.
 */
export interface CredentialsAutoRotatePolicyState {
    /**
     * The number of days after the credentials will be automatically rotated. Must be between 1 and 90
     */
    autoRotateDays?: pulumi.Input<number>;
    /**
     * The next time automatic rotation will be started
     */
    autoRotateNextSchedule?: pulumi.Input<string>;
    /**
     * Enable or disable the automatic credential rotation
     */
    enableAutoRotation?: pulumi.Input<boolean>;
    /**
     * The ID of the resource which credentials autorotate policy will be managed
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The name of the resource which credentials autorotate policy will be managed
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The type of the resource which credentials autorotate policy will be managed
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The account name which autorotate policy will be managed
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialsAutoRotatePolicy resource.
 */
export interface CredentialsAutoRotatePolicyArgs {
    /**
     * The number of days after the credentials will be automatically rotated. Must be between 1 and 90
     */
    autoRotateDays?: pulumi.Input<number>;
    /**
     * Enable or disable the automatic credential rotation
     */
    enableAutoRotation: pulumi.Input<boolean>;
    /**
     * The ID of the resource which credentials autorotate policy will be managed
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The name of the resource which credentials autorotate policy will be managed
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The type of the resource which credentials autorotate policy will be managed
     */
    resourceType: pulumi.Input<string>;
    /**
     * The account name which autorotate policy will be managed
     */
    userName: pulumi.Input<string>;
}
