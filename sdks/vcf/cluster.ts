// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * ID of the cluster image to be used with the cluster
     */
    public readonly clusterImageId!: pulumi.Output<string | undefined>;
    /**
     * The ID of a workload domain that the cluster belongs to
     */
    public readonly domainId!: pulumi.Output<string>;
    /**
     * The name of a workload domain that the cluster belongs to
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * EVC mode for new cluster, if needed. One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE,
     * INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, AMD_REV_E,
     * AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN
     */
    public readonly evcMode!: pulumi.Output<string | undefined>;
    /**
     * VLAN ID use for NSX Geneve in the workload domain
     */
    public readonly geneveVlanId!: pulumi.Output<number | undefined>;
    /**
     * vSphere High Availability settings for the cluster
     */
    public readonly highAvailabilityEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of ESXi host information from the free pool to consume in a workload domain
     */
    public readonly hosts!: pulumi.Output<outputs.ClusterHost[]>;
    /**
     * Contains the parameters required to create or reuse an IP address pool. Omit for DHCP, provide name only to reuse
     * existing IP Pool, if subnets are provided a new IP Pool will be created
     */
    public readonly ipAddressPool!: pulumi.Output<outputs.ClusterIpAddressPool | undefined>;
    /**
     * Status of the cluster if default or not
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * Status of the cluster if stretched or not
     */
    public /*out*/ readonly isStretched!: pulumi.Output<boolean>;
    /**
     * Name of the cluster to add to the workload domain
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Cluster storage configuration for NFS
     */
    public readonly nfsDatastores!: pulumi.Output<outputs.ClusterNfsDatastore[] | undefined>;
    /**
     * Name of the primary datastore
     */
    public /*out*/ readonly primaryDatastoreName!: pulumi.Output<string>;
    /**
     * Storage type of the primary datastore
     */
    public /*out*/ readonly primaryDatastoreType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTimeouts | undefined>;
    /**
     * vSphere Distributed Switches to add to the cluster
     */
    public readonly vds!: pulumi.Output<outputs.ClusterVd[]>;
    /**
     * Cluster storage configuration for VMFS
     */
    public readonly vmfsDatastore!: pulumi.Output<outputs.ClusterVmfsDatastore | undefined>;
    /**
     * Cluster storage configuration for vSAN
     */
    public readonly vsanDatastore!: pulumi.Output<outputs.ClusterVsanDatastore | undefined>;
    /**
     * Cluster storage configuration for vSAN Remote Datastore
     */
    public readonly vsanRemoteDatastoreCluster!: pulumi.Output<outputs.ClusterVsanRemoteDatastoreCluster | undefined>;
    /**
     * Settings for stretched vSAN clusters
     */
    public readonly vsanStretchConfiguration!: pulumi.Output<outputs.ClusterVsanStretchConfiguration | undefined>;
    /**
     * Cluster storage configuration for VVOL
     */
    public readonly vvolDatastores!: pulumi.Output<outputs.ClusterVvolDatastore[] | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clusterImageId"] = state ? state.clusterImageId : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["evcMode"] = state ? state.evcMode : undefined;
            resourceInputs["geneveVlanId"] = state ? state.geneveVlanId : undefined;
            resourceInputs["highAvailabilityEnabled"] = state ? state.highAvailabilityEnabled : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["ipAddressPool"] = state ? state.ipAddressPool : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["isStretched"] = state ? state.isStretched : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nfsDatastores"] = state ? state.nfsDatastores : undefined;
            resourceInputs["primaryDatastoreName"] = state ? state.primaryDatastoreName : undefined;
            resourceInputs["primaryDatastoreType"] = state ? state.primaryDatastoreType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vds"] = state ? state.vds : undefined;
            resourceInputs["vmfsDatastore"] = state ? state.vmfsDatastore : undefined;
            resourceInputs["vsanDatastore"] = state ? state.vsanDatastore : undefined;
            resourceInputs["vsanRemoteDatastoreCluster"] = state ? state.vsanRemoteDatastoreCluster : undefined;
            resourceInputs["vsanStretchConfiguration"] = state ? state.vsanStretchConfiguration : undefined;
            resourceInputs["vvolDatastores"] = state ? state.vvolDatastores : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.vds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vds'");
            }
            resourceInputs["clusterImageId"] = args ? args.clusterImageId : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["evcMode"] = args ? args.evcMode : undefined;
            resourceInputs["geneveVlanId"] = args ? args.geneveVlanId : undefined;
            resourceInputs["highAvailabilityEnabled"] = args ? args.highAvailabilityEnabled : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["ipAddressPool"] = args ? args.ipAddressPool : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nfsDatastores"] = args ? args.nfsDatastores : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vds"] = args ? args.vds : undefined;
            resourceInputs["vmfsDatastore"] = args ? args.vmfsDatastore : undefined;
            resourceInputs["vsanDatastore"] = args ? args.vsanDatastore : undefined;
            resourceInputs["vsanRemoteDatastoreCluster"] = args ? args.vsanRemoteDatastoreCluster : undefined;
            resourceInputs["vsanStretchConfiguration"] = args ? args.vsanStretchConfiguration : undefined;
            resourceInputs["vvolDatastores"] = args ? args.vvolDatastores : undefined;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["isStretched"] = undefined /*out*/;
            resourceInputs["primaryDatastoreName"] = undefined /*out*/;
            resourceInputs["primaryDatastoreType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * ID of the cluster image to be used with the cluster
     */
    clusterImageId?: pulumi.Input<string>;
    /**
     * The ID of a workload domain that the cluster belongs to
     */
    domainId?: pulumi.Input<string>;
    /**
     * The name of a workload domain that the cluster belongs to
     */
    domainName?: pulumi.Input<string>;
    /**
     * EVC mode for new cluster, if needed. One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE,
     * INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, AMD_REV_E,
     * AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN
     */
    evcMode?: pulumi.Input<string>;
    /**
     * VLAN ID use for NSX Geneve in the workload domain
     */
    geneveVlanId?: pulumi.Input<number>;
    /**
     * vSphere High Availability settings for the cluster
     */
    highAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * List of ESXi host information from the free pool to consume in a workload domain
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.ClusterHost>[]>;
    /**
     * Contains the parameters required to create or reuse an IP address pool. Omit for DHCP, provide name only to reuse
     * existing IP Pool, if subnets are provided a new IP Pool will be created
     */
    ipAddressPool?: pulumi.Input<inputs.ClusterIpAddressPool>;
    /**
     * Status of the cluster if default or not
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Status of the cluster if stretched or not
     */
    isStretched?: pulumi.Input<boolean>;
    /**
     * Name of the cluster to add to the workload domain
     */
    name?: pulumi.Input<string>;
    /**
     * Cluster storage configuration for NFS
     */
    nfsDatastores?: pulumi.Input<pulumi.Input<inputs.ClusterNfsDatastore>[]>;
    /**
     * Name of the primary datastore
     */
    primaryDatastoreName?: pulumi.Input<string>;
    /**
     * Storage type of the primary datastore
     */
    primaryDatastoreType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
    /**
     * vSphere Distributed Switches to add to the cluster
     */
    vds?: pulumi.Input<pulumi.Input<inputs.ClusterVd>[]>;
    /**
     * Cluster storage configuration for VMFS
     */
    vmfsDatastore?: pulumi.Input<inputs.ClusterVmfsDatastore>;
    /**
     * Cluster storage configuration for vSAN
     */
    vsanDatastore?: pulumi.Input<inputs.ClusterVsanDatastore>;
    /**
     * Cluster storage configuration for vSAN Remote Datastore
     */
    vsanRemoteDatastoreCluster?: pulumi.Input<inputs.ClusterVsanRemoteDatastoreCluster>;
    /**
     * Settings for stretched vSAN clusters
     */
    vsanStretchConfiguration?: pulumi.Input<inputs.ClusterVsanStretchConfiguration>;
    /**
     * Cluster storage configuration for VVOL
     */
    vvolDatastores?: pulumi.Input<pulumi.Input<inputs.ClusterVvolDatastore>[]>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * ID of the cluster image to be used with the cluster
     */
    clusterImageId?: pulumi.Input<string>;
    /**
     * The ID of a workload domain that the cluster belongs to
     */
    domainId?: pulumi.Input<string>;
    /**
     * The name of a workload domain that the cluster belongs to
     */
    domainName?: pulumi.Input<string>;
    /**
     * EVC mode for new cluster, if needed. One among: INTEL_MEROM, INTEL_PENRYN, INTEL_NEALEM, INTEL_WESTMERE,
     * INTEL_SANDYBRIDGE, INTEL_IVYBRIDGE, INTEL_HASWELL, INTEL_BROADWELL, INTEL_SKYLAKE, INTEL_CASCADELAKE, AMD_REV_E,
     * AMD_REV_F, AMD_GREYHOUND_NO3DNOW, AMD_GREYHOUND, AMD_BULLDOZER, AMD_PILEDRIVER, AMD_STREAMROLLER, AMD_ZEN
     */
    evcMode?: pulumi.Input<string>;
    /**
     * VLAN ID use for NSX Geneve in the workload domain
     */
    geneveVlanId?: pulumi.Input<number>;
    /**
     * vSphere High Availability settings for the cluster
     */
    highAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * List of ESXi host information from the free pool to consume in a workload domain
     */
    hosts: pulumi.Input<pulumi.Input<inputs.ClusterHost>[]>;
    /**
     * Contains the parameters required to create or reuse an IP address pool. Omit for DHCP, provide name only to reuse
     * existing IP Pool, if subnets are provided a new IP Pool will be created
     */
    ipAddressPool?: pulumi.Input<inputs.ClusterIpAddressPool>;
    /**
     * Name of the cluster to add to the workload domain
     */
    name?: pulumi.Input<string>;
    /**
     * Cluster storage configuration for NFS
     */
    nfsDatastores?: pulumi.Input<pulumi.Input<inputs.ClusterNfsDatastore>[]>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
    /**
     * vSphere Distributed Switches to add to the cluster
     */
    vds: pulumi.Input<pulumi.Input<inputs.ClusterVd>[]>;
    /**
     * Cluster storage configuration for VMFS
     */
    vmfsDatastore?: pulumi.Input<inputs.ClusterVmfsDatastore>;
    /**
     * Cluster storage configuration for vSAN
     */
    vsanDatastore?: pulumi.Input<inputs.ClusterVsanDatastore>;
    /**
     * Cluster storage configuration for vSAN Remote Datastore
     */
    vsanRemoteDatastoreCluster?: pulumi.Input<inputs.ClusterVsanRemoteDatastoreCluster>;
    /**
     * Settings for stretched vSAN clusters
     */
    vsanStretchConfiguration?: pulumi.Input<inputs.ClusterVsanStretchConfiguration>;
    /**
     * Cluster storage configuration for VVOL
     */
    vvolDatastores?: pulumi.Input<pulumi.Input<inputs.ClusterVvolDatastore>[]>;
}
