// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Csr extends pulumi.CustomResource {
    /**
     * Get an existing Csr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsrState, opts?: pulumi.CustomResourceOptions): Csr {
        return new Csr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/csr:Csr';

    /**
     * Returns true if the given object is an instance of Csr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Csr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Csr.__pulumiType;
    }

    /**
     * ISO 3166 country code where company is legally registered
     */
    public readonly country!: pulumi.Output<string>;
    /**
     * Resulting CSR
     */
    public /*out*/ readonly csrs!: pulumi.Output<outputs.CsrCsr[]>;
    /**
     * Domain Id or Name for which the CSRs should be generated
     */
    public readonly domainId!: pulumi.Output<string>;
    /**
     * Contact email address
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * FQDN of the resource
     */
    public readonly fqdn!: pulumi.Output<string>;
    /**
     * Certificate public key size. One among: 2048, 3072, 4096
     */
    public readonly keySize!: pulumi.Output<number>;
    /**
     * The city or locality where company is legally registered
     */
    public readonly locality!: pulumi.Output<string>;
    /**
     * The name under which your company is known. The listed organization must be the legal registrant of the domain name in
     * the certificate request.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * Organization with which the certificate is associated
     */
    public readonly organizationUnit!: pulumi.Output<string>;
    /**
     * Resources for which the CSRs are to be generated. One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER,
     * VROPS, VRSLCM, VXRAIL_MANAGER
     */
    public readonly resource!: pulumi.Output<string>;
    /**
     * Full name (do not abbreviate) of the state, province, region, or territory where your company is legally registered.
     */
    public readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CsrTimeouts | undefined>;

    /**
     * Create a Csr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CsrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsrArgs | CsrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsrState | undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["csrs"] = state ? state.csrs : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["organizationUnit"] = state ? state.organizationUnit : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CsrArgs | undefined;
            if ((!args || args.country === undefined) && !opts.urn) {
                throw new Error("Missing required property 'country'");
            }
            if ((!args || args.domainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainId'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.keySize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keySize'");
            }
            if ((!args || args.locality === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locality'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.organizationUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationUnit'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["organizationUnit"] = args ? args.organizationUnit : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["csrs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Csr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Csr resources.
 */
export interface CsrState {
    /**
     * ISO 3166 country code where company is legally registered
     */
    country?: pulumi.Input<string>;
    /**
     * Resulting CSR
     */
    csrs?: pulumi.Input<pulumi.Input<inputs.CsrCsr>[]>;
    /**
     * Domain Id or Name for which the CSRs should be generated
     */
    domainId?: pulumi.Input<string>;
    /**
     * Contact email address
     */
    email?: pulumi.Input<string>;
    /**
     * FQDN of the resource
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Certificate public key size. One among: 2048, 3072, 4096
     */
    keySize?: pulumi.Input<number>;
    /**
     * The city or locality where company is legally registered
     */
    locality?: pulumi.Input<string>;
    /**
     * The name under which your company is known. The listed organization must be the legal registrant of the domain name in
     * the certificate request.
     */
    organization?: pulumi.Input<string>;
    /**
     * Organization with which the certificate is associated
     */
    organizationUnit?: pulumi.Input<string>;
    /**
     * Resources for which the CSRs are to be generated. One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER,
     * VROPS, VRSLCM, VXRAIL_MANAGER
     */
    resource?: pulumi.Input<string>;
    /**
     * Full name (do not abbreviate) of the state, province, region, or territory where your company is legally registered.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CsrTimeouts>;
}

/**
 * The set of arguments for constructing a Csr resource.
 */
export interface CsrArgs {
    /**
     * ISO 3166 country code where company is legally registered
     */
    country: pulumi.Input<string>;
    /**
     * Domain Id or Name for which the CSRs should be generated
     */
    domainId: pulumi.Input<string>;
    /**
     * Contact email address
     */
    email: pulumi.Input<string>;
    /**
     * FQDN of the resource
     */
    fqdn: pulumi.Input<string>;
    /**
     * Certificate public key size. One among: 2048, 3072, 4096
     */
    keySize: pulumi.Input<number>;
    /**
     * The city or locality where company is legally registered
     */
    locality: pulumi.Input<string>;
    /**
     * The name under which your company is known. The listed organization must be the legal registrant of the domain name in
     * the certificate request.
     */
    organization: pulumi.Input<string>;
    /**
     * Organization with which the certificate is associated
     */
    organizationUnit: pulumi.Input<string>;
    /**
     * Resources for which the CSRs are to be generated. One among: SDDC_MANAGER, PSC, VCENTER, NSX_MANAGER, NSXT_MANAGER,
     * VROPS, VRSLCM, VXRAIL_MANAGER
     */
    resource: pulumi.Input<string>;
    /**
     * Full name (do not abbreviate) of the state, province, region, or territory where your company is legally registered.
     */
    state: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CsrTimeouts>;
}
