// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExternalCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ExternalCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalCertificateState, opts?: pulumi.CustomResourceOptions): ExternalCertificate {
        return new ExternalCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/externalCertificate:ExternalCertificate';

    /**
     * Returns true if the given object is an instance of ExternalCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalCertificate.__pulumiType;
    }

    /**
     * Certificate of the CA issuing the replacement certificate
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    /**
     * Certificate Chain
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * The resulting certificate details
     */
    public /*out*/ readonly certificates!: pulumi.Output<outputs.ExternalCertificateCertificate[]>;
    /**
     * The ID of the CSR generated for a resource. A generated CSR is required for certificate replacement.
     */
    public readonly csrId!: pulumi.Output<string>;
    /**
     * Resource Certificate
     */
    public readonly resourceCertificate!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ExternalCertificateTimeouts | undefined>;

    /**
     * Create a ExternalCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalCertificateArgs | ExternalCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalCertificateState | undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["csrId"] = state ? state.csrId : undefined;
            resourceInputs["resourceCertificate"] = state ? state.resourceCertificate : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ExternalCertificateArgs | undefined;
            if ((!args || args.csrId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csrId'");
            }
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["csrId"] = args ? args.csrId : undefined;
            resourceInputs["resourceCertificate"] = args ? args.resourceCertificate : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["certificates"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExternalCertificate resources.
 */
export interface ExternalCertificateState {
    /**
     * Certificate of the CA issuing the replacement certificate
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Certificate Chain
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The resulting certificate details
     */
    certificates?: pulumi.Input<pulumi.Input<inputs.ExternalCertificateCertificate>[]>;
    /**
     * The ID of the CSR generated for a resource. A generated CSR is required for certificate replacement.
     */
    csrId?: pulumi.Input<string>;
    /**
     * Resource Certificate
     */
    resourceCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExternalCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a ExternalCertificate resource.
 */
export interface ExternalCertificateArgs {
    /**
     * Certificate of the CA issuing the replacement certificate
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Certificate Chain
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * The ID of the CSR generated for a resource. A generated CSR is required for certificate replacement.
     */
    csrId: pulumi.Input<string>;
    /**
     * Resource Certificate
     */
    resourceCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExternalCertificateTimeouts>;
}
