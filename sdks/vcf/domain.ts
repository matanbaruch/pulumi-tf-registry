// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainState, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/domain:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * Specification representing the clusters to be added to the workload domain
     */
    public readonly clusters!: pulumi.Output<outputs.DomainCluster[]>;
    /**
     * Shows whether the workload domain is joined to the management domain SSO
     */
    public /*out*/ readonly isManagementSsoDomain!: pulumi.Output<boolean>;
    /**
     * Name of the domain (from 3 to 20 characters)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specification details for NSX configuration
     */
    public readonly nsxConfiguration!: pulumi.Output<outputs.DomainNsxConfiguration | undefined>;
    /**
     * Organization name of the workload domain
     */
    public readonly orgName!: pulumi.Output<string | undefined>;
    /**
     * ID of the SSO domain associated with the workload domain
     */
    public /*out*/ readonly ssoId!: pulumi.Output<string>;
    /**
     * Name of the SSO domain associated with the workload domain
     */
    public /*out*/ readonly ssoName!: pulumi.Output<string>;
    /**
     * Status of the workload domain
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DomainTimeouts | undefined>;
    /**
     * Type of the workload domain
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specification describing vCenter Server instance settings
     */
    public readonly vcenterConfiguration!: pulumi.Output<outputs.DomainVcenterConfiguration>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainArgs | DomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainState | undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["isManagementSsoDomain"] = state ? state.isManagementSsoDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxConfiguration"] = state ? state.nsxConfiguration : undefined;
            resourceInputs["orgName"] = state ? state.orgName : undefined;
            resourceInputs["ssoId"] = state ? state.ssoId : undefined;
            resourceInputs["ssoName"] = state ? state.ssoName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vcenterConfiguration"] = state ? state.vcenterConfiguration : undefined;
        } else {
            const args = argsOrState as DomainArgs | undefined;
            if ((!args || args.clusters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusters'");
            }
            if ((!args || args.vcenterConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterConfiguration'");
            }
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxConfiguration"] = args ? args.nsxConfiguration : undefined;
            resourceInputs["orgName"] = args ? args.orgName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vcenterConfiguration"] = args ? args.vcenterConfiguration : undefined;
            resourceInputs["isManagementSsoDomain"] = undefined /*out*/;
            resourceInputs["ssoId"] = undefined /*out*/;
            resourceInputs["ssoName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Domain resources.
 */
export interface DomainState {
    /**
     * Specification representing the clusters to be added to the workload domain
     */
    clusters?: pulumi.Input<pulumi.Input<inputs.DomainCluster>[]>;
    /**
     * Shows whether the workload domain is joined to the management domain SSO
     */
    isManagementSsoDomain?: pulumi.Input<boolean>;
    /**
     * Name of the domain (from 3 to 20 characters)
     */
    name?: pulumi.Input<string>;
    /**
     * Specification details for NSX configuration
     */
    nsxConfiguration?: pulumi.Input<inputs.DomainNsxConfiguration>;
    /**
     * Organization name of the workload domain
     */
    orgName?: pulumi.Input<string>;
    /**
     * ID of the SSO domain associated with the workload domain
     */
    ssoId?: pulumi.Input<string>;
    /**
     * Name of the SSO domain associated with the workload domain
     */
    ssoName?: pulumi.Input<string>;
    /**
     * Status of the workload domain
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DomainTimeouts>;
    /**
     * Type of the workload domain
     */
    type?: pulumi.Input<string>;
    /**
     * Specification describing vCenter Server instance settings
     */
    vcenterConfiguration?: pulumi.Input<inputs.DomainVcenterConfiguration>;
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * Specification representing the clusters to be added to the workload domain
     */
    clusters: pulumi.Input<pulumi.Input<inputs.DomainCluster>[]>;
    /**
     * Name of the domain (from 3 to 20 characters)
     */
    name?: pulumi.Input<string>;
    /**
     * Specification details for NSX configuration
     */
    nsxConfiguration?: pulumi.Input<inputs.DomainNsxConfiguration>;
    /**
     * Organization name of the workload domain
     */
    orgName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DomainTimeouts>;
    /**
     * Specification describing vCenter Server instance settings
     */
    vcenterConfiguration: pulumi.Input<inputs.DomainVcenterConfiguration>;
}
