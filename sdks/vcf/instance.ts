// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcf:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * Enable VCF Customer Experience Improvement Program
     */
    public readonly ceipEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cluster!: pulumi.Output<outputs.InstanceCluster>;
    /**
     * SDDC Task creation timestamp
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    public readonly dns!: pulumi.Output<outputs.InstanceDns>;
    /**
     * The version of the distributed virtual switches to be used. One among: 7.0.0, 7.0.2, 7.0.3, 8.0.0
     */
    public readonly dvSwitchVersion!: pulumi.Output<string>;
    public readonly dvs!: pulumi.Output<outputs.InstanceDv[]>;
    public readonly esxLicense!: pulumi.Output<string | undefined>;
    /**
     * Enable Federal Information Processing Standards
     */
    public readonly fipsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly hosts!: pulumi.Output<outputs.InstanceHost[]>;
    /**
     * Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only
     * letters, numbers and the following symbols: '-'. Example: "sfo01-m01", Length 3-20 characters
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * A string identifying the network pool associated with the management domain
     */
    public readonly managementPoolName!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.InstanceNetwork[]>;
    public readonly nsx!: pulumi.Output<outputs.InstanceNsx | undefined>;
    /**
     * List of NTP servers
     */
    public readonly ntpServers!: pulumi.Output<string[]>;
    /**
     * Parameters for deployment/configuration of Platform Services Controller
     */
    public readonly pscs!: pulumi.Output<outputs.InstancePsc[] | undefined>;
    public readonly sddcManager!: pulumi.Output<outputs.InstanceSddcManager | undefined>;
    /**
     * FQDN of the resulting SDDC Manager
     */
    public /*out*/ readonly sddcManagerFqdn!: pulumi.Output<string>;
    /**
     * ID of the resulting SDDC Manager
     */
    public /*out*/ readonly sddcManagerId!: pulumi.Output<string>;
    /**
     * Version of the resulting SDDC Manager
     */
    public /*out*/ readonly sddcManagerVersion!: pulumi.Output<string>;
    public readonly security!: pulumi.Output<outputs.InstanceSecurity | undefined>;
    /**
     * Skip ESXi thumbprint validation
     */
    public readonly skipEsxThumbprintValidation!: pulumi.Output<boolean>;
    /**
     * SDDC creation Task status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly taskName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceTimeouts | undefined>;
    public readonly vcenter!: pulumi.Output<outputs.InstanceVcenter>;
    public readonly vsan!: pulumi.Output<outputs.InstanceVsan | undefined>;
    public readonly vxManager!: pulumi.Output<outputs.InstanceVxManager | undefined>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["ceipEnabled"] = state ? state.ceipEnabled : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dvSwitchVersion"] = state ? state.dvSwitchVersion : undefined;
            resourceInputs["dvs"] = state ? state.dvs : undefined;
            resourceInputs["esxLicense"] = state ? state.esxLicense : undefined;
            resourceInputs["fipsEnabled"] = state ? state.fipsEnabled : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["managementPoolName"] = state ? state.managementPoolName : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nsx"] = state ? state.nsx : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["pscs"] = state ? state.pscs : undefined;
            resourceInputs["sddcManager"] = state ? state.sddcManager : undefined;
            resourceInputs["sddcManagerFqdn"] = state ? state.sddcManagerFqdn : undefined;
            resourceInputs["sddcManagerId"] = state ? state.sddcManagerId : undefined;
            resourceInputs["sddcManagerVersion"] = state ? state.sddcManagerVersion : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["skipEsxThumbprintValidation"] = state ? state.skipEsxThumbprintValidation : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["taskName"] = state ? state.taskName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vcenter"] = state ? state.vcenter : undefined;
            resourceInputs["vsan"] = state ? state.vsan : undefined;
            resourceInputs["vxManager"] = state ? state.vxManager : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.dns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dns'");
            }
            if ((!args || args.dvSwitchVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dvSwitchVersion'");
            }
            if ((!args || args.dvs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dvs'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.managementPoolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementPoolName'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.ntpServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ntpServers'");
            }
            if ((!args || args.skipEsxThumbprintValidation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skipEsxThumbprintValidation'");
            }
            if ((!args || args.vcenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenter'");
            }
            resourceInputs["ceipEnabled"] = args ? args.ceipEnabled : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dvSwitchVersion"] = args ? args.dvSwitchVersion : undefined;
            resourceInputs["dvs"] = args ? args.dvs : undefined;
            resourceInputs["esxLicense"] = args?.esxLicense ? pulumi.secret(args.esxLicense) : undefined;
            resourceInputs["fipsEnabled"] = args ? args.fipsEnabled : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["managementPoolName"] = args ? args.managementPoolName : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nsx"] = args ? args.nsx : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["pscs"] = args ? args.pscs : undefined;
            resourceInputs["sddcManager"] = args ? args.sddcManager : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["skipEsxThumbprintValidation"] = args ? args.skipEsxThumbprintValidation : undefined;
            resourceInputs["taskName"] = args ? args.taskName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vcenter"] = args ? args.vcenter : undefined;
            resourceInputs["vsan"] = args ? args.vsan : undefined;
            resourceInputs["vxManager"] = args ? args.vxManager : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["sddcManagerFqdn"] = undefined /*out*/;
            resourceInputs["sddcManagerId"] = undefined /*out*/;
            resourceInputs["sddcManagerVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["esxLicense"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * Enable VCF Customer Experience Improvement Program
     */
    ceipEnabled?: pulumi.Input<boolean>;
    cluster?: pulumi.Input<inputs.InstanceCluster>;
    /**
     * SDDC Task creation timestamp
     */
    creationTimestamp?: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.InstanceDns>;
    /**
     * The version of the distributed virtual switches to be used. One among: 7.0.0, 7.0.2, 7.0.3, 8.0.0
     */
    dvSwitchVersion?: pulumi.Input<string>;
    dvs?: pulumi.Input<pulumi.Input<inputs.InstanceDv>[]>;
    esxLicense?: pulumi.Input<string>;
    /**
     * Enable Federal Information Processing Standards
     */
    fipsEnabled?: pulumi.Input<boolean>;
    hosts?: pulumi.Input<pulumi.Input<inputs.InstanceHost>[]>;
    /**
     * Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only
     * letters, numbers and the following symbols: '-'. Example: "sfo01-m01", Length 3-20 characters
     */
    instanceId?: pulumi.Input<string>;
    /**
     * A string identifying the network pool associated with the management domain
     */
    managementPoolName?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.InstanceNetwork>[]>;
    nsx?: pulumi.Input<inputs.InstanceNsx>;
    /**
     * List of NTP servers
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Parameters for deployment/configuration of Platform Services Controller
     */
    pscs?: pulumi.Input<pulumi.Input<inputs.InstancePsc>[]>;
    sddcManager?: pulumi.Input<inputs.InstanceSddcManager>;
    /**
     * FQDN of the resulting SDDC Manager
     */
    sddcManagerFqdn?: pulumi.Input<string>;
    /**
     * ID of the resulting SDDC Manager
     */
    sddcManagerId?: pulumi.Input<string>;
    /**
     * Version of the resulting SDDC Manager
     */
    sddcManagerVersion?: pulumi.Input<string>;
    security?: pulumi.Input<inputs.InstanceSecurity>;
    /**
     * Skip ESXi thumbprint validation
     */
    skipEsxThumbprintValidation?: pulumi.Input<boolean>;
    /**
     * SDDC creation Task status
     */
    status?: pulumi.Input<string>;
    taskName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceTimeouts>;
    vcenter?: pulumi.Input<inputs.InstanceVcenter>;
    vsan?: pulumi.Input<inputs.InstanceVsan>;
    vxManager?: pulumi.Input<inputs.InstanceVxManager>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Enable VCF Customer Experience Improvement Program
     */
    ceipEnabled?: pulumi.Input<boolean>;
    cluster: pulumi.Input<inputs.InstanceCluster>;
    dns: pulumi.Input<inputs.InstanceDns>;
    /**
     * The version of the distributed virtual switches to be used. One among: 7.0.0, 7.0.2, 7.0.3, 8.0.0
     */
    dvSwitchVersion: pulumi.Input<string>;
    dvs: pulumi.Input<pulumi.Input<inputs.InstanceDv>[]>;
    esxLicense?: pulumi.Input<string>;
    /**
     * Enable Federal Information Processing Standards
     */
    fipsEnabled?: pulumi.Input<boolean>;
    hosts: pulumi.Input<pulumi.Input<inputs.InstanceHost>[]>;
    /**
     * Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only
     * letters, numbers and the following symbols: '-'. Example: "sfo01-m01", Length 3-20 characters
     */
    instanceId: pulumi.Input<string>;
    /**
     * A string identifying the network pool associated with the management domain
     */
    managementPoolName: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.InstanceNetwork>[]>;
    nsx?: pulumi.Input<inputs.InstanceNsx>;
    /**
     * List of NTP servers
     */
    ntpServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Parameters for deployment/configuration of Platform Services Controller
     */
    pscs?: pulumi.Input<pulumi.Input<inputs.InstancePsc>[]>;
    sddcManager?: pulumi.Input<inputs.InstanceSddcManager>;
    security?: pulumi.Input<inputs.InstanceSecurity>;
    /**
     * Skip ESXi thumbprint validation
     */
    skipEsxThumbprintValidation: pulumi.Input<boolean>;
    taskName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceTimeouts>;
    vcenter: pulumi.Input<inputs.InstanceVcenter>;
    vsan?: pulumi.Input<inputs.InstanceVsan>;
    vxManager?: pulumi.Input<inputs.InstanceVxManager>;
}
