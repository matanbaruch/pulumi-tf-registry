// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface HeartbeatCheckMonitoredResource {
    /**
     * Name of the hosting provider
     */
    host?: pulumi.Input<string>;
}

export interface PagespeedCheckAlertConfig {
    /**
     * An alert will be sent if the size of the page is larger than this value (kb).
     */
    alertBigger?: pulumi.Input<number>;
    /**
     * An alert will be sent if the load time of the page exceeds this value (ms).
     */
    alertSlower?: pulumi.Input<number>;
    /**
     * An alert will be sent if the size of the page is smaller than this value (kb).
     */
    alertSmaller?: pulumi.Input<number>;
}

export interface PagespeedCheckMonitoredResource {
    /**
     * URL or IP address of the website under test
     */
    address: pulumi.Input<string>;
}

export interface SslCheckAlertConfig {
    /**
     * List representing when alerts should be sent (days). Must be exactly 3 numerical values
     */
    alertAts: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Whether to enable alerts when SSL certificate issues are found
     */
    onBroken?: pulumi.Input<boolean>;
    /**
     * Whether to enable alerts when the SSL certificate is to expire
     */
    onExpiry?: pulumi.Input<boolean>;
    /**
     * Whether to enable alerts when mixed content is found
     */
    onMixed?: pulumi.Input<boolean>;
    /**
     * Whether to enable alert reminders
     */
    onReminder?: pulumi.Input<boolean>;
}

export interface SslCheckMonitoredResource {
    /**
     * URL of the server under test
     */
    address: pulumi.Input<string>;
    /**
     * Hostname of the server under test
     */
    hostname?: pulumi.Input<string>;
}

export interface UptimeCheckDnsCheck {
    /**
     * List of IP addresses to compare against returned DNS records
     */
    dnsIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * FQDN or IP address of the nameserver to query
     */
    dnsServer?: pulumi.Input<string>;
}

export interface UptimeCheckHttpCheck {
    /**
     * Basic Authentication (RFC7235) configuration block
     */
    basicAuthentication?: pulumi.Input<inputs.UptimeCheckHttpCheckBasicAuthentication>;
    /**
     * Content matcher configuration block. This is used to assert values within the response of the request
     */
    contentMatchers?: pulumi.Input<inputs.UptimeCheckHttpCheckContentMatchers>;
    /**
     * Whether to enable cookie storage
     */
    enableCookies?: pulumi.Input<boolean>;
    /**
     * Specify where the redirect chain should end
     */
    finalEndpoint?: pulumi.Input<string>;
    /**
     * Whether to follow redirects when testing. Disabled by default
     */
    followRedirects?: pulumi.Input<boolean>;
    /**
     * Represents headers to be sent when making requests
     */
    requestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of HTTP check. Either HTTP, or HEAD
     */
    requestMethod?: pulumi.Input<string>;
    /**
     * Payload submitted with the request. Setting this updates the check to use the HTTP POST verb. Only one of `request_payload` or `request_payload_raw` may be specified
     */
    requestPayload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Raw payload submitted with the request. Setting this updates the check to use the HTTP POST verb. Only one of `request_payload` or `request_payload_raw` may be specified
     */
    requestPayloadRaw?: pulumi.Input<string>;
    /**
     * List of status codes that trigger an alert. If not specified then the default status codes are used. Once set, the default status codes cannot be restored and ommitting this field does not clear the attribute
     */
    statusCodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of seconds to wait to receive the first byte
     */
    timeout?: pulumi.Input<number>;
    /**
     * Custom user agent string set when testing
     */
    userAgent?: pulumi.Input<string>;
    /**
     * Whether to send an alert if the SSL certificate is soon to expire
     */
    validateSsl?: pulumi.Input<boolean>;
}

export interface UptimeCheckHttpCheckBasicAuthentication {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface UptimeCheckHttpCheckContentMatchers {
    /**
     * String to look for within the response. Considered down if not found
     */
    content: pulumi.Input<string>;
    /**
     * Include header content in string match search
     */
    includeHeaders?: pulumi.Input<boolean>;
    /**
     * Whether to consider the check as down if the content is present within the response
     */
    matcher?: pulumi.Input<string>;
}

export interface UptimeCheckIcmpCheck {
    /**
     * Dummy attribute to allow for a nested block. This field should not be changed
     */
    enabled?: pulumi.Input<boolean>;
}

export interface UptimeCheckLocation {
    description: pulumi.Input<string>;
    ipv4: pulumi.Input<string>;
    ipv6: pulumi.Input<string>;
    region: pulumi.Input<string>;
    regionCode: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface UptimeCheckMonitoredResource {
    /**
     * URL, FQDN, or IP address of the server under test
     */
    address: pulumi.Input<string>;
    /**
     * Name of the hosting provider
     */
    host?: pulumi.Input<string>;
}

export interface UptimeCheckTcpCheck {
    /**
     * Authentication configuration block
     */
    authentication?: pulumi.Input<inputs.UptimeCheckTcpCheckAuthentication>;
    /**
     * Destination port for TCP checks
     */
    port: pulumi.Input<number>;
    /**
     * Type of TCP check. Either SMTP, SSH or TCP
     */
    protocol?: pulumi.Input<string>;
    /**
     * The number of seconds to wait to receive the first byte
     */
    timeout?: pulumi.Input<number>;
}

export interface UptimeCheckTcpCheckAuthentication {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
