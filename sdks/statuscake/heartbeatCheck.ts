// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HeartbeatCheck extends pulumi.CustomResource {
    /**
     * Get an existing HeartbeatCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HeartbeatCheckState, opts?: pulumi.CustomResourceOptions): HeartbeatCheck {
        return new HeartbeatCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'statuscake:index/heartbeatCheck:HeartbeatCheck';

    /**
     * Returns true if the given object is an instance of HeartbeatCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HeartbeatCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HeartbeatCheck.__pulumiType;
    }

    /**
     * URL of the heartbeat check
     */
    public /*out*/ readonly checkUrl!: pulumi.Output<string>;
    /**
     * List of contact group IDs
     */
    public readonly contactGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Monitored resource configuration block. This describes the server under test
     */
    public readonly monitoredResource!: pulumi.Output<outputs.HeartbeatCheckMonitoredResource | undefined>;
    /**
     * Name of the check
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the check should be run
     */
    public readonly paused!: pulumi.Output<boolean | undefined>;
    /**
     * Number of seconds since the last ping before the check is considered down.
     */
    public readonly period!: pulumi.Output<number>;
    /**
     * List of tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a HeartbeatCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HeartbeatCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HeartbeatCheckArgs | HeartbeatCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HeartbeatCheckState | undefined;
            resourceInputs["checkUrl"] = state ? state.checkUrl : undefined;
            resourceInputs["contactGroups"] = state ? state.contactGroups : undefined;
            resourceInputs["monitoredResource"] = state ? state.monitoredResource : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as HeartbeatCheckArgs | undefined;
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            resourceInputs["contactGroups"] = args ? args.contactGroups : undefined;
            resourceInputs["monitoredResource"] = args ? args.monitoredResource : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["checkUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HeartbeatCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HeartbeatCheck resources.
 */
export interface HeartbeatCheckState {
    /**
     * URL of the heartbeat check
     */
    checkUrl?: pulumi.Input<string>;
    /**
     * List of contact group IDs
     */
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Monitored resource configuration block. This describes the server under test
     */
    monitoredResource?: pulumi.Input<inputs.HeartbeatCheckMonitoredResource>;
    /**
     * Name of the check
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the check should be run
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Number of seconds since the last ping before the check is considered down.
     */
    period?: pulumi.Input<number>;
    /**
     * List of tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a HeartbeatCheck resource.
 */
export interface HeartbeatCheckArgs {
    /**
     * List of contact group IDs
     */
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Monitored resource configuration block. This describes the server under test
     */
    monitoredResource?: pulumi.Input<inputs.HeartbeatCheckMonitoredResource>;
    /**
     * Name of the check
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the check should be run
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Number of seconds since the last ping before the check is considered down.
     */
    period: pulumi.Input<number>;
    /**
     * List of tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
