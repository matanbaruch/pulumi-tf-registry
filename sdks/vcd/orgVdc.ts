// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrgVdc extends pulumi.CustomResource {
    /**
     * Get an existing OrgVdc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgVdcState, opts?: pulumi.CustomResourceOptions): OrgVdc {
        return new OrgVdc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/orgVdc:OrgVdc';

    /**
     * Returns true if the given object is an instance of OrgVdc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgVdc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgVdc.__pulumiType;
    }

    /**
     * The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
     */
    public readonly allocationModel!: pulumi.Output<string>;
    /**
     * Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
     * ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
     */
    public readonly allowOverCommit!: pulumi.Output<boolean>;
    /**
     * The compute capacity allocated to this VDC.
     */
    public readonly computeCapacity!: pulumi.Output<outputs.OrgVdcComputeCapacity>;
    /**
     * Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
     * 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
     * element is empty, vCD sets a value
     */
    public readonly cpuGuaranteed!: pulumi.Output<number>;
    /**
     * Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
     * consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
     * AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
     */
    public readonly cpuSpeed!: pulumi.Output<number>;
    /**
     * ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
     */
    public readonly defaultComputePolicyId!: pulumi.Output<string>;
    /**
     * ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
     *
     * @deprecated Deprecated
     */
    public readonly defaultVmSizingPolicyId!: pulumi.Output<string>;
    /**
     * When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
     */
    public readonly deleteForce!: pulumi.Output<boolean | undefined>;
    /**
     * When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
     * normally allows removal.
     */
    public readonly deleteRecursive!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
     *
     * @deprecated Deprecated
     */
    public readonly edgeClusterId!: pulumi.Output<string>;
    /**
     * Set to true to indicate if the Flex VDC is to be elastic.
     */
    public readonly elasticity!: pulumi.Output<boolean>;
    /**
     * Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
     * can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
     * provisioning, all provisioning operations will result in full clones.
     */
    public readonly enableFastProvisioning!: pulumi.Output<boolean | undefined>;
    /**
     * Set to true to enable distributed firewall - Only applies to NSX-V VDCs
     */
    public readonly enableNsxvDistributedFirewall!: pulumi.Output<boolean>;
    /**
     * Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
     * provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
     */
    public readonly enableThinProvisioning!: pulumi.Output<boolean | undefined>;
    /**
     * True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
     * behaviour depends on enablement at the organization level and at the system level.
     */
    public readonly enableVmDiscovery!: pulumi.Output<boolean | undefined>;
    /**
     * True if this VDC is enabled for use by the organization VDCs. Default is true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
     */
    public readonly includeVmMemoryOverhead!: pulumi.Output<boolean>;
    /**
     * Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
     * then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
     * Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
     */
    public readonly memoryGuaranteed!: pulumi.Output<number>;
    /**
     * Key and value pairs for Org VDC metadata
     *
     * @deprecated Deprecated
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Metadata entries for the given VDC
     */
    public readonly metadataEntries!: pulumi.Output<outputs.OrgVdcMetadataEntry[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
     */
    public readonly networkPoolName!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
     * deployed.
     */
    public readonly networkQuota!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
     */
    public readonly nicQuota!: pulumi.Output<number | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * A reference to the Provider VDC from which this organization VDC is provisioned.
     */
    public readonly providerVdcName!: pulumi.Output<string>;
    /**
     * Storage profiles supported by this VDC.
     */
    public readonly storageProfiles!: pulumi.Output<outputs.OrgVdcStorageProfile[]>;
    /**
     * Set of VM Placement Policy IDs
     */
    public readonly vmPlacementPolicyIds!: pulumi.Output<string[]>;
    /**
     * The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
     * templates. Defaults to 0, which specifies an unlimited number.
     */
    public readonly vmQuota!: pulumi.Output<number | undefined>;
    /**
     * Set of VM Sizing Policy IDs
     */
    public readonly vmSizingPolicyIds!: pulumi.Output<string[]>;
    /**
     * Set of VM vGPU Policy IDs
     */
    public readonly vmVgpuPolicyIds!: pulumi.Output<string[]>;

    /**
     * Create a OrgVdc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgVdcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgVdcArgs | OrgVdcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgVdcState | undefined;
            resourceInputs["allocationModel"] = state ? state.allocationModel : undefined;
            resourceInputs["allowOverCommit"] = state ? state.allowOverCommit : undefined;
            resourceInputs["computeCapacity"] = state ? state.computeCapacity : undefined;
            resourceInputs["cpuGuaranteed"] = state ? state.cpuGuaranteed : undefined;
            resourceInputs["cpuSpeed"] = state ? state.cpuSpeed : undefined;
            resourceInputs["defaultComputePolicyId"] = state ? state.defaultComputePolicyId : undefined;
            resourceInputs["defaultVmSizingPolicyId"] = state ? state.defaultVmSizingPolicyId : undefined;
            resourceInputs["deleteForce"] = state ? state.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = state ? state.deleteRecursive : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeClusterId"] = state ? state.edgeClusterId : undefined;
            resourceInputs["elasticity"] = state ? state.elasticity : undefined;
            resourceInputs["enableFastProvisioning"] = state ? state.enableFastProvisioning : undefined;
            resourceInputs["enableNsxvDistributedFirewall"] = state ? state.enableNsxvDistributedFirewall : undefined;
            resourceInputs["enableThinProvisioning"] = state ? state.enableThinProvisioning : undefined;
            resourceInputs["enableVmDiscovery"] = state ? state.enableVmDiscovery : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["includeVmMemoryOverhead"] = state ? state.includeVmMemoryOverhead : undefined;
            resourceInputs["memoryGuaranteed"] = state ? state.memoryGuaranteed : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPoolName"] = state ? state.networkPoolName : undefined;
            resourceInputs["networkQuota"] = state ? state.networkQuota : undefined;
            resourceInputs["nicQuota"] = state ? state.nicQuota : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["providerVdcName"] = state ? state.providerVdcName : undefined;
            resourceInputs["storageProfiles"] = state ? state.storageProfiles : undefined;
            resourceInputs["vmPlacementPolicyIds"] = state ? state.vmPlacementPolicyIds : undefined;
            resourceInputs["vmQuota"] = state ? state.vmQuota : undefined;
            resourceInputs["vmSizingPolicyIds"] = state ? state.vmSizingPolicyIds : undefined;
            resourceInputs["vmVgpuPolicyIds"] = state ? state.vmVgpuPolicyIds : undefined;
        } else {
            const args = argsOrState as OrgVdcArgs | undefined;
            if ((!args || args.allocationModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allocationModel'");
            }
            if ((!args || args.computeCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeCapacity'");
            }
            if ((!args || args.providerVdcName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerVdcName'");
            }
            if ((!args || args.storageProfiles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageProfiles'");
            }
            resourceInputs["allocationModel"] = args ? args.allocationModel : undefined;
            resourceInputs["allowOverCommit"] = args ? args.allowOverCommit : undefined;
            resourceInputs["computeCapacity"] = args ? args.computeCapacity : undefined;
            resourceInputs["cpuGuaranteed"] = args ? args.cpuGuaranteed : undefined;
            resourceInputs["cpuSpeed"] = args ? args.cpuSpeed : undefined;
            resourceInputs["defaultComputePolicyId"] = args ? args.defaultComputePolicyId : undefined;
            resourceInputs["defaultVmSizingPolicyId"] = args ? args.defaultVmSizingPolicyId : undefined;
            resourceInputs["deleteForce"] = args ? args.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = args ? args.deleteRecursive : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeClusterId"] = args ? args.edgeClusterId : undefined;
            resourceInputs["elasticity"] = args ? args.elasticity : undefined;
            resourceInputs["enableFastProvisioning"] = args ? args.enableFastProvisioning : undefined;
            resourceInputs["enableNsxvDistributedFirewall"] = args ? args.enableNsxvDistributedFirewall : undefined;
            resourceInputs["enableThinProvisioning"] = args ? args.enableThinProvisioning : undefined;
            resourceInputs["enableVmDiscovery"] = args ? args.enableVmDiscovery : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["includeVmMemoryOverhead"] = args ? args.includeVmMemoryOverhead : undefined;
            resourceInputs["memoryGuaranteed"] = args ? args.memoryGuaranteed : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkPoolName"] = args ? args.networkPoolName : undefined;
            resourceInputs["networkQuota"] = args ? args.networkQuota : undefined;
            resourceInputs["nicQuota"] = args ? args.nicQuota : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["providerVdcName"] = args ? args.providerVdcName : undefined;
            resourceInputs["storageProfiles"] = args ? args.storageProfiles : undefined;
            resourceInputs["vmPlacementPolicyIds"] = args ? args.vmPlacementPolicyIds : undefined;
            resourceInputs["vmQuota"] = args ? args.vmQuota : undefined;
            resourceInputs["vmSizingPolicyIds"] = args ? args.vmSizingPolicyIds : undefined;
            resourceInputs["vmVgpuPolicyIds"] = args ? args.vmVgpuPolicyIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgVdc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrgVdc resources.
 */
export interface OrgVdcState {
    /**
     * The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
     */
    allocationModel?: pulumi.Input<string>;
    /**
     * Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
     * ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
     */
    allowOverCommit?: pulumi.Input<boolean>;
    /**
     * The compute capacity allocated to this VDC.
     */
    computeCapacity?: pulumi.Input<inputs.OrgVdcComputeCapacity>;
    /**
     * Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
     * 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
     * element is empty, vCD sets a value
     */
    cpuGuaranteed?: pulumi.Input<number>;
    /**
     * Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
     * consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
     * AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
     */
    cpuSpeed?: pulumi.Input<number>;
    /**
     * ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
     */
    defaultComputePolicyId?: pulumi.Input<string>;
    /**
     * ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
     *
     * @deprecated Deprecated
     */
    defaultVmSizingPolicyId?: pulumi.Input<string>;
    /**
     * When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
     *
     * @deprecated Deprecated
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * Set to true to indicate if the Flex VDC is to be elastic.
     */
    elasticity?: pulumi.Input<boolean>;
    /**
     * Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
     * can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
     * provisioning, all provisioning operations will result in full clones.
     */
    enableFastProvisioning?: pulumi.Input<boolean>;
    /**
     * Set to true to enable distributed firewall - Only applies to NSX-V VDCs
     */
    enableNsxvDistributedFirewall?: pulumi.Input<boolean>;
    /**
     * Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
     * provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
     */
    enableThinProvisioning?: pulumi.Input<boolean>;
    /**
     * True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
     * behaviour depends on enablement at the organization level and at the system level.
     */
    enableVmDiscovery?: pulumi.Input<boolean>;
    /**
     * True if this VDC is enabled for use by the organization VDCs. Default is true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
     */
    includeVmMemoryOverhead?: pulumi.Input<boolean>;
    /**
     * Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
     * then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
     * Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
     */
    memoryGuaranteed?: pulumi.Input<number>;
    /**
     * Key and value pairs for Org VDC metadata
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given VDC
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.OrgVdcMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
     */
    networkPoolName?: pulumi.Input<string>;
    /**
     * Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
     * deployed.
     */
    networkQuota?: pulumi.Input<number>;
    /**
     * Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
     */
    nicQuota?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * A reference to the Provider VDC from which this organization VDC is provisioned.
     */
    providerVdcName?: pulumi.Input<string>;
    /**
     * Storage profiles supported by this VDC.
     */
    storageProfiles?: pulumi.Input<pulumi.Input<inputs.OrgVdcStorageProfile>[]>;
    /**
     * Set of VM Placement Policy IDs
     */
    vmPlacementPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
     * templates. Defaults to 0, which specifies an unlimited number.
     */
    vmQuota?: pulumi.Input<number>;
    /**
     * Set of VM Sizing Policy IDs
     */
    vmSizingPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of VM vGPU Policy IDs
     */
    vmVgpuPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OrgVdc resource.
 */
export interface OrgVdcArgs {
    /**
     * The allocation model used by this VDC; must be one of {AllocationVApp, AllocationPool, ReservationPool, Flex}
     */
    allocationModel: pulumi.Input<string>;
    /**
     * Set to false to disallow creation of the VDC if the AllocationModel is AllocationPool or ReservationPool and the
     * ComputeCapacity you specified is greater than what the backing Provider VDC can supply. Default is true.
     */
    allowOverCommit?: pulumi.Input<boolean>;
    /**
     * The compute capacity allocated to this VDC.
     */
    computeCapacity: pulumi.Input<inputs.OrgVdcComputeCapacity>;
    /**
     * Percentage of allocated CPU resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75, then
     * 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. If the
     * element is empty, vCD sets a value
     */
    cpuGuaranteed?: pulumi.Input<number>;
    /**
     * Specifies the clock frequency, in Megahertz, for any virtual CPU that is allocated to a VM. A VM with 2 vCPUs will
     * consume twice as much of this value. Ignored for ReservationPool. Required when AllocationModel is AllocationVApp or
     * AllocationPool, and may not be less than 256 MHz. Defaults to 1000 MHz if the element is empty or missing.
     */
    cpuSpeed?: pulumi.Input<number>;
    /**
     * ID of default Compute policy for this VDC, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
     */
    defaultComputePolicyId?: pulumi.Input<string>;
    /**
     * ID of default VM Compute policy, which can be a VM Sizing Policy, VM Placement Policy or vGPU Policy
     *
     * @deprecated Deprecated
     */
    defaultVmSizingPolicyId?: pulumi.Input<string>;
    /**
     * When destroying use delete_force=True to remove a VDC and any objects it contains, regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the VDC and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * ID of NSX-T Edge Cluster (provider vApp networking services and DHCP capability for Isolated networks)
     *
     * @deprecated Deprecated
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * Set to true to indicate if the Flex VDC is to be elastic.
     */
    elasticity?: pulumi.Input<boolean>;
    /**
     * Request for fast provisioning. Request will be honored only if the underlying datas tore supports it. Fast provisioning
     * can reduce the time it takes to create virtual machines by using vSphere linked clones. If you disable fast
     * provisioning, all provisioning operations will result in full clones.
     */
    enableFastProvisioning?: pulumi.Input<boolean>;
    /**
     * Set to true to enable distributed firewall - Only applies to NSX-V VDCs
     */
    enableNsxvDistributedFirewall?: pulumi.Input<boolean>;
    /**
     * Boolean to request thin provisioning. Request will be honored only if the underlying datastore supports it. Thin
     * provisioning saves storage space by committing it on demand. This allows over-allocation of storage.
     */
    enableThinProvisioning?: pulumi.Input<boolean>;
    /**
     * True if discovery of vCenter VMs is enabled for resource pools backing this VDC. If left unspecified, the actual
     * behaviour depends on enablement at the organization level and at the system level.
     */
    enableVmDiscovery?: pulumi.Input<boolean>;
    /**
     * True if this VDC is enabled for use by the organization VDCs. Default is true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Set to true to indicate if the Flex VDC is to include memory overhead into its accounting for admission control.
     */
    includeVmMemoryOverhead?: pulumi.Input<boolean>;
    /**
     * Percentage of allocated memory resources guaranteed to vApps deployed in this VDC. For example, if this value is 0.75,
     * then 75% of allocated resources are guaranteed. Required when AllocationModel is AllocationVApp or AllocationPool. When
     * Allocation model is AllocationPool minimum value is 0.2. If the element is empty, vCD sets a value.
     */
    memoryGuaranteed?: pulumi.Input<number>;
    /**
     * Key and value pairs for Org VDC metadata
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given VDC
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.OrgVdcMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of a network pool in the Provider VDC. Required if this VDC will contain routed or isolated networks.
     */
    networkPoolName?: pulumi.Input<string>;
    /**
     * Maximum number of network objects that can be deployed in this VDC. Defaults to 0, which means no networks can be
     * deployed.
     */
    networkQuota?: pulumi.Input<number>;
    /**
     * Maximum number of virtual NICs allowed in this VDC. Defaults to 0, which specifies an unlimited number.
     */
    nicQuota?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * A reference to the Provider VDC from which this organization VDC is provisioned.
     */
    providerVdcName: pulumi.Input<string>;
    /**
     * Storage profiles supported by this VDC.
     */
    storageProfiles: pulumi.Input<pulumi.Input<inputs.OrgVdcStorageProfile>[]>;
    /**
     * Set of VM Placement Policy IDs
     */
    vmPlacementPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum number of VMs that can be created in this VDC. Includes deployed and undeployed VMs in vApps and vApp
     * templates. Defaults to 0, which specifies an unlimited number.
     */
    vmQuota?: pulumi.Input<number>;
    /**
     * Set of VM Sizing Policy IDs
     */
    vmSizingPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of VM vGPU Policy IDs
     */
    vmVgpuPolicyIds?: pulumi.Input<pulumi.Input<string>[]>;
}
