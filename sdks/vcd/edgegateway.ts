// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Edgegateway extends pulumi.CustomResource {
    /**
     * Get an existing Edgegateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgegatewayState, opts?: pulumi.CustomResourceOptions): Edgegateway {
        return new Edgegateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/edgegateway:Edgegateway';

    /**
     * Returns true if the given object is an instance of Edgegateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Edgegateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Edgegateway.__pulumiType;
    }

    /**
     * Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * IP address of edge gateway interface which is used as default.
     */
    public /*out*/ readonly defaultExternalNetworkIp!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable distributed routing
     */
    public readonly distributedRouting!: pulumi.Output<boolean | undefined>;
    /**
     * List of IP addresses set on edge gateway external network interfaces
     */
    public /*out*/ readonly externalNetworkIps!: pulumi.Output<string[]>;
    /**
     * One or more blocks with external network information to be attached to this gateway's interface
     */
    public readonly externalNetworks!: pulumi.Output<outputs.EdgegatewayExternalNetwork[]>;
    /**
     * Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
     */
    public readonly fipsModeEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * 'accept' or 'deny'. Default 'deny'
     */
    public readonly fwDefaultRuleAction!: pulumi.Output<string | undefined>;
    /**
     * Enable logging for default rule. Default 'false'
     */
    public readonly fwDefaultRuleLoggingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable firewall. Default 'true'
     */
    public readonly fwEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable high availability on this edge gateway
     */
    public readonly haEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable load balancer acceleration. (Disabled by default)
     */
    public readonly lbAccelerationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable load balancing. (Disabled by default)
     */
    public readonly lbEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable load balancer logging. (Disabled by default)
     */
    public readonly lbLoggingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
     */
    public readonly lbLoglevel!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
     */
    public readonly useDefaultRouteForDnsRelay!: pulumi.Output<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a Edgegateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgegatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgegatewayArgs | EdgegatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgegatewayState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["defaultExternalNetworkIp"] = state ? state.defaultExternalNetworkIp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["distributedRouting"] = state ? state.distributedRouting : undefined;
            resourceInputs["externalNetworkIps"] = state ? state.externalNetworkIps : undefined;
            resourceInputs["externalNetworks"] = state ? state.externalNetworks : undefined;
            resourceInputs["fipsModeEnabled"] = state ? state.fipsModeEnabled : undefined;
            resourceInputs["fwDefaultRuleAction"] = state ? state.fwDefaultRuleAction : undefined;
            resourceInputs["fwDefaultRuleLoggingEnabled"] = state ? state.fwDefaultRuleLoggingEnabled : undefined;
            resourceInputs["fwEnabled"] = state ? state.fwEnabled : undefined;
            resourceInputs["haEnabled"] = state ? state.haEnabled : undefined;
            resourceInputs["lbAccelerationEnabled"] = state ? state.lbAccelerationEnabled : undefined;
            resourceInputs["lbEnabled"] = state ? state.lbEnabled : undefined;
            resourceInputs["lbLoggingEnabled"] = state ? state.lbLoggingEnabled : undefined;
            resourceInputs["lbLoglevel"] = state ? state.lbLoglevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["useDefaultRouteForDnsRelay"] = state ? state.useDefaultRouteForDnsRelay : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as EdgegatewayArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.externalNetworks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalNetworks'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distributedRouting"] = args ? args.distributedRouting : undefined;
            resourceInputs["externalNetworks"] = args ? args.externalNetworks : undefined;
            resourceInputs["fipsModeEnabled"] = args ? args.fipsModeEnabled : undefined;
            resourceInputs["fwDefaultRuleAction"] = args ? args.fwDefaultRuleAction : undefined;
            resourceInputs["fwDefaultRuleLoggingEnabled"] = args ? args.fwDefaultRuleLoggingEnabled : undefined;
            resourceInputs["fwEnabled"] = args ? args.fwEnabled : undefined;
            resourceInputs["haEnabled"] = args ? args.haEnabled : undefined;
            resourceInputs["lbAccelerationEnabled"] = args ? args.lbAccelerationEnabled : undefined;
            resourceInputs["lbEnabled"] = args ? args.lbEnabled : undefined;
            resourceInputs["lbLoggingEnabled"] = args ? args.lbLoggingEnabled : undefined;
            resourceInputs["lbLoglevel"] = args ? args.lbLoglevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["useDefaultRouteForDnsRelay"] = args ? args.useDefaultRouteForDnsRelay : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["defaultExternalNetworkIp"] = undefined /*out*/;
            resourceInputs["externalNetworkIps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Edgegateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Edgegateway resources.
 */
export interface EdgegatewayState {
    /**
     * Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
     */
    configuration?: pulumi.Input<string>;
    /**
     * IP address of edge gateway interface which is used as default.
     */
    defaultExternalNetworkIp?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Enable distributed routing
     */
    distributedRouting?: pulumi.Input<boolean>;
    /**
     * List of IP addresses set on edge gateway external network interfaces
     */
    externalNetworkIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more blocks with external network information to be attached to this gateway's interface
     */
    externalNetworks?: pulumi.Input<pulumi.Input<inputs.EdgegatewayExternalNetwork>[]>;
    /**
     * Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
     */
    fipsModeEnabled?: pulumi.Input<boolean>;
    /**
     * 'accept' or 'deny'. Default 'deny'
     */
    fwDefaultRuleAction?: pulumi.Input<string>;
    /**
     * Enable logging for default rule. Default 'false'
     */
    fwDefaultRuleLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Enable firewall. Default 'true'
     */
    fwEnabled?: pulumi.Input<boolean>;
    /**
     * Enable high availability on this edge gateway
     */
    haEnabled?: pulumi.Input<boolean>;
    /**
     * Enable load balancer acceleration. (Disabled by default)
     */
    lbAccelerationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable load balancing. (Disabled by default)
     */
    lbEnabled?: pulumi.Input<boolean>;
    /**
     * Enable load balancer logging. (Disabled by default)
     */
    lbLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
     */
    lbLoglevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
     */
    useDefaultRouteForDnsRelay?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Edgegateway resource.
 */
export interface EdgegatewayArgs {
    /**
     * Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
     */
    configuration: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Enable distributed routing
     */
    distributedRouting?: pulumi.Input<boolean>;
    /**
     * One or more blocks with external network information to be attached to this gateway's interface
     */
    externalNetworks: pulumi.Input<pulumi.Input<inputs.EdgegatewayExternalNetwork>[]>;
    /**
     * Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
     */
    fipsModeEnabled?: pulumi.Input<boolean>;
    /**
     * 'accept' or 'deny'. Default 'deny'
     */
    fwDefaultRuleAction?: pulumi.Input<string>;
    /**
     * Enable logging for default rule. Default 'false'
     */
    fwDefaultRuleLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Enable firewall. Default 'true'
     */
    fwEnabled?: pulumi.Input<boolean>;
    /**
     * Enable high availability on this edge gateway
     */
    haEnabled?: pulumi.Input<boolean>;
    /**
     * Enable load balancer acceleration. (Disabled by default)
     */
    lbAccelerationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable load balancing. (Disabled by default)
     */
    lbEnabled?: pulumi.Input<boolean>;
    /**
     * Enable load balancer logging. (Disabled by default)
     */
    lbLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
     */
    lbLoglevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
     */
    useDefaultRouteForDnsRelay?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
