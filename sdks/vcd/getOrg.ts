// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOrg(args: GetOrgArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getOrg:getOrg", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOrg.
 */
export interface GetOrgArgs {
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getOrg.
 */
export interface GetOrgResult {
    readonly canPublishCatalogs: boolean;
    readonly canPublishExternalCatalogs: boolean;
    readonly canSubscribeExternalCatalogs: boolean;
    readonly delayAfterPowerOnSeconds: number;
    readonly deployedVmQuota: number;
    readonly description: string;
    readonly fullName: string;
    readonly id: string;
    readonly isEnabled: boolean;
    readonly listOfCatalogs: string[];
    readonly listOfVdcs: string[];
    /**
     * @deprecated Deprecated
     */
    readonly metadata: {[key: string]: string};
    readonly metadataEntries: outputs.GetOrgMetadataEntry[];
    readonly name: string;
    readonly numberOfCatalogs: number;
    readonly numberOfVdcs: number;
    readonly storedVmQuota: number;
    readonly vappLeases: outputs.GetOrgVappLease[];
    readonly vappTemplateLeases: outputs.GetOrgVappTemplateLease[];
}
export function getOrgOutput(args: GetOrgOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrgResult> {
    return pulumi.output(args).apply((a: any) => getOrg(a, opts))
}

/**
 * A collection of arguments for invoking getOrg.
 */
export interface GetOrgOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
