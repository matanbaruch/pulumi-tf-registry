// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SubscribedCatalog extends pulumi.CustomResource {
    /**
     * Get an existing SubscribedCatalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscribedCatalogState, opts?: pulumi.CustomResourceOptions): SubscribedCatalog {
        return new SubscribedCatalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/subscribedCatalog:SubscribedCatalog';

    /**
     * Returns true if the given object is an instance of SubscribedCatalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscribedCatalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscribedCatalog.__pulumiType;
    }

    /**
     * When true, the subscribed catalog will attempt canceling failed tasks
     */
    public readonly cancelFailedTasks!: pulumi.Output<boolean | undefined>;
    /**
     * Catalog version number. Inherited from publishing catalog and updated on sync.
     */
    public /*out*/ readonly catalogVersion!: pulumi.Output<number>;
    /**
     * Time stamp of when the catalog was created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,
     * regardless of their state.
     */
    public readonly deleteForce!: pulumi.Output<boolean | undefined>;
    /**
     * When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that
     * normally allows removal.
     */
    public readonly deleteRecursive!: pulumi.Output<boolean | undefined>;
    /**
     * A subscribed catalog description is inherited from the publisher catalog and cannot be changed. It is updated on sync
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * List of failed synchronization tasks
     */
    public /*out*/ readonly failedTasks!: pulumi.Output<string[]>;
    /**
     * Catalog HREF
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * True if this catalog belongs to the current organization.
     */
    public /*out*/ readonly isLocal!: pulumi.Output<boolean>;
    /**
     * True if this catalog is published. (Always false)
     */
    public /*out*/ readonly isPublished!: pulumi.Output<boolean>;
    /**
     * True if this catalog is shared.
     */
    public /*out*/ readonly isShared!: pulumi.Output<boolean>;
    /**
     * If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local
     * copy of catalog items unless a sync operation is performed.
     */
    public readonly makeLocalCopy!: pulumi.Output<boolean | undefined>;
    /**
     * List of Media items in this catalog
     */
    public /*out*/ readonly mediaItemLists!: pulumi.Output<string[]>;
    /**
     * Key and value pairs for catalog metadata. Inherited from publishing catalog
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the catalog
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of Media items this catalog contains.
     */
    public /*out*/ readonly numberOfMedia!: pulumi.Output<number>;
    /**
     * Number of vApp templates this catalog contains.
     */
    public /*out*/ readonly numberOfVappTemplates!: pulumi.Output<number>;
    /**
     * The name of organization to use, optional if defined at provider level.
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Owner name from the catalog.
     */
    public /*out*/ readonly ownerName!: pulumi.Output<string>;
    /**
     * PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise. (Always
     * SUBSCRIBED)
     */
    public /*out*/ readonly publishSubscriptionType!: pulumi.Output<string>;
    /**
     * List of running synchronization tasks
     */
    public /*out*/ readonly runningTasks!: pulumi.Output<string[]>;
    /**
     * Optional storage profile ID
     */
    public readonly storageProfileId!: pulumi.Output<string | undefined>;
    /**
     * If true, saves list of tasks to file for later update
     */
    public readonly storeTasks!: pulumi.Output<boolean | undefined>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password. Passing in six
     * asterisks '******' indicates to keep current password. Passing in null or empty string indicates to remove password.
     */
    public readonly subscriptionPassword!: pulumi.Output<string>;
    /**
     * The URL to subscribe to the external catalog.
     */
    public readonly subscriptionUrl!: pulumi.Output<string>;
    /**
     * If true, synchronise this catalog and all items
     */
    public readonly syncAll!: pulumi.Output<boolean | undefined>;
    /**
     * If true, synchronises all media items
     */
    public readonly syncAllMediaItems!: pulumi.Output<boolean | undefined>;
    /**
     * If true, synchronises all vApp templates
     */
    public readonly syncAllVappTemplates!: pulumi.Output<boolean | undefined>;
    /**
     * If true, synchronise this catalog. This operation fetches the list of items. If `make_local_copy` is set, it also
     * fetches the items data.
     */
    public readonly syncCatalog!: pulumi.Output<boolean | undefined>;
    /**
     * Synchronises media items from this list of names.
     */
    public readonly syncMediaItems!: pulumi.Output<string[] | undefined>;
    /**
     * Boolean value that shows if sync should be performed on every refresh.
     */
    public readonly syncOnRefresh!: pulumi.Output<boolean | undefined>;
    /**
     * Synchronises vApp templates from this list of names.
     */
    public readonly syncVappTemplates!: pulumi.Output<string[] | undefined>;
    /**
     * Where the running tasks IDs have been stored. Only if `store_tasks` is set
     */
    public /*out*/ readonly tasksFileName!: pulumi.Output<string>;
    /**
     * List of catalog items in this catalog
     */
    public /*out*/ readonly vappTemplateLists!: pulumi.Output<string[]>;

    /**
     * Create a SubscribedCatalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscribedCatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscribedCatalogArgs | SubscribedCatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscribedCatalogState | undefined;
            resourceInputs["cancelFailedTasks"] = state ? state.cancelFailedTasks : undefined;
            resourceInputs["catalogVersion"] = state ? state.catalogVersion : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["deleteForce"] = state ? state.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = state ? state.deleteRecursive : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["failedTasks"] = state ? state.failedTasks : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["isLocal"] = state ? state.isLocal : undefined;
            resourceInputs["isPublished"] = state ? state.isPublished : undefined;
            resourceInputs["isShared"] = state ? state.isShared : undefined;
            resourceInputs["makeLocalCopy"] = state ? state.makeLocalCopy : undefined;
            resourceInputs["mediaItemLists"] = state ? state.mediaItemLists : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfMedia"] = state ? state.numberOfMedia : undefined;
            resourceInputs["numberOfVappTemplates"] = state ? state.numberOfVappTemplates : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["publishSubscriptionType"] = state ? state.publishSubscriptionType : undefined;
            resourceInputs["runningTasks"] = state ? state.runningTasks : undefined;
            resourceInputs["storageProfileId"] = state ? state.storageProfileId : undefined;
            resourceInputs["storeTasks"] = state ? state.storeTasks : undefined;
            resourceInputs["subscriptionPassword"] = state ? state.subscriptionPassword : undefined;
            resourceInputs["subscriptionUrl"] = state ? state.subscriptionUrl : undefined;
            resourceInputs["syncAll"] = state ? state.syncAll : undefined;
            resourceInputs["syncAllMediaItems"] = state ? state.syncAllMediaItems : undefined;
            resourceInputs["syncAllVappTemplates"] = state ? state.syncAllVappTemplates : undefined;
            resourceInputs["syncCatalog"] = state ? state.syncCatalog : undefined;
            resourceInputs["syncMediaItems"] = state ? state.syncMediaItems : undefined;
            resourceInputs["syncOnRefresh"] = state ? state.syncOnRefresh : undefined;
            resourceInputs["syncVappTemplates"] = state ? state.syncVappTemplates : undefined;
            resourceInputs["tasksFileName"] = state ? state.tasksFileName : undefined;
            resourceInputs["vappTemplateLists"] = state ? state.vappTemplateLists : undefined;
        } else {
            const args = argsOrState as SubscribedCatalogArgs | undefined;
            if ((!args || args.subscriptionUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionUrl'");
            }
            resourceInputs["cancelFailedTasks"] = args ? args.cancelFailedTasks : undefined;
            resourceInputs["deleteForce"] = args ? args.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = args ? args.deleteRecursive : undefined;
            resourceInputs["makeLocalCopy"] = args ? args.makeLocalCopy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["storageProfileId"] = args ? args.storageProfileId : undefined;
            resourceInputs["storeTasks"] = args ? args.storeTasks : undefined;
            resourceInputs["subscriptionPassword"] = args?.subscriptionPassword ? pulumi.secret(args.subscriptionPassword) : undefined;
            resourceInputs["subscriptionUrl"] = args ? args.subscriptionUrl : undefined;
            resourceInputs["syncAll"] = args ? args.syncAll : undefined;
            resourceInputs["syncAllMediaItems"] = args ? args.syncAllMediaItems : undefined;
            resourceInputs["syncAllVappTemplates"] = args ? args.syncAllVappTemplates : undefined;
            resourceInputs["syncCatalog"] = args ? args.syncCatalog : undefined;
            resourceInputs["syncMediaItems"] = args ? args.syncMediaItems : undefined;
            resourceInputs["syncOnRefresh"] = args ? args.syncOnRefresh : undefined;
            resourceInputs["syncVappTemplates"] = args ? args.syncVappTemplates : undefined;
            resourceInputs["catalogVersion"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["failedTasks"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["isLocal"] = undefined /*out*/;
            resourceInputs["isPublished"] = undefined /*out*/;
            resourceInputs["isShared"] = undefined /*out*/;
            resourceInputs["mediaItemLists"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["numberOfMedia"] = undefined /*out*/;
            resourceInputs["numberOfVappTemplates"] = undefined /*out*/;
            resourceInputs["ownerName"] = undefined /*out*/;
            resourceInputs["publishSubscriptionType"] = undefined /*out*/;
            resourceInputs["runningTasks"] = undefined /*out*/;
            resourceInputs["tasksFileName"] = undefined /*out*/;
            resourceInputs["vappTemplateLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["subscriptionPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SubscribedCatalog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SubscribedCatalog resources.
 */
export interface SubscribedCatalogState {
    /**
     * When true, the subscribed catalog will attempt canceling failed tasks
     */
    cancelFailedTasks?: pulumi.Input<boolean>;
    /**
     * Catalog version number. Inherited from publishing catalog and updated on sync.
     */
    catalogVersion?: pulumi.Input<number>;
    /**
     * Time stamp of when the catalog was created
     */
    created?: pulumi.Input<string>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,
     * regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    /**
     * A subscribed catalog description is inherited from the publisher catalog and cannot be changed. It is updated on sync
     */
    description?: pulumi.Input<string>;
    /**
     * List of failed synchronization tasks
     */
    failedTasks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Catalog HREF
     */
    href?: pulumi.Input<string>;
    /**
     * True if this catalog belongs to the current organization.
     */
    isLocal?: pulumi.Input<boolean>;
    /**
     * True if this catalog is published. (Always false)
     */
    isPublished?: pulumi.Input<boolean>;
    /**
     * True if this catalog is shared.
     */
    isShared?: pulumi.Input<boolean>;
    /**
     * If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local
     * copy of catalog items unless a sync operation is performed.
     */
    makeLocalCopy?: pulumi.Input<boolean>;
    /**
     * List of Media items in this catalog
     */
    mediaItemLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key and value pairs for catalog metadata. Inherited from publishing catalog
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the catalog
     */
    name?: pulumi.Input<string>;
    /**
     * Number of Media items this catalog contains.
     */
    numberOfMedia?: pulumi.Input<number>;
    /**
     * Number of vApp templates this catalog contains.
     */
    numberOfVappTemplates?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * Owner name from the catalog.
     */
    ownerName?: pulumi.Input<string>;
    /**
     * PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise. (Always
     * SUBSCRIBED)
     */
    publishSubscriptionType?: pulumi.Input<string>;
    /**
     * List of running synchronization tasks
     */
    runningTasks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional storage profile ID
     */
    storageProfileId?: pulumi.Input<string>;
    /**
     * If true, saves list of tasks to file for later update
     */
    storeTasks?: pulumi.Input<boolean>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password. Passing in six
     * asterisks '******' indicates to keep current password. Passing in null or empty string indicates to remove password.
     */
    subscriptionPassword?: pulumi.Input<string>;
    /**
     * The URL to subscribe to the external catalog.
     */
    subscriptionUrl?: pulumi.Input<string>;
    /**
     * If true, synchronise this catalog and all items
     */
    syncAll?: pulumi.Input<boolean>;
    /**
     * If true, synchronises all media items
     */
    syncAllMediaItems?: pulumi.Input<boolean>;
    /**
     * If true, synchronises all vApp templates
     */
    syncAllVappTemplates?: pulumi.Input<boolean>;
    /**
     * If true, synchronise this catalog. This operation fetches the list of items. If `make_local_copy` is set, it also
     * fetches the items data.
     */
    syncCatalog?: pulumi.Input<boolean>;
    /**
     * Synchronises media items from this list of names.
     */
    syncMediaItems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value that shows if sync should be performed on every refresh.
     */
    syncOnRefresh?: pulumi.Input<boolean>;
    /**
     * Synchronises vApp templates from this list of names.
     */
    syncVappTemplates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Where the running tasks IDs have been stored. Only if `store_tasks` is set
     */
    tasksFileName?: pulumi.Input<string>;
    /**
     * List of catalog items in this catalog
     */
    vappTemplateLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SubscribedCatalog resource.
 */
export interface SubscribedCatalogArgs {
    /**
     * When true, the subscribed catalog will attempt canceling failed tasks
     */
    cancelFailedTasks?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,
     * regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    /**
     * If true, subscription to a catalog creates a local copy of all items. Defaults to false, which does not create a local
     * copy of catalog items unless a sync operation is performed.
     */
    makeLocalCopy?: pulumi.Input<boolean>;
    /**
     * The name of the catalog
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level.
     */
    org?: pulumi.Input<string>;
    /**
     * Optional storage profile ID
     */
    storageProfileId?: pulumi.Input<string>;
    /**
     * If true, saves list of tasks to file for later update
     */
    storeTasks?: pulumi.Input<boolean>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password. Passing in six
     * asterisks '******' indicates to keep current password. Passing in null or empty string indicates to remove password.
     */
    subscriptionPassword?: pulumi.Input<string>;
    /**
     * The URL to subscribe to the external catalog.
     */
    subscriptionUrl: pulumi.Input<string>;
    /**
     * If true, synchronise this catalog and all items
     */
    syncAll?: pulumi.Input<boolean>;
    /**
     * If true, synchronises all media items
     */
    syncAllMediaItems?: pulumi.Input<boolean>;
    /**
     * If true, synchronises all vApp templates
     */
    syncAllVappTemplates?: pulumi.Input<boolean>;
    /**
     * If true, synchronise this catalog. This operation fetches the list of items. If `make_local_copy` is set, it also
     * fetches the items data.
     */
    syncCatalog?: pulumi.Input<boolean>;
    /**
     * Synchronises media items from this list of names.
     */
    syncMediaItems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value that shows if sync should be performed on every refresh.
     */
    syncOnRefresh?: pulumi.Input<boolean>;
    /**
     * Synchronises vApp templates from this list of names.
     */
    syncVappTemplates?: pulumi.Input<pulumi.Input<string>[]>;
}
