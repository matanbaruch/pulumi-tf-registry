// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EdgegatewayVpn extends pulumi.CustomResource {
    /**
     * Get an existing EdgegatewayVpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgegatewayVpnState, opts?: pulumi.CustomResourceOptions): EdgegatewayVpn {
        return new EdgegatewayVpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/edgegatewayVpn:EdgegatewayVpn';

    /**
     * Returns true if the given object is an instance of EdgegatewayVpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgegatewayVpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgegatewayVpn.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly edgeGateway!: pulumi.Output<string>;
    public readonly encryptionProtocol!: pulumi.Output<string>;
    public readonly localId!: pulumi.Output<string>;
    public readonly localIpAddress!: pulumi.Output<string>;
    public readonly localSubnets!: pulumi.Output<outputs.EdgegatewayVpnLocalSubnet[] | undefined>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    public readonly peerId!: pulumi.Output<string>;
    public readonly peerIpAddress!: pulumi.Output<string>;
    public readonly peerSubnets!: pulumi.Output<outputs.EdgegatewayVpnPeerSubnet[] | undefined>;
    public readonly sharedSecret!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a EdgegatewayVpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgegatewayVpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgegatewayVpnArgs | EdgegatewayVpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgegatewayVpnState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeGateway"] = state ? state.edgeGateway : undefined;
            resourceInputs["encryptionProtocol"] = state ? state.encryptionProtocol : undefined;
            resourceInputs["localId"] = state ? state.localId : undefined;
            resourceInputs["localIpAddress"] = state ? state.localIpAddress : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["peerId"] = state ? state.peerId : undefined;
            resourceInputs["peerIpAddress"] = state ? state.peerIpAddress : undefined;
            resourceInputs["peerSubnets"] = state ? state.peerSubnets : undefined;
            resourceInputs["sharedSecret"] = state ? state.sharedSecret : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as EdgegatewayVpnArgs | undefined;
            if ((!args || args.edgeGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGateway'");
            }
            if ((!args || args.encryptionProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionProtocol'");
            }
            if ((!args || args.localId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localId'");
            }
            if ((!args || args.localIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localIpAddress'");
            }
            if ((!args || args.mtu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mtu'");
            }
            if ((!args || args.peerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerId'");
            }
            if ((!args || args.peerIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerIpAddress'");
            }
            if ((!args || args.sharedSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedSecret'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeGateway"] = args ? args.edgeGateway : undefined;
            resourceInputs["encryptionProtocol"] = args ? args.encryptionProtocol : undefined;
            resourceInputs["localId"] = args ? args.localId : undefined;
            resourceInputs["localIpAddress"] = args ? args.localIpAddress : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["peerId"] = args ? args.peerId : undefined;
            resourceInputs["peerIpAddress"] = args ? args.peerIpAddress : undefined;
            resourceInputs["peerSubnets"] = args ? args.peerSubnets : undefined;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EdgegatewayVpn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgegatewayVpn resources.
 */
export interface EdgegatewayVpnState {
    description?: pulumi.Input<string>;
    edgeGateway?: pulumi.Input<string>;
    encryptionProtocol?: pulumi.Input<string>;
    localId?: pulumi.Input<string>;
    localIpAddress?: pulumi.Input<string>;
    localSubnets?: pulumi.Input<pulumi.Input<inputs.EdgegatewayVpnLocalSubnet>[]>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    peerId?: pulumi.Input<string>;
    peerIpAddress?: pulumi.Input<string>;
    peerSubnets?: pulumi.Input<pulumi.Input<inputs.EdgegatewayVpnPeerSubnet>[]>;
    sharedSecret?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgegatewayVpn resource.
 */
export interface EdgegatewayVpnArgs {
    description?: pulumi.Input<string>;
    edgeGateway: pulumi.Input<string>;
    encryptionProtocol: pulumi.Input<string>;
    localId: pulumi.Input<string>;
    localIpAddress: pulumi.Input<string>;
    localSubnets?: pulumi.Input<pulumi.Input<inputs.EdgegatewayVpnLocalSubnet>[]>;
    mtu: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    peerId: pulumi.Input<string>;
    peerIpAddress: pulumi.Input<string>;
    peerSubnets?: pulumi.Input<pulumi.Input<inputs.EdgegatewayVpnPeerSubnet>[]>;
    sharedSecret: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
