// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NsxtNatRule extends pulumi.CustomResource {
    /**
     * Get an existing NsxtNatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtNatRuleState, opts?: pulumi.CustomResourceOptions): NsxtNatRule {
        return new NsxtNatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtNatRule:NsxtNatRule';

    /**
     * Returns true if the given object is an instance of NsxtNatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtNatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtNatRule.__pulumiType;
    }

    /**
     * Application Port Profile to apply for this rule
     */
    public readonly appPortProfileId!: pulumi.Output<string | undefined>;
    /**
     * Description of NAT rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
     */
    public readonly dnatExternalPort!: pulumi.Output<string | undefined>;
    /**
     * Edge gateway name in which NAT Rule is located
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * Enables or disables this rule
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * IP address or CIDR of external network
     */
    public readonly externalAddress!: pulumi.Output<string | undefined>;
    /**
     * VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
     * 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
     */
    public readonly firewallMatch!: pulumi.Output<string>;
    /**
     * IP address or CIDR of the virtual machines for which you are configuring NAT
     */
    public readonly internalAddress!: pulumi.Output<string | undefined>;
    /**
     * Enable logging when this rule is applied
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * Name of NAT rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
     * higher precedence for this rule.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
     */
    public readonly ruleType!: pulumi.Output<string>;
    /**
     * For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
     * or an IP address range in CIDR format.
     */
    public readonly snatDestinationAddress!: pulumi.Output<string | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NsxtNatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtNatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtNatRuleArgs | NsxtNatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtNatRuleState | undefined;
            resourceInputs["appPortProfileId"] = state ? state.appPortProfileId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnatExternalPort"] = state ? state.dnatExternalPort : undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalAddress"] = state ? state.externalAddress : undefined;
            resourceInputs["firewallMatch"] = state ? state.firewallMatch : undefined;
            resourceInputs["internalAddress"] = state ? state.internalAddress : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["snatDestinationAddress"] = state ? state.snatDestinationAddress : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NsxtNatRuleArgs | undefined;
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            if ((!args || args.ruleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            resourceInputs["appPortProfileId"] = args ? args.appPortProfileId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnatExternalPort"] = args ? args.dnatExternalPort : undefined;
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalAddress"] = args ? args.externalAddress : undefined;
            resourceInputs["firewallMatch"] = args ? args.firewallMatch : undefined;
            resourceInputs["internalAddress"] = args ? args.internalAddress : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["snatDestinationAddress"] = args ? args.snatDestinationAddress : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtNatRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NsxtNatRule resources.
 */
export interface NsxtNatRuleState {
    /**
     * Application Port Profile to apply for this rule
     */
    appPortProfileId?: pulumi.Input<string>;
    /**
     * Description of NAT rule
     */
    description?: pulumi.Input<string>;
    /**
     * For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
     */
    dnatExternalPort?: pulumi.Input<string>;
    /**
     * Edge gateway name in which NAT Rule is located
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * Enables or disables this rule
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * IP address or CIDR of external network
     */
    externalAddress?: pulumi.Input<string>;
    /**
     * VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
     * 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
     */
    firewallMatch?: pulumi.Input<string>;
    /**
     * IP address or CIDR of the virtual machines for which you are configuring NAT
     */
    internalAddress?: pulumi.Input<string>;
    /**
     * Enable logging when this rule is applied
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Name of NAT rule
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
     * higher precedence for this rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
     */
    ruleType?: pulumi.Input<string>;
    /**
     * For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
     * or an IP address range in CIDR format.
     */
    snatDestinationAddress?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtNatRule resource.
 */
export interface NsxtNatRuleArgs {
    /**
     * Application Port Profile to apply for this rule
     */
    appPortProfileId?: pulumi.Input<string>;
    /**
     * Description of NAT rule
     */
    description?: pulumi.Input<string>;
    /**
     * For DNAT only. Enter a port into which the DNAT rule is translating for the packets inbound to the virtual machines.
     */
    dnatExternalPort?: pulumi.Input<string>;
    /**
     * Edge gateway name in which NAT Rule is located
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * Enables or disables this rule
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * IP address or CIDR of external network
     */
    externalAddress?: pulumi.Input<string>;
    /**
     * VCD 10.2.2+ Determines how the firewall matches the address during NATing if firewall stage is not skipped. One of
     * 'MATCH_INTERNAL_ADDRESS', 'MATCH_EXTERNAL_ADDRESS', 'BYPASS'
     */
    firewallMatch?: pulumi.Input<string>;
    /**
     * IP address or CIDR of the virtual machines for which you are configuring NAT
     */
    internalAddress?: pulumi.Input<string>;
    /**
     * Enable logging when this rule is applied
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Name of NAT rule
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * VCD 10.2.2+ If an address has multiple NAT rules, the rule with the highest priority is applied. A lower value means a
     * higher precedence for this rule.
     */
    priority?: pulumi.Input<number>;
    /**
     * Rule type - one of 'DNAT', 'NO_DNAT', 'SNAT', 'NO_SNAT', 'REFLEXIVE'
     */
    ruleType: pulumi.Input<string>;
    /**
     * For SNAT only. If you want the rule to apply only for traffic to a specific domain, enter an IP address for this domain
     * or an IP address range in CIDR format.
     */
    snatDestinationAddress?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    vdc?: pulumi.Input<string>;
}
