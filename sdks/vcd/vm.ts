// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmState, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    /**
     * Automatically accept EULA if OVA has it
     */
    public readonly acceptAllEulas!: pulumi.Output<boolean | undefined>;
    /**
     * Media name to add as boot image.
     *
     * @deprecated Deprecated
     */
    public readonly bootImage!: pulumi.Output<string | undefined>;
    /**
     * The URN of the media to use as boot image.
     */
    public readonly bootImageId!: pulumi.Output<string | undefined>;
    /**
     * A block defining the boot options of a VM
     */
    public readonly bootOptions!: pulumi.Output<outputs.VmBootOptions | undefined>;
    /**
     * The catalog name in which to find the given vApp Template or media for boot_image
     *
     * @deprecated Deprecated
     */
    public readonly catalogName!: pulumi.Output<string | undefined>;
    /**
     * Computer name to assign to this virtual machine
     */
    public readonly computerName!: pulumi.Output<string>;
    /**
     * Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
     * VDCs
     */
    public readonly consolidateDisksOnCreate!: pulumi.Output<boolean | undefined>;
    /**
     * Source VM that should be copied from
     */
    public readonly copyFromVmId!: pulumi.Output<string | undefined>;
    /**
     * The number of cores per socket
     */
    public readonly cpuCores!: pulumi.Output<number>;
    /**
     * True if the virtual machine supports addition of virtual CPUs while powered on.
     */
    public readonly cpuHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
     * the resource allocation is not unlimited.
     */
    public readonly cpuLimit!: pulumi.Output<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
     * virtualized workload
     */
    public readonly cpuPriority!: pulumi.Output<string>;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure
     */
    public readonly cpuReservation!: pulumi.Output<number>;
    /**
     * Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
     */
    public readonly cpuShares!: pulumi.Output<number>;
    /**
     * The number of virtual CPUs to allocate to the VM
     */
    public readonly cpus!: pulumi.Output<number>;
    /**
     * Guest customization block
     */
    public readonly customization!: pulumi.Output<outputs.VmCustomization | undefined>;
    /**
     * The VM description
     */
    public readonly description!: pulumi.Output<string>;
    public readonly disks!: pulumi.Output<outputs.VmDisk[] | undefined>;
    /**
     * Expose hardware-assisted CPU virtualization to guest OS.
     */
    public readonly exposeHardwareVirtualization!: pulumi.Output<boolean | undefined>;
    /**
     * A block to retrieve extra configuration key-value pairs
     */
    public /*out*/ readonly extraConfigs!: pulumi.Output<outputs.VmExtraConfig[]>;
    /**
     * Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
     * by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
     */
    public readonly firmware!: pulumi.Output<string>;
    /**
     * Key/value settings for guest properties
     */
    public readonly guestProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
     */
    public readonly hardwareVersion!: pulumi.Output<string>;
    /**
     * VM Hyper Reference
     */
    public readonly href!: pulumi.Output<string>;
    /**
     * Tells whether this resource has been imported
     */
    public /*out*/ readonly imported!: pulumi.Output<boolean>;
    /**
     * A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
     */
    public /*out*/ readonly inheritedMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * A block will show internal disk details
     */
    public /*out*/ readonly internalDisks!: pulumi.Output<outputs.VmInternalDisk[]>;
    /**
     * The amount of RAM (in MB) to allocate to the VM
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * True if the virtual machine supports addition of memory while powered on.
     */
    public readonly memoryHotAddEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
     * when the resource allocation is not unlimited.
     */
    public readonly memoryLimit!: pulumi.Output<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
     * virtualized workload
     */
    public readonly memoryPriority!: pulumi.Output<string>;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    public readonly memoryReservation!: pulumi.Output<number>;
    /**
     * Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
     */
    public readonly memoryShares!: pulumi.Output<number>;
    /**
     * Key value map of metadata to assign to this VM
     *
     * @deprecated Deprecated
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Metadata entries for the given VM
     */
    public readonly metadataEntries!: pulumi.Output<outputs.VmMetadataEntry[] | undefined>;
    /**
     * A name for the VM, unique within the vApp
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
     */
    public readonly networkDhcpWaitSeconds!: pulumi.Output<number | undefined>;
    /**
     * A block to define network interface. Multiple can be used.
     */
    public readonly networks!: pulumi.Output<outputs.VmNetwork[] | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Operating System type. Possible values can be found in documentation.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
     * and unit_number.
     */
    public readonly overrideTemplateDisks!: pulumi.Output<outputs.VmOverrideTemplateDisk[] | undefined>;
    /**
     * VM placement policy ID. Has to be assigned to Org VDC.
     */
    public readonly placementPolicyId!: pulumi.Output<string>;
    /**
     * A boolean value stating if this VM should be powered on
     */
    public readonly powerOn!: pulumi.Output<boolean | undefined>;
    /**
     * True if the update of resource should fail when virtual machine power off needed.
     */
    public readonly preventUpdatePowerOff!: pulumi.Output<boolean | undefined>;
    /**
     * Security tags to assign to this VM
     */
    public readonly securityTags!: pulumi.Output<string[]>;
    /**
     * A block to set extra configuration key-value pairs
     */
    public readonly setExtraConfigs!: pulumi.Output<outputs.VmSetExtraConfig[] | undefined>;
    /**
     * VM sizing policy ID. Has to be assigned to Org VDC.
     */
    public readonly sizingPolicyId!: pulumi.Output<string>;
    /**
     * Shows the status code of the VM
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * Shows the status of the VM
     */
    public /*out*/ readonly statusText!: pulumi.Output<string>;
    /**
     * Storage profile to override the default one
     */
    public readonly storageProfile!: pulumi.Output<string>;
    /**
     * The name of the vApp Template to use
     *
     * @deprecated Deprecated
     */
    public readonly templateName!: pulumi.Output<string | undefined>;
    /**
     * ID of parent vApp
     */
    public /*out*/ readonly vappId!: pulumi.Output<string>;
    /**
     * The vApp this VM belongs to - Required, unless it is a standalone VM
     */
    public readonly vappName!: pulumi.Output<string>;
    /**
     * The URN of the vApp Template to use
     */
    public readonly vappTemplateId!: pulumi.Output<string | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;
    /**
     * The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
     */
    public readonly vmNameInTemplate!: pulumi.Output<string | undefined>;
    /**
     * Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
     */
    public /*out*/ readonly vmType!: pulumi.Output<string>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmArgs | VmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmState | undefined;
            resourceInputs["acceptAllEulas"] = state ? state.acceptAllEulas : undefined;
            resourceInputs["bootImage"] = state ? state.bootImage : undefined;
            resourceInputs["bootImageId"] = state ? state.bootImageId : undefined;
            resourceInputs["bootOptions"] = state ? state.bootOptions : undefined;
            resourceInputs["catalogName"] = state ? state.catalogName : undefined;
            resourceInputs["computerName"] = state ? state.computerName : undefined;
            resourceInputs["consolidateDisksOnCreate"] = state ? state.consolidateDisksOnCreate : undefined;
            resourceInputs["copyFromVmId"] = state ? state.copyFromVmId : undefined;
            resourceInputs["cpuCores"] = state ? state.cpuCores : undefined;
            resourceInputs["cpuHotAddEnabled"] = state ? state.cpuHotAddEnabled : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cpuPriority"] = state ? state.cpuPriority : undefined;
            resourceInputs["cpuReservation"] = state ? state.cpuReservation : undefined;
            resourceInputs["cpuShares"] = state ? state.cpuShares : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["customization"] = state ? state.customization : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["exposeHardwareVirtualization"] = state ? state.exposeHardwareVirtualization : undefined;
            resourceInputs["extraConfigs"] = state ? state.extraConfigs : undefined;
            resourceInputs["firmware"] = state ? state.firmware : undefined;
            resourceInputs["guestProperties"] = state ? state.guestProperties : undefined;
            resourceInputs["hardwareVersion"] = state ? state.hardwareVersion : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["imported"] = state ? state.imported : undefined;
            resourceInputs["inheritedMetadata"] = state ? state.inheritedMetadata : undefined;
            resourceInputs["internalDisks"] = state ? state.internalDisks : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = state ? state.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["memoryPriority"] = state ? state.memoryPriority : undefined;
            resourceInputs["memoryReservation"] = state ? state.memoryReservation : undefined;
            resourceInputs["memoryShares"] = state ? state.memoryShares : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkDhcpWaitSeconds"] = state ? state.networkDhcpWaitSeconds : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["overrideTemplateDisks"] = state ? state.overrideTemplateDisks : undefined;
            resourceInputs["placementPolicyId"] = state ? state.placementPolicyId : undefined;
            resourceInputs["powerOn"] = state ? state.powerOn : undefined;
            resourceInputs["preventUpdatePowerOff"] = state ? state.preventUpdatePowerOff : undefined;
            resourceInputs["securityTags"] = state ? state.securityTags : undefined;
            resourceInputs["setExtraConfigs"] = state ? state.setExtraConfigs : undefined;
            resourceInputs["sizingPolicyId"] = state ? state.sizingPolicyId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusText"] = state ? state.statusText : undefined;
            resourceInputs["storageProfile"] = state ? state.storageProfile : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["vappId"] = state ? state.vappId : undefined;
            resourceInputs["vappName"] = state ? state.vappName : undefined;
            resourceInputs["vappTemplateId"] = state ? state.vappTemplateId : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["vmNameInTemplate"] = state ? state.vmNameInTemplate : undefined;
            resourceInputs["vmType"] = state ? state.vmType : undefined;
        } else {
            const args = argsOrState as VmArgs | undefined;
            resourceInputs["acceptAllEulas"] = args ? args.acceptAllEulas : undefined;
            resourceInputs["bootImage"] = args ? args.bootImage : undefined;
            resourceInputs["bootImageId"] = args ? args.bootImageId : undefined;
            resourceInputs["bootOptions"] = args ? args.bootOptions : undefined;
            resourceInputs["catalogName"] = args ? args.catalogName : undefined;
            resourceInputs["computerName"] = args ? args.computerName : undefined;
            resourceInputs["consolidateDisksOnCreate"] = args ? args.consolidateDisksOnCreate : undefined;
            resourceInputs["copyFromVmId"] = args ? args.copyFromVmId : undefined;
            resourceInputs["cpuCores"] = args ? args.cpuCores : undefined;
            resourceInputs["cpuHotAddEnabled"] = args ? args.cpuHotAddEnabled : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cpuPriority"] = args ? args.cpuPriority : undefined;
            resourceInputs["cpuReservation"] = args ? args.cpuReservation : undefined;
            resourceInputs["cpuShares"] = args ? args.cpuShares : undefined;
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["customization"] = args ? args.customization : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["exposeHardwareVirtualization"] = args ? args.exposeHardwareVirtualization : undefined;
            resourceInputs["firmware"] = args ? args.firmware : undefined;
            resourceInputs["guestProperties"] = args ? args.guestProperties : undefined;
            resourceInputs["hardwareVersion"] = args ? args.hardwareVersion : undefined;
            resourceInputs["href"] = args ? args.href : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["memoryHotAddEnabled"] = args ? args.memoryHotAddEnabled : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["memoryPriority"] = args ? args.memoryPriority : undefined;
            resourceInputs["memoryReservation"] = args ? args.memoryReservation : undefined;
            resourceInputs["memoryShares"] = args ? args.memoryShares : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkDhcpWaitSeconds"] = args ? args.networkDhcpWaitSeconds : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["overrideTemplateDisks"] = args ? args.overrideTemplateDisks : undefined;
            resourceInputs["placementPolicyId"] = args ? args.placementPolicyId : undefined;
            resourceInputs["powerOn"] = args ? args.powerOn : undefined;
            resourceInputs["preventUpdatePowerOff"] = args ? args.preventUpdatePowerOff : undefined;
            resourceInputs["securityTags"] = args ? args.securityTags : undefined;
            resourceInputs["setExtraConfigs"] = args ? args.setExtraConfigs : undefined;
            resourceInputs["sizingPolicyId"] = args ? args.sizingPolicyId : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["vappName"] = args ? args.vappName : undefined;
            resourceInputs["vappTemplateId"] = args ? args.vappTemplateId : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["vmNameInTemplate"] = args ? args.vmNameInTemplate : undefined;
            resourceInputs["extraConfigs"] = undefined /*out*/;
            resourceInputs["imported"] = undefined /*out*/;
            resourceInputs["inheritedMetadata"] = undefined /*out*/;
            resourceInputs["internalDisks"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusText"] = undefined /*out*/;
            resourceInputs["vappId"] = undefined /*out*/;
            resourceInputs["vmType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vm resources.
 */
export interface VmState {
    /**
     * Automatically accept EULA if OVA has it
     */
    acceptAllEulas?: pulumi.Input<boolean>;
    /**
     * Media name to add as boot image.
     *
     * @deprecated Deprecated
     */
    bootImage?: pulumi.Input<string>;
    /**
     * The URN of the media to use as boot image.
     */
    bootImageId?: pulumi.Input<string>;
    /**
     * A block defining the boot options of a VM
     */
    bootOptions?: pulumi.Input<inputs.VmBootOptions>;
    /**
     * The catalog name in which to find the given vApp Template or media for boot_image
     *
     * @deprecated Deprecated
     */
    catalogName?: pulumi.Input<string>;
    /**
     * Computer name to assign to this virtual machine
     */
    computerName?: pulumi.Input<string>;
    /**
     * Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
     * VDCs
     */
    consolidateDisksOnCreate?: pulumi.Input<boolean>;
    /**
     * Source VM that should be copied from
     */
    copyFromVmId?: pulumi.Input<string>;
    /**
     * The number of cores per socket
     */
    cpuCores?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of virtual CPUs while powered on.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
     * the resource allocation is not unlimited.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
     * virtualized workload
     */
    cpuPriority?: pulumi.Input<string>;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
     */
    cpuShares?: pulumi.Input<number>;
    /**
     * The number of virtual CPUs to allocate to the VM
     */
    cpus?: pulumi.Input<number>;
    /**
     * Guest customization block
     */
    customization?: pulumi.Input<inputs.VmCustomization>;
    /**
     * The VM description
     */
    description?: pulumi.Input<string>;
    disks?: pulumi.Input<pulumi.Input<inputs.VmDisk>[]>;
    /**
     * Expose hardware-assisted CPU virtualization to guest OS.
     */
    exposeHardwareVirtualization?: pulumi.Input<boolean>;
    /**
     * A block to retrieve extra configuration key-value pairs
     */
    extraConfigs?: pulumi.Input<pulumi.Input<inputs.VmExtraConfig>[]>;
    /**
     * Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
     * by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
     */
    firmware?: pulumi.Input<string>;
    /**
     * Key/value settings for guest properties
     */
    guestProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
     */
    hardwareVersion?: pulumi.Input<string>;
    /**
     * VM Hyper Reference
     */
    href?: pulumi.Input<string>;
    /**
     * Tells whether this resource has been imported
     */
    imported?: pulumi.Input<boolean>;
    /**
     * A map that contains metadata that is automatically added by VCD (10.5.1+) and provides details on the origin of the VM
     */
    inheritedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A block will show internal disk details
     */
    internalDisks?: pulumi.Input<pulumi.Input<inputs.VmInternalDisk>[]>;
    /**
     * The amount of RAM (in MB) to allocate to the VM
     */
    memory?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of memory while powered on.
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
     * when the resource allocation is not unlimited.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
     * virtualized workload
     */
    memoryPriority?: pulumi.Input<string>;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
     */
    memoryShares?: pulumi.Input<number>;
    /**
     * Key value map of metadata to assign to this VM
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given VM
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.VmMetadataEntry>[]>;
    /**
     * A name for the VM, unique within the vApp
     */
    name?: pulumi.Input<string>;
    /**
     * Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
     */
    networkDhcpWaitSeconds?: pulumi.Input<number>;
    /**
     * A block to define network interface. Multiple can be used.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VmNetwork>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Operating System type. Possible values can be found in documentation.
     */
    osType?: pulumi.Input<string>;
    /**
     * A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
     * and unit_number.
     */
    overrideTemplateDisks?: pulumi.Input<pulumi.Input<inputs.VmOverrideTemplateDisk>[]>;
    /**
     * VM placement policy ID. Has to be assigned to Org VDC.
     */
    placementPolicyId?: pulumi.Input<string>;
    /**
     * A boolean value stating if this VM should be powered on
     */
    powerOn?: pulumi.Input<boolean>;
    /**
     * True if the update of resource should fail when virtual machine power off needed.
     */
    preventUpdatePowerOff?: pulumi.Input<boolean>;
    /**
     * Security tags to assign to this VM
     */
    securityTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A block to set extra configuration key-value pairs
     */
    setExtraConfigs?: pulumi.Input<pulumi.Input<inputs.VmSetExtraConfig>[]>;
    /**
     * VM sizing policy ID. Has to be assigned to Org VDC.
     */
    sizingPolicyId?: pulumi.Input<string>;
    /**
     * Shows the status code of the VM
     */
    status?: pulumi.Input<number>;
    /**
     * Shows the status of the VM
     */
    statusText?: pulumi.Input<string>;
    /**
     * Storage profile to override the default one
     */
    storageProfile?: pulumi.Input<string>;
    /**
     * The name of the vApp Template to use
     *
     * @deprecated Deprecated
     */
    templateName?: pulumi.Input<string>;
    /**
     * ID of parent vApp
     */
    vappId?: pulumi.Input<string>;
    /**
     * The vApp this VM belongs to - Required, unless it is a standalone VM
     */
    vappName?: pulumi.Input<string>;
    /**
     * The URN of the vApp Template to use
     */
    vappTemplateId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
     */
    vmNameInTemplate?: pulumi.Input<string>;
    /**
     * Type of VM: either 'vcd_vapp_vm' or 'vcd_vm'
     */
    vmType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    /**
     * Automatically accept EULA if OVA has it
     */
    acceptAllEulas?: pulumi.Input<boolean>;
    /**
     * Media name to add as boot image.
     *
     * @deprecated Deprecated
     */
    bootImage?: pulumi.Input<string>;
    /**
     * The URN of the media to use as boot image.
     */
    bootImageId?: pulumi.Input<string>;
    /**
     * A block defining the boot options of a VM
     */
    bootOptions?: pulumi.Input<inputs.VmBootOptions>;
    /**
     * The catalog name in which to find the given vApp Template or media for boot_image
     *
     * @deprecated Deprecated
     */
    catalogName?: pulumi.Input<string>;
    /**
     * Computer name to assign to this virtual machine
     */
    computerName?: pulumi.Input<string>;
    /**
     * Consolidates disks during creation and allows to change disk size using 'override_template_disk' in fast provisioned
     * VDCs
     */
    consolidateDisksOnCreate?: pulumi.Input<boolean>;
    /**
     * Source VM that should be copied from
     */
    copyFromVmId?: pulumi.Input<string>;
    /**
     * The number of cores per socket
     */
    cpuCores?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of virtual CPUs while powered on.
     */
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit for how much of CPU can be consumed on the underlying virtualization infrastructure. This is only valid when
     * the resource allocation is not unlimited.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
     * virtualized workload
     */
    cpuPriority?: pulumi.Input<string>;
    /**
     * The amount of MHz reservation on the underlying virtualization infrastructure
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource. This is a read-only, unless the `cpu_priority` is CUSTOM
     */
    cpuShares?: pulumi.Input<number>;
    /**
     * The number of virtual CPUs to allocate to the VM
     */
    cpus?: pulumi.Input<number>;
    /**
     * Guest customization block
     */
    customization?: pulumi.Input<inputs.VmCustomization>;
    /**
     * The VM description
     */
    description?: pulumi.Input<string>;
    disks?: pulumi.Input<pulumi.Input<inputs.VmDisk>[]>;
    /**
     * Expose hardware-assisted CPU virtualization to guest OS.
     */
    exposeHardwareVirtualization?: pulumi.Input<boolean>;
    /**
     * Firmware of the VM. Can be either EFI or BIOS, availabilitydepending on the os_type argument. If unset, is set to 'bios'
     * by default. Changing the value when `power_on` is set to true, will cause a reboot of the VM.
     */
    firmware?: pulumi.Input<string>;
    /**
     * Key/value settings for guest properties
     */
    guestProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual Hardware Version (e.g.`vmx-14`, `vmx-13`, `vmx-12`, etc.)
     */
    hardwareVersion?: pulumi.Input<string>;
    /**
     * VM Hyper Reference
     */
    href?: pulumi.Input<string>;
    /**
     * The amount of RAM (in MB) to allocate to the VM
     */
    memory?: pulumi.Input<number>;
    /**
     * True if the virtual machine supports addition of memory while powered on.
     */
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    /**
     * The limit for how much of memory can be consumed on the underlying virtualization infrastructure. This is only valid
     * when the resource allocation is not unlimited.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Pre-determined relative priorities according to which the non-reserved portion of this resource is made available to the
     * virtualized workload
     */
    memoryPriority?: pulumi.Input<string>;
    /**
     * The amount of RAM (in MB) reservation on the underlying virtualization infrastructure
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * Custom priority for the resource. This is a read-only, unless the `memory_priority` is CUSTOM
     */
    memoryShares?: pulumi.Input<number>;
    /**
     * Key value map of metadata to assign to this VM
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given VM
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.VmMetadataEntry>[]>;
    /**
     * A name for the VM, unique within the vApp
     */
    name?: pulumi.Input<string>;
    /**
     * Optional number of seconds to try and wait for DHCP IP (valid for 'network' block only)
     */
    networkDhcpWaitSeconds?: pulumi.Input<number>;
    /**
     * A block to define network interface. Multiple can be used.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VmNetwork>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Operating System type. Possible values can be found in documentation.
     */
    osType?: pulumi.Input<string>;
    /**
     * A block to match internal_disk interface in template. Multiple can be used. Disk will be matched by bus_type, bus_number
     * and unit_number.
     */
    overrideTemplateDisks?: pulumi.Input<pulumi.Input<inputs.VmOverrideTemplateDisk>[]>;
    /**
     * VM placement policy ID. Has to be assigned to Org VDC.
     */
    placementPolicyId?: pulumi.Input<string>;
    /**
     * A boolean value stating if this VM should be powered on
     */
    powerOn?: pulumi.Input<boolean>;
    /**
     * True if the update of resource should fail when virtual machine power off needed.
     */
    preventUpdatePowerOff?: pulumi.Input<boolean>;
    /**
     * Security tags to assign to this VM
     */
    securityTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A block to set extra configuration key-value pairs
     */
    setExtraConfigs?: pulumi.Input<pulumi.Input<inputs.VmSetExtraConfig>[]>;
    /**
     * VM sizing policy ID. Has to be assigned to Org VDC.
     */
    sizingPolicyId?: pulumi.Input<string>;
    /**
     * Storage profile to override the default one
     */
    storageProfile?: pulumi.Input<string>;
    /**
     * The name of the vApp Template to use
     *
     * @deprecated Deprecated
     */
    templateName?: pulumi.Input<string>;
    /**
     * The vApp this VM belongs to - Required, unless it is a standalone VM
     */
    vappName?: pulumi.Input<string>;
    /**
     * The URN of the vApp Template to use
     */
    vappTemplateId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * The name of the VM in vApp Template to use. In cases when vApp template has more than one VM
     */
    vmNameInTemplate?: pulumi.Input<string>;
}
