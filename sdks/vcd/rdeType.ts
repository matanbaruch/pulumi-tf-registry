// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdeType extends pulumi.CustomResource {
    /**
     * Get an existing RdeType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdeTypeState, opts?: pulumi.CustomResourceOptions): RdeType {
        return new RdeType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/rdeType:RdeType';

    /**
     * Returns true if the given object is an instance of RdeType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdeType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdeType.__pulumiType;
    }

    /**
     * The description of the Runtime Defined Entity Type
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An external entity's ID that this definition may apply to
     */
    public readonly externalId!: pulumi.Output<string | undefined>;
    /**
     * Optional blocks that map RDE lifecycle events to existing Behaviors, that will be automatically invoked when the
     * corresponding event is triggered
     */
    public readonly hooks!: pulumi.Output<outputs.RdeTypeHook[] | undefined>;
    /**
     * To be used when creating a new version of a Runtime Defined Entity Type. Specifies the version of the type that will be
     * the template for the authorization configuration of the new version.The Type ACLs and the access requirements of the
     * Type Behaviors of the new version will be copied from those of the inherited version.If not set, then the new type
     * version will not inherit another version and will have the default authorization settings, just like the first version
     * of a new type
     */
    public readonly inheritedVersion!: pulumi.Output<string | undefined>;
    /**
     * Set of Defined Interface URNs that this Runtime Defined Entity Type is referenced by
     */
    public readonly interfaceIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the Runtime Defined Entity Type
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A unique namespace associated with the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be
     * unique
     */
    public readonly nss!: pulumi.Output<string>;
    /**
     * True if the Runtime Defined Entity Type cannot be modified
     */
    public /*out*/ readonly readonly!: pulumi.Output<boolean>;
    /**
     * The JSON-Schema valid definition of the Runtime Defined Entity Type
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * URL that should point to a JSON-Schema valid definition file of the Runtime Defined Entity Type
     */
    public readonly schemaUrl!: pulumi.Output<string | undefined>;
    /**
     * The vendor name for the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
     */
    public readonly vendor!: pulumi.Output<string>;
    /**
     * The version of the Runtime Defined Entity Type. The version string must follow semantic versioning rules. Combination of
     * `vendor`, `nss` and `version` must be unique
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a RdeType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdeTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdeTypeArgs | RdeTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdeTypeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["hooks"] = state ? state.hooks : undefined;
            resourceInputs["inheritedVersion"] = state ? state.inheritedVersion : undefined;
            resourceInputs["interfaceIds"] = state ? state.interfaceIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nss"] = state ? state.nss : undefined;
            resourceInputs["readonly"] = state ? state.readonly : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaUrl"] = state ? state.schemaUrl : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as RdeTypeArgs | undefined;
            if ((!args || args.nss === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nss'");
            }
            if ((!args || args.vendor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vendor'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["hooks"] = args ? args.hooks : undefined;
            resourceInputs["inheritedVersion"] = args ? args.inheritedVersion : undefined;
            resourceInputs["interfaceIds"] = args ? args.interfaceIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nss"] = args ? args.nss : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["schemaUrl"] = args ? args.schemaUrl : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["readonly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdeType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdeType resources.
 */
export interface RdeTypeState {
    /**
     * The description of the Runtime Defined Entity Type
     */
    description?: pulumi.Input<string>;
    /**
     * An external entity's ID that this definition may apply to
     */
    externalId?: pulumi.Input<string>;
    /**
     * Optional blocks that map RDE lifecycle events to existing Behaviors, that will be automatically invoked when the
     * corresponding event is triggered
     */
    hooks?: pulumi.Input<pulumi.Input<inputs.RdeTypeHook>[]>;
    /**
     * To be used when creating a new version of a Runtime Defined Entity Type. Specifies the version of the type that will be
     * the template for the authorization configuration of the new version.The Type ACLs and the access requirements of the
     * Type Behaviors of the new version will be copied from those of the inherited version.If not set, then the new type
     * version will not inherit another version and will have the default authorization settings, just like the first version
     * of a new type
     */
    inheritedVersion?: pulumi.Input<string>;
    /**
     * Set of Defined Interface URNs that this Runtime Defined Entity Type is referenced by
     */
    interfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Runtime Defined Entity Type
     */
    name?: pulumi.Input<string>;
    /**
     * A unique namespace associated with the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be
     * unique
     */
    nss?: pulumi.Input<string>;
    /**
     * True if the Runtime Defined Entity Type cannot be modified
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * The JSON-Schema valid definition of the Runtime Defined Entity Type
     */
    schema?: pulumi.Input<string>;
    /**
     * URL that should point to a JSON-Schema valid definition file of the Runtime Defined Entity Type
     */
    schemaUrl?: pulumi.Input<string>;
    /**
     * The vendor name for the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
     */
    vendor?: pulumi.Input<string>;
    /**
     * The version of the Runtime Defined Entity Type. The version string must follow semantic versioning rules. Combination of
     * `vendor`, `nss` and `version` must be unique
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdeType resource.
 */
export interface RdeTypeArgs {
    /**
     * The description of the Runtime Defined Entity Type
     */
    description?: pulumi.Input<string>;
    /**
     * An external entity's ID that this definition may apply to
     */
    externalId?: pulumi.Input<string>;
    /**
     * Optional blocks that map RDE lifecycle events to existing Behaviors, that will be automatically invoked when the
     * corresponding event is triggered
     */
    hooks?: pulumi.Input<pulumi.Input<inputs.RdeTypeHook>[]>;
    /**
     * To be used when creating a new version of a Runtime Defined Entity Type. Specifies the version of the type that will be
     * the template for the authorization configuration of the new version.The Type ACLs and the access requirements of the
     * Type Behaviors of the new version will be copied from those of the inherited version.If not set, then the new type
     * version will not inherit another version and will have the default authorization settings, just like the first version
     * of a new type
     */
    inheritedVersion?: pulumi.Input<string>;
    /**
     * Set of Defined Interface URNs that this Runtime Defined Entity Type is referenced by
     */
    interfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Runtime Defined Entity Type
     */
    name?: pulumi.Input<string>;
    /**
     * A unique namespace associated with the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be
     * unique
     */
    nss: pulumi.Input<string>;
    /**
     * The JSON-Schema valid definition of the Runtime Defined Entity Type
     */
    schema?: pulumi.Input<string>;
    /**
     * URL that should point to a JSON-Schema valid definition file of the Runtime Defined Entity Type
     */
    schemaUrl?: pulumi.Input<string>;
    /**
     * The vendor name for the Runtime Defined Entity Type. Combination of `vendor`, `nss` and `version` must be unique
     */
    vendor: pulumi.Input<string>;
    /**
     * The version of the Runtime Defined Entity Type. The version string must follow semantic versioning rules. Combination of
     * `vendor`, `nss` and `version` must be unique
     */
    version: pulumi.Input<string>;
}
