// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NsxtAlbPool extends pulumi.CustomResource {
    /**
     * Get an existing NsxtAlbPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtAlbPoolState, opts?: pulumi.CustomResourceOptions): NsxtAlbPool {
        return new NsxtAlbPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtAlbPool:NsxtAlbPool';

    /**
     * Returns true if the given object is an instance of NsxtAlbPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtAlbPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtAlbPool.__pulumiType;
    }

    /**
     * Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
     * `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * IDs of associated virtual services
     */
    public /*out*/ readonly associatedVirtualServiceIds!: pulumi.Output<string[]>;
    /**
     * Names of associated virtual services
     */
    public /*out*/ readonly associatedVirtualServices!: pulumi.Output<string[]>;
    /**
     * A set of root certificate IDs to use when validating certificates presented by pool members
     */
    public readonly caCertificateIds!: pulumi.Output<string[] | undefined>;
    /**
     * Boolean flag if common name check of the certificate should be enabled
     */
    public readonly cnCheckEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Default Port defines destination server port used by the traffic sent to the member (default 80)
     */
    public readonly defaultPort!: pulumi.Output<number | undefined>;
    /**
     * Description of ALB Pool
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of domain names which will be used to verify common names
     */
    public readonly domainNames!: pulumi.Output<string[] | undefined>;
    /**
     * Edge gateway ID in which ALB Pool should be created
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * Boolean value if ALB Pool is enabled or not (default true)
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Number of enabled members in the pool
     */
    public /*out*/ readonly enabledMemberCount!: pulumi.Output<number>;
    /**
     * Maximum time in minutes to gracefully disable pool member (default 1)
     */
    public readonly gracefulTimeoutPeriod!: pulumi.Output<number | undefined>;
    /**
     * Health message
     */
    public /*out*/ readonly healthMessage!: pulumi.Output<string>;
    public readonly healthMonitors!: pulumi.Output<outputs.NsxtAlbPoolHealthMonitor[] | undefined>;
    /**
     * Number of members in the pool
     */
    public /*out*/ readonly memberCount!: pulumi.Output<number>;
    /**
     * ID of Firewall Group to use for Pool Membership (VCD 10.4.1+)
     */
    public readonly memberGroupId!: pulumi.Output<string | undefined>;
    /**
     * ALB Pool Members
     */
    public readonly members!: pulumi.Output<outputs.NsxtAlbPoolMember[] | undefined>;
    /**
     * Name of ALB Pool
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Monitors if the traffic is accepted by node (default true)
     */
    public readonly passiveMonitoringEnabled!: pulumi.Output<boolean | undefined>;
    public readonly persistenceProfile!: pulumi.Output<outputs.NsxtAlbPoolPersistenceProfile | undefined>;
    /**
     * Enables SSL - Must be on when CA certificates are used
     */
    public readonly sslEnabled!: pulumi.Output<boolean>;
    /**
     * Number of members in the pool serving the traffic
     */
    public /*out*/ readonly upMemberCount!: pulumi.Output<number>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NsxtAlbPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtAlbPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtAlbPoolArgs | NsxtAlbPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtAlbPoolState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["associatedVirtualServiceIds"] = state ? state.associatedVirtualServiceIds : undefined;
            resourceInputs["associatedVirtualServices"] = state ? state.associatedVirtualServices : undefined;
            resourceInputs["caCertificateIds"] = state ? state.caCertificateIds : undefined;
            resourceInputs["cnCheckEnabled"] = state ? state.cnCheckEnabled : undefined;
            resourceInputs["defaultPort"] = state ? state.defaultPort : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enabledMemberCount"] = state ? state.enabledMemberCount : undefined;
            resourceInputs["gracefulTimeoutPeriod"] = state ? state.gracefulTimeoutPeriod : undefined;
            resourceInputs["healthMessage"] = state ? state.healthMessage : undefined;
            resourceInputs["healthMonitors"] = state ? state.healthMonitors : undefined;
            resourceInputs["memberCount"] = state ? state.memberCount : undefined;
            resourceInputs["memberGroupId"] = state ? state.memberGroupId : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["passiveMonitoringEnabled"] = state ? state.passiveMonitoringEnabled : undefined;
            resourceInputs["persistenceProfile"] = state ? state.persistenceProfile : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["upMemberCount"] = state ? state.upMemberCount : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NsxtAlbPoolArgs | undefined;
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["caCertificateIds"] = args ? args.caCertificateIds : undefined;
            resourceInputs["cnCheckEnabled"] = args ? args.cnCheckEnabled : undefined;
            resourceInputs["defaultPort"] = args ? args.defaultPort : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["gracefulTimeoutPeriod"] = args ? args.gracefulTimeoutPeriod : undefined;
            resourceInputs["healthMonitors"] = args ? args.healthMonitors : undefined;
            resourceInputs["memberGroupId"] = args ? args.memberGroupId : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["passiveMonitoringEnabled"] = args ? args.passiveMonitoringEnabled : undefined;
            resourceInputs["persistenceProfile"] = args ? args.persistenceProfile : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["associatedVirtualServiceIds"] = undefined /*out*/;
            resourceInputs["associatedVirtualServices"] = undefined /*out*/;
            resourceInputs["enabledMemberCount"] = undefined /*out*/;
            resourceInputs["healthMessage"] = undefined /*out*/;
            resourceInputs["memberCount"] = undefined /*out*/;
            resourceInputs["upMemberCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtAlbPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NsxtAlbPool resources.
 */
export interface NsxtAlbPoolState {
    /**
     * Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
     * `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * IDs of associated virtual services
     */
    associatedVirtualServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Names of associated virtual services
     */
    associatedVirtualServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of root certificate IDs to use when validating certificates presented by pool members
     */
    caCertificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean flag if common name check of the certificate should be enabled
     */
    cnCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Default Port defines destination server port used by the traffic sent to the member (default 80)
     */
    defaultPort?: pulumi.Input<number>;
    /**
     * Description of ALB Pool
     */
    description?: pulumi.Input<string>;
    /**
     * List of domain names which will be used to verify common names
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Edge gateway ID in which ALB Pool should be created
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * Boolean value if ALB Pool is enabled or not (default true)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Number of enabled members in the pool
     */
    enabledMemberCount?: pulumi.Input<number>;
    /**
     * Maximum time in minutes to gracefully disable pool member (default 1)
     */
    gracefulTimeoutPeriod?: pulumi.Input<number>;
    /**
     * Health message
     */
    healthMessage?: pulumi.Input<string>;
    healthMonitors?: pulumi.Input<pulumi.Input<inputs.NsxtAlbPoolHealthMonitor>[]>;
    /**
     * Number of members in the pool
     */
    memberCount?: pulumi.Input<number>;
    /**
     * ID of Firewall Group to use for Pool Membership (VCD 10.4.1+)
     */
    memberGroupId?: pulumi.Input<string>;
    /**
     * ALB Pool Members
     */
    members?: pulumi.Input<pulumi.Input<inputs.NsxtAlbPoolMember>[]>;
    /**
     * Name of ALB Pool
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Monitors if the traffic is accepted by node (default true)
     */
    passiveMonitoringEnabled?: pulumi.Input<boolean>;
    persistenceProfile?: pulumi.Input<inputs.NsxtAlbPoolPersistenceProfile>;
    /**
     * Enables SSL - Must be on when CA certificates are used
     */
    sslEnabled?: pulumi.Input<boolean>;
    /**
     * Number of members in the pool serving the traffic
     */
    upMemberCount?: pulumi.Input<number>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtAlbPool resource.
 */
export interface NsxtAlbPoolArgs {
    /**
     * Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`,
     * `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
     */
    algorithm?: pulumi.Input<string>;
    /**
     * A set of root certificate IDs to use when validating certificates presented by pool members
     */
    caCertificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean flag if common name check of the certificate should be enabled
     */
    cnCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Default Port defines destination server port used by the traffic sent to the member (default 80)
     */
    defaultPort?: pulumi.Input<number>;
    /**
     * Description of ALB Pool
     */
    description?: pulumi.Input<string>;
    /**
     * List of domain names which will be used to verify common names
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Edge gateway ID in which ALB Pool should be created
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * Boolean value if ALB Pool is enabled or not (default true)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Maximum time in minutes to gracefully disable pool member (default 1)
     */
    gracefulTimeoutPeriod?: pulumi.Input<number>;
    healthMonitors?: pulumi.Input<pulumi.Input<inputs.NsxtAlbPoolHealthMonitor>[]>;
    /**
     * ID of Firewall Group to use for Pool Membership (VCD 10.4.1+)
     */
    memberGroupId?: pulumi.Input<string>;
    /**
     * ALB Pool Members
     */
    members?: pulumi.Input<pulumi.Input<inputs.NsxtAlbPoolMember>[]>;
    /**
     * Name of ALB Pool
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Monitors if the traffic is accepted by node (default true)
     */
    passiveMonitoringEnabled?: pulumi.Input<boolean>;
    persistenceProfile?: pulumi.Input<inputs.NsxtAlbPoolPersistenceProfile>;
    /**
     * Enables SSL - Must be on when CA certificates are used
     */
    sslEnabled?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    vdc?: pulumi.Input<string>;
}
