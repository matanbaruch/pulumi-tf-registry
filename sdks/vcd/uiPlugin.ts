// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UiPlugin extends pulumi.CustomResource {
    /**
     * Get an existing UiPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UiPluginState, opts?: pulumi.CustomResourceOptions): UiPlugin {
        return new UiPlugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/uiPlugin:UiPlugin';

    /**
     * Returns true if the given object is an instance of UiPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UiPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UiPlugin.__pulumiType;
    }

    /**
     * The description of the UI Plugin
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * true to make the UI Plugin enabled. 'false' to make it disabled
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The license of the UI Plugin
     */
    public /*out*/ readonly license!: pulumi.Output<string>;
    /**
     * The website of the UI Plugin
     */
    public /*out*/ readonly link!: pulumi.Output<string>;
    /**
     * The UI Plugin name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Absolute or relative path to the ZIP file containing the UI Plugin
     */
    public readonly pluginPath!: pulumi.Output<string | undefined>;
    /**
     * This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true`
     * to make it provider scoped or `false` otherwise
     */
    public readonly providerScoped!: pulumi.Output<boolean>;
    /**
     * The status of the UI Plugin
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Set of organization IDs to which this UI Plugin must be published
     */
    public readonly tenantIds!: pulumi.Output<string[] | undefined>;
    /**
     * This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true`
     * to make it tenant scoped or `false` otherwise
     */
    public readonly tenantScoped!: pulumi.Output<boolean>;
    /**
     * The UI Plugin vendor name
     */
    public /*out*/ readonly vendor!: pulumi.Output<string>;
    /**
     * The version of the UI Plugin
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a UiPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UiPluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UiPluginArgs | UiPluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UiPluginState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginPath"] = state ? state.pluginPath : undefined;
            resourceInputs["providerScoped"] = state ? state.providerScoped : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenantIds"] = state ? state.tenantIds : undefined;
            resourceInputs["tenantScoped"] = state ? state.tenantScoped : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as UiPluginArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["pluginPath"] = args ? args.pluginPath : undefined;
            resourceInputs["providerScoped"] = args ? args.providerScoped : undefined;
            resourceInputs["tenantIds"] = args ? args.tenantIds : undefined;
            resourceInputs["tenantScoped"] = args ? args.tenantScoped : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["license"] = undefined /*out*/;
            resourceInputs["link"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vendor"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UiPlugin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UiPlugin resources.
 */
export interface UiPluginState {
    /**
     * The description of the UI Plugin
     */
    description?: pulumi.Input<string>;
    /**
     * true to make the UI Plugin enabled. 'false' to make it disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The license of the UI Plugin
     */
    license?: pulumi.Input<string>;
    /**
     * The website of the UI Plugin
     */
    link?: pulumi.Input<string>;
    /**
     * The UI Plugin name
     */
    name?: pulumi.Input<string>;
    /**
     * Absolute or relative path to the ZIP file containing the UI Plugin
     */
    pluginPath?: pulumi.Input<string>;
    /**
     * This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true`
     * to make it provider scoped or `false` otherwise
     */
    providerScoped?: pulumi.Input<boolean>;
    /**
     * The status of the UI Plugin
     */
    status?: pulumi.Input<string>;
    /**
     * Set of organization IDs to which this UI Plugin must be published
     */
    tenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true`
     * to make it tenant scoped or `false` otherwise
     */
    tenantScoped?: pulumi.Input<boolean>;
    /**
     * The UI Plugin vendor name
     */
    vendor?: pulumi.Input<string>;
    /**
     * The version of the UI Plugin
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UiPlugin resource.
 */
export interface UiPluginArgs {
    /**
     * true to make the UI Plugin enabled. 'false' to make it disabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Absolute or relative path to the ZIP file containing the UI Plugin
     */
    pluginPath?: pulumi.Input<string>;
    /**
     * This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true`
     * to make it provider scoped or `false` otherwise
     */
    providerScoped?: pulumi.Input<boolean>;
    /**
     * Set of organization IDs to which this UI Plugin must be published
     */
    tenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This value is calculated automatically on create by reading the UI Plugin ZIP file contents. You can updateit to `true`
     * to make it tenant scoped or `false` otherwise
     */
    tenantScoped?: pulumi.Input<boolean>;
}
