// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NsxtEdgegateway extends pulumi.CustomResource {
    /**
     * Get an existing NsxtEdgegateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtEdgegatewayState, opts?: pulumi.CustomResourceOptions): NsxtEdgegateway {
        return new NsxtEdgegateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtEdgegateway:NsxtEdgegateway';

    /**
     * Returns true if the given object is an instance of NsxtEdgegateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtEdgegateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtEdgegateway.__pulumiType;
    }

    /**
     * Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
     */
    public readonly dedicateExternalNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * Edge Gateway description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
     */
    public readonly edgeClusterId!: pulumi.Output<string>;
    /**
     * Total number of IPs allocated for this Gateway from NSX-T Segment backed External Network uplinks
     */
    public /*out*/ readonly externalNetworkAllocatedIpCount!: pulumi.Output<number>;
    /**
     * External network ID
     */
    public readonly externalNetworkId!: pulumi.Output<string>;
    /**
     * Additional NSX-T Segment Backed networks to attach
     */
    public readonly externalNetworks!: pulumi.Output<outputs.NsxtEdgegatewayExternalNetwork[] | undefined>;
    /**
     * How many maximum IPs should be reported in 'used_ipcount' and 'unused_ip_count'. Default 1000000, 0 - unlimited
     */
    public readonly ipCountReadLimit!: pulumi.Output<number | undefined>;
    /**
     * Edge Gateway name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * ID of VDC or VDC Group
     */
    public readonly ownerId!: pulumi.Output<string>;
    /**
     * Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
     */
    public /*out*/ readonly primaryIp!: pulumi.Output<string>;
    /**
     * Optional ID of starting VDC if the 'owner_id' is a VDC Group
     */
    public readonly startingVdcId!: pulumi.Output<string | undefined>;
    /**
     * Auto allocation of subnets by using per subnet IP allocation counts
     */
    public readonly subnetWithIpCounts!: pulumi.Output<outputs.NsxtEdgegatewaySubnetWithIpCount[] | undefined>;
    /**
     * Subnet definitions for this Edge Gateway. IP allocation is controlled using 'total_allocated_ip_count'
     */
    public readonly subnetWithTotalIpCounts!: pulumi.Output<outputs.NsxtEdgegatewaySubnetWithTotalIpCount[] | undefined>;
    /**
     * One or more blocks with external network information to be attached to this gateway's interface including IP allocation
     * ranges
     */
    public readonly subnets!: pulumi.Output<outputs.NsxtEdgegatewaySubnet[] | undefined>;
    /**
     * Total number of IP addresses allocated for this gateway from Tier0 uplink. Can be set with 'subnet_with_total_ip_count'
     * definitions only
     */
    public readonly totalAllocatedIpCount!: pulumi.Output<number>;
    /**
     * Number of unused IP addresses
     */
    public /*out*/ readonly unusedIpCount!: pulumi.Output<number>;
    /**
     * Boolean value that specifies that the Edge Gateway is using IP Spaces
     */
    public /*out*/ readonly useIpSpaces!: pulumi.Output<boolean>;
    /**
     * Number of used IP addresses
     */
    public /*out*/ readonly usedIpCount!: pulumi.Output<number>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    public readonly vdc!: pulumi.Output<string>;

    /**
     * Create a NsxtEdgegateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtEdgegatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtEdgegatewayArgs | NsxtEdgegatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtEdgegatewayState | undefined;
            resourceInputs["dedicateExternalNetwork"] = state ? state.dedicateExternalNetwork : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeClusterId"] = state ? state.edgeClusterId : undefined;
            resourceInputs["externalNetworkAllocatedIpCount"] = state ? state.externalNetworkAllocatedIpCount : undefined;
            resourceInputs["externalNetworkId"] = state ? state.externalNetworkId : undefined;
            resourceInputs["externalNetworks"] = state ? state.externalNetworks : undefined;
            resourceInputs["ipCountReadLimit"] = state ? state.ipCountReadLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["primaryIp"] = state ? state.primaryIp : undefined;
            resourceInputs["startingVdcId"] = state ? state.startingVdcId : undefined;
            resourceInputs["subnetWithIpCounts"] = state ? state.subnetWithIpCounts : undefined;
            resourceInputs["subnetWithTotalIpCounts"] = state ? state.subnetWithTotalIpCounts : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["totalAllocatedIpCount"] = state ? state.totalAllocatedIpCount : undefined;
            resourceInputs["unusedIpCount"] = state ? state.unusedIpCount : undefined;
            resourceInputs["useIpSpaces"] = state ? state.useIpSpaces : undefined;
            resourceInputs["usedIpCount"] = state ? state.usedIpCount : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NsxtEdgegatewayArgs | undefined;
            if ((!args || args.externalNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalNetworkId'");
            }
            resourceInputs["dedicateExternalNetwork"] = args ? args.dedicateExternalNetwork : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeClusterId"] = args ? args.edgeClusterId : undefined;
            resourceInputs["externalNetworkId"] = args ? args.externalNetworkId : undefined;
            resourceInputs["externalNetworks"] = args ? args.externalNetworks : undefined;
            resourceInputs["ipCountReadLimit"] = args ? args.ipCountReadLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["startingVdcId"] = args ? args.startingVdcId : undefined;
            resourceInputs["subnetWithIpCounts"] = args ? args.subnetWithIpCounts : undefined;
            resourceInputs["subnetWithTotalIpCounts"] = args ? args.subnetWithTotalIpCounts : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["totalAllocatedIpCount"] = args ? args.totalAllocatedIpCount : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["externalNetworkAllocatedIpCount"] = undefined /*out*/;
            resourceInputs["primaryIp"] = undefined /*out*/;
            resourceInputs["unusedIpCount"] = undefined /*out*/;
            resourceInputs["useIpSpaces"] = undefined /*out*/;
            resourceInputs["usedIpCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtEdgegateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NsxtEdgegateway resources.
 */
export interface NsxtEdgegatewayState {
    /**
     * Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
     */
    dedicateExternalNetwork?: pulumi.Input<boolean>;
    /**
     * Edge Gateway description
     */
    description?: pulumi.Input<string>;
    /**
     * Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * Total number of IPs allocated for this Gateway from NSX-T Segment backed External Network uplinks
     */
    externalNetworkAllocatedIpCount?: pulumi.Input<number>;
    /**
     * External network ID
     */
    externalNetworkId?: pulumi.Input<string>;
    /**
     * Additional NSX-T Segment Backed networks to attach
     */
    externalNetworks?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewayExternalNetwork>[]>;
    /**
     * How many maximum IPs should be reported in 'used_ipcount' and 'unused_ip_count'. Default 1000000, 0 - unlimited
     */
    ipCountReadLimit?: pulumi.Input<number>;
    /**
     * Edge Gateway name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * ID of VDC or VDC Group
     */
    ownerId?: pulumi.Input<string>;
    /**
     * Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
     */
    primaryIp?: pulumi.Input<string>;
    /**
     * Optional ID of starting VDC if the 'owner_id' is a VDC Group
     */
    startingVdcId?: pulumi.Input<string>;
    /**
     * Auto allocation of subnets by using per subnet IP allocation counts
     */
    subnetWithIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithIpCount>[]>;
    /**
     * Subnet definitions for this Edge Gateway. IP allocation is controlled using 'total_allocated_ip_count'
     */
    subnetWithTotalIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithTotalIpCount>[]>;
    /**
     * One or more blocks with external network information to be attached to this gateway's interface including IP allocation
     * ranges
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnet>[]>;
    /**
     * Total number of IP addresses allocated for this gateway from Tier0 uplink. Can be set with 'subnet_with_total_ip_count'
     * definitions only
     */
    totalAllocatedIpCount?: pulumi.Input<number>;
    /**
     * Number of unused IP addresses
     */
    unusedIpCount?: pulumi.Input<number>;
    /**
     * Boolean value that specifies that the Edge Gateway is using IP Spaces
     */
    useIpSpaces?: pulumi.Input<boolean>;
    /**
     * Number of used IP addresses
     */
    usedIpCount?: pulumi.Input<number>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtEdgegateway resource.
 */
export interface NsxtEdgegatewayArgs {
    /**
     * Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
     */
    dedicateExternalNetwork?: pulumi.Input<boolean>;
    /**
     * Edge Gateway description
     */
    description?: pulumi.Input<string>;
    /**
     * Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * External network ID
     */
    externalNetworkId: pulumi.Input<string>;
    /**
     * Additional NSX-T Segment Backed networks to attach
     */
    externalNetworks?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewayExternalNetwork>[]>;
    /**
     * How many maximum IPs should be reported in 'used_ipcount' and 'unused_ip_count'. Default 1000000, 0 - unlimited
     */
    ipCountReadLimit?: pulumi.Input<number>;
    /**
     * Edge Gateway name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * ID of VDC or VDC Group
     */
    ownerId?: pulumi.Input<string>;
    /**
     * Optional ID of starting VDC if the 'owner_id' is a VDC Group
     */
    startingVdcId?: pulumi.Input<string>;
    /**
     * Auto allocation of subnets by using per subnet IP allocation counts
     */
    subnetWithIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithIpCount>[]>;
    /**
     * Subnet definitions for this Edge Gateway. IP allocation is controlled using 'total_allocated_ip_count'
     */
    subnetWithTotalIpCounts?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnetWithTotalIpCount>[]>;
    /**
     * One or more blocks with external network information to be attached to this gateway's interface including IP allocation
     * ranges
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.NsxtEdgegatewaySubnet>[]>;
    /**
     * Total number of IP addresses allocated for this gateway from Tier0 uplink. Can be set with 'subnet_with_total_ip_count'
     * definitions only
     */
    totalAllocatedIpCount?: pulumi.Input<number>;
    /**
     * The name of VDC to use, optional if defined at provider level
     *
     * @deprecated Deprecated
     */
    vdc?: pulumi.Input<string>;
}
