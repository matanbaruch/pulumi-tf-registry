// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getIpSpaceIpAllocation(args: GetIpSpaceIpAllocationArgs, opts?: pulumi.InvokeOptions): Promise<GetIpSpaceIpAllocationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getIpSpaceIpAllocation:getIpSpaceIpAllocation", {
        "description": args.description,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "ipSpaceId": args.ipSpaceId,
        "orgId": args.orgId,
        "type": args.type,
        "usageState": args.usageState,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIpSpaceIpAllocation.
 */
export interface GetIpSpaceIpAllocationArgs {
    description?: string;
    id?: string;
    ipAddress: string;
    ipSpaceId: string;
    orgId: string;
    type: string;
    usageState?: string;
}

/**
 * A collection of values returned by getIpSpaceIpAllocation.
 */
export interface GetIpSpaceIpAllocationResult {
    readonly allocationDate: string;
    readonly description: string;
    readonly id: string;
    readonly ip: string;
    readonly ipAddress: string;
    readonly ipSpaceId: string;
    readonly orgId: string;
    readonly prefixLength: string;
    readonly type: string;
    readonly usageState: string;
    readonly usedById: string;
}
export function getIpSpaceIpAllocationOutput(args: GetIpSpaceIpAllocationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpSpaceIpAllocationResult> {
    return pulumi.output(args).apply((a: any) => getIpSpaceIpAllocation(a, opts))
}

/**
 * A collection of arguments for invoking getIpSpaceIpAllocation.
 */
export interface GetIpSpaceIpAllocationOutputArgs {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    ipSpaceId: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    type: pulumi.Input<string>;
    usageState?: pulumi.Input<string>;
}
