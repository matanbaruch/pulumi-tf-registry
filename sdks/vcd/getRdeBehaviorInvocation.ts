// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRdeBehaviorInvocation(args: GetRdeBehaviorInvocationArgs, opts?: pulumi.InvokeOptions): Promise<GetRdeBehaviorInvocationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getRdeBehaviorInvocation:getRdeBehaviorInvocation", {
        "arguments": args.arguments,
        "behaviorId": args.behaviorId,
        "id": args.id,
        "invokeOnRefresh": args.invokeOnRefresh,
        "metadata": args.metadata,
        "rdeId": args.rdeId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRdeBehaviorInvocation.
 */
export interface GetRdeBehaviorInvocationArgs {
    arguments?: {[key: string]: string};
    behaviorId: string;
    id?: string;
    invokeOnRefresh?: boolean;
    metadata?: {[key: string]: string};
    rdeId: string;
}

/**
 * A collection of values returned by getRdeBehaviorInvocation.
 */
export interface GetRdeBehaviorInvocationResult {
    readonly arguments?: {[key: string]: string};
    readonly behaviorId: string;
    readonly id: string;
    readonly invokeOnRefresh?: boolean;
    readonly metadata?: {[key: string]: string};
    readonly rdeId: string;
    readonly result: string;
}
export function getRdeBehaviorInvocationOutput(args: GetRdeBehaviorInvocationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRdeBehaviorInvocationResult> {
    return pulumi.output(args).apply((a: any) => getRdeBehaviorInvocation(a, opts))
}

/**
 * A collection of arguments for invoking getRdeBehaviorInvocation.
 */
export interface GetRdeBehaviorInvocationOutputArgs {
    arguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    behaviorId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    invokeOnRefresh?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    rdeId: pulumi.Input<string>;
}
