// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIpSpace(args: GetIpSpaceArgs, opts?: pulumi.InvokeOptions): Promise<GetIpSpaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getIpSpace:getIpSpace", {
        "id": args.id,
        "name": args.name,
        "orgId": args.orgId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIpSpace.
 */
export interface GetIpSpaceArgs {
    id?: string;
    name: string;
    orgId?: string;
}

/**
 * A collection of values returned by getIpSpace.
 */
export interface GetIpSpaceResult {
    readonly defaultFirewallRuleCreationEnabled: boolean;
    readonly defaultNoSnatRuleCreationEnabled: boolean;
    readonly defaultSnatRuleCreationEnabled: boolean;
    readonly description: string;
    readonly externalScope: string;
    readonly id: string;
    readonly internalScopes: string[];
    readonly ipPrefixes: outputs.GetIpSpaceIpPrefix[];
    readonly ipRangeQuota: string;
    readonly ipRanges: outputs.GetIpSpaceIpRange[];
    readonly name: string;
    readonly orgId?: string;
    readonly routeAdvertisementEnabled: boolean;
    readonly type: string;
}
export function getIpSpaceOutput(args: GetIpSpaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpSpaceResult> {
    return pulumi.output(args).apply((a: any) => getIpSpace(a, opts))
}

/**
 * A collection of arguments for invoking getIpSpace.
 */
export interface GetIpSpaceOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
}
