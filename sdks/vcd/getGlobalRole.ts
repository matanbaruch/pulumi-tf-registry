// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGlobalRole(args: GetGlobalRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetGlobalRoleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getGlobalRole:getGlobalRole", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGlobalRole.
 */
export interface GetGlobalRoleArgs {
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getGlobalRole.
 */
export interface GetGlobalRoleResult {
    readonly bundleKey: string;
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly publishToAllTenants: boolean;
    readonly readOnly: boolean;
    readonly rights: string[];
    readonly tenants: string[];
}
export function getGlobalRoleOutput(args: GetGlobalRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGlobalRoleResult> {
    return pulumi.output(args).apply((a: any) => getGlobalRole(a, opts))
}

/**
 * A collection of arguments for invoking getGlobalRole.
 */
export interface GetGlobalRoleOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
