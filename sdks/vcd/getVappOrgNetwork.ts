// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVappOrgNetwork(args: GetVappOrgNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetVappOrgNetworkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVappOrgNetwork:getVappOrgNetwork", {
        "id": args.id,
        "org": args.org,
        "orgNetworkName": args.orgNetworkName,
        "vappName": args.vappName,
        "vdc": args.vdc,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVappOrgNetwork.
 */
export interface GetVappOrgNetworkArgs {
    id?: string;
    org?: string;
    orgNetworkName: string;
    vappName: string;
    vdc?: string;
}

/**
 * A collection of values returned by getVappOrgNetwork.
 */
export interface GetVappOrgNetworkResult {
    readonly id: string;
    readonly isFenced: boolean;
    readonly org?: string;
    readonly orgNetworkName: string;
    readonly retainIpMacEnabled: boolean;
    readonly vappName: string;
    readonly vdc?: string;
}
export function getVappOrgNetworkOutput(args: GetVappOrgNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVappOrgNetworkResult> {
    return pulumi.output(args).apply((a: any) => getVappOrgNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getVappOrgNetwork.
 */
export interface GetVappOrgNetworkOutputArgs {
    id?: pulumi.Input<string>;
    org?: pulumi.Input<string>;
    orgNetworkName: pulumi.Input<string>;
    vappName: pulumi.Input<string>;
    vdc?: pulumi.Input<string>;
}
