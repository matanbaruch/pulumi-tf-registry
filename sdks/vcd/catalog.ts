// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Catalog extends pulumi.CustomResource {
    /**
     * Get an existing Catalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogState, opts?: pulumi.CustomResourceOptions): Catalog {
        return new Catalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/catalog:Catalog';

    /**
     * Returns true if the given object is an instance of Catalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Catalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Catalog.__pulumiType;
    }

    /**
     * True enables early catalog export to optimize synchronization
     */
    public readonly cacheEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Catalog version number.
     */
    public /*out*/ readonly catalogVersion!: pulumi.Output<number>;
    /**
     * Time stamp of when the catalog was created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,
     * regardless of their state.
     */
    public readonly deleteForce!: pulumi.Output<boolean | undefined>;
    /**
     * When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that
     * normally allows removal.
     */
    public readonly deleteRecursive!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Catalog HREF
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * True if this catalog belongs to the current organization.
     */
    public /*out*/ readonly isLocal!: pulumi.Output<boolean>;
    /**
     * True if this catalog is published.
     */
    public /*out*/ readonly isPublished!: pulumi.Output<boolean>;
    /**
     * True if this catalog is shared.
     */
    public /*out*/ readonly isShared!: pulumi.Output<boolean>;
    /**
     * List of Media items in this catalog
     */
    public /*out*/ readonly mediaItemLists!: pulumi.Output<string[]>;
    /**
     * Key and value pairs for catalog metadata.
     *
     * @deprecated Deprecated
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Metadata entries for the given Catalog
     */
    public readonly metadataEntries!: pulumi.Output<outputs.CatalogMetadataEntry[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of Medias this catalog contains.
     */
    public /*out*/ readonly numberOfMedia!: pulumi.Output<number>;
    /**
     * Number of vApps templates this catalog contains.
     */
    public /*out*/ readonly numberOfVappTemplates!: pulumi.Output<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Owner name from the catalog.
     */
    public /*out*/ readonly ownerName!: pulumi.Output<string>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the
     * portability of the package and you should use it only when necessary.
     */
    public readonly preserveIdentityInformation!: pulumi.Output<boolean | undefined>;
    /**
     * True allows to publish a catalog externally to make its vApp templates and media files available for subscription by
     * organizations outside the Cloud Director installation.
     */
    public readonly publishEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.
     */
    public /*out*/ readonly publishSubscriptionType!: pulumi.Output<string>;
    /**
     * URL to which other catalogs can subscribe
     */
    public /*out*/ readonly publishSubscriptionUrl!: pulumi.Output<string>;
    /**
     * Optional storage profile ID
     */
    public readonly storageProfileId!: pulumi.Output<string | undefined>;
    /**
     * List of catalog items in this catalog
     */
    public /*out*/ readonly vappTemplateLists!: pulumi.Output<string[]>;

    /**
     * Create a Catalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogArgs | CatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogState | undefined;
            resourceInputs["cacheEnabled"] = state ? state.cacheEnabled : undefined;
            resourceInputs["catalogVersion"] = state ? state.catalogVersion : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["deleteForce"] = state ? state.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = state ? state.deleteRecursive : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["isLocal"] = state ? state.isLocal : undefined;
            resourceInputs["isPublished"] = state ? state.isPublished : undefined;
            resourceInputs["isShared"] = state ? state.isShared : undefined;
            resourceInputs["mediaItemLists"] = state ? state.mediaItemLists : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfMedia"] = state ? state.numberOfMedia : undefined;
            resourceInputs["numberOfVappTemplates"] = state ? state.numberOfVappTemplates : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["preserveIdentityInformation"] = state ? state.preserveIdentityInformation : undefined;
            resourceInputs["publishEnabled"] = state ? state.publishEnabled : undefined;
            resourceInputs["publishSubscriptionType"] = state ? state.publishSubscriptionType : undefined;
            resourceInputs["publishSubscriptionUrl"] = state ? state.publishSubscriptionUrl : undefined;
            resourceInputs["storageProfileId"] = state ? state.storageProfileId : undefined;
            resourceInputs["vappTemplateLists"] = state ? state.vappTemplateLists : undefined;
        } else {
            const args = argsOrState as CatalogArgs | undefined;
            resourceInputs["cacheEnabled"] = args ? args.cacheEnabled : undefined;
            resourceInputs["deleteForce"] = args ? args.deleteForce : undefined;
            resourceInputs["deleteRecursive"] = args ? args.deleteRecursive : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["preserveIdentityInformation"] = args ? args.preserveIdentityInformation : undefined;
            resourceInputs["publishEnabled"] = args ? args.publishEnabled : undefined;
            resourceInputs["storageProfileId"] = args ? args.storageProfileId : undefined;
            resourceInputs["catalogVersion"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["isLocal"] = undefined /*out*/;
            resourceInputs["isPublished"] = undefined /*out*/;
            resourceInputs["isShared"] = undefined /*out*/;
            resourceInputs["mediaItemLists"] = undefined /*out*/;
            resourceInputs["numberOfMedia"] = undefined /*out*/;
            resourceInputs["numberOfVappTemplates"] = undefined /*out*/;
            resourceInputs["ownerName"] = undefined /*out*/;
            resourceInputs["publishSubscriptionType"] = undefined /*out*/;
            resourceInputs["publishSubscriptionUrl"] = undefined /*out*/;
            resourceInputs["vappTemplateLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Catalog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Catalog resources.
 */
export interface CatalogState {
    /**
     * True enables early catalog export to optimize synchronization
     */
    cacheEnabled?: pulumi.Input<boolean>;
    /**
     * Catalog version number.
     */
    catalogVersion?: pulumi.Input<number>;
    /**
     * Time stamp of when the catalog was created
     */
    created?: pulumi.Input<string>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,
     * regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Catalog HREF
     */
    href?: pulumi.Input<string>;
    /**
     * True if this catalog belongs to the current organization.
     */
    isLocal?: pulumi.Input<boolean>;
    /**
     * True if this catalog is published.
     */
    isPublished?: pulumi.Input<boolean>;
    /**
     * True if this catalog is shared.
     */
    isShared?: pulumi.Input<boolean>;
    /**
     * List of Media items in this catalog
     */
    mediaItemLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key and value pairs for catalog metadata.
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given Catalog
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.CatalogMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * Number of Medias this catalog contains.
     */
    numberOfMedia?: pulumi.Input<number>;
    /**
     * Number of vApps templates this catalog contains.
     */
    numberOfVappTemplates?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Owner name from the catalog.
     */
    ownerName?: pulumi.Input<string>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
     */
    password?: pulumi.Input<string>;
    /**
     * Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the
     * portability of the package and you should use it only when necessary.
     */
    preserveIdentityInformation?: pulumi.Input<boolean>;
    /**
     * True allows to publish a catalog externally to make its vApp templates and media files available for subscription by
     * organizations outside the Cloud Director installation.
     */
    publishEnabled?: pulumi.Input<boolean>;
    /**
     * PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.
     */
    publishSubscriptionType?: pulumi.Input<string>;
    /**
     * URL to which other catalogs can subscribe
     */
    publishSubscriptionUrl?: pulumi.Input<string>;
    /**
     * Optional storage profile ID
     */
    storageProfileId?: pulumi.Input<string>;
    /**
     * List of catalog items in this catalog
     */
    vappTemplateLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Catalog resource.
 */
export interface CatalogArgs {
    /**
     * True enables early catalog export to optimize synchronization
     */
    cacheEnabled?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains,
     * regardless of their state.
     */
    deleteForce?: pulumi.Input<boolean>;
    /**
     * When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that
     * normally allows removal.
     */
    deleteRecursive?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Key and value pairs for catalog metadata.
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given Catalog
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.CatalogMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
     */
    password?: pulumi.Input<string>;
    /**
     * Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the
     * portability of the package and you should use it only when necessary.
     */
    preserveIdentityInformation?: pulumi.Input<boolean>;
    /**
     * True allows to publish a catalog externally to make its vApp templates and media files available for subscription by
     * organizations outside the Cloud Director installation.
     */
    publishEnabled?: pulumi.Input<boolean>;
    /**
     * Optional storage profile ID
     */
    storageProfileId?: pulumi.Input<string>;
}
