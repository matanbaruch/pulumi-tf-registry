// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNsxtEdgegatewayDns(args: GetNsxtEdgegatewayDnsArgs, opts?: pulumi.InvokeOptions): Promise<GetNsxtEdgegatewayDnsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getNsxtEdgegatewayDns:getNsxtEdgegatewayDns", {
        "edgeGatewayId": args.edgeGatewayId,
        "id": args.id,
        "org": args.org,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNsxtEdgegatewayDns.
 */
export interface GetNsxtEdgegatewayDnsArgs {
    edgeGatewayId: string;
    id?: string;
    org?: string;
}

/**
 * A collection of values returned by getNsxtEdgegatewayDns.
 */
export interface GetNsxtEdgegatewayDnsResult {
    readonly conditionalForwarderZones: outputs.GetNsxtEdgegatewayDnsConditionalForwarderZone[];
    readonly defaultForwarderZones: outputs.GetNsxtEdgegatewayDnsDefaultForwarderZone[];
    readonly edgeGatewayId: string;
    readonly enabled: boolean;
    readonly id: string;
    readonly listenerIp: string;
    readonly org?: string;
    readonly snatRuleEnabled: boolean;
    readonly snatRuleIpAddress: string;
}
export function getNsxtEdgegatewayDnsOutput(args: GetNsxtEdgegatewayDnsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNsxtEdgegatewayDnsResult> {
    return pulumi.output(args).apply((a: any) => getNsxtEdgegatewayDns(a, opts))
}

/**
 * A collection of arguments for invoking getNsxtEdgegatewayDns.
 */
export interface GetNsxtEdgegatewayDnsOutputArgs {
    edgeGatewayId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    org?: pulumi.Input<string>;
}
