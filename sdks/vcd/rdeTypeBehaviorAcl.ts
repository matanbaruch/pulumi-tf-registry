// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RdeTypeBehaviorAcl extends pulumi.CustomResource {
    /**
     * Get an existing RdeTypeBehaviorAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdeTypeBehaviorAclState, opts?: pulumi.CustomResourceOptions): RdeTypeBehaviorAcl {
        return new RdeTypeBehaviorAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/rdeTypeBehaviorAcl:RdeTypeBehaviorAcl';

    /**
     * Returns true if the given object is an instance of RdeTypeBehaviorAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdeTypeBehaviorAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdeTypeBehaviorAcl.__pulumiType;
    }

    /**
     * Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
     */
    public readonly accessLevelIds!: pulumi.Output<string[]>;
    /**
     * The ID of either a RDE Interface Behavior or RDE Type Behavior
     */
    public readonly behaviorId!: pulumi.Output<string>;
    /**
     * The ID of the RDE Type
     */
    public readonly rdeTypeId!: pulumi.Output<string>;

    /**
     * Create a RdeTypeBehaviorAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdeTypeBehaviorAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdeTypeBehaviorAclArgs | RdeTypeBehaviorAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdeTypeBehaviorAclState | undefined;
            resourceInputs["accessLevelIds"] = state ? state.accessLevelIds : undefined;
            resourceInputs["behaviorId"] = state ? state.behaviorId : undefined;
            resourceInputs["rdeTypeId"] = state ? state.rdeTypeId : undefined;
        } else {
            const args = argsOrState as RdeTypeBehaviorAclArgs | undefined;
            if ((!args || args.accessLevelIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevelIds'");
            }
            if ((!args || args.behaviorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'behaviorId'");
            }
            if ((!args || args.rdeTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdeTypeId'");
            }
            resourceInputs["accessLevelIds"] = args ? args.accessLevelIds : undefined;
            resourceInputs["behaviorId"] = args ? args.behaviorId : undefined;
            resourceInputs["rdeTypeId"] = args ? args.rdeTypeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdeTypeBehaviorAcl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdeTypeBehaviorAcl resources.
 */
export interface RdeTypeBehaviorAclState {
    /**
     * Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
     */
    accessLevelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of either a RDE Interface Behavior or RDE Type Behavior
     */
    behaviorId?: pulumi.Input<string>;
    /**
     * The ID of the RDE Type
     */
    rdeTypeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdeTypeBehaviorAcl resource.
 */
export interface RdeTypeBehaviorAclArgs {
    /**
     * Set of Access Level IDs to associate to the Behavior defined in `behavior_id` argument
     */
    accessLevelIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of either a RDE Interface Behavior or RDE Type Behavior
     */
    behaviorId: pulumi.Input<string>;
    /**
     * The ID of the RDE Type
     */
    rdeTypeId: pulumi.Input<string>;
}
