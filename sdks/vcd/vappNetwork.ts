// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VappNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VappNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VappNetworkState, opts?: pulumi.CustomResourceOptions): VappNetwork {
        return new VappNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vappNetwork:VappNetwork';

    /**
     * Returns true if the given object is an instance of VappNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VappNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VappNetwork.__pulumiType;
    }

    /**
     * Optional description for the network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A range of IPs to issue to virtual machines that don't have a static IP
     */
    public readonly dhcpPools!: pulumi.Output<outputs.VappNetworkDhcpPool[] | undefined>;
    /**
     * Primary DNS server
     */
    public readonly dns1!: pulumi.Output<string | undefined>;
    /**
     * Secondary DNS server
     */
    public readonly dns2!: pulumi.Output<string | undefined>;
    /**
     * DNS suffix
     */
    public readonly dnsSuffix!: pulumi.Output<string | undefined>;
    /**
     * Gateway of the network
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * True if Network allows guest VLAN tagging
     */
    public readonly guestVlanAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * vApp network name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Netmask address for a subnet.
     *
     * @deprecated Deprecated
     */
    public readonly netmask!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * org network name to which vapp network is connected
     */
    public readonly orgNetworkName!: pulumi.Output<string | undefined>;
    /**
     * Prefix length for a subnet
     */
    public readonly prefixLength!: pulumi.Output<string>;
    /**
     * Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
     */
    public readonly rebootVappOnRemoval!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
     */
    public readonly retainIpMacEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A range of IPs permitted to be used as static IPs for virtual machines
     */
    public readonly staticIpPools!: pulumi.Output<outputs.VappNetworkStaticIpPool[] | undefined>;
    /**
     * vApp to use
     */
    public readonly vappName!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a VappNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VappNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VappNetworkArgs | VappNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VappNetworkState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpPools"] = state ? state.dhcpPools : undefined;
            resourceInputs["dns1"] = state ? state.dns1 : undefined;
            resourceInputs["dns2"] = state ? state.dns2 : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["guestVlanAllowed"] = state ? state.guestVlanAllowed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["orgNetworkName"] = state ? state.orgNetworkName : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["rebootVappOnRemoval"] = state ? state.rebootVappOnRemoval : undefined;
            resourceInputs["retainIpMacEnabled"] = state ? state.retainIpMacEnabled : undefined;
            resourceInputs["staticIpPools"] = state ? state.staticIpPools : undefined;
            resourceInputs["vappName"] = state ? state.vappName : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as VappNetworkArgs | undefined;
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.vappName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpPools"] = args ? args.dhcpPools : undefined;
            resourceInputs["dns1"] = args ? args.dns1 : undefined;
            resourceInputs["dns2"] = args ? args.dns2 : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["guestVlanAllowed"] = args ? args.guestVlanAllowed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["orgNetworkName"] = args ? args.orgNetworkName : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["rebootVappOnRemoval"] = args ? args.rebootVappOnRemoval : undefined;
            resourceInputs["retainIpMacEnabled"] = args ? args.retainIpMacEnabled : undefined;
            resourceInputs["staticIpPools"] = args ? args.staticIpPools : undefined;
            resourceInputs["vappName"] = args ? args.vappName : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VappNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VappNetwork resources.
 */
export interface VappNetworkState {
    /**
     * Optional description for the network
     */
    description?: pulumi.Input<string>;
    /**
     * A range of IPs to issue to virtual machines that don't have a static IP
     */
    dhcpPools?: pulumi.Input<pulumi.Input<inputs.VappNetworkDhcpPool>[]>;
    /**
     * Primary DNS server
     */
    dns1?: pulumi.Input<string>;
    /**
     * Secondary DNS server
     */
    dns2?: pulumi.Input<string>;
    /**
     * DNS suffix
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Gateway of the network
     */
    gateway?: pulumi.Input<string>;
    /**
     * True if Network allows guest VLAN tagging
     */
    guestVlanAllowed?: pulumi.Input<boolean>;
    /**
     * vApp network name
     */
    name?: pulumi.Input<string>;
    /**
     * Netmask address for a subnet.
     *
     * @deprecated Deprecated
     */
    netmask?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * org network name to which vapp network is connected
     */
    orgNetworkName?: pulumi.Input<string>;
    /**
     * Prefix length for a subnet
     */
    prefixLength?: pulumi.Input<string>;
    /**
     * Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
     */
    rebootVappOnRemoval?: pulumi.Input<boolean>;
    /**
     * Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
     */
    retainIpMacEnabled?: pulumi.Input<boolean>;
    /**
     * A range of IPs permitted to be used as static IPs for virtual machines
     */
    staticIpPools?: pulumi.Input<pulumi.Input<inputs.VappNetworkStaticIpPool>[]>;
    /**
     * vApp to use
     */
    vappName?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VappNetwork resource.
 */
export interface VappNetworkArgs {
    /**
     * Optional description for the network
     */
    description?: pulumi.Input<string>;
    /**
     * A range of IPs to issue to virtual machines that don't have a static IP
     */
    dhcpPools?: pulumi.Input<pulumi.Input<inputs.VappNetworkDhcpPool>[]>;
    /**
     * Primary DNS server
     */
    dns1?: pulumi.Input<string>;
    /**
     * Secondary DNS server
     */
    dns2?: pulumi.Input<string>;
    /**
     * DNS suffix
     */
    dnsSuffix?: pulumi.Input<string>;
    /**
     * Gateway of the network
     */
    gateway: pulumi.Input<string>;
    /**
     * True if Network allows guest VLAN tagging
     */
    guestVlanAllowed?: pulumi.Input<boolean>;
    /**
     * vApp network name
     */
    name?: pulumi.Input<string>;
    /**
     * Netmask address for a subnet.
     *
     * @deprecated Deprecated
     */
    netmask?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * org network name to which vapp network is connected
     */
    orgNetworkName?: pulumi.Input<string>;
    /**
     * Prefix length for a subnet
     */
    prefixLength?: pulumi.Input<string>;
    /**
     * Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
     */
    rebootVappOnRemoval?: pulumi.Input<boolean>;
    /**
     * Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
     */
    retainIpMacEnabled?: pulumi.Input<boolean>;
    /**
     * A range of IPs permitted to be used as static IPs for virtual machines
     */
    staticIpPools?: pulumi.Input<pulumi.Input<inputs.VappNetworkStaticIpPool>[]>;
    /**
     * vApp to use
     */
    vappName: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
