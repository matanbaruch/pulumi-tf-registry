// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SolutionAddOnInstance extends pulumi.CustomResource {
    /**
     * Get an existing SolutionAddOnInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SolutionAddOnInstanceState, opts?: pulumi.CustomResourceOptions): SolutionAddOnInstance {
        return new SolutionAddOnInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/solutionAddOnInstance:SolutionAddOnInstance';

    /**
     * Returns true if the given object is an instance of SolutionAddOnInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SolutionAddOnInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SolutionAddOnInstance.__pulumiType;
    }

    /**
     * Defines if EULA is accepted. `false` will return an error and print EULA
     */
    public readonly acceptEula!: pulumi.Output<boolean>;
    /**
     * Parent Solution Add-On ID
     */
    public readonly addOnId!: pulumi.Output<string>;
    /**
     * Key value map for deletion of Solution Add-On Instance
     */
    public readonly deleteInput!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Key value map of Solution Add-On Instance
     */
    public readonly input!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Solution Add-On Instance Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Parent RDE state
     */
    public /*out*/ readonly rdeState!: pulumi.Output<string>;
    /**
     * Defines if all or only required inputs should be validated
     */
    public readonly validateOnlyRequiredInputs!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SolutionAddOnInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SolutionAddOnInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SolutionAddOnInstanceArgs | SolutionAddOnInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SolutionAddOnInstanceState | undefined;
            resourceInputs["acceptEula"] = state ? state.acceptEula : undefined;
            resourceInputs["addOnId"] = state ? state.addOnId : undefined;
            resourceInputs["deleteInput"] = state ? state.deleteInput : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rdeState"] = state ? state.rdeState : undefined;
            resourceInputs["validateOnlyRequiredInputs"] = state ? state.validateOnlyRequiredInputs : undefined;
        } else {
            const args = argsOrState as SolutionAddOnInstanceArgs | undefined;
            if ((!args || args.acceptEula === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptEula'");
            }
            if ((!args || args.addOnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addOnId'");
            }
            resourceInputs["acceptEula"] = args ? args.acceptEula : undefined;
            resourceInputs["addOnId"] = args ? args.addOnId : undefined;
            resourceInputs["deleteInput"] = args ? args.deleteInput : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["validateOnlyRequiredInputs"] = args ? args.validateOnlyRequiredInputs : undefined;
            resourceInputs["rdeState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SolutionAddOnInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SolutionAddOnInstance resources.
 */
export interface SolutionAddOnInstanceState {
    /**
     * Defines if EULA is accepted. `false` will return an error and print EULA
     */
    acceptEula?: pulumi.Input<boolean>;
    /**
     * Parent Solution Add-On ID
     */
    addOnId?: pulumi.Input<string>;
    /**
     * Key value map for deletion of Solution Add-On Instance
     */
    deleteInput?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Key value map of Solution Add-On Instance
     */
    input?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Solution Add-On Instance Name
     */
    name?: pulumi.Input<string>;
    /**
     * Parent RDE state
     */
    rdeState?: pulumi.Input<string>;
    /**
     * Defines if all or only required inputs should be validated
     */
    validateOnlyRequiredInputs?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SolutionAddOnInstance resource.
 */
export interface SolutionAddOnInstanceArgs {
    /**
     * Defines if EULA is accepted. `false` will return an error and print EULA
     */
    acceptEula: pulumi.Input<boolean>;
    /**
     * Parent Solution Add-On ID
     */
    addOnId: pulumi.Input<string>;
    /**
     * Key value map for deletion of Solution Add-On Instance
     */
    deleteInput?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Key value map of Solution Add-On Instance
     */
    input?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Solution Add-On Instance Name
     */
    name?: pulumi.Input<string>;
    /**
     * Defines if all or only required inputs should be validated
     */
    validateOnlyRequiredInputs?: pulumi.Input<boolean>;
}
