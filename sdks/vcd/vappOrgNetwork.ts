// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VappOrgNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VappOrgNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VappOrgNetworkState, opts?: pulumi.CustomResourceOptions): VappOrgNetwork {
        return new VappOrgNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vappOrgNetwork:VappOrgNetwork';

    /**
     * Returns true if the given object is an instance of VappOrgNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VappOrgNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VappOrgNetwork.__pulumiType;
    }

    /**
     * Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are
     * accessed in this vApp
     */
    public readonly isFenced!: pulumi.Output<boolean | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Organization network name to which vApp network is connected to
     */
    public readonly orgNetworkName!: pulumi.Output<string>;
    /**
     * Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
     */
    public readonly rebootVappOnRemoval!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
     */
    public readonly retainIpMacEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * vApp network name
     */
    public readonly vappName!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a VappOrgNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VappOrgNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VappOrgNetworkArgs | VappOrgNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VappOrgNetworkState | undefined;
            resourceInputs["isFenced"] = state ? state.isFenced : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["orgNetworkName"] = state ? state.orgNetworkName : undefined;
            resourceInputs["rebootVappOnRemoval"] = state ? state.rebootVappOnRemoval : undefined;
            resourceInputs["retainIpMacEnabled"] = state ? state.retainIpMacEnabled : undefined;
            resourceInputs["vappName"] = state ? state.vappName : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as VappOrgNetworkArgs | undefined;
            if ((!args || args.orgNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgNetworkName'");
            }
            if ((!args || args.vappName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappName'");
            }
            resourceInputs["isFenced"] = args ? args.isFenced : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["orgNetworkName"] = args ? args.orgNetworkName : undefined;
            resourceInputs["rebootVappOnRemoval"] = args ? args.rebootVappOnRemoval : undefined;
            resourceInputs["retainIpMacEnabled"] = args ? args.retainIpMacEnabled : undefined;
            resourceInputs["vappName"] = args ? args.vappName : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VappOrgNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VappOrgNetwork resources.
 */
export interface VappOrgNetworkState {
    /**
     * Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are
     * accessed in this vApp
     */
    isFenced?: pulumi.Input<boolean>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Organization network name to which vApp network is connected to
     */
    orgNetworkName?: pulumi.Input<string>;
    /**
     * Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
     */
    rebootVappOnRemoval?: pulumi.Input<boolean>;
    /**
     * Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
     */
    retainIpMacEnabled?: pulumi.Input<boolean>;
    /**
     * vApp network name
     */
    vappName?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VappOrgNetwork resource.
 */
export interface VappOrgNetworkArgs {
    /**
     * Fencing allows identical virtual machines in different vApp networks connect to organization VDC networks that are
     * accessed in this vApp
     */
    isFenced?: pulumi.Input<boolean>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Organization network name to which vApp network is connected to
     */
    orgNetworkName: pulumi.Input<string>;
    /**
     * Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
     */
    rebootVappOnRemoval?: pulumi.Input<boolean>;
    /**
     * Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
     */
    retainIpMacEnabled?: pulumi.Input<boolean>;
    /**
     * vApp network name
     */
    vappName: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
