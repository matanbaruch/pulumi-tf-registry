// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OrgUser extends pulumi.CustomResource {
    /**
     * Get an existing OrgUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgUserState, opts?: pulumi.CustomResourceOptions): OrgUser {
        return new OrgUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/orgUser:OrgUser';

    /**
     * Returns true if the given object is an instance of OrgUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgUser.__pulumiType;
    }

    /**
     * Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
     */
    public readonly deployedVmQuota!: pulumi.Output<number>;
    /**
     * The user's description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The user's email address
     */
    public readonly emailAddress!: pulumi.Output<string>;
    /**
     * True if the user is enabled and can log in.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The user's full name
     */
    public readonly fullName!: pulumi.Output<string>;
    /**
     * Read only. Set of group names that this user belongs to
     */
    public /*out*/ readonly groupNames!: pulumi.Output<string[]>;
    /**
     * The user's telephone
     */
    public readonly instantMessaging!: pulumi.Output<string>;
    /**
     * True if this user is imported from an external resource, like an LDAP.
     */
    public readonly isExternal!: pulumi.Output<boolean | undefined>;
    /**
     * True if this user has a group role.
     */
    public readonly isGroupRole!: pulumi.Output<boolean | undefined>;
    /**
     * If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
     * system can lock the user). To unlock the user re-set this flag to false.
     */
    public readonly isLocked!: pulumi.Output<boolean | undefined>;
    /**
     * User's name. Only lowercase letters allowed. Cannot be changed after creation
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
     * creation unless is_external is true.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
     * is_external is true.
     */
    public readonly passwordFile!: pulumi.Output<string | undefined>;
    /**
     * Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
     * 'INTEGRATED' is used.
     */
    public readonly providerType!: pulumi.Output<string | undefined>;
    /**
     * Role within the organization
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
     */
    public readonly storedVmQuota!: pulumi.Output<number>;
    /**
     * Take ownership of user's objects on deletion.
     */
    public readonly takeOwnership!: pulumi.Output<boolean | undefined>;
    /**
     * The user's telephone
     */
    public readonly telephone!: pulumi.Output<string>;

    /**
     * Create a OrgUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgUserArgs | OrgUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgUserState | undefined;
            resourceInputs["deployedVmQuota"] = state ? state.deployedVmQuota : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emailAddress"] = state ? state.emailAddress : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["groupNames"] = state ? state.groupNames : undefined;
            resourceInputs["instantMessaging"] = state ? state.instantMessaging : undefined;
            resourceInputs["isExternal"] = state ? state.isExternal : undefined;
            resourceInputs["isGroupRole"] = state ? state.isGroupRole : undefined;
            resourceInputs["isLocked"] = state ? state.isLocked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordFile"] = state ? state.passwordFile : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["storedVmQuota"] = state ? state.storedVmQuota : undefined;
            resourceInputs["takeOwnership"] = state ? state.takeOwnership : undefined;
            resourceInputs["telephone"] = state ? state.telephone : undefined;
        } else {
            const args = argsOrState as OrgUserArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["deployedVmQuota"] = args ? args.deployedVmQuota : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emailAddress"] = args ? args.emailAddress : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["instantMessaging"] = args ? args.instantMessaging : undefined;
            resourceInputs["isExternal"] = args ? args.isExternal : undefined;
            resourceInputs["isGroupRole"] = args ? args.isGroupRole : undefined;
            resourceInputs["isLocked"] = args ? args.isLocked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordFile"] = args ? args.passwordFile : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["storedVmQuota"] = args ? args.storedVmQuota : undefined;
            resourceInputs["takeOwnership"] = args ? args.takeOwnership : undefined;
            resourceInputs["telephone"] = args ? args.telephone : undefined;
            resourceInputs["groupNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OrgUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrgUser resources.
 */
export interface OrgUserState {
    /**
     * Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
     */
    deployedVmQuota?: pulumi.Input<number>;
    /**
     * The user's description
     */
    description?: pulumi.Input<string>;
    /**
     * The user's email address
     */
    emailAddress?: pulumi.Input<string>;
    /**
     * True if the user is enabled and can log in.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The user's full name
     */
    fullName?: pulumi.Input<string>;
    /**
     * Read only. Set of group names that this user belongs to
     */
    groupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user's telephone
     */
    instantMessaging?: pulumi.Input<string>;
    /**
     * True if this user is imported from an external resource, like an LDAP.
     */
    isExternal?: pulumi.Input<boolean>;
    /**
     * True if this user has a group role.
     */
    isGroupRole?: pulumi.Input<boolean>;
    /**
     * If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
     * system can lock the user). To unlock the user re-set this flag to false.
     */
    isLocked?: pulumi.Input<boolean>;
    /**
     * User's name. Only lowercase letters allowed. Cannot be changed after creation
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
     * creation unless is_external is true.
     */
    password?: pulumi.Input<string>;
    /**
     * Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
     * is_external is true.
     */
    passwordFile?: pulumi.Input<string>;
    /**
     * Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
     * 'INTEGRATED' is used.
     */
    providerType?: pulumi.Input<string>;
    /**
     * Role within the organization
     */
    role?: pulumi.Input<string>;
    /**
     * Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
     */
    storedVmQuota?: pulumi.Input<number>;
    /**
     * Take ownership of user's objects on deletion.
     */
    takeOwnership?: pulumi.Input<boolean>;
    /**
     * The user's telephone
     */
    telephone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgUser resource.
 */
export interface OrgUserArgs {
    /**
     * Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
     */
    deployedVmQuota?: pulumi.Input<number>;
    /**
     * The user's description
     */
    description?: pulumi.Input<string>;
    /**
     * The user's email address
     */
    emailAddress?: pulumi.Input<string>;
    /**
     * True if the user is enabled and can log in.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The user's full name
     */
    fullName?: pulumi.Input<string>;
    /**
     * The user's telephone
     */
    instantMessaging?: pulumi.Input<string>;
    /**
     * True if this user is imported from an external resource, like an LDAP.
     */
    isExternal?: pulumi.Input<boolean>;
    /**
     * True if this user has a group role.
     */
    isGroupRole?: pulumi.Input<boolean>;
    /**
     * If the user account has been locked due to too many invalid login attempts, the value will change to true (only the
     * system can lock the user). To unlock the user re-set this flag to false.
     */
    isLocked?: pulumi.Input<boolean>;
    /**
     * User's name. Only lowercase letters allowed. Cannot be changed after creation
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The user's password. This value is never returned on read. Either "password" or "password_file" must be included on
     * creation unless is_external is true.
     */
    password?: pulumi.Input<string>;
    /**
     * Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless
     * is_external is true.
     */
    passwordFile?: pulumi.Input<string>;
    /**
     * Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value
     * 'INTEGRATED' is used.
     */
    providerType?: pulumi.Input<string>;
    /**
     * Role within the organization
     */
    role: pulumi.Input<string>;
    /**
     * Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
     */
    storedVmQuota?: pulumi.Input<number>;
    /**
     * Take ownership of user's objects on deletion.
     */
    takeOwnership?: pulumi.Input<boolean>;
    /**
     * The user's telephone
     */
    telephone?: pulumi.Input<string>;
}
