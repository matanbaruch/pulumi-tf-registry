// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VappAccessControl extends pulumi.CustomResource {
    /**
     * Get an existing VappAccessControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VappAccessControlState, opts?: pulumi.CustomResourceOptions): VappAccessControl {
        return new VappAccessControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vappAccessControl:VappAccessControl';

    /**
     * Returns true if the given object is an instance of VappAccessControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VappAccessControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VappAccessControl.__pulumiType;
    }

    /**
     * Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when
     * shared_with_everyone is set
     */
    public readonly everyoneAccessLevel!: pulumi.Output<string | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Whether the vApp is shared with everyone
     */
    public readonly sharedWithEveryone!: pulumi.Output<boolean>;
    public readonly sharedWiths!: pulumi.Output<outputs.VappAccessControlSharedWith[] | undefined>;
    /**
     * vApp identifier
     */
    public readonly vappId!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a VappAccessControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VappAccessControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VappAccessControlArgs | VappAccessControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VappAccessControlState | undefined;
            resourceInputs["everyoneAccessLevel"] = state ? state.everyoneAccessLevel : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["sharedWithEveryone"] = state ? state.sharedWithEveryone : undefined;
            resourceInputs["sharedWiths"] = state ? state.sharedWiths : undefined;
            resourceInputs["vappId"] = state ? state.vappId : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as VappAccessControlArgs | undefined;
            if ((!args || args.sharedWithEveryone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedWithEveryone'");
            }
            if ((!args || args.vappId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappId'");
            }
            resourceInputs["everyoneAccessLevel"] = args ? args.everyoneAccessLevel : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["sharedWithEveryone"] = args ? args.sharedWithEveryone : undefined;
            resourceInputs["sharedWiths"] = args ? args.sharedWiths : undefined;
            resourceInputs["vappId"] = args ? args.vappId : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VappAccessControl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VappAccessControl resources.
 */
export interface VappAccessControlState {
    /**
     * Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when
     * shared_with_everyone is set
     */
    everyoneAccessLevel?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Whether the vApp is shared with everyone
     */
    sharedWithEveryone?: pulumi.Input<boolean>;
    sharedWiths?: pulumi.Input<pulumi.Input<inputs.VappAccessControlSharedWith>[]>;
    /**
     * vApp identifier
     */
    vappId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VappAccessControl resource.
 */
export interface VappAccessControlArgs {
    /**
     * Access level when the vApp is shared with everyone (one of ReadOnly, Change, FullControl). Required when
     * shared_with_everyone is set
     */
    everyoneAccessLevel?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Whether the vApp is shared with everyone
     */
    sharedWithEveryone: pulumi.Input<boolean>;
    sharedWiths?: pulumi.Input<pulumi.Input<inputs.VappAccessControlSharedWith>[]>;
    /**
     * vApp identifier
     */
    vappId: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
