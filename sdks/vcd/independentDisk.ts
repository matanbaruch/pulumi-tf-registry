// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IndependentDisk extends pulumi.CustomResource {
    /**
     * Get an existing IndependentDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndependentDiskState, opts?: pulumi.CustomResourceOptions): IndependentDisk {
        return new IndependentDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/independentDisk:IndependentDisk';

    /**
     * Returns true if the given object is an instance of IndependentDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IndependentDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IndependentDisk.__pulumiType;
    }

    /**
     * Set of VM IDs which are using the disk
     */
    public /*out*/ readonly attachedVmIds!: pulumi.Output<string[]>;
    public readonly busSubType!: pulumi.Output<string>;
    public readonly busType!: pulumi.Output<string>;
    /**
     * Datastore name
     */
    public /*out*/ readonly datastoreName!: pulumi.Output<string>;
    /**
     * independent disk description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * True if disk is encrypted
     */
    public /*out*/ readonly encrypted!: pulumi.Output<boolean>;
    /**
     * IOPS request for the created disk
     */
    public /*out*/ readonly iops!: pulumi.Output<number>;
    /**
     * True if the disk is already attached
     */
    public /*out*/ readonly isAttached!: pulumi.Output<boolean>;
    /**
     * Key value map of metadata to assign to this disk. Key and value can be any string.
     *
     * @deprecated Deprecated
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Metadata entries for the given Disk
     */
    public readonly metadataEntries!: pulumi.Output<outputs.IndependentDiskMetadataEntry[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The owner name of the disk
     */
    public /*out*/ readonly ownerName!: pulumi.Output<string>;
    /**
     * This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`
     */
    public readonly sharingType!: pulumi.Output<string>;
    /**
     * size in MB
     */
    public readonly sizeInMb!: pulumi.Output<number>;
    public readonly storageProfile!: pulumi.Output<string>;
    /**
     * The UUID of this named disk's device backing
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a IndependentDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndependentDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndependentDiskArgs | IndependentDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndependentDiskState | undefined;
            resourceInputs["attachedVmIds"] = state ? state.attachedVmIds : undefined;
            resourceInputs["busSubType"] = state ? state.busSubType : undefined;
            resourceInputs["busType"] = state ? state.busType : undefined;
            resourceInputs["datastoreName"] = state ? state.datastoreName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["isAttached"] = state ? state.isAttached : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["sharingType"] = state ? state.sharingType : undefined;
            resourceInputs["sizeInMb"] = state ? state.sizeInMb : undefined;
            resourceInputs["storageProfile"] = state ? state.storageProfile : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as IndependentDiskArgs | undefined;
            if ((!args || args.sizeInMb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeInMb'");
            }
            resourceInputs["busSubType"] = args ? args.busSubType : undefined;
            resourceInputs["busType"] = args ? args.busType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["sharingType"] = args ? args.sharingType : undefined;
            resourceInputs["sizeInMb"] = args ? args.sizeInMb : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["attachedVmIds"] = undefined /*out*/;
            resourceInputs["datastoreName"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["iops"] = undefined /*out*/;
            resourceInputs["isAttached"] = undefined /*out*/;
            resourceInputs["ownerName"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IndependentDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IndependentDisk resources.
 */
export interface IndependentDiskState {
    /**
     * Set of VM IDs which are using the disk
     */
    attachedVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    busSubType?: pulumi.Input<string>;
    busType?: pulumi.Input<string>;
    /**
     * Datastore name
     */
    datastoreName?: pulumi.Input<string>;
    /**
     * independent disk description
     */
    description?: pulumi.Input<string>;
    /**
     * True if disk is encrypted
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * IOPS request for the created disk
     */
    iops?: pulumi.Input<number>;
    /**
     * True if the disk is already attached
     */
    isAttached?: pulumi.Input<boolean>;
    /**
     * Key value map of metadata to assign to this disk. Key and value can be any string.
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given Disk
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.IndependentDiskMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The owner name of the disk
     */
    ownerName?: pulumi.Input<string>;
    /**
     * This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`
     */
    sharingType?: pulumi.Input<string>;
    /**
     * size in MB
     */
    sizeInMb?: pulumi.Input<number>;
    storageProfile?: pulumi.Input<string>;
    /**
     * The UUID of this named disk's device backing
     */
    uuid?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IndependentDisk resource.
 */
export interface IndependentDiskArgs {
    busSubType?: pulumi.Input<string>;
    busType?: pulumi.Input<string>;
    /**
     * independent disk description
     */
    description?: pulumi.Input<string>;
    /**
     * Key value map of metadata to assign to this disk. Key and value can be any string.
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given Disk
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.IndependentDiskMetadataEntry>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * This is the sharing type. This attribute can only have values defined one of: `DiskSharing`,`ControllerSharing`, `None`
     */
    sharingType?: pulumi.Input<string>;
    /**
     * size in MB
     */
    sizeInMb: pulumi.Input<number>;
    storageProfile?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
