// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RdeInterface extends pulumi.CustomResource {
    /**
     * Get an existing RdeInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdeInterfaceState, opts?: pulumi.CustomResourceOptions): RdeInterface {
        return new RdeInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/rdeInterface:RdeInterface';

    /**
     * Returns true if the given object is an instance of RdeInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdeInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdeInterface.__pulumiType;
    }

    /**
     * The name of the Runtime Defined Entity Interface
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A unique namespace associated with the Runtime Defined Entity Interface. Combination of `vendor`, `nss` and `version`
     * must be unique
     */
    public readonly nss!: pulumi.Output<string>;
    /**
     * True if the Runtime Defined Entity Interface cannot be modified
     */
    public /*out*/ readonly readonly!: pulumi.Output<boolean>;
    /**
     * The vendor name. Combination of `vendor`, `nss` and `version` must be unique
     */
    public readonly vendor!: pulumi.Output<string>;
    /**
     * The Runtime Defined Entity Interface's version. The version must follow semantic versioning rules. Combination of
     * `vendor`, `nss` and `version` must be unique
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a RdeInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdeInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdeInterfaceArgs | RdeInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdeInterfaceState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nss"] = state ? state.nss : undefined;
            resourceInputs["readonly"] = state ? state.readonly : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as RdeInterfaceArgs | undefined;
            if ((!args || args.nss === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nss'");
            }
            if ((!args || args.vendor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vendor'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nss"] = args ? args.nss : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["readonly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdeInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdeInterface resources.
 */
export interface RdeInterfaceState {
    /**
     * The name of the Runtime Defined Entity Interface
     */
    name?: pulumi.Input<string>;
    /**
     * A unique namespace associated with the Runtime Defined Entity Interface. Combination of `vendor`, `nss` and `version`
     * must be unique
     */
    nss?: pulumi.Input<string>;
    /**
     * True if the Runtime Defined Entity Interface cannot be modified
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * The vendor name. Combination of `vendor`, `nss` and `version` must be unique
     */
    vendor?: pulumi.Input<string>;
    /**
     * The Runtime Defined Entity Interface's version. The version must follow semantic versioning rules. Combination of
     * `vendor`, `nss` and `version` must be unique
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdeInterface resource.
 */
export interface RdeInterfaceArgs {
    /**
     * The name of the Runtime Defined Entity Interface
     */
    name?: pulumi.Input<string>;
    /**
     * A unique namespace associated with the Runtime Defined Entity Interface. Combination of `vendor`, `nss` and `version`
     * must be unique
     */
    nss: pulumi.Input<string>;
    /**
     * The vendor name. Combination of `vendor`, `nss` and `version` must be unique
     */
    vendor: pulumi.Input<string>;
    /**
     * The Runtime Defined Entity Interface's version. The version must follow semantic versioning rules. Combination of
     * `vendor`, `nss` and `version` must be unique
     */
    version: pulumi.Input<string>;
}
