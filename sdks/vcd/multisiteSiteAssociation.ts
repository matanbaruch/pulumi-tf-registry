// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MultisiteSiteAssociation extends pulumi.CustomResource {
    /**
     * Get an existing MultisiteSiteAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MultisiteSiteAssociationState, opts?: pulumi.CustomResourceOptions): MultisiteSiteAssociation {
        return new MultisiteSiteAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/multisiteSiteAssociation:MultisiteSiteAssociation';

    /**
     * Returns true if the given object is an instance of MultisiteSiteAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MultisiteSiteAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultisiteSiteAssociation.__pulumiType;
    }

    /**
     * URL of the associated site
     */
    public /*out*/ readonly associatedSiteHref!: pulumi.Output<string>;
    /**
     * ID of the site to which the associated site belongs
     */
    public /*out*/ readonly associatedSiteId!: pulumi.Output<string>;
    /**
     * Name of the site to which the associated site belongs
     */
    public /*out*/ readonly associatedSiteName!: pulumi.Output<string>;
    /**
     * Data needed to associate this site to another
     */
    public readonly associationData!: pulumi.Output<string | undefined>;
    /**
     * Name of the file to be filled with association data for this site
     */
    public readonly associationDataFile!: pulumi.Output<string | undefined>;
    /**
     * How many minutes to keep checking for connection (0=no check)
     */
    public readonly connectionTimeoutMins!: pulumi.Output<number | undefined>;
    /**
     * Status of the association
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a MultisiteSiteAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MultisiteSiteAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MultisiteSiteAssociationArgs | MultisiteSiteAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MultisiteSiteAssociationState | undefined;
            resourceInputs["associatedSiteHref"] = state ? state.associatedSiteHref : undefined;
            resourceInputs["associatedSiteId"] = state ? state.associatedSiteId : undefined;
            resourceInputs["associatedSiteName"] = state ? state.associatedSiteName : undefined;
            resourceInputs["associationData"] = state ? state.associationData : undefined;
            resourceInputs["associationDataFile"] = state ? state.associationDataFile : undefined;
            resourceInputs["connectionTimeoutMins"] = state ? state.connectionTimeoutMins : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as MultisiteSiteAssociationArgs | undefined;
            resourceInputs["associationData"] = args ? args.associationData : undefined;
            resourceInputs["associationDataFile"] = args ? args.associationDataFile : undefined;
            resourceInputs["connectionTimeoutMins"] = args ? args.connectionTimeoutMins : undefined;
            resourceInputs["associatedSiteHref"] = undefined /*out*/;
            resourceInputs["associatedSiteId"] = undefined /*out*/;
            resourceInputs["associatedSiteName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MultisiteSiteAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MultisiteSiteAssociation resources.
 */
export interface MultisiteSiteAssociationState {
    /**
     * URL of the associated site
     */
    associatedSiteHref?: pulumi.Input<string>;
    /**
     * ID of the site to which the associated site belongs
     */
    associatedSiteId?: pulumi.Input<string>;
    /**
     * Name of the site to which the associated site belongs
     */
    associatedSiteName?: pulumi.Input<string>;
    /**
     * Data needed to associate this site to another
     */
    associationData?: pulumi.Input<string>;
    /**
     * Name of the file to be filled with association data for this site
     */
    associationDataFile?: pulumi.Input<string>;
    /**
     * How many minutes to keep checking for connection (0=no check)
     */
    connectionTimeoutMins?: pulumi.Input<number>;
    /**
     * Status of the association
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MultisiteSiteAssociation resource.
 */
export interface MultisiteSiteAssociationArgs {
    /**
     * Data needed to associate this site to another
     */
    associationData?: pulumi.Input<string>;
    /**
     * Name of the file to be filled with association data for this site
     */
    associationDataFile?: pulumi.Input<string>;
    /**
     * How many minutes to keep checking for connection (0=no check)
     */
    connectionTimeoutMins?: pulumi.Input<number>;
}
