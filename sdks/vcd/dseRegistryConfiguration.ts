// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DseRegistryConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DseRegistryConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DseRegistryConfigurationState, opts?: pulumi.CustomResourceOptions): DseRegistryConfiguration {
        return new DseRegistryConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/dseRegistryConfiguration:DseRegistryConfiguration';

    /**
     * Returns true if the given object is an instance of DseRegistryConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DseRegistryConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DseRegistryConfiguration.__pulumiType;
    }

    /**
     * Chart repository to use
     */
    public readonly chartRepository!: pulumi.Output<string>;
    /**
     * A set of version compatibility constraints
     */
    public /*out*/ readonly compatibleVersionConstraints!: pulumi.Output<string[]>;
    /**
     * Container registry configuration - only applicable for 'VCD Data Solutions'
     */
    public readonly containerRegistries!: pulumi.Output<outputs.DseRegistryConfigurationContainerRegistry[] | undefined>;
    /**
     * Default chart repository provided by Data Solution
     */
    public /*out*/ readonly defaultChartRepository!: pulumi.Output<string>;
    /**
     * Default Package name provided by Data Solution
     */
    public /*out*/ readonly defaultPackageName!: pulumi.Output<string>;
    /**
     * Default package repository provided by Data Solution
     */
    public /*out*/ readonly defaultRepository!: pulumi.Output<string>;
    /**
     * Default version provided by Data Solution
     */
    public /*out*/ readonly defaultVersion!: pulumi.Output<string>;
    /**
     * Data Solution Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Package name
     */
    public readonly packageName!: pulumi.Output<string>;
    /**
     * Package repository to use
     */
    public readonly packageRepository!: pulumi.Output<string>;
    /**
     * Parent RDE state
     */
    public /*out*/ readonly rdeState!: pulumi.Output<string>;
    /**
     * Boolean flag if the Data Solution requires version compatibility
     */
    public /*out*/ readonly requiresVersionCompatibility!: pulumi.Output<boolean>;
    /**
     * Type of Data Solution package. One of 'PackageRepository', 'ChartRepository'
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Use the default settings as provided by the Data Solution
     */
    public readonly useDefaultValues!: pulumi.Output<boolean | undefined>;
    /**
     * Version of package to use
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a DseRegistryConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DseRegistryConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DseRegistryConfigurationArgs | DseRegistryConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DseRegistryConfigurationState | undefined;
            resourceInputs["chartRepository"] = state ? state.chartRepository : undefined;
            resourceInputs["compatibleVersionConstraints"] = state ? state.compatibleVersionConstraints : undefined;
            resourceInputs["containerRegistries"] = state ? state.containerRegistries : undefined;
            resourceInputs["defaultChartRepository"] = state ? state.defaultChartRepository : undefined;
            resourceInputs["defaultPackageName"] = state ? state.defaultPackageName : undefined;
            resourceInputs["defaultRepository"] = state ? state.defaultRepository : undefined;
            resourceInputs["defaultVersion"] = state ? state.defaultVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packageName"] = state ? state.packageName : undefined;
            resourceInputs["packageRepository"] = state ? state.packageRepository : undefined;
            resourceInputs["rdeState"] = state ? state.rdeState : undefined;
            resourceInputs["requiresVersionCompatibility"] = state ? state.requiresVersionCompatibility : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useDefaultValues"] = state ? state.useDefaultValues : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DseRegistryConfigurationArgs | undefined;
            resourceInputs["chartRepository"] = args ? args.chartRepository : undefined;
            resourceInputs["containerRegistries"] = args ? args.containerRegistries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packageName"] = args ? args.packageName : undefined;
            resourceInputs["packageRepository"] = args ? args.packageRepository : undefined;
            resourceInputs["useDefaultValues"] = args ? args.useDefaultValues : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["compatibleVersionConstraints"] = undefined /*out*/;
            resourceInputs["defaultChartRepository"] = undefined /*out*/;
            resourceInputs["defaultPackageName"] = undefined /*out*/;
            resourceInputs["defaultRepository"] = undefined /*out*/;
            resourceInputs["defaultVersion"] = undefined /*out*/;
            resourceInputs["rdeState"] = undefined /*out*/;
            resourceInputs["requiresVersionCompatibility"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DseRegistryConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DseRegistryConfiguration resources.
 */
export interface DseRegistryConfigurationState {
    /**
     * Chart repository to use
     */
    chartRepository?: pulumi.Input<string>;
    /**
     * A set of version compatibility constraints
     */
    compatibleVersionConstraints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Container registry configuration - only applicable for 'VCD Data Solutions'
     */
    containerRegistries?: pulumi.Input<pulumi.Input<inputs.DseRegistryConfigurationContainerRegistry>[]>;
    /**
     * Default chart repository provided by Data Solution
     */
    defaultChartRepository?: pulumi.Input<string>;
    /**
     * Default Package name provided by Data Solution
     */
    defaultPackageName?: pulumi.Input<string>;
    /**
     * Default package repository provided by Data Solution
     */
    defaultRepository?: pulumi.Input<string>;
    /**
     * Default version provided by Data Solution
     */
    defaultVersion?: pulumi.Input<string>;
    /**
     * Data Solution Name
     */
    name?: pulumi.Input<string>;
    /**
     * Package name
     */
    packageName?: pulumi.Input<string>;
    /**
     * Package repository to use
     */
    packageRepository?: pulumi.Input<string>;
    /**
     * Parent RDE state
     */
    rdeState?: pulumi.Input<string>;
    /**
     * Boolean flag if the Data Solution requires version compatibility
     */
    requiresVersionCompatibility?: pulumi.Input<boolean>;
    /**
     * Type of Data Solution package. One of 'PackageRepository', 'ChartRepository'
     */
    type?: pulumi.Input<string>;
    /**
     * Use the default settings as provided by the Data Solution
     */
    useDefaultValues?: pulumi.Input<boolean>;
    /**
     * Version of package to use
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DseRegistryConfiguration resource.
 */
export interface DseRegistryConfigurationArgs {
    /**
     * Chart repository to use
     */
    chartRepository?: pulumi.Input<string>;
    /**
     * Container registry configuration - only applicable for 'VCD Data Solutions'
     */
    containerRegistries?: pulumi.Input<pulumi.Input<inputs.DseRegistryConfigurationContainerRegistry>[]>;
    /**
     * Data Solution Name
     */
    name?: pulumi.Input<string>;
    /**
     * Package name
     */
    packageName?: pulumi.Input<string>;
    /**
     * Package repository to use
     */
    packageRepository?: pulumi.Input<string>;
    /**
     * Use the default settings as provided by the Data Solution
     */
    useDefaultValues?: pulumi.Input<boolean>;
    /**
     * Version of package to use
     */
    version?: pulumi.Input<string>;
}
