// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ClonedVapp extends pulumi.CustomResource {
    /**
     * Get an existing ClonedVapp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClonedVappState, opts?: pulumi.CustomResourceOptions): ClonedVapp {
        return new ClonedVapp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/clonedVapp:ClonedVapp';

    /**
     * Returns true if the given object is an instance of ClonedVapp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClonedVapp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClonedVapp.__pulumiType;
    }

    /**
     * If true, it will delete the source (vApp or template) after creating the new vApp
     */
    public readonly deleteSource!: pulumi.Output<boolean | undefined>;
    /**
     * Optional description of the vApp
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * vApp Hyper Reference
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * A name for the vApp, unique withing the VDC
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * A boolean value stating if this vApp should be powered on
     */
    public readonly powerOn!: pulumi.Output<boolean | undefined>;
    /**
     * The identifier of the source to use for the creation of this vApp
     */
    public readonly sourceId!: pulumi.Output<string>;
    /**
     * The type of the source to use for the creation of this vApp (one of 'vapp' or 'template')
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * Shows the status code of the vApp
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * Shows the status of the vApp
     */
    public /*out*/ readonly statusText!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;
    /**
     * List of VMs contained in this vApp (in alphabetic order)
     */
    public /*out*/ readonly vmLists!: pulumi.Output<string[]>;

    /**
     * Create a ClonedVapp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClonedVappArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClonedVappArgs | ClonedVappState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClonedVappState | undefined;
            resourceInputs["deleteSource"] = state ? state.deleteSource : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["powerOn"] = state ? state.powerOn : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusText"] = state ? state.statusText : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["vmLists"] = state ? state.vmLists : undefined;
        } else {
            const args = argsOrState as ClonedVappArgs | undefined;
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            resourceInputs["deleteSource"] = args ? args.deleteSource : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["powerOn"] = args ? args.powerOn : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusText"] = undefined /*out*/;
            resourceInputs["vmLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClonedVapp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClonedVapp resources.
 */
export interface ClonedVappState {
    /**
     * If true, it will delete the source (vApp or template) after creating the new vApp
     */
    deleteSource?: pulumi.Input<boolean>;
    /**
     * Optional description of the vApp
     */
    description?: pulumi.Input<string>;
    /**
     * vApp Hyper Reference
     */
    href?: pulumi.Input<string>;
    /**
     * A name for the vApp, unique withing the VDC
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * A boolean value stating if this vApp should be powered on
     */
    powerOn?: pulumi.Input<boolean>;
    /**
     * The identifier of the source to use for the creation of this vApp
     */
    sourceId?: pulumi.Input<string>;
    /**
     * The type of the source to use for the creation of this vApp (one of 'vapp' or 'template')
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Shows the status code of the vApp
     */
    status?: pulumi.Input<number>;
    /**
     * Shows the status of the vApp
     */
    statusText?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * List of VMs contained in this vApp (in alphabetic order)
     */
    vmLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ClonedVapp resource.
 */
export interface ClonedVappArgs {
    /**
     * If true, it will delete the source (vApp or template) after creating the new vApp
     */
    deleteSource?: pulumi.Input<boolean>;
    /**
     * Optional description of the vApp
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the vApp, unique withing the VDC
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * A boolean value stating if this vApp should be powered on
     */
    powerOn?: pulumi.Input<boolean>;
    /**
     * The identifier of the source to use for the creation of this vApp
     */
    sourceId: pulumi.Input<string>;
    /**
     * The type of the source to use for the creation of this vApp (one of 'vapp' or 'template')
     */
    sourceType: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
