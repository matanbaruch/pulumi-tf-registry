// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVapp(args: GetVappArgs, opts?: pulumi.InvokeOptions): Promise<GetVappResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getVapp:getVapp", {
        "id": args.id,
        "name": args.name,
        "org": args.org,
        "vdc": args.vdc,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVapp.
 */
export interface GetVappArgs {
    id?: string;
    name: string;
    org?: string;
    vdc?: string;
}

/**
 * A collection of values returned by getVapp.
 */
export interface GetVappResult {
    readonly description: string;
    readonly guestProperties: {[key: string]: string};
    readonly href: string;
    readonly id: string;
    readonly inheritedMetadata: {[key: string]: string};
    readonly leases: outputs.GetVappLease[];
    /**
     * @deprecated Deprecated
     */
    readonly metadata: {[key: string]: string};
    readonly metadataEntries: outputs.GetVappMetadataEntry[];
    readonly name: string;
    readonly org?: string;
    readonly status: number;
    readonly statusText: string;
    readonly vappNetworkNames: string[];
    readonly vappOrgNetworkNames: string[];
    readonly vdc?: string;
    readonly vmNames: string[];
}
export function getVappOutput(args: GetVappOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVappResult> {
    return pulumi.output(args).apply((a: any) => getVapp(a, opts))
}

/**
 * A collection of arguments for invoking getVapp.
 */
export interface GetVappOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    org?: pulumi.Input<string>;
    vdc?: pulumi.Input<string>;
}
