// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProviderVdc extends pulumi.CustomResource {
    /**
     * Get an existing ProviderVdc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderVdcState, opts?: pulumi.CustomResourceOptions): ProviderVdc {
        return new ProviderVdc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/providerVdc:ProviderVdc';

    /**
     * Returns true if the given object is an instance of ProviderVdc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderVdc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderVdc.__pulumiType;
    }

    /**
     * Set of virtual hardware versions supported by this Provider VDC
     */
    public /*out*/ readonly capabilities!: pulumi.Output<string[]>;
    /**
     * Single-element list with an indicator of CPU and memory capacity
     */
    public /*out*/ readonly computeCapacities!: pulumi.Output<outputs.ProviderVdcComputeCapacity[]>;
    /**
     * Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants
     * when viewing fault domains of the child Organization VDCs (for example, a VDC Group)
     */
    public /*out*/ readonly computeProviderScope!: pulumi.Output<string>;
    /**
     * Optional description of the Provider VDC
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Set of IDs of external networks
     */
    public /*out*/ readonly externalNetworkIds!: pulumi.Output<string[]>;
    /**
     * The highest virtual hardware version supported by this Provider VDC
     */
    public readonly highestSupportedHardwareVersion!: pulumi.Output<string>;
    /**
     * Set with all the hosts which are connected to VC server
     */
    public /*out*/ readonly hostIds!: pulumi.Output<string[]>;
    /**
     * True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on
     * creation
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Metadata entries for the given Provider VDC
     */
    public readonly metadataEntries!: pulumi.Output<outputs.ProviderVdcMetadataEntry[] | undefined>;
    /**
     * Name of the Provider VDC
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set IDs of the network pools used by this Provider VDC
     */
    public readonly networkPoolIds!: pulumi.Output<string[]>;
    /**
     * ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
     */
    public readonly nsxtManagerId!: pulumi.Output<string | undefined>;
    /**
     * Set of IDs of the resource pools backing this provider VDC
     */
    public readonly resourcePoolIds!: pulumi.Output<string[]>;
    /**
     * Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized)
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * Set of IDs of the vSphere datastores backing this provider VDC
     */
    public /*out*/ readonly storageContainerIds!: pulumi.Output<string[]>;
    /**
     * Set of IDs to the storage profiles available to this Provider VDC
     */
    public /*out*/ readonly storageProfileIds!: pulumi.Output<string[]>;
    /**
     * Set of storage profile names used to create this Provider VDC
     */
    public readonly storageProfileNames!: pulumi.Output<string[]>;
    /**
     * ID of the universal network reference
     */
    public /*out*/ readonly universalNetworkPoolId!: pulumi.Output<string>;
    /**
     * ID of the vCenter server that provides the resource pools and datastores
     */
    public readonly vcenterId!: pulumi.Output<string>;

    /**
     * Create a ProviderVdc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderVdcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderVdcArgs | ProviderVdcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderVdcState | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["computeCapacities"] = state ? state.computeCapacities : undefined;
            resourceInputs["computeProviderScope"] = state ? state.computeProviderScope : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalNetworkIds"] = state ? state.externalNetworkIds : undefined;
            resourceInputs["highestSupportedHardwareVersion"] = state ? state.highestSupportedHardwareVersion : undefined;
            resourceInputs["hostIds"] = state ? state.hostIds : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPoolIds"] = state ? state.networkPoolIds : undefined;
            resourceInputs["nsxtManagerId"] = state ? state.nsxtManagerId : undefined;
            resourceInputs["resourcePoolIds"] = state ? state.resourcePoolIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageContainerIds"] = state ? state.storageContainerIds : undefined;
            resourceInputs["storageProfileIds"] = state ? state.storageProfileIds : undefined;
            resourceInputs["storageProfileNames"] = state ? state.storageProfileNames : undefined;
            resourceInputs["universalNetworkPoolId"] = state ? state.universalNetworkPoolId : undefined;
            resourceInputs["vcenterId"] = state ? state.vcenterId : undefined;
        } else {
            const args = argsOrState as ProviderVdcArgs | undefined;
            if ((!args || args.highestSupportedHardwareVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'highestSupportedHardwareVersion'");
            }
            if ((!args || args.resourcePoolIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePoolIds'");
            }
            if ((!args || args.storageProfileNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageProfileNames'");
            }
            if ((!args || args.vcenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["highestSupportedHardwareVersion"] = args ? args.highestSupportedHardwareVersion : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkPoolIds"] = args ? args.networkPoolIds : undefined;
            resourceInputs["nsxtManagerId"] = args ? args.nsxtManagerId : undefined;
            resourceInputs["resourcePoolIds"] = args ? args.resourcePoolIds : undefined;
            resourceInputs["storageProfileNames"] = args ? args.storageProfileNames : undefined;
            resourceInputs["vcenterId"] = args ? args.vcenterId : undefined;
            resourceInputs["capabilities"] = undefined /*out*/;
            resourceInputs["computeCapacities"] = undefined /*out*/;
            resourceInputs["computeProviderScope"] = undefined /*out*/;
            resourceInputs["externalNetworkIds"] = undefined /*out*/;
            resourceInputs["hostIds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storageContainerIds"] = undefined /*out*/;
            resourceInputs["storageProfileIds"] = undefined /*out*/;
            resourceInputs["universalNetworkPoolId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderVdc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProviderVdc resources.
 */
export interface ProviderVdcState {
    /**
     * Set of virtual hardware versions supported by this Provider VDC
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Single-element list with an indicator of CPU and memory capacity
     */
    computeCapacities?: pulumi.Input<pulumi.Input<inputs.ProviderVdcComputeCapacity>[]>;
    /**
     * Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants
     * when viewing fault domains of the child Organization VDCs (for example, a VDC Group)
     */
    computeProviderScope?: pulumi.Input<string>;
    /**
     * Optional description of the Provider VDC
     */
    description?: pulumi.Input<string>;
    /**
     * Set of IDs of external networks
     */
    externalNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The highest virtual hardware version supported by this Provider VDC
     */
    highestSupportedHardwareVersion?: pulumi.Input<string>;
    /**
     * Set with all the hosts which are connected to VC server
     */
    hostIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on
     * creation
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Metadata entries for the given Provider VDC
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.ProviderVdcMetadataEntry>[]>;
    /**
     * Name of the Provider VDC
     */
    name?: pulumi.Input<string>;
    /**
     * Set IDs of the network pools used by this Provider VDC
     */
    networkPoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
     */
    nsxtManagerId?: pulumi.Input<string>;
    /**
     * Set of IDs of the resource pools backing this provider VDC
     */
    resourcePoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized)
     */
    status?: pulumi.Input<number>;
    /**
     * Set of IDs of the vSphere datastores backing this provider VDC
     */
    storageContainerIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of IDs to the storage profiles available to this Provider VDC
     */
    storageProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of storage profile names used to create this Provider VDC
     */
    storageProfileNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the universal network reference
     */
    universalNetworkPoolId?: pulumi.Input<string>;
    /**
     * ID of the vCenter server that provides the resource pools and datastores
     */
    vcenterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderVdc resource.
 */
export interface ProviderVdcArgs {
    /**
     * Optional description of the Provider VDC
     */
    description?: pulumi.Input<string>;
    /**
     * The highest virtual hardware version supported by this Provider VDC
     */
    highestSupportedHardwareVersion: pulumi.Input<string>;
    /**
     * True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on
     * creation
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Metadata entries for the given Provider VDC
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.ProviderVdcMetadataEntry>[]>;
    /**
     * Name of the Provider VDC
     */
    name?: pulumi.Input<string>;
    /**
     * Set IDs of the network pools used by this Provider VDC
     */
    networkPoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
     */
    nsxtManagerId?: pulumi.Input<string>;
    /**
     * Set of IDs of the resource pools backing this provider VDC
     */
    resourcePoolIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of storage profile names used to create this Provider VDC
     */
    storageProfileNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the vCenter server that provides the resource pools and datastores
     */
    vcenterId: pulumi.Input<string>;
}
