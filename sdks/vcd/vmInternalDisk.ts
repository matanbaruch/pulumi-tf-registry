// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VmInternalDisk extends pulumi.CustomResource {
    /**
     * Get an existing VmInternalDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmInternalDiskState, opts?: pulumi.CustomResourceOptions): VmInternalDisk {
        return new VmInternalDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vmInternalDisk:VmInternalDisk';

    /**
     * Returns true if the given object is an instance of VmInternalDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmInternalDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmInternalDisk.__pulumiType;
    }

    /**
     * Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
     * complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
     */
    public readonly allowVmReboot!: pulumi.Output<boolean | undefined>;
    /**
     * The number of the SCSI or IDE controller itself.
     */
    public readonly busNumber!: pulumi.Output<number>;
    /**
     * The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
     * paravirtual(Paravirtual (SCSI)), sata, nvme
     */
    public readonly busType!: pulumi.Output<string>;
    /**
     * Specifies the IOPS for the disk.
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The size of the disk in MB.
     */
    public readonly sizeInMb!: pulumi.Output<number>;
    /**
     * Storage profile to override the VM default one
     */
    public readonly storageProfile!: pulumi.Output<string>;
    /**
     * Specifies whether the disk storage is pre-allocated or allocated on demand.
     */
    public /*out*/ readonly thinProvisioned!: pulumi.Output<boolean>;
    /**
     * The device number on the SCSI or IDE controller of the disk.
     */
    public readonly unitNumber!: pulumi.Output<number>;
    /**
     * The vApp this VM internal disk belongs to
     */
    public readonly vappName!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;
    /**
     * VM in vApp in which internal disk is created
     */
    public readonly vmName!: pulumi.Output<string>;

    /**
     * Create a VmInternalDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmInternalDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmInternalDiskArgs | VmInternalDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmInternalDiskState | undefined;
            resourceInputs["allowVmReboot"] = state ? state.allowVmReboot : undefined;
            resourceInputs["busNumber"] = state ? state.busNumber : undefined;
            resourceInputs["busType"] = state ? state.busType : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["sizeInMb"] = state ? state.sizeInMb : undefined;
            resourceInputs["storageProfile"] = state ? state.storageProfile : undefined;
            resourceInputs["thinProvisioned"] = state ? state.thinProvisioned : undefined;
            resourceInputs["unitNumber"] = state ? state.unitNumber : undefined;
            resourceInputs["vappName"] = state ? state.vappName : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["vmName"] = state ? state.vmName : undefined;
        } else {
            const args = argsOrState as VmInternalDiskArgs | undefined;
            if ((!args || args.busNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'busNumber'");
            }
            if ((!args || args.busType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'busType'");
            }
            if ((!args || args.sizeInMb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeInMb'");
            }
            if ((!args || args.unitNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unitNumber'");
            }
            if ((!args || args.vappName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappName'");
            }
            if ((!args || args.vmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmName'");
            }
            resourceInputs["allowVmReboot"] = args ? args.allowVmReboot : undefined;
            resourceInputs["busNumber"] = args ? args.busNumber : undefined;
            resourceInputs["busType"] = args ? args.busType : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["sizeInMb"] = args ? args.sizeInMb : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["unitNumber"] = args ? args.unitNumber : undefined;
            resourceInputs["vappName"] = args ? args.vappName : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["vmName"] = args ? args.vmName : undefined;
            resourceInputs["thinProvisioned"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmInternalDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmInternalDisk resources.
 */
export interface VmInternalDiskState {
    /**
     * Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
     * complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
     */
    allowVmReboot?: pulumi.Input<boolean>;
    /**
     * The number of the SCSI or IDE controller itself.
     */
    busNumber?: pulumi.Input<number>;
    /**
     * The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
     * paravirtual(Paravirtual (SCSI)), sata, nvme
     */
    busType?: pulumi.Input<string>;
    /**
     * Specifies the IOPS for the disk.
     */
    iops?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The size of the disk in MB.
     */
    sizeInMb?: pulumi.Input<number>;
    /**
     * Storage profile to override the VM default one
     */
    storageProfile?: pulumi.Input<string>;
    /**
     * Specifies whether the disk storage is pre-allocated or allocated on demand.
     */
    thinProvisioned?: pulumi.Input<boolean>;
    /**
     * The device number on the SCSI or IDE controller of the disk.
     */
    unitNumber?: pulumi.Input<number>;
    /**
     * The vApp this VM internal disk belongs to
     */
    vappName?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * VM in vApp in which internal disk is created
     */
    vmName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmInternalDisk resource.
 */
export interface VmInternalDiskArgs {
    /**
     * Powers off VM when changing any attribute of an IDE disk or unit/bus number of other disk types, after the change is
     * complete VM is powered back on. Without this setting enabled, such changes on a powered-on VM would fail.
     */
    allowVmReboot?: pulumi.Input<boolean>;
    /**
     * The number of the SCSI or IDE controller itself.
     */
    busNumber: pulumi.Input<number>;
    /**
     * The type of disk controller. Possible values: ide, parallel( LSI Logic Parallel SCSI), sas(LSI Logic SAS (SCSI)),
     * paravirtual(Paravirtual (SCSI)), sata, nvme
     */
    busType: pulumi.Input<string>;
    /**
     * Specifies the IOPS for the disk.
     */
    iops?: pulumi.Input<number>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The size of the disk in MB.
     */
    sizeInMb: pulumi.Input<number>;
    /**
     * Storage profile to override the VM default one
     */
    storageProfile?: pulumi.Input<string>;
    /**
     * The device number on the SCSI or IDE controller of the disk.
     */
    unitNumber: pulumi.Input<number>;
    /**
     * The vApp this VM internal disk belongs to
     */
    vappName: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * VM in vApp in which internal disk is created
     */
    vmName: pulumi.Input<string>;
}
