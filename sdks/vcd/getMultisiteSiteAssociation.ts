// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMultisiteSiteAssociation(args?: GetMultisiteSiteAssociationArgs, opts?: pulumi.InvokeOptions): Promise<GetMultisiteSiteAssociationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getMultisiteSiteAssociation:getMultisiteSiteAssociation", {
        "associatedSiteId": args.associatedSiteId,
        "associationDataFile": args.associationDataFile,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMultisiteSiteAssociation.
 */
export interface GetMultisiteSiteAssociationArgs {
    associatedSiteId?: string;
    associationDataFile?: string;
    id?: string;
}

/**
 * A collection of values returned by getMultisiteSiteAssociation.
 */
export interface GetMultisiteSiteAssociationResult {
    readonly associatedSiteHref: string;
    readonly associatedSiteId?: string;
    readonly associatedSiteName: string;
    readonly associationDataFile?: string;
    readonly id: string;
    readonly status: string;
}
export function getMultisiteSiteAssociationOutput(args?: GetMultisiteSiteAssociationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMultisiteSiteAssociationResult> {
    return pulumi.output(args).apply((a: any) => getMultisiteSiteAssociation(a, opts))
}

/**
 * A collection of arguments for invoking getMultisiteSiteAssociation.
 */
export interface GetMultisiteSiteAssociationOutputArgs {
    associatedSiteId?: pulumi.Input<string>;
    associationDataFile?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
