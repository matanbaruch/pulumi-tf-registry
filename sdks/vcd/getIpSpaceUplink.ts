// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getIpSpaceUplink(args: GetIpSpaceUplinkArgs, opts?: pulumi.InvokeOptions): Promise<GetIpSpaceUplinkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getIpSpaceUplink:getIpSpaceUplink", {
        "description": args.description,
        "externalNetworkId": args.externalNetworkId,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIpSpaceUplink.
 */
export interface GetIpSpaceUplinkArgs {
    description?: string;
    externalNetworkId: string;
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getIpSpaceUplink.
 */
export interface GetIpSpaceUplinkResult {
    readonly description?: string;
    readonly externalNetworkId: string;
    readonly id: string;
    readonly ipSpaceId: string;
    readonly ipSpaceType: string;
    readonly name: string;
    readonly status: string;
}
export function getIpSpaceUplinkOutput(args: GetIpSpaceUplinkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpSpaceUplinkResult> {
    return pulumi.output(args).apply((a: any) => getIpSpaceUplink(a, opts))
}

/**
 * A collection of arguments for invoking getIpSpaceUplink.
 */
export interface GetIpSpaceUplinkOutputArgs {
    description?: pulumi.Input<string>;
    externalNetworkId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
