// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkDirect extends pulumi.CustomResource {
    /**
     * Get an existing NetworkDirect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkDirectState, opts?: pulumi.CustomResourceOptions): NetworkDirect {
        return new NetworkDirect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/networkDirect:NetworkDirect';

    /**
     * Returns true if the given object is an instance of NetworkDirect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkDirect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkDirect.__pulumiType;
    }

    /**
     * Optional description for the network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the external network
     */
    public readonly externalNetwork!: pulumi.Output<string>;
    /**
     * Main DNS of the external network
     */
    public /*out*/ readonly externalNetworkDns1!: pulumi.Output<string>;
    /**
     * Secondary DNS of the external network
     */
    public /*out*/ readonly externalNetworkDns2!: pulumi.Output<string>;
    /**
     * DNS suffix of the external network
     */
    public /*out*/ readonly externalNetworkDnsSuffix!: pulumi.Output<string>;
    /**
     * Gateway of the external network
     */
    public /*out*/ readonly externalNetworkGateway!: pulumi.Output<string>;
    /**
     * Net mask of the external network
     */
    public /*out*/ readonly externalNetworkNetmask!: pulumi.Output<string>;
    /**
     * Network Hypertext Reference
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Key value map of metadata to assign to this network. Key and value can be any string
     *
     * @deprecated Deprecated
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Metadata entries for the given Network
     */
    public readonly metadataEntries!: pulumi.Output<outputs.NetworkDirectMetadataEntry[] | undefined>;
    /**
     * A unique name for this network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Defines if this network is shared between multiple VDCs in the Org
     */
    public readonly shared!: pulumi.Output<boolean | undefined>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a NetworkDirect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkDirectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkDirectArgs | NetworkDirectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkDirectState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalNetwork"] = state ? state.externalNetwork : undefined;
            resourceInputs["externalNetworkDns1"] = state ? state.externalNetworkDns1 : undefined;
            resourceInputs["externalNetworkDns2"] = state ? state.externalNetworkDns2 : undefined;
            resourceInputs["externalNetworkDnsSuffix"] = state ? state.externalNetworkDnsSuffix : undefined;
            resourceInputs["externalNetworkGateway"] = state ? state.externalNetworkGateway : undefined;
            resourceInputs["externalNetworkNetmask"] = state ? state.externalNetworkNetmask : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as NetworkDirectArgs | undefined;
            if ((!args || args.externalNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalNetwork'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalNetwork"] = args ? args.externalNetwork : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["externalNetworkDns1"] = undefined /*out*/;
            resourceInputs["externalNetworkDns2"] = undefined /*out*/;
            resourceInputs["externalNetworkDnsSuffix"] = undefined /*out*/;
            resourceInputs["externalNetworkGateway"] = undefined /*out*/;
            resourceInputs["externalNetworkNetmask"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkDirect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkDirect resources.
 */
export interface NetworkDirectState {
    /**
     * Optional description for the network
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the external network
     */
    externalNetwork?: pulumi.Input<string>;
    /**
     * Main DNS of the external network
     */
    externalNetworkDns1?: pulumi.Input<string>;
    /**
     * Secondary DNS of the external network
     */
    externalNetworkDns2?: pulumi.Input<string>;
    /**
     * DNS suffix of the external network
     */
    externalNetworkDnsSuffix?: pulumi.Input<string>;
    /**
     * Gateway of the external network
     */
    externalNetworkGateway?: pulumi.Input<string>;
    /**
     * Net mask of the external network
     */
    externalNetworkNetmask?: pulumi.Input<string>;
    /**
     * Network Hypertext Reference
     */
    href?: pulumi.Input<string>;
    /**
     * Key value map of metadata to assign to this network. Key and value can be any string
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given Network
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.NetworkDirectMetadataEntry>[]>;
    /**
     * A unique name for this network
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Defines if this network is shared between multiple VDCs in the Org
     */
    shared?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkDirect resource.
 */
export interface NetworkDirectArgs {
    /**
     * Optional description for the network
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the external network
     */
    externalNetwork: pulumi.Input<string>;
    /**
     * Key value map of metadata to assign to this network. Key and value can be any string
     *
     * @deprecated Deprecated
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Metadata entries for the given Network
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.NetworkDirectMetadataEntry>[]>;
    /**
     * A unique name for this network
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Defines if this network is shared between multiple VDCs in the Org
     */
    shared?: pulumi.Input<boolean>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
