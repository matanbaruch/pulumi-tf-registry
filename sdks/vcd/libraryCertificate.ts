// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LibraryCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LibraryCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LibraryCertificateState, opts?: pulumi.CustomResourceOptions): LibraryCertificate {
        return new LibraryCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/libraryCertificate:LibraryCertificate';

    /**
     * Returns true if the given object is an instance of LibraryCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LibraryCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LibraryCertificate.__pulumiType;
    }

    /**
     * Alias of certificate
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Certificate content
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * Certificate description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Certificate private key
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * Certificate private pass phrase
     */
    public readonly privateKeyPassphrase!: pulumi.Output<string | undefined>;

    /**
     * Create a LibraryCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LibraryCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LibraryCertificateArgs | LibraryCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LibraryCertificateState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyPassphrase"] = state ? state.privateKeyPassphrase : undefined;
        } else {
            const args = argsOrState as LibraryCertificateArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["privateKeyPassphrase"] = args?.privateKeyPassphrase ? pulumi.secret(args.privateKeyPassphrase) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey", "privateKeyPassphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LibraryCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LibraryCertificate resources.
 */
export interface LibraryCertificateState {
    /**
     * Alias of certificate
     */
    alias?: pulumi.Input<string>;
    /**
     * Certificate content
     */
    certificate?: pulumi.Input<string>;
    /**
     * Certificate description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Certificate private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Certificate private pass phrase
     */
    privateKeyPassphrase?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LibraryCertificate resource.
 */
export interface LibraryCertificateArgs {
    /**
     * Alias of certificate
     */
    alias: pulumi.Input<string>;
    /**
     * Certificate content
     */
    certificate: pulumi.Input<string>;
    /**
     * Certificate description
     */
    description?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Certificate private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Certificate private pass phrase
     */
    privateKeyPassphrase?: pulumi.Input<string>;
}
