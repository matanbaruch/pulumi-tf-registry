// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VappFirewallRules extends pulumi.CustomResource {
    /**
     * Get an existing VappFirewallRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VappFirewallRulesState, opts?: pulumi.CustomResourceOptions): VappFirewallRules {
        return new VappFirewallRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/vappFirewallRules:VappFirewallRules';

    /**
     * Returns true if the given object is an instance of VappFirewallRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VappFirewallRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VappFirewallRules.__pulumiType;
    }

    /**
     * Specifies what to do should none of the rules match. Either `allow` or `drop`
     */
    public readonly defaultAction!: pulumi.Output<string>;
    /**
     * Enable or disable firewall service. Default is `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Flag to enable logging for default action. Default value is false.
     */
    public readonly logDefaultAction!: pulumi.Output<boolean | undefined>;
    /**
     * vApp network identifier
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    public readonly rules!: pulumi.Output<outputs.VappFirewallRulesRule[] | undefined>;
    /**
     * vApp identifier
     */
    public readonly vappId!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;

    /**
     * Create a VappFirewallRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VappFirewallRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VappFirewallRulesArgs | VappFirewallRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VappFirewallRulesState | undefined;
            resourceInputs["defaultAction"] = state ? state.defaultAction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["logDefaultAction"] = state ? state.logDefaultAction : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["vappId"] = state ? state.vappId : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
        } else {
            const args = argsOrState as VappFirewallRulesArgs | undefined;
            if ((!args || args.defaultAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAction'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.vappId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappId'");
            }
            resourceInputs["defaultAction"] = args ? args.defaultAction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["logDefaultAction"] = args ? args.logDefaultAction : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["vappId"] = args ? args.vappId : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VappFirewallRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VappFirewallRules resources.
 */
export interface VappFirewallRulesState {
    /**
     * Specifies what to do should none of the rules match. Either `allow` or `drop`
     */
    defaultAction?: pulumi.Input<string>;
    /**
     * Enable or disable firewall service. Default is `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Flag to enable logging for default action. Default value is false.
     */
    logDefaultAction?: pulumi.Input<boolean>;
    /**
     * vApp network identifier
     */
    networkId?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.VappFirewallRulesRule>[]>;
    /**
     * vApp identifier
     */
    vappId?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VappFirewallRules resource.
 */
export interface VappFirewallRulesArgs {
    /**
     * Specifies what to do should none of the rules match. Either `allow` or `drop`
     */
    defaultAction: pulumi.Input<string>;
    /**
     * Enable or disable firewall service. Default is `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Flag to enable logging for default action. Default value is false.
     */
    logDefaultAction?: pulumi.Input<boolean>;
    /**
     * vApp network identifier
     */
    networkId: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.VappFirewallRulesRule>[]>;
    /**
     * vApp identifier
     */
    vappId: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
}
