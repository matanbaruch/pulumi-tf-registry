// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NsxtDistributedFirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing NsxtDistributedFirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtDistributedFirewallRuleState, opts?: pulumi.CustomResourceOptions): NsxtDistributedFirewallRule {
        return new NsxtDistributedFirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtDistributedFirewallRule:NsxtDistributedFirewallRule';

    /**
     * Returns true if the given object is an instance of NsxtDistributedFirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtDistributedFirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtDistributedFirewallRule.__pulumiType;
    }

    /**
     * An optional firewall rule ID, to put new rule above during creation
     */
    public readonly aboveRuleId!: pulumi.Output<string | undefined>;
    /**
     * Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * A set of Application Port Profile IDs. Leaving it empty means 'Any'
     */
    public readonly appPortProfileIds!: pulumi.Output<string[] | undefined>;
    /**
     * Comment that is shown next to rule in UI (VCD 10.3.2+)
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Description is not shown in UI
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
     */
    public readonly destinationGroupsExcluded!: pulumi.Output<boolean | undefined>;
    /**
     * A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
     */
    public readonly destinationIds!: pulumi.Output<string[] | undefined>;
    /**
     * Direction on which Firewall Rule applies (one of 'IN', 'OUT', 'IN_OUT')
     */
    public readonly direction!: pulumi.Output<string | undefined>;
    /**
     * Defined if Firewall Rule is active
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Firewall Rule Protocol (one of 'IPV4', 'IPV6', 'IPV4_IPV6')
     */
    public readonly ipProtocol!: pulumi.Output<string | undefined>;
    /**
     * Defines if matching traffic should be logged
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * Firewall Rule name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A set of Network Context Profile IDs. Leaving it empty means 'Any'
     */
    public readonly networkContextProfileIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
     */
    public readonly sourceGroupsExcluded!: pulumi.Output<boolean | undefined>;
    /**
     * A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
     */
    public readonly sourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * ID of VDC Group for Distributed Firewall
     */
    public readonly vdcGroupId!: pulumi.Output<string>;

    /**
     * Create a NsxtDistributedFirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtDistributedFirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtDistributedFirewallRuleArgs | NsxtDistributedFirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtDistributedFirewallRuleState | undefined;
            resourceInputs["aboveRuleId"] = state ? state.aboveRuleId : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["appPortProfileIds"] = state ? state.appPortProfileIds : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationGroupsExcluded"] = state ? state.destinationGroupsExcluded : undefined;
            resourceInputs["destinationIds"] = state ? state.destinationIds : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkContextProfileIds"] = state ? state.networkContextProfileIds : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["sourceGroupsExcluded"] = state ? state.sourceGroupsExcluded : undefined;
            resourceInputs["sourceIds"] = state ? state.sourceIds : undefined;
            resourceInputs["vdcGroupId"] = state ? state.vdcGroupId : undefined;
        } else {
            const args = argsOrState as NsxtDistributedFirewallRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.vdcGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vdcGroupId'");
            }
            resourceInputs["aboveRuleId"] = args ? args.aboveRuleId : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["appPortProfileIds"] = args ? args.appPortProfileIds : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationGroupsExcluded"] = args ? args.destinationGroupsExcluded : undefined;
            resourceInputs["destinationIds"] = args ? args.destinationIds : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkContextProfileIds"] = args ? args.networkContextProfileIds : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["sourceGroupsExcluded"] = args ? args.sourceGroupsExcluded : undefined;
            resourceInputs["sourceIds"] = args ? args.sourceIds : undefined;
            resourceInputs["vdcGroupId"] = args ? args.vdcGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtDistributedFirewallRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NsxtDistributedFirewallRule resources.
 */
export interface NsxtDistributedFirewallRuleState {
    /**
     * An optional firewall rule ID, to put new rule above during creation
     */
    aboveRuleId?: pulumi.Input<string>;
    /**
     * Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
     */
    action?: pulumi.Input<string>;
    /**
     * A set of Application Port Profile IDs. Leaving it empty means 'Any'
     */
    appPortProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment that is shown next to rule in UI (VCD 10.3.2+)
     */
    comment?: pulumi.Input<string>;
    /**
     * Description is not shown in UI
     */
    description?: pulumi.Input<string>;
    /**
     * Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
     */
    destinationGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
     */
    destinationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Direction on which Firewall Rule applies (one of 'IN', 'OUT', 'IN_OUT')
     */
    direction?: pulumi.Input<string>;
    /**
     * Defined if Firewall Rule is active
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Firewall Rule Protocol (one of 'IPV4', 'IPV6', 'IPV4_IPV6')
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * Defines if matching traffic should be logged
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Firewall Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * A set of Network Context Profile IDs. Leaving it empty means 'Any'
     */
    networkContextProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
     */
    sourceGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of VDC Group for Distributed Firewall
     */
    vdcGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtDistributedFirewallRule resource.
 */
export interface NsxtDistributedFirewallRuleArgs {
    /**
     * An optional firewall rule ID, to put new rule above during creation
     */
    aboveRuleId?: pulumi.Input<string>;
    /**
     * Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
     */
    action: pulumi.Input<string>;
    /**
     * A set of Application Port Profile IDs. Leaving it empty means 'Any'
     */
    appPortProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment that is shown next to rule in UI (VCD 10.3.2+)
     */
    comment?: pulumi.Input<string>;
    /**
     * Description is not shown in UI
     */
    description?: pulumi.Input<string>;
    /**
     * Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
     */
    destinationGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
     */
    destinationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Direction on which Firewall Rule applies (one of 'IN', 'OUT', 'IN_OUT')
     */
    direction?: pulumi.Input<string>;
    /**
     * Defined if Firewall Rule is active
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Firewall Rule Protocol (one of 'IPV4', 'IPV6', 'IPV4_IPV6')
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * Defines if matching traffic should be logged
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Firewall Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * A set of Network Context Profile IDs. Leaving it empty means 'Any'
     */
    networkContextProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
     */
    sourceGroupsExcluded?: pulumi.Input<boolean>;
    /**
     * A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of VDC Group for Distributed Firewall
     */
    vdcGroupId: pulumi.Input<string>;
}
