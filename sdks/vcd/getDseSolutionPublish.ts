// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDseSolutionPublish(args: GetDseSolutionPublishArgs, opts?: pulumi.InvokeOptions): Promise<GetDseSolutionPublishResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getDseSolutionPublish:getDseSolutionPublish", {
        "dataSolutionId": args.dataSolutionId,
        "id": args.id,
        "orgId": args.orgId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDseSolutionPublish.
 */
export interface GetDseSolutionPublishArgs {
    dataSolutionId: string;
    id?: string;
    orgId: string;
}

/**
 * A collection of values returned by getDseSolutionPublish.
 */
export interface GetDseSolutionPublishResult {
    readonly confluentLicenseType: string;
    readonly dataSolutionId: string;
    readonly dsOrgConfigId: string;
    readonly dsoAclId: string;
    readonly id: string;
    readonly orgId: string;
    readonly templateAclIds: string[];
}
export function getDseSolutionPublishOutput(args: GetDseSolutionPublishOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDseSolutionPublishResult> {
    return pulumi.output(args).apply((a: any) => getDseSolutionPublish(a, opts))
}

/**
 * A collection of arguments for invoking getDseSolutionPublish.
 */
export interface GetDseSolutionPublishOutputArgs {
    dataSolutionId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
}
