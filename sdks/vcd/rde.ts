// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Rde extends pulumi.CustomResource {
    /**
     * Get an existing Rde resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdeState, opts?: pulumi.CustomResourceOptions): Rde {
        return new Rde(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/rde:Rde';

    /**
     * Returns true if the given object is an instance of Rde.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rde {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rde.__pulumiType;
    }

    /**
     * A computed representation of the actual Runtime Defined Entity JSON retrieved from VCD. Useful to see the actual entity
     * contents if it is being changed by a third party in VCD
     */
    public /*out*/ readonly computedEntity!: pulumi.Output<string>;
    /**
     * If true, `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`
     */
    public /*out*/ readonly entityInSync!: pulumi.Output<boolean>;
    /**
     * An external entity's ID that this Runtime Defined Entity may have a relation to
     */
    public readonly externalId!: pulumi.Output<string>;
    /**
     * A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its
     * contents
     */
    public readonly inputEntity!: pulumi.Output<string | undefined>;
    /**
     * URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
     * contents
     */
    public readonly inputEntityUrl!: pulumi.Output<string | undefined>;
    /**
     * Metadata entries for the given Runtime Defined Entity
     */
    public readonly metadataEntries!: pulumi.Output<outputs.RdeMetadataEntry[] | undefined>;
    /**
     * The name of the Runtime Defined Entity. It can be non-unique
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when
     * connected as sysadmin working across different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * The organization of the Runtime Defined Entity
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * The ID of the user that owns the Runtime Defined Entity
     */
    public /*out*/ readonly ownerUserId!: pulumi.Output<string>;
    /**
     * The Runtime Defined Entity Type ID
     */
    public readonly rdeTypeId!: pulumi.Output<string>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be
     * done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity
     * is resolved.
     */
    public readonly resolve!: pulumi.Output<boolean>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will
     * fail if it is not resolved.
     */
    public readonly resolveOnRemoval!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state. If the entity
     * is correctly validated against its RDE Type schema, the state will be RESOLVED,otherwise it will be RESOLUTION_ERROR. If
     * an entity resolution ends in a RESOLUTION_ERROR state, it will require to be updated to a correct JSON to be usable
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a Rde resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdeArgs | RdeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdeState | undefined;
            resourceInputs["computedEntity"] = state ? state.computedEntity : undefined;
            resourceInputs["entityInSync"] = state ? state.entityInSync : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["inputEntity"] = state ? state.inputEntity : undefined;
            resourceInputs["inputEntityUrl"] = state ? state.inputEntityUrl : undefined;
            resourceInputs["metadataEntries"] = state ? state.metadataEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["ownerUserId"] = state ? state.ownerUserId : undefined;
            resourceInputs["rdeTypeId"] = state ? state.rdeTypeId : undefined;
            resourceInputs["resolve"] = state ? state.resolve : undefined;
            resourceInputs["resolveOnRemoval"] = state ? state.resolveOnRemoval : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as RdeArgs | undefined;
            if ((!args || args.rdeTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdeTypeId'");
            }
            if ((!args || args.resolve === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolve'");
            }
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["inputEntity"] = args ? args.inputEntity : undefined;
            resourceInputs["inputEntityUrl"] = args ? args.inputEntityUrl : undefined;
            resourceInputs["metadataEntries"] = args ? args.metadataEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["rdeTypeId"] = args ? args.rdeTypeId : undefined;
            resourceInputs["resolve"] = args ? args.resolve : undefined;
            resourceInputs["resolveOnRemoval"] = args ? args.resolveOnRemoval : undefined;
            resourceInputs["computedEntity"] = undefined /*out*/;
            resourceInputs["entityInSync"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["ownerUserId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rde.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rde resources.
 */
export interface RdeState {
    /**
     * A computed representation of the actual Runtime Defined Entity JSON retrieved from VCD. Useful to see the actual entity
     * contents if it is being changed by a third party in VCD
     */
    computedEntity?: pulumi.Input<string>;
    /**
     * If true, `computed_entity` is equal to either `input_entity` or the contents of `input_entity_url`
     */
    entityInSync?: pulumi.Input<boolean>;
    /**
     * An external entity's ID that this Runtime Defined Entity may have a relation to
     */
    externalId?: pulumi.Input<string>;
    /**
     * A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its
     * contents
     */
    inputEntity?: pulumi.Input<string>;
    /**
     * URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
     * contents
     */
    inputEntityUrl?: pulumi.Input<string>;
    /**
     * Metadata entries for the given Runtime Defined Entity
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.RdeMetadataEntry>[]>;
    /**
     * The name of the Runtime Defined Entity. It can be non-unique
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when
     * connected as sysadmin working across different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The organization of the Runtime Defined Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID of the user that owns the Runtime Defined Entity
     */
    ownerUserId?: pulumi.Input<string>;
    /**
     * The Runtime Defined Entity Type ID
     */
    rdeTypeId?: pulumi.Input<string>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be
     * done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity
     * is resolved.
     */
    resolve?: pulumi.Input<boolean>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will
     * fail if it is not resolved.
     */
    resolveOnRemoval?: pulumi.Input<boolean>;
    /**
     * Specifies whether the entity is correctly resolved or not. When created it will be in PRE_CREATED state. If the entity
     * is correctly validated against its RDE Type schema, the state will be RESOLVED,otherwise it will be RESOLUTION_ERROR. If
     * an entity resolution ends in a RESOLUTION_ERROR state, it will require to be updated to a correct JSON to be usable
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rde resource.
 */
export interface RdeArgs {
    /**
     * An external entity's ID that this Runtime Defined Entity may have a relation to
     */
    externalId?: pulumi.Input<string>;
    /**
     * A JSON representation of the Runtime Defined Entity that is defined by the user and is used to initialize/override its
     * contents
     */
    inputEntity?: pulumi.Input<string>;
    /**
     * URL that should point to a JSON representation of the Runtime Defined Entity and is used to initialize/override its
     * contents
     */
    inputEntityUrl?: pulumi.Input<string>;
    /**
     * Metadata entries for the given Runtime Defined Entity
     */
    metadataEntries?: pulumi.Input<pulumi.Input<inputs.RdeMetadataEntry>[]>;
    /**
     * The name of the Runtime Defined Entity. It can be non-unique
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization that will own this Runtime Defined Entity, optional if defined at provider level. Useful when
     * connected as sysadmin working across different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * The Runtime Defined Entity Type ID
     */
    rdeTypeId: pulumi.Input<string>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved by this provider. If `false`, it won't beresolved and must be
     * done either by an external component action or by an update. The Runtime Defined Entity can't bedeleted until the entity
     * is resolved.
     */
    resolve: pulumi.Input<boolean>;
    /**
     * If `true`, the Runtime Defined Entity will be resolved before it gets deleted, to ensure forced deletion.Destroy will
     * fail if it is not resolved.
     */
    resolveOnRemoval?: pulumi.Input<boolean>;
}
