// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpSpaceIpAllocation extends pulumi.CustomResource {
    /**
     * Get an existing IpSpaceIpAllocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpSpaceIpAllocationState, opts?: pulumi.CustomResourceOptions): IpSpaceIpAllocation {
        return new IpSpaceIpAllocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/ipSpaceIpAllocation:IpSpaceIpAllocation';

    /**
     * Returns true if the given object is an instance of IpSpaceIpAllocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpSpaceIpAllocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpSpaceIpAllocation.__pulumiType;
    }

    /**
     * Allocation date in ISO 8601 format (e.g. 2023-06-07T09:57:58.721Z)
     */
    public /*out*/ readonly allocationDate!: pulumi.Output<string>;
    /**
     * Custom description can only be set when usage_state is set to 'USED_MANUAL'
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * IP address part
     */
    public /*out*/ readonly ip!: pulumi.Output<string>;
    /**
     * IP address or CIDR
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * IP Space ID for IP Allocation
     */
    public readonly ipSpaceId!: pulumi.Output<string | undefined>;
    /**
     * Org ID for IP Allocation
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Required if 'type' is IP_PREFIX and no custom 'value` is provided
     */
    public readonly prefixLength!: pulumi.Output<string>;
    /**
     * Type of allocation. One of `FLOATING_IP``, `IP_PREFIX`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
     */
    public readonly usageState!: pulumi.Output<string>;
    /**
     * ID of entity that is using this allocation
     */
    public /*out*/ readonly usedById!: pulumi.Output<string>;
    /**
     * IP address or CIDR to use. (VCD 10.4.2+)
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a IpSpaceIpAllocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpSpaceIpAllocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpSpaceIpAllocationArgs | IpSpaceIpAllocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpSpaceIpAllocationState | undefined;
            resourceInputs["allocationDate"] = state ? state.allocationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipSpaceId"] = state ? state.ipSpaceId : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usageState"] = state ? state.usageState : undefined;
            resourceInputs["usedById"] = state ? state.usedById : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as IpSpaceIpAllocationArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipSpaceId"] = args ? args.ipSpaceId : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usageState"] = args ? args.usageState : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["allocationDate"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["usedById"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpSpaceIpAllocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpSpaceIpAllocation resources.
 */
export interface IpSpaceIpAllocationState {
    /**
     * Allocation date in ISO 8601 format (e.g. 2023-06-07T09:57:58.721Z)
     */
    allocationDate?: pulumi.Input<string>;
    /**
     * Custom description can only be set when usage_state is set to 'USED_MANUAL'
     */
    description?: pulumi.Input<string>;
    /**
     * IP address part
     */
    ip?: pulumi.Input<string>;
    /**
     * IP address or CIDR
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IP Space ID for IP Allocation
     */
    ipSpaceId?: pulumi.Input<string>;
    /**
     * Org ID for IP Allocation
     */
    orgId?: pulumi.Input<string>;
    /**
     * Required if 'type' is IP_PREFIX and no custom 'value` is provided
     */
    prefixLength?: pulumi.Input<string>;
    /**
     * Type of allocation. One of `FLOATING_IP``, `IP_PREFIX`
     */
    type?: pulumi.Input<string>;
    /**
     * Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
     */
    usageState?: pulumi.Input<string>;
    /**
     * ID of entity that is using this allocation
     */
    usedById?: pulumi.Input<string>;
    /**
     * IP address or CIDR to use. (VCD 10.4.2+)
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpSpaceIpAllocation resource.
 */
export interface IpSpaceIpAllocationArgs {
    /**
     * Custom description can only be set when usage_state is set to 'USED_MANUAL'
     */
    description?: pulumi.Input<string>;
    /**
     * IP Space ID for IP Allocation
     */
    ipSpaceId?: pulumi.Input<string>;
    /**
     * Org ID for IP Allocation
     */
    orgId: pulumi.Input<string>;
    /**
     * Required if 'type' is IP_PREFIX and no custom 'value` is provided
     */
    prefixLength?: pulumi.Input<string>;
    /**
     * Type of allocation. One of `FLOATING_IP``, `IP_PREFIX`
     */
    type: pulumi.Input<string>;
    /**
     * Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
     */
    usageState?: pulumi.Input<string>;
    /**
     * IP address or CIDR to use. (VCD 10.4.2+)
     */
    value?: pulumi.Input<string>;
}
