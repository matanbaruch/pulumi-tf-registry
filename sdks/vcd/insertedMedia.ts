// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InsertedMedia extends pulumi.CustomResource {
    /**
     * Get an existing InsertedMedia resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InsertedMediaState, opts?: pulumi.CustomResourceOptions): InsertedMedia {
        return new InsertedMedia(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/insertedMedia:InsertedMedia';

    /**
     * Returns true if the given object is an instance of InsertedMedia.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InsertedMedia {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InsertedMedia.__pulumiType;
    }

    /**
     * catalog name where to find media file
     */
    public readonly catalog!: pulumi.Output<string>;
    /**
     * When ejecting answers automatically to question yes
     */
    public readonly ejectForce!: pulumi.Output<boolean | undefined>;
    /**
     * media name to use
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;
    /**
     * vApp to use
     */
    public readonly vappName!: pulumi.Output<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    public readonly vdc!: pulumi.Output<string | undefined>;
    /**
     * VM in vApp in which media will be inserted or ejected
     */
    public readonly vmName!: pulumi.Output<string>;

    /**
     * Create a InsertedMedia resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InsertedMediaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InsertedMediaArgs | InsertedMediaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InsertedMediaState | undefined;
            resourceInputs["catalog"] = state ? state.catalog : undefined;
            resourceInputs["ejectForce"] = state ? state.ejectForce : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["vappName"] = state ? state.vappName : undefined;
            resourceInputs["vdc"] = state ? state.vdc : undefined;
            resourceInputs["vmName"] = state ? state.vmName : undefined;
        } else {
            const args = argsOrState as InsertedMediaArgs | undefined;
            if ((!args || args.catalog === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalog'");
            }
            if ((!args || args.vappName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vappName'");
            }
            if ((!args || args.vmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmName'");
            }
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["ejectForce"] = args ? args.ejectForce : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["vappName"] = args ? args.vappName : undefined;
            resourceInputs["vdc"] = args ? args.vdc : undefined;
            resourceInputs["vmName"] = args ? args.vmName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InsertedMedia.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InsertedMedia resources.
 */
export interface InsertedMediaState {
    /**
     * catalog name where to find media file
     */
    catalog?: pulumi.Input<string>;
    /**
     * When ejecting answers automatically to question yes
     */
    ejectForce?: pulumi.Input<boolean>;
    /**
     * media name to use
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * vApp to use
     */
    vappName?: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * VM in vApp in which media will be inserted or ejected
     */
    vmName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InsertedMedia resource.
 */
export interface InsertedMediaArgs {
    /**
     * catalog name where to find media file
     */
    catalog: pulumi.Input<string>;
    /**
     * When ejecting answers automatically to question yes
     */
    ejectForce?: pulumi.Input<boolean>;
    /**
     * media name to use
     */
    name?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
    /**
     * vApp to use
     */
    vappName: pulumi.Input<string>;
    /**
     * The name of VDC to use, optional if defined at provider level
     */
    vdc?: pulumi.Input<string>;
    /**
     * VM in vApp in which media will be inserted or ejected
     */
    vmName: pulumi.Input<string>;
}
