// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMultisiteOrgData(args: GetMultisiteOrgDataArgs, opts?: pulumi.InvokeOptions): Promise<GetMultisiteOrgDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcd:index/getMultisiteOrgData:getMultisiteOrgData", {
        "downloadToFile": args.downloadToFile,
        "id": args.id,
        "orgId": args.orgId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMultisiteOrgData.
 */
export interface GetMultisiteOrgDataArgs {
    downloadToFile?: string;
    id?: string;
    orgId: string;
}

/**
 * A collection of values returned by getMultisiteOrgData.
 */
export interface GetMultisiteOrgDataResult {
    readonly associationData: string;
    readonly associations: string[];
    readonly downloadToFile?: string;
    readonly id: string;
    readonly numberOfAssociations: number;
    readonly orgId: string;
}
export function getMultisiteOrgDataOutput(args: GetMultisiteOrgDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMultisiteOrgDataResult> {
    return pulumi.output(args).apply((a: any) => getMultisiteOrgData(a, opts))
}

/**
 * A collection of arguments for invoking getMultisiteOrgData.
 */
export interface GetMultisiteOrgDataOutputArgs {
    downloadToFile?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
}
