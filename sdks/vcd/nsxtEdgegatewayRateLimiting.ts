// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NsxtEdgegatewayRateLimiting extends pulumi.CustomResource {
    /**
     * Get an existing NsxtEdgegatewayRateLimiting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtEdgegatewayRateLimitingState, opts?: pulumi.CustomResourceOptions): NsxtEdgegatewayRateLimiting {
        return new NsxtEdgegatewayRateLimiting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/nsxtEdgegatewayRateLimiting:NsxtEdgegatewayRateLimiting';

    /**
     * Returns true if the given object is an instance of NsxtEdgegatewayRateLimiting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NsxtEdgegatewayRateLimiting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NsxtEdgegatewayRateLimiting.__pulumiType;
    }

    /**
     * Edge gateway ID for Rate limiting (QoS) configuration
     */
    public readonly edgeGatewayId!: pulumi.Output<string>;
    /**
     * Egress profile ID for Rate limiting (QoS) configuration
     */
    public readonly egressProfileId!: pulumi.Output<string | undefined>;
    /**
     * Ingress profile ID for Rate limiting (QoS) configuration
     */
    public readonly ingressProfileId!: pulumi.Output<string | undefined>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    public readonly org!: pulumi.Output<string | undefined>;

    /**
     * Create a NsxtEdgegatewayRateLimiting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NsxtEdgegatewayRateLimitingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtEdgegatewayRateLimitingArgs | NsxtEdgegatewayRateLimitingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtEdgegatewayRateLimitingState | undefined;
            resourceInputs["edgeGatewayId"] = state ? state.edgeGatewayId : undefined;
            resourceInputs["egressProfileId"] = state ? state.egressProfileId : undefined;
            resourceInputs["ingressProfileId"] = state ? state.ingressProfileId : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
        } else {
            const args = argsOrState as NsxtEdgegatewayRateLimitingArgs | undefined;
            if ((!args || args.edgeGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeGatewayId'");
            }
            resourceInputs["edgeGatewayId"] = args ? args.edgeGatewayId : undefined;
            resourceInputs["egressProfileId"] = args ? args.egressProfileId : undefined;
            resourceInputs["ingressProfileId"] = args ? args.ingressProfileId : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NsxtEdgegatewayRateLimiting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NsxtEdgegatewayRateLimiting resources.
 */
export interface NsxtEdgegatewayRateLimitingState {
    /**
     * Edge gateway ID for Rate limiting (QoS) configuration
     */
    edgeGatewayId?: pulumi.Input<string>;
    /**
     * Egress profile ID for Rate limiting (QoS) configuration
     */
    egressProfileId?: pulumi.Input<string>;
    /**
     * Ingress profile ID for Rate limiting (QoS) configuration
     */
    ingressProfileId?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NsxtEdgegatewayRateLimiting resource.
 */
export interface NsxtEdgegatewayRateLimitingArgs {
    /**
     * Edge gateway ID for Rate limiting (QoS) configuration
     */
    edgeGatewayId: pulumi.Input<string>;
    /**
     * Egress profile ID for Rate limiting (QoS) configuration
     */
    egressProfileId?: pulumi.Input<string>;
    /**
     * Ingress profile ID for Rate limiting (QoS) configuration
     */
    ingressProfileId?: pulumi.Input<string>;
    /**
     * The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across
     * different organizations
     */
    org?: pulumi.Input<string>;
}
