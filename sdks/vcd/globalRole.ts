// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GlobalRole extends pulumi.CustomResource {
    /**
     * Get an existing GlobalRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalRoleState, opts?: pulumi.CustomResourceOptions): GlobalRole {
        return new GlobalRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcd:index/globalRole:GlobalRole';

    /**
     * Returns true if the given object is an instance of GlobalRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalRole.__pulumiType;
    }

    /**
     * Key used for internationalization
     */
    public /*out*/ readonly bundleKey!: pulumi.Output<string>;
    /**
     * Global role description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of global role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * When true, publishes the global role to all tenants
     */
    public readonly publishToAllTenants!: pulumi.Output<boolean>;
    /**
     * Whether this global role is read-only
     */
    public /*out*/ readonly readOnly!: pulumi.Output<boolean>;
    /**
     * list of rights assigned to this global role
     */
    public readonly rights!: pulumi.Output<string[] | undefined>;
    /**
     * list of tenants to which this global role is published
     */
    public readonly tenants!: pulumi.Output<string[]>;

    /**
     * Create a GlobalRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalRoleArgs | GlobalRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalRoleState | undefined;
            resourceInputs["bundleKey"] = state ? state.bundleKey : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publishToAllTenants"] = state ? state.publishToAllTenants : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["rights"] = state ? state.rights : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
        } else {
            const args = argsOrState as GlobalRoleArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.publishToAllTenants === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishToAllTenants'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishToAllTenants"] = args ? args.publishToAllTenants : undefined;
            resourceInputs["rights"] = args ? args.rights : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["bundleKey"] = undefined /*out*/;
            resourceInputs["readOnly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlobalRole resources.
 */
export interface GlobalRoleState {
    /**
     * Key used for internationalization
     */
    bundleKey?: pulumi.Input<string>;
    /**
     * Global role description
     */
    description?: pulumi.Input<string>;
    /**
     * Name of global role.
     */
    name?: pulumi.Input<string>;
    /**
     * When true, publishes the global role to all tenants
     */
    publishToAllTenants?: pulumi.Input<boolean>;
    /**
     * Whether this global role is read-only
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * list of rights assigned to this global role
     */
    rights?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of tenants to which this global role is published
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GlobalRole resource.
 */
export interface GlobalRoleArgs {
    /**
     * Global role description
     */
    description: pulumi.Input<string>;
    /**
     * Name of global role.
     */
    name?: pulumi.Input<string>;
    /**
     * When true, publishes the global role to all tenants
     */
    publishToAllTenants: pulumi.Input<boolean>;
    /**
     * list of rights assigned to this global role
     */
    rights?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of tenants to which this global role is published
     */
    tenants?: pulumi.Input<pulumi.Input<string>[]>;
}
