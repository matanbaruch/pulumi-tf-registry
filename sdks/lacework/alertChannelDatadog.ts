// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AlertChannelDatadog extends pulumi.CustomResource {
    /**
     * Get an existing AlertChannelDatadog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertChannelDatadogState, opts?: pulumi.CustomResourceOptions): AlertChannelDatadog {
        return new AlertChannelDatadog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/alertChannelDatadog:AlertChannelDatadog';

    /**
     * Returns true if the given object is an instance of AlertChannelDatadog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertChannelDatadog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertChannelDatadog.__pulumiType;
    }

    /**
     * The Datadog api key required to submit metrics and events to Datadog
     */
    public readonly apiKey!: pulumi.Output<string>;
    public /*out*/ readonly createdOrUpdatedBy!: pulumi.Output<string>;
    public /*out*/ readonly createdOrUpdatedTime!: pulumi.Output<string>;
    /**
     * The level of detail of logs or event stream
     */
    public readonly datadogService!: pulumi.Output<string | undefined>;
    /**
     * Where to store your logs, either the US or Europe
     */
    public readonly datadogSite!: pulumi.Output<string | undefined>;
    /**
     * The state of the external integration
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly intgGuid!: pulumi.Output<string>;
    /**
     * The integration name
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly orgLevel!: pulumi.Output<boolean>;
    /**
     * Whether to test the integration of an alert channel upon creation and modifications
     */
    public readonly testIntegration!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly typeName!: pulumi.Output<string>;

    /**
     * Create a AlertChannelDatadog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertChannelDatadogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertChannelDatadogArgs | AlertChannelDatadogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertChannelDatadogState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["createdOrUpdatedBy"] = state ? state.createdOrUpdatedBy : undefined;
            resourceInputs["createdOrUpdatedTime"] = state ? state.createdOrUpdatedTime : undefined;
            resourceInputs["datadogService"] = state ? state.datadogService : undefined;
            resourceInputs["datadogSite"] = state ? state.datadogSite : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["intgGuid"] = state ? state.intgGuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgLevel"] = state ? state.orgLevel : undefined;
            resourceInputs["testIntegration"] = state ? state.testIntegration : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
        } else {
            const args = argsOrState as AlertChannelDatadogArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["datadogService"] = args ? args.datadogService : undefined;
            resourceInputs["datadogSite"] = args ? args.datadogSite : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["testIntegration"] = args ? args.testIntegration : undefined;
            resourceInputs["createdOrUpdatedBy"] = undefined /*out*/;
            resourceInputs["createdOrUpdatedTime"] = undefined /*out*/;
            resourceInputs["intgGuid"] = undefined /*out*/;
            resourceInputs["orgLevel"] = undefined /*out*/;
            resourceInputs["typeName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AlertChannelDatadog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertChannelDatadog resources.
 */
export interface AlertChannelDatadogState {
    /**
     * The Datadog api key required to submit metrics and events to Datadog
     */
    apiKey?: pulumi.Input<string>;
    createdOrUpdatedBy?: pulumi.Input<string>;
    createdOrUpdatedTime?: pulumi.Input<string>;
    /**
     * The level of detail of logs or event stream
     */
    datadogService?: pulumi.Input<string>;
    /**
     * Where to store your logs, either the US or Europe
     */
    datadogSite?: pulumi.Input<string>;
    /**
     * The state of the external integration
     */
    enabled?: pulumi.Input<boolean>;
    intgGuid?: pulumi.Input<string>;
    /**
     * The integration name
     */
    name?: pulumi.Input<string>;
    orgLevel?: pulumi.Input<boolean>;
    /**
     * Whether to test the integration of an alert channel upon creation and modifications
     */
    testIntegration?: pulumi.Input<boolean>;
    typeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertChannelDatadog resource.
 */
export interface AlertChannelDatadogArgs {
    /**
     * The Datadog api key required to submit metrics and events to Datadog
     */
    apiKey: pulumi.Input<string>;
    /**
     * The level of detail of logs or event stream
     */
    datadogService?: pulumi.Input<string>;
    /**
     * Where to store your logs, either the US or Europe
     */
    datadogSite?: pulumi.Input<string>;
    /**
     * The state of the external integration
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The integration name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to test the integration of an alert channel upon creation and modifications
     */
    testIntegration?: pulumi.Input<boolean>;
}
