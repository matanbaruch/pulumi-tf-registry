// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationAzureAgentlessScanning extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAzureAgentlessScanning resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationAzureAgentlessScanningState, opts?: pulumi.CustomResourceOptions): IntegrationAzureAgentlessScanning {
        return new IntegrationAzureAgentlessScanning(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/integrationAzureAgentlessScanning:IntegrationAzureAgentlessScanning';

    /**
     * Returns true if the given object is an instance of IntegrationAzureAgentlessScanning.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAzureAgentlessScanning {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAzureAgentlessScanning.__pulumiType;
    }

    /**
     * blob container containing analysis results shared with Lacework platform.
     */
    public readonly blobContainerName!: pulumi.Output<string>;
    public /*out*/ readonly createdOrUpdatedBy!: pulumi.Output<string>;
    public /*out*/ readonly createdOrUpdatedTime!: pulumi.Output<string>;
    public readonly credentials!: pulumi.Output<outputs.IntegrationAzureAgentlessScanningCredentials>;
    /**
     * The state of the external integration.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Integration level - TENANT / SUBSCRIPTION.
     */
    public readonly integrationLevel!: pulumi.Output<string | undefined>;
    public /*out*/ readonly intgGuid!: pulumi.Output<string>;
    /**
     * The integration name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The LQL query text.
     */
    public readonly queryText!: pulumi.Output<string | undefined>;
    /**
     * The number of attempts to create the external integration.
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * Whether to includes scanning for containers.
     */
    public readonly scanContainers!: pulumi.Output<boolean | undefined>;
    /**
     * How often in hours the scan will run in hours.
     */
    public readonly scanFrequency!: pulumi.Output<number | undefined>;
    /**
     * Whether to includes scanning for host vulnerabilities.
     */
    public readonly scanHostVulnerabilities!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to scan secondary volumes (true) or only root volumes (false)
     */
    public readonly scanMultiVolume!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to scan stopped instances (true)
     */
    public readonly scanStoppedInstances!: pulumi.Output<boolean | undefined>;
    /**
     * name of the resource group where the scanner runs.
     */
    public readonly scanningResourceGroupName!: pulumi.Output<string>;
    /**
     * Id of the subscription where LW scanner is deployed.
     */
    public readonly scanningSubscriptionId!: pulumi.Output<string>;
    public /*out*/ readonly serverToken!: pulumi.Output<string>;
    /**
     * name of the storage account, in the format of 'https://<account>.blob.core.windows.net'
     */
    public readonly storageAccountUrl!: pulumi.Output<string>;
    /**
     * List of subscriptions to specifically include/exclude.
     */
    public readonly subscriptionsLists!: pulumi.Output<string[] | undefined>;
    /**
     * Id of the tenant where LW scanner is deployed.
     */
    public readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a IntegrationAzureAgentlessScanning resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationAzureAgentlessScanningArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationAzureAgentlessScanningArgs | IntegrationAzureAgentlessScanningState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationAzureAgentlessScanningState | undefined;
            resourceInputs["blobContainerName"] = state ? state.blobContainerName : undefined;
            resourceInputs["createdOrUpdatedBy"] = state ? state.createdOrUpdatedBy : undefined;
            resourceInputs["createdOrUpdatedTime"] = state ? state.createdOrUpdatedTime : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["integrationLevel"] = state ? state.integrationLevel : undefined;
            resourceInputs["intgGuid"] = state ? state.intgGuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryText"] = state ? state.queryText : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["scanContainers"] = state ? state.scanContainers : undefined;
            resourceInputs["scanFrequency"] = state ? state.scanFrequency : undefined;
            resourceInputs["scanHostVulnerabilities"] = state ? state.scanHostVulnerabilities : undefined;
            resourceInputs["scanMultiVolume"] = state ? state.scanMultiVolume : undefined;
            resourceInputs["scanStoppedInstances"] = state ? state.scanStoppedInstances : undefined;
            resourceInputs["scanningResourceGroupName"] = state ? state.scanningResourceGroupName : undefined;
            resourceInputs["scanningSubscriptionId"] = state ? state.scanningSubscriptionId : undefined;
            resourceInputs["serverToken"] = state ? state.serverToken : undefined;
            resourceInputs["storageAccountUrl"] = state ? state.storageAccountUrl : undefined;
            resourceInputs["subscriptionsLists"] = state ? state.subscriptionsLists : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as IntegrationAzureAgentlessScanningArgs | undefined;
            if ((!args || args.blobContainerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blobContainerName'");
            }
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.scanningResourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scanningResourceGroupName'");
            }
            if ((!args || args.scanningSubscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scanningSubscriptionId'");
            }
            if ((!args || args.storageAccountUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountUrl'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["blobContainerName"] = args ? args.blobContainerName : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["integrationLevel"] = args ? args.integrationLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryText"] = args ? args.queryText : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["scanContainers"] = args ? args.scanContainers : undefined;
            resourceInputs["scanFrequency"] = args ? args.scanFrequency : undefined;
            resourceInputs["scanHostVulnerabilities"] = args ? args.scanHostVulnerabilities : undefined;
            resourceInputs["scanMultiVolume"] = args ? args.scanMultiVolume : undefined;
            resourceInputs["scanStoppedInstances"] = args ? args.scanStoppedInstances : undefined;
            resourceInputs["scanningResourceGroupName"] = args ? args.scanningResourceGroupName : undefined;
            resourceInputs["scanningSubscriptionId"] = args ? args.scanningSubscriptionId : undefined;
            resourceInputs["storageAccountUrl"] = args ? args.storageAccountUrl : undefined;
            resourceInputs["subscriptionsLists"] = args ? args.subscriptionsLists : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["createdOrUpdatedBy"] = undefined /*out*/;
            resourceInputs["createdOrUpdatedTime"] = undefined /*out*/;
            resourceInputs["intgGuid"] = undefined /*out*/;
            resourceInputs["serverToken"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationAzureAgentlessScanning.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationAzureAgentlessScanning resources.
 */
export interface IntegrationAzureAgentlessScanningState {
    /**
     * blob container containing analysis results shared with Lacework platform.
     */
    blobContainerName?: pulumi.Input<string>;
    createdOrUpdatedBy?: pulumi.Input<string>;
    createdOrUpdatedTime?: pulumi.Input<string>;
    credentials?: pulumi.Input<inputs.IntegrationAzureAgentlessScanningCredentials>;
    /**
     * The state of the external integration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Integration level - TENANT / SUBSCRIPTION.
     */
    integrationLevel?: pulumi.Input<string>;
    intgGuid?: pulumi.Input<string>;
    /**
     * The integration name.
     */
    name?: pulumi.Input<string>;
    /**
     * The LQL query text.
     */
    queryText?: pulumi.Input<string>;
    /**
     * The number of attempts to create the external integration.
     */
    retries?: pulumi.Input<number>;
    /**
     * Whether to includes scanning for containers.
     */
    scanContainers?: pulumi.Input<boolean>;
    /**
     * How often in hours the scan will run in hours.
     */
    scanFrequency?: pulumi.Input<number>;
    /**
     * Whether to includes scanning for host vulnerabilities.
     */
    scanHostVulnerabilities?: pulumi.Input<boolean>;
    /**
     * Whether to scan secondary volumes (true) or only root volumes (false)
     */
    scanMultiVolume?: pulumi.Input<boolean>;
    /**
     * Whether to scan stopped instances (true)
     */
    scanStoppedInstances?: pulumi.Input<boolean>;
    /**
     * name of the resource group where the scanner runs.
     */
    scanningResourceGroupName?: pulumi.Input<string>;
    /**
     * Id of the subscription where LW scanner is deployed.
     */
    scanningSubscriptionId?: pulumi.Input<string>;
    serverToken?: pulumi.Input<string>;
    /**
     * name of the storage account, in the format of 'https://<account>.blob.core.windows.net'
     */
    storageAccountUrl?: pulumi.Input<string>;
    /**
     * List of subscriptions to specifically include/exclude.
     */
    subscriptionsLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Id of the tenant where LW scanner is deployed.
     */
    tenantId?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationAzureAgentlessScanning resource.
 */
export interface IntegrationAzureAgentlessScanningArgs {
    /**
     * blob container containing analysis results shared with Lacework platform.
     */
    blobContainerName: pulumi.Input<string>;
    credentials: pulumi.Input<inputs.IntegrationAzureAgentlessScanningCredentials>;
    /**
     * The state of the external integration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Integration level - TENANT / SUBSCRIPTION.
     */
    integrationLevel?: pulumi.Input<string>;
    /**
     * The integration name.
     */
    name?: pulumi.Input<string>;
    /**
     * The LQL query text.
     */
    queryText?: pulumi.Input<string>;
    /**
     * The number of attempts to create the external integration.
     */
    retries?: pulumi.Input<number>;
    /**
     * Whether to includes scanning for containers.
     */
    scanContainers?: pulumi.Input<boolean>;
    /**
     * How often in hours the scan will run in hours.
     */
    scanFrequency?: pulumi.Input<number>;
    /**
     * Whether to includes scanning for host vulnerabilities.
     */
    scanHostVulnerabilities?: pulumi.Input<boolean>;
    /**
     * Whether to scan secondary volumes (true) or only root volumes (false)
     */
    scanMultiVolume?: pulumi.Input<boolean>;
    /**
     * Whether to scan stopped instances (true)
     */
    scanStoppedInstances?: pulumi.Input<boolean>;
    /**
     * name of the resource group where the scanner runs.
     */
    scanningResourceGroupName: pulumi.Input<string>;
    /**
     * Id of the subscription where LW scanner is deployed.
     */
    scanningSubscriptionId: pulumi.Input<string>;
    /**
     * name of the storage account, in the format of 'https://<account>.blob.core.windows.net'
     */
    storageAccountUrl: pulumi.Input<string>;
    /**
     * List of subscriptions to specifically include/exclude.
     */
    subscriptionsLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Id of the tenant where LW scanner is deployed.
     */
    tenantId: pulumi.Input<string>;
}
