// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertChannelAwsS3Credentials {
    /**
     * The ARN of the IAM role
     */
    externalId: string;
    /**
     * The external ID of the IAM role
     */
    roleArn: string;
}

export interface AlertChannelGcpPubSubCredentials {
    /**
     * The service account client email
     */
    clientEmail: string;
    /**
     * The service account client ID
     */
    clientId: string;
    /**
     * The service account private key ID
     */
    privateKey: string;
    /**
     * The service account private key
     */
    privateKeyId: string;
}

export interface AlertChannelSplunkEventData {
    /**
     * Index to store generated events
     */
    index: string;
    /**
     * The Splunk source
     */
    source: string;
}

export interface AlertProfileAlert {
    /**
     * The summary of the resulting alert
     */
    description: string;
    /**
     * The name of the resulting alert
     */
    eventName: string;
    /**
     * The name that policies can use to refer to this template when generating alerts
     */
    name: string;
    /**
     * A high-level observation of the resulting alert
     */
    subject: string;
}

export interface GetUserProfileAccount {
    accountName: string;
    admin: boolean;
    custGuid: string;
    userEnabled: boolean;
    userGuid: string;
}

export interface IntegrationAwsAgentlessScanningCredentials {
    /**
     * The external id
     */
    externalId: string;
    /**
     * The role arn
     */
    roleArn: string;
}

export interface IntegrationAwsCfgCredentials {
    externalId: string;
    roleArn: string;
}

export interface IntegrationAwsCtCredentials {
    externalId: string;
    roleArn: string;
}

export interface IntegrationAwsCtOrgAccountMappings {
    /**
     * The default Lacework account name where any non-mapped AWS account will appear
     */
    defaultLaceworkAccount: string;
    /**
     * A map of AWS accounts to Lacework account. This can be specified multiple times to map multiple Lacework accounts.
     */
    mappings: outputs.IntegrationAwsCtOrgAccountMappingsMapping[];
}

export interface IntegrationAwsCtOrgAccountMappingsMapping {
    /**
     * The list of AWS account IDs to map.
     */
    awsAccounts: string[];
    /**
     * The Lacework account name where the CloudTrail activity from the selected AWS accounts will appear.
     */
    laceworkAccount: string;
}

export interface IntegrationAwsEksAuditLogCredentials {
    externalId: string;
    roleArn: string;
}

export interface IntegrationAwsGovcloudCfgCredentials {
    /**
     * The AWS access key ID
     */
    accessKeyId: string;
    /**
     * The AWS secret key for the specified AWS access key
     */
    secretAccessKey: string;
}

export interface IntegrationAwsGovcloudCtCredentials {
    /**
     * The AWS access key ID
     */
    accessKeyId: string;
    /**
     * The AWS secret key for the specified AWS access key
     */
    secretAccessKey: string;
}

export interface IntegrationAwsOrgAgentlessScanningCredentials {
    /**
     * The external id
     */
    externalId: string;
    /**
     * The role arn
     */
    roleArn: string;
}

export interface IntegrationAwsOrgAgentlessScanningOrgAccountMapping {
    /**
     * The default Lacework account name where any non-mapped AWS account will appear
     */
    defaultLaceworkAccount: string;
    /**
     * A map of AWS accounts to Lacework account. This can be specified multiple times to map multiple Lacework accounts.
     */
    mappings: outputs.IntegrationAwsOrgAgentlessScanningOrgAccountMappingMapping[];
}

export interface IntegrationAwsOrgAgentlessScanningOrgAccountMappingMapping {
    /**
     * The list of AWS account IDs to map.
     */
    awsAccounts: string[];
    /**
     * The Lacework account name where the CloudTrail activity from the selected AWS accounts will appear.
     */
    laceworkAccount: string;
}

export interface IntegrationAzureAdAlCredentials {
    clientId: string;
    clientSecret: string;
}

export interface IntegrationAzureAgentlessScanningCredentials {
    /**
     * Client Id from credentials file.
     */
    clientId: string;
    /**
     * Client secret from credentials file.
     */
    clientSecret: string;
}

export interface IntegrationAzureAlCredentials {
    clientId: string;
    clientSecret: string;
}

export interface IntegrationAzureCfgCredentials {
    clientId: string;
    clientSecret: string;
}

export interface IntegrationDockerHubLimitByLabel {
    key: string;
    value: string;
}

export interface IntegrationDockerV2LimitByLabel {
    key: string;
    value: string;
}

export interface IntegrationEcrCredentials {
    /**
     * The AWS access key ID for an AWS IAM user that permissions to access the Amazon Container Registry
     */
    accessKeyId?: string;
    /**
     * The external ID for the IAM role
     */
    externalId?: string;
    /**
     * The ARN of the IAM role with permissions to access the Amazon Container Registry
     */
    roleArn?: string;
    /**
     * The AWS secret key for the specified AWS access key
     */
    secretAccessKey?: string;
}

export interface IntegrationEcrLimitByLabel {
    key: string;
    value: string;
}

export interface IntegrationGarCredentials {
    clientEmail: string;
    clientId: string;
    privateKey: string;
    privateKeyId: string;
}

export interface IntegrationGarLimitByLabel {
    key: string;
    value: string;
}

export interface IntegrationGcpAgentlessScanningCredentials {
    /**
     * Client email from credentials file.
     */
    clientEmail: string;
    /**
     * Client Id from credentials file.
     */
    clientId: string;
    /**
     * Private Key from credentials file.
     */
    privateKey: string;
    /**
     * Private Key Id from credentials file.
     */
    privateKeyId: string;
    /**
     * Token URI from credentials file.
     */
    tokenUri?: string;
}

export interface IntegrationGcpAtCredentials {
    clientEmail: string;
    clientId: string;
    privateKey: string;
    privateKeyId: string;
}

export interface IntegrationGcpCfgCredentials {
    clientEmail: string;
    clientId: string;
    privateKey: string;
    privateKeyId: string;
}

export interface IntegrationGcpGkeAuditLogCredentials {
    clientEmail: string;
    clientId: string;
    privateKey: string;
    privateKeyId: string;
}

export interface IntegrationGcpPubSubAuditLogCredentials {
    clientEmail: string;
    clientId: string;
    privateKey: string;
    privateKeyId: string;
}

export interface IntegrationGcrCredentials {
    clientEmail: string;
    clientId: string;
    privateKey: string;
    privateKeyId: string;
}

export interface IntegrationGcrLimitByLabel {
    key: string;
    value: string;
}

export interface IntegrationGhcrLimitByLabel {
    key: string;
    value: string;
}

export interface IntegrationInlineScannerIdentifierTag {
    key: string;
    value: string;
}

export interface IntegrationOciCfgCredentials {
    fingerprint: string;
    privateKey: string;
}

export interface IntegrationProxyScannerLimitByLabel {
    key?: string;
    value?: string;
}

export interface ManagedPoliciesPolicy {
    /**
     * The state of the policy
     */
    enabled: boolean;
    /**
     * The id of the policy
     */
    id: string;
    /**
     * The severity for the policy. Valid severities are: Critical, High, Medium, Low, Info
     */
    severity: string;
}

export interface PolicyAlerting {
    /**
     * Whether alerting is enabled or disabled
     */
    enabled?: boolean;
    /**
     * The alerting profile id
     */
    profile: string;
}

export interface PolicyExceptionConstraint {
    /**
     * The field key
     */
    fieldKey: string;
    /**
     * A list of key value pairs to filter the policy exception
     *
     * @deprecated Deprecated
     */
    fieldValueMaps?: outputs.PolicyExceptionConstraintFieldValueMap[];
    /**
     * The field values
     */
    fieldValues?: string[];
    /**
     * A list of key values pairs to filter the policy exception
     */
    fieldValuesMaps?: outputs.PolicyExceptionConstraintFieldValuesMap[];
}

export interface PolicyExceptionConstraintFieldValueMap {
    /**
     * The values map key
     */
    key: string;
    /**
     * The values map value
     */
    value: string;
}

export interface PolicyExceptionConstraintFieldValuesMap {
    /**
     * The values map key
     */
    key: string;
    /**
     * The values map value list
     */
    values: string[];
}

export interface ReportRuleAwsComplianceReports {
    cisS3?: boolean;
    hipaa?: boolean;
    iso2700?: boolean;
    nist800171Rev2?: boolean;
    nist80053Rev4?: boolean;
    pci?: boolean;
    soc?: boolean;
    socRev2?: boolean;
}

export interface ReportRuleAzureComplianceReports {
    cis?: boolean;
    cis131?: boolean;
    pci?: boolean;
    soc?: boolean;
}

export interface ReportRuleDailyComplianceReports {
    awsCloudtrail?: boolean;
    awsCompliance?: boolean;
    azureActivityLog?: boolean;
    azureCompliance?: boolean;
    gcpAuditTrail?: boolean;
    gcpCompliance?: boolean;
    hostSecurity?: boolean;
    openshiftCompliance?: boolean;
    openshiftComplianceEvents?: boolean;
    platform?: boolean;
}

export interface ReportRuleGcpComplianceReports {
    cis?: boolean;
    cis12?: boolean;
    hipaa?: boolean;
    hipaaRev2?: boolean;
    iso27001?: boolean;
    k8s?: boolean;
    pci?: boolean;
    pciRev2?: boolean;
    soc?: boolean;
    socRev2?: boolean;
}

export interface ResourceGroupContainerContainerLabel {
    key: string;
    value: string;
}

export interface ResourceGroupGroup {
    filters?: outputs.ResourceGroupGroupFilter[];
    groups?: outputs.ResourceGroupGroupGroup[];
    /**
     * The operation to apply (AND/OR)
     */
    operator: string;
}

export interface ResourceGroupGroupFilter {
    /**
     * The field on which to apply the predicate.
     */
    field: string;
    /**
     * A custom name for the filter.
     */
    filterName: string;
    /**
     * For fields that support a tag, the key on which to filter.
     */
    key?: string;
    /**
     * The operation that should be applied across filters/groups
     */
    operation: string;
    /**
     * The values that the predicate should match.
     */
    values: string[];
}

export interface ResourceGroupGroupGroup {
    filters?: outputs.ResourceGroupGroupGroupFilter[];
    groups?: outputs.ResourceGroupGroupGroupGroup[];
    /**
     * The operation to apply (AND/OR)
     */
    operator: string;
}

export interface ResourceGroupGroupGroupFilter {
    /**
     * The field on which to apply the predicate.
     */
    field: string;
    /**
     * A custom name for the filter.
     */
    filterName: string;
    /**
     * For fields that support a tag, the key on which to filter.
     */
    key?: string;
    /**
     * The operation that should be applied across filters/groups
     */
    operation: string;
    /**
     * The values that the predicate should match.
     */
    values: string[];
}

export interface ResourceGroupGroupGroupGroup {
    filters?: outputs.ResourceGroupGroupGroupGroupFilter[];
    groups?: outputs.ResourceGroupGroupGroupGroupGroup[];
    /**
     * The operation to apply (AND/OR)
     */
    operator: string;
}

export interface ResourceGroupGroupGroupGroupFilter {
    /**
     * The field on which to apply the predicate.
     */
    field: string;
    /**
     * A custom name for the filter.
     */
    filterName: string;
    /**
     * For fields that support a tag, the key on which to filter.
     */
    key?: string;
    /**
     * The operation that should be applied across filters/groups
     */
    operation: string;
    /**
     * The values that the predicate should match.
     */
    values: string[];
}

export interface ResourceGroupGroupGroupGroupGroup {
    filters?: outputs.ResourceGroupGroupGroupGroupGroupFilter[];
    /**
     * The operation to apply (AND/OR)
     */
    operator: string;
}

export interface ResourceGroupGroupGroupGroupGroupFilter {
    /**
     * The field on which to apply the predicate.
     */
    field: string;
    /**
     * A custom name for the filter.
     */
    filterName: string;
    /**
     * For fields that support a tag, the key on which to filter.
     */
    key?: string;
    /**
     * The operation that should be applied across filters/groups
     */
    operation: string;
    /**
     * The values that the predicate should match.
     */
    values: string[];
}

export interface ResourceGroupMachineMachineTag {
    key: string;
    value: string;
}

export interface TeamMemberOrganization {
    /**
     * List of accounts the team member is an admin
     */
    adminAccounts?: string[];
    /**
     * Whether the team member is an org level administrator
     */
    administrator?: boolean;
    /**
     * Whether the team member is an org level user
     */
    user?: boolean;
    /**
     * List of accounts the team member is a user
     */
    userAccounts?: string[];
}

export interface VulnerabilityExceptionContainerResourceScope {
    /**
     * The list of image ids
     */
    imageIds?: string[];
    /**
     * The list of image tags
     */
    imageTags?: string[];
    /**
     * The list of namespaces
     */
    namespaces?: string[];
    /**
     * The list of registries
     */
    registries?: string[];
    /**
     * The list of repositories
     */
    repositories?: string[];
}

export interface VulnerabilityExceptionContainerVulnerabilityCriteria {
    /**
     * The list of cves
     */
    cves?: string[];
    /**
     * Whether to filter on fixable
     */
    fixableVuln?: string;
    /**
     * The list of packages
     */
    packages?: outputs.VulnerabilityExceptionContainerVulnerabilityCriteriaPackage[];
    /**
     * List of severities for the vulnerability exception. Valid severities are: Critical, High, Medium, Low, Info
     */
    severities?: string[];
}

export interface VulnerabilityExceptionContainerVulnerabilityCriteriaPackage {
    /**
     * The name of the package
     */
    name: string;
    /**
     * The version of the package
     */
    version: string;
}

export interface VulnerabilityExceptionHostResourceScope {
    /**
     * The list of cluster names
     */
    clusterNames?: string[];
    /**
     * The list of external ips
     */
    externalIps?: string[];
    /**
     * The list of hostnames
     */
    hostnames?: string[];
    /**
     * The list of namespaces
     */
    namespaces?: string[];
}

export interface VulnerabilityExceptionHostVulnerabilityCriteria {
    /**
     * The list of cves
     */
    cves?: string[];
    /**
     * Whether to filter on fixable
     */
    fixableVuln?: string;
    /**
     * The list of packages
     */
    packages?: outputs.VulnerabilityExceptionHostVulnerabilityCriteriaPackage[];
    /**
     * List of severities for the vulnerability exception. Valid severities are: Critical, High, Medium, Low, Info
     */
    severities?: string[];
}

export interface VulnerabilityExceptionHostVulnerabilityCriteriaPackage {
    /**
     * The name of the package
     */
    name: string;
    /**
     * The version of the package
     */
    version: string;
}

