// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentAccessTokenArgs, AgentAccessTokenState } from "./agentAccessToken";
export type AgentAccessToken = import("./agentAccessToken").AgentAccessToken;
export const AgentAccessToken: typeof import("./agentAccessToken").AgentAccessToken = null as any;
utilities.lazyLoad(exports, ["AgentAccessToken"], () => require("./agentAccessToken"));

export { AlertChannelAwsCloudwatchArgs, AlertChannelAwsCloudwatchState } from "./alertChannelAwsCloudwatch";
export type AlertChannelAwsCloudwatch = import("./alertChannelAwsCloudwatch").AlertChannelAwsCloudwatch;
export const AlertChannelAwsCloudwatch: typeof import("./alertChannelAwsCloudwatch").AlertChannelAwsCloudwatch = null as any;
utilities.lazyLoad(exports, ["AlertChannelAwsCloudwatch"], () => require("./alertChannelAwsCloudwatch"));

export { AlertChannelAwsS3Args, AlertChannelAwsS3State } from "./alertChannelAwsS3";
export type AlertChannelAwsS3 = import("./alertChannelAwsS3").AlertChannelAwsS3;
export const AlertChannelAwsS3: typeof import("./alertChannelAwsS3").AlertChannelAwsS3 = null as any;
utilities.lazyLoad(exports, ["AlertChannelAwsS3"], () => require("./alertChannelAwsS3"));

export { AlertChannelCiscoWebexArgs, AlertChannelCiscoWebexState } from "./alertChannelCiscoWebex";
export type AlertChannelCiscoWebex = import("./alertChannelCiscoWebex").AlertChannelCiscoWebex;
export const AlertChannelCiscoWebex: typeof import("./alertChannelCiscoWebex").AlertChannelCiscoWebex = null as any;
utilities.lazyLoad(exports, ["AlertChannelCiscoWebex"], () => require("./alertChannelCiscoWebex"));

export { AlertChannelDatadogArgs, AlertChannelDatadogState } from "./alertChannelDatadog";
export type AlertChannelDatadog = import("./alertChannelDatadog").AlertChannelDatadog;
export const AlertChannelDatadog: typeof import("./alertChannelDatadog").AlertChannelDatadog = null as any;
utilities.lazyLoad(exports, ["AlertChannelDatadog"], () => require("./alertChannelDatadog"));

export { AlertChannelEmailArgs, AlertChannelEmailState } from "./alertChannelEmail";
export type AlertChannelEmail = import("./alertChannelEmail").AlertChannelEmail;
export const AlertChannelEmail: typeof import("./alertChannelEmail").AlertChannelEmail = null as any;
utilities.lazyLoad(exports, ["AlertChannelEmail"], () => require("./alertChannelEmail"));

export { AlertChannelGcpPubSubArgs, AlertChannelGcpPubSubState } from "./alertChannelGcpPubSub";
export type AlertChannelGcpPubSub = import("./alertChannelGcpPubSub").AlertChannelGcpPubSub;
export const AlertChannelGcpPubSub: typeof import("./alertChannelGcpPubSub").AlertChannelGcpPubSub = null as any;
utilities.lazyLoad(exports, ["AlertChannelGcpPubSub"], () => require("./alertChannelGcpPubSub"));

export { AlertChannelJiraCloudArgs, AlertChannelJiraCloudState } from "./alertChannelJiraCloud";
export type AlertChannelJiraCloud = import("./alertChannelJiraCloud").AlertChannelJiraCloud;
export const AlertChannelJiraCloud: typeof import("./alertChannelJiraCloud").AlertChannelJiraCloud = null as any;
utilities.lazyLoad(exports, ["AlertChannelJiraCloud"], () => require("./alertChannelJiraCloud"));

export { AlertChannelJiraServerArgs, AlertChannelJiraServerState } from "./alertChannelJiraServer";
export type AlertChannelJiraServer = import("./alertChannelJiraServer").AlertChannelJiraServer;
export const AlertChannelJiraServer: typeof import("./alertChannelJiraServer").AlertChannelJiraServer = null as any;
utilities.lazyLoad(exports, ["AlertChannelJiraServer"], () => require("./alertChannelJiraServer"));

export { AlertChannelMicrosoftTeamsArgs, AlertChannelMicrosoftTeamsState } from "./alertChannelMicrosoftTeams";
export type AlertChannelMicrosoftTeams = import("./alertChannelMicrosoftTeams").AlertChannelMicrosoftTeams;
export const AlertChannelMicrosoftTeams: typeof import("./alertChannelMicrosoftTeams").AlertChannelMicrosoftTeams = null as any;
utilities.lazyLoad(exports, ["AlertChannelMicrosoftTeams"], () => require("./alertChannelMicrosoftTeams"));

export { AlertChannelNewrelicArgs, AlertChannelNewrelicState } from "./alertChannelNewrelic";
export type AlertChannelNewrelic = import("./alertChannelNewrelic").AlertChannelNewrelic;
export const AlertChannelNewrelic: typeof import("./alertChannelNewrelic").AlertChannelNewrelic = null as any;
utilities.lazyLoad(exports, ["AlertChannelNewrelic"], () => require("./alertChannelNewrelic"));

export { AlertChannelPagerdutyArgs, AlertChannelPagerdutyState } from "./alertChannelPagerduty";
export type AlertChannelPagerduty = import("./alertChannelPagerduty").AlertChannelPagerduty;
export const AlertChannelPagerduty: typeof import("./alertChannelPagerduty").AlertChannelPagerduty = null as any;
utilities.lazyLoad(exports, ["AlertChannelPagerduty"], () => require("./alertChannelPagerduty"));

export { AlertChannelQradarArgs, AlertChannelQradarState } from "./alertChannelQradar";
export type AlertChannelQradar = import("./alertChannelQradar").AlertChannelQradar;
export const AlertChannelQradar: typeof import("./alertChannelQradar").AlertChannelQradar = null as any;
utilities.lazyLoad(exports, ["AlertChannelQradar"], () => require("./alertChannelQradar"));

export { AlertChannelServiceNowArgs, AlertChannelServiceNowState } from "./alertChannelServiceNow";
export type AlertChannelServiceNow = import("./alertChannelServiceNow").AlertChannelServiceNow;
export const AlertChannelServiceNow: typeof import("./alertChannelServiceNow").AlertChannelServiceNow = null as any;
utilities.lazyLoad(exports, ["AlertChannelServiceNow"], () => require("./alertChannelServiceNow"));

export { AlertChannelSlackArgs, AlertChannelSlackState } from "./alertChannelSlack";
export type AlertChannelSlack = import("./alertChannelSlack").AlertChannelSlack;
export const AlertChannelSlack: typeof import("./alertChannelSlack").AlertChannelSlack = null as any;
utilities.lazyLoad(exports, ["AlertChannelSlack"], () => require("./alertChannelSlack"));

export { AlertChannelSplunkArgs, AlertChannelSplunkState } from "./alertChannelSplunk";
export type AlertChannelSplunk = import("./alertChannelSplunk").AlertChannelSplunk;
export const AlertChannelSplunk: typeof import("./alertChannelSplunk").AlertChannelSplunk = null as any;
utilities.lazyLoad(exports, ["AlertChannelSplunk"], () => require("./alertChannelSplunk"));

export { AlertChannelVictoropsArgs, AlertChannelVictoropsState } from "./alertChannelVictorops";
export type AlertChannelVictorops = import("./alertChannelVictorops").AlertChannelVictorops;
export const AlertChannelVictorops: typeof import("./alertChannelVictorops").AlertChannelVictorops = null as any;
utilities.lazyLoad(exports, ["AlertChannelVictorops"], () => require("./alertChannelVictorops"));

export { AlertChannelWebhookArgs, AlertChannelWebhookState } from "./alertChannelWebhook";
export type AlertChannelWebhook = import("./alertChannelWebhook").AlertChannelWebhook;
export const AlertChannelWebhook: typeof import("./alertChannelWebhook").AlertChannelWebhook = null as any;
utilities.lazyLoad(exports, ["AlertChannelWebhook"], () => require("./alertChannelWebhook"));

export { AlertProfileArgs, AlertProfileState } from "./alertProfile";
export type AlertProfile = import("./alertProfile").AlertProfile;
export const AlertProfile: typeof import("./alertProfile").AlertProfile = null as any;
utilities.lazyLoad(exports, ["AlertProfile"], () => require("./alertProfile"));

export { AlertRuleArgs, AlertRuleState } from "./alertRule";
export type AlertRule = import("./alertRule").AlertRule;
export const AlertRule: typeof import("./alertRule").AlertRule = null as any;
utilities.lazyLoad(exports, ["AlertRule"], () => require("./alertRule"));

export { DataExportRuleArgs, DataExportRuleState } from "./dataExportRule";
export type DataExportRule = import("./dataExportRule").DataExportRule;
export const DataExportRule: typeof import("./dataExportRule").DataExportRule = null as any;
utilities.lazyLoad(exports, ["DataExportRule"], () => require("./dataExportRule"));

export { ExternalIdArgs, ExternalIdState } from "./externalId";
export type ExternalId = import("./externalId").ExternalId;
export const ExternalId: typeof import("./externalId").ExternalId = null as any;
utilities.lazyLoad(exports, ["ExternalId"], () => require("./externalId"));

export { GetAgentAccessTokenArgs, GetAgentAccessTokenResult, GetAgentAccessTokenOutputArgs } from "./getAgentAccessToken";
export const getAgentAccessToken: typeof import("./getAgentAccessToken").getAgentAccessToken = null as any;
export const getAgentAccessTokenOutput: typeof import("./getAgentAccessToken").getAgentAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAgentAccessToken","getAgentAccessTokenOutput"], () => require("./getAgentAccessToken"));

export { GetApiTokenArgs, GetApiTokenResult, GetApiTokenOutputArgs } from "./getApiToken";
export const getApiToken: typeof import("./getApiToken").getApiToken = null as any;
export const getApiTokenOutput: typeof import("./getApiToken").getApiTokenOutput = null as any;
utilities.lazyLoad(exports, ["getApiToken","getApiTokenOutput"], () => require("./getApiToken"));

export { GetMetricModuleArgs, GetMetricModuleResult, GetMetricModuleOutputArgs } from "./getMetricModule";
export const getMetricModule: typeof import("./getMetricModule").getMetricModule = null as any;
export const getMetricModuleOutput: typeof import("./getMetricModule").getMetricModuleOutput = null as any;
utilities.lazyLoad(exports, ["getMetricModule","getMetricModuleOutput"], () => require("./getMetricModule"));

export { GetUserProfileArgs, GetUserProfileResult, GetUserProfileOutputArgs } from "./getUserProfile";
export const getUserProfile: typeof import("./getUserProfile").getUserProfile = null as any;
export const getUserProfileOutput: typeof import("./getUserProfile").getUserProfileOutput = null as any;
utilities.lazyLoad(exports, ["getUserProfile","getUserProfileOutput"], () => require("./getUserProfile"));

export { IntegrationAwsAgentlessScanningArgs, IntegrationAwsAgentlessScanningState } from "./integrationAwsAgentlessScanning";
export type IntegrationAwsAgentlessScanning = import("./integrationAwsAgentlessScanning").IntegrationAwsAgentlessScanning;
export const IntegrationAwsAgentlessScanning: typeof import("./integrationAwsAgentlessScanning").IntegrationAwsAgentlessScanning = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsAgentlessScanning"], () => require("./integrationAwsAgentlessScanning"));

export { IntegrationAwsCfgArgs, IntegrationAwsCfgState } from "./integrationAwsCfg";
export type IntegrationAwsCfg = import("./integrationAwsCfg").IntegrationAwsCfg;
export const IntegrationAwsCfg: typeof import("./integrationAwsCfg").IntegrationAwsCfg = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsCfg"], () => require("./integrationAwsCfg"));

export { IntegrationAwsCtArgs, IntegrationAwsCtState } from "./integrationAwsCt";
export type IntegrationAwsCt = import("./integrationAwsCt").IntegrationAwsCt;
export const IntegrationAwsCt: typeof import("./integrationAwsCt").IntegrationAwsCt = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsCt"], () => require("./integrationAwsCt"));

export { IntegrationAwsEksAuditLogArgs, IntegrationAwsEksAuditLogState } from "./integrationAwsEksAuditLog";
export type IntegrationAwsEksAuditLog = import("./integrationAwsEksAuditLog").IntegrationAwsEksAuditLog;
export const IntegrationAwsEksAuditLog: typeof import("./integrationAwsEksAuditLog").IntegrationAwsEksAuditLog = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsEksAuditLog"], () => require("./integrationAwsEksAuditLog"));

export { IntegrationAwsGovcloudCfgArgs, IntegrationAwsGovcloudCfgState } from "./integrationAwsGovcloudCfg";
export type IntegrationAwsGovcloudCfg = import("./integrationAwsGovcloudCfg").IntegrationAwsGovcloudCfg;
export const IntegrationAwsGovcloudCfg: typeof import("./integrationAwsGovcloudCfg").IntegrationAwsGovcloudCfg = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsGovcloudCfg"], () => require("./integrationAwsGovcloudCfg"));

export { IntegrationAwsGovcloudCtArgs, IntegrationAwsGovcloudCtState } from "./integrationAwsGovcloudCt";
export type IntegrationAwsGovcloudCt = import("./integrationAwsGovcloudCt").IntegrationAwsGovcloudCt;
export const IntegrationAwsGovcloudCt: typeof import("./integrationAwsGovcloudCt").IntegrationAwsGovcloudCt = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsGovcloudCt"], () => require("./integrationAwsGovcloudCt"));

export { IntegrationAwsOrgAgentlessScanningArgs, IntegrationAwsOrgAgentlessScanningState } from "./integrationAwsOrgAgentlessScanning";
export type IntegrationAwsOrgAgentlessScanning = import("./integrationAwsOrgAgentlessScanning").IntegrationAwsOrgAgentlessScanning;
export const IntegrationAwsOrgAgentlessScanning: typeof import("./integrationAwsOrgAgentlessScanning").IntegrationAwsOrgAgentlessScanning = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsOrgAgentlessScanning"], () => require("./integrationAwsOrgAgentlessScanning"));

export { IntegrationAzureAdAlArgs, IntegrationAzureAdAlState } from "./integrationAzureAdAl";
export type IntegrationAzureAdAl = import("./integrationAzureAdAl").IntegrationAzureAdAl;
export const IntegrationAzureAdAl: typeof import("./integrationAzureAdAl").IntegrationAzureAdAl = null as any;
utilities.lazyLoad(exports, ["IntegrationAzureAdAl"], () => require("./integrationAzureAdAl"));

export { IntegrationAzureAgentlessScanningArgs, IntegrationAzureAgentlessScanningState } from "./integrationAzureAgentlessScanning";
export type IntegrationAzureAgentlessScanning = import("./integrationAzureAgentlessScanning").IntegrationAzureAgentlessScanning;
export const IntegrationAzureAgentlessScanning: typeof import("./integrationAzureAgentlessScanning").IntegrationAzureAgentlessScanning = null as any;
utilities.lazyLoad(exports, ["IntegrationAzureAgentlessScanning"], () => require("./integrationAzureAgentlessScanning"));

export { IntegrationAzureAlArgs, IntegrationAzureAlState } from "./integrationAzureAl";
export type IntegrationAzureAl = import("./integrationAzureAl").IntegrationAzureAl;
export const IntegrationAzureAl: typeof import("./integrationAzureAl").IntegrationAzureAl = null as any;
utilities.lazyLoad(exports, ["IntegrationAzureAl"], () => require("./integrationAzureAl"));

export { IntegrationAzureCfgArgs, IntegrationAzureCfgState } from "./integrationAzureCfg";
export type IntegrationAzureCfg = import("./integrationAzureCfg").IntegrationAzureCfg;
export const IntegrationAzureCfg: typeof import("./integrationAzureCfg").IntegrationAzureCfg = null as any;
utilities.lazyLoad(exports, ["IntegrationAzureCfg"], () => require("./integrationAzureCfg"));

export { IntegrationDockerHubArgs, IntegrationDockerHubState } from "./integrationDockerHub";
export type IntegrationDockerHub = import("./integrationDockerHub").IntegrationDockerHub;
export const IntegrationDockerHub: typeof import("./integrationDockerHub").IntegrationDockerHub = null as any;
utilities.lazyLoad(exports, ["IntegrationDockerHub"], () => require("./integrationDockerHub"));

export { IntegrationDockerV2Args, IntegrationDockerV2State } from "./integrationDockerV2";
export type IntegrationDockerV2 = import("./integrationDockerV2").IntegrationDockerV2;
export const IntegrationDockerV2: typeof import("./integrationDockerV2").IntegrationDockerV2 = null as any;
utilities.lazyLoad(exports, ["IntegrationDockerV2"], () => require("./integrationDockerV2"));

export { IntegrationEcrArgs, IntegrationEcrState } from "./integrationEcr";
export type IntegrationEcr = import("./integrationEcr").IntegrationEcr;
export const IntegrationEcr: typeof import("./integrationEcr").IntegrationEcr = null as any;
utilities.lazyLoad(exports, ["IntegrationEcr"], () => require("./integrationEcr"));

export { IntegrationGarArgs, IntegrationGarState } from "./integrationGar";
export type IntegrationGar = import("./integrationGar").IntegrationGar;
export const IntegrationGar: typeof import("./integrationGar").IntegrationGar = null as any;
utilities.lazyLoad(exports, ["IntegrationGar"], () => require("./integrationGar"));

export { IntegrationGcpAgentlessScanningArgs, IntegrationGcpAgentlessScanningState } from "./integrationGcpAgentlessScanning";
export type IntegrationGcpAgentlessScanning = import("./integrationGcpAgentlessScanning").IntegrationGcpAgentlessScanning;
export const IntegrationGcpAgentlessScanning: typeof import("./integrationGcpAgentlessScanning").IntegrationGcpAgentlessScanning = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpAgentlessScanning"], () => require("./integrationGcpAgentlessScanning"));

export { IntegrationGcpAtArgs, IntegrationGcpAtState } from "./integrationGcpAt";
export type IntegrationGcpAt = import("./integrationGcpAt").IntegrationGcpAt;
export const IntegrationGcpAt: typeof import("./integrationGcpAt").IntegrationGcpAt = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpAt"], () => require("./integrationGcpAt"));

export { IntegrationGcpCfgArgs, IntegrationGcpCfgState } from "./integrationGcpCfg";
export type IntegrationGcpCfg = import("./integrationGcpCfg").IntegrationGcpCfg;
export const IntegrationGcpCfg: typeof import("./integrationGcpCfg").IntegrationGcpCfg = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpCfg"], () => require("./integrationGcpCfg"));

export { IntegrationGcpGkeAuditLogArgs, IntegrationGcpGkeAuditLogState } from "./integrationGcpGkeAuditLog";
export type IntegrationGcpGkeAuditLog = import("./integrationGcpGkeAuditLog").IntegrationGcpGkeAuditLog;
export const IntegrationGcpGkeAuditLog: typeof import("./integrationGcpGkeAuditLog").IntegrationGcpGkeAuditLog = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpGkeAuditLog"], () => require("./integrationGcpGkeAuditLog"));

export { IntegrationGcpPubSubAuditLogArgs, IntegrationGcpPubSubAuditLogState } from "./integrationGcpPubSubAuditLog";
export type IntegrationGcpPubSubAuditLog = import("./integrationGcpPubSubAuditLog").IntegrationGcpPubSubAuditLog;
export const IntegrationGcpPubSubAuditLog: typeof import("./integrationGcpPubSubAuditLog").IntegrationGcpPubSubAuditLog = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpPubSubAuditLog"], () => require("./integrationGcpPubSubAuditLog"));

export { IntegrationGcrArgs, IntegrationGcrState } from "./integrationGcr";
export type IntegrationGcr = import("./integrationGcr").IntegrationGcr;
export const IntegrationGcr: typeof import("./integrationGcr").IntegrationGcr = null as any;
utilities.lazyLoad(exports, ["IntegrationGcr"], () => require("./integrationGcr"));

export { IntegrationGhcrArgs, IntegrationGhcrState } from "./integrationGhcr";
export type IntegrationGhcr = import("./integrationGhcr").IntegrationGhcr;
export const IntegrationGhcr: typeof import("./integrationGhcr").IntegrationGhcr = null as any;
utilities.lazyLoad(exports, ["IntegrationGhcr"], () => require("./integrationGhcr"));

export { IntegrationInlineScannerArgs, IntegrationInlineScannerState } from "./integrationInlineScanner";
export type IntegrationInlineScanner = import("./integrationInlineScanner").IntegrationInlineScanner;
export const IntegrationInlineScanner: typeof import("./integrationInlineScanner").IntegrationInlineScanner = null as any;
utilities.lazyLoad(exports, ["IntegrationInlineScanner"], () => require("./integrationInlineScanner"));

export { IntegrationOciCfgArgs, IntegrationOciCfgState } from "./integrationOciCfg";
export type IntegrationOciCfg = import("./integrationOciCfg").IntegrationOciCfg;
export const IntegrationOciCfg: typeof import("./integrationOciCfg").IntegrationOciCfg = null as any;
utilities.lazyLoad(exports, ["IntegrationOciCfg"], () => require("./integrationOciCfg"));

export { IntegrationProxyScannerArgs, IntegrationProxyScannerState } from "./integrationProxyScanner";
export type IntegrationProxyScanner = import("./integrationProxyScanner").IntegrationProxyScanner;
export const IntegrationProxyScanner: typeof import("./integrationProxyScanner").IntegrationProxyScanner = null as any;
utilities.lazyLoad(exports, ["IntegrationProxyScanner"], () => require("./integrationProxyScanner"));

export { ManagedPoliciesArgs, ManagedPoliciesState } from "./managedPolicies";
export type ManagedPolicies = import("./managedPolicies").ManagedPolicies;
export const ManagedPolicies: typeof import("./managedPolicies").ManagedPolicies = null as any;
utilities.lazyLoad(exports, ["ManagedPolicies"], () => require("./managedPolicies"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyComplianceArgs, PolicyComplianceState } from "./policyCompliance";
export type PolicyCompliance = import("./policyCompliance").PolicyCompliance;
export const PolicyCompliance: typeof import("./policyCompliance").PolicyCompliance = null as any;
utilities.lazyLoad(exports, ["PolicyCompliance"], () => require("./policyCompliance"));

export { PolicyExceptionArgs, PolicyExceptionState } from "./policyException";
export type PolicyException = import("./policyException").PolicyException;
export const PolicyException: typeof import("./policyException").PolicyException = null as any;
utilities.lazyLoad(exports, ["PolicyException"], () => require("./policyException"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueryArgs, QueryState } from "./query";
export type Query = import("./query").Query;
export const Query: typeof import("./query").Query = null as any;
utilities.lazyLoad(exports, ["Query"], () => require("./query"));

export { ReportRuleArgs, ReportRuleState } from "./reportRule";
export type ReportRule = import("./reportRule").ReportRule;
export const ReportRule: typeof import("./reportRule").ReportRule = null as any;
utilities.lazyLoad(exports, ["ReportRule"], () => require("./reportRule"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { ResourceGroupAccountArgs, ResourceGroupAccountState } from "./resourceGroupAccount";
export type ResourceGroupAccount = import("./resourceGroupAccount").ResourceGroupAccount;
export const ResourceGroupAccount: typeof import("./resourceGroupAccount").ResourceGroupAccount = null as any;
utilities.lazyLoad(exports, ["ResourceGroupAccount"], () => require("./resourceGroupAccount"));

export { ResourceGroupAwsArgs, ResourceGroupAwsState } from "./resourceGroupAws";
export type ResourceGroupAws = import("./resourceGroupAws").ResourceGroupAws;
export const ResourceGroupAws: typeof import("./resourceGroupAws").ResourceGroupAws = null as any;
utilities.lazyLoad(exports, ["ResourceGroupAws"], () => require("./resourceGroupAws"));

export { ResourceGroupAzureArgs, ResourceGroupAzureState } from "./resourceGroupAzure";
export type ResourceGroupAzure = import("./resourceGroupAzure").ResourceGroupAzure;
export const ResourceGroupAzure: typeof import("./resourceGroupAzure").ResourceGroupAzure = null as any;
utilities.lazyLoad(exports, ["ResourceGroupAzure"], () => require("./resourceGroupAzure"));

export { ResourceGroupContainerArgs, ResourceGroupContainerState } from "./resourceGroupContainer";
export type ResourceGroupContainer = import("./resourceGroupContainer").ResourceGroupContainer;
export const ResourceGroupContainer: typeof import("./resourceGroupContainer").ResourceGroupContainer = null as any;
utilities.lazyLoad(exports, ["ResourceGroupContainer"], () => require("./resourceGroupContainer"));

export { ResourceGroupGcpArgs, ResourceGroupGcpState } from "./resourceGroupGcp";
export type ResourceGroupGcp = import("./resourceGroupGcp").ResourceGroupGcp;
export const ResourceGroupGcp: typeof import("./resourceGroupGcp").ResourceGroupGcp = null as any;
utilities.lazyLoad(exports, ["ResourceGroupGcp"], () => require("./resourceGroupGcp"));

export { ResourceGroupMachineArgs, ResourceGroupMachineState } from "./resourceGroupMachine";
export type ResourceGroupMachine = import("./resourceGroupMachine").ResourceGroupMachine;
export const ResourceGroupMachine: typeof import("./resourceGroupMachine").ResourceGroupMachine = null as any;
utilities.lazyLoad(exports, ["ResourceGroupMachine"], () => require("./resourceGroupMachine"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));

export { VulnerabilityExceptionContainerArgs, VulnerabilityExceptionContainerState } from "./vulnerabilityExceptionContainer";
export type VulnerabilityExceptionContainer = import("./vulnerabilityExceptionContainer").VulnerabilityExceptionContainer;
export const VulnerabilityExceptionContainer: typeof import("./vulnerabilityExceptionContainer").VulnerabilityExceptionContainer = null as any;
utilities.lazyLoad(exports, ["VulnerabilityExceptionContainer"], () => require("./vulnerabilityExceptionContainer"));

export { VulnerabilityExceptionHostArgs, VulnerabilityExceptionHostState } from "./vulnerabilityExceptionHost";
export type VulnerabilityExceptionHost = import("./vulnerabilityExceptionHost").VulnerabilityExceptionHost;
export const VulnerabilityExceptionHost: typeof import("./vulnerabilityExceptionHost").VulnerabilityExceptionHost = null as any;
utilities.lazyLoad(exports, ["VulnerabilityExceptionHost"], () => require("./vulnerabilityExceptionHost"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "lacework:index/agentAccessToken:AgentAccessToken":
                return new AgentAccessToken(name, <any>undefined, { urn })
            case "lacework:index/alertChannelAwsCloudwatch:AlertChannelAwsCloudwatch":
                return new AlertChannelAwsCloudwatch(name, <any>undefined, { urn })
            case "lacework:index/alertChannelAwsS3:AlertChannelAwsS3":
                return new AlertChannelAwsS3(name, <any>undefined, { urn })
            case "lacework:index/alertChannelCiscoWebex:AlertChannelCiscoWebex":
                return new AlertChannelCiscoWebex(name, <any>undefined, { urn })
            case "lacework:index/alertChannelDatadog:AlertChannelDatadog":
                return new AlertChannelDatadog(name, <any>undefined, { urn })
            case "lacework:index/alertChannelEmail:AlertChannelEmail":
                return new AlertChannelEmail(name, <any>undefined, { urn })
            case "lacework:index/alertChannelGcpPubSub:AlertChannelGcpPubSub":
                return new AlertChannelGcpPubSub(name, <any>undefined, { urn })
            case "lacework:index/alertChannelJiraCloud:AlertChannelJiraCloud":
                return new AlertChannelJiraCloud(name, <any>undefined, { urn })
            case "lacework:index/alertChannelJiraServer:AlertChannelJiraServer":
                return new AlertChannelJiraServer(name, <any>undefined, { urn })
            case "lacework:index/alertChannelMicrosoftTeams:AlertChannelMicrosoftTeams":
                return new AlertChannelMicrosoftTeams(name, <any>undefined, { urn })
            case "lacework:index/alertChannelNewrelic:AlertChannelNewrelic":
                return new AlertChannelNewrelic(name, <any>undefined, { urn })
            case "lacework:index/alertChannelPagerduty:AlertChannelPagerduty":
                return new AlertChannelPagerduty(name, <any>undefined, { urn })
            case "lacework:index/alertChannelQradar:AlertChannelQradar":
                return new AlertChannelQradar(name, <any>undefined, { urn })
            case "lacework:index/alertChannelServiceNow:AlertChannelServiceNow":
                return new AlertChannelServiceNow(name, <any>undefined, { urn })
            case "lacework:index/alertChannelSlack:AlertChannelSlack":
                return new AlertChannelSlack(name, <any>undefined, { urn })
            case "lacework:index/alertChannelSplunk:AlertChannelSplunk":
                return new AlertChannelSplunk(name, <any>undefined, { urn })
            case "lacework:index/alertChannelVictorops:AlertChannelVictorops":
                return new AlertChannelVictorops(name, <any>undefined, { urn })
            case "lacework:index/alertChannelWebhook:AlertChannelWebhook":
                return new AlertChannelWebhook(name, <any>undefined, { urn })
            case "lacework:index/alertProfile:AlertProfile":
                return new AlertProfile(name, <any>undefined, { urn })
            case "lacework:index/alertRule:AlertRule":
                return new AlertRule(name, <any>undefined, { urn })
            case "lacework:index/dataExportRule:DataExportRule":
                return new DataExportRule(name, <any>undefined, { urn })
            case "lacework:index/externalId:ExternalId":
                return new ExternalId(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsAgentlessScanning:IntegrationAwsAgentlessScanning":
                return new IntegrationAwsAgentlessScanning(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsCfg:IntegrationAwsCfg":
                return new IntegrationAwsCfg(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsCt:IntegrationAwsCt":
                return new IntegrationAwsCt(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsEksAuditLog:IntegrationAwsEksAuditLog":
                return new IntegrationAwsEksAuditLog(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsGovcloudCfg:IntegrationAwsGovcloudCfg":
                return new IntegrationAwsGovcloudCfg(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsGovcloudCt:IntegrationAwsGovcloudCt":
                return new IntegrationAwsGovcloudCt(name, <any>undefined, { urn })
            case "lacework:index/integrationAwsOrgAgentlessScanning:IntegrationAwsOrgAgentlessScanning":
                return new IntegrationAwsOrgAgentlessScanning(name, <any>undefined, { urn })
            case "lacework:index/integrationAzureAdAl:IntegrationAzureAdAl":
                return new IntegrationAzureAdAl(name, <any>undefined, { urn })
            case "lacework:index/integrationAzureAgentlessScanning:IntegrationAzureAgentlessScanning":
                return new IntegrationAzureAgentlessScanning(name, <any>undefined, { urn })
            case "lacework:index/integrationAzureAl:IntegrationAzureAl":
                return new IntegrationAzureAl(name, <any>undefined, { urn })
            case "lacework:index/integrationAzureCfg:IntegrationAzureCfg":
                return new IntegrationAzureCfg(name, <any>undefined, { urn })
            case "lacework:index/integrationDockerHub:IntegrationDockerHub":
                return new IntegrationDockerHub(name, <any>undefined, { urn })
            case "lacework:index/integrationDockerV2:IntegrationDockerV2":
                return new IntegrationDockerV2(name, <any>undefined, { urn })
            case "lacework:index/integrationEcr:IntegrationEcr":
                return new IntegrationEcr(name, <any>undefined, { urn })
            case "lacework:index/integrationGar:IntegrationGar":
                return new IntegrationGar(name, <any>undefined, { urn })
            case "lacework:index/integrationGcpAgentlessScanning:IntegrationGcpAgentlessScanning":
                return new IntegrationGcpAgentlessScanning(name, <any>undefined, { urn })
            case "lacework:index/integrationGcpAt:IntegrationGcpAt":
                return new IntegrationGcpAt(name, <any>undefined, { urn })
            case "lacework:index/integrationGcpCfg:IntegrationGcpCfg":
                return new IntegrationGcpCfg(name, <any>undefined, { urn })
            case "lacework:index/integrationGcpGkeAuditLog:IntegrationGcpGkeAuditLog":
                return new IntegrationGcpGkeAuditLog(name, <any>undefined, { urn })
            case "lacework:index/integrationGcpPubSubAuditLog:IntegrationGcpPubSubAuditLog":
                return new IntegrationGcpPubSubAuditLog(name, <any>undefined, { urn })
            case "lacework:index/integrationGcr:IntegrationGcr":
                return new IntegrationGcr(name, <any>undefined, { urn })
            case "lacework:index/integrationGhcr:IntegrationGhcr":
                return new IntegrationGhcr(name, <any>undefined, { urn })
            case "lacework:index/integrationInlineScanner:IntegrationInlineScanner":
                return new IntegrationInlineScanner(name, <any>undefined, { urn })
            case "lacework:index/integrationOciCfg:IntegrationOciCfg":
                return new IntegrationOciCfg(name, <any>undefined, { urn })
            case "lacework:index/integrationProxyScanner:IntegrationProxyScanner":
                return new IntegrationProxyScanner(name, <any>undefined, { urn })
            case "lacework:index/managedPolicies:ManagedPolicies":
                return new ManagedPolicies(name, <any>undefined, { urn })
            case "lacework:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "lacework:index/policyCompliance:PolicyCompliance":
                return new PolicyCompliance(name, <any>undefined, { urn })
            case "lacework:index/policyException:PolicyException":
                return new PolicyException(name, <any>undefined, { urn })
            case "lacework:index/query:Query":
                return new Query(name, <any>undefined, { urn })
            case "lacework:index/reportRule:ReportRule":
                return new ReportRule(name, <any>undefined, { urn })
            case "lacework:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "lacework:index/resourceGroupAccount:ResourceGroupAccount":
                return new ResourceGroupAccount(name, <any>undefined, { urn })
            case "lacework:index/resourceGroupAws:ResourceGroupAws":
                return new ResourceGroupAws(name, <any>undefined, { urn })
            case "lacework:index/resourceGroupAzure:ResourceGroupAzure":
                return new ResourceGroupAzure(name, <any>undefined, { urn })
            case "lacework:index/resourceGroupContainer:ResourceGroupContainer":
                return new ResourceGroupContainer(name, <any>undefined, { urn })
            case "lacework:index/resourceGroupGcp:ResourceGroupGcp":
                return new ResourceGroupGcp(name, <any>undefined, { urn })
            case "lacework:index/resourceGroupMachine:ResourceGroupMachine":
                return new ResourceGroupMachine(name, <any>undefined, { urn })
            case "lacework:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            case "lacework:index/vulnerabilityExceptionContainer:VulnerabilityExceptionContainer":
                return new VulnerabilityExceptionContainer(name, <any>undefined, { urn })
            case "lacework:index/vulnerabilityExceptionHost:VulnerabilityExceptionHost":
                return new VulnerabilityExceptionHost(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("lacework", "index/agentAccessToken", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelAwsCloudwatch", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelAwsS3", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelCiscoWebex", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelDatadog", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelEmail", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelGcpPubSub", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelJiraCloud", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelJiraServer", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelMicrosoftTeams", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelNewrelic", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelPagerduty", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelQradar", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelServiceNow", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelSlack", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelSplunk", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelVictorops", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertChannelWebhook", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertProfile", _module)
pulumi.runtime.registerResourceModule("lacework", "index/alertRule", _module)
pulumi.runtime.registerResourceModule("lacework", "index/dataExportRule", _module)
pulumi.runtime.registerResourceModule("lacework", "index/externalId", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsAgentlessScanning", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsCfg", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsCt", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsEksAuditLog", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsGovcloudCfg", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsGovcloudCt", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAwsOrgAgentlessScanning", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAzureAdAl", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAzureAgentlessScanning", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAzureAl", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationAzureCfg", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationDockerHub", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationDockerV2", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationEcr", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGar", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGcpAgentlessScanning", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGcpAt", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGcpCfg", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGcpGkeAuditLog", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGcpPubSubAuditLog", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGcr", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationGhcr", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationInlineScanner", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationOciCfg", _module)
pulumi.runtime.registerResourceModule("lacework", "index/integrationProxyScanner", _module)
pulumi.runtime.registerResourceModule("lacework", "index/managedPolicies", _module)
pulumi.runtime.registerResourceModule("lacework", "index/policy", _module)
pulumi.runtime.registerResourceModule("lacework", "index/policyCompliance", _module)
pulumi.runtime.registerResourceModule("lacework", "index/policyException", _module)
pulumi.runtime.registerResourceModule("lacework", "index/query", _module)
pulumi.runtime.registerResourceModule("lacework", "index/reportRule", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroupAccount", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroupAws", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroupAzure", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroupContainer", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroupGcp", _module)
pulumi.runtime.registerResourceModule("lacework", "index/resourceGroupMachine", _module)
pulumi.runtime.registerResourceModule("lacework", "index/teamMember", _module)
pulumi.runtime.registerResourceModule("lacework", "index/vulnerabilityExceptionContainer", _module)
pulumi.runtime.registerResourceModule("lacework", "index/vulnerabilityExceptionHost", _module)
pulumi.runtime.registerResourcePackage("lacework", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:lacework") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
