// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TeamMember extends pulumi.CustomResource {
    /**
     * Get an existing TeamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamMemberState, opts?: pulumi.CustomResourceOptions): TeamMember {
        return new TeamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/teamMember:TeamMember';

    /**
     * Returns true if the given object is an instance of TeamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMember.__pulumiType;
    }

    /**
     * Set to true to make the team member an administrator, otherwise the member will be a regular user
     */
    public readonly administrator!: pulumi.Output<boolean | undefined>;
    /**
     * The company name
     */
    public readonly company!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The email for the team member which will also be used as the username
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The state of the team member, whether they are enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The first name of the team member
     */
    public readonly firstName!: pulumi.Output<string>;
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * The last name of the team member
     */
    public readonly lastName!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<outputs.TeamMemberOrganization | undefined>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a TeamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamMemberArgs | TeamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamMemberState | undefined;
            resourceInputs["administrator"] = state ? state.administrator : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as TeamMemberArgs | undefined;
            if ((!args || args.company === undefined) && !opts.urn) {
                throw new Error("Missing required property 'company'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.firstName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            resourceInputs["administrator"] = args ? args.administrator : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TeamMember resources.
 */
export interface TeamMemberState {
    /**
     * Set to true to make the team member an administrator, otherwise the member will be a regular user
     */
    administrator?: pulumi.Input<boolean>;
    /**
     * The company name
     */
    company?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    /**
     * The email for the team member which will also be used as the username
     */
    email?: pulumi.Input<string>;
    /**
     * The state of the team member, whether they are enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The first name of the team member
     */
    firstName?: pulumi.Input<string>;
    guid?: pulumi.Input<string>;
    /**
     * The last name of the team member
     */
    lastName?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.TeamMemberOrganization>;
    updatedBy?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamMember resource.
 */
export interface TeamMemberArgs {
    /**
     * Set to true to make the team member an administrator, otherwise the member will be a regular user
     */
    administrator?: pulumi.Input<boolean>;
    /**
     * The company name
     */
    company: pulumi.Input<string>;
    /**
     * The email for the team member which will also be used as the username
     */
    email: pulumi.Input<string>;
    /**
     * The state of the team member, whether they are enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The first name of the team member
     */
    firstName: pulumi.Input<string>;
    /**
     * The last name of the team member
     */
    lastName: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.TeamMemberOrganization>;
}
