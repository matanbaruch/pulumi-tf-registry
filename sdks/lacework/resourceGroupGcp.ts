// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceGroupGcp extends pulumi.CustomResource {
    /**
     * Get an existing ResourceGroupGcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceGroupGcpState, opts?: pulumi.CustomResourceOptions): ResourceGroupGcp {
        return new ResourceGroupGcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/resourceGroupGcp:ResourceGroupGcp';

    /**
     * Returns true if the given object is an instance of ResourceGroupGcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceGroupGcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroupGcp.__pulumiType;
    }

    /**
     * The description of the resource group
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The state of the resource group
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the resource group is a default resource group.
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * The lacework account id
     */
    public /*out*/ readonly laceworkAccountId!: pulumi.Output<string>;
    /**
     * The time in millis when the resource was last updated
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * The resource group name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The GCP organization id
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The list of GCP project id's to include in the resource group
     */
    public readonly projects!: pulumi.Output<string[]>;
    /**
     * The type of the resource group
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The username of the lacework user who performed the last update
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;

    /**
     * Create a ResourceGroupGcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceGroupGcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceGroupGcpArgs | ResourceGroupGcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceGroupGcpState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["laceworkAccountId"] = state ? state.laceworkAccountId : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as ResourceGroupGcpArgs | undefined;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["laceworkAccountId"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroupGcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceGroupGcp resources.
 */
export interface ResourceGroupGcpState {
    /**
     * The description of the resource group
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the resource group
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether the resource group is a default resource group.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The lacework account id
     */
    laceworkAccountId?: pulumi.Input<string>;
    /**
     * The time in millis when the resource was last updated
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The resource group name
     */
    name?: pulumi.Input<string>;
    /**
     * The GCP organization id
     */
    organization?: pulumi.Input<string>;
    /**
     * The list of GCP project id's to include in the resource group
     */
    projects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the resource group
     */
    type?: pulumi.Input<string>;
    /**
     * The username of the lacework user who performed the last update
     */
    updatedBy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceGroupGcp resource.
 */
export interface ResourceGroupGcpArgs {
    /**
     * The description of the resource group
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the resource group
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The resource group name
     */
    name?: pulumi.Input<string>;
    /**
     * The GCP organization id
     */
    organization: pulumi.Input<string>;
    /**
     * The list of GCP project id's to include in the resource group
     */
    projects: pulumi.Input<pulumi.Input<string>[]>;
}
