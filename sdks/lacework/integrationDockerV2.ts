// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationDockerV2 extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationDockerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationDockerV2State, opts?: pulumi.CustomResourceOptions): IntegrationDockerV2 {
        return new IntegrationDockerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/integrationDockerV2:IntegrationDockerV2';

    /**
     * Returns true if the given object is an instance of IntegrationDockerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationDockerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationDockerV2.__pulumiType;
    }

    public /*out*/ readonly createdOrUpdatedBy!: pulumi.Output<string>;
    public /*out*/ readonly createdOrUpdatedTime!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly intgGuid!: pulumi.Output<string>;
    /**
     * A list of key/value labels to limit the assessment of images
     */
    public readonly limitByLabels!: pulumi.Output<outputs.IntegrationDockerV2LimitByLabel[] | undefined>;
    /**
     * A list of image tags to limit the assessment of images with matching tags
     */
    public readonly limitByTags!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable program language scanning
     */
    public readonly nonOsPackageSupport!: pulumi.Output<boolean | undefined>;
    /**
     * Subscribe to registry notifications
     */
    public readonly notifications!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly orgLevel!: pulumi.Output<boolean>;
    public readonly password!: pulumi.Output<string>;
    public readonly registryDomain!: pulumi.Output<string>;
    public readonly ssl!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly typeName!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a IntegrationDockerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationDockerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationDockerV2Args | IntegrationDockerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationDockerV2State | undefined;
            resourceInputs["createdOrUpdatedBy"] = state ? state.createdOrUpdatedBy : undefined;
            resourceInputs["createdOrUpdatedTime"] = state ? state.createdOrUpdatedTime : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["intgGuid"] = state ? state.intgGuid : undefined;
            resourceInputs["limitByLabels"] = state ? state.limitByLabels : undefined;
            resourceInputs["limitByTags"] = state ? state.limitByTags : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonOsPackageSupport"] = state ? state.nonOsPackageSupport : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["orgLevel"] = state ? state.orgLevel : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["registryDomain"] = state ? state.registryDomain : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as IntegrationDockerV2Args | undefined;
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.registryDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryDomain'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["limitByLabels"] = args ? args.limitByLabels : undefined;
            resourceInputs["limitByTags"] = args ? args.limitByTags : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonOsPackageSupport"] = args ? args.nonOsPackageSupport : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["registryDomain"] = args ? args.registryDomain : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["createdOrUpdatedBy"] = undefined /*out*/;
            resourceInputs["createdOrUpdatedTime"] = undefined /*out*/;
            resourceInputs["intgGuid"] = undefined /*out*/;
            resourceInputs["orgLevel"] = undefined /*out*/;
            resourceInputs["typeName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationDockerV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationDockerV2 resources.
 */
export interface IntegrationDockerV2State {
    createdOrUpdatedBy?: pulumi.Input<string>;
    createdOrUpdatedTime?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    intgGuid?: pulumi.Input<string>;
    /**
     * A list of key/value labels to limit the assessment of images
     */
    limitByLabels?: pulumi.Input<pulumi.Input<inputs.IntegrationDockerV2LimitByLabel>[]>;
    /**
     * A list of image tags to limit the assessment of images with matching tags
     */
    limitByTags?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Enable program language scanning
     */
    nonOsPackageSupport?: pulumi.Input<boolean>;
    /**
     * Subscribe to registry notifications
     */
    notifications?: pulumi.Input<boolean>;
    orgLevel?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    registryDomain?: pulumi.Input<string>;
    ssl?: pulumi.Input<boolean>;
    typeName?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationDockerV2 resource.
 */
export interface IntegrationDockerV2Args {
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of key/value labels to limit the assessment of images
     */
    limitByLabels?: pulumi.Input<pulumi.Input<inputs.IntegrationDockerV2LimitByLabel>[]>;
    /**
     * A list of image tags to limit the assessment of images with matching tags
     */
    limitByTags?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Enable program language scanning
     */
    nonOsPackageSupport?: pulumi.Input<boolean>;
    /**
     * Subscribe to registry notifications
     */
    notifications?: pulumi.Input<boolean>;
    password: pulumi.Input<string>;
    registryDomain: pulumi.Input<string>;
    ssl?: pulumi.Input<boolean>;
    username: pulumi.Input<string>;
}
