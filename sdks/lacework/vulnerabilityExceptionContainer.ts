// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VulnerabilityExceptionContainer extends pulumi.CustomResource {
    /**
     * Get an existing VulnerabilityExceptionContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VulnerabilityExceptionContainerState, opts?: pulumi.CustomResourceOptions): VulnerabilityExceptionContainer {
        return new VulnerabilityExceptionContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/vulnerabilityExceptionContainer:VulnerabilityExceptionContainer';

    /**
     * Returns true if the given object is an instance of VulnerabilityExceptionContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VulnerabilityExceptionContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VulnerabilityExceptionContainer.__pulumiType;
    }

    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The description of the vulnerability exception
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The state of the vulnerability exception
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The expiration date of the vulnerability exception
     */
    public readonly expiry!: pulumi.Output<string | undefined>;
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * The name of the vulnerability exception
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of severities for the vulnerability exception. Valid severities are: False Positive, Accepted Risk, Compensating
     * Controls, Fix Pending, Other
     */
    public readonly reason!: pulumi.Output<string | undefined>;
    /**
     * The resource scope
     */
    public readonly resourceScope!: pulumi.Output<outputs.VulnerabilityExceptionContainerResourceScope | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;
    /**
     * The vulnerability criteria
     */
    public readonly vulnerabilityCriteria!: pulumi.Output<outputs.VulnerabilityExceptionContainerVulnerabilityCriteria>;

    /**
     * Create a VulnerabilityExceptionContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VulnerabilityExceptionContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VulnerabilityExceptionContainerArgs | VulnerabilityExceptionContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VulnerabilityExceptionContainerState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiry"] = state ? state.expiry : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["resourceScope"] = state ? state.resourceScope : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
            resourceInputs["vulnerabilityCriteria"] = state ? state.vulnerabilityCriteria : undefined;
        } else {
            const args = argsOrState as VulnerabilityExceptionContainerArgs | undefined;
            if ((!args || args.vulnerabilityCriteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vulnerabilityCriteria'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expiry"] = args ? args.expiry : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["resourceScope"] = args ? args.resourceScope : undefined;
            resourceInputs["vulnerabilityCriteria"] = args ? args.vulnerabilityCriteria : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VulnerabilityExceptionContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VulnerabilityExceptionContainer resources.
 */
export interface VulnerabilityExceptionContainerState {
    createdBy?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    /**
     * The description of the vulnerability exception
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the vulnerability exception
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expiration date of the vulnerability exception
     */
    expiry?: pulumi.Input<string>;
    guid?: pulumi.Input<string>;
    /**
     * The name of the vulnerability exception
     */
    name?: pulumi.Input<string>;
    /**
     * List of severities for the vulnerability exception. Valid severities are: False Positive, Accepted Risk, Compensating
     * Controls, Fix Pending, Other
     */
    reason?: pulumi.Input<string>;
    /**
     * The resource scope
     */
    resourceScope?: pulumi.Input<inputs.VulnerabilityExceptionContainerResourceScope>;
    type?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<string>;
    /**
     * The vulnerability criteria
     */
    vulnerabilityCriteria?: pulumi.Input<inputs.VulnerabilityExceptionContainerVulnerabilityCriteria>;
}

/**
 * The set of arguments for constructing a VulnerabilityExceptionContainer resource.
 */
export interface VulnerabilityExceptionContainerArgs {
    /**
     * The description of the vulnerability exception
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the vulnerability exception
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expiration date of the vulnerability exception
     */
    expiry?: pulumi.Input<string>;
    /**
     * The name of the vulnerability exception
     */
    name?: pulumi.Input<string>;
    /**
     * List of severities for the vulnerability exception. Valid severities are: False Positive, Accepted Risk, Compensating
     * Controls, Fix Pending, Other
     */
    reason?: pulumi.Input<string>;
    /**
     * The resource scope
     */
    resourceScope?: pulumi.Input<inputs.VulnerabilityExceptionContainerResourceScope>;
    /**
     * The vulnerability criteria
     */
    vulnerabilityCriteria: pulumi.Input<inputs.VulnerabilityExceptionContainerVulnerabilityCriteria>;
}
