// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Alerting
     */
    public readonly alerting!: pulumi.Output<outputs.PolicyAlerting | undefined>;
    /**
     * All policy tags, server generated and user specified tags
     */
    public /*out*/ readonly computedTags!: pulumi.Output<string>;
    /**
     * The description of the query
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The state of the policy
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The evaluation frequency must be either 'Hourly' or 'Daily'
     */
    public readonly evaluation!: pulumi.Output<string | undefined>;
    /**
     * Set the number of records returned by the policy. Maximum value is 5000
     */
    public readonly limit!: pulumi.Output<number | undefined>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The string appended to the end of the policy id
     */
    public readonly policyIdSuffix!: pulumi.Output<string | undefined>;
    /**
     * The id of the query
     */
    public readonly queryId!: pulumi.Output<string>;
    /**
     * The remediation message to display
     */
    public readonly remediation!: pulumi.Output<string>;
    /**
     * The severity for the policy. Valid severities are: Critical, High, Medium, Low, Info
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * A list of user specified policy tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The title of the policy
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The policy type must be 'Violation'
     */
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["alerting"] = state ? state.alerting : undefined;
            resourceInputs["computedTags"] = state ? state.computedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["evaluation"] = state ? state.evaluation : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["policyIdSuffix"] = state ? state.policyIdSuffix : undefined;
            resourceInputs["queryId"] = state ? state.queryId : undefined;
            resourceInputs["remediation"] = state ? state.remediation : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.queryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryId'");
            }
            if ((!args || args.remediation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remediation'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["alerting"] = args ? args.alerting : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["evaluation"] = args ? args.evaluation : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["policyIdSuffix"] = args ? args.policyIdSuffix : undefined;
            resourceInputs["queryId"] = args ? args.queryId : undefined;
            resourceInputs["remediation"] = args ? args.remediation : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["computedTags"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Alerting
     */
    alerting?: pulumi.Input<inputs.PolicyAlerting>;
    /**
     * All policy tags, server generated and user specified tags
     */
    computedTags?: pulumi.Input<string>;
    /**
     * The description of the query
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the policy
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The evaluation frequency must be either 'Hourly' or 'Daily'
     */
    evaluation?: pulumi.Input<string>;
    /**
     * Set the number of records returned by the policy. Maximum value is 5000
     */
    limit?: pulumi.Input<number>;
    owner?: pulumi.Input<string>;
    /**
     * The string appended to the end of the policy id
     */
    policyIdSuffix?: pulumi.Input<string>;
    /**
     * The id of the query
     */
    queryId?: pulumi.Input<string>;
    /**
     * The remediation message to display
     */
    remediation?: pulumi.Input<string>;
    /**
     * The severity for the policy. Valid severities are: Critical, High, Medium, Low, Info
     */
    severity?: pulumi.Input<string>;
    /**
     * A list of user specified policy tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the policy
     */
    title?: pulumi.Input<string>;
    /**
     * The policy type must be 'Violation'
     */
    type?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Alerting
     */
    alerting?: pulumi.Input<inputs.PolicyAlerting>;
    /**
     * The description of the query
     */
    description: pulumi.Input<string>;
    /**
     * The state of the policy
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The evaluation frequency must be either 'Hourly' or 'Daily'
     */
    evaluation?: pulumi.Input<string>;
    /**
     * Set the number of records returned by the policy. Maximum value is 5000
     */
    limit?: pulumi.Input<number>;
    /**
     * The string appended to the end of the policy id
     */
    policyIdSuffix?: pulumi.Input<string>;
    /**
     * The id of the query
     */
    queryId: pulumi.Input<string>;
    /**
     * The remediation message to display
     */
    remediation: pulumi.Input<string>;
    /**
     * The severity for the policy. Valid severities are: Critical, High, Medium, Low, Info
     */
    severity: pulumi.Input<string>;
    /**
     * A list of user specified policy tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the policy
     */
    title: pulumi.Input<string>;
    /**
     * The policy type must be 'Violation'
     */
    type: pulumi.Input<string>;
}
