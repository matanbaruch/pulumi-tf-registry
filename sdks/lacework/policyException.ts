// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyException extends pulumi.CustomResource {
    /**
     * Get an existing PolicyException resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyExceptionState, opts?: pulumi.CustomResourceOptions): PolicyException {
        return new PolicyException(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lacework:index/policyException:PolicyException';

    /**
     * Returns true if the given object is an instance of PolicyException.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyException {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyException.__pulumiType;
    }

    /**
     * The list of constraints
     */
    public readonly constraints!: pulumi.Output<outputs.PolicyExceptionConstraint[]>;
    /**
     * The description of the policy exception
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The id of the policy the exception is associated
     */
    public readonly policyId!: pulumi.Output<string>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a PolicyException resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyExceptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyExceptionArgs | PolicyExceptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyExceptionState | undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as PolicyExceptionArgs | undefined;
            if ((!args || args.constraints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'constraints'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyException.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyException resources.
 */
export interface PolicyExceptionState {
    /**
     * The list of constraints
     */
    constraints?: pulumi.Input<pulumi.Input<inputs.PolicyExceptionConstraint>[]>;
    /**
     * The description of the policy exception
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the policy the exception is associated
     */
    policyId?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyException resource.
 */
export interface PolicyExceptionArgs {
    /**
     * The list of constraints
     */
    constraints: pulumi.Input<pulumi.Input<inputs.PolicyExceptionConstraint>[]>;
    /**
     * The description of the policy exception
     */
    description: pulumi.Input<string>;
    /**
     * The id of the policy the exception is associated
     */
    policyId: pulumi.Input<string>;
}
