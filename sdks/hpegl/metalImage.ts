// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MetalImage extends pulumi.CustomResource {
    /**
     * Get an existing MetalImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetalImageState, opts?: pulumi.CustomResourceOptions): MetalImage {
        return new MetalImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/metalImage:MetalImage';

    /**
     * Returns true if the given object is an instance of MetalImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetalImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetalImage.__pulumiType;
    }

    /**
     * Path to the YAML file containing the service image definition.
     */
    public readonly osServiceImageFile!: pulumi.Output<string>;

    /**
     * Create a MetalImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetalImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetalImageArgs | MetalImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetalImageState | undefined;
            resourceInputs["osServiceImageFile"] = state ? state.osServiceImageFile : undefined;
        } else {
            const args = argsOrState as MetalImageArgs | undefined;
            if ((!args || args.osServiceImageFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osServiceImageFile'");
            }
            resourceInputs["osServiceImageFile"] = args ? args.osServiceImageFile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetalImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetalImage resources.
 */
export interface MetalImageState {
    /**
     * Path to the YAML file containing the service image definition.
     */
    osServiceImageFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetalImage resource.
 */
export interface MetalImageArgs {
    /**
     * Path to the YAML file containing the service image definition.
     */
    osServiceImageFile: pulumi.Input<string>;
}
