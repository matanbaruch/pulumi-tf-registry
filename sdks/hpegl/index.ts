// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CaasClusterArgs, CaasClusterState } from "./caasCluster";
export type CaasCluster = import("./caasCluster").CaasCluster;
export const CaasCluster: typeof import("./caasCluster").CaasCluster = null as any;
utilities.lazyLoad(exports, ["CaasCluster"], () => require("./caasCluster"));

export { CaasClusterBlueprintArgs, CaasClusterBlueprintState } from "./caasClusterBlueprint";
export type CaasClusterBlueprint = import("./caasClusterBlueprint").CaasClusterBlueprint;
export const CaasClusterBlueprint: typeof import("./caasClusterBlueprint").CaasClusterBlueprint = null as any;
utilities.lazyLoad(exports, ["CaasClusterBlueprint"], () => require("./caasClusterBlueprint"));

export { CaasMachineBlueprintArgs, CaasMachineBlueprintState } from "./caasMachineBlueprint";
export type CaasMachineBlueprint = import("./caasMachineBlueprint").CaasMachineBlueprint;
export const CaasMachineBlueprint: typeof import("./caasMachineBlueprint").CaasMachineBlueprint = null as any;
utilities.lazyLoad(exports, ["CaasMachineBlueprint"], () => require("./caasMachineBlueprint"));

export { GetCaasClusterArgs, GetCaasClusterResult, GetCaasClusterOutputArgs } from "./getCaasCluster";
export const getCaasCluster: typeof import("./getCaasCluster").getCaasCluster = null as any;
export const getCaasClusterOutput: typeof import("./getCaasCluster").getCaasClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCaasCluster","getCaasClusterOutput"], () => require("./getCaasCluster"));

export { GetCaasClusterBlueprintArgs, GetCaasClusterBlueprintResult, GetCaasClusterBlueprintOutputArgs } from "./getCaasClusterBlueprint";
export const getCaasClusterBlueprint: typeof import("./getCaasClusterBlueprint").getCaasClusterBlueprint = null as any;
export const getCaasClusterBlueprintOutput: typeof import("./getCaasClusterBlueprint").getCaasClusterBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getCaasClusterBlueprint","getCaasClusterBlueprintOutput"], () => require("./getCaasClusterBlueprint"));

export { GetCaasClusterProviderArgs, GetCaasClusterProviderResult, GetCaasClusterProviderOutputArgs } from "./getCaasClusterProvider";
export const getCaasClusterProvider: typeof import("./getCaasClusterProvider").getCaasClusterProvider = null as any;
export const getCaasClusterProviderOutput: typeof import("./getCaasClusterProvider").getCaasClusterProviderOutput = null as any;
utilities.lazyLoad(exports, ["getCaasClusterProvider","getCaasClusterProviderOutput"], () => require("./getCaasClusterProvider"));

export { GetCaasMachineBlueprintArgs, GetCaasMachineBlueprintResult, GetCaasMachineBlueprintOutputArgs } from "./getCaasMachineBlueprint";
export const getCaasMachineBlueprint: typeof import("./getCaasMachineBlueprint").getCaasMachineBlueprint = null as any;
export const getCaasMachineBlueprintOutput: typeof import("./getCaasMachineBlueprint").getCaasMachineBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getCaasMachineBlueprint","getCaasMachineBlueprintOutput"], () => require("./getCaasMachineBlueprint"));

export { GetCaasSiteArgs, GetCaasSiteResult, GetCaasSiteOutputArgs } from "./getCaasSite";
export const getCaasSite: typeof import("./getCaasSite").getCaasSite = null as any;
export const getCaasSiteOutput: typeof import("./getCaasSite").getCaasSiteOutput = null as any;
utilities.lazyLoad(exports, ["getCaasSite","getCaasSiteOutput"], () => require("./getCaasSite"));

export { GetMetalAvailableImagesArgs, GetMetalAvailableImagesResult, GetMetalAvailableImagesOutputArgs } from "./getMetalAvailableImages";
export const getMetalAvailableImages: typeof import("./getMetalAvailableImages").getMetalAvailableImages = null as any;
export const getMetalAvailableImagesOutput: typeof import("./getMetalAvailableImages").getMetalAvailableImagesOutput = null as any;
utilities.lazyLoad(exports, ["getMetalAvailableImages","getMetalAvailableImagesOutput"], () => require("./getMetalAvailableImages"));

export { GetMetalAvailableResourcesArgs, GetMetalAvailableResourcesResult, GetMetalAvailableResourcesOutputArgs } from "./getMetalAvailableResources";
export const getMetalAvailableResources: typeof import("./getMetalAvailableResources").getMetalAvailableResources = null as any;
export const getMetalAvailableResourcesOutput: typeof import("./getMetalAvailableResources").getMetalAvailableResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getMetalAvailableResources","getMetalAvailableResourcesOutput"], () => require("./getMetalAvailableResources"));

export { GetVmaasCloudArgs, GetVmaasCloudResult, GetVmaasCloudOutputArgs } from "./getVmaasCloud";
export const getVmaasCloud: typeof import("./getVmaasCloud").getVmaasCloud = null as any;
export const getVmaasCloudOutput: typeof import("./getVmaasCloud").getVmaasCloudOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasCloud","getVmaasCloudOutput"], () => require("./getVmaasCloud"));

export { GetVmaasCloudFolderArgs, GetVmaasCloudFolderResult, GetVmaasCloudFolderOutputArgs } from "./getVmaasCloudFolder";
export const getVmaasCloudFolder: typeof import("./getVmaasCloudFolder").getVmaasCloudFolder = null as any;
export const getVmaasCloudFolderOutput: typeof import("./getVmaasCloudFolder").getVmaasCloudFolderOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasCloudFolder","getVmaasCloudFolderOutput"], () => require("./getVmaasCloudFolder"));

export { GetVmaasDatastoreArgs, GetVmaasDatastoreResult, GetVmaasDatastoreOutputArgs } from "./getVmaasDatastore";
export const getVmaasDatastore: typeof import("./getVmaasDatastore").getVmaasDatastore = null as any;
export const getVmaasDatastoreOutput: typeof import("./getVmaasDatastore").getVmaasDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasDatastore","getVmaasDatastoreOutput"], () => require("./getVmaasDatastore"));

export { GetVmaasDhcpServerArgs, GetVmaasDhcpServerResult, GetVmaasDhcpServerOutputArgs } from "./getVmaasDhcpServer";
export const getVmaasDhcpServer: typeof import("./getVmaasDhcpServer").getVmaasDhcpServer = null as any;
export const getVmaasDhcpServerOutput: typeof import("./getVmaasDhcpServer").getVmaasDhcpServerOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasDhcpServer","getVmaasDhcpServerOutput"], () => require("./getVmaasDhcpServer"));

export { GetVmaasEdgeClusterArgs, GetVmaasEdgeClusterResult, GetVmaasEdgeClusterOutputArgs } from "./getVmaasEdgeCluster";
export const getVmaasEdgeCluster: typeof import("./getVmaasEdgeCluster").getVmaasEdgeCluster = null as any;
export const getVmaasEdgeClusterOutput: typeof import("./getVmaasEdgeCluster").getVmaasEdgeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasEdgeCluster","getVmaasEdgeClusterOutput"], () => require("./getVmaasEdgeCluster"));

export { GetVmaasEnvironmentArgs, GetVmaasEnvironmentResult, GetVmaasEnvironmentOutputArgs } from "./getVmaasEnvironment";
export const getVmaasEnvironment: typeof import("./getVmaasEnvironment").getVmaasEnvironment = null as any;
export const getVmaasEnvironmentOutput: typeof import("./getVmaasEnvironment").getVmaasEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasEnvironment","getVmaasEnvironmentOutput"], () => require("./getVmaasEnvironment"));

export { GetVmaasGroupArgs, GetVmaasGroupResult, GetVmaasGroupOutputArgs } from "./getVmaasGroup";
export const getVmaasGroup: typeof import("./getVmaasGroup").getVmaasGroup = null as any;
export const getVmaasGroupOutput: typeof import("./getVmaasGroup").getVmaasGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasGroup","getVmaasGroupOutput"], () => require("./getVmaasGroup"));

export { GetVmaasLayoutArgs, GetVmaasLayoutResult, GetVmaasLayoutOutputArgs } from "./getVmaasLayout";
export const getVmaasLayout: typeof import("./getVmaasLayout").getVmaasLayout = null as any;
export const getVmaasLayoutOutput: typeof import("./getVmaasLayout").getVmaasLayoutOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLayout","getVmaasLayoutOutput"], () => require("./getVmaasLayout"));

export { GetVmaasLbPoolMemberGroupArgs, GetVmaasLbPoolMemberGroupResult, GetVmaasLbPoolMemberGroupOutputArgs } from "./getVmaasLbPoolMemberGroup";
export const getVmaasLbPoolMemberGroup: typeof import("./getVmaasLbPoolMemberGroup").getVmaasLbPoolMemberGroup = null as any;
export const getVmaasLbPoolMemberGroupOutput: typeof import("./getVmaasLbPoolMemberGroup").getVmaasLbPoolMemberGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLbPoolMemberGroup","getVmaasLbPoolMemberGroupOutput"], () => require("./getVmaasLbPoolMemberGroup"));

export { GetVmaasLoadBalancerArgs, GetVmaasLoadBalancerResult, GetVmaasLoadBalancerOutputArgs } from "./getVmaasLoadBalancer";
export const getVmaasLoadBalancer: typeof import("./getVmaasLoadBalancer").getVmaasLoadBalancer = null as any;
export const getVmaasLoadBalancerOutput: typeof import("./getVmaasLoadBalancer").getVmaasLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLoadBalancer","getVmaasLoadBalancerOutput"], () => require("./getVmaasLoadBalancer"));

export { GetVmaasLoadBalancerMonitorArgs, GetVmaasLoadBalancerMonitorResult, GetVmaasLoadBalancerMonitorOutputArgs } from "./getVmaasLoadBalancerMonitor";
export const getVmaasLoadBalancerMonitor: typeof import("./getVmaasLoadBalancerMonitor").getVmaasLoadBalancerMonitor = null as any;
export const getVmaasLoadBalancerMonitorOutput: typeof import("./getVmaasLoadBalancerMonitor").getVmaasLoadBalancerMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLoadBalancerMonitor","getVmaasLoadBalancerMonitorOutput"], () => require("./getVmaasLoadBalancerMonitor"));

export { GetVmaasLoadBalancerPoolArgs, GetVmaasLoadBalancerPoolResult, GetVmaasLoadBalancerPoolOutputArgs } from "./getVmaasLoadBalancerPool";
export const getVmaasLoadBalancerPool: typeof import("./getVmaasLoadBalancerPool").getVmaasLoadBalancerPool = null as any;
export const getVmaasLoadBalancerPoolOutput: typeof import("./getVmaasLoadBalancerPool").getVmaasLoadBalancerPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLoadBalancerPool","getVmaasLoadBalancerPoolOutput"], () => require("./getVmaasLoadBalancerPool"));

export { GetVmaasLoadBalancerProfileArgs, GetVmaasLoadBalancerProfileResult, GetVmaasLoadBalancerProfileOutputArgs } from "./getVmaasLoadBalancerProfile";
export const getVmaasLoadBalancerProfile: typeof import("./getVmaasLoadBalancerProfile").getVmaasLoadBalancerProfile = null as any;
export const getVmaasLoadBalancerProfileOutput: typeof import("./getVmaasLoadBalancerProfile").getVmaasLoadBalancerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLoadBalancerProfile","getVmaasLoadBalancerProfileOutput"], () => require("./getVmaasLoadBalancerProfile"));

export { GetVmaasLoadBalancerVirtualServerSslCertArgs, GetVmaasLoadBalancerVirtualServerSslCertResult, GetVmaasLoadBalancerVirtualServerSslCertOutputArgs } from "./getVmaasLoadBalancerVirtualServerSslCert";
export const getVmaasLoadBalancerVirtualServerSslCert: typeof import("./getVmaasLoadBalancerVirtualServerSslCert").getVmaasLoadBalancerVirtualServerSslCert = null as any;
export const getVmaasLoadBalancerVirtualServerSslCertOutput: typeof import("./getVmaasLoadBalancerVirtualServerSslCert").getVmaasLoadBalancerVirtualServerSslCertOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasLoadBalancerVirtualServerSslCert","getVmaasLoadBalancerVirtualServerSslCertOutput"], () => require("./getVmaasLoadBalancerVirtualServerSslCert"));

export { GetVmaasNetworkArgs, GetVmaasNetworkResult, GetVmaasNetworkOutputArgs } from "./getVmaasNetwork";
export const getVmaasNetwork: typeof import("./getVmaasNetwork").getVmaasNetwork = null as any;
export const getVmaasNetworkOutput: typeof import("./getVmaasNetwork").getVmaasNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasNetwork","getVmaasNetworkOutput"], () => require("./getVmaasNetwork"));

export { GetVmaasNetworkDomainArgs, GetVmaasNetworkDomainResult, GetVmaasNetworkDomainOutputArgs } from "./getVmaasNetworkDomain";
export const getVmaasNetworkDomain: typeof import("./getVmaasNetworkDomain").getVmaasNetworkDomain = null as any;
export const getVmaasNetworkDomainOutput: typeof import("./getVmaasNetworkDomain").getVmaasNetworkDomainOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasNetworkDomain","getVmaasNetworkDomainOutput"], () => require("./getVmaasNetworkDomain"));

export { GetVmaasNetworkInterfaceArgs, GetVmaasNetworkInterfaceResult, GetVmaasNetworkInterfaceOutputArgs } from "./getVmaasNetworkInterface";
export const getVmaasNetworkInterface: typeof import("./getVmaasNetworkInterface").getVmaasNetworkInterface = null as any;
export const getVmaasNetworkInterfaceOutput: typeof import("./getVmaasNetworkInterface").getVmaasNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasNetworkInterface","getVmaasNetworkInterfaceOutput"], () => require("./getVmaasNetworkInterface"));

export { GetVmaasNetworkPoolArgs, GetVmaasNetworkPoolResult, GetVmaasNetworkPoolOutputArgs } from "./getVmaasNetworkPool";
export const getVmaasNetworkPool: typeof import("./getVmaasNetworkPool").getVmaasNetworkPool = null as any;
export const getVmaasNetworkPoolOutput: typeof import("./getVmaasNetworkPool").getVmaasNetworkPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasNetworkPool","getVmaasNetworkPoolOutput"], () => require("./getVmaasNetworkPool"));

export { GetVmaasNetworkProxyArgs, GetVmaasNetworkProxyResult, GetVmaasNetworkProxyOutputArgs } from "./getVmaasNetworkProxy";
export const getVmaasNetworkProxy: typeof import("./getVmaasNetworkProxy").getVmaasNetworkProxy = null as any;
export const getVmaasNetworkProxyOutput: typeof import("./getVmaasNetworkProxy").getVmaasNetworkProxyOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasNetworkProxy","getVmaasNetworkProxyOutput"], () => require("./getVmaasNetworkProxy"));

export { GetVmaasNetworkTypeArgs, GetVmaasNetworkTypeResult, GetVmaasNetworkTypeOutputArgs } from "./getVmaasNetworkType";
export const getVmaasNetworkType: typeof import("./getVmaasNetworkType").getVmaasNetworkType = null as any;
export const getVmaasNetworkTypeOutput: typeof import("./getVmaasNetworkType").getVmaasNetworkTypeOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasNetworkType","getVmaasNetworkTypeOutput"], () => require("./getVmaasNetworkType"));

export { GetVmaasPlanArgs, GetVmaasPlanResult, GetVmaasPlanOutputArgs } from "./getVmaasPlan";
export const getVmaasPlan: typeof import("./getVmaasPlan").getVmaasPlan = null as any;
export const getVmaasPlanOutput: typeof import("./getVmaasPlan").getVmaasPlanOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasPlan","getVmaasPlanOutput"], () => require("./getVmaasPlan"));

export { GetVmaasPowerScheduleArgs, GetVmaasPowerScheduleResult, GetVmaasPowerScheduleOutputArgs } from "./getVmaasPowerSchedule";
export const getVmaasPowerSchedule: typeof import("./getVmaasPowerSchedule").getVmaasPowerSchedule = null as any;
export const getVmaasPowerScheduleOutput: typeof import("./getVmaasPowerSchedule").getVmaasPowerScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasPowerSchedule","getVmaasPowerScheduleOutput"], () => require("./getVmaasPowerSchedule"));

export { GetVmaasResourcePoolArgs, GetVmaasResourcePoolResult, GetVmaasResourcePoolOutputArgs } from "./getVmaasResourcePool";
export const getVmaasResourcePool: typeof import("./getVmaasResourcePool").getVmaasResourcePool = null as any;
export const getVmaasResourcePoolOutput: typeof import("./getVmaasResourcePool").getVmaasResourcePoolOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasResourcePool","getVmaasResourcePoolOutput"], () => require("./getVmaasResourcePool"));

export { GetVmaasRouterArgs, GetVmaasRouterResult, GetVmaasRouterOutputArgs } from "./getVmaasRouter";
export const getVmaasRouter: typeof import("./getVmaasRouter").getVmaasRouter = null as any;
export const getVmaasRouterOutput: typeof import("./getVmaasRouter").getVmaasRouterOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasRouter","getVmaasRouterOutput"], () => require("./getVmaasRouter"));

export { GetVmaasTemplateArgs, GetVmaasTemplateResult, GetVmaasTemplateOutputArgs } from "./getVmaasTemplate";
export const getVmaasTemplate: typeof import("./getVmaasTemplate").getVmaasTemplate = null as any;
export const getVmaasTemplateOutput: typeof import("./getVmaasTemplate").getVmaasTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasTemplate","getVmaasTemplateOutput"], () => require("./getVmaasTemplate"));

export { GetVmaasTransportZoneArgs, GetVmaasTransportZoneResult, GetVmaasTransportZoneOutputArgs } from "./getVmaasTransportZone";
export const getVmaasTransportZone: typeof import("./getVmaasTransportZone").getVmaasTransportZone = null as any;
export const getVmaasTransportZoneOutput: typeof import("./getVmaasTransportZone").getVmaasTransportZoneOutput = null as any;
utilities.lazyLoad(exports, ["getVmaasTransportZone","getVmaasTransportZoneOutput"], () => require("./getVmaasTransportZone"));

export { MetalHostArgs, MetalHostState } from "./metalHost";
export type MetalHost = import("./metalHost").MetalHost;
export const MetalHost: typeof import("./metalHost").MetalHost = null as any;
utilities.lazyLoad(exports, ["MetalHost"], () => require("./metalHost"));

export { MetalImageArgs, MetalImageState } from "./metalImage";
export type MetalImage = import("./metalImage").MetalImage;
export const MetalImage: typeof import("./metalImage").MetalImage = null as any;
utilities.lazyLoad(exports, ["MetalImage"], () => require("./metalImage"));

export { MetalIpArgs, MetalIpState } from "./metalIp";
export type MetalIp = import("./metalIp").MetalIp;
export const MetalIp: typeof import("./metalIp").MetalIp = null as any;
utilities.lazyLoad(exports, ["MetalIp"], () => require("./metalIp"));

export { MetalNetworkArgs, MetalNetworkState } from "./metalNetwork";
export type MetalNetwork = import("./metalNetwork").MetalNetwork;
export const MetalNetwork: typeof import("./metalNetwork").MetalNetwork = null as any;
utilities.lazyLoad(exports, ["MetalNetwork"], () => require("./metalNetwork"));

export { MetalProjectArgs, MetalProjectState } from "./metalProject";
export type MetalProject = import("./metalProject").MetalProject;
export const MetalProject: typeof import("./metalProject").MetalProject = null as any;
utilities.lazyLoad(exports, ["MetalProject"], () => require("./metalProject"));

export { MetalSshKeyArgs, MetalSshKeyState } from "./metalSshKey";
export type MetalSshKey = import("./metalSshKey").MetalSshKey;
export const MetalSshKey: typeof import("./metalSshKey").MetalSshKey = null as any;
utilities.lazyLoad(exports, ["MetalSshKey"], () => require("./metalSshKey"));

export { MetalVolumeArgs, MetalVolumeState } from "./metalVolume";
export type MetalVolume = import("./metalVolume").MetalVolume;
export const MetalVolume: typeof import("./metalVolume").MetalVolume = null as any;
utilities.lazyLoad(exports, ["MetalVolume"], () => require("./metalVolume"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VmaasDhcpServerArgs, VmaasDhcpServerState } from "./vmaasDhcpServer";
export type VmaasDhcpServer = import("./vmaasDhcpServer").VmaasDhcpServer;
export const VmaasDhcpServer: typeof import("./vmaasDhcpServer").VmaasDhcpServer = null as any;
utilities.lazyLoad(exports, ["VmaasDhcpServer"], () => require("./vmaasDhcpServer"));

export { VmaasInstanceArgs, VmaasInstanceState } from "./vmaasInstance";
export type VmaasInstance = import("./vmaasInstance").VmaasInstance;
export const VmaasInstance: typeof import("./vmaasInstance").VmaasInstance = null as any;
utilities.lazyLoad(exports, ["VmaasInstance"], () => require("./vmaasInstance"));

export { VmaasInstanceCloneArgs, VmaasInstanceCloneState } from "./vmaasInstanceClone";
export type VmaasInstanceClone = import("./vmaasInstanceClone").VmaasInstanceClone;
export const VmaasInstanceClone: typeof import("./vmaasInstanceClone").VmaasInstanceClone = null as any;
utilities.lazyLoad(exports, ["VmaasInstanceClone"], () => require("./vmaasInstanceClone"));

export { VmaasLoadBalancerArgs, VmaasLoadBalancerState } from "./vmaasLoadBalancer";
export type VmaasLoadBalancer = import("./vmaasLoadBalancer").VmaasLoadBalancer;
export const VmaasLoadBalancer: typeof import("./vmaasLoadBalancer").VmaasLoadBalancer = null as any;
utilities.lazyLoad(exports, ["VmaasLoadBalancer"], () => require("./vmaasLoadBalancer"));

export { VmaasLoadBalancerMonitorArgs, VmaasLoadBalancerMonitorState } from "./vmaasLoadBalancerMonitor";
export type VmaasLoadBalancerMonitor = import("./vmaasLoadBalancerMonitor").VmaasLoadBalancerMonitor;
export const VmaasLoadBalancerMonitor: typeof import("./vmaasLoadBalancerMonitor").VmaasLoadBalancerMonitor = null as any;
utilities.lazyLoad(exports, ["VmaasLoadBalancerMonitor"], () => require("./vmaasLoadBalancerMonitor"));

export { VmaasLoadBalancerPoolArgs, VmaasLoadBalancerPoolState } from "./vmaasLoadBalancerPool";
export type VmaasLoadBalancerPool = import("./vmaasLoadBalancerPool").VmaasLoadBalancerPool;
export const VmaasLoadBalancerPool: typeof import("./vmaasLoadBalancerPool").VmaasLoadBalancerPool = null as any;
utilities.lazyLoad(exports, ["VmaasLoadBalancerPool"], () => require("./vmaasLoadBalancerPool"));

export { VmaasLoadBalancerProfileArgs, VmaasLoadBalancerProfileState } from "./vmaasLoadBalancerProfile";
export type VmaasLoadBalancerProfile = import("./vmaasLoadBalancerProfile").VmaasLoadBalancerProfile;
export const VmaasLoadBalancerProfile: typeof import("./vmaasLoadBalancerProfile").VmaasLoadBalancerProfile = null as any;
utilities.lazyLoad(exports, ["VmaasLoadBalancerProfile"], () => require("./vmaasLoadBalancerProfile"));

export { VmaasLoadBalancerVirtualServerArgs, VmaasLoadBalancerVirtualServerState } from "./vmaasLoadBalancerVirtualServer";
export type VmaasLoadBalancerVirtualServer = import("./vmaasLoadBalancerVirtualServer").VmaasLoadBalancerVirtualServer;
export const VmaasLoadBalancerVirtualServer: typeof import("./vmaasLoadBalancerVirtualServer").VmaasLoadBalancerVirtualServer = null as any;
utilities.lazyLoad(exports, ["VmaasLoadBalancerVirtualServer"], () => require("./vmaasLoadBalancerVirtualServer"));

export { VmaasNetworkArgs, VmaasNetworkState } from "./vmaasNetwork";
export type VmaasNetwork = import("./vmaasNetwork").VmaasNetwork;
export const VmaasNetwork: typeof import("./vmaasNetwork").VmaasNetwork = null as any;
utilities.lazyLoad(exports, ["VmaasNetwork"], () => require("./vmaasNetwork"));

export { VmaasRouterArgs, VmaasRouterState } from "./vmaasRouter";
export type VmaasRouter = import("./vmaasRouter").VmaasRouter;
export const VmaasRouter: typeof import("./vmaasRouter").VmaasRouter = null as any;
utilities.lazyLoad(exports, ["VmaasRouter"], () => require("./vmaasRouter"));

export { VmaasRouterBgpNeighborArgs, VmaasRouterBgpNeighborState } from "./vmaasRouterBgpNeighbor";
export type VmaasRouterBgpNeighbor = import("./vmaasRouterBgpNeighbor").VmaasRouterBgpNeighbor;
export const VmaasRouterBgpNeighbor: typeof import("./vmaasRouterBgpNeighbor").VmaasRouterBgpNeighbor = null as any;
utilities.lazyLoad(exports, ["VmaasRouterBgpNeighbor"], () => require("./vmaasRouterBgpNeighbor"));

export { VmaasRouterFirewallRuleGroupArgs, VmaasRouterFirewallRuleGroupState } from "./vmaasRouterFirewallRuleGroup";
export type VmaasRouterFirewallRuleGroup = import("./vmaasRouterFirewallRuleGroup").VmaasRouterFirewallRuleGroup;
export const VmaasRouterFirewallRuleGroup: typeof import("./vmaasRouterFirewallRuleGroup").VmaasRouterFirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["VmaasRouterFirewallRuleGroup"], () => require("./vmaasRouterFirewallRuleGroup"));

export { VmaasRouterNatRuleArgs, VmaasRouterNatRuleState } from "./vmaasRouterNatRule";
export type VmaasRouterNatRule = import("./vmaasRouterNatRule").VmaasRouterNatRule;
export const VmaasRouterNatRule: typeof import("./vmaasRouterNatRule").VmaasRouterNatRule = null as any;
utilities.lazyLoad(exports, ["VmaasRouterNatRule"], () => require("./vmaasRouterNatRule"));

export { VmaasRouterRouteArgs, VmaasRouterRouteState } from "./vmaasRouterRoute";
export type VmaasRouterRoute = import("./vmaasRouterRoute").VmaasRouterRoute;
export const VmaasRouterRoute: typeof import("./vmaasRouterRoute").VmaasRouterRoute = null as any;
utilities.lazyLoad(exports, ["VmaasRouterRoute"], () => require("./vmaasRouterRoute"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "hpegl:index/caasCluster:CaasCluster":
                return new CaasCluster(name, <any>undefined, { urn })
            case "hpegl:index/caasClusterBlueprint:CaasClusterBlueprint":
                return new CaasClusterBlueprint(name, <any>undefined, { urn })
            case "hpegl:index/caasMachineBlueprint:CaasMachineBlueprint":
                return new CaasMachineBlueprint(name, <any>undefined, { urn })
            case "hpegl:index/metalHost:MetalHost":
                return new MetalHost(name, <any>undefined, { urn })
            case "hpegl:index/metalImage:MetalImage":
                return new MetalImage(name, <any>undefined, { urn })
            case "hpegl:index/metalIp:MetalIp":
                return new MetalIp(name, <any>undefined, { urn })
            case "hpegl:index/metalNetwork:MetalNetwork":
                return new MetalNetwork(name, <any>undefined, { urn })
            case "hpegl:index/metalProject:MetalProject":
                return new MetalProject(name, <any>undefined, { urn })
            case "hpegl:index/metalSshKey:MetalSshKey":
                return new MetalSshKey(name, <any>undefined, { urn })
            case "hpegl:index/metalVolume:MetalVolume":
                return new MetalVolume(name, <any>undefined, { urn })
            case "hpegl:index/vmaasDhcpServer:VmaasDhcpServer":
                return new VmaasDhcpServer(name, <any>undefined, { urn })
            case "hpegl:index/vmaasInstance:VmaasInstance":
                return new VmaasInstance(name, <any>undefined, { urn })
            case "hpegl:index/vmaasInstanceClone:VmaasInstanceClone":
                return new VmaasInstanceClone(name, <any>undefined, { urn })
            case "hpegl:index/vmaasLoadBalancer:VmaasLoadBalancer":
                return new VmaasLoadBalancer(name, <any>undefined, { urn })
            case "hpegl:index/vmaasLoadBalancerMonitor:VmaasLoadBalancerMonitor":
                return new VmaasLoadBalancerMonitor(name, <any>undefined, { urn })
            case "hpegl:index/vmaasLoadBalancerPool:VmaasLoadBalancerPool":
                return new VmaasLoadBalancerPool(name, <any>undefined, { urn })
            case "hpegl:index/vmaasLoadBalancerProfile:VmaasLoadBalancerProfile":
                return new VmaasLoadBalancerProfile(name, <any>undefined, { urn })
            case "hpegl:index/vmaasLoadBalancerVirtualServer:VmaasLoadBalancerVirtualServer":
                return new VmaasLoadBalancerVirtualServer(name, <any>undefined, { urn })
            case "hpegl:index/vmaasNetwork:VmaasNetwork":
                return new VmaasNetwork(name, <any>undefined, { urn })
            case "hpegl:index/vmaasRouter:VmaasRouter":
                return new VmaasRouter(name, <any>undefined, { urn })
            case "hpegl:index/vmaasRouterBgpNeighbor:VmaasRouterBgpNeighbor":
                return new VmaasRouterBgpNeighbor(name, <any>undefined, { urn })
            case "hpegl:index/vmaasRouterFirewallRuleGroup:VmaasRouterFirewallRuleGroup":
                return new VmaasRouterFirewallRuleGroup(name, <any>undefined, { urn })
            case "hpegl:index/vmaasRouterNatRule:VmaasRouterNatRule":
                return new VmaasRouterNatRule(name, <any>undefined, { urn })
            case "hpegl:index/vmaasRouterRoute:VmaasRouterRoute":
                return new VmaasRouterRoute(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hpegl", "index/caasCluster", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/caasClusterBlueprint", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/caasMachineBlueprint", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalHost", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalImage", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalIp", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalNetwork", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalProject", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalSshKey", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/metalVolume", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasDhcpServer", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasInstance", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasInstanceClone", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasLoadBalancer", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasLoadBalancerMonitor", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasLoadBalancerPool", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasLoadBalancerProfile", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasLoadBalancerVirtualServer", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasNetwork", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasRouter", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasRouterBgpNeighbor", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasRouterFirewallRuleGroup", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasRouterNatRule", _module)
pulumi.runtime.registerResourceModule("hpegl", "index/vmaasRouterRoute", _module)
pulumi.runtime.registerResourcePackage("hpegl", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:hpegl") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
