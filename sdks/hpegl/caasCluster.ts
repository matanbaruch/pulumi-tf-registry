// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CaasCluster extends pulumi.CustomResource {
    /**
     * Get an existing CaasCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CaasClusterState, opts?: pulumi.CustomResourceOptions): CaasCluster {
        return new CaasCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/caasCluster:CaasCluster';

    /**
     * Returns true if the given object is an instance of CaasCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CaasCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CaasCluster.__pulumiType;
    }

    public /*out*/ readonly apiEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly applianceName!: pulumi.Output<string>;
    public readonly blueprintId!: pulumi.Output<string>;
    public /*out*/ readonly clusterProvider!: pulumi.Output<string>;
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public /*out*/ readonly defaultMachineSets!: pulumi.Output<outputs.CaasClusterDefaultMachineSet[]>;
    public /*out*/ readonly defaultMachineSetsDetails!: pulumi.Output<outputs.CaasClusterDefaultMachineSetsDetail[]>;
    public /*out*/ readonly defaultStorageClass!: pulumi.Output<string>;
    public /*out*/ readonly defaultStorageClassDescription!: pulumi.Output<string>;
    public /*out*/ readonly health!: pulumi.Output<string>;
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    public readonly kubernetesVersion!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdateDate!: pulumi.Output<string>;
    public /*out*/ readonly machineSets!: pulumi.Output<outputs.CaasClusterMachineSet[]>;
    public /*out*/ readonly machineSetsDetails!: pulumi.Output<outputs.CaasClusterMachineSetsDetail[]>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly serviceEndpoints!: pulumi.Output<outputs.CaasClusterServiceEndpoint[]>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly spaceId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CaasClusterTimeouts | undefined>;
    public readonly workerNodes!: pulumi.Output<outputs.CaasClusterWorkerNode[] | undefined>;

    /**
     * Create a CaasCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CaasClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CaasClusterArgs | CaasClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CaasClusterState | undefined;
            resourceInputs["apiEndpoint"] = state ? state.apiEndpoint : undefined;
            resourceInputs["applianceName"] = state ? state.applianceName : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["clusterProvider"] = state ? state.clusterProvider : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["defaultMachineSets"] = state ? state.defaultMachineSets : undefined;
            resourceInputs["defaultMachineSetsDetails"] = state ? state.defaultMachineSetsDetails : undefined;
            resourceInputs["defaultStorageClass"] = state ? state.defaultStorageClass : undefined;
            resourceInputs["defaultStorageClassDescription"] = state ? state.defaultStorageClassDescription : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["lastUpdateDate"] = state ? state.lastUpdateDate : undefined;
            resourceInputs["machineSets"] = state ? state.machineSets : undefined;
            resourceInputs["machineSetsDetails"] = state ? state.machineSetsDetails : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceEndpoints"] = state ? state.serviceEndpoints : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workerNodes"] = state ? state.workerNodes : undefined;
        } else {
            const args = argsOrState as CaasClusterArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.spaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceId'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workerNodes"] = args ? args.workerNodes : undefined;
            resourceInputs["apiEndpoint"] = undefined /*out*/;
            resourceInputs["applianceName"] = undefined /*out*/;
            resourceInputs["clusterProvider"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["defaultMachineSets"] = undefined /*out*/;
            resourceInputs["defaultMachineSetsDetails"] = undefined /*out*/;
            resourceInputs["defaultStorageClass"] = undefined /*out*/;
            resourceInputs["defaultStorageClassDescription"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["lastUpdateDate"] = undefined /*out*/;
            resourceInputs["machineSets"] = undefined /*out*/;
            resourceInputs["machineSetsDetails"] = undefined /*out*/;
            resourceInputs["serviceEndpoints"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CaasCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CaasCluster resources.
 */
export interface CaasClusterState {
    apiEndpoint?: pulumi.Input<string>;
    applianceName?: pulumi.Input<string>;
    blueprintId?: pulumi.Input<string>;
    clusterProvider?: pulumi.Input<string>;
    createdDate?: pulumi.Input<string>;
    defaultMachineSets?: pulumi.Input<pulumi.Input<inputs.CaasClusterDefaultMachineSet>[]>;
    defaultMachineSetsDetails?: pulumi.Input<pulumi.Input<inputs.CaasClusterDefaultMachineSetsDetail>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    defaultStorageClassDescription?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    kubeconfig?: pulumi.Input<string>;
    kubernetesVersion?: pulumi.Input<string>;
    lastUpdateDate?: pulumi.Input<string>;
    machineSets?: pulumi.Input<pulumi.Input<inputs.CaasClusterMachineSet>[]>;
    machineSetsDetails?: pulumi.Input<pulumi.Input<inputs.CaasClusterMachineSetsDetail>[]>;
    name?: pulumi.Input<string>;
    serviceEndpoints?: pulumi.Input<pulumi.Input<inputs.CaasClusterServiceEndpoint>[]>;
    siteId?: pulumi.Input<string>;
    spaceId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CaasClusterTimeouts>;
    workerNodes?: pulumi.Input<pulumi.Input<inputs.CaasClusterWorkerNode>[]>;
}

/**
 * The set of arguments for constructing a CaasCluster resource.
 */
export interface CaasClusterArgs {
    blueprintId: pulumi.Input<string>;
    kubernetesVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    spaceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CaasClusterTimeouts>;
    workerNodes?: pulumi.Input<pulumi.Input<inputs.CaasClusterWorkerNode>[]>;
}
