// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VmaasNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasNetworkState, opts?: pulumi.CustomResourceOptions): VmaasNetwork {
        return new VmaasNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasNetwork:VmaasNetwork';

    /**
     * Returns true if the given object is an instance of VmaasNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasNetwork.__pulumiType;
    }

    /**
     * Activate (`true`) or disable (`false`) the network
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, network will allow static override
     */
    public readonly allowStaticOverride!: pulumi.Output<boolean | undefined>;
    /**
     * Bypass Proxy for Appliance URL
     */
    public readonly applianceUrlProxyBypass!: pulumi.Output<boolean | undefined>;
    /**
     * Gateway Classless Inter-Domain Routing (CIDR) of the network
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Network Type code
     */
    public /*out*/ readonly code!: pulumi.Output<string>;
    /**
     * Connected Gateway. Pass Provider ID of the Tier1 gateway. Use hpegl_vmaas_router.provider_id here.
     */
    public readonly connectedGateway!: pulumi.Output<string>;
    /**
     * Description of the network to be created.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable DHCP Server.
     */
    public readonly dhcpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * DHCP Network configuration
     */
    public readonly dhcpNetwork!: pulumi.Output<outputs.VmaasNetworkDhcpNetwork | undefined>;
    /**
     * Display name of the NSX-T network.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * ID of the Network domain. Use hpegl.getVmaasNetworkDomain datasource to obtain the ID.
     */
    public readonly domainId!: pulumi.Output<number | undefined>;
    /**
     * External ID of the network
     */
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    /**
     * Gateway IP address of the network
     */
    public readonly gateway!: pulumi.Output<string | undefined>;
    /**
     * Group ID of the Network. Please use hpegl.getVmaasGroup data source to retrieve ID or pass `shared`.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Internal ID of the network
     */
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    /**
     * Name of the NSX-T Static Segment to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of IP addresses or name servers for which to exclude proxy traversal.
     */
    public readonly noProxy!: pulumi.Output<string | undefined>;
    /**
     * Primary DNS IP Address
     */
    public readonly primaryDns!: pulumi.Output<string | undefined>;
    /**
     * Network Proxy ID. Use hpegl.getVmaasNetworkProxy data source to obtain the ID.
     */
    public readonly proxyId!: pulumi.Output<number | undefined>;
    public readonly resourcePermissions!: pulumi.Output<outputs.VmaasNetworkResourcePermissions | undefined>;
    /**
     * Scan Network
     */
    public readonly scanNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * Transport Zone ID. Use hpegl.getVmaasTransportZone Data source's `provider_id` here.
     */
    public readonly scopeId!: pulumi.Output<string>;
    /**
     * Search Domains
     */
    public readonly searchDomains!: pulumi.Output<string | undefined>;
    /**
     * Secondary DNS IP Address
     */
    public readonly secondaryDns!: pulumi.Output<string | undefined>;
    /**
     * static Network configuration
     */
    public readonly staticNetwork!: pulumi.Output<outputs.VmaasNetworkStaticNetwork | undefined>;
    /**
     * Status of the network
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Type ID for the NSX-T Network.
     */
    public /*out*/ readonly typeId!: pulumi.Output<number>;
    /**
     * Unique ID of the network
     */
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;
    /**
     * VLAN IDs eg. `0,3-5`. Use this field for VLAN based segments.
     */
    public readonly vlanIds!: pulumi.Output<string | undefined>;

    /**
     * Create a VmaasNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasNetworkArgs | VmaasNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasNetworkState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["allowStaticOverride"] = state ? state.allowStaticOverride : undefined;
            resourceInputs["applianceUrlProxyBypass"] = state ? state.applianceUrlProxyBypass : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["connectedGateway"] = state ? state.connectedGateway : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpEnabled"] = state ? state.dhcpEnabled : undefined;
            resourceInputs["dhcpNetwork"] = state ? state.dhcpNetwork : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noProxy"] = state ? state.noProxy : undefined;
            resourceInputs["primaryDns"] = state ? state.primaryDns : undefined;
            resourceInputs["proxyId"] = state ? state.proxyId : undefined;
            resourceInputs["resourcePermissions"] = state ? state.resourcePermissions : undefined;
            resourceInputs["scanNetwork"] = state ? state.scanNetwork : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["searchDomains"] = state ? state.searchDomains : undefined;
            resourceInputs["secondaryDns"] = state ? state.secondaryDns : undefined;
            resourceInputs["staticNetwork"] = state ? state.staticNetwork : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["typeId"] = state ? state.typeId : undefined;
            resourceInputs["uniqueId"] = state ? state.uniqueId : undefined;
            resourceInputs["vlanIds"] = state ? state.vlanIds : undefined;
        } else {
            const args = argsOrState as VmaasNetworkArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.connectedGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectedGateway'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["allowStaticOverride"] = args ? args.allowStaticOverride : undefined;
            resourceInputs["applianceUrlProxyBypass"] = args ? args.applianceUrlProxyBypass : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["connectedGateway"] = args ? args.connectedGateway : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpEnabled"] = args ? args.dhcpEnabled : undefined;
            resourceInputs["dhcpNetwork"] = args ? args.dhcpNetwork : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noProxy"] = args ? args.noProxy : undefined;
            resourceInputs["primaryDns"] = args ? args.primaryDns : undefined;
            resourceInputs["proxyId"] = args ? args.proxyId : undefined;
            resourceInputs["resourcePermissions"] = args ? args.resourcePermissions : undefined;
            resourceInputs["scanNetwork"] = args ? args.scanNetwork : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["searchDomains"] = args ? args.searchDomains : undefined;
            resourceInputs["secondaryDns"] = args ? args.secondaryDns : undefined;
            resourceInputs["staticNetwork"] = args ? args.staticNetwork : undefined;
            resourceInputs["vlanIds"] = args ? args.vlanIds : undefined;
            resourceInputs["code"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["internalId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["typeId"] = undefined /*out*/;
            resourceInputs["uniqueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasNetwork resources.
 */
export interface VmaasNetworkState {
    /**
     * Activate (`true`) or disable (`false`) the network
     */
    active?: pulumi.Input<boolean>;
    /**
     * If set to true, network will allow static override
     */
    allowStaticOverride?: pulumi.Input<boolean>;
    /**
     * Bypass Proxy for Appliance URL
     */
    applianceUrlProxyBypass?: pulumi.Input<boolean>;
    /**
     * Gateway Classless Inter-Domain Routing (CIDR) of the network
     */
    cidr?: pulumi.Input<string>;
    /**
     * Network Type code
     */
    code?: pulumi.Input<string>;
    /**
     * Connected Gateway. Pass Provider ID of the Tier1 gateway. Use hpegl_vmaas_router.provider_id here.
     */
    connectedGateway?: pulumi.Input<string>;
    /**
     * Description of the network to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable DHCP Server.
     */
    dhcpEnabled?: pulumi.Input<boolean>;
    /**
     * DHCP Network configuration
     */
    dhcpNetwork?: pulumi.Input<inputs.VmaasNetworkDhcpNetwork>;
    /**
     * Display name of the NSX-T network.
     */
    displayName?: pulumi.Input<string>;
    /**
     * ID of the Network domain. Use hpegl.getVmaasNetworkDomain datasource to obtain the ID.
     */
    domainId?: pulumi.Input<number>;
    /**
     * External ID of the network
     */
    externalId?: pulumi.Input<string>;
    /**
     * Gateway IP address of the network
     */
    gateway?: pulumi.Input<string>;
    /**
     * Group ID of the Network. Please use hpegl.getVmaasGroup data source to retrieve ID or pass `shared`.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Internal ID of the network
     */
    internalId?: pulumi.Input<string>;
    /**
     * Name of the NSX-T Static Segment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * List of IP addresses or name servers for which to exclude proxy traversal.
     */
    noProxy?: pulumi.Input<string>;
    /**
     * Primary DNS IP Address
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * Network Proxy ID. Use hpegl.getVmaasNetworkProxy data source to obtain the ID.
     */
    proxyId?: pulumi.Input<number>;
    resourcePermissions?: pulumi.Input<inputs.VmaasNetworkResourcePermissions>;
    /**
     * Scan Network
     */
    scanNetwork?: pulumi.Input<boolean>;
    /**
     * Transport Zone ID. Use hpegl.getVmaasTransportZone Data source's `provider_id` here.
     */
    scopeId?: pulumi.Input<string>;
    /**
     * Search Domains
     */
    searchDomains?: pulumi.Input<string>;
    /**
     * Secondary DNS IP Address
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * static Network configuration
     */
    staticNetwork?: pulumi.Input<inputs.VmaasNetworkStaticNetwork>;
    /**
     * Status of the network
     */
    status?: pulumi.Input<string>;
    /**
     * Type ID for the NSX-T Network.
     */
    typeId?: pulumi.Input<number>;
    /**
     * Unique ID of the network
     */
    uniqueId?: pulumi.Input<string>;
    /**
     * VLAN IDs eg. `0,3-5`. Use this field for VLAN based segments.
     */
    vlanIds?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmaasNetwork resource.
 */
export interface VmaasNetworkArgs {
    /**
     * Activate (`true`) or disable (`false`) the network
     */
    active?: pulumi.Input<boolean>;
    /**
     * If set to true, network will allow static override
     */
    allowStaticOverride?: pulumi.Input<boolean>;
    /**
     * Bypass Proxy for Appliance URL
     */
    applianceUrlProxyBypass?: pulumi.Input<boolean>;
    /**
     * Gateway Classless Inter-Domain Routing (CIDR) of the network
     */
    cidr: pulumi.Input<string>;
    /**
     * Connected Gateway. Pass Provider ID of the Tier1 gateway. Use hpegl_vmaas_router.provider_id here.
     */
    connectedGateway: pulumi.Input<string>;
    /**
     * Description of the network to be created.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable DHCP Server.
     */
    dhcpEnabled?: pulumi.Input<boolean>;
    /**
     * DHCP Network configuration
     */
    dhcpNetwork?: pulumi.Input<inputs.VmaasNetworkDhcpNetwork>;
    /**
     * Display name of the NSX-T network.
     */
    displayName?: pulumi.Input<string>;
    /**
     * ID of the Network domain. Use hpegl.getVmaasNetworkDomain datasource to obtain the ID.
     */
    domainId?: pulumi.Input<number>;
    /**
     * Gateway IP address of the network
     */
    gateway?: pulumi.Input<string>;
    /**
     * Group ID of the Network. Please use hpegl.getVmaasGroup data source to retrieve ID or pass `shared`.
     */
    groupId: pulumi.Input<string>;
    /**
     * Name of the NSX-T Static Segment to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * List of IP addresses or name servers for which to exclude proxy traversal.
     */
    noProxy?: pulumi.Input<string>;
    /**
     * Primary DNS IP Address
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * Network Proxy ID. Use hpegl.getVmaasNetworkProxy data source to obtain the ID.
     */
    proxyId?: pulumi.Input<number>;
    resourcePermissions?: pulumi.Input<inputs.VmaasNetworkResourcePermissions>;
    /**
     * Scan Network
     */
    scanNetwork?: pulumi.Input<boolean>;
    /**
     * Transport Zone ID. Use hpegl.getVmaasTransportZone Data source's `provider_id` here.
     */
    scopeId: pulumi.Input<string>;
    /**
     * Search Domains
     */
    searchDomains?: pulumi.Input<string>;
    /**
     * Secondary DNS IP Address
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * static Network configuration
     */
    staticNetwork?: pulumi.Input<inputs.VmaasNetworkStaticNetwork>;
    /**
     * VLAN IDs eg. `0,3-5`. Use this field for VLAN based segments.
     */
    vlanIds?: pulumi.Input<string>;
}
