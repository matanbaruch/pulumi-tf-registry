// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VmaasRouterRoute extends pulumi.CustomResource {
    /**
     * Get an existing VmaasRouterRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasRouterRouteState, opts?: pulumi.CustomResourceOptions): VmaasRouterRoute {
        return new VmaasRouterRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasRouterRoute:VmaasRouterRoute';

    /**
     * Returns true if the given object is an instance of VmaasRouterRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasRouterRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasRouterRoute.__pulumiType;
    }

    public /*out*/ readonly code!: pulumi.Output<string>;
    /**
     * If `true` then the route will considered as the default route.
     */
    public readonly defaultRoute!: pulumi.Output<boolean | undefined>;
    /**
     * Description for the route.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If `true` then route will be active/enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    /**
     * If parent router not found, then is_deprecated will be true
     */
    public /*out*/ readonly isDeprecated!: pulumi.Output<boolean>;
    /**
     * Network MTU
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Name of the route.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Source Network CIDR Address
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * Next Hop/Destination IPv4 Address
     */
    public readonly nextHop!: pulumi.Output<string>;
    /**
     * Priority for the route
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    public /*out*/ readonly providerId!: pulumi.Output<string>;
    public /*out*/ readonly routeType!: pulumi.Output<string>;
    /**
     * Parent router ID, router_id can be obtained by using router datasource/resource.
     */
    public readonly routerId!: pulumi.Output<number>;
    public /*out*/ readonly sourceType!: pulumi.Output<string>;

    /**
     * Create a VmaasRouterRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasRouterRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasRouterRouteArgs | VmaasRouterRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasRouterRouteState | undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["defaultRoute"] = state ? state.defaultRoute : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["isDeprecated"] = state ? state.isDeprecated : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
            resourceInputs["routeType"] = state ? state.routeType : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
        } else {
            const args = argsOrState as VmaasRouterRouteArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.nextHop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHop'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            resourceInputs["defaultRoute"] = args ? args.defaultRoute : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["code"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["isDeprecated"] = undefined /*out*/;
            resourceInputs["providerId"] = undefined /*out*/;
            resourceInputs["routeType"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasRouterRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasRouterRoute resources.
 */
export interface VmaasRouterRouteState {
    code?: pulumi.Input<string>;
    /**
     * If `true` then the route will considered as the default route.
     */
    defaultRoute?: pulumi.Input<boolean>;
    /**
     * Description for the route.
     */
    description?: pulumi.Input<string>;
    /**
     * If `true` then route will be active/enabled.
     */
    enabled?: pulumi.Input<boolean>;
    externalId?: pulumi.Input<string>;
    /**
     * If parent router not found, then is_deprecated will be true
     */
    isDeprecated?: pulumi.Input<boolean>;
    /**
     * Network MTU
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name of the route.
     */
    name?: pulumi.Input<string>;
    /**
     * Source Network CIDR Address
     */
    network?: pulumi.Input<string>;
    /**
     * Next Hop/Destination IPv4 Address
     */
    nextHop?: pulumi.Input<string>;
    /**
     * Priority for the route
     */
    priority?: pulumi.Input<number>;
    providerId?: pulumi.Input<string>;
    routeType?: pulumi.Input<string>;
    /**
     * Parent router ID, router_id can be obtained by using router datasource/resource.
     */
    routerId?: pulumi.Input<number>;
    sourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmaasRouterRoute resource.
 */
export interface VmaasRouterRouteArgs {
    /**
     * If `true` then the route will considered as the default route.
     */
    defaultRoute?: pulumi.Input<boolean>;
    /**
     * Description for the route.
     */
    description?: pulumi.Input<string>;
    /**
     * If `true` then route will be active/enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Network MTU
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name of the route.
     */
    name?: pulumi.Input<string>;
    /**
     * Source Network CIDR Address
     */
    network: pulumi.Input<string>;
    /**
     * Next Hop/Destination IPv4 Address
     */
    nextHop: pulumi.Input<string>;
    /**
     * Priority for the route
     */
    priority?: pulumi.Input<number>;
    /**
     * Parent router ID, router_id can be obtained by using router datasource/resource.
     */
    routerId: pulumi.Input<number>;
}
