// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("hpegl");

/**
 * Declare if the API client being used is an API-vended one or not. Defaults to "true" i.e. the client is API-vended. The
 * value can be set using the HPEGL_API_VENDED_SERVICE_CLIENT env-var.
 */
export declare const apiVendedServiceClient: boolean | undefined;
Object.defineProperty(exports, "apiVendedServiceClient", {
    get() {
        return __config.getObject<boolean>("apiVendedServiceClient");
    },
    enumerable: true,
});

export declare const caas: outputs.config.Caas | undefined;
Object.defineProperty(exports, "caas", {
    get() {
        return __config.getObject<outputs.config.Caas>("caas");
    },
    enumerable: true,
});

/**
 * The IAM service URL to be used to generate tokens. In the case of GLCS API clients (the default) then this should be set
 * to the "issuer url" for the client. In the case of GLP API clients use the appropriate "Token URL" from the API screen.
 * Can be set by HPEGL_IAM_SERVICE_URL env-var
 */
export declare const iamServiceUrl: string | undefined;
Object.defineProperty(exports, "iamServiceUrl", {
    get() {
        return __config.get("iamServiceUrl");
    },
    enumerable: true,
});

/**
 * The IAM token to be used with the client(s). Note that in normal operation an API client is used. Passing-in a token
 * means that tokens will not be generated or refreshed.
 */
export declare const iamToken: string | undefined;
Object.defineProperty(exports, "iamToken", {
    get() {
        return __config.get("iamToken");
    },
    enumerable: true,
});

/**
 * The IAM version to be used. Can be set by HPEGL_IAM_VERSION env-var. Valid values are: [glcs glp]The default is glcs.
 */
export declare const iamVersion: string | undefined;
Object.defineProperty(exports, "iamVersion", {
    get() {
        return __config.get("iamVersion");
    },
    enumerable: true,
});

export declare const metal: outputs.config.Metal | undefined;
Object.defineProperty(exports, "metal", {
    get() {
        return __config.getObject<outputs.config.Metal>("metal");
    },
    enumerable: true,
});

/**
 * The tenant-id to be used for GLCS IAM, can be set by HPEGL_TENANT_ID env-var
 */
export declare const tenantId: string | undefined;
Object.defineProperty(exports, "tenantId", {
    get() {
        return __config.get("tenantId");
    },
    enumerable: true,
});

/**
 * The user id to be used, can be set by HPEGL_USER_ID env-var
 */
export declare const userId: string | undefined;
Object.defineProperty(exports, "userId", {
    get() {
        return __config.get("userId");
    },
    enumerable: true,
});

/**
 * The user secret to be used, can be set by HPEGL_USER_SECRET env-var
 */
export declare const userSecret: string | undefined;
Object.defineProperty(exports, "userSecret", {
    get() {
        return __config.get("userSecret");
    },
    enumerable: true,
});

export declare const vmaas: outputs.config.Vmaas | undefined;
Object.defineProperty(exports, "vmaas", {
    get() {
        return __config.getObject<outputs.config.Vmaas>("vmaas");
    },
    enumerable: true,
});

