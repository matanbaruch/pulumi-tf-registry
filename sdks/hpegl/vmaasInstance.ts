// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasInstance extends pulumi.CustomResource {
    /**
     * Get an existing VmaasInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasInstanceState, opts?: pulumi.CustomResourceOptions): VmaasInstance {
        return new VmaasInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasInstance:VmaasInstance';

    /**
     * Returns true if the given object is an instance of VmaasInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasInstance.__pulumiType;
    }

    /**
     * Unique ID to identify a cloud.
     */
    public readonly cloudId!: pulumi.Output<number>;
    /**
     * Configuration details for the instance to be provisioned.
     */
    public readonly configs!: pulumi.Output<outputs.VmaasInstanceConfig[]>;
    /**
     * Container's details for the instance which contains IP addresses, hostname and other stats
     */
    public /*out*/ readonly containers!: pulumi.Output<outputs.VmaasInstanceContainer[]>;
    /**
     * Environment prefix
     */
    public readonly envPrefix!: pulumi.Output<string | undefined>;
    /**
     * Environment code, which can be obtained via hpegl_vmaas_environment.code
     */
    public readonly environmentCode!: pulumi.Output<string | undefined>;
    /**
     * Environment Variables to be added to the provisioned instance.
     */
    public readonly evars!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Unique ID to identify a group.
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * History details for the instance
     */
    public /*out*/ readonly histories!: pulumi.Output<outputs.VmaasInstanceHistory[]>;
    /**
     * Hostname for the instance
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Unique code to identify the instance type.
     */
    public readonly instanceTypeCode!: pulumi.Output<string>;
    /**
     * An array of strings for labelling instance.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Unique ID to identify a layout.
     */
    public readonly layoutId!: pulumi.Output<number>;
    /**
     * Name of the instance to be provisioned.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Details of the network to which the instance should belong.
     */
    public readonly networks!: pulumi.Output<outputs.VmaasInstanceNetwork[]>;
    /**
     * Unique ID to identify a plan.
     */
    public readonly planId!: pulumi.Output<number>;
    /**
     * Provide port for the instance
     */
    public readonly ports!: pulumi.Output<outputs.VmaasInstancePort[] | undefined>;
    /**
     * Power operation for an instance. Power attribute can be used to update the power state of an existing instance. Allowed
     * power operations are 'poweroff', 'poweron' and 'suspend'. While creating an instance only 'poweron' operation is
     * allowed.
     */
    public readonly power!: pulumi.Output<string | undefined>;
    /**
     * Scheduled power operations
     */
    public readonly powerScheduleId!: pulumi.Output<number | undefined>;
    /**
     * Restarts the instance if set to any positive integer. Restart works only on pre-created instance.
     */
    public readonly restartInstance!: pulumi.Output<number | undefined>;
    /**
     * Number of nodes within an instance.
     */
    public readonly scale!: pulumi.Output<number | undefined>;
    /**
     * Unique ID to identify a server.
     */
    public /*out*/ readonly serverId!: pulumi.Output<number>;
    /**
     * Details for the snapshot to be created. Note that Snapshot name and description should be unique for each snapshot. Any
     * change in name or description will result in the creation of a new snapshot.
     */
    public readonly snapshot!: pulumi.Output<outputs.VmaasInstanceSnapshot | undefined>;
    /**
     * Status of the instance.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A list of key and value pairs used to tag instances of similar type.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A list of volumes to be created inside a provisioned instance. It can have a root volume and other secondary volumes.
     */
    public readonly volumes!: pulumi.Output<outputs.VmaasInstanceVolume[]>;

    /**
     * Create a VmaasInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasInstanceArgs | VmaasInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasInstanceState | undefined;
            resourceInputs["cloudId"] = state ? state.cloudId : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["envPrefix"] = state ? state.envPrefix : undefined;
            resourceInputs["environmentCode"] = state ? state.environmentCode : undefined;
            resourceInputs["evars"] = state ? state.evars : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["histories"] = state ? state.histories : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["instanceTypeCode"] = state ? state.instanceTypeCode : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["layoutId"] = state ? state.layoutId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["power"] = state ? state.power : undefined;
            resourceInputs["powerScheduleId"] = state ? state.powerScheduleId : undefined;
            resourceInputs["restartInstance"] = state ? state.restartInstance : undefined;
            resourceInputs["scale"] = state ? state.scale : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as VmaasInstanceArgs | undefined;
            if ((!args || args.cloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudId'");
            }
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.instanceTypeCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceTypeCode'");
            }
            if ((!args || args.layoutId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layoutId'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.planId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planId'");
            }
            if ((!args || args.volumes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumes'");
            }
            resourceInputs["cloudId"] = args ? args.cloudId : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["envPrefix"] = args ? args.envPrefix : undefined;
            resourceInputs["environmentCode"] = args ? args.environmentCode : undefined;
            resourceInputs["evars"] = args ? args.evars : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["instanceTypeCode"] = args ? args.instanceTypeCode : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["layoutId"] = args ? args.layoutId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["planId"] = args ? args.planId : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["power"] = args ? args.power : undefined;
            resourceInputs["powerScheduleId"] = args ? args.powerScheduleId : undefined;
            resourceInputs["restartInstance"] = args ? args.restartInstance : undefined;
            resourceInputs["scale"] = args ? args.scale : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["containers"] = undefined /*out*/;
            resourceInputs["histories"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasInstance resources.
 */
export interface VmaasInstanceState {
    /**
     * Unique ID to identify a cloud.
     */
    cloudId?: pulumi.Input<number>;
    /**
     * Configuration details for the instance to be provisioned.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.VmaasInstanceConfig>[]>;
    /**
     * Container's details for the instance which contains IP addresses, hostname and other stats
     */
    containers?: pulumi.Input<pulumi.Input<inputs.VmaasInstanceContainer>[]>;
    /**
     * Environment prefix
     */
    envPrefix?: pulumi.Input<string>;
    /**
     * Environment code, which can be obtained via hpegl_vmaas_environment.code
     */
    environmentCode?: pulumi.Input<string>;
    /**
     * Environment Variables to be added to the provisioned instance.
     */
    evars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique ID to identify a group.
     */
    groupId?: pulumi.Input<number>;
    /**
     * History details for the instance
     */
    histories?: pulumi.Input<pulumi.Input<inputs.VmaasInstanceHistory>[]>;
    /**
     * Hostname for the instance
     */
    hostname?: pulumi.Input<string>;
    /**
     * Unique code to identify the instance type.
     */
    instanceTypeCode?: pulumi.Input<string>;
    /**
     * An array of strings for labelling instance.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique ID to identify a layout.
     */
    layoutId?: pulumi.Input<number>;
    /**
     * Name of the instance to be provisioned.
     */
    name?: pulumi.Input<string>;
    /**
     * Details of the network to which the instance should belong.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VmaasInstanceNetwork>[]>;
    /**
     * Unique ID to identify a plan.
     */
    planId?: pulumi.Input<number>;
    /**
     * Provide port for the instance
     */
    ports?: pulumi.Input<pulumi.Input<inputs.VmaasInstancePort>[]>;
    /**
     * Power operation for an instance. Power attribute can be used to update the power state of an existing instance. Allowed
     * power operations are 'poweroff', 'poweron' and 'suspend'. While creating an instance only 'poweron' operation is
     * allowed.
     */
    power?: pulumi.Input<string>;
    /**
     * Scheduled power operations
     */
    powerScheduleId?: pulumi.Input<number>;
    /**
     * Restarts the instance if set to any positive integer. Restart works only on pre-created instance.
     */
    restartInstance?: pulumi.Input<number>;
    /**
     * Number of nodes within an instance.
     */
    scale?: pulumi.Input<number>;
    /**
     * Unique ID to identify a server.
     */
    serverId?: pulumi.Input<number>;
    /**
     * Details for the snapshot to be created. Note that Snapshot name and description should be unique for each snapshot. Any
     * change in name or description will result in the creation of a new snapshot.
     */
    snapshot?: pulumi.Input<inputs.VmaasInstanceSnapshot>;
    /**
     * Status of the instance.
     */
    status?: pulumi.Input<string>;
    /**
     * A list of key and value pairs used to tag instances of similar type.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of volumes to be created inside a provisioned instance. It can have a root volume and other secondary volumes.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.VmaasInstanceVolume>[]>;
}

/**
 * The set of arguments for constructing a VmaasInstance resource.
 */
export interface VmaasInstanceArgs {
    /**
     * Unique ID to identify a cloud.
     */
    cloudId: pulumi.Input<number>;
    /**
     * Configuration details for the instance to be provisioned.
     */
    configs: pulumi.Input<pulumi.Input<inputs.VmaasInstanceConfig>[]>;
    /**
     * Environment prefix
     */
    envPrefix?: pulumi.Input<string>;
    /**
     * Environment code, which can be obtained via hpegl_vmaas_environment.code
     */
    environmentCode?: pulumi.Input<string>;
    /**
     * Environment Variables to be added to the provisioned instance.
     */
    evars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique ID to identify a group.
     */
    groupId: pulumi.Input<number>;
    /**
     * Hostname for the instance
     */
    hostname?: pulumi.Input<string>;
    /**
     * Unique code to identify the instance type.
     */
    instanceTypeCode: pulumi.Input<string>;
    /**
     * An array of strings for labelling instance.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique ID to identify a layout.
     */
    layoutId: pulumi.Input<number>;
    /**
     * Name of the instance to be provisioned.
     */
    name?: pulumi.Input<string>;
    /**
     * Details of the network to which the instance should belong.
     */
    networks: pulumi.Input<pulumi.Input<inputs.VmaasInstanceNetwork>[]>;
    /**
     * Unique ID to identify a plan.
     */
    planId: pulumi.Input<number>;
    /**
     * Provide port for the instance
     */
    ports?: pulumi.Input<pulumi.Input<inputs.VmaasInstancePort>[]>;
    /**
     * Power operation for an instance. Power attribute can be used to update the power state of an existing instance. Allowed
     * power operations are 'poweroff', 'poweron' and 'suspend'. While creating an instance only 'poweron' operation is
     * allowed.
     */
    power?: pulumi.Input<string>;
    /**
     * Scheduled power operations
     */
    powerScheduleId?: pulumi.Input<number>;
    /**
     * Restarts the instance if set to any positive integer. Restart works only on pre-created instance.
     */
    restartInstance?: pulumi.Input<number>;
    /**
     * Number of nodes within an instance.
     */
    scale?: pulumi.Input<number>;
    /**
     * Details for the snapshot to be created. Note that Snapshot name and description should be unique for each snapshot. Any
     * change in name or description will result in the creation of a new snapshot.
     */
    snapshot?: pulumi.Input<inputs.VmaasInstanceSnapshot>;
    /**
     * A list of key and value pairs used to tag instances of similar type.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of volumes to be created inside a provisioned instance. It can have a root volume and other secondary volumes.
     */
    volumes: pulumi.Input<pulumi.Input<inputs.VmaasInstanceVolume>[]>;
}
