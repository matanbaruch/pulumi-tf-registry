// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasLoadBalancerMonitor extends pulumi.CustomResource {
    /**
     * Get an existing VmaasLoadBalancerMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasLoadBalancerMonitorState, opts?: pulumi.CustomResourceOptions): VmaasLoadBalancerMonitor {
        return new VmaasLoadBalancerMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasLoadBalancerMonitor:VmaasLoadBalancerMonitor';

    /**
     * Returns true if the given object is an instance of VmaasLoadBalancerMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasLoadBalancerMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasLoadBalancerMonitor.__pulumiType;
    }

    /**
     * Creating the Network Load balancer Monitor.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * HTTP Monitor configuration
     */
    public readonly httpMonitor!: pulumi.Output<outputs.VmaasLoadBalancerMonitorHttpMonitor | undefined>;
    /**
     * Https Monitor configuration
     */
    public readonly httpsMonitor!: pulumi.Output<outputs.VmaasLoadBalancerMonitorHttpsMonitor | undefined>;
    /**
     * Icmp Monitor configuration
     */
    public readonly icmpMonitor!: pulumi.Output<outputs.VmaasLoadBalancerMonitorIcmpMonitor | undefined>;
    /**
     * Parent lb ID, lb_id can be obtained by using LB datasource/resource.
     */
    public readonly lbId!: pulumi.Output<number>;
    /**
     * Network loadbalancer Monitor name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Passive Monitor configuration
     */
    public readonly passiveMonitor!: pulumi.Output<outputs.VmaasLoadBalancerMonitorPassiveMonitor | undefined>;
    /**
     * Tcp Monitor configuration
     */
    public readonly tcpMonitor!: pulumi.Output<outputs.VmaasLoadBalancerMonitorTcpMonitor | undefined>;
    /**
     * Provide the Supported values for monitor Type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Udp Monitor configuration
     */
    public readonly udpMonitor!: pulumi.Output<outputs.VmaasLoadBalancerMonitorUdpMonitor | undefined>;

    /**
     * Create a VmaasLoadBalancerMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasLoadBalancerMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasLoadBalancerMonitorArgs | VmaasLoadBalancerMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasLoadBalancerMonitorState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["httpMonitor"] = state ? state.httpMonitor : undefined;
            resourceInputs["httpsMonitor"] = state ? state.httpsMonitor : undefined;
            resourceInputs["icmpMonitor"] = state ? state.icmpMonitor : undefined;
            resourceInputs["lbId"] = state ? state.lbId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passiveMonitor"] = state ? state.passiveMonitor : undefined;
            resourceInputs["tcpMonitor"] = state ? state.tcpMonitor : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["udpMonitor"] = state ? state.udpMonitor : undefined;
        } else {
            const args = argsOrState as VmaasLoadBalancerMonitorArgs | undefined;
            if ((!args || args.lbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpMonitor"] = args ? args.httpMonitor : undefined;
            resourceInputs["httpsMonitor"] = args ? args.httpsMonitor : undefined;
            resourceInputs["icmpMonitor"] = args ? args.icmpMonitor : undefined;
            resourceInputs["lbId"] = args ? args.lbId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passiveMonitor"] = args ? args.passiveMonitor : undefined;
            resourceInputs["tcpMonitor"] = args ? args.tcpMonitor : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["udpMonitor"] = args ? args.udpMonitor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasLoadBalancerMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasLoadBalancerMonitor resources.
 */
export interface VmaasLoadBalancerMonitorState {
    /**
     * Creating the Network Load balancer Monitor.
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP Monitor configuration
     */
    httpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorHttpMonitor>;
    /**
     * Https Monitor configuration
     */
    httpsMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorHttpsMonitor>;
    /**
     * Icmp Monitor configuration
     */
    icmpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorIcmpMonitor>;
    /**
     * Parent lb ID, lb_id can be obtained by using LB datasource/resource.
     */
    lbId?: pulumi.Input<number>;
    /**
     * Network loadbalancer Monitor name
     */
    name?: pulumi.Input<string>;
    /**
     * Passive Monitor configuration
     */
    passiveMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorPassiveMonitor>;
    /**
     * Tcp Monitor configuration
     */
    tcpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorTcpMonitor>;
    /**
     * Provide the Supported values for monitor Type
     */
    type?: pulumi.Input<string>;
    /**
     * Udp Monitor configuration
     */
    udpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorUdpMonitor>;
}

/**
 * The set of arguments for constructing a VmaasLoadBalancerMonitor resource.
 */
export interface VmaasLoadBalancerMonitorArgs {
    /**
     * Creating the Network Load balancer Monitor.
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP Monitor configuration
     */
    httpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorHttpMonitor>;
    /**
     * Https Monitor configuration
     */
    httpsMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorHttpsMonitor>;
    /**
     * Icmp Monitor configuration
     */
    icmpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorIcmpMonitor>;
    /**
     * Parent lb ID, lb_id can be obtained by using LB datasource/resource.
     */
    lbId: pulumi.Input<number>;
    /**
     * Network loadbalancer Monitor name
     */
    name?: pulumi.Input<string>;
    /**
     * Passive Monitor configuration
     */
    passiveMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorPassiveMonitor>;
    /**
     * Tcp Monitor configuration
     */
    tcpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorTcpMonitor>;
    /**
     * Provide the Supported values for monitor Type
     */
    type: pulumi.Input<string>;
    /**
     * Udp Monitor configuration
     */
    udpMonitor?: pulumi.Input<inputs.VmaasLoadBalancerMonitorUdpMonitor>;
}
