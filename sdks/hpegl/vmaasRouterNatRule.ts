// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasRouterNatRule extends pulumi.CustomResource {
    /**
     * Get an existing VmaasRouterNatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasRouterNatRuleState, opts?: pulumi.CustomResourceOptions): VmaasRouterNatRule {
        return new VmaasRouterNatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasRouterNatRule:VmaasRouterNatRule';

    /**
     * Returns true if the given object is an instance of VmaasRouterNatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasRouterNatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasRouterNatRule.__pulumiType;
    }

    /**
     * NAT configurations
     */
    public readonly config!: pulumi.Output<outputs.VmaasRouterNatRuleConfig>;
    /**
     * Description for the NAT rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination Network CIDR/IPv4 Address
     */
    public readonly destinationNetwork!: pulumi.Output<string | undefined>;
    /**
     * If `true` then NAT rule will be active/enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the NAT rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority for the rule
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Parent router ID, router_id can be obtained by using router datasource/resource.
     */
    public readonly routerId!: pulumi.Output<number>;
    /**
     * Source Network CIDR/IPv4 Address
     */
    public readonly sourceNetwork!: pulumi.Output<string | undefined>;
    /**
     * Translated Network CIDR/IPv4 Address
     */
    public readonly translatedNetwork!: pulumi.Output<string>;
    /**
     * Translated Network Port
     */
    public readonly translatedPorts!: pulumi.Output<number | undefined>;

    /**
     * Create a VmaasRouterNatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasRouterNatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasRouterNatRuleArgs | VmaasRouterNatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasRouterNatRuleState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationNetwork"] = state ? state.destinationNetwork : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["sourceNetwork"] = state ? state.sourceNetwork : undefined;
            resourceInputs["translatedNetwork"] = state ? state.translatedNetwork : undefined;
            resourceInputs["translatedPorts"] = state ? state.translatedPorts : undefined;
        } else {
            const args = argsOrState as VmaasRouterNatRuleArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            if ((!args || args.translatedNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'translatedNetwork'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationNetwork"] = args ? args.destinationNetwork : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["sourceNetwork"] = args ? args.sourceNetwork : undefined;
            resourceInputs["translatedNetwork"] = args ? args.translatedNetwork : undefined;
            resourceInputs["translatedPorts"] = args ? args.translatedPorts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasRouterNatRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasRouterNatRule resources.
 */
export interface VmaasRouterNatRuleState {
    /**
     * NAT configurations
     */
    config?: pulumi.Input<inputs.VmaasRouterNatRuleConfig>;
    /**
     * Description for the NAT rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination Network CIDR/IPv4 Address
     */
    destinationNetwork?: pulumi.Input<string>;
    /**
     * If `true` then NAT rule will be active/enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the NAT rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority for the rule
     */
    priority?: pulumi.Input<number>;
    /**
     * Parent router ID, router_id can be obtained by using router datasource/resource.
     */
    routerId?: pulumi.Input<number>;
    /**
     * Source Network CIDR/IPv4 Address
     */
    sourceNetwork?: pulumi.Input<string>;
    /**
     * Translated Network CIDR/IPv4 Address
     */
    translatedNetwork?: pulumi.Input<string>;
    /**
     * Translated Network Port
     */
    translatedPorts?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VmaasRouterNatRule resource.
 */
export interface VmaasRouterNatRuleArgs {
    /**
     * NAT configurations
     */
    config: pulumi.Input<inputs.VmaasRouterNatRuleConfig>;
    /**
     * Description for the NAT rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination Network CIDR/IPv4 Address
     */
    destinationNetwork?: pulumi.Input<string>;
    /**
     * If `true` then NAT rule will be active/enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the NAT rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority for the rule
     */
    priority?: pulumi.Input<number>;
    /**
     * Parent router ID, router_id can be obtained by using router datasource/resource.
     */
    routerId: pulumi.Input<number>;
    /**
     * Source Network CIDR/IPv4 Address
     */
    sourceNetwork?: pulumi.Input<string>;
    /**
     * Translated Network CIDR/IPv4 Address
     */
    translatedNetwork: pulumi.Input<string>;
    /**
     * Translated Network Port
     */
    translatedPorts?: pulumi.Input<number>;
}
