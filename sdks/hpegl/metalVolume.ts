// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MetalVolume extends pulumi.CustomResource {
    /**
     * Get an existing MetalVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetalVolumeState, opts?: pulumi.CustomResourceOptions): MetalVolume {
        return new MetalVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/metalVolume:MetalVolume';

    /**
     * Returns true if the given object is an instance of MetalVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetalVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetalVolume.__pulumiType;
    }

    /**
     * A wordy description of the volume and purpose.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The flavor of the volume to be created.
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * The flavor of the volume to be created.
     */
    public /*out*/ readonly flavorId!: pulumi.Output<string>;
    /**
     * The volume labels as (name, value) pairs.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Location of the volume country:region:data-center.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * LocationID.
     */
    public /*out*/ readonly locationId!: pulumi.Output<string>;
    /**
     * A friendly name of the volume.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The volume can be shared by multiple hosts if set.
     */
    public readonly shareable!: pulumi.Output<boolean | undefined>;
    /**
     * The minimum size of the volume specified in units of GBytes.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The volume provisioning state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The volume provisioning status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The storage pool of the volume to be created.
     */
    public readonly storagePool!: pulumi.Output<string | undefined>;
    /**
     * The storage pool of the volume to be created.
     */
    public /*out*/ readonly storagePoolId!: pulumi.Output<string>;
    /**
     * The volume collection of the volume to be created.
     */
    public readonly volumeCollection!: pulumi.Output<string | undefined>;
    /**
     * The volume collection ID of the volume to be created.
     */
    public readonly volumeCollectionId!: pulumi.Output<string>;
    /**
     * The volume serial number.
     */
    public /*out*/ readonly wwn!: pulumi.Output<string>;

    /**
     * Create a MetalVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetalVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetalVolumeArgs | MetalVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetalVolumeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["shareable"] = state ? state.shareable : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storagePool"] = state ? state.storagePool : undefined;
            resourceInputs["storagePoolId"] = state ? state.storagePoolId : undefined;
            resourceInputs["volumeCollection"] = state ? state.volumeCollection : undefined;
            resourceInputs["volumeCollectionId"] = state ? state.volumeCollectionId : undefined;
            resourceInputs["wwn"] = state ? state.wwn : undefined;
        } else {
            const args = argsOrState as MetalVolumeArgs | undefined;
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["shareable"] = args ? args.shareable : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storagePool"] = args ? args.storagePool : undefined;
            resourceInputs["volumeCollection"] = args ? args.volumeCollection : undefined;
            resourceInputs["volumeCollectionId"] = args ? args.volumeCollectionId : undefined;
            resourceInputs["flavorId"] = undefined /*out*/;
            resourceInputs["locationId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storagePoolId"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetalVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetalVolume resources.
 */
export interface MetalVolumeState {
    /**
     * A wordy description of the volume and purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The flavor of the volume to be created.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The flavor of the volume to be created.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * The volume labels as (name, value) pairs.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the volume country:region:data-center.
     */
    location?: pulumi.Input<string>;
    /**
     * LocationID.
     */
    locationId?: pulumi.Input<string>;
    /**
     * A friendly name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The volume can be shared by multiple hosts if set.
     */
    shareable?: pulumi.Input<boolean>;
    /**
     * The minimum size of the volume specified in units of GBytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The volume provisioning state.
     */
    state?: pulumi.Input<string>;
    /**
     * The volume provisioning status.
     */
    status?: pulumi.Input<string>;
    /**
     * The storage pool of the volume to be created.
     */
    storagePool?: pulumi.Input<string>;
    /**
     * The storage pool of the volume to be created.
     */
    storagePoolId?: pulumi.Input<string>;
    /**
     * The volume collection of the volume to be created.
     */
    volumeCollection?: pulumi.Input<string>;
    /**
     * The volume collection ID of the volume to be created.
     */
    volumeCollectionId?: pulumi.Input<string>;
    /**
     * The volume serial number.
     */
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetalVolume resource.
 */
export interface MetalVolumeArgs {
    /**
     * A wordy description of the volume and purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The flavor of the volume to be created.
     */
    flavor: pulumi.Input<string>;
    /**
     * The volume labels as (name, value) pairs.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Location of the volume country:region:data-center.
     */
    location: pulumi.Input<string>;
    /**
     * A friendly name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The volume can be shared by multiple hosts if set.
     */
    shareable?: pulumi.Input<boolean>;
    /**
     * The minimum size of the volume specified in units of GBytes.
     */
    size: pulumi.Input<number>;
    /**
     * The storage pool of the volume to be created.
     */
    storagePool?: pulumi.Input<string>;
    /**
     * The volume collection of the volume to be created.
     */
    volumeCollection?: pulumi.Input<string>;
    /**
     * The volume collection ID of the volume to be created.
     */
    volumeCollectionId?: pulumi.Input<string>;
}
