// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasLoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing VmaasLoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasLoadBalancerState, opts?: pulumi.CustomResourceOptions): VmaasLoadBalancer {
        return new VmaasLoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasLoadBalancer:VmaasLoadBalancer';

    /**
     * Returns true if the given object is an instance of VmaasLoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasLoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasLoadBalancer.__pulumiType;
    }

    /**
     * Network Load Balancer Configuration
     */
    public readonly configs!: pulumi.Output<outputs.VmaasLoadBalancerConfig[]>;
    /**
     * Creating the Network loadbalancer
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Pass `true` to allow for enabled and Pass `false` to disabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly groupAccess!: pulumi.Output<outputs.VmaasLoadBalancerGroupAccess | undefined>;
    /**
     * Type of Network loadbalancer
     */
    public /*out*/ readonly lbType!: pulumi.Output<string>;
    /**
     * Network loadbalancer name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NSX-T Integration ID
     */
    public /*out*/ readonly networkServerId!: pulumi.Output<number>;

    /**
     * Create a VmaasLoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasLoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasLoadBalancerArgs | VmaasLoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasLoadBalancerState | undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupAccess"] = state ? state.groupAccess : undefined;
            resourceInputs["lbType"] = state ? state.lbType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkServerId"] = state ? state.networkServerId : undefined;
        } else {
            const args = argsOrState as VmaasLoadBalancerArgs | undefined;
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupAccess"] = args ? args.groupAccess : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["lbType"] = undefined /*out*/;
            resourceInputs["networkServerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasLoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasLoadBalancer resources.
 */
export interface VmaasLoadBalancerState {
    /**
     * Network Load Balancer Configuration
     */
    configs?: pulumi.Input<pulumi.Input<inputs.VmaasLoadBalancerConfig>[]>;
    /**
     * Creating the Network loadbalancer
     */
    description?: pulumi.Input<string>;
    /**
     * Pass `true` to allow for enabled and Pass `false` to disabled
     */
    enabled?: pulumi.Input<boolean>;
    groupAccess?: pulumi.Input<inputs.VmaasLoadBalancerGroupAccess>;
    /**
     * Type of Network loadbalancer
     */
    lbType?: pulumi.Input<string>;
    /**
     * Network loadbalancer name
     */
    name?: pulumi.Input<string>;
    /**
     * NSX-T Integration ID
     */
    networkServerId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VmaasLoadBalancer resource.
 */
export interface VmaasLoadBalancerArgs {
    /**
     * Network Load Balancer Configuration
     */
    configs: pulumi.Input<pulumi.Input<inputs.VmaasLoadBalancerConfig>[]>;
    /**
     * Creating the Network loadbalancer
     */
    description?: pulumi.Input<string>;
    /**
     * Pass `true` to allow for enabled and Pass `false` to disabled
     */
    enabled?: pulumi.Input<boolean>;
    groupAccess?: pulumi.Input<inputs.VmaasLoadBalancerGroupAccess>;
    /**
     * Network loadbalancer name
     */
    name?: pulumi.Input<string>;
}
