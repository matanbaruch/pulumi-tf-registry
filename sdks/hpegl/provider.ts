// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the hpegl package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'hpegl';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The IAM service URL to be used to generate tokens. In the case of GLCS API clients (the default) then this should be set
     * to the "issuer url" for the client. In the case of GLP API clients use the appropriate "Token URL" from the API screen.
     * Can be set by HPEGL_IAM_SERVICE_URL env-var
     */
    public readonly iamServiceUrl!: pulumi.Output<string | undefined>;
    /**
     * The IAM token to be used with the client(s). Note that in normal operation an API client is used. Passing-in a token
     * means that tokens will not be generated or refreshed.
     */
    public readonly iamToken!: pulumi.Output<string | undefined>;
    /**
     * The IAM version to be used. Can be set by HPEGL_IAM_VERSION env-var. Valid values are: [glcs glp]The default is glcs.
     */
    public readonly iamVersion!: pulumi.Output<string | undefined>;
    /**
     * The tenant-id to be used for GLCS IAM, can be set by HPEGL_TENANT_ID env-var
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;
    /**
     * The user id to be used, can be set by HPEGL_USER_ID env-var
     */
    public readonly userId!: pulumi.Output<string | undefined>;
    /**
     * The user secret to be used, can be set by HPEGL_USER_SECRET env-var
     */
    public readonly userSecret!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["apiVendedServiceClient"] = pulumi.output(args ? args.apiVendedServiceClient : undefined).apply(JSON.stringify);
            resourceInputs["caas"] = pulumi.output(args ? args.caas : undefined).apply(JSON.stringify);
            resourceInputs["iamServiceUrl"] = args ? args.iamServiceUrl : undefined;
            resourceInputs["iamToken"] = args ? args.iamToken : undefined;
            resourceInputs["iamVersion"] = args ? args.iamVersion : undefined;
            resourceInputs["metal"] = pulumi.output(args ? args.metal : undefined).apply(JSON.stringify);
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userSecret"] = args ? args.userSecret : undefined;
            resourceInputs["vmaas"] = pulumi.output(args ? args.vmaas : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Declare if the API client being used is an API-vended one or not. Defaults to "true" i.e. the client is API-vended. The
     * value can be set using the HPEGL_API_VENDED_SERVICE_CLIENT env-var.
     */
    apiVendedServiceClient?: pulumi.Input<boolean>;
    caas?: pulumi.Input<inputs.ProviderCaas>;
    /**
     * The IAM service URL to be used to generate tokens. In the case of GLCS API clients (the default) then this should be set
     * to the "issuer url" for the client. In the case of GLP API clients use the appropriate "Token URL" from the API screen.
     * Can be set by HPEGL_IAM_SERVICE_URL env-var
     */
    iamServiceUrl?: pulumi.Input<string>;
    /**
     * The IAM token to be used with the client(s). Note that in normal operation an API client is used. Passing-in a token
     * means that tokens will not be generated or refreshed.
     */
    iamToken?: pulumi.Input<string>;
    /**
     * The IAM version to be used. Can be set by HPEGL_IAM_VERSION env-var. Valid values are: [glcs glp]The default is glcs.
     */
    iamVersion?: pulumi.Input<string>;
    metal?: pulumi.Input<inputs.ProviderMetal>;
    /**
     * The tenant-id to be used for GLCS IAM, can be set by HPEGL_TENANT_ID env-var
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The user id to be used, can be set by HPEGL_USER_ID env-var
     */
    userId?: pulumi.Input<string>;
    /**
     * The user secret to be used, can be set by HPEGL_USER_SECRET env-var
     */
    userSecret?: pulumi.Input<string>;
    vmaas?: pulumi.Input<inputs.ProviderVmaas>;
}
