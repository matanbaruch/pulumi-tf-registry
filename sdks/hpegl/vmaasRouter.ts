// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasRouter extends pulumi.CustomResource {
    /**
     * Get an existing VmaasRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasRouterState, opts?: pulumi.CustomResourceOptions): VmaasRouter {
        return new VmaasRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasRouter:VmaasRouter';

    /**
     * Returns true if the given object is an instance of VmaasRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasRouter.__pulumiType;
    }

    /**
     * Enables or disables the network router
     */
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * Group ID. Available values are either 'Shared' or ID fetched from hpegl_vmaas_group
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Interface Configuration
     */
    public /*out*/ readonly interfaces!: pulumi.Output<outputs.VmaasRouterInterface[]>;
    /**
     * Network router name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NSX-T Integration ID
     */
    public /*out*/ readonly networkServerId!: pulumi.Output<number>;
    /**
     * Provider ID of the Network Router
     */
    public /*out*/ readonly providerId!: pulumi.Output<string>;
    /**
     * Tier0 Gateway configuration
     */
    public readonly tier0Config!: pulumi.Output<outputs.VmaasRouterTier0Config | undefined>;
    /**
     * Tier1 Gateway configuration
     */
    public readonly tier1Config!: pulumi.Output<outputs.VmaasRouterTier1Config | undefined>;
    /**
     * Network router type ID.
     */
    public /*out*/ readonly typeId!: pulumi.Output<number>;

    /**
     * Create a VmaasRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasRouterArgs | VmaasRouterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasRouterState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkServerId"] = state ? state.networkServerId : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
            resourceInputs["tier0Config"] = state ? state.tier0Config : undefined;
            resourceInputs["tier1Config"] = state ? state.tier1Config : undefined;
            resourceInputs["typeId"] = state ? state.typeId : undefined;
        } else {
            const args = argsOrState as VmaasRouterArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tier0Config"] = args ? args.tier0Config : undefined;
            resourceInputs["tier1Config"] = args ? args.tier1Config : undefined;
            resourceInputs["interfaces"] = undefined /*out*/;
            resourceInputs["networkServerId"] = undefined /*out*/;
            resourceInputs["providerId"] = undefined /*out*/;
            resourceInputs["typeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasRouter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasRouter resources.
 */
export interface VmaasRouterState {
    /**
     * Enables or disables the network router
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Group ID. Available values are either 'Shared' or ID fetched from hpegl_vmaas_group
     */
    groupId?: pulumi.Input<string>;
    /**
     * Interface Configuration
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.VmaasRouterInterface>[]>;
    /**
     * Network router name
     */
    name?: pulumi.Input<string>;
    /**
     * NSX-T Integration ID
     */
    networkServerId?: pulumi.Input<number>;
    /**
     * Provider ID of the Network Router
     */
    providerId?: pulumi.Input<string>;
    /**
     * Tier0 Gateway configuration
     */
    tier0Config?: pulumi.Input<inputs.VmaasRouterTier0Config>;
    /**
     * Tier1 Gateway configuration
     */
    tier1Config?: pulumi.Input<inputs.VmaasRouterTier1Config>;
    /**
     * Network router type ID.
     */
    typeId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VmaasRouter resource.
 */
export interface VmaasRouterArgs {
    /**
     * Enables or disables the network router
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Group ID. Available values are either 'Shared' or ID fetched from hpegl_vmaas_group
     */
    groupId: pulumi.Input<string>;
    /**
     * Network router name
     */
    name?: pulumi.Input<string>;
    /**
     * Tier0 Gateway configuration
     */
    tier0Config?: pulumi.Input<inputs.VmaasRouterTier0Config>;
    /**
     * Tier1 Gateway configuration
     */
    tier1Config?: pulumi.Input<inputs.VmaasRouterTier1Config>;
}
