// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmaasLoadBalancerVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing VmaasLoadBalancerVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmaasLoadBalancerVirtualServerState, opts?: pulumi.CustomResourceOptions): VmaasLoadBalancerVirtualServer {
        return new VmaasLoadBalancerVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/vmaasLoadBalancerVirtualServer:VmaasLoadBalancerVirtualServer';

    /**
     * Returns true if the given object is an instance of VmaasLoadBalancerVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmaasLoadBalancerVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmaasLoadBalancerVirtualServer.__pulumiType;
    }

    /**
     * Cookie profile configuration
     */
    public readonly cookiePersistenceProfile!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerCookiePersistenceProfile | undefined>;
    /**
     * Description of Network loadbalancer virtual server
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * HTTP Profile configuration
     */
    public readonly httpApplicationProfile!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerHttpApplicationProfile | undefined>;
    /**
     * Parent lb ID, lb_id can be obtained by using LB datasource/resource.
     */
    public readonly lbId!: pulumi.Output<number>;
    /**
     * Name of Network loadbalancer virtual server name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Persistence type for Network loadbalancer virtual server
     */
    public readonly persistence!: pulumi.Output<string | undefined>;
    /**
     * Pool Id, Get the `id` from hpegl.VmaasLoadBalancerPool datasource to obtain the Pool Id, It is recommended that you
     * attach a pool to the Virtual Server to have a correct LB functionality
     */
    public readonly pool!: pulumi.Output<number>;
    /**
     * HTTP profile configuration
     */
    public readonly sourceipPersistenceProfile!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerSourceipPersistenceProfile | undefined>;
    /**
     * ssl_client_cert Id, Get the `id` from hpegl.getVmaasLoadBalancerVirtualServerSslCert datasource to obtain the
     * ssl_client_cert Id, SSLClientCert is needed only for https based load balancer
     */
    public readonly sslClientCert!: pulumi.Output<number>;
    /**
     * virtual server Configuration
     */
    public readonly sslClientConfigs!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerSslClientConfig[] | undefined>;
    /**
     * ssl_server_cert Id, Get the `id` from hpegl.getVmaasLoadBalancerVirtualServerSslCert datasource to obtain the
     * ssl_server_cert Id, SSLServerCert is needed only for https based load balancer
     */
    public readonly sslServerCert!: pulumi.Output<number>;
    /**
     * virtual server Configuration
     */
    public readonly sslServerConfigs!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerSslServerConfig[] | undefined>;
    /**
     * TCP Profile configuration
     */
    public readonly tcpApplicationProfile!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerTcpApplicationProfile | undefined>;
    /**
     * Vip protocol of Network loadbalancer virtual server
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * UDP profile configuration
     */
    public readonly udpApplicationProfile!: pulumi.Output<outputs.VmaasLoadBalancerVirtualServerUdpApplicationProfile | undefined>;
    /**
     * Vip_address of Network loadbalancer virtual server
     */
    public readonly vipAddress!: pulumi.Output<string>;
    /**
     * Vip_port of network loadbalancer virtual server
     */
    public readonly vipPort!: pulumi.Output<string>;

    /**
     * Create a VmaasLoadBalancerVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmaasLoadBalancerVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmaasLoadBalancerVirtualServerArgs | VmaasLoadBalancerVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmaasLoadBalancerVirtualServerState | undefined;
            resourceInputs["cookiePersistenceProfile"] = state ? state.cookiePersistenceProfile : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["httpApplicationProfile"] = state ? state.httpApplicationProfile : undefined;
            resourceInputs["lbId"] = state ? state.lbId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["sourceipPersistenceProfile"] = state ? state.sourceipPersistenceProfile : undefined;
            resourceInputs["sslClientCert"] = state ? state.sslClientCert : undefined;
            resourceInputs["sslClientConfigs"] = state ? state.sslClientConfigs : undefined;
            resourceInputs["sslServerCert"] = state ? state.sslServerCert : undefined;
            resourceInputs["sslServerConfigs"] = state ? state.sslServerConfigs : undefined;
            resourceInputs["tcpApplicationProfile"] = state ? state.tcpApplicationProfile : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["udpApplicationProfile"] = state ? state.udpApplicationProfile : undefined;
            resourceInputs["vipAddress"] = state ? state.vipAddress : undefined;
            resourceInputs["vipPort"] = state ? state.vipPort : undefined;
        } else {
            const args = argsOrState as VmaasLoadBalancerVirtualServerArgs | undefined;
            if ((!args || args.lbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbId'");
            }
            if ((!args || args.pool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pool'");
            }
            if ((!args || args.sslClientCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslClientCert'");
            }
            if ((!args || args.sslServerCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslServerCert'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.vipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vipAddress'");
            }
            if ((!args || args.vipPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vipPort'");
            }
            resourceInputs["cookiePersistenceProfile"] = args ? args.cookiePersistenceProfile : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpApplicationProfile"] = args ? args.httpApplicationProfile : undefined;
            resourceInputs["lbId"] = args ? args.lbId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["sourceipPersistenceProfile"] = args ? args.sourceipPersistenceProfile : undefined;
            resourceInputs["sslClientCert"] = args ? args.sslClientCert : undefined;
            resourceInputs["sslClientConfigs"] = args ? args.sslClientConfigs : undefined;
            resourceInputs["sslServerCert"] = args ? args.sslServerCert : undefined;
            resourceInputs["sslServerConfigs"] = args ? args.sslServerConfigs : undefined;
            resourceInputs["tcpApplicationProfile"] = args ? args.tcpApplicationProfile : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["udpApplicationProfile"] = args ? args.udpApplicationProfile : undefined;
            resourceInputs["vipAddress"] = args ? args.vipAddress : undefined;
            resourceInputs["vipPort"] = args ? args.vipPort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmaasLoadBalancerVirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmaasLoadBalancerVirtualServer resources.
 */
export interface VmaasLoadBalancerVirtualServerState {
    /**
     * Cookie profile configuration
     */
    cookiePersistenceProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerCookiePersistenceProfile>;
    /**
     * Description of Network loadbalancer virtual server
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP Profile configuration
     */
    httpApplicationProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerHttpApplicationProfile>;
    /**
     * Parent lb ID, lb_id can be obtained by using LB datasource/resource.
     */
    lbId?: pulumi.Input<number>;
    /**
     * Name of Network loadbalancer virtual server name
     */
    name?: pulumi.Input<string>;
    /**
     * Persistence type for Network loadbalancer virtual server
     */
    persistence?: pulumi.Input<string>;
    /**
     * Pool Id, Get the `id` from hpegl.VmaasLoadBalancerPool datasource to obtain the Pool Id, It is recommended that you
     * attach a pool to the Virtual Server to have a correct LB functionality
     */
    pool?: pulumi.Input<number>;
    /**
     * HTTP profile configuration
     */
    sourceipPersistenceProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerSourceipPersistenceProfile>;
    /**
     * ssl_client_cert Id, Get the `id` from hpegl.getVmaasLoadBalancerVirtualServerSslCert datasource to obtain the
     * ssl_client_cert Id, SSLClientCert is needed only for https based load balancer
     */
    sslClientCert?: pulumi.Input<number>;
    /**
     * virtual server Configuration
     */
    sslClientConfigs?: pulumi.Input<pulumi.Input<inputs.VmaasLoadBalancerVirtualServerSslClientConfig>[]>;
    /**
     * ssl_server_cert Id, Get the `id` from hpegl.getVmaasLoadBalancerVirtualServerSslCert datasource to obtain the
     * ssl_server_cert Id, SSLServerCert is needed only for https based load balancer
     */
    sslServerCert?: pulumi.Input<number>;
    /**
     * virtual server Configuration
     */
    sslServerConfigs?: pulumi.Input<pulumi.Input<inputs.VmaasLoadBalancerVirtualServerSslServerConfig>[]>;
    /**
     * TCP Profile configuration
     */
    tcpApplicationProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerTcpApplicationProfile>;
    /**
     * Vip protocol of Network loadbalancer virtual server
     */
    type?: pulumi.Input<string>;
    /**
     * UDP profile configuration
     */
    udpApplicationProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerUdpApplicationProfile>;
    /**
     * Vip_address of Network loadbalancer virtual server
     */
    vipAddress?: pulumi.Input<string>;
    /**
     * Vip_port of network loadbalancer virtual server
     */
    vipPort?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmaasLoadBalancerVirtualServer resource.
 */
export interface VmaasLoadBalancerVirtualServerArgs {
    /**
     * Cookie profile configuration
     */
    cookiePersistenceProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerCookiePersistenceProfile>;
    /**
     * Description of Network loadbalancer virtual server
     */
    description?: pulumi.Input<string>;
    /**
     * HTTP Profile configuration
     */
    httpApplicationProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerHttpApplicationProfile>;
    /**
     * Parent lb ID, lb_id can be obtained by using LB datasource/resource.
     */
    lbId: pulumi.Input<number>;
    /**
     * Name of Network loadbalancer virtual server name
     */
    name?: pulumi.Input<string>;
    /**
     * Persistence type for Network loadbalancer virtual server
     */
    persistence?: pulumi.Input<string>;
    /**
     * Pool Id, Get the `id` from hpegl.VmaasLoadBalancerPool datasource to obtain the Pool Id, It is recommended that you
     * attach a pool to the Virtual Server to have a correct LB functionality
     */
    pool: pulumi.Input<number>;
    /**
     * HTTP profile configuration
     */
    sourceipPersistenceProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerSourceipPersistenceProfile>;
    /**
     * ssl_client_cert Id, Get the `id` from hpegl.getVmaasLoadBalancerVirtualServerSslCert datasource to obtain the
     * ssl_client_cert Id, SSLClientCert is needed only for https based load balancer
     */
    sslClientCert: pulumi.Input<number>;
    /**
     * virtual server Configuration
     */
    sslClientConfigs?: pulumi.Input<pulumi.Input<inputs.VmaasLoadBalancerVirtualServerSslClientConfig>[]>;
    /**
     * ssl_server_cert Id, Get the `id` from hpegl.getVmaasLoadBalancerVirtualServerSslCert datasource to obtain the
     * ssl_server_cert Id, SSLServerCert is needed only for https based load balancer
     */
    sslServerCert: pulumi.Input<number>;
    /**
     * virtual server Configuration
     */
    sslServerConfigs?: pulumi.Input<pulumi.Input<inputs.VmaasLoadBalancerVirtualServerSslServerConfig>[]>;
    /**
     * TCP Profile configuration
     */
    tcpApplicationProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerTcpApplicationProfile>;
    /**
     * Vip protocol of Network loadbalancer virtual server
     */
    type: pulumi.Input<string>;
    /**
     * UDP profile configuration
     */
    udpApplicationProfile?: pulumi.Input<inputs.VmaasLoadBalancerVirtualServerUdpApplicationProfile>;
    /**
     * Vip_address of Network loadbalancer virtual server
     */
    vipAddress: pulumi.Input<string>;
    /**
     * Vip_port of network loadbalancer virtual server
     */
    vipPort: pulumi.Input<string>;
}
