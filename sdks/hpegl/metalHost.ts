// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MetalHost extends pulumi.CustomResource {
    /**
     * Get an existing MetalHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetalHostState, opts?: pulumi.CustomResourceOptions): MetalHost {
        return new MetalHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hpegl:index/metalHost:MetalHost';

    /**
     * Returns true if the given object is an instance of MetalHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetalHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetalHost.__pulumiType;
    }

    /**
     * List of pre-allocated IP addresses in one-to-one correspondance wth Networks.
     */
    public readonly allocatedIps!: pulumi.Output<string[] | undefined>;
    /**
     * The iSCSI CHAP secret for this host.
     */
    public /*out*/ readonly chapSecret!: pulumi.Output<string>;
    /**
     * The iSCSI CHAP name for this host.
     */
    public /*out*/ readonly chapUser!: pulumi.Output<string>;
    /**
     * A map of network connection name to assigned IP addrese, eg {'Private':'10.83.0.17'}.
     */
    public /*out*/ readonly connections!: pulumi.Output<{[key: string]: string}>;
    /**
     * A map of network connection name to gateway IP address.
     */
    public /*out*/ readonly connectionsGateway!: pulumi.Output<{[key: string]: string}>;
    /**
     * A map of network connection name to subnet IP address.
     */
    public /*out*/ readonly connectionsSubnet!: pulumi.Output<{[key: string]: string}>;
    /**
     * A map of network connection name to VLAN ID.
     */
    public /*out*/ readonly connectionsVlan!: pulumi.Output<{[key: string]: number}>;
    /**
     * A wordy description of the machine and purpose.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * set true to do host create, update, and delete asynchronously. The default is true.
     */
    public readonly hostActionAsync!: pulumi.Output<boolean | undefined>;
    /**
     * A specific flavor and version in the form of flavor@version, eg 'ubuntu@18.04'.
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * The iSCSI initiator name for this host.
     */
    public readonly initiatorName!: pulumi.Output<string>;
    /**
     * map of label name to label value for this host
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The location of where the machine will be provisioned, of the form 'country:region:centre', eg 'USA:Texas:AUSL2'.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * UUID of the location
     */
    public /*out*/ readonly locationId!: pulumi.Output<string>;
    /**
     * Some generic sizing information for the machine like 'Small', 'Very Large'.
     */
    public readonly machineSize!: pulumi.Output<string>;
    /**
     * Machine size ID
     */
    public /*out*/ readonly machineSizeId!: pulumi.Output<string>;
    /**
     * Any friendly name to identify the host that will become the OS hostname in lower case.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of network UUIDs.
     */
    public /*out*/ readonly networkIds!: pulumi.Output<string[]>;
    /**
     * Network selected for the default route
     */
    public readonly networkRoute!: pulumi.Output<string | undefined>;
    /**
     * Network ID of the default route
     */
    public /*out*/ readonly networkRouteId!: pulumi.Output<string>;
    /**
     * Untagged network
     */
    public readonly networkUntagged!: pulumi.Output<string | undefined>;
    /**
     * Untagged network ID
     */
    public /*out*/ readonly networkUntaggedId!: pulumi.Output<string>;
    /**
     * List of network name e.g. ['Public', 'Private'].
     */
    public readonly networks!: pulumi.Output<string[]>;
    /**
     * The current portal communication state of the host
     */
    public /*out*/ readonly portalCommOkay!: pulumi.Output<boolean>;
    /**
     * The current power state of the host
     */
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    public /*out*/ readonly sshIds!: pulumi.Output<string[]>;
    /**
     * A list of SSH keys that will be pushed to the host.
     */
    public readonly sshes!: pulumi.Output<string[]>;
    /**
     * The current state of the host
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The current state of the deployment
     */
    public /*out*/ readonly subState!: pulumi.Output<string>;
    /**
     * The current health status of the host
     */
    public /*out*/ readonly summaryStatus!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MetalHostTimeouts | undefined>;
    /**
     * Any yaml compliant string that will be merged into cloud-init for this host.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * List of existing volume IDs
     */
    public readonly volumeAttachments!: pulumi.Output<string[] | undefined>;
    /**
     * Information about volumes attached to this host.
     */
    public readonly volumeInfos!: pulumi.Output<outputs.MetalHostVolumeInfo[] | undefined>;
    /**
     * FC HBA world wide port names.
     */
    public /*out*/ readonly wwpns!: pulumi.Output<string[]>;

    /**
     * Create a MetalHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetalHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetalHostArgs | MetalHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetalHostState | undefined;
            resourceInputs["allocatedIps"] = state ? state.allocatedIps : undefined;
            resourceInputs["chapSecret"] = state ? state.chapSecret : undefined;
            resourceInputs["chapUser"] = state ? state.chapUser : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["connectionsGateway"] = state ? state.connectionsGateway : undefined;
            resourceInputs["connectionsSubnet"] = state ? state.connectionsSubnet : undefined;
            resourceInputs["connectionsVlan"] = state ? state.connectionsVlan : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostActionAsync"] = state ? state.hostActionAsync : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["initiatorName"] = state ? state.initiatorName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["machineSize"] = state ? state.machineSize : undefined;
            resourceInputs["machineSizeId"] = state ? state.machineSizeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkIds"] = state ? state.networkIds : undefined;
            resourceInputs["networkRoute"] = state ? state.networkRoute : undefined;
            resourceInputs["networkRouteId"] = state ? state.networkRouteId : undefined;
            resourceInputs["networkUntagged"] = state ? state.networkUntagged : undefined;
            resourceInputs["networkUntaggedId"] = state ? state.networkUntaggedId : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["portalCommOkay"] = state ? state.portalCommOkay : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["sshIds"] = state ? state.sshIds : undefined;
            resourceInputs["sshes"] = state ? state.sshes : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subState"] = state ? state.subState : undefined;
            resourceInputs["summaryStatus"] = state ? state.summaryStatus : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["volumeAttachments"] = state ? state.volumeAttachments : undefined;
            resourceInputs["volumeInfos"] = state ? state.volumeInfos : undefined;
            resourceInputs["wwpns"] = state ? state.wwpns : undefined;
        } else {
            const args = argsOrState as MetalHostArgs | undefined;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.machineSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineSize'");
            }
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if ((!args || args.sshes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshes'");
            }
            resourceInputs["allocatedIps"] = args ? args.allocatedIps : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hostActionAsync"] = args ? args.hostActionAsync : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["initiatorName"] = args ? args.initiatorName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["machineSize"] = args ? args.machineSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRoute"] = args ? args.networkRoute : undefined;
            resourceInputs["networkUntagged"] = args ? args.networkUntagged : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["sshes"] = args ? args.sshes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["volumeAttachments"] = args ? args.volumeAttachments : undefined;
            resourceInputs["volumeInfos"] = args ? args.volumeInfos : undefined;
            resourceInputs["chapSecret"] = undefined /*out*/;
            resourceInputs["chapUser"] = undefined /*out*/;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["connectionsGateway"] = undefined /*out*/;
            resourceInputs["connectionsSubnet"] = undefined /*out*/;
            resourceInputs["connectionsVlan"] = undefined /*out*/;
            resourceInputs["locationId"] = undefined /*out*/;
            resourceInputs["machineSizeId"] = undefined /*out*/;
            resourceInputs["networkIds"] = undefined /*out*/;
            resourceInputs["networkRouteId"] = undefined /*out*/;
            resourceInputs["networkUntaggedId"] = undefined /*out*/;
            resourceInputs["portalCommOkay"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["sshIds"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["subState"] = undefined /*out*/;
            resourceInputs["summaryStatus"] = undefined /*out*/;
            resourceInputs["wwpns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetalHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetalHost resources.
 */
export interface MetalHostState {
    /**
     * List of pre-allocated IP addresses in one-to-one correspondance wth Networks.
     */
    allocatedIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The iSCSI CHAP secret for this host.
     */
    chapSecret?: pulumi.Input<string>;
    /**
     * The iSCSI CHAP name for this host.
     */
    chapUser?: pulumi.Input<string>;
    /**
     * A map of network connection name to assigned IP addrese, eg {'Private':'10.83.0.17'}.
     */
    connections?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of network connection name to gateway IP address.
     */
    connectionsGateway?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of network connection name to subnet IP address.
     */
    connectionsSubnet?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of network connection name to VLAN ID.
     */
    connectionsVlan?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * A wordy description of the machine and purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * set true to do host create, update, and delete asynchronously. The default is true.
     */
    hostActionAsync?: pulumi.Input<boolean>;
    /**
     * A specific flavor and version in the form of flavor@version, eg 'ubuntu@18.04'.
     */
    image?: pulumi.Input<string>;
    /**
     * The iSCSI initiator name for this host.
     */
    initiatorName?: pulumi.Input<string>;
    /**
     * map of label name to label value for this host
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of where the machine will be provisioned, of the form 'country:region:centre', eg 'USA:Texas:AUSL2'.
     */
    location?: pulumi.Input<string>;
    /**
     * UUID of the location
     */
    locationId?: pulumi.Input<string>;
    /**
     * Some generic sizing information for the machine like 'Small', 'Very Large'.
     */
    machineSize?: pulumi.Input<string>;
    /**
     * Machine size ID
     */
    machineSizeId?: pulumi.Input<string>;
    /**
     * Any friendly name to identify the host that will become the OS hostname in lower case.
     */
    name?: pulumi.Input<string>;
    /**
     * List of network UUIDs.
     */
    networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network selected for the default route
     */
    networkRoute?: pulumi.Input<string>;
    /**
     * Network ID of the default route
     */
    networkRouteId?: pulumi.Input<string>;
    /**
     * Untagged network
     */
    networkUntagged?: pulumi.Input<string>;
    /**
     * Untagged network ID
     */
    networkUntaggedId?: pulumi.Input<string>;
    /**
     * List of network name e.g. ['Public', 'Private'].
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The current portal communication state of the host
     */
    portalCommOkay?: pulumi.Input<boolean>;
    /**
     * The current power state of the host
     */
    powerState?: pulumi.Input<string>;
    sshIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of SSH keys that will be pushed to the host.
     */
    sshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The current state of the host
     */
    state?: pulumi.Input<string>;
    /**
     * The current state of the deployment
     */
    subState?: pulumi.Input<string>;
    /**
     * The current health status of the host
     */
    summaryStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MetalHostTimeouts>;
    /**
     * Any yaml compliant string that will be merged into cloud-init for this host.
     */
    userData?: pulumi.Input<string>;
    /**
     * List of existing volume IDs
     */
    volumeAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information about volumes attached to this host.
     */
    volumeInfos?: pulumi.Input<pulumi.Input<inputs.MetalHostVolumeInfo>[]>;
    /**
     * FC HBA world wide port names.
     */
    wwpns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a MetalHost resource.
 */
export interface MetalHostArgs {
    /**
     * List of pre-allocated IP addresses in one-to-one correspondance wth Networks.
     */
    allocatedIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A wordy description of the machine and purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * set true to do host create, update, and delete asynchronously. The default is true.
     */
    hostActionAsync?: pulumi.Input<boolean>;
    /**
     * A specific flavor and version in the form of flavor@version, eg 'ubuntu@18.04'.
     */
    image: pulumi.Input<string>;
    /**
     * The iSCSI initiator name for this host.
     */
    initiatorName?: pulumi.Input<string>;
    /**
     * map of label name to label value for this host
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The location of where the machine will be provisioned, of the form 'country:region:centre', eg 'USA:Texas:AUSL2'.
     */
    location: pulumi.Input<string>;
    /**
     * Some generic sizing information for the machine like 'Small', 'Very Large'.
     */
    machineSize: pulumi.Input<string>;
    /**
     * Any friendly name to identify the host that will become the OS hostname in lower case.
     */
    name?: pulumi.Input<string>;
    /**
     * Network selected for the default route
     */
    networkRoute?: pulumi.Input<string>;
    /**
     * Untagged network
     */
    networkUntagged?: pulumi.Input<string>;
    /**
     * List of network name e.g. ['Public', 'Private'].
     */
    networks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of SSH keys that will be pushed to the host.
     */
    sshes: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MetalHostTimeouts>;
    /**
     * Any yaml compliant string that will be merged into cloud-init for this host.
     */
    userData?: pulumi.Input<string>;
    /**
     * List of existing volume IDs
     */
    volumeAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information about volumes attached to this host.
     */
    volumeInfos?: pulumi.Input<pulumi.Input<inputs.MetalHostVolumeInfo>[]>;
}
