// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppsArgs, AppsState } from "./apps";
export type Apps = import("./apps").Apps;
export const Apps: typeof import("./apps").Apps = null as any;
utilities.lazyLoad(exports, ["Apps"], () => require("./apps"));

export { AppsRulesArgs, AppsRulesState } from "./appsRules";
export type AppsRules = import("./appsRules").AppsRules;
export const AppsRules: typeof import("./appsRules").AppsRules = null as any;
utilities.lazyLoad(exports, ["AppsRules"], () => require("./appsRules"));

export { AuthServersArgs, AuthServersState } from "./authServers";
export type AuthServers = import("./authServers").AuthServers;
export const AuthServers: typeof import("./authServers").AuthServers = null as any;
utilities.lazyLoad(exports, ["AuthServers"], () => require("./authServers"));

export { GetAppsArgs, GetAppsResult, GetAppsOutputArgs } from "./getApps";
export const getApps: typeof import("./getApps").getApps = null as any;
export const getAppsOutput: typeof import("./getApps").getAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApps","getAppsOutput"], () => require("./getApps"));

export { GetAppsActionsArgs, GetAppsActionsResult, GetAppsActionsOutputArgs } from "./getAppsActions";
export const getAppsActions: typeof import("./getAppsActions").getAppsActions = null as any;
export const getAppsActionsOutput: typeof import("./getAppsActions").getAppsActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsActions","getAppsActionsOutput"], () => require("./getAppsActions"));

export { GetAppsActionsValuesArgs, GetAppsActionsValuesResult, GetAppsActionsValuesOutputArgs } from "./getAppsActionsValues";
export const getAppsActionsValues: typeof import("./getAppsActionsValues").getAppsActionsValues = null as any;
export const getAppsActionsValuesOutput: typeof import("./getAppsActionsValues").getAppsActionsValuesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsActionsValues","getAppsActionsValuesOutput"], () => require("./getAppsActionsValues"));

export { GetAppsConditionsArgs, GetAppsConditionsResult, GetAppsConditionsOutputArgs } from "./getAppsConditions";
export const getAppsConditions: typeof import("./getAppsConditions").getAppsConditions = null as any;
export const getAppsConditionsOutput: typeof import("./getAppsConditions").getAppsConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsConditions","getAppsConditionsOutput"], () => require("./getAppsConditions"));

export { GetAppsConditionsOperatorsArgs, GetAppsConditionsOperatorsResult, GetAppsConditionsOperatorsOutputArgs } from "./getAppsConditionsOperators";
export const getAppsConditionsOperators: typeof import("./getAppsConditionsOperators").getAppsConditionsOperators = null as any;
export const getAppsConditionsOperatorsOutput: typeof import("./getAppsConditionsOperators").getAppsConditionsOperatorsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsConditionsOperators","getAppsConditionsOperatorsOutput"], () => require("./getAppsConditionsOperators"));

export { GetAppsInstanceArgs, GetAppsInstanceResult, GetAppsInstanceOutputArgs } from "./getAppsInstance";
export const getAppsInstance: typeof import("./getAppsInstance").getAppsInstance = null as any;
export const getAppsInstanceOutput: typeof import("./getAppsInstance").getAppsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAppsInstance","getAppsInstanceOutput"], () => require("./getAppsInstance"));

export { GetAppsRulesArgs, GetAppsRulesResult, GetAppsRulesOutputArgs } from "./getAppsRules";
export const getAppsRules: typeof import("./getAppsRules").getAppsRules = null as any;
export const getAppsRulesOutput: typeof import("./getAppsRules").getAppsRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsRules","getAppsRulesOutput"], () => require("./getAppsRules"));

export { GetAppsRulesInstanceArgs, GetAppsRulesInstanceResult, GetAppsRulesInstanceOutputArgs } from "./getAppsRulesInstance";
export const getAppsRulesInstance: typeof import("./getAppsRulesInstance").getAppsRulesInstance = null as any;
export const getAppsRulesInstanceOutput: typeof import("./getAppsRulesInstance").getAppsRulesInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAppsRulesInstance","getAppsRulesInstanceOutput"], () => require("./getAppsRulesInstance"));

export { GetAppsUsersArgs, GetAppsUsersResult, GetAppsUsersOutputArgs } from "./getAppsUsers";
export const getAppsUsers: typeof import("./getAppsUsers").getAppsUsers = null as any;
export const getAppsUsersOutput: typeof import("./getAppsUsers").getAppsUsersOutput = null as any;
utilities.lazyLoad(exports, ["getAppsUsers","getAppsUsersOutput"], () => require("./getAppsUsers"));

export { GetAuthServersArgs, GetAuthServersResult, GetAuthServersOutputArgs } from "./getAuthServers";
export const getAuthServers: typeof import("./getAuthServers").getAuthServers = null as any;
export const getAuthServersOutput: typeof import("./getAuthServers").getAuthServersOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServers","getAuthServersOutput"], () => require("./getAuthServers"));

export { GetAuthServersClaimsArgs, GetAuthServersClaimsResult, GetAuthServersClaimsOutputArgs } from "./getAuthServersClaims";
export const getAuthServersClaims: typeof import("./getAuthServersClaims").getAuthServersClaims = null as any;
export const getAuthServersClaimsOutput: typeof import("./getAuthServersClaims").getAuthServersClaimsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServersClaims","getAuthServersClaimsOutput"], () => require("./getAuthServersClaims"));

export { GetAuthServersInstanceArgs, GetAuthServersInstanceResult, GetAuthServersInstanceOutputArgs } from "./getAuthServersInstance";
export const getAuthServersInstance: typeof import("./getAuthServersInstance").getAuthServersInstance = null as any;
export const getAuthServersInstanceOutput: typeof import("./getAuthServersInstance").getAuthServersInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServersInstance","getAuthServersInstanceOutput"], () => require("./getAuthServersInstance"));

export { GetAuthServersScopesArgs, GetAuthServersScopesResult, GetAuthServersScopesOutputArgs } from "./getAuthServersScopes";
export const getAuthServersScopes: typeof import("./getAuthServersScopes").getAuthServersScopes = null as any;
export const getAuthServersScopesOutput: typeof import("./getAuthServersScopes").getAuthServersScopesOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServersScopes","getAuthServersScopesOutput"], () => require("./getAuthServersScopes"));

export { GetMappingsArgs, GetMappingsResult, GetMappingsOutputArgs } from "./getMappings";
export const getMappings: typeof import("./getMappings").getMappings = null as any;
export const getMappingsOutput: typeof import("./getMappings").getMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getMappings","getMappingsOutput"], () => require("./getMappings"));

export { GetPrivilegesArgs, GetPrivilegesResult, GetPrivilegesOutputArgs } from "./getPrivileges";
export const getPrivileges: typeof import("./getPrivileges").getPrivileges = null as any;
export const getPrivilegesOutput: typeof import("./getPrivileges").getPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivileges","getPrivilegesOutput"], () => require("./getPrivileges"));

export { GetPrivilegesInstanceArgs, GetPrivilegesInstanceResult, GetPrivilegesInstanceOutputArgs } from "./getPrivilegesInstance";
export const getPrivilegesInstance: typeof import("./getPrivilegesInstance").getPrivilegesInstance = null as any;
export const getPrivilegesInstanceOutput: typeof import("./getPrivilegesInstance").getPrivilegesInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegesInstance","getPrivilegesInstanceOutput"], () => require("./getPrivilegesInstance"));

export { GetRiskRulesArgs, GetRiskRulesResult, GetRiskRulesOutputArgs } from "./getRiskRules";
export const getRiskRules: typeof import("./getRiskRules").getRiskRules = null as any;
export const getRiskRulesOutput: typeof import("./getRiskRules").getRiskRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRiskRules","getRiskRulesOutput"], () => require("./getRiskRules"));

export { GetRiskRulesInstanceArgs, GetRiskRulesInstanceResult, GetRiskRulesInstanceOutputArgs } from "./getRiskRulesInstance";
export const getRiskRulesInstance: typeof import("./getRiskRulesInstance").getRiskRulesInstance = null as any;
export const getRiskRulesInstanceOutput: typeof import("./getRiskRulesInstance").getRiskRulesInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRiskRulesInstance","getRiskRulesInstanceOutput"], () => require("./getRiskRulesInstance"));

export { GetRolesArgs, GetRolesResult, GetRolesOutputArgs } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetRolesAdminsArgs, GetRolesAdminsResult, GetRolesAdminsOutputArgs } from "./getRolesAdmins";
export const getRolesAdmins: typeof import("./getRolesAdmins").getRolesAdmins = null as any;
export const getRolesAdminsOutput: typeof import("./getRolesAdmins").getRolesAdminsOutput = null as any;
utilities.lazyLoad(exports, ["getRolesAdmins","getRolesAdminsOutput"], () => require("./getRolesAdmins"));

export { GetRolesAppsArgs, GetRolesAppsResult, GetRolesAppsOutputArgs } from "./getRolesApps";
export const getRolesApps: typeof import("./getRolesApps").getRolesApps = null as any;
export const getRolesAppsOutput: typeof import("./getRolesApps").getRolesAppsOutput = null as any;
utilities.lazyLoad(exports, ["getRolesApps","getRolesAppsOutput"], () => require("./getRolesApps"));

export { GetRolesInstanceArgs, GetRolesInstanceResult, GetRolesInstanceOutputArgs } from "./getRolesInstance";
export const getRolesInstance: typeof import("./getRolesInstance").getRolesInstance = null as any;
export const getRolesInstanceOutput: typeof import("./getRolesInstance").getRolesInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRolesInstance","getRolesInstanceOutput"], () => require("./getRolesInstance"));

export { GetRolesUsersArgs, GetRolesUsersResult, GetRolesUsersOutputArgs } from "./getRolesUsers";
export const getRolesUsers: typeof import("./getRolesUsers").getRolesUsers = null as any;
export const getRolesUsersOutput: typeof import("./getRolesUsers").getRolesUsersOutput = null as any;
utilities.lazyLoad(exports, ["getRolesUsers","getRolesUsersOutput"], () => require("./getRolesUsers"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetUsersAppsArgs, GetUsersAppsResult, GetUsersAppsOutputArgs } from "./getUsersApps";
export const getUsersApps: typeof import("./getUsersApps").getUsersApps = null as any;
export const getUsersAppsOutput: typeof import("./getUsersApps").getUsersAppsOutput = null as any;
utilities.lazyLoad(exports, ["getUsersApps","getUsersAppsOutput"], () => require("./getUsersApps"));

export { GetUsersDevicesArgs, GetUsersDevicesResult, GetUsersDevicesOutputArgs } from "./getUsersDevices";
export const getUsersDevices: typeof import("./getUsersDevices").getUsersDevices = null as any;
export const getUsersDevicesOutput: typeof import("./getUsersDevices").getUsersDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getUsersDevices","getUsersDevicesOutput"], () => require("./getUsersDevices"));

export { GetUsersInstanceArgs, GetUsersInstanceResult, GetUsersInstanceOutputArgs } from "./getUsersInstance";
export const getUsersInstance: typeof import("./getUsersInstance").getUsersInstance = null as any;
export const getUsersInstanceOutput: typeof import("./getUsersInstance").getUsersInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getUsersInstance","getUsersInstanceOutput"], () => require("./getUsersInstance"));

export { GetUsersV1Args, GetUsersV1Result, GetUsersV1OutputArgs } from "./getUsersV1";
export const getUsersV1: typeof import("./getUsersV1").getUsersV1 = null as any;
export const getUsersV1Output: typeof import("./getUsersV1").getUsersV1Output = null as any;
utilities.lazyLoad(exports, ["getUsersV1","getUsersV1Output"], () => require("./getUsersV1"));

export { GetUsersV1AppsArgs, GetUsersV1AppsResult, GetUsersV1AppsOutputArgs } from "./getUsersV1Apps";
export const getUsersV1Apps: typeof import("./getUsersV1Apps").getUsersV1Apps = null as any;
export const getUsersV1AppsOutput: typeof import("./getUsersV1Apps").getUsersV1AppsOutput = null as any;
utilities.lazyLoad(exports, ["getUsersV1Apps","getUsersV1AppsOutput"], () => require("./getUsersV1Apps"));

export { GetUsersV1InstanceArgs, GetUsersV1InstanceResult, GetUsersV1InstanceOutputArgs } from "./getUsersV1Instance";
export const getUsersV1Instance: typeof import("./getUsersV1Instance").getUsersV1Instance = null as any;
export const getUsersV1InstanceOutput: typeof import("./getUsersV1Instance").getUsersV1InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getUsersV1Instance","getUsersV1InstanceOutput"], () => require("./getUsersV1Instance"));

export { PrivilegesArgs, PrivilegesState } from "./privileges";
export type Privileges = import("./privileges").Privileges;
export const Privileges: typeof import("./privileges").Privileges = null as any;
utilities.lazyLoad(exports, ["Privileges"], () => require("./privileges"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RiskRulesArgs, RiskRulesState } from "./riskRules";
export type RiskRules = import("./riskRules").RiskRules;
export const RiskRules: typeof import("./riskRules").RiskRules = null as any;
utilities.lazyLoad(exports, ["RiskRules"], () => require("./riskRules"));

export { RolesArgs, RolesState } from "./roles";
export type Roles = import("./roles").Roles;
export const Roles: typeof import("./roles").Roles = null as any;
utilities.lazyLoad(exports, ["Roles"], () => require("./roles"));

export { UsersArgs, UsersState } from "./users";
export type Users = import("./users").Users;
export const Users: typeof import("./users").Users = null as any;
utilities.lazyLoad(exports, ["Users"], () => require("./users"));

export { UsersV1Args, UsersV1State } from "./usersV1";
export type UsersV1 = import("./usersV1").UsersV1;
export const UsersV1: typeof import("./usersV1").UsersV1 = null as any;
utilities.lazyLoad(exports, ["UsersV1"], () => require("./usersV1"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "onelogin:index/apps:Apps":
                return new Apps(name, <any>undefined, { urn })
            case "onelogin:index/appsRules:AppsRules":
                return new AppsRules(name, <any>undefined, { urn })
            case "onelogin:index/authServers:AuthServers":
                return new AuthServers(name, <any>undefined, { urn })
            case "onelogin:index/privileges:Privileges":
                return new Privileges(name, <any>undefined, { urn })
            case "onelogin:index/riskRules:RiskRules":
                return new RiskRules(name, <any>undefined, { urn })
            case "onelogin:index/roles:Roles":
                return new Roles(name, <any>undefined, { urn })
            case "onelogin:index/users:Users":
                return new Users(name, <any>undefined, { urn })
            case "onelogin:index/usersV1:UsersV1":
                return new UsersV1(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("onelogin", "index/apps", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/appsRules", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/authServers", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/privileges", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/riskRules", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/roles", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/users", _module)
pulumi.runtime.registerResourceModule("onelogin", "index/usersV1", _module)
pulumi.runtime.registerResourcePackage("onelogin", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:onelogin") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
