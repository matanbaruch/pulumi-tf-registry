// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationsWebhook extends pulumi.CustomResource {
    /**
     * Get an existing NotificationsWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationsWebhookState, opts?: pulumi.CustomResourceOptions): NotificationsWebhook {
        return new NotificationsWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/notificationsWebhook:NotificationsWebhook';

    /**
     * Returns true if the given object is an instance of NotificationsWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationsWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationsWebhook.__pulumiType;
    }

    /**
     * The webhook configuration used to deliver event payloads.
     */
    public readonly config!: pulumi.Output<outputs.NotificationsWebhookConfig>;
    /**
     * The webhook's description. Descriptions are useful for helping others understand the purpose of the webhook.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates if the webhook should receive payloads for the subscribed events. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The webhook's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project to create the webhook under. If unspecified, the webhook will be created in the project the
     * provider is configured with.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The webhook's unique identifier.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * The webhooks's resource name in the format `webhook/project/<project_id>/geo/us/webhook/<name>`.
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    /**
     * Set of events to subscribe the webhook to all resources or a specific resource in the project.
     */
    public readonly subscriptions!: pulumi.Output<outputs.NotificationsWebhookSubscription[] | undefined>;

    /**
     * Create a NotificationsWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationsWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationsWebhookArgs | NotificationsWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationsWebhookState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["subscriptions"] = state ? state.subscriptions : undefined;
        } else {
            const args = argsOrState as NotificationsWebhookArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["subscriptions"] = args ? args.subscriptions : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationsWebhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationsWebhook resources.
 */
export interface NotificationsWebhookState {
    /**
     * The webhook configuration used to deliver event payloads.
     */
    config?: pulumi.Input<inputs.NotificationsWebhookConfig>;
    /**
     * The webhook's description. Descriptions are useful for helping others understand the purpose of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if the webhook should receive payloads for the subscribed events. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The webhook's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to create the webhook under. If unspecified, the webhook will be created in the project the
     * provider is configured with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The webhook's unique identifier.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The webhooks's resource name in the format `webhook/project/<project_id>/geo/us/webhook/<name>`.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Set of events to subscribe the webhook to all resources or a specific resource in the project.
     */
    subscriptions?: pulumi.Input<pulumi.Input<inputs.NotificationsWebhookSubscription>[]>;
}

/**
 * The set of arguments for constructing a NotificationsWebhook resource.
 */
export interface NotificationsWebhookArgs {
    /**
     * The webhook configuration used to deliver event payloads.
     */
    config: pulumi.Input<inputs.NotificationsWebhookConfig>;
    /**
     * The webhook's description. Descriptions are useful for helping others understand the purpose of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if the webhook should receive payloads for the subscribed events. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The webhook's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to create the webhook under. If unspecified, the webhook will be created in the project the
     * provider is configured with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Set of events to subscribe the webhook to all resources or a specific resource in the project.
     */
    subscriptions?: pulumi.Input<pulumi.Input<inputs.NotificationsWebhookSubscription>[]>;
}
