// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVaultPlugin(args: GetVaultPluginArgs, opts?: pulumi.InvokeOptions): Promise<GetVaultPluginResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcp:index/getVaultPlugin:getVaultPlugin", {
        "clusterId": args.clusterId,
        "id": args.id,
        "pluginName": args.pluginName,
        "pluginType": args.pluginType,
        "projectId": args.projectId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVaultPlugin.
 */
export interface GetVaultPluginArgs {
    clusterId: string;
    id?: string;
    pluginName: string;
    pluginType: string;
    projectId?: string;
    timeouts?: inputs.GetVaultPluginTimeouts;
}

/**
 * A collection of values returned by getVaultPlugin.
 */
export interface GetVaultPluginResult {
    readonly clusterId: string;
    readonly id: string;
    readonly pluginName: string;
    readonly pluginType: string;
    readonly projectId: string;
    readonly timeouts?: outputs.GetVaultPluginTimeouts;
}
export function getVaultPluginOutput(args: GetVaultPluginOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVaultPluginResult> {
    return pulumi.output(args).apply((a: any) => getVaultPlugin(a, opts))
}

/**
 * A collection of arguments for invoking getVaultPlugin.
 */
export interface GetVaultPluginOutputArgs {
    clusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    pluginName: pulumi.Input<string>;
    pluginType: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetVaultPluginTimeoutsArgs>;
}
