// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VaultSecretsSecret extends pulumi.CustomResource {
    /**
     * Get an existing VaultSecretsSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultSecretsSecretState, opts?: pulumi.CustomResourceOptions): VaultSecretsSecret {
        return new VaultSecretsSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/vaultSecretsSecret:VaultSecretsSecret';

    /**
     * Returns true if the given object is an instance of VaultSecretsSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VaultSecretsSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultSecretsSecret.__pulumiType;
    }

    /**
     * The name of the application the secret can be found in
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * The ID of the HCP organization where the project the HCP Vault Secrets secret is located.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the HCP project where the HCP Vault Secrets secret is located.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The name of the secret
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * The value of the secret
     */
    public readonly secretValue!: pulumi.Output<string>;

    /**
     * Create a VaultSecretsSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultSecretsSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultSecretsSecretArgs | VaultSecretsSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultSecretsSecretState | undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretValue"] = state ? state.secretValue : undefined;
        } else {
            const args = argsOrState as VaultSecretsSecretArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.secretValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretValue'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretValue"] = args?.secretValue ? pulumi.secret(args.secretValue) : undefined;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretValue"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VaultSecretsSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VaultSecretsSecret resources.
 */
export interface VaultSecretsSecretState {
    /**
     * The name of the application the secret can be found in
     */
    appName?: pulumi.Input<string>;
    /**
     * The ID of the HCP organization where the project the HCP Vault Secrets secret is located.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the HCP project where the HCP Vault Secrets secret is located.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The name of the secret
     */
    secretName?: pulumi.Input<string>;
    /**
     * The value of the secret
     */
    secretValue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VaultSecretsSecret resource.
 */
export interface VaultSecretsSecretArgs {
    /**
     * The name of the application the secret can be found in
     */
    appName: pulumi.Input<string>;
    /**
     * The ID of the HCP project where the HCP Vault Secrets secret is located.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The name of the secret
     */
    secretName: pulumi.Input<string>;
    /**
     * The value of the secret
     */
    secretValue: pulumi.Input<string>;
}
