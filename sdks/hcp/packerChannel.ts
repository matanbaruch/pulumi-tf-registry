// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PackerChannel extends pulumi.CustomResource {
    /**
     * Get an existing PackerChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackerChannelState, opts?: pulumi.CustomResourceOptions): PackerChannel {
        return new PackerChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/packerChannel:PackerChannel';

    /**
     * Returns true if the given object is an instance of PackerChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackerChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackerChannel.__pulumiType;
    }

    /**
     * The author of this channel.
     */
    public /*out*/ readonly authorId!: pulumi.Output<string>;
    /**
     * The name of the HCP Packer Registry bucket where the channel should be created.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The creation time of this channel.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * If true, the channel is an HCP Packer managed channel
     */
    public /*out*/ readonly managed!: pulumi.Output<boolean>;
    /**
     * The name of the channel being managed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the HCP organization where this channel is located.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the HCP project where this channel is located. If not specified, the project specified in the HCP Provider
     * config block will be used, if configured. If a project is not configured in the HCP Provider config block, the oldest
     * project in the organization will be used.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * If true, the channel is only visible to users with permission to create and manage it. If false, the channel is visible
     * to every member of the organization.
     */
    public readonly restricted!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.PackerChannelTimeouts | undefined>;
    /**
     * The time this channel was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a PackerChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackerChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackerChannelArgs | PackerChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackerChannelState | undefined;
            resourceInputs["authorId"] = state ? state.authorId : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["restricted"] = state ? state.restricted : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as PackerChannelArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["restricted"] = args ? args.restricted : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["authorId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["managed"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackerChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackerChannel resources.
 */
export interface PackerChannelState {
    /**
     * The author of this channel.
     */
    authorId?: pulumi.Input<string>;
    /**
     * The name of the HCP Packer Registry bucket where the channel should be created.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The creation time of this channel.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * If true, the channel is an HCP Packer managed channel
     */
    managed?: pulumi.Input<boolean>;
    /**
     * The name of the channel being managed.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the HCP organization where this channel is located.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the HCP project where this channel is located. If not specified, the project specified in the HCP Provider
     * config block will be used, if configured. If a project is not configured in the HCP Provider config block, the oldest
     * project in the organization will be used.
     */
    projectId?: pulumi.Input<string>;
    /**
     * If true, the channel is only visible to users with permission to create and manage it. If false, the channel is visible
     * to every member of the organization.
     */
    restricted?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.PackerChannelTimeouts>;
    /**
     * The time this channel was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackerChannel resource.
 */
export interface PackerChannelArgs {
    /**
     * The name of the HCP Packer Registry bucket where the channel should be created.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The name of the channel being managed.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the HCP project where this channel is located. If not specified, the project specified in the HCP Provider
     * config block will be used, if configured. If a project is not configured in the HCP Provider config block, the oldest
     * project in the organization will be used.
     */
    projectId?: pulumi.Input<string>;
    /**
     * If true, the channel is only visible to users with permission to create and manage it. If false, the channel is visible
     * to every member of the organization.
     */
    restricted?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.PackerChannelTimeouts>;
}
