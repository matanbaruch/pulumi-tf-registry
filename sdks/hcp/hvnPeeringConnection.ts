// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HvnPeeringConnection extends pulumi.CustomResource {
    /**
     * Get an existing HvnPeeringConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HvnPeeringConnectionState, opts?: pulumi.CustomResourceOptions): HvnPeeringConnection {
        return new HvnPeeringConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/hvnPeeringConnection:HvnPeeringConnection';

    /**
     * Returns true if the given object is an instance of HvnPeeringConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HvnPeeringConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HvnPeeringConnection.__pulumiType;
    }

    /**
     * The time that the peering connection was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or
     * `ACTIVE` state.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    public readonly hvn1!: pulumi.Output<string>;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    public readonly hvn2!: pulumi.Output<string>;
    /**
     * The ID of the HCP organization where the peering connection is located. Always matches both HVNs' organization ID.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the peering connection.
     */
    public /*out*/ readonly peeringId!: pulumi.Output<string>;
    /**
     * The ID of the HCP project where HVN peering connection is located. Always matches hvn_1's project ID. Setting this
     * attribute is deprecated, but it will remain usable in read-only form.
     *
     * @deprecated Deprecated
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * A unique URL identifying the peering connection
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The state of the HVN peering connection.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.HvnPeeringConnectionTimeouts | undefined>;

    /**
     * Create a HvnPeeringConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HvnPeeringConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HvnPeeringConnectionArgs | HvnPeeringConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HvnPeeringConnectionState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["hvn1"] = state ? state.hvn1 : undefined;
            resourceInputs["hvn2"] = state ? state.hvn2 : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["peeringId"] = state ? state.peeringId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as HvnPeeringConnectionArgs | undefined;
            if ((!args || args.hvn1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hvn1'");
            }
            if ((!args || args.hvn2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hvn2'");
            }
            resourceInputs["hvn1"] = args ? args.hvn1 : undefined;
            resourceInputs["hvn2"] = args ? args.hvn2 : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["peeringId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HvnPeeringConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HvnPeeringConnection resources.
 */
export interface HvnPeeringConnectionState {
    /**
     * The time that the peering connection was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or
     * `ACTIVE` state.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn1?: pulumi.Input<string>;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn2?: pulumi.Input<string>;
    /**
     * The ID of the HCP organization where the peering connection is located. Always matches both HVNs' organization ID.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the peering connection.
     */
    peeringId?: pulumi.Input<string>;
    /**
     * The ID of the HCP project where HVN peering connection is located. Always matches hvn_1's project ID. Setting this
     * attribute is deprecated, but it will remain usable in read-only form.
     *
     * @deprecated Deprecated
     */
    projectId?: pulumi.Input<string>;
    /**
     * A unique URL identifying the peering connection
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The state of the HVN peering connection.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HvnPeeringConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a HvnPeeringConnection resource.
 */
export interface HvnPeeringConnectionArgs {
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn1: pulumi.Input<string>;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn2: pulumi.Input<string>;
    /**
     * The ID of the HCP project where HVN peering connection is located. Always matches hvn_1's project ID. Setting this
     * attribute is deprecated, but it will remain usable in read-only form.
     *
     * @deprecated Deprecated
     */
    projectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HvnPeeringConnectionTimeouts>;
}
