// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsNetworkPeeringArgs, AwsNetworkPeeringState } from "./awsNetworkPeering";
export type AwsNetworkPeering = import("./awsNetworkPeering").AwsNetworkPeering;
export const AwsNetworkPeering: typeof import("./awsNetworkPeering").AwsNetworkPeering = null as any;
utilities.lazyLoad(exports, ["AwsNetworkPeering"], () => require("./awsNetworkPeering"));

export { AwsTransitGatewayAttachmentArgs, AwsTransitGatewayAttachmentState } from "./awsTransitGatewayAttachment";
export type AwsTransitGatewayAttachment = import("./awsTransitGatewayAttachment").AwsTransitGatewayAttachment;
export const AwsTransitGatewayAttachment: typeof import("./awsTransitGatewayAttachment").AwsTransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["AwsTransitGatewayAttachment"], () => require("./awsTransitGatewayAttachment"));

export { AzurePeeringConnectionArgs, AzurePeeringConnectionState } from "./azurePeeringConnection";
export type AzurePeeringConnection = import("./azurePeeringConnection").AzurePeeringConnection;
export const AzurePeeringConnection: typeof import("./azurePeeringConnection").AzurePeeringConnection = null as any;
utilities.lazyLoad(exports, ["AzurePeeringConnection"], () => require("./azurePeeringConnection"));

export { BoundaryClusterArgs, BoundaryClusterState } from "./boundaryCluster";
export type BoundaryCluster = import("./boundaryCluster").BoundaryCluster;
export const BoundaryCluster: typeof import("./boundaryCluster").BoundaryCluster = null as any;
utilities.lazyLoad(exports, ["BoundaryCluster"], () => require("./boundaryCluster"));

export { ConsulClusterArgs, ConsulClusterState } from "./consulCluster";
export type ConsulCluster = import("./consulCluster").ConsulCluster;
export const ConsulCluster: typeof import("./consulCluster").ConsulCluster = null as any;
utilities.lazyLoad(exports, ["ConsulCluster"], () => require("./consulCluster"));

export { ConsulClusterRootTokenArgs, ConsulClusterRootTokenState } from "./consulClusterRootToken";
export type ConsulClusterRootToken = import("./consulClusterRootToken").ConsulClusterRootToken;
export const ConsulClusterRootToken: typeof import("./consulClusterRootToken").ConsulClusterRootToken = null as any;
utilities.lazyLoad(exports, ["ConsulClusterRootToken"], () => require("./consulClusterRootToken"));

export { ConsulSnapshotArgs, ConsulSnapshotState } from "./consulSnapshot";
export type ConsulSnapshot = import("./consulSnapshot").ConsulSnapshot;
export const ConsulSnapshot: typeof import("./consulSnapshot").ConsulSnapshot = null as any;
utilities.lazyLoad(exports, ["ConsulSnapshot"], () => require("./consulSnapshot"));

export { GetAwsNetworkPeeringArgs, GetAwsNetworkPeeringResult, GetAwsNetworkPeeringOutputArgs } from "./getAwsNetworkPeering";
export const getAwsNetworkPeering: typeof import("./getAwsNetworkPeering").getAwsNetworkPeering = null as any;
export const getAwsNetworkPeeringOutput: typeof import("./getAwsNetworkPeering").getAwsNetworkPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getAwsNetworkPeering","getAwsNetworkPeeringOutput"], () => require("./getAwsNetworkPeering"));

export { GetAwsTransitGatewayAttachmentArgs, GetAwsTransitGatewayAttachmentResult, GetAwsTransitGatewayAttachmentOutputArgs } from "./getAwsTransitGatewayAttachment";
export const getAwsTransitGatewayAttachment: typeof import("./getAwsTransitGatewayAttachment").getAwsTransitGatewayAttachment = null as any;
export const getAwsTransitGatewayAttachmentOutput: typeof import("./getAwsTransitGatewayAttachment").getAwsTransitGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getAwsTransitGatewayAttachment","getAwsTransitGatewayAttachmentOutput"], () => require("./getAwsTransitGatewayAttachment"));

export { GetAzurePeeringConnectionArgs, GetAzurePeeringConnectionResult, GetAzurePeeringConnectionOutputArgs } from "./getAzurePeeringConnection";
export const getAzurePeeringConnection: typeof import("./getAzurePeeringConnection").getAzurePeeringConnection = null as any;
export const getAzurePeeringConnectionOutput: typeof import("./getAzurePeeringConnection").getAzurePeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAzurePeeringConnection","getAzurePeeringConnectionOutput"], () => require("./getAzurePeeringConnection"));

export { GetBoundaryClusterArgs, GetBoundaryClusterResult, GetBoundaryClusterOutputArgs } from "./getBoundaryCluster";
export const getBoundaryCluster: typeof import("./getBoundaryCluster").getBoundaryCluster = null as any;
export const getBoundaryClusterOutput: typeof import("./getBoundaryCluster").getBoundaryClusterOutput = null as any;
utilities.lazyLoad(exports, ["getBoundaryCluster","getBoundaryClusterOutput"], () => require("./getBoundaryCluster"));

export { GetConsulAgentHelmConfigArgs, GetConsulAgentHelmConfigResult, GetConsulAgentHelmConfigOutputArgs } from "./getConsulAgentHelmConfig";
export const getConsulAgentHelmConfig: typeof import("./getConsulAgentHelmConfig").getConsulAgentHelmConfig = null as any;
export const getConsulAgentHelmConfigOutput: typeof import("./getConsulAgentHelmConfig").getConsulAgentHelmConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConsulAgentHelmConfig","getConsulAgentHelmConfigOutput"], () => require("./getConsulAgentHelmConfig"));

export { GetConsulAgentKubernetesSecretArgs, GetConsulAgentKubernetesSecretResult, GetConsulAgentKubernetesSecretOutputArgs } from "./getConsulAgentKubernetesSecret";
export const getConsulAgentKubernetesSecret: typeof import("./getConsulAgentKubernetesSecret").getConsulAgentKubernetesSecret = null as any;
export const getConsulAgentKubernetesSecretOutput: typeof import("./getConsulAgentKubernetesSecret").getConsulAgentKubernetesSecretOutput = null as any;
utilities.lazyLoad(exports, ["getConsulAgentKubernetesSecret","getConsulAgentKubernetesSecretOutput"], () => require("./getConsulAgentKubernetesSecret"));

export { GetConsulClusterArgs, GetConsulClusterResult, GetConsulClusterOutputArgs } from "./getConsulCluster";
export const getConsulCluster: typeof import("./getConsulCluster").getConsulCluster = null as any;
export const getConsulClusterOutput: typeof import("./getConsulCluster").getConsulClusterOutput = null as any;
utilities.lazyLoad(exports, ["getConsulCluster","getConsulClusterOutput"], () => require("./getConsulCluster"));

export { GetConsulVersionsArgs, GetConsulVersionsResult, GetConsulVersionsOutputArgs } from "./getConsulVersions";
export const getConsulVersions: typeof import("./getConsulVersions").getConsulVersions = null as any;
export const getConsulVersionsOutput: typeof import("./getConsulVersions").getConsulVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getConsulVersions","getConsulVersionsOutput"], () => require("./getConsulVersions"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetHvnArgs, GetHvnResult, GetHvnOutputArgs } from "./getHvn";
export const getHvn: typeof import("./getHvn").getHvn = null as any;
export const getHvnOutput: typeof import("./getHvn").getHvnOutput = null as any;
utilities.lazyLoad(exports, ["getHvn","getHvnOutput"], () => require("./getHvn"));

export { GetHvnPeeringConnectionArgs, GetHvnPeeringConnectionResult, GetHvnPeeringConnectionOutputArgs } from "./getHvnPeeringConnection";
export const getHvnPeeringConnection: typeof import("./getHvnPeeringConnection").getHvnPeeringConnection = null as any;
export const getHvnPeeringConnectionOutput: typeof import("./getHvnPeeringConnection").getHvnPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getHvnPeeringConnection","getHvnPeeringConnectionOutput"], () => require("./getHvnPeeringConnection"));

export { GetHvnRouteArgs, GetHvnRouteResult, GetHvnRouteOutputArgs } from "./getHvnRoute";
export const getHvnRoute: typeof import("./getHvnRoute").getHvnRoute = null as any;
export const getHvnRouteOutput: typeof import("./getHvnRoute").getHvnRouteOutput = null as any;
utilities.lazyLoad(exports, ["getHvnRoute","getHvnRouteOutput"], () => require("./getHvnRoute"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetOrganizationResult } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPackerArtifactArgs, GetPackerArtifactResult, GetPackerArtifactOutputArgs } from "./getPackerArtifact";
export const getPackerArtifact: typeof import("./getPackerArtifact").getPackerArtifact = null as any;
export const getPackerArtifactOutput: typeof import("./getPackerArtifact").getPackerArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getPackerArtifact","getPackerArtifactOutput"], () => require("./getPackerArtifact"));

export { GetPackerBucketNamesArgs, GetPackerBucketNamesResult, GetPackerBucketNamesOutputArgs } from "./getPackerBucketNames";
export const getPackerBucketNames: typeof import("./getPackerBucketNames").getPackerBucketNames = null as any;
export const getPackerBucketNamesOutput: typeof import("./getPackerBucketNames").getPackerBucketNamesOutput = null as any;
utilities.lazyLoad(exports, ["getPackerBucketNames","getPackerBucketNamesOutput"], () => require("./getPackerBucketNames"));

export { GetPackerRunTaskArgs, GetPackerRunTaskResult, GetPackerRunTaskOutputArgs } from "./getPackerRunTask";
export const getPackerRunTask: typeof import("./getPackerRunTask").getPackerRunTask = null as any;
export const getPackerRunTaskOutput: typeof import("./getPackerRunTask").getPackerRunTaskOutput = null as any;
utilities.lazyLoad(exports, ["getPackerRunTask","getPackerRunTaskOutput"], () => require("./getPackerRunTask"));

export { GetPackerVersionArgs, GetPackerVersionResult, GetPackerVersionOutputArgs } from "./getPackerVersion";
export const getPackerVersion: typeof import("./getPackerVersion").getPackerVersion = null as any;
export const getPackerVersionOutput: typeof import("./getPackerVersion").getPackerVersionOutput = null as any;
utilities.lazyLoad(exports, ["getPackerVersion","getPackerVersionOutput"], () => require("./getPackerVersion"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetServicePrincipalArgs, GetServicePrincipalResult, GetServicePrincipalOutputArgs } from "./getServicePrincipal";
export const getServicePrincipal: typeof import("./getServicePrincipal").getServicePrincipal = null as any;
export const getServicePrincipalOutput: typeof import("./getServicePrincipal").getServicePrincipalOutput = null as any;
utilities.lazyLoad(exports, ["getServicePrincipal","getServicePrincipalOutput"], () => require("./getServicePrincipal"));

export { GetUserPrincipalArgs, GetUserPrincipalResult, GetUserPrincipalOutputArgs } from "./getUserPrincipal";
export const getUserPrincipal: typeof import("./getUserPrincipal").getUserPrincipal = null as any;
export const getUserPrincipalOutput: typeof import("./getUserPrincipal").getUserPrincipalOutput = null as any;
utilities.lazyLoad(exports, ["getUserPrincipal","getUserPrincipalOutput"], () => require("./getUserPrincipal"));

export { GetVaultClusterArgs, GetVaultClusterResult, GetVaultClusterOutputArgs } from "./getVaultCluster";
export const getVaultCluster: typeof import("./getVaultCluster").getVaultCluster = null as any;
export const getVaultClusterOutput: typeof import("./getVaultCluster").getVaultClusterOutput = null as any;
utilities.lazyLoad(exports, ["getVaultCluster","getVaultClusterOutput"], () => require("./getVaultCluster"));

export { GetVaultPluginArgs, GetVaultPluginResult, GetVaultPluginOutputArgs } from "./getVaultPlugin";
export const getVaultPlugin: typeof import("./getVaultPlugin").getVaultPlugin = null as any;
export const getVaultPluginOutput: typeof import("./getVaultPlugin").getVaultPluginOutput = null as any;
utilities.lazyLoad(exports, ["getVaultPlugin","getVaultPluginOutput"], () => require("./getVaultPlugin"));

export { GetVaultSecretsAppArgs, GetVaultSecretsAppResult, GetVaultSecretsAppOutputArgs } from "./getVaultSecretsApp";
export const getVaultSecretsApp: typeof import("./getVaultSecretsApp").getVaultSecretsApp = null as any;
export const getVaultSecretsAppOutput: typeof import("./getVaultSecretsApp").getVaultSecretsAppOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecretsApp","getVaultSecretsAppOutput"], () => require("./getVaultSecretsApp"));

export { GetVaultSecretsDynamicSecretArgs, GetVaultSecretsDynamicSecretResult, GetVaultSecretsDynamicSecretOutputArgs } from "./getVaultSecretsDynamicSecret";
export const getVaultSecretsDynamicSecret: typeof import("./getVaultSecretsDynamicSecret").getVaultSecretsDynamicSecret = null as any;
export const getVaultSecretsDynamicSecretOutput: typeof import("./getVaultSecretsDynamicSecret").getVaultSecretsDynamicSecretOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecretsDynamicSecret","getVaultSecretsDynamicSecretOutput"], () => require("./getVaultSecretsDynamicSecret"));

export { GetVaultSecretsRotatingSecretArgs, GetVaultSecretsRotatingSecretResult, GetVaultSecretsRotatingSecretOutputArgs } from "./getVaultSecretsRotatingSecret";
export const getVaultSecretsRotatingSecret: typeof import("./getVaultSecretsRotatingSecret").getVaultSecretsRotatingSecret = null as any;
export const getVaultSecretsRotatingSecretOutput: typeof import("./getVaultSecretsRotatingSecret").getVaultSecretsRotatingSecretOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecretsRotatingSecret","getVaultSecretsRotatingSecretOutput"], () => require("./getVaultSecretsRotatingSecret"));

export { GetVaultSecretsSecretArgs, GetVaultSecretsSecretResult, GetVaultSecretsSecretOutputArgs } from "./getVaultSecretsSecret";
export const getVaultSecretsSecret: typeof import("./getVaultSecretsSecret").getVaultSecretsSecret = null as any;
export const getVaultSecretsSecretOutput: typeof import("./getVaultSecretsSecret").getVaultSecretsSecretOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecretsSecret","getVaultSecretsSecretOutput"], () => require("./getVaultSecretsSecret"));

export { GetWaypointActionArgs, GetWaypointActionResult, GetWaypointActionOutputArgs } from "./getWaypointAction";
export const getWaypointAction: typeof import("./getWaypointAction").getWaypointAction = null as any;
export const getWaypointActionOutput: typeof import("./getWaypointAction").getWaypointActionOutput = null as any;
utilities.lazyLoad(exports, ["getWaypointAction","getWaypointActionOutput"], () => require("./getWaypointAction"));

export { GetWaypointAddOnArgs, GetWaypointAddOnResult, GetWaypointAddOnOutputArgs } from "./getWaypointAddOn";
export const getWaypointAddOn: typeof import("./getWaypointAddOn").getWaypointAddOn = null as any;
export const getWaypointAddOnOutput: typeof import("./getWaypointAddOn").getWaypointAddOnOutput = null as any;
utilities.lazyLoad(exports, ["getWaypointAddOn","getWaypointAddOnOutput"], () => require("./getWaypointAddOn"));

export { GetWaypointAddOnDefinitionArgs, GetWaypointAddOnDefinitionResult, GetWaypointAddOnDefinitionOutputArgs } from "./getWaypointAddOnDefinition";
export const getWaypointAddOnDefinition: typeof import("./getWaypointAddOnDefinition").getWaypointAddOnDefinition = null as any;
export const getWaypointAddOnDefinitionOutput: typeof import("./getWaypointAddOnDefinition").getWaypointAddOnDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWaypointAddOnDefinition","getWaypointAddOnDefinitionOutput"], () => require("./getWaypointAddOnDefinition"));

export { GetWaypointApplicationArgs, GetWaypointApplicationResult, GetWaypointApplicationOutputArgs } from "./getWaypointApplication";
export const getWaypointApplication: typeof import("./getWaypointApplication").getWaypointApplication = null as any;
export const getWaypointApplicationOutput: typeof import("./getWaypointApplication").getWaypointApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getWaypointApplication","getWaypointApplicationOutput"], () => require("./getWaypointApplication"));

export { GetWaypointTemplateArgs, GetWaypointTemplateResult, GetWaypointTemplateOutputArgs } from "./getWaypointTemplate";
export const getWaypointTemplate: typeof import("./getWaypointTemplate").getWaypointTemplate = null as any;
export const getWaypointTemplateOutput: typeof import("./getWaypointTemplate").getWaypointTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getWaypointTemplate","getWaypointTemplateOutput"], () => require("./getWaypointTemplate"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupIamBindingArgs, GroupIamBindingState } from "./groupIamBinding";
export type GroupIamBinding = import("./groupIamBinding").GroupIamBinding;
export const GroupIamBinding: typeof import("./groupIamBinding").GroupIamBinding = null as any;
utilities.lazyLoad(exports, ["GroupIamBinding"], () => require("./groupIamBinding"));

export { GroupIamPolicyArgs, GroupIamPolicyState } from "./groupIamPolicy";
export type GroupIamPolicy = import("./groupIamPolicy").GroupIamPolicy;
export const GroupIamPolicy: typeof import("./groupIamPolicy").GroupIamPolicy = null as any;
utilities.lazyLoad(exports, ["GroupIamPolicy"], () => require("./groupIamPolicy"));

export { GroupMembersArgs, GroupMembersState } from "./groupMembers";
export type GroupMembers = import("./groupMembers").GroupMembers;
export const GroupMembers: typeof import("./groupMembers").GroupMembers = null as any;
utilities.lazyLoad(exports, ["GroupMembers"], () => require("./groupMembers"));

export { HvnArgs, HvnState } from "./hvn";
export type Hvn = import("./hvn").Hvn;
export const Hvn: typeof import("./hvn").Hvn = null as any;
utilities.lazyLoad(exports, ["Hvn"], () => require("./hvn"));

export { HvnPeeringConnectionArgs, HvnPeeringConnectionState } from "./hvnPeeringConnection";
export type HvnPeeringConnection = import("./hvnPeeringConnection").HvnPeeringConnection;
export const HvnPeeringConnection: typeof import("./hvnPeeringConnection").HvnPeeringConnection = null as any;
utilities.lazyLoad(exports, ["HvnPeeringConnection"], () => require("./hvnPeeringConnection"));

export { HvnRouteArgs, HvnRouteState } from "./hvnRoute";
export type HvnRoute = import("./hvnRoute").HvnRoute;
export const HvnRoute: typeof import("./hvnRoute").HvnRoute = null as any;
utilities.lazyLoad(exports, ["HvnRoute"], () => require("./hvnRoute"));

export { IamWorkloadIdentityProviderArgs, IamWorkloadIdentityProviderState } from "./iamWorkloadIdentityProvider";
export type IamWorkloadIdentityProvider = import("./iamWorkloadIdentityProvider").IamWorkloadIdentityProvider;
export const IamWorkloadIdentityProvider: typeof import("./iamWorkloadIdentityProvider").IamWorkloadIdentityProvider = null as any;
utilities.lazyLoad(exports, ["IamWorkloadIdentityProvider"], () => require("./iamWorkloadIdentityProvider"));

export { LogStreamingDestinationArgs, LogStreamingDestinationState } from "./logStreamingDestination";
export type LogStreamingDestination = import("./logStreamingDestination").LogStreamingDestination;
export const LogStreamingDestination: typeof import("./logStreamingDestination").LogStreamingDestination = null as any;
utilities.lazyLoad(exports, ["LogStreamingDestination"], () => require("./logStreamingDestination"));

export { NotificationsWebhookArgs, NotificationsWebhookState } from "./notificationsWebhook";
export type NotificationsWebhook = import("./notificationsWebhook").NotificationsWebhook;
export const NotificationsWebhook: typeof import("./notificationsWebhook").NotificationsWebhook = null as any;
utilities.lazyLoad(exports, ["NotificationsWebhook"], () => require("./notificationsWebhook"));

export { OrganizationIamBindingArgs, OrganizationIamBindingState } from "./organizationIamBinding";
export type OrganizationIamBinding = import("./organizationIamBinding").OrganizationIamBinding;
export const OrganizationIamBinding: typeof import("./organizationIamBinding").OrganizationIamBinding = null as any;
utilities.lazyLoad(exports, ["OrganizationIamBinding"], () => require("./organizationIamBinding"));

export { OrganizationIamPolicyArgs, OrganizationIamPolicyState } from "./organizationIamPolicy";
export type OrganizationIamPolicy = import("./organizationIamPolicy").OrganizationIamPolicy;
export const OrganizationIamPolicy: typeof import("./organizationIamPolicy").OrganizationIamPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationIamPolicy"], () => require("./organizationIamPolicy"));

export { PackerBucketArgs, PackerBucketState } from "./packerBucket";
export type PackerBucket = import("./packerBucket").PackerBucket;
export const PackerBucket: typeof import("./packerBucket").PackerBucket = null as any;
utilities.lazyLoad(exports, ["PackerBucket"], () => require("./packerBucket"));

export { PackerBucketIamBindingArgs, PackerBucketIamBindingState } from "./packerBucketIamBinding";
export type PackerBucketIamBinding = import("./packerBucketIamBinding").PackerBucketIamBinding;
export const PackerBucketIamBinding: typeof import("./packerBucketIamBinding").PackerBucketIamBinding = null as any;
utilities.lazyLoad(exports, ["PackerBucketIamBinding"], () => require("./packerBucketIamBinding"));

export { PackerBucketIamPolicyArgs, PackerBucketIamPolicyState } from "./packerBucketIamPolicy";
export type PackerBucketIamPolicy = import("./packerBucketIamPolicy").PackerBucketIamPolicy;
export const PackerBucketIamPolicy: typeof import("./packerBucketIamPolicy").PackerBucketIamPolicy = null as any;
utilities.lazyLoad(exports, ["PackerBucketIamPolicy"], () => require("./packerBucketIamPolicy"));

export { PackerChannelArgs, PackerChannelState } from "./packerChannel";
export type PackerChannel = import("./packerChannel").PackerChannel;
export const PackerChannel: typeof import("./packerChannel").PackerChannel = null as any;
utilities.lazyLoad(exports, ["PackerChannel"], () => require("./packerChannel"));

export { PackerChannelAssignmentArgs, PackerChannelAssignmentState } from "./packerChannelAssignment";
export type PackerChannelAssignment = import("./packerChannelAssignment").PackerChannelAssignment;
export const PackerChannelAssignment: typeof import("./packerChannelAssignment").PackerChannelAssignment = null as any;
utilities.lazyLoad(exports, ["PackerChannelAssignment"], () => require("./packerChannelAssignment"));

export { PackerRunTaskArgs, PackerRunTaskState } from "./packerRunTask";
export type PackerRunTask = import("./packerRunTask").PackerRunTask;
export const PackerRunTask: typeof import("./packerRunTask").PackerRunTask = null as any;
utilities.lazyLoad(exports, ["PackerRunTask"], () => require("./packerRunTask"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectIamBindingArgs, ProjectIamBindingState } from "./projectIamBinding";
export type ProjectIamBinding = import("./projectIamBinding").ProjectIamBinding;
export const ProjectIamBinding: typeof import("./projectIamBinding").ProjectIamBinding = null as any;
utilities.lazyLoad(exports, ["ProjectIamBinding"], () => require("./projectIamBinding"));

export { ProjectIamPolicyArgs, ProjectIamPolicyState } from "./projectIamPolicy";
export type ProjectIamPolicy = import("./projectIamPolicy").ProjectIamPolicy;
export const ProjectIamPolicy: typeof import("./projectIamPolicy").ProjectIamPolicy = null as any;
utilities.lazyLoad(exports, ["ProjectIamPolicy"], () => require("./projectIamPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServicePrincipalArgs, ServicePrincipalState } from "./servicePrincipal";
export type ServicePrincipal = import("./servicePrincipal").ServicePrincipal;
export const ServicePrincipal: typeof import("./servicePrincipal").ServicePrincipal = null as any;
utilities.lazyLoad(exports, ["ServicePrincipal"], () => require("./servicePrincipal"));

export { ServicePrincipalKeyArgs, ServicePrincipalKeyState } from "./servicePrincipalKey";
export type ServicePrincipalKey = import("./servicePrincipalKey").ServicePrincipalKey;
export const ServicePrincipalKey: typeof import("./servicePrincipalKey").ServicePrincipalKey = null as any;
utilities.lazyLoad(exports, ["ServicePrincipalKey"], () => require("./servicePrincipalKey"));

export { VaultClusterArgs, VaultClusterState } from "./vaultCluster";
export type VaultCluster = import("./vaultCluster").VaultCluster;
export const VaultCluster: typeof import("./vaultCluster").VaultCluster = null as any;
utilities.lazyLoad(exports, ["VaultCluster"], () => require("./vaultCluster"));

export { VaultClusterAdminTokenArgs, VaultClusterAdminTokenState } from "./vaultClusterAdminToken";
export type VaultClusterAdminToken = import("./vaultClusterAdminToken").VaultClusterAdminToken;
export const VaultClusterAdminToken: typeof import("./vaultClusterAdminToken").VaultClusterAdminToken = null as any;
utilities.lazyLoad(exports, ["VaultClusterAdminToken"], () => require("./vaultClusterAdminToken"));

export { VaultPluginArgs, VaultPluginState } from "./vaultPlugin";
export type VaultPlugin = import("./vaultPlugin").VaultPlugin;
export const VaultPlugin: typeof import("./vaultPlugin").VaultPlugin = null as any;
utilities.lazyLoad(exports, ["VaultPlugin"], () => require("./vaultPlugin"));

export { VaultSecretsAppArgs, VaultSecretsAppState } from "./vaultSecretsApp";
export type VaultSecretsApp = import("./vaultSecretsApp").VaultSecretsApp;
export const VaultSecretsApp: typeof import("./vaultSecretsApp").VaultSecretsApp = null as any;
utilities.lazyLoad(exports, ["VaultSecretsApp"], () => require("./vaultSecretsApp"));

export { VaultSecretsAppIamBindingArgs, VaultSecretsAppIamBindingState } from "./vaultSecretsAppIamBinding";
export type VaultSecretsAppIamBinding = import("./vaultSecretsAppIamBinding").VaultSecretsAppIamBinding;
export const VaultSecretsAppIamBinding: typeof import("./vaultSecretsAppIamBinding").VaultSecretsAppIamBinding = null as any;
utilities.lazyLoad(exports, ["VaultSecretsAppIamBinding"], () => require("./vaultSecretsAppIamBinding"));

export { VaultSecretsAppIamPolicyArgs, VaultSecretsAppIamPolicyState } from "./vaultSecretsAppIamPolicy";
export type VaultSecretsAppIamPolicy = import("./vaultSecretsAppIamPolicy").VaultSecretsAppIamPolicy;
export const VaultSecretsAppIamPolicy: typeof import("./vaultSecretsAppIamPolicy").VaultSecretsAppIamPolicy = null as any;
utilities.lazyLoad(exports, ["VaultSecretsAppIamPolicy"], () => require("./vaultSecretsAppIamPolicy"));

export { VaultSecretsSecretArgs, VaultSecretsSecretState } from "./vaultSecretsSecret";
export type VaultSecretsSecret = import("./vaultSecretsSecret").VaultSecretsSecret;
export const VaultSecretsSecret: typeof import("./vaultSecretsSecret").VaultSecretsSecret = null as any;
utilities.lazyLoad(exports, ["VaultSecretsSecret"], () => require("./vaultSecretsSecret"));

export { WaypointActionArgs, WaypointActionState } from "./waypointAction";
export type WaypointAction = import("./waypointAction").WaypointAction;
export const WaypointAction: typeof import("./waypointAction").WaypointAction = null as any;
utilities.lazyLoad(exports, ["WaypointAction"], () => require("./waypointAction"));

export { WaypointAddOnArgs, WaypointAddOnState } from "./waypointAddOn";
export type WaypointAddOn = import("./waypointAddOn").WaypointAddOn;
export const WaypointAddOn: typeof import("./waypointAddOn").WaypointAddOn = null as any;
utilities.lazyLoad(exports, ["WaypointAddOn"], () => require("./waypointAddOn"));

export { WaypointAddOnDefinitionArgs, WaypointAddOnDefinitionState } from "./waypointAddOnDefinition";
export type WaypointAddOnDefinition = import("./waypointAddOnDefinition").WaypointAddOnDefinition;
export const WaypointAddOnDefinition: typeof import("./waypointAddOnDefinition").WaypointAddOnDefinition = null as any;
utilities.lazyLoad(exports, ["WaypointAddOnDefinition"], () => require("./waypointAddOnDefinition"));

export { WaypointApplicationArgs, WaypointApplicationState } from "./waypointApplication";
export type WaypointApplication = import("./waypointApplication").WaypointApplication;
export const WaypointApplication: typeof import("./waypointApplication").WaypointApplication = null as any;
utilities.lazyLoad(exports, ["WaypointApplication"], () => require("./waypointApplication"));

export { WaypointTemplateArgs, WaypointTemplateState } from "./waypointTemplate";
export type WaypointTemplate = import("./waypointTemplate").WaypointTemplate;
export const WaypointTemplate: typeof import("./waypointTemplate").WaypointTemplate = null as any;
utilities.lazyLoad(exports, ["WaypointTemplate"], () => require("./waypointTemplate"));

export { WaypointTfcConfigArgs, WaypointTfcConfigState } from "./waypointTfcConfig";
export type WaypointTfcConfig = import("./waypointTfcConfig").WaypointTfcConfig;
export const WaypointTfcConfig: typeof import("./waypointTfcConfig").WaypointTfcConfig = null as any;
utilities.lazyLoad(exports, ["WaypointTfcConfig"], () => require("./waypointTfcConfig"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "hcp:index/awsNetworkPeering:AwsNetworkPeering":
                return new AwsNetworkPeering(name, <any>undefined, { urn })
            case "hcp:index/awsTransitGatewayAttachment:AwsTransitGatewayAttachment":
                return new AwsTransitGatewayAttachment(name, <any>undefined, { urn })
            case "hcp:index/azurePeeringConnection:AzurePeeringConnection":
                return new AzurePeeringConnection(name, <any>undefined, { urn })
            case "hcp:index/boundaryCluster:BoundaryCluster":
                return new BoundaryCluster(name, <any>undefined, { urn })
            case "hcp:index/consulCluster:ConsulCluster":
                return new ConsulCluster(name, <any>undefined, { urn })
            case "hcp:index/consulClusterRootToken:ConsulClusterRootToken":
                return new ConsulClusterRootToken(name, <any>undefined, { urn })
            case "hcp:index/consulSnapshot:ConsulSnapshot":
                return new ConsulSnapshot(name, <any>undefined, { urn })
            case "hcp:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "hcp:index/groupIamBinding:GroupIamBinding":
                return new GroupIamBinding(name, <any>undefined, { urn })
            case "hcp:index/groupIamPolicy:GroupIamPolicy":
                return new GroupIamPolicy(name, <any>undefined, { urn })
            case "hcp:index/groupMembers:GroupMembers":
                return new GroupMembers(name, <any>undefined, { urn })
            case "hcp:index/hvn:Hvn":
                return new Hvn(name, <any>undefined, { urn })
            case "hcp:index/hvnPeeringConnection:HvnPeeringConnection":
                return new HvnPeeringConnection(name, <any>undefined, { urn })
            case "hcp:index/hvnRoute:HvnRoute":
                return new HvnRoute(name, <any>undefined, { urn })
            case "hcp:index/iamWorkloadIdentityProvider:IamWorkloadIdentityProvider":
                return new IamWorkloadIdentityProvider(name, <any>undefined, { urn })
            case "hcp:index/logStreamingDestination:LogStreamingDestination":
                return new LogStreamingDestination(name, <any>undefined, { urn })
            case "hcp:index/notificationsWebhook:NotificationsWebhook":
                return new NotificationsWebhook(name, <any>undefined, { urn })
            case "hcp:index/organizationIamBinding:OrganizationIamBinding":
                return new OrganizationIamBinding(name, <any>undefined, { urn })
            case "hcp:index/organizationIamPolicy:OrganizationIamPolicy":
                return new OrganizationIamPolicy(name, <any>undefined, { urn })
            case "hcp:index/packerBucket:PackerBucket":
                return new PackerBucket(name, <any>undefined, { urn })
            case "hcp:index/packerBucketIamBinding:PackerBucketIamBinding":
                return new PackerBucketIamBinding(name, <any>undefined, { urn })
            case "hcp:index/packerBucketIamPolicy:PackerBucketIamPolicy":
                return new PackerBucketIamPolicy(name, <any>undefined, { urn })
            case "hcp:index/packerChannel:PackerChannel":
                return new PackerChannel(name, <any>undefined, { urn })
            case "hcp:index/packerChannelAssignment:PackerChannelAssignment":
                return new PackerChannelAssignment(name, <any>undefined, { urn })
            case "hcp:index/packerRunTask:PackerRunTask":
                return new PackerRunTask(name, <any>undefined, { urn })
            case "hcp:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "hcp:index/projectIamBinding:ProjectIamBinding":
                return new ProjectIamBinding(name, <any>undefined, { urn })
            case "hcp:index/projectIamPolicy:ProjectIamPolicy":
                return new ProjectIamPolicy(name, <any>undefined, { urn })
            case "hcp:index/servicePrincipal:ServicePrincipal":
                return new ServicePrincipal(name, <any>undefined, { urn })
            case "hcp:index/servicePrincipalKey:ServicePrincipalKey":
                return new ServicePrincipalKey(name, <any>undefined, { urn })
            case "hcp:index/vaultCluster:VaultCluster":
                return new VaultCluster(name, <any>undefined, { urn })
            case "hcp:index/vaultClusterAdminToken:VaultClusterAdminToken":
                return new VaultClusterAdminToken(name, <any>undefined, { urn })
            case "hcp:index/vaultPlugin:VaultPlugin":
                return new VaultPlugin(name, <any>undefined, { urn })
            case "hcp:index/vaultSecretsApp:VaultSecretsApp":
                return new VaultSecretsApp(name, <any>undefined, { urn })
            case "hcp:index/vaultSecretsAppIamBinding:VaultSecretsAppIamBinding":
                return new VaultSecretsAppIamBinding(name, <any>undefined, { urn })
            case "hcp:index/vaultSecretsAppIamPolicy:VaultSecretsAppIamPolicy":
                return new VaultSecretsAppIamPolicy(name, <any>undefined, { urn })
            case "hcp:index/vaultSecretsSecret:VaultSecretsSecret":
                return new VaultSecretsSecret(name, <any>undefined, { urn })
            case "hcp:index/waypointAction:WaypointAction":
                return new WaypointAction(name, <any>undefined, { urn })
            case "hcp:index/waypointAddOn:WaypointAddOn":
                return new WaypointAddOn(name, <any>undefined, { urn })
            case "hcp:index/waypointAddOnDefinition:WaypointAddOnDefinition":
                return new WaypointAddOnDefinition(name, <any>undefined, { urn })
            case "hcp:index/waypointApplication:WaypointApplication":
                return new WaypointApplication(name, <any>undefined, { urn })
            case "hcp:index/waypointTemplate:WaypointTemplate":
                return new WaypointTemplate(name, <any>undefined, { urn })
            case "hcp:index/waypointTfcConfig:WaypointTfcConfig":
                return new WaypointTfcConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hcp", "index/awsNetworkPeering", _module)
pulumi.runtime.registerResourceModule("hcp", "index/awsTransitGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("hcp", "index/azurePeeringConnection", _module)
pulumi.runtime.registerResourceModule("hcp", "index/boundaryCluster", _module)
pulumi.runtime.registerResourceModule("hcp", "index/consulCluster", _module)
pulumi.runtime.registerResourceModule("hcp", "index/consulClusterRootToken", _module)
pulumi.runtime.registerResourceModule("hcp", "index/consulSnapshot", _module)
pulumi.runtime.registerResourceModule("hcp", "index/group", _module)
pulumi.runtime.registerResourceModule("hcp", "index/groupIamBinding", _module)
pulumi.runtime.registerResourceModule("hcp", "index/groupIamPolicy", _module)
pulumi.runtime.registerResourceModule("hcp", "index/groupMembers", _module)
pulumi.runtime.registerResourceModule("hcp", "index/hvn", _module)
pulumi.runtime.registerResourceModule("hcp", "index/hvnPeeringConnection", _module)
pulumi.runtime.registerResourceModule("hcp", "index/hvnRoute", _module)
pulumi.runtime.registerResourceModule("hcp", "index/iamWorkloadIdentityProvider", _module)
pulumi.runtime.registerResourceModule("hcp", "index/logStreamingDestination", _module)
pulumi.runtime.registerResourceModule("hcp", "index/notificationsWebhook", _module)
pulumi.runtime.registerResourceModule("hcp", "index/organizationIamBinding", _module)
pulumi.runtime.registerResourceModule("hcp", "index/organizationIamPolicy", _module)
pulumi.runtime.registerResourceModule("hcp", "index/packerBucket", _module)
pulumi.runtime.registerResourceModule("hcp", "index/packerBucketIamBinding", _module)
pulumi.runtime.registerResourceModule("hcp", "index/packerBucketIamPolicy", _module)
pulumi.runtime.registerResourceModule("hcp", "index/packerChannel", _module)
pulumi.runtime.registerResourceModule("hcp", "index/packerChannelAssignment", _module)
pulumi.runtime.registerResourceModule("hcp", "index/packerRunTask", _module)
pulumi.runtime.registerResourceModule("hcp", "index/project", _module)
pulumi.runtime.registerResourceModule("hcp", "index/projectIamBinding", _module)
pulumi.runtime.registerResourceModule("hcp", "index/projectIamPolicy", _module)
pulumi.runtime.registerResourceModule("hcp", "index/servicePrincipal", _module)
pulumi.runtime.registerResourceModule("hcp", "index/servicePrincipalKey", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultCluster", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultClusterAdminToken", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultPlugin", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultSecretsApp", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultSecretsAppIamBinding", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultSecretsAppIamPolicy", _module)
pulumi.runtime.registerResourceModule("hcp", "index/vaultSecretsSecret", _module)
pulumi.runtime.registerResourceModule("hcp", "index/waypointAction", _module)
pulumi.runtime.registerResourceModule("hcp", "index/waypointAddOn", _module)
pulumi.runtime.registerResourceModule("hcp", "index/waypointAddOnDefinition", _module)
pulumi.runtime.registerResourceModule("hcp", "index/waypointApplication", _module)
pulumi.runtime.registerResourceModule("hcp", "index/waypointTemplate", _module)
pulumi.runtime.registerResourceModule("hcp", "index/waypointTfcConfig", _module)
pulumi.runtime.registerResourcePackage("hcp", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:hcp") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
