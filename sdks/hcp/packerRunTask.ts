// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PackerRunTask extends pulumi.CustomResource {
    /**
     * Get an existing PackerRunTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackerRunTaskState, opts?: pulumi.CustomResourceOptions): PackerRunTask {
        return new PackerRunTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/packerRunTask:PackerRunTask';

    /**
     * Returns true if the given object is an instance of PackerRunTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackerRunTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackerRunTask.__pulumiType;
    }

    public /*out*/ readonly endpointUrl!: pulumi.Output<string>;
    /**
     * A secret key that lets HCP Packer verify the run task request.
     */
    public /*out*/ readonly hmacKey!: pulumi.Output<string>;
    /**
     * The ID of the HCP organization where this channel is located. Always the same as the associated channel.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the HCP project where the HCP Packer Registry is located. If not specified, the project specified in the HCP
     * Provider config block will be used, if configured. If a project is not configured in the HCP Provider config block, the
     * oldest project in the organization will be used.
     */
    public readonly projectId!: pulumi.Output<string>;
    public readonly regenerateHmac!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PackerRunTaskTimeouts | undefined>;

    /**
     * Create a PackerRunTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PackerRunTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackerRunTaskArgs | PackerRunTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackerRunTaskState | undefined;
            resourceInputs["endpointUrl"] = state ? state.endpointUrl : undefined;
            resourceInputs["hmacKey"] = state ? state.hmacKey : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["regenerateHmac"] = state ? state.regenerateHmac : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PackerRunTaskArgs | undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["regenerateHmac"] = args ? args.regenerateHmac : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpointUrl"] = undefined /*out*/;
            resourceInputs["hmacKey"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hmacKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PackerRunTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackerRunTask resources.
 */
export interface PackerRunTaskState {
    endpointUrl?: pulumi.Input<string>;
    /**
     * A secret key that lets HCP Packer verify the run task request.
     */
    hmacKey?: pulumi.Input<string>;
    /**
     * The ID of the HCP organization where this channel is located. Always the same as the associated channel.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the HCP project where the HCP Packer Registry is located. If not specified, the project specified in the HCP
     * Provider config block will be used, if configured. If a project is not configured in the HCP Provider config block, the
     * oldest project in the organization will be used.
     */
    projectId?: pulumi.Input<string>;
    regenerateHmac?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.PackerRunTaskTimeouts>;
}

/**
 * The set of arguments for constructing a PackerRunTask resource.
 */
export interface PackerRunTaskArgs {
    /**
     * The ID of the HCP project where the HCP Packer Registry is located. If not specified, the project specified in the HCP
     * Provider config block will be used, if configured. If a project is not configured in the HCP Provider config block, the
     * oldest project in the organization will be used.
     */
    projectId?: pulumi.Input<string>;
    regenerateHmac?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.PackerRunTaskTimeouts>;
}
