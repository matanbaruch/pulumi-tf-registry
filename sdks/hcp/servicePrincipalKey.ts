// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServicePrincipalKey extends pulumi.CustomResource {
    /**
     * Get an existing ServicePrincipalKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePrincipalKeyState, opts?: pulumi.CustomResourceOptions): ServicePrincipalKey {
        return new ServicePrincipalKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/servicePrincipalKey:ServicePrincipalKey';

    /**
     * Returns true if the given object is an instance of ServicePrincipalKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePrincipalKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePrincipalKey.__pulumiType;
    }

    /**
     * The generated service principal client_id.
     */
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    /**
     * The generated service principal client_secret.
     */
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    /**
     * The service principal key's resource name.
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    /**
     * A map of arbitrary string key/value pairs that will force recreation of the key when they change, enabling key based on
     * external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    public readonly rotateTriggers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The service principal's resource name for which a key should be created.
     */
    public readonly servicePrincipal!: pulumi.Output<string>;

    /**
     * Create a ServicePrincipalKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePrincipalKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePrincipalKeyArgs | ServicePrincipalKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePrincipalKeyState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["rotateTriggers"] = state ? state.rotateTriggers : undefined;
            resourceInputs["servicePrincipal"] = state ? state.servicePrincipal : undefined;
        } else {
            const args = argsOrState as ServicePrincipalKeyArgs | undefined;
            if ((!args || args.servicePrincipal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipal'");
            }
            resourceInputs["rotateTriggers"] = args ? args.rotateTriggers : undefined;
            resourceInputs["servicePrincipal"] = args ? args.servicePrincipal : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["clientSecret"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServicePrincipalKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicePrincipalKey resources.
 */
export interface ServicePrincipalKeyState {
    /**
     * The generated service principal client_id.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The generated service principal client_secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The service principal key's resource name.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * A map of arbitrary string key/value pairs that will force recreation of the key when they change, enabling key based on
     * external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    rotateTriggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The service principal's resource name for which a key should be created.
     */
    servicePrincipal?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicePrincipalKey resource.
 */
export interface ServicePrincipalKeyArgs {
    /**
     * A map of arbitrary string key/value pairs that will force recreation of the key when they change, enabling key based on
     * external conditions such as a rotating timestamp. Changing this forces a new resource to be created.
     */
    rotateTriggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The service principal's resource name for which a key should be created.
     */
    servicePrincipal: pulumi.Input<string>;
}
