// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WaypointTfcConfig extends pulumi.CustomResource {
    /**
     * Get an existing WaypointTfcConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WaypointTfcConfigState, opts?: pulumi.CustomResourceOptions): WaypointTfcConfig {
        return new WaypointTfcConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcp:index/waypointTfcConfig:WaypointTfcConfig';

    /**
     * Returns true if the given object is an instance of WaypointTfcConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WaypointTfcConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WaypointTfcConfig.__pulumiType;
    }

    /**
     * Waypoint Project ID to associate with the TFC config
     */
    public readonly projectId!: pulumi.Output<string>;
    public readonly tfcOrgName!: pulumi.Output<string>;
    public readonly token!: pulumi.Output<string>;

    /**
     * Create a WaypointTfcConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WaypointTfcConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WaypointTfcConfigArgs | WaypointTfcConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WaypointTfcConfigState | undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tfcOrgName"] = state ? state.tfcOrgName : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as WaypointTfcConfigArgs | undefined;
            if ((!args || args.tfcOrgName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tfcOrgName'");
            }
            if ((!args || args.token === undefined) && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tfcOrgName"] = args ? args.tfcOrgName : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WaypointTfcConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WaypointTfcConfig resources.
 */
export interface WaypointTfcConfigState {
    /**
     * Waypoint Project ID to associate with the TFC config
     */
    projectId?: pulumi.Input<string>;
    tfcOrgName?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WaypointTfcConfig resource.
 */
export interface WaypointTfcConfigArgs {
    /**
     * Waypoint Project ID to associate with the TFC config
     */
    projectId?: pulumi.Input<string>;
    tfcOrgName: pulumi.Input<string>;
    token: pulumi.Input<string>;
}
