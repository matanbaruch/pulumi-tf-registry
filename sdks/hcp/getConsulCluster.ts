// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getConsulCluster(args: GetConsulClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetConsulClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcp:index/getConsulCluster:getConsulCluster", {
        "clusterId": args.clusterId,
        "id": args.id,
        "projectId": args.projectId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConsulCluster.
 */
export interface GetConsulClusterArgs {
    clusterId: string;
    id?: string;
    projectId?: string;
    timeouts?: inputs.GetConsulClusterTimeouts;
}

/**
 * A collection of values returned by getConsulCluster.
 */
export interface GetConsulClusterResult {
    readonly autoHvnToHvnPeering: boolean;
    readonly cloudProvider: string;
    readonly clusterId: string;
    readonly connectEnabled: boolean;
    readonly consulAutomaticUpgrades: boolean;
    readonly consulCaFile: string;
    readonly consulConfigFile: string;
    readonly consulPrivateEndpointUrl: string;
    readonly consulPublicEndpointUrl: string;
    readonly consulSnapshotInterval: string;
    readonly consulSnapshotRetention: string;
    readonly consulVersion: string;
    readonly datacenter: string;
    readonly hvnId: string;
    readonly id: string;
    readonly ipAllowlists: outputs.GetConsulClusterIpAllowlist[];
    readonly organizationId: string;
    readonly primaryLink: string;
    readonly projectId: string;
    readonly publicEndpoint: boolean;
    readonly region: string;
    readonly scale: number;
    readonly selfLink: string;
    readonly size: string;
    readonly state: string;
    readonly tier: string;
    readonly timeouts?: outputs.GetConsulClusterTimeouts;
}
export function getConsulClusterOutput(args: GetConsulClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConsulClusterResult> {
    return pulumi.output(args).apply((a: any) => getConsulCluster(a, opts))
}

/**
 * A collection of arguments for invoking getConsulCluster.
 */
export interface GetConsulClusterOutputArgs {
    clusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetConsulClusterTimeoutsArgs>;
}
