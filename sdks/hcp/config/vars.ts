// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("hcp");

/**
 * The OAuth2 Client ID for API operations.
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * The OAuth2 Client Secret for API operations.
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret");
    },
    enumerable: true,
});

/**
 * The path to an HCP credential file to use to authenticate the provider to HCP. You can alternatively set the
 * HCP_CRED_FILE environment variable to point at a credential file as well. Using a credential file allows you to
 * authenticate the provider as a service principal via client credentials or dynamically based on Workload Identity
 * Federation.
 */
export declare const credentialFile: string | undefined;
Object.defineProperty(exports, "credentialFile", {
    get() {
        return __config.get("credentialFile");
    },
    enumerable: true,
});

/**
 * The default project in which resources should be created.
 */
export declare const projectId: string | undefined;
Object.defineProperty(exports, "projectId", {
    get() {
        return __config.get("projectId");
    },
    enumerable: true,
});

/**
 * Allows authenticating the provider by exchanging the OAuth 2.0 access token or OpenID Connect token specified in the
 * `token_file` for a HCP service principal using Workload Identity Federation.
 */
export declare const workloadIdentities: outputs.config.WorkloadIdentities[] | undefined;
Object.defineProperty(exports, "workloadIdentities", {
    get() {
        return __config.getObject<outputs.config.WorkloadIdentities[]>("workloadIdentities");
    },
    enumerable: true,
});

