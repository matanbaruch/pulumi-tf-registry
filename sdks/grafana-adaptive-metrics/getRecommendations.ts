// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRecommendations(args?: GetRecommendationsArgs, opts?: pulumi.InvokeOptions): Promise<GetRecommendationsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana-adaptive-metrics:index/getRecommendations:getRecommendations", {
        "actions": args.actions,
        "verbose": args.verbose,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRecommendations.
 */
export interface GetRecommendationsArgs {
    actions?: string[];
    verbose?: boolean;
}

/**
 * A collection of values returned by getRecommendations.
 */
export interface GetRecommendationsResult {
    readonly actions?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly recommendations: outputs.GetRecommendationsRecommendation[];
    readonly verbose?: boolean;
}
export function getRecommendationsOutput(args?: GetRecommendationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRecommendationsResult> {
    return pulumi.output(args).apply((a: any) => getRecommendations(a, opts))
}

/**
 * A collection of arguments for invoking getRecommendations.
 */
export interface GetRecommendationsOutputArgs {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    verbose?: pulumi.Input<boolean>;
}
