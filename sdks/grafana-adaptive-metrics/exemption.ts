// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Exemption extends pulumi.CustomResource {
    /**
     * Get an existing Exemption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExemptionState, opts?: pulumi.CustomResourceOptions): Exemption {
        return new Exemption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana-adaptive-metrics:index/exemption:Exemption';

    /**
     * Returns true if the given object is an instance of Exemption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Exemption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Exemption.__pulumiType;
    }

    /**
     * Unix timestamp of when this exemption was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * When set to true, the recommendations service will exempt this metric from consideration.
     */
    public readonly disableRecommendations!: pulumi.Output<boolean>;
    /**
     * The array of labels to keep; labels not in this array will be aggregated.
     */
    public readonly keepLabels!: pulumi.Output<string[]>;
    /**
     * The name of the metric to be aggregated.
     */
    public readonly metric!: pulumi.Output<string>;
    /**
     * An optional string detailing the reason(s) for this exemption.
     */
    public readonly reason!: pulumi.Output<string>;
    /**
     * Unix timestamp of when this exemption was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;

    /**
     * Create a Exemption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExemptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExemptionArgs | ExemptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExemptionState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["disableRecommendations"] = state ? state.disableRecommendations : undefined;
            resourceInputs["keepLabels"] = state ? state.keepLabels : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ExemptionArgs | undefined;
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            resourceInputs["disableRecommendations"] = args ? args.disableRecommendations : undefined;
            resourceInputs["keepLabels"] = args ? args.keepLabels : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Exemption.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Exemption resources.
 */
export interface ExemptionState {
    /**
     * Unix timestamp of when this exemption was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * When set to true, the recommendations service will exempt this metric from consideration.
     */
    disableRecommendations?: pulumi.Input<boolean>;
    /**
     * The array of labels to keep; labels not in this array will be aggregated.
     */
    keepLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the metric to be aggregated.
     */
    metric?: pulumi.Input<string>;
    /**
     * An optional string detailing the reason(s) for this exemption.
     */
    reason?: pulumi.Input<string>;
    /**
     * Unix timestamp of when this exemption was last updated.
     */
    updatedAt?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Exemption resource.
 */
export interface ExemptionArgs {
    /**
     * When set to true, the recommendations service will exempt this metric from consideration.
     */
    disableRecommendations?: pulumi.Input<boolean>;
    /**
     * The array of labels to keep; labels not in this array will be aggregated.
     */
    keepLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the metric to be aggregated.
     */
    metric: pulumi.Input<string>;
    /**
     * An optional string detailing the reason(s) for this exemption.
     */
    reason?: pulumi.Input<string>;
}
