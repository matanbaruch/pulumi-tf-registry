// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ExemptionArgs, ExemptionState } from "./exemption";
export type Exemption = import("./exemption").Exemption;
export const Exemption: typeof import("./exemption").Exemption = null as any;
utilities.lazyLoad(exports, ["Exemption"], () => require("./exemption"));

export { GetRecommendationsArgs, GetRecommendationsResult, GetRecommendationsOutputArgs } from "./getRecommendations";
export const getRecommendations: typeof import("./getRecommendations").getRecommendations = null as any;
export const getRecommendationsOutput: typeof import("./getRecommendations").getRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendations","getRecommendationsOutput"], () => require("./getRecommendations"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecommendationsConfigArgs, RecommendationsConfigState } from "./recommendationsConfig";
export type RecommendationsConfig = import("./recommendationsConfig").RecommendationsConfig;
export const RecommendationsConfig: typeof import("./recommendationsConfig").RecommendationsConfig = null as any;
utilities.lazyLoad(exports, ["RecommendationsConfig"], () => require("./recommendationsConfig"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana-adaptive-metrics:index/exemption:Exemption":
                return new Exemption(name, <any>undefined, { urn })
            case "grafana-adaptive-metrics:index/recommendationsConfig:RecommendationsConfig":
                return new RecommendationsConfig(name, <any>undefined, { urn })
            case "grafana-adaptive-metrics:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana-adaptive-metrics", "index/exemption", _module)
pulumi.runtime.registerResourceModule("grafana-adaptive-metrics", "index/recommendationsConfig", _module)
pulumi.runtime.registerResourceModule("grafana-adaptive-metrics", "index/rule", _module)
pulumi.runtime.registerResourcePackage("grafana-adaptive-metrics", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:grafana-adaptive-metrics") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
