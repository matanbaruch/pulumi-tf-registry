// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana-adaptive-metrics:index/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * The delay until aggregation is performed.
     */
    public readonly aggregationDelay!: pulumi.Output<string>;
    /**
     * The interval at which to generate the aggregated series.
     */
    public readonly aggregationInterval!: pulumi.Output<string>;
    /**
     * The array of aggregation types to calculate for this metric.
     */
    public readonly aggregations!: pulumi.Output<string[]>;
    public readonly autoImport!: pulumi.Output<boolean>;
    /**
     * Set to true to skip both ingestion and aggregation and drop the metric entirely.
     */
    public readonly drop!: pulumi.Output<boolean>;
    /**
     * The array of labels that will be aggregated.
     */
    public readonly dropLabels!: pulumi.Output<string[]>;
    /**
     * The array of labels to keep; labels not in this array will be aggregated.
     */
    public readonly keepLabels!: pulumi.Output<string[]>;
    /**
     * Specifies how the metric field matches to incoming metric names. Can be 'prefix', 'suffix', or 'exact', defaults to
     * 'exact'.
     */
    public readonly matchType!: pulumi.Output<string>;
    /**
     * The name of the metric to be aggregated.
     */
    public readonly metric!: pulumi.Output<string>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["aggregationDelay"] = state ? state.aggregationDelay : undefined;
            resourceInputs["aggregationInterval"] = state ? state.aggregationInterval : undefined;
            resourceInputs["aggregations"] = state ? state.aggregations : undefined;
            resourceInputs["autoImport"] = state ? state.autoImport : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["dropLabels"] = state ? state.dropLabels : undefined;
            resourceInputs["keepLabels"] = state ? state.keepLabels : undefined;
            resourceInputs["matchType"] = state ? state.matchType : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            resourceInputs["aggregationDelay"] = args ? args.aggregationDelay : undefined;
            resourceInputs["aggregationInterval"] = args ? args.aggregationInterval : undefined;
            resourceInputs["aggregations"] = args ? args.aggregations : undefined;
            resourceInputs["autoImport"] = args ? args.autoImport : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["dropLabels"] = args ? args.dropLabels : undefined;
            resourceInputs["keepLabels"] = args ? args.keepLabels : undefined;
            resourceInputs["matchType"] = args ? args.matchType : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * The delay until aggregation is performed.
     */
    aggregationDelay?: pulumi.Input<string>;
    /**
     * The interval at which to generate the aggregated series.
     */
    aggregationInterval?: pulumi.Input<string>;
    /**
     * The array of aggregation types to calculate for this metric.
     */
    aggregations?: pulumi.Input<pulumi.Input<string>[]>;
    autoImport?: pulumi.Input<boolean>;
    /**
     * Set to true to skip both ingestion and aggregation and drop the metric entirely.
     */
    drop?: pulumi.Input<boolean>;
    /**
     * The array of labels that will be aggregated.
     */
    dropLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The array of labels to keep; labels not in this array will be aggregated.
     */
    keepLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies how the metric field matches to incoming metric names. Can be 'prefix', 'suffix', or 'exact', defaults to
     * 'exact'.
     */
    matchType?: pulumi.Input<string>;
    /**
     * The name of the metric to be aggregated.
     */
    metric?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The delay until aggregation is performed.
     */
    aggregationDelay?: pulumi.Input<string>;
    /**
     * The interval at which to generate the aggregated series.
     */
    aggregationInterval?: pulumi.Input<string>;
    /**
     * The array of aggregation types to calculate for this metric.
     */
    aggregations?: pulumi.Input<pulumi.Input<string>[]>;
    autoImport?: pulumi.Input<boolean>;
    /**
     * Set to true to skip both ingestion and aggregation and drop the metric entirely.
     */
    drop?: pulumi.Input<boolean>;
    /**
     * The array of labels that will be aggregated.
     */
    dropLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The array of labels to keep; labels not in this array will be aggregated.
     */
    keepLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies how the metric field matches to incoming metric names. Can be 'prefix', 'suffix', or 'exact', defaults to
     * 'exact'.
     */
    matchType?: pulumi.Input<string>;
    /**
     * The name of the metric to be aggregated.
     */
    metric: pulumi.Input<string>;
}
