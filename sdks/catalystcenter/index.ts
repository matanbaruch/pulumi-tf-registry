// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AnycastGatewayArgs, AnycastGatewayState } from "./anycastGateway";
export type AnycastGateway = import("./anycastGateway").AnycastGateway;
export const AnycastGateway: typeof import("./anycastGateway").AnycastGateway = null as any;
utilities.lazyLoad(exports, ["AnycastGateway"], () => require("./anycastGateway"));

export { AreaArgs, AreaState } from "./area";
export type Area = import("./area").Area;
export const Area: typeof import("./area").Area = null as any;
utilities.lazyLoad(exports, ["Area"], () => require("./area"));

export { AssignCredentialsArgs, AssignCredentialsState } from "./assignCredentials";
export type AssignCredentials = import("./assignCredentials").AssignCredentials;
export const AssignCredentials: typeof import("./assignCredentials").AssignCredentials = null as any;
utilities.lazyLoad(exports, ["AssignCredentials"], () => require("./assignCredentials"));

export { AssignTemplatesToTagArgs, AssignTemplatesToTagState } from "./assignTemplatesToTag";
export type AssignTemplatesToTag = import("./assignTemplatesToTag").AssignTemplatesToTag;
export const AssignTemplatesToTag: typeof import("./assignTemplatesToTag").AssignTemplatesToTag = null as any;
utilities.lazyLoad(exports, ["AssignTemplatesToTag"], () => require("./assignTemplatesToTag"));

export { AssociateSiteToNetworkProfileArgs, AssociateSiteToNetworkProfileState } from "./associateSiteToNetworkProfile";
export type AssociateSiteToNetworkProfile = import("./associateSiteToNetworkProfile").AssociateSiteToNetworkProfile;
export const AssociateSiteToNetworkProfile: typeof import("./associateSiteToNetworkProfile").AssociateSiteToNetworkProfile = null as any;
utilities.lazyLoad(exports, ["AssociateSiteToNetworkProfile"], () => require("./associateSiteToNetworkProfile"));

export { BuildingArgs, BuildingState } from "./building";
export type Building = import("./building").Building;
export const Building: typeof import("./building").Building = null as any;
utilities.lazyLoad(exports, ["Building"], () => require("./building"));

export { CredentialsCliArgs, CredentialsCliState } from "./credentialsCli";
export type CredentialsCli = import("./credentialsCli").CredentialsCli;
export const CredentialsCli: typeof import("./credentialsCli").CredentialsCli = null as any;
utilities.lazyLoad(exports, ["CredentialsCli"], () => require("./credentialsCli"));

export { CredentialsHttpsReadArgs, CredentialsHttpsReadState } from "./credentialsHttpsRead";
export type CredentialsHttpsRead = import("./credentialsHttpsRead").CredentialsHttpsRead;
export const CredentialsHttpsRead: typeof import("./credentialsHttpsRead").CredentialsHttpsRead = null as any;
utilities.lazyLoad(exports, ["CredentialsHttpsRead"], () => require("./credentialsHttpsRead"));

export { CredentialsHttpsWriteArgs, CredentialsHttpsWriteState } from "./credentialsHttpsWrite";
export type CredentialsHttpsWrite = import("./credentialsHttpsWrite").CredentialsHttpsWrite;
export const CredentialsHttpsWrite: typeof import("./credentialsHttpsWrite").CredentialsHttpsWrite = null as any;
utilities.lazyLoad(exports, ["CredentialsHttpsWrite"], () => require("./credentialsHttpsWrite"));

export { CredentialsSnmpv2ReadArgs, CredentialsSnmpv2ReadState } from "./credentialsSnmpv2Read";
export type CredentialsSnmpv2Read = import("./credentialsSnmpv2Read").CredentialsSnmpv2Read;
export const CredentialsSnmpv2Read: typeof import("./credentialsSnmpv2Read").CredentialsSnmpv2Read = null as any;
utilities.lazyLoad(exports, ["CredentialsSnmpv2Read"], () => require("./credentialsSnmpv2Read"));

export { CredentialsSnmpv2WriteArgs, CredentialsSnmpv2WriteState } from "./credentialsSnmpv2Write";
export type CredentialsSnmpv2Write = import("./credentialsSnmpv2Write").CredentialsSnmpv2Write;
export const CredentialsSnmpv2Write: typeof import("./credentialsSnmpv2Write").CredentialsSnmpv2Write = null as any;
utilities.lazyLoad(exports, ["CredentialsSnmpv2Write"], () => require("./credentialsSnmpv2Write"));

export { CredentialsSnmpv3Args, CredentialsSnmpv3State } from "./credentialsSnmpv3";
export type CredentialsSnmpv3 = import("./credentialsSnmpv3").CredentialsSnmpv3;
export const CredentialsSnmpv3: typeof import("./credentialsSnmpv3").CredentialsSnmpv3 = null as any;
utilities.lazyLoad(exports, ["CredentialsSnmpv3"], () => require("./credentialsSnmpv3"));

export { DeployTemplateArgs, DeployTemplateState } from "./deployTemplate";
export type DeployTemplate = import("./deployTemplate").DeployTemplate;
export const DeployTemplate: typeof import("./deployTemplate").DeployTemplate = null as any;
utilities.lazyLoad(exports, ["DeployTemplate"], () => require("./deployTemplate"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceRoleArgs, DeviceRoleState } from "./deviceRole";
export type DeviceRole = import("./deviceRole").DeviceRole;
export const DeviceRole: typeof import("./deviceRole").DeviceRole = null as any;
utilities.lazyLoad(exports, ["DeviceRole"], () => require("./deviceRole"));

export { DiscoveryArgs, DiscoveryState } from "./discovery";
export type Discovery = import("./discovery").Discovery;
export const Discovery: typeof import("./discovery").Discovery = null as any;
utilities.lazyLoad(exports, ["Discovery"], () => require("./discovery"));

export { FabricAuthenticationProfileArgs, FabricAuthenticationProfileState } from "./fabricAuthenticationProfile";
export type FabricAuthenticationProfile = import("./fabricAuthenticationProfile").FabricAuthenticationProfile;
export const FabricAuthenticationProfile: typeof import("./fabricAuthenticationProfile").FabricAuthenticationProfile = null as any;
utilities.lazyLoad(exports, ["FabricAuthenticationProfile"], () => require("./fabricAuthenticationProfile"));

export { FabricDeviceArgs, FabricDeviceState } from "./fabricDevice";
export type FabricDevice = import("./fabricDevice").FabricDevice;
export const FabricDevice: typeof import("./fabricDevice").FabricDevice = null as any;
utilities.lazyLoad(exports, ["FabricDevice"], () => require("./fabricDevice"));

export { FabricL2HandoffArgs, FabricL2HandoffState } from "./fabricL2Handoff";
export type FabricL2Handoff = import("./fabricL2Handoff").FabricL2Handoff;
export const FabricL2Handoff: typeof import("./fabricL2Handoff").FabricL2Handoff = null as any;
utilities.lazyLoad(exports, ["FabricL2Handoff"], () => require("./fabricL2Handoff"));

export { FabricL3HandoffIpTransitArgs, FabricL3HandoffIpTransitState } from "./fabricL3HandoffIpTransit";
export type FabricL3HandoffIpTransit = import("./fabricL3HandoffIpTransit").FabricL3HandoffIpTransit;
export const FabricL3HandoffIpTransit: typeof import("./fabricL3HandoffIpTransit").FabricL3HandoffIpTransit = null as any;
utilities.lazyLoad(exports, ["FabricL3HandoffIpTransit"], () => require("./fabricL3HandoffIpTransit"));

export { FabricProvisionDeviceArgs, FabricProvisionDeviceState } from "./fabricProvisionDevice";
export type FabricProvisionDevice = import("./fabricProvisionDevice").FabricProvisionDevice;
export const FabricProvisionDevice: typeof import("./fabricProvisionDevice").FabricProvisionDevice = null as any;
utilities.lazyLoad(exports, ["FabricProvisionDevice"], () => require("./fabricProvisionDevice"));

export { FabricSiteArgs, FabricSiteState } from "./fabricSite";
export type FabricSite = import("./fabricSite").FabricSite;
export const FabricSite: typeof import("./fabricSite").FabricSite = null as any;
utilities.lazyLoad(exports, ["FabricSite"], () => require("./fabricSite"));

export { FabricVirtualNetworkArgs, FabricVirtualNetworkState } from "./fabricVirtualNetwork";
export type FabricVirtualNetwork = import("./fabricVirtualNetwork").FabricVirtualNetwork;
export const FabricVirtualNetwork: typeof import("./fabricVirtualNetwork").FabricVirtualNetwork = null as any;
utilities.lazyLoad(exports, ["FabricVirtualNetwork"], () => require("./fabricVirtualNetwork"));

export { FloorArgs, FloorState } from "./floor";
export type Floor = import("./floor").Floor;
export const Floor: typeof import("./floor").Floor = null as any;
utilities.lazyLoad(exports, ["Floor"], () => require("./floor"));

export { GetAnycastGatewayArgs, GetAnycastGatewayResult, GetAnycastGatewayOutputArgs } from "./getAnycastGateway";
export const getAnycastGateway: typeof import("./getAnycastGateway").getAnycastGateway = null as any;
export const getAnycastGatewayOutput: typeof import("./getAnycastGateway").getAnycastGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getAnycastGateway","getAnycastGatewayOutput"], () => require("./getAnycastGateway"));

export { GetAreaArgs, GetAreaResult, GetAreaOutputArgs } from "./getArea";
export const getArea: typeof import("./getArea").getArea = null as any;
export const getAreaOutput: typeof import("./getArea").getAreaOutput = null as any;
utilities.lazyLoad(exports, ["getArea","getAreaOutput"], () => require("./getArea"));

export { GetAssignCredentialsArgs, GetAssignCredentialsResult, GetAssignCredentialsOutputArgs } from "./getAssignCredentials";
export const getAssignCredentials: typeof import("./getAssignCredentials").getAssignCredentials = null as any;
export const getAssignCredentialsOutput: typeof import("./getAssignCredentials").getAssignCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getAssignCredentials","getAssignCredentialsOutput"], () => require("./getAssignCredentials"));

export { GetAssignTemplatesToTagArgs, GetAssignTemplatesToTagResult, GetAssignTemplatesToTagOutputArgs } from "./getAssignTemplatesToTag";
export const getAssignTemplatesToTag: typeof import("./getAssignTemplatesToTag").getAssignTemplatesToTag = null as any;
export const getAssignTemplatesToTagOutput: typeof import("./getAssignTemplatesToTag").getAssignTemplatesToTagOutput = null as any;
utilities.lazyLoad(exports, ["getAssignTemplatesToTag","getAssignTemplatesToTagOutput"], () => require("./getAssignTemplatesToTag"));

export { GetBuildingArgs, GetBuildingResult, GetBuildingOutputArgs } from "./getBuilding";
export const getBuilding: typeof import("./getBuilding").getBuilding = null as any;
export const getBuildingOutput: typeof import("./getBuilding").getBuildingOutput = null as any;
utilities.lazyLoad(exports, ["getBuilding","getBuildingOutput"], () => require("./getBuilding"));

export { GetCredentialsCliArgs, GetCredentialsCliResult, GetCredentialsCliOutputArgs } from "./getCredentialsCli";
export const getCredentialsCli: typeof import("./getCredentialsCli").getCredentialsCli = null as any;
export const getCredentialsCliOutput: typeof import("./getCredentialsCli").getCredentialsCliOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialsCli","getCredentialsCliOutput"], () => require("./getCredentialsCli"));

export { GetCredentialsHttpsReadArgs, GetCredentialsHttpsReadResult, GetCredentialsHttpsReadOutputArgs } from "./getCredentialsHttpsRead";
export const getCredentialsHttpsRead: typeof import("./getCredentialsHttpsRead").getCredentialsHttpsRead = null as any;
export const getCredentialsHttpsReadOutput: typeof import("./getCredentialsHttpsRead").getCredentialsHttpsReadOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialsHttpsRead","getCredentialsHttpsReadOutput"], () => require("./getCredentialsHttpsRead"));

export { GetCredentialsHttpsWriteArgs, GetCredentialsHttpsWriteResult, GetCredentialsHttpsWriteOutputArgs } from "./getCredentialsHttpsWrite";
export const getCredentialsHttpsWrite: typeof import("./getCredentialsHttpsWrite").getCredentialsHttpsWrite = null as any;
export const getCredentialsHttpsWriteOutput: typeof import("./getCredentialsHttpsWrite").getCredentialsHttpsWriteOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialsHttpsWrite","getCredentialsHttpsWriteOutput"], () => require("./getCredentialsHttpsWrite"));

export { GetCredentialsSnmpv2ReadArgs, GetCredentialsSnmpv2ReadResult, GetCredentialsSnmpv2ReadOutputArgs } from "./getCredentialsSnmpv2Read";
export const getCredentialsSnmpv2Read: typeof import("./getCredentialsSnmpv2Read").getCredentialsSnmpv2Read = null as any;
export const getCredentialsSnmpv2ReadOutput: typeof import("./getCredentialsSnmpv2Read").getCredentialsSnmpv2ReadOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialsSnmpv2Read","getCredentialsSnmpv2ReadOutput"], () => require("./getCredentialsSnmpv2Read"));

export { GetCredentialsSnmpv2WriteArgs, GetCredentialsSnmpv2WriteResult, GetCredentialsSnmpv2WriteOutputArgs } from "./getCredentialsSnmpv2Write";
export const getCredentialsSnmpv2Write: typeof import("./getCredentialsSnmpv2Write").getCredentialsSnmpv2Write = null as any;
export const getCredentialsSnmpv2WriteOutput: typeof import("./getCredentialsSnmpv2Write").getCredentialsSnmpv2WriteOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialsSnmpv2Write","getCredentialsSnmpv2WriteOutput"], () => require("./getCredentialsSnmpv2Write"));

export { GetCredentialsSnmpv3Args, GetCredentialsSnmpv3Result, GetCredentialsSnmpv3OutputArgs } from "./getCredentialsSnmpv3";
export const getCredentialsSnmpv3: typeof import("./getCredentialsSnmpv3").getCredentialsSnmpv3 = null as any;
export const getCredentialsSnmpv3Output: typeof import("./getCredentialsSnmpv3").getCredentialsSnmpv3Output = null as any;
utilities.lazyLoad(exports, ["getCredentialsSnmpv3","getCredentialsSnmpv3Output"], () => require("./getCredentialsSnmpv3"));

export { GetDeviceDetailArgs, GetDeviceDetailResult, GetDeviceDetailOutputArgs } from "./getDeviceDetail";
export const getDeviceDetail: typeof import("./getDeviceDetail").getDeviceDetail = null as any;
export const getDeviceDetailOutput: typeof import("./getDeviceDetail").getDeviceDetailOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceDetail","getDeviceDetailOutput"], () => require("./getDeviceDetail"));

export { GetDiscoveryArgs, GetDiscoveryResult, GetDiscoveryOutputArgs } from "./getDiscovery";
export const getDiscovery: typeof import("./getDiscovery").getDiscovery = null as any;
export const getDiscoveryOutput: typeof import("./getDiscovery").getDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getDiscovery","getDiscoveryOutput"], () => require("./getDiscovery"));

export { GetFabricAuthenticationProfileArgs, GetFabricAuthenticationProfileResult, GetFabricAuthenticationProfileOutputArgs } from "./getFabricAuthenticationProfile";
export const getFabricAuthenticationProfile: typeof import("./getFabricAuthenticationProfile").getFabricAuthenticationProfile = null as any;
export const getFabricAuthenticationProfileOutput: typeof import("./getFabricAuthenticationProfile").getFabricAuthenticationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFabricAuthenticationProfile","getFabricAuthenticationProfileOutput"], () => require("./getFabricAuthenticationProfile"));

export { GetFabricDeviceArgs, GetFabricDeviceResult, GetFabricDeviceOutputArgs } from "./getFabricDevice";
export const getFabricDevice: typeof import("./getFabricDevice").getFabricDevice = null as any;
export const getFabricDeviceOutput: typeof import("./getFabricDevice").getFabricDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getFabricDevice","getFabricDeviceOutput"], () => require("./getFabricDevice"));

export { GetFabricL2HandoffArgs, GetFabricL2HandoffResult, GetFabricL2HandoffOutputArgs } from "./getFabricL2Handoff";
export const getFabricL2Handoff: typeof import("./getFabricL2Handoff").getFabricL2Handoff = null as any;
export const getFabricL2HandoffOutput: typeof import("./getFabricL2Handoff").getFabricL2HandoffOutput = null as any;
utilities.lazyLoad(exports, ["getFabricL2Handoff","getFabricL2HandoffOutput"], () => require("./getFabricL2Handoff"));

export { GetFabricL3HandoffIpTransitArgs, GetFabricL3HandoffIpTransitResult, GetFabricL3HandoffIpTransitOutputArgs } from "./getFabricL3HandoffIpTransit";
export const getFabricL3HandoffIpTransit: typeof import("./getFabricL3HandoffIpTransit").getFabricL3HandoffIpTransit = null as any;
export const getFabricL3HandoffIpTransitOutput: typeof import("./getFabricL3HandoffIpTransit").getFabricL3HandoffIpTransitOutput = null as any;
utilities.lazyLoad(exports, ["getFabricL3HandoffIpTransit","getFabricL3HandoffIpTransitOutput"], () => require("./getFabricL3HandoffIpTransit"));

export { GetFabricProvisionDeviceArgs, GetFabricProvisionDeviceResult, GetFabricProvisionDeviceOutputArgs } from "./getFabricProvisionDevice";
export const getFabricProvisionDevice: typeof import("./getFabricProvisionDevice").getFabricProvisionDevice = null as any;
export const getFabricProvisionDeviceOutput: typeof import("./getFabricProvisionDevice").getFabricProvisionDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getFabricProvisionDevice","getFabricProvisionDeviceOutput"], () => require("./getFabricProvisionDevice"));

export { GetFabricSiteArgs, GetFabricSiteResult, GetFabricSiteOutputArgs } from "./getFabricSite";
export const getFabricSite: typeof import("./getFabricSite").getFabricSite = null as any;
export const getFabricSiteOutput: typeof import("./getFabricSite").getFabricSiteOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSite","getFabricSiteOutput"], () => require("./getFabricSite"));

export { GetFabricVirtualNetworkArgs, GetFabricVirtualNetworkResult, GetFabricVirtualNetworkOutputArgs } from "./getFabricVirtualNetwork";
export const getFabricVirtualNetwork: typeof import("./getFabricVirtualNetwork").getFabricVirtualNetwork = null as any;
export const getFabricVirtualNetworkOutput: typeof import("./getFabricVirtualNetwork").getFabricVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVirtualNetwork","getFabricVirtualNetworkOutput"], () => require("./getFabricVirtualNetwork"));

export { GetFloorArgs, GetFloorResult, GetFloorOutputArgs } from "./getFloor";
export const getFloor: typeof import("./getFloor").getFloor = null as any;
export const getFloorOutput: typeof import("./getFloor").getFloorOutput = null as any;
utilities.lazyLoad(exports, ["getFloor","getFloorOutput"], () => require("./getFloor"));

export { GetIpPoolArgs, GetIpPoolResult, GetIpPoolOutputArgs } from "./getIpPool";
export const getIpPool: typeof import("./getIpPool").getIpPool = null as any;
export const getIpPoolOutput: typeof import("./getIpPool").getIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIpPool","getIpPoolOutput"], () => require("./getIpPool"));

export { GetIpPoolReservationArgs, GetIpPoolReservationResult, GetIpPoolReservationOutputArgs } from "./getIpPoolReservation";
export const getIpPoolReservation: typeof import("./getIpPoolReservation").getIpPoolReservation = null as any;
export const getIpPoolReservationOutput: typeof import("./getIpPoolReservation").getIpPoolReservationOutput = null as any;
utilities.lazyLoad(exports, ["getIpPoolReservation","getIpPoolReservationOutput"], () => require("./getIpPoolReservation"));

export { GetLanAutomationArgs, GetLanAutomationResult, GetLanAutomationOutputArgs } from "./getLanAutomation";
export const getLanAutomation: typeof import("./getLanAutomation").getLanAutomation = null as any;
export const getLanAutomationOutput: typeof import("./getLanAutomation").getLanAutomationOutput = null as any;
utilities.lazyLoad(exports, ["getLanAutomation","getLanAutomationOutput"], () => require("./getLanAutomation"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkDevicesResult } from "./getNetworkDevices";
export const getNetworkDevices: typeof import("./getNetworkDevices").getNetworkDevices = null as any;
export const getNetworkDevicesOutput: typeof import("./getNetworkDevices").getNetworkDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDevices","getNetworkDevicesOutput"], () => require("./getNetworkDevices"));

export { GetNetworkProfileArgs, GetNetworkProfileResult, GetNetworkProfileOutputArgs } from "./getNetworkProfile";
export const getNetworkProfile: typeof import("./getNetworkProfile").getNetworkProfile = null as any;
export const getNetworkProfileOutput: typeof import("./getNetworkProfile").getNetworkProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkProfile","getNetworkProfileOutput"], () => require("./getNetworkProfile"));

export { GetPnpDeviceArgs, GetPnpDeviceResult, GetPnpDeviceOutputArgs } from "./getPnpDevice";
export const getPnpDevice: typeof import("./getPnpDevice").getPnpDevice = null as any;
export const getPnpDeviceOutput: typeof import("./getPnpDevice").getPnpDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getPnpDevice","getPnpDeviceOutput"], () => require("./getPnpDevice"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSpProfileArgs, GetSpProfileResult, GetSpProfileOutputArgs } from "./getSpProfile";
export const getSpProfile: typeof import("./getSpProfile").getSpProfile = null as any;
export const getSpProfileOutput: typeof import("./getSpProfile").getSpProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSpProfile","getSpProfileOutput"], () => require("./getSpProfile"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetTemplateVersionArgs, GetTemplateVersionResult, GetTemplateVersionOutputArgs } from "./getTemplateVersion";
export const getTemplateVersion: typeof import("./getTemplateVersion").getTemplateVersion = null as any;
export const getTemplateVersionOutput: typeof import("./getTemplateVersion").getTemplateVersionOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateVersion","getTemplateVersionOutput"], () => require("./getTemplateVersion"));

export { GetTransitPeerNetworkArgs, GetTransitPeerNetworkResult, GetTransitPeerNetworkOutputArgs } from "./getTransitPeerNetwork";
export const getTransitPeerNetwork: typeof import("./getTransitPeerNetwork").getTransitPeerNetwork = null as any;
export const getTransitPeerNetworkOutput: typeof import("./getTransitPeerNetwork").getTransitPeerNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getTransitPeerNetwork","getTransitPeerNetworkOutput"], () => require("./getTransitPeerNetwork"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWirelessEnterpriseSsidArgs, GetWirelessEnterpriseSsidResult, GetWirelessEnterpriseSsidOutputArgs } from "./getWirelessEnterpriseSsid";
export const getWirelessEnterpriseSsid: typeof import("./getWirelessEnterpriseSsid").getWirelessEnterpriseSsid = null as any;
export const getWirelessEnterpriseSsidOutput: typeof import("./getWirelessEnterpriseSsid").getWirelessEnterpriseSsidOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessEnterpriseSsid","getWirelessEnterpriseSsidOutput"], () => require("./getWirelessEnterpriseSsid"));

export { GetWirelessProfileArgs, GetWirelessProfileResult, GetWirelessProfileOutputArgs } from "./getWirelessProfile";
export const getWirelessProfile: typeof import("./getWirelessProfile").getWirelessProfile = null as any;
export const getWirelessProfileOutput: typeof import("./getWirelessProfile").getWirelessProfileOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessProfile","getWirelessProfileOutput"], () => require("./getWirelessProfile"));

export { GetWirelessRfProfileArgs, GetWirelessRfProfileResult, GetWirelessRfProfileOutputArgs } from "./getWirelessRfProfile";
export const getWirelessRfProfile: typeof import("./getWirelessRfProfile").getWirelessRfProfile = null as any;
export const getWirelessRfProfileOutput: typeof import("./getWirelessRfProfile").getWirelessRfProfileOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessRfProfile","getWirelessRfProfileOutput"], () => require("./getWirelessRfProfile"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageActivationArgs, ImageActivationState } from "./imageActivation";
export type ImageActivation = import("./imageActivation").ImageActivation;
export const ImageActivation: typeof import("./imageActivation").ImageActivation = null as any;
utilities.lazyLoad(exports, ["ImageActivation"], () => require("./imageActivation"));

export { ImageDistributionArgs, ImageDistributionState } from "./imageDistribution";
export type ImageDistribution = import("./imageDistribution").ImageDistribution;
export const ImageDistribution: typeof import("./imageDistribution").ImageDistribution = null as any;
utilities.lazyLoad(exports, ["ImageDistribution"], () => require("./imageDistribution"));

export { IpPoolArgs, IpPoolState } from "./ipPool";
export type IpPool = import("./ipPool").IpPool;
export const IpPool: typeof import("./ipPool").IpPool = null as any;
utilities.lazyLoad(exports, ["IpPool"], () => require("./ipPool"));

export { IpPoolReservationArgs, IpPoolReservationState } from "./ipPoolReservation";
export type IpPoolReservation = import("./ipPoolReservation").IpPoolReservation;
export const IpPoolReservation: typeof import("./ipPoolReservation").IpPoolReservation = null as any;
utilities.lazyLoad(exports, ["IpPoolReservation"], () => require("./ipPoolReservation"));

export { LanAutomationArgs, LanAutomationState } from "./lanAutomation";
export type LanAutomation = import("./lanAutomation").LanAutomation;
export const LanAutomation: typeof import("./lanAutomation").LanAutomation = null as any;
utilities.lazyLoad(exports, ["LanAutomation"], () => require("./lanAutomation"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkProfileArgs, NetworkProfileState } from "./networkProfile";
export type NetworkProfile = import("./networkProfile").NetworkProfile;
export const NetworkProfile: typeof import("./networkProfile").NetworkProfile = null as any;
utilities.lazyLoad(exports, ["NetworkProfile"], () => require("./networkProfile"));

export { PnpConfigPreviewArgs, PnpConfigPreviewState } from "./pnpConfigPreview";
export type PnpConfigPreview = import("./pnpConfigPreview").PnpConfigPreview;
export const PnpConfigPreview: typeof import("./pnpConfigPreview").PnpConfigPreview = null as any;
utilities.lazyLoad(exports, ["PnpConfigPreview"], () => require("./pnpConfigPreview"));

export { PnpDeviceArgs, PnpDeviceState } from "./pnpDevice";
export type PnpDevice = import("./pnpDevice").PnpDevice;
export const PnpDevice: typeof import("./pnpDevice").PnpDevice = null as any;
utilities.lazyLoad(exports, ["PnpDevice"], () => require("./pnpDevice"));

export { PnpDeviceClaimSiteArgs, PnpDeviceClaimSiteState } from "./pnpDeviceClaimSite";
export type PnpDeviceClaimSite = import("./pnpDeviceClaimSite").PnpDeviceClaimSite;
export const PnpDeviceClaimSite: typeof import("./pnpDeviceClaimSite").PnpDeviceClaimSite = null as any;
utilities.lazyLoad(exports, ["PnpDeviceClaimSite"], () => require("./pnpDeviceClaimSite"));

export { PnpImportDevicesArgs, PnpImportDevicesState } from "./pnpImportDevices";
export type PnpImportDevices = import("./pnpImportDevices").PnpImportDevices;
export const PnpImportDevices: typeof import("./pnpImportDevices").PnpImportDevices = null as any;
utilities.lazyLoad(exports, ["PnpImportDevices"], () => require("./pnpImportDevices"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SpProfileArgs, SpProfileState } from "./spProfile";
export type SpProfile = import("./spProfile").SpProfile;
export const SpProfile: typeof import("./spProfile").SpProfile = null as any;
utilities.lazyLoad(exports, ["SpProfile"], () => require("./spProfile"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TemplateVersionArgs, TemplateVersionState } from "./templateVersion";
export type TemplateVersion = import("./templateVersion").TemplateVersion;
export const TemplateVersion: typeof import("./templateVersion").TemplateVersion = null as any;
utilities.lazyLoad(exports, ["TemplateVersion"], () => require("./templateVersion"));

export { TransitPeerNetworkArgs, TransitPeerNetworkState } from "./transitPeerNetwork";
export type TransitPeerNetwork = import("./transitPeerNetwork").TransitPeerNetwork;
export const TransitPeerNetwork: typeof import("./transitPeerNetwork").TransitPeerNetwork = null as any;
utilities.lazyLoad(exports, ["TransitPeerNetwork"], () => require("./transitPeerNetwork"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VirtualNetworkIpPoolArgs, VirtualNetworkIpPoolState } from "./virtualNetworkIpPool";
export type VirtualNetworkIpPool = import("./virtualNetworkIpPool").VirtualNetworkIpPool;
export const VirtualNetworkIpPool: typeof import("./virtualNetworkIpPool").VirtualNetworkIpPool = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkIpPool"], () => require("./virtualNetworkIpPool"));

export { VirtualNetworkToFabricSiteArgs, VirtualNetworkToFabricSiteState } from "./virtualNetworkToFabricSite";
export type VirtualNetworkToFabricSite = import("./virtualNetworkToFabricSite").VirtualNetworkToFabricSite;
export const VirtualNetworkToFabricSite: typeof import("./virtualNetworkToFabricSite").VirtualNetworkToFabricSite = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkToFabricSite"], () => require("./virtualNetworkToFabricSite"));

export { WirelessDeviceProvisionArgs, WirelessDeviceProvisionState } from "./wirelessDeviceProvision";
export type WirelessDeviceProvision = import("./wirelessDeviceProvision").WirelessDeviceProvision;
export const WirelessDeviceProvision: typeof import("./wirelessDeviceProvision").WirelessDeviceProvision = null as any;
utilities.lazyLoad(exports, ["WirelessDeviceProvision"], () => require("./wirelessDeviceProvision"));

export { WirelessEnterpriseSsidArgs, WirelessEnterpriseSsidState } from "./wirelessEnterpriseSsid";
export type WirelessEnterpriseSsid = import("./wirelessEnterpriseSsid").WirelessEnterpriseSsid;
export const WirelessEnterpriseSsid: typeof import("./wirelessEnterpriseSsid").WirelessEnterpriseSsid = null as any;
utilities.lazyLoad(exports, ["WirelessEnterpriseSsid"], () => require("./wirelessEnterpriseSsid"));

export { WirelessProfileArgs, WirelessProfileState } from "./wirelessProfile";
export type WirelessProfile = import("./wirelessProfile").WirelessProfile;
export const WirelessProfile: typeof import("./wirelessProfile").WirelessProfile = null as any;
utilities.lazyLoad(exports, ["WirelessProfile"], () => require("./wirelessProfile"));

export { WirelessRfProfileArgs, WirelessRfProfileState } from "./wirelessRfProfile";
export type WirelessRfProfile = import("./wirelessRfProfile").WirelessRfProfile;
export const WirelessRfProfile: typeof import("./wirelessRfProfile").WirelessRfProfile = null as any;
utilities.lazyLoad(exports, ["WirelessRfProfile"], () => require("./wirelessRfProfile"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "catalystcenter:index/anycastGateway:AnycastGateway":
                return new AnycastGateway(name, <any>undefined, { urn })
            case "catalystcenter:index/area:Area":
                return new Area(name, <any>undefined, { urn })
            case "catalystcenter:index/assignCredentials:AssignCredentials":
                return new AssignCredentials(name, <any>undefined, { urn })
            case "catalystcenter:index/assignTemplatesToTag:AssignTemplatesToTag":
                return new AssignTemplatesToTag(name, <any>undefined, { urn })
            case "catalystcenter:index/associateSiteToNetworkProfile:AssociateSiteToNetworkProfile":
                return new AssociateSiteToNetworkProfile(name, <any>undefined, { urn })
            case "catalystcenter:index/building:Building":
                return new Building(name, <any>undefined, { urn })
            case "catalystcenter:index/credentialsCli:CredentialsCli":
                return new CredentialsCli(name, <any>undefined, { urn })
            case "catalystcenter:index/credentialsHttpsRead:CredentialsHttpsRead":
                return new CredentialsHttpsRead(name, <any>undefined, { urn })
            case "catalystcenter:index/credentialsHttpsWrite:CredentialsHttpsWrite":
                return new CredentialsHttpsWrite(name, <any>undefined, { urn })
            case "catalystcenter:index/credentialsSnmpv2Read:CredentialsSnmpv2Read":
                return new CredentialsSnmpv2Read(name, <any>undefined, { urn })
            case "catalystcenter:index/credentialsSnmpv2Write:CredentialsSnmpv2Write":
                return new CredentialsSnmpv2Write(name, <any>undefined, { urn })
            case "catalystcenter:index/credentialsSnmpv3:CredentialsSnmpv3":
                return new CredentialsSnmpv3(name, <any>undefined, { urn })
            case "catalystcenter:index/deployTemplate:DeployTemplate":
                return new DeployTemplate(name, <any>undefined, { urn })
            case "catalystcenter:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "catalystcenter:index/deviceRole:DeviceRole":
                return new DeviceRole(name, <any>undefined, { urn })
            case "catalystcenter:index/discovery:Discovery":
                return new Discovery(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricAuthenticationProfile:FabricAuthenticationProfile":
                return new FabricAuthenticationProfile(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricDevice:FabricDevice":
                return new FabricDevice(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricL2Handoff:FabricL2Handoff":
                return new FabricL2Handoff(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricL3HandoffIpTransit:FabricL3HandoffIpTransit":
                return new FabricL3HandoffIpTransit(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricProvisionDevice:FabricProvisionDevice":
                return new FabricProvisionDevice(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricSite:FabricSite":
                return new FabricSite(name, <any>undefined, { urn })
            case "catalystcenter:index/fabricVirtualNetwork:FabricVirtualNetwork":
                return new FabricVirtualNetwork(name, <any>undefined, { urn })
            case "catalystcenter:index/floor:Floor":
                return new Floor(name, <any>undefined, { urn })
            case "catalystcenter:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "catalystcenter:index/imageActivation:ImageActivation":
                return new ImageActivation(name, <any>undefined, { urn })
            case "catalystcenter:index/imageDistribution:ImageDistribution":
                return new ImageDistribution(name, <any>undefined, { urn })
            case "catalystcenter:index/ipPool:IpPool":
                return new IpPool(name, <any>undefined, { urn })
            case "catalystcenter:index/ipPoolReservation:IpPoolReservation":
                return new IpPoolReservation(name, <any>undefined, { urn })
            case "catalystcenter:index/lanAutomation:LanAutomation":
                return new LanAutomation(name, <any>undefined, { urn })
            case "catalystcenter:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "catalystcenter:index/networkProfile:NetworkProfile":
                return new NetworkProfile(name, <any>undefined, { urn })
            case "catalystcenter:index/pnpConfigPreview:PnpConfigPreview":
                return new PnpConfigPreview(name, <any>undefined, { urn })
            case "catalystcenter:index/pnpDevice:PnpDevice":
                return new PnpDevice(name, <any>undefined, { urn })
            case "catalystcenter:index/pnpDeviceClaimSite:PnpDeviceClaimSite":
                return new PnpDeviceClaimSite(name, <any>undefined, { urn })
            case "catalystcenter:index/pnpImportDevices:PnpImportDevices":
                return new PnpImportDevices(name, <any>undefined, { urn })
            case "catalystcenter:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "catalystcenter:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "catalystcenter:index/spProfile:SpProfile":
                return new SpProfile(name, <any>undefined, { urn })
            case "catalystcenter:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "catalystcenter:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "catalystcenter:index/templateVersion:TemplateVersion":
                return new TemplateVersion(name, <any>undefined, { urn })
            case "catalystcenter:index/transitPeerNetwork:TransitPeerNetwork":
                return new TransitPeerNetwork(name, <any>undefined, { urn })
            case "catalystcenter:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "catalystcenter:index/virtualNetworkIpPool:VirtualNetworkIpPool":
                return new VirtualNetworkIpPool(name, <any>undefined, { urn })
            case "catalystcenter:index/virtualNetworkToFabricSite:VirtualNetworkToFabricSite":
                return new VirtualNetworkToFabricSite(name, <any>undefined, { urn })
            case "catalystcenter:index/wirelessDeviceProvision:WirelessDeviceProvision":
                return new WirelessDeviceProvision(name, <any>undefined, { urn })
            case "catalystcenter:index/wirelessEnterpriseSsid:WirelessEnterpriseSsid":
                return new WirelessEnterpriseSsid(name, <any>undefined, { urn })
            case "catalystcenter:index/wirelessProfile:WirelessProfile":
                return new WirelessProfile(name, <any>undefined, { urn })
            case "catalystcenter:index/wirelessRfProfile:WirelessRfProfile":
                return new WirelessRfProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("catalystcenter", "index/anycastGateway", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/area", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/assignCredentials", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/assignTemplatesToTag", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/associateSiteToNetworkProfile", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/building", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/credentialsCli", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/credentialsHttpsRead", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/credentialsHttpsWrite", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/credentialsSnmpv2Read", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/credentialsSnmpv2Write", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/credentialsSnmpv3", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/deployTemplate", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/device", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/deviceRole", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/discovery", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricAuthenticationProfile", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricDevice", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricL2Handoff", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricL3HandoffIpTransit", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricProvisionDevice", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricSite", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/fabricVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/floor", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/image", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/imageActivation", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/imageDistribution", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/ipPool", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/ipPoolReservation", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/lanAutomation", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/network", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/networkProfile", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/pnpConfigPreview", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/pnpDevice", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/pnpDeviceClaimSite", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/pnpImportDevices", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/project", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/role", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/spProfile", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/tag", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/template", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/templateVersion", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/transitPeerNetwork", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/user", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/virtualNetworkIpPool", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/virtualNetworkToFabricSite", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/wirelessDeviceProvision", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/wirelessEnterpriseSsid", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/wirelessProfile", _module)
pulumi.runtime.registerResourceModule("catalystcenter", "index/wirelessRfProfile", _module)
pulumi.runtime.registerResourcePackage("catalystcenter", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:catalystcenter") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
