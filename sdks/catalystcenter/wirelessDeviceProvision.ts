// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WirelessDeviceProvision extends pulumi.CustomResource {
    /**
     * Get an existing WirelessDeviceProvision resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessDeviceProvisionState, opts?: pulumi.CustomResourceOptions): WirelessDeviceProvision {
        return new WirelessDeviceProvision(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/wirelessDeviceProvision:WirelessDeviceProvision';

    /**
     * Returns true if the given object is an instance of WirelessDeviceProvision.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessDeviceProvision {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessDeviceProvision.__pulumiType;
    }

    /**
     * Controller Name
     */
    public readonly deviceName!: pulumi.Output<string>;
    /**
     * Dynamic Interface Details. The required attributes depend on the device type
     */
    public readonly dynamicInterfaces!: pulumi.Output<outputs.WirelessDeviceProvisionDynamicInterface[] | undefined>;
    /**
     * List of managed AP locations
     */
    public readonly managedApLocations!: pulumi.Output<string[]>;
    /**
     * Full Site Hierarchy where device has to be assigned
     */
    public readonly site!: pulumi.Output<string>;

    /**
     * Create a WirelessDeviceProvision resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessDeviceProvisionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessDeviceProvisionArgs | WirelessDeviceProvisionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessDeviceProvisionState | undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["dynamicInterfaces"] = state ? state.dynamicInterfaces : undefined;
            resourceInputs["managedApLocations"] = state ? state.managedApLocations : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
        } else {
            const args = argsOrState as WirelessDeviceProvisionArgs | undefined;
            if ((!args || args.deviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceName'");
            }
            if ((!args || args.managedApLocations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedApLocations'");
            }
            if ((!args || args.site === undefined) && !opts.urn) {
                throw new Error("Missing required property 'site'");
            }
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["dynamicInterfaces"] = args ? args.dynamicInterfaces : undefined;
            resourceInputs["managedApLocations"] = args ? args.managedApLocations : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessDeviceProvision.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelessDeviceProvision resources.
 */
export interface WirelessDeviceProvisionState {
    /**
     * Controller Name
     */
    deviceName?: pulumi.Input<string>;
    /**
     * Dynamic Interface Details. The required attributes depend on the device type
     */
    dynamicInterfaces?: pulumi.Input<pulumi.Input<inputs.WirelessDeviceProvisionDynamicInterface>[]>;
    /**
     * List of managed AP locations
     */
    managedApLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Full Site Hierarchy where device has to be assigned
     */
    site?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessDeviceProvision resource.
 */
export interface WirelessDeviceProvisionArgs {
    /**
     * Controller Name
     */
    deviceName: pulumi.Input<string>;
    /**
     * Dynamic Interface Details. The required attributes depend on the device type
     */
    dynamicInterfaces?: pulumi.Input<pulumi.Input<inputs.WirelessDeviceProvisionDynamicInterface>[]>;
    /**
     * List of managed AP locations
     */
    managedApLocations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Full Site Hierarchy where device has to be assigned
     */
    site: pulumi.Input<string>;
}
