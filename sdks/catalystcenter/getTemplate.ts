// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTemplate(args: GetTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("catalystcenter:index/getTemplate:getTemplate", {
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateArgs {
    id?: string;
    name?: string;
    projectId: string;
}

/**
 * A collection of values returned by getTemplate.
 */
export interface GetTemplateResult {
    readonly description: string;
    readonly deviceTypes: outputs.GetTemplateDeviceType[];
    readonly id: string;
    readonly language: string;
    readonly name: string;
    readonly projectId: string;
    readonly softwareType: string;
    readonly softwareVariant: string;
    readonly softwareVersion: string;
    readonly templateContent: string;
    readonly templateParams: outputs.GetTemplateTemplateParam[];
}
export function getTemplateOutput(args: GetTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTemplateResult> {
    return pulumi.output(args).apply((a: any) => getTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
