// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Use Catalyst Center as SNMP server
     */
    public readonly catalystCenterAsSnmpServer!: pulumi.Output<boolean | undefined>;
    /**
     * Use Catalyst Center as Syslog server
     */
    public readonly catalystCenterAsSyslogServer!: pulumi.Output<boolean | undefined>;
    /**
     * List of DHCP server IPs
     */
    public readonly dhcpServers!: pulumi.Output<string[] | undefined>;
    /**
     * Domain name
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * In case of `ISE` server type, this is the PAN IP address, in case of `AAA` this is the primary IP address
     */
    public readonly endpointAaaServerPrimaryIp!: pulumi.Output<string | undefined>;
    /**
     * Server protocol - Choices: `RADIUS`, `TACACS`
     */
    public readonly endpointAaaServerProtocol!: pulumi.Output<string | undefined>;
    /**
     * In case of `ISE` server type, this is the PSN IP address, in case of `AAA` this is a secondary IP address
     */
    public readonly endpointAaaServerSecondaryIp!: pulumi.Output<string | undefined>;
    /**
     * Only relevant for type `ISE`, shared secret
     */
    public readonly endpointAaaServerSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * Type of network AAA server - Choices: `AAA`, `ISE`
     */
    public readonly endpointAaaServerType!: pulumi.Output<string | undefined>;
    /**
     * Netflow collector IP
     */
    public readonly netflowCollector!: pulumi.Output<string | undefined>;
    /**
     * Netflow collector port
     */
    public readonly netflowCollectorPort!: pulumi.Output<number | undefined>;
    /**
     * In case of `ISE` server type, this is the PAN IP address, in case of `AAA` this is the primary IP address
     */
    public readonly networkAaaServerPrimaryIp!: pulumi.Output<string | undefined>;
    /**
     * Server protocol - Choices: `RADIUS`, `TACACS`
     */
    public readonly networkAaaServerProtocol!: pulumi.Output<string | undefined>;
    /**
     * In case of `ISE` server type, this is the PSN IP address, in case of `AAA` this is a secondary IP address
     */
    public readonly networkAaaServerSecondaryIp!: pulumi.Output<string | undefined>;
    /**
     * Only relevant for type `ISE`, shared secret
     */
    public readonly networkAaaServerSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * Type of network AAA server - Choices: `AAA`, `ISE`
     */
    public readonly networkAaaServerType!: pulumi.Output<string | undefined>;
    /**
     * List of NTP server IPs
     */
    public readonly ntpServers!: pulumi.Output<string[] | undefined>;
    /**
     * Primary DNS server IP
     */
    public readonly primaryDnsServer!: pulumi.Output<string | undefined>;
    /**
     * Secondary DNS server IP
     */
    public readonly secondaryDnsServer!: pulumi.Output<string | undefined>;
    /**
     * The site ID
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * List of SNMP server IPs
     */
    public readonly snmpServers!: pulumi.Output<string[] | undefined>;
    /**
     * List of Syslog server IPs
     */
    public readonly syslogServers!: pulumi.Output<string[] | undefined>;
    /**
     * Timezone, e.g. `Africa/Abidjan`
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["catalystCenterAsSnmpServer"] = state ? state.catalystCenterAsSnmpServer : undefined;
            resourceInputs["catalystCenterAsSyslogServer"] = state ? state.catalystCenterAsSyslogServer : undefined;
            resourceInputs["dhcpServers"] = state ? state.dhcpServers : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["endpointAaaServerPrimaryIp"] = state ? state.endpointAaaServerPrimaryIp : undefined;
            resourceInputs["endpointAaaServerProtocol"] = state ? state.endpointAaaServerProtocol : undefined;
            resourceInputs["endpointAaaServerSecondaryIp"] = state ? state.endpointAaaServerSecondaryIp : undefined;
            resourceInputs["endpointAaaServerSharedSecret"] = state ? state.endpointAaaServerSharedSecret : undefined;
            resourceInputs["endpointAaaServerType"] = state ? state.endpointAaaServerType : undefined;
            resourceInputs["netflowCollector"] = state ? state.netflowCollector : undefined;
            resourceInputs["netflowCollectorPort"] = state ? state.netflowCollectorPort : undefined;
            resourceInputs["networkAaaServerPrimaryIp"] = state ? state.networkAaaServerPrimaryIp : undefined;
            resourceInputs["networkAaaServerProtocol"] = state ? state.networkAaaServerProtocol : undefined;
            resourceInputs["networkAaaServerSecondaryIp"] = state ? state.networkAaaServerSecondaryIp : undefined;
            resourceInputs["networkAaaServerSharedSecret"] = state ? state.networkAaaServerSharedSecret : undefined;
            resourceInputs["networkAaaServerType"] = state ? state.networkAaaServerType : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["primaryDnsServer"] = state ? state.primaryDnsServer : undefined;
            resourceInputs["secondaryDnsServer"] = state ? state.secondaryDnsServer : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["snmpServers"] = state ? state.snmpServers : undefined;
            resourceInputs["syslogServers"] = state ? state.syslogServers : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["catalystCenterAsSnmpServer"] = args ? args.catalystCenterAsSnmpServer : undefined;
            resourceInputs["catalystCenterAsSyslogServer"] = args ? args.catalystCenterAsSyslogServer : undefined;
            resourceInputs["dhcpServers"] = args ? args.dhcpServers : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["endpointAaaServerPrimaryIp"] = args ? args.endpointAaaServerPrimaryIp : undefined;
            resourceInputs["endpointAaaServerProtocol"] = args ? args.endpointAaaServerProtocol : undefined;
            resourceInputs["endpointAaaServerSecondaryIp"] = args ? args.endpointAaaServerSecondaryIp : undefined;
            resourceInputs["endpointAaaServerSharedSecret"] = args ? args.endpointAaaServerSharedSecret : undefined;
            resourceInputs["endpointAaaServerType"] = args ? args.endpointAaaServerType : undefined;
            resourceInputs["netflowCollector"] = args ? args.netflowCollector : undefined;
            resourceInputs["netflowCollectorPort"] = args ? args.netflowCollectorPort : undefined;
            resourceInputs["networkAaaServerPrimaryIp"] = args ? args.networkAaaServerPrimaryIp : undefined;
            resourceInputs["networkAaaServerProtocol"] = args ? args.networkAaaServerProtocol : undefined;
            resourceInputs["networkAaaServerSecondaryIp"] = args ? args.networkAaaServerSecondaryIp : undefined;
            resourceInputs["networkAaaServerSharedSecret"] = args ? args.networkAaaServerSharedSecret : undefined;
            resourceInputs["networkAaaServerType"] = args ? args.networkAaaServerType : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["primaryDnsServer"] = args ? args.primaryDnsServer : undefined;
            resourceInputs["secondaryDnsServer"] = args ? args.secondaryDnsServer : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["snmpServers"] = args ? args.snmpServers : undefined;
            resourceInputs["syslogServers"] = args ? args.syslogServers : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Use Catalyst Center as SNMP server
     */
    catalystCenterAsSnmpServer?: pulumi.Input<boolean>;
    /**
     * Use Catalyst Center as Syslog server
     */
    catalystCenterAsSyslogServer?: pulumi.Input<boolean>;
    /**
     * List of DHCP server IPs
     */
    dhcpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name
     */
    domainName?: pulumi.Input<string>;
    /**
     * In case of `ISE` server type, this is the PAN IP address, in case of `AAA` this is the primary IP address
     */
    endpointAaaServerPrimaryIp?: pulumi.Input<string>;
    /**
     * Server protocol - Choices: `RADIUS`, `TACACS`
     */
    endpointAaaServerProtocol?: pulumi.Input<string>;
    /**
     * In case of `ISE` server type, this is the PSN IP address, in case of `AAA` this is a secondary IP address
     */
    endpointAaaServerSecondaryIp?: pulumi.Input<string>;
    /**
     * Only relevant for type `ISE`, shared secret
     */
    endpointAaaServerSharedSecret?: pulumi.Input<string>;
    /**
     * Type of network AAA server - Choices: `AAA`, `ISE`
     */
    endpointAaaServerType?: pulumi.Input<string>;
    /**
     * Netflow collector IP
     */
    netflowCollector?: pulumi.Input<string>;
    /**
     * Netflow collector port
     */
    netflowCollectorPort?: pulumi.Input<number>;
    /**
     * In case of `ISE` server type, this is the PAN IP address, in case of `AAA` this is the primary IP address
     */
    networkAaaServerPrimaryIp?: pulumi.Input<string>;
    /**
     * Server protocol - Choices: `RADIUS`, `TACACS`
     */
    networkAaaServerProtocol?: pulumi.Input<string>;
    /**
     * In case of `ISE` server type, this is the PSN IP address, in case of `AAA` this is a secondary IP address
     */
    networkAaaServerSecondaryIp?: pulumi.Input<string>;
    /**
     * Only relevant for type `ISE`, shared secret
     */
    networkAaaServerSharedSecret?: pulumi.Input<string>;
    /**
     * Type of network AAA server - Choices: `AAA`, `ISE`
     */
    networkAaaServerType?: pulumi.Input<string>;
    /**
     * List of NTP server IPs
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary DNS server IP
     */
    primaryDnsServer?: pulumi.Input<string>;
    /**
     * Secondary DNS server IP
     */
    secondaryDnsServer?: pulumi.Input<string>;
    /**
     * The site ID
     */
    siteId?: pulumi.Input<string>;
    /**
     * List of SNMP server IPs
     */
    snmpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Syslog server IPs
     */
    syslogServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timezone, e.g. `Africa/Abidjan`
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Use Catalyst Center as SNMP server
     */
    catalystCenterAsSnmpServer?: pulumi.Input<boolean>;
    /**
     * Use Catalyst Center as Syslog server
     */
    catalystCenterAsSyslogServer?: pulumi.Input<boolean>;
    /**
     * List of DHCP server IPs
     */
    dhcpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name
     */
    domainName?: pulumi.Input<string>;
    /**
     * In case of `ISE` server type, this is the PAN IP address, in case of `AAA` this is the primary IP address
     */
    endpointAaaServerPrimaryIp?: pulumi.Input<string>;
    /**
     * Server protocol - Choices: `RADIUS`, `TACACS`
     */
    endpointAaaServerProtocol?: pulumi.Input<string>;
    /**
     * In case of `ISE` server type, this is the PSN IP address, in case of `AAA` this is a secondary IP address
     */
    endpointAaaServerSecondaryIp?: pulumi.Input<string>;
    /**
     * Only relevant for type `ISE`, shared secret
     */
    endpointAaaServerSharedSecret?: pulumi.Input<string>;
    /**
     * Type of network AAA server - Choices: `AAA`, `ISE`
     */
    endpointAaaServerType?: pulumi.Input<string>;
    /**
     * Netflow collector IP
     */
    netflowCollector?: pulumi.Input<string>;
    /**
     * Netflow collector port
     */
    netflowCollectorPort?: pulumi.Input<number>;
    /**
     * In case of `ISE` server type, this is the PAN IP address, in case of `AAA` this is the primary IP address
     */
    networkAaaServerPrimaryIp?: pulumi.Input<string>;
    /**
     * Server protocol - Choices: `RADIUS`, `TACACS`
     */
    networkAaaServerProtocol?: pulumi.Input<string>;
    /**
     * In case of `ISE` server type, this is the PSN IP address, in case of `AAA` this is a secondary IP address
     */
    networkAaaServerSecondaryIp?: pulumi.Input<string>;
    /**
     * Only relevant for type `ISE`, shared secret
     */
    networkAaaServerSharedSecret?: pulumi.Input<string>;
    /**
     * Type of network AAA server - Choices: `AAA`, `ISE`
     */
    networkAaaServerType?: pulumi.Input<string>;
    /**
     * List of NTP server IPs
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary DNS server IP
     */
    primaryDnsServer?: pulumi.Input<string>;
    /**
     * Secondary DNS server IP
     */
    secondaryDnsServer?: pulumi.Input<string>;
    /**
     * The site ID
     */
    siteId: pulumi.Input<string>;
    /**
     * List of SNMP server IPs
     */
    snmpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Syslog server IPs
     */
    syslogServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timezone, e.g. `Africa/Abidjan`
     */
    timezone: pulumi.Input<string>;
}
