// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * Third party image family
     */
    public readonly family!: pulumi.Output<string | undefined>;
    /**
     * Whether the software image is from a third party. - Default value: `false`
     */
    public readonly isThirdParty!: pulumi.Output<boolean>;
    /**
     * File name that uniquely identifies the software image. It should not contain any path. Usually this can be specified as
     * `basename(source_path)`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Local path where the software image file resides. Supported file extensions are bin, img, tar, smu, pie, aes, iso, ova,
     * tar_gz, qcow2.
     */
    public readonly sourcePath!: pulumi.Output<string>;
    /**
     * Third party application type
     */
    public readonly thirdPartyApplicationType!: pulumi.Output<string | undefined>;
    /**
     * Third party Vendor
     */
    public readonly thirdPartyVendor!: pulumi.Output<string | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["isThirdParty"] = state ? state.isThirdParty : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourcePath"] = state ? state.sourcePath : undefined;
            resourceInputs["thirdPartyApplicationType"] = state ? state.thirdPartyApplicationType : undefined;
            resourceInputs["thirdPartyVendor"] = state ? state.thirdPartyVendor : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.sourcePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourcePath'");
            }
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["isThirdParty"] = args ? args.isThirdParty : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourcePath"] = args ? args.sourcePath : undefined;
            resourceInputs["thirdPartyApplicationType"] = args ? args.thirdPartyApplicationType : undefined;
            resourceInputs["thirdPartyVendor"] = args ? args.thirdPartyVendor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * Third party image family
     */
    family?: pulumi.Input<string>;
    /**
     * Whether the software image is from a third party. - Default value: `false`
     */
    isThirdParty?: pulumi.Input<boolean>;
    /**
     * File name that uniquely identifies the software image. It should not contain any path. Usually this can be specified as
     * `basename(source_path)`
     */
    name?: pulumi.Input<string>;
    /**
     * Local path where the software image file resides. Supported file extensions are bin, img, tar, smu, pie, aes, iso, ova,
     * tar_gz, qcow2.
     */
    sourcePath?: pulumi.Input<string>;
    /**
     * Third party application type
     */
    thirdPartyApplicationType?: pulumi.Input<string>;
    /**
     * Third party Vendor
     */
    thirdPartyVendor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Third party image family
     */
    family?: pulumi.Input<string>;
    /**
     * Whether the software image is from a third party. - Default value: `false`
     */
    isThirdParty?: pulumi.Input<boolean>;
    /**
     * File name that uniquely identifies the software image. It should not contain any path. Usually this can be specified as
     * `basename(source_path)`
     */
    name?: pulumi.Input<string>;
    /**
     * Local path where the software image file resides. Supported file extensions are bin, img, tar, smu, pie, aes, iso, ova,
     * tar_gz, qcow2.
     */
    sourcePath: pulumi.Input<string>;
    /**
     * Third party application type
     */
    thirdPartyApplicationType?: pulumi.Input<string>;
    /**
     * Third party Vendor
     */
    thirdPartyVendor?: pulumi.Input<string>;
}
