// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeployTemplate extends pulumi.CustomResource {
    /**
     * Get an existing DeployTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeployTemplateState, opts?: pulumi.CustomResourceOptions): DeployTemplate {
        return new DeployTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/deployTemplate:DeployTemplate';

    /**
     * Returns true if the given object is an instance of DeployTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeployTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeployTemplate.__pulumiType;
    }

    /**
     * Force Push Template
     */
    public readonly forcePushTemplate!: pulumi.Output<boolean | undefined>;
    /**
     * Composite template flag
     */
    public readonly isComposite!: pulumi.Output<boolean | undefined>;
    /**
     * Composite Template ID
     */
    public readonly mainTemplateId!: pulumi.Output<string | undefined>;
    /**
     * Member Template Deployment Info
     */
    public readonly memberTemplateDeploymentInfos!: pulumi.Output<outputs.DeployTemplateMemberTemplateDeploymentInfo[] | undefined>;
    /**
     * Target info to deploy template
     */
    public readonly targetInfos!: pulumi.Output<outputs.DeployTemplateTargetInfo[]>;
    /**
     * ID of template to be provisioned
     */
    public readonly templateId!: pulumi.Output<string>;

    /**
     * Create a DeployTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeployTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeployTemplateArgs | DeployTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeployTemplateState | undefined;
            resourceInputs["forcePushTemplate"] = state ? state.forcePushTemplate : undefined;
            resourceInputs["isComposite"] = state ? state.isComposite : undefined;
            resourceInputs["mainTemplateId"] = state ? state.mainTemplateId : undefined;
            resourceInputs["memberTemplateDeploymentInfos"] = state ? state.memberTemplateDeploymentInfos : undefined;
            resourceInputs["targetInfos"] = state ? state.targetInfos : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as DeployTemplateArgs | undefined;
            if ((!args || args.targetInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetInfos'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["forcePushTemplate"] = args ? args.forcePushTemplate : undefined;
            resourceInputs["isComposite"] = args ? args.isComposite : undefined;
            resourceInputs["mainTemplateId"] = args ? args.mainTemplateId : undefined;
            resourceInputs["memberTemplateDeploymentInfos"] = args ? args.memberTemplateDeploymentInfos : undefined;
            resourceInputs["targetInfos"] = args ? args.targetInfos : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeployTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeployTemplate resources.
 */
export interface DeployTemplateState {
    /**
     * Force Push Template
     */
    forcePushTemplate?: pulumi.Input<boolean>;
    /**
     * Composite template flag
     */
    isComposite?: pulumi.Input<boolean>;
    /**
     * Composite Template ID
     */
    mainTemplateId?: pulumi.Input<string>;
    /**
     * Member Template Deployment Info
     */
    memberTemplateDeploymentInfos?: pulumi.Input<pulumi.Input<inputs.DeployTemplateMemberTemplateDeploymentInfo>[]>;
    /**
     * Target info to deploy template
     */
    targetInfos?: pulumi.Input<pulumi.Input<inputs.DeployTemplateTargetInfo>[]>;
    /**
     * ID of template to be provisioned
     */
    templateId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeployTemplate resource.
 */
export interface DeployTemplateArgs {
    /**
     * Force Push Template
     */
    forcePushTemplate?: pulumi.Input<boolean>;
    /**
     * Composite template flag
     */
    isComposite?: pulumi.Input<boolean>;
    /**
     * Composite Template ID
     */
    mainTemplateId?: pulumi.Input<string>;
    /**
     * Member Template Deployment Info
     */
    memberTemplateDeploymentInfos?: pulumi.Input<pulumi.Input<inputs.DeployTemplateMemberTemplateDeploymentInfo>[]>;
    /**
     * Target info to deploy template
     */
    targetInfos: pulumi.Input<pulumi.Input<inputs.DeployTemplateTargetInfo>[]>;
    /**
     * ID of template to be provisioned
     */
    templateId: pulumi.Input<string>;
}
