// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/device:Device';

    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Device {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }

    /**
     * CLI transport - Choices: `telnet`, `ssh`
     */
    public readonly cliTransport!: pulumi.Output<string>;
    /**
     * Compute device
     */
    public readonly computeDevice!: pulumi.Output<boolean | undefined>;
    /**
     * CLI enable password of the device
     */
    public readonly enablePassword!: pulumi.Output<string>;
    /**
     * This field holds that info as whether to add device with canned data or not. - Choices: `DISCOVER_WITH_CANNED_DATA`
     */
    public readonly extendedDiscoveryInfo!: pulumi.Output<string | undefined>;
    /**
     * HTTP password of the device
     */
    public readonly httpPassword!: pulumi.Output<string | undefined>;
    /**
     * HTTP port of the device
     */
    public readonly httpPort!: pulumi.Output<string | undefined>;
    /**
     * Enable HTTPS
     */
    public readonly httpSecure!: pulumi.Output<boolean | undefined>;
    /**
     * HTTP username of the device
     */
    public readonly httpUserName!: pulumi.Output<string | undefined>;
    /**
     * IP address of the device
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Selected Meraki organizations for which the devices needs to be imported
     */
    public readonly merakiOrgIds!: pulumi.Output<string[] | undefined>;
    /**
     * NETCONF port of the device
     */
    public readonly netconfPort!: pulumi.Output<string | undefined>;
    /**
     * CLI password of the device
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Serial number of the device
     */
    public readonly serialNumber!: pulumi.Output<string | undefined>;
    /**
     * SNMPv3 authentication passphrase of the device
     */
    public readonly snmpAuthPassphrase!: pulumi.Output<string>;
    /**
     * SNMPv3 authentication protocol of the device - Choices: `sha`, `md5`
     */
    public readonly snmpAuthProtocol!: pulumi.Output<string>;
    /**
     * SNMPv3 mode of the device - Choices: `noAuthnoPriv`, `authNoPriv`, `authPriv`
     */
    public readonly snmpMode!: pulumi.Output<string>;
    /**
     * SNMPv3 privacy passphrase of the device
     */
    public readonly snmpPrivPassphrase!: pulumi.Output<string>;
    /**
     * SNMPv3 privacy protocol of the device - Choices: `AES128`
     */
    public readonly snmpPrivProtocol!: pulumi.Output<string>;
    /**
     * SNMP retry count - Range: `0`-`3`
     */
    public readonly snmpRetry!: pulumi.Output<number>;
    /**
     * SNMPv2 read-only community of the device
     */
    public readonly snmpRoCommunity!: pulumi.Output<string>;
    /**
     * SNMPv2 read-write community of the device
     */
    public readonly snmpRwCommunity!: pulumi.Output<string>;
    /**
     * SNMP timeout in seconds - Range: `0`-`300`
     */
    public readonly snmpTimeout!: pulumi.Output<number>;
    /**
     * SNMPv3 username of the device
     */
    public readonly snmpUserName!: pulumi.Output<string>;
    /**
     * SNMP version of the device - Choices: `v2`, `v3`
     */
    public readonly snmpVersion!: pulumi.Output<string>;
    /**
     * Device type - Choices: `COMPUTE_DEVICE`, `MERAKI_DASHBOARD`, `NETWORK_DEVICE`, `FIREPOWER MANAGEMENT CENTER`, `THIRD
     * PARTY DEVICE`, `NODATACHANGE`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * IP address of the device to be mapped to New IP address
     */
    public readonly updateMgmtIpAddresses!: pulumi.Output<outputs.DeviceUpdateMgmtIpAddress[] | undefined>;
    /**
     * CLI username of the device
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceState | undefined;
            resourceInputs["cliTransport"] = state ? state.cliTransport : undefined;
            resourceInputs["computeDevice"] = state ? state.computeDevice : undefined;
            resourceInputs["enablePassword"] = state ? state.enablePassword : undefined;
            resourceInputs["extendedDiscoveryInfo"] = state ? state.extendedDiscoveryInfo : undefined;
            resourceInputs["httpPassword"] = state ? state.httpPassword : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpSecure"] = state ? state.httpSecure : undefined;
            resourceInputs["httpUserName"] = state ? state.httpUserName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["merakiOrgIds"] = state ? state.merakiOrgIds : undefined;
            resourceInputs["netconfPort"] = state ? state.netconfPort : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["snmpAuthPassphrase"] = state ? state.snmpAuthPassphrase : undefined;
            resourceInputs["snmpAuthProtocol"] = state ? state.snmpAuthProtocol : undefined;
            resourceInputs["snmpMode"] = state ? state.snmpMode : undefined;
            resourceInputs["snmpPrivPassphrase"] = state ? state.snmpPrivPassphrase : undefined;
            resourceInputs["snmpPrivProtocol"] = state ? state.snmpPrivProtocol : undefined;
            resourceInputs["snmpRetry"] = state ? state.snmpRetry : undefined;
            resourceInputs["snmpRoCommunity"] = state ? state.snmpRoCommunity : undefined;
            resourceInputs["snmpRwCommunity"] = state ? state.snmpRwCommunity : undefined;
            resourceInputs["snmpTimeout"] = state ? state.snmpTimeout : undefined;
            resourceInputs["snmpUserName"] = state ? state.snmpUserName : undefined;
            resourceInputs["snmpVersion"] = state ? state.snmpVersion : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateMgmtIpAddresses"] = state ? state.updateMgmtIpAddresses : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            if ((!args || args.cliTransport === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cliTransport'");
            }
            if ((!args || args.enablePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enablePassword'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.snmpAuthPassphrase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpAuthPassphrase'");
            }
            if ((!args || args.snmpAuthProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpAuthProtocol'");
            }
            if ((!args || args.snmpMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpMode'");
            }
            if ((!args || args.snmpPrivPassphrase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpPrivPassphrase'");
            }
            if ((!args || args.snmpPrivProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpPrivProtocol'");
            }
            if ((!args || args.snmpRetry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpRetry'");
            }
            if ((!args || args.snmpRoCommunity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpRoCommunity'");
            }
            if ((!args || args.snmpRwCommunity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpRwCommunity'");
            }
            if ((!args || args.snmpTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpTimeout'");
            }
            if ((!args || args.snmpUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpUserName'");
            }
            if ((!args || args.snmpVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpVersion'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["cliTransport"] = args ? args.cliTransport : undefined;
            resourceInputs["computeDevice"] = args ? args.computeDevice : undefined;
            resourceInputs["enablePassword"] = args ? args.enablePassword : undefined;
            resourceInputs["extendedDiscoveryInfo"] = args ? args.extendedDiscoveryInfo : undefined;
            resourceInputs["httpPassword"] = args ? args.httpPassword : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpSecure"] = args ? args.httpSecure : undefined;
            resourceInputs["httpUserName"] = args ? args.httpUserName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["merakiOrgIds"] = args ? args.merakiOrgIds : undefined;
            resourceInputs["netconfPort"] = args ? args.netconfPort : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["snmpAuthPassphrase"] = args ? args.snmpAuthPassphrase : undefined;
            resourceInputs["snmpAuthProtocol"] = args ? args.snmpAuthProtocol : undefined;
            resourceInputs["snmpMode"] = args ? args.snmpMode : undefined;
            resourceInputs["snmpPrivPassphrase"] = args ? args.snmpPrivPassphrase : undefined;
            resourceInputs["snmpPrivProtocol"] = args ? args.snmpPrivProtocol : undefined;
            resourceInputs["snmpRetry"] = args ? args.snmpRetry : undefined;
            resourceInputs["snmpRoCommunity"] = args ? args.snmpRoCommunity : undefined;
            resourceInputs["snmpRwCommunity"] = args ? args.snmpRwCommunity : undefined;
            resourceInputs["snmpTimeout"] = args ? args.snmpTimeout : undefined;
            resourceInputs["snmpUserName"] = args ? args.snmpUserName : undefined;
            resourceInputs["snmpVersion"] = args ? args.snmpVersion : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["updateMgmtIpAddresses"] = args ? args.updateMgmtIpAddresses : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Device.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    /**
     * CLI transport - Choices: `telnet`, `ssh`
     */
    cliTransport?: pulumi.Input<string>;
    /**
     * Compute device
     */
    computeDevice?: pulumi.Input<boolean>;
    /**
     * CLI enable password of the device
     */
    enablePassword?: pulumi.Input<string>;
    /**
     * This field holds that info as whether to add device with canned data or not. - Choices: `DISCOVER_WITH_CANNED_DATA`
     */
    extendedDiscoveryInfo?: pulumi.Input<string>;
    /**
     * HTTP password of the device
     */
    httpPassword?: pulumi.Input<string>;
    /**
     * HTTP port of the device
     */
    httpPort?: pulumi.Input<string>;
    /**
     * Enable HTTPS
     */
    httpSecure?: pulumi.Input<boolean>;
    /**
     * HTTP username of the device
     */
    httpUserName?: pulumi.Input<string>;
    /**
     * IP address of the device
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Selected Meraki organizations for which the devices needs to be imported
     */
    merakiOrgIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NETCONF port of the device
     */
    netconfPort?: pulumi.Input<string>;
    /**
     * CLI password of the device
     */
    password?: pulumi.Input<string>;
    /**
     * Serial number of the device
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * SNMPv3 authentication passphrase of the device
     */
    snmpAuthPassphrase?: pulumi.Input<string>;
    /**
     * SNMPv3 authentication protocol of the device - Choices: `sha`, `md5`
     */
    snmpAuthProtocol?: pulumi.Input<string>;
    /**
     * SNMPv3 mode of the device - Choices: `noAuthnoPriv`, `authNoPriv`, `authPriv`
     */
    snmpMode?: pulumi.Input<string>;
    /**
     * SNMPv3 privacy passphrase of the device
     */
    snmpPrivPassphrase?: pulumi.Input<string>;
    /**
     * SNMPv3 privacy protocol of the device - Choices: `AES128`
     */
    snmpPrivProtocol?: pulumi.Input<string>;
    /**
     * SNMP retry count - Range: `0`-`3`
     */
    snmpRetry?: pulumi.Input<number>;
    /**
     * SNMPv2 read-only community of the device
     */
    snmpRoCommunity?: pulumi.Input<string>;
    /**
     * SNMPv2 read-write community of the device
     */
    snmpRwCommunity?: pulumi.Input<string>;
    /**
     * SNMP timeout in seconds - Range: `0`-`300`
     */
    snmpTimeout?: pulumi.Input<number>;
    /**
     * SNMPv3 username of the device
     */
    snmpUserName?: pulumi.Input<string>;
    /**
     * SNMP version of the device - Choices: `v2`, `v3`
     */
    snmpVersion?: pulumi.Input<string>;
    /**
     * Device type - Choices: `COMPUTE_DEVICE`, `MERAKI_DASHBOARD`, `NETWORK_DEVICE`, `FIREPOWER MANAGEMENT CENTER`, `THIRD
     * PARTY DEVICE`, `NODATACHANGE`
     */
    type?: pulumi.Input<string>;
    /**
     * IP address of the device to be mapped to New IP address
     */
    updateMgmtIpAddresses?: pulumi.Input<pulumi.Input<inputs.DeviceUpdateMgmtIpAddress>[]>;
    /**
     * CLI username of the device
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    /**
     * CLI transport - Choices: `telnet`, `ssh`
     */
    cliTransport: pulumi.Input<string>;
    /**
     * Compute device
     */
    computeDevice?: pulumi.Input<boolean>;
    /**
     * CLI enable password of the device
     */
    enablePassword: pulumi.Input<string>;
    /**
     * This field holds that info as whether to add device with canned data or not. - Choices: `DISCOVER_WITH_CANNED_DATA`
     */
    extendedDiscoveryInfo?: pulumi.Input<string>;
    /**
     * HTTP password of the device
     */
    httpPassword?: pulumi.Input<string>;
    /**
     * HTTP port of the device
     */
    httpPort?: pulumi.Input<string>;
    /**
     * Enable HTTPS
     */
    httpSecure?: pulumi.Input<boolean>;
    /**
     * HTTP username of the device
     */
    httpUserName?: pulumi.Input<string>;
    /**
     * IP address of the device
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Selected Meraki organizations for which the devices needs to be imported
     */
    merakiOrgIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NETCONF port of the device
     */
    netconfPort?: pulumi.Input<string>;
    /**
     * CLI password of the device
     */
    password: pulumi.Input<string>;
    /**
     * Serial number of the device
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * SNMPv3 authentication passphrase of the device
     */
    snmpAuthPassphrase: pulumi.Input<string>;
    /**
     * SNMPv3 authentication protocol of the device - Choices: `sha`, `md5`
     */
    snmpAuthProtocol: pulumi.Input<string>;
    /**
     * SNMPv3 mode of the device - Choices: `noAuthnoPriv`, `authNoPriv`, `authPriv`
     */
    snmpMode: pulumi.Input<string>;
    /**
     * SNMPv3 privacy passphrase of the device
     */
    snmpPrivPassphrase: pulumi.Input<string>;
    /**
     * SNMPv3 privacy protocol of the device - Choices: `AES128`
     */
    snmpPrivProtocol: pulumi.Input<string>;
    /**
     * SNMP retry count - Range: `0`-`3`
     */
    snmpRetry: pulumi.Input<number>;
    /**
     * SNMPv2 read-only community of the device
     */
    snmpRoCommunity: pulumi.Input<string>;
    /**
     * SNMPv2 read-write community of the device
     */
    snmpRwCommunity: pulumi.Input<string>;
    /**
     * SNMP timeout in seconds - Range: `0`-`300`
     */
    snmpTimeout: pulumi.Input<number>;
    /**
     * SNMPv3 username of the device
     */
    snmpUserName: pulumi.Input<string>;
    /**
     * SNMP version of the device - Choices: `v2`, `v3`
     */
    snmpVersion: pulumi.Input<string>;
    /**
     * Device type - Choices: `COMPUTE_DEVICE`, `MERAKI_DASHBOARD`, `NETWORK_DEVICE`, `FIREPOWER MANAGEMENT CENTER`, `THIRD
     * PARTY DEVICE`, `NODATACHANGE`
     */
    type: pulumi.Input<string>;
    /**
     * IP address of the device to be mapped to New IP address
     */
    updateMgmtIpAddresses?: pulumi.Input<pulumi.Input<inputs.DeviceUpdateMgmtIpAddress>[]>;
    /**
     * CLI username of the device
     */
    userName: pulumi.Input<string>;
}
