// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getWirelessRfProfile(args: GetWirelessRfProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetWirelessRfProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("catalystcenter:index/getWirelessRfProfile:getWirelessRfProfile", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWirelessRfProfile.
 */
export interface GetWirelessRfProfileArgs {
    id: string;
}

/**
 * A collection of values returned by getWirelessRfProfile.
 */
export interface GetWirelessRfProfileResult {
    readonly channelWidth: string;
    readonly defaultRfProfile: boolean;
    readonly enableBrownField: boolean;
    readonly enableCustom: boolean;
    readonly enableRadioTypeA: boolean;
    readonly enableRadioTypeB: boolean;
    readonly enableRadioTypeC: boolean;
    readonly id: string;
    readonly name: string;
    readonly radioTypeADataRates: string;
    readonly radioTypeAMandatoryDataRates: string;
    readonly radioTypeAMaxPowerLevel: number;
    readonly radioTypeAMinPowerLevel: number;
    readonly radioTypeAParentProfile: string;
    readonly radioTypeAPowerThresholdV1: number;
    readonly radioTypeARadioChannels: string;
    readonly radioTypeARxSopThreshold: string;
    readonly radioTypeBDataRates: string;
    readonly radioTypeBMandatoryDataRates: string;
    readonly radioTypeBMaxPowerLevel: number;
    readonly radioTypeBMinPowerLevel: number;
    readonly radioTypeBParentProfile: string;
    readonly radioTypeBPowerThresholdV1: number;
    readonly radioTypeBRadioChannels: string;
    readonly radioTypeBRxSopThreshold: string;
    readonly radioTypeCDataRates: string;
    readonly radioTypeCMandatoryDataRates: string;
    readonly radioTypeCMaxPowerLevel: number;
    readonly radioTypeCMinPowerLevel: number;
    readonly radioTypeCParentProfile: string;
    readonly radioTypeCPowerThresholdV1: number;
    readonly radioTypeCRadioChannels: string;
    readonly radioTypeCRxSopThreshold: string;
}
export function getWirelessRfProfileOutput(args: GetWirelessRfProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWirelessRfProfileResult> {
    return pulumi.output(args).apply((a: any) => getWirelessRfProfile(a, opts))
}

/**
 * A collection of arguments for invoking getWirelessRfProfile.
 */
export interface GetWirelessRfProfileOutputArgs {
    id: pulumi.Input<string>;
}
