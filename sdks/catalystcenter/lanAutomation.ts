// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LanAutomation extends pulumi.CustomResource {
    /**
     * Get an existing LanAutomation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LanAutomationState, opts?: pulumi.CustomResourceOptions): LanAutomation {
        return new LanAutomation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/lanAutomation:LanAutomation';

    /**
     * Returns true if the given object is an instance of LanAutomation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LanAutomation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LanAutomation.__pulumiType;
    }

    /**
     * Discovered device site name.
     */
    public readonly discoveredDeviceSiteNameHierarchy!: pulumi.Output<string>;
    /**
     * File ID of the CSV file containing the host name list.
     */
    public readonly hostNameFileId!: pulumi.Output<string | undefined>;
    /**
     * Host name prefix which shall be assigned to the discovered device.
     */
    public readonly hostNamePrefix!: pulumi.Output<string | undefined>;
    /**
     * The list of IP pools with its name and role.
     */
    public readonly ipPools!: pulumi.Output<outputs.LanAutomationIpPool[] | undefined>;
    /**
     * ISIS domain password.
     */
    public readonly isisDomainPassword!: pulumi.Output<string | undefined>;
    /**
     * To enable underlay native multicast.
     */
    public readonly multicastEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Secondary seed management IP address.
     */
    public readonly peerDeviceManagementIpAddress!: pulumi.Output<string | undefined>;
    /**
     * The list of interfaces on primary seed via which the discovered devices are connected.
     */
    public readonly primaryDeviceInterfaceNames!: pulumi.Output<string[]>;
    /**
     * Primary seed management IP address.
     */
    public readonly primaryDeviceManagementIpAddress!: pulumi.Output<string>;
    /**
     * Advertise LAN Automation summary route into BGP.
     */
    public readonly redistributeIsisToBgp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LanAutomation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LanAutomationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LanAutomationArgs | LanAutomationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LanAutomationState | undefined;
            resourceInputs["discoveredDeviceSiteNameHierarchy"] = state ? state.discoveredDeviceSiteNameHierarchy : undefined;
            resourceInputs["hostNameFileId"] = state ? state.hostNameFileId : undefined;
            resourceInputs["hostNamePrefix"] = state ? state.hostNamePrefix : undefined;
            resourceInputs["ipPools"] = state ? state.ipPools : undefined;
            resourceInputs["isisDomainPassword"] = state ? state.isisDomainPassword : undefined;
            resourceInputs["multicastEnabled"] = state ? state.multicastEnabled : undefined;
            resourceInputs["peerDeviceManagementIpAddress"] = state ? state.peerDeviceManagementIpAddress : undefined;
            resourceInputs["primaryDeviceInterfaceNames"] = state ? state.primaryDeviceInterfaceNames : undefined;
            resourceInputs["primaryDeviceManagementIpAddress"] = state ? state.primaryDeviceManagementIpAddress : undefined;
            resourceInputs["redistributeIsisToBgp"] = state ? state.redistributeIsisToBgp : undefined;
        } else {
            const args = argsOrState as LanAutomationArgs | undefined;
            if ((!args || args.discoveredDeviceSiteNameHierarchy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'discoveredDeviceSiteNameHierarchy'");
            }
            if ((!args || args.primaryDeviceInterfaceNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryDeviceInterfaceNames'");
            }
            if ((!args || args.primaryDeviceManagementIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryDeviceManagementIpAddress'");
            }
            resourceInputs["discoveredDeviceSiteNameHierarchy"] = args ? args.discoveredDeviceSiteNameHierarchy : undefined;
            resourceInputs["hostNameFileId"] = args ? args.hostNameFileId : undefined;
            resourceInputs["hostNamePrefix"] = args ? args.hostNamePrefix : undefined;
            resourceInputs["ipPools"] = args ? args.ipPools : undefined;
            resourceInputs["isisDomainPassword"] = args ? args.isisDomainPassword : undefined;
            resourceInputs["multicastEnabled"] = args ? args.multicastEnabled : undefined;
            resourceInputs["peerDeviceManagementIpAddress"] = args ? args.peerDeviceManagementIpAddress : undefined;
            resourceInputs["primaryDeviceInterfaceNames"] = args ? args.primaryDeviceInterfaceNames : undefined;
            resourceInputs["primaryDeviceManagementIpAddress"] = args ? args.primaryDeviceManagementIpAddress : undefined;
            resourceInputs["redistributeIsisToBgp"] = args ? args.redistributeIsisToBgp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LanAutomation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LanAutomation resources.
 */
export interface LanAutomationState {
    /**
     * Discovered device site name.
     */
    discoveredDeviceSiteNameHierarchy?: pulumi.Input<string>;
    /**
     * File ID of the CSV file containing the host name list.
     */
    hostNameFileId?: pulumi.Input<string>;
    /**
     * Host name prefix which shall be assigned to the discovered device.
     */
    hostNamePrefix?: pulumi.Input<string>;
    /**
     * The list of IP pools with its name and role.
     */
    ipPools?: pulumi.Input<pulumi.Input<inputs.LanAutomationIpPool>[]>;
    /**
     * ISIS domain password.
     */
    isisDomainPassword?: pulumi.Input<string>;
    /**
     * To enable underlay native multicast.
     */
    multicastEnabled?: pulumi.Input<boolean>;
    /**
     * Secondary seed management IP address.
     */
    peerDeviceManagementIpAddress?: pulumi.Input<string>;
    /**
     * The list of interfaces on primary seed via which the discovered devices are connected.
     */
    primaryDeviceInterfaceNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary seed management IP address.
     */
    primaryDeviceManagementIpAddress?: pulumi.Input<string>;
    /**
     * Advertise LAN Automation summary route into BGP.
     */
    redistributeIsisToBgp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LanAutomation resource.
 */
export interface LanAutomationArgs {
    /**
     * Discovered device site name.
     */
    discoveredDeviceSiteNameHierarchy: pulumi.Input<string>;
    /**
     * File ID of the CSV file containing the host name list.
     */
    hostNameFileId?: pulumi.Input<string>;
    /**
     * Host name prefix which shall be assigned to the discovered device.
     */
    hostNamePrefix?: pulumi.Input<string>;
    /**
     * The list of IP pools with its name and role.
     */
    ipPools?: pulumi.Input<pulumi.Input<inputs.LanAutomationIpPool>[]>;
    /**
     * ISIS domain password.
     */
    isisDomainPassword?: pulumi.Input<string>;
    /**
     * To enable underlay native multicast.
     */
    multicastEnabled?: pulumi.Input<boolean>;
    /**
     * Secondary seed management IP address.
     */
    peerDeviceManagementIpAddress?: pulumi.Input<string>;
    /**
     * The list of interfaces on primary seed via which the discovered devices are connected.
     */
    primaryDeviceInterfaceNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Primary seed management IP address.
     */
    primaryDeviceManagementIpAddress: pulumi.Input<string>;
    /**
     * Advertise LAN Automation summary route into BGP.
     */
    redistributeIsisToBgp?: pulumi.Input<boolean>;
}
