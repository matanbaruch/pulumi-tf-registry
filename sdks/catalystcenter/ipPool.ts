// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpPool extends pulumi.CustomResource {
    /**
     * Get an existing IpPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpPoolState, opts?: pulumi.CustomResourceOptions): IpPool {
        return new IpPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/ipPool:IpPool';

    /**
     * Returns true if the given object is an instance of IpPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpPool.__pulumiType;
    }

    /**
     * List of DHCP Server IPs
     */
    public readonly dhcpServerIps!: pulumi.Output<string[] | undefined>;
    /**
     * List of DNS Server IPs
     */
    public readonly dnsServerIps!: pulumi.Output<string[] | undefined>;
    /**
     * The gateway for the IP pool
     */
    public readonly gateways!: pulumi.Output<string[] | undefined>;
    /**
     * IP address version - Choices: `IPv4`, `IPv6` - Default value: `IPv4`
     */
    public readonly ipAddressSpace!: pulumi.Output<string>;
    /**
     * The IP subnet of the IP pool
     */
    public readonly ipSubnet!: pulumi.Output<string>;
    /**
     * The name of the IP pool
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Choose `Tunnel` to assign IP addresses to site-to-site VPN for IPSec tunneling. Choose `Generic` for all other network
     * types. - Choices: `generic`, `tunnel` - Default value: `generic`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IpPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpPoolArgs | IpPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpPoolState | undefined;
            resourceInputs["dhcpServerIps"] = state ? state.dhcpServerIps : undefined;
            resourceInputs["dnsServerIps"] = state ? state.dnsServerIps : undefined;
            resourceInputs["gateways"] = state ? state.gateways : undefined;
            resourceInputs["ipAddressSpace"] = state ? state.ipAddressSpace : undefined;
            resourceInputs["ipSubnet"] = state ? state.ipSubnet : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IpPoolArgs | undefined;
            if ((!args || args.ipSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipSubnet'");
            }
            resourceInputs["dhcpServerIps"] = args ? args.dhcpServerIps : undefined;
            resourceInputs["dnsServerIps"] = args ? args.dnsServerIps : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["ipAddressSpace"] = args ? args.ipAddressSpace : undefined;
            resourceInputs["ipSubnet"] = args ? args.ipSubnet : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpPool resources.
 */
export interface IpPoolState {
    /**
     * List of DHCP Server IPs
     */
    dhcpServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of DNS Server IPs
     */
    dnsServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The gateway for the IP pool
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP address version - Choices: `IPv4`, `IPv6` - Default value: `IPv4`
     */
    ipAddressSpace?: pulumi.Input<string>;
    /**
     * The IP subnet of the IP pool
     */
    ipSubnet?: pulumi.Input<string>;
    /**
     * The name of the IP pool
     */
    name?: pulumi.Input<string>;
    /**
     * Choose `Tunnel` to assign IP addresses to site-to-site VPN for IPSec tunneling. Choose `Generic` for all other network
     * types. - Choices: `generic`, `tunnel` - Default value: `generic`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpPool resource.
 */
export interface IpPoolArgs {
    /**
     * List of DHCP Server IPs
     */
    dhcpServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of DNS Server IPs
     */
    dnsServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The gateway for the IP pool
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP address version - Choices: `IPv4`, `IPv6` - Default value: `IPv4`
     */
    ipAddressSpace?: pulumi.Input<string>;
    /**
     * The IP subnet of the IP pool
     */
    ipSubnet: pulumi.Input<string>;
    /**
     * The name of the IP pool
     */
    name?: pulumi.Input<string>;
    /**
     * Choose `Tunnel` to assign IP addresses to site-to-site VPN for IPSec tunneling. Choose `Generic` for all other network
     * types. - Choices: `generic`, `tunnel` - Default value: `generic`
     */
    type?: pulumi.Input<string>;
}
