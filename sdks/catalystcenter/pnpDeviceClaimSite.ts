// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PnpDeviceClaimSite extends pulumi.CustomResource {
    /**
     * Get an existing PnpDeviceClaimSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PnpDeviceClaimSiteState, opts?: pulumi.CustomResourceOptions): PnpDeviceClaimSite {
        return new PnpDeviceClaimSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/pnpDeviceClaimSite:PnpDeviceClaimSite';

    /**
     * Returns true if the given object is an instance of PnpDeviceClaimSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PnpDeviceClaimSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PnpDeviceClaimSite.__pulumiType;
    }

    /**
     * Config (temaplate) ID. Required if `type` is `Default` or `StackSwitch`.
     */
    public readonly configId!: pulumi.Output<string | undefined>;
    /**
     * List of config (temaplate) parameters.
     */
    public readonly configParameters!: pulumi.Output<outputs.PnpDeviceClaimSiteConfigParameter[] | undefined>;
    /**
     * The device ID
     */
    public readonly deviceId!: pulumi.Output<string>;
    /**
     * Gateway IP. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    public readonly gateway!: pulumi.Output<string | undefined>;
    /**
     * Image ID. Required if `type` is `Default` or `StackSwitch`.
     */
    public readonly imageId!: pulumi.Output<string | undefined>;
    /**
     * Skip image provisioning.
     */
    public readonly imageSkip!: pulumi.Output<boolean | undefined>;
    /**
     * IP interface name. Required for Catalyst 9800 WLC.
     */
    public readonly ipInterfaceName!: pulumi.Output<string | undefined>;
    /**
     * RF profile. Required if `type` is `AccessPoint`.
     */
    public readonly rfProfile!: pulumi.Output<string | undefined>;
    /**
     * Sensor profile. Required if `type` is `Sensor`.
     */
    public readonly sensorProfile!: pulumi.Output<string | undefined>;
    /**
     * The site ID
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * Static IP address. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    public readonly staticIp!: pulumi.Output<string | undefined>;
    /**
     * Subnet mask. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    public readonly subnetMask!: pulumi.Output<string | undefined>;
    /**
     * The device type - Choices: `Default`, `StackSwitch`, `AccessPoint`, `Sensor`, `CatalystWLC`, `MobilityExpress`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Vlan ID. Required for Catalyst 9800 WLC.
     */
    public readonly vlanId!: pulumi.Output<string | undefined>;

    /**
     * Create a PnpDeviceClaimSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PnpDeviceClaimSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PnpDeviceClaimSiteArgs | PnpDeviceClaimSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PnpDeviceClaimSiteState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["configParameters"] = state ? state.configParameters : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageSkip"] = state ? state.imageSkip : undefined;
            resourceInputs["ipInterfaceName"] = state ? state.ipInterfaceName : undefined;
            resourceInputs["rfProfile"] = state ? state.rfProfile : undefined;
            resourceInputs["sensorProfile"] = state ? state.sensorProfile : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["staticIp"] = state ? state.staticIp : undefined;
            resourceInputs["subnetMask"] = state ? state.subnetMask : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as PnpDeviceClaimSiteArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["configParameters"] = args ? args.configParameters : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageSkip"] = args ? args.imageSkip : undefined;
            resourceInputs["ipInterfaceName"] = args ? args.ipInterfaceName : undefined;
            resourceInputs["rfProfile"] = args ? args.rfProfile : undefined;
            resourceInputs["sensorProfile"] = args ? args.sensorProfile : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["staticIp"] = args ? args.staticIp : undefined;
            resourceInputs["subnetMask"] = args ? args.subnetMask : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PnpDeviceClaimSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PnpDeviceClaimSite resources.
 */
export interface PnpDeviceClaimSiteState {
    /**
     * Config (temaplate) ID. Required if `type` is `Default` or `StackSwitch`.
     */
    configId?: pulumi.Input<string>;
    /**
     * List of config (temaplate) parameters.
     */
    configParameters?: pulumi.Input<pulumi.Input<inputs.PnpDeviceClaimSiteConfigParameter>[]>;
    /**
     * The device ID
     */
    deviceId?: pulumi.Input<string>;
    /**
     * Gateway IP. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Image ID. Required if `type` is `Default` or `StackSwitch`.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Skip image provisioning.
     */
    imageSkip?: pulumi.Input<boolean>;
    /**
     * IP interface name. Required for Catalyst 9800 WLC.
     */
    ipInterfaceName?: pulumi.Input<string>;
    /**
     * RF profile. Required if `type` is `AccessPoint`.
     */
    rfProfile?: pulumi.Input<string>;
    /**
     * Sensor profile. Required if `type` is `Sensor`.
     */
    sensorProfile?: pulumi.Input<string>;
    /**
     * The site ID
     */
    siteId?: pulumi.Input<string>;
    /**
     * Static IP address. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    staticIp?: pulumi.Input<string>;
    /**
     * Subnet mask. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * The device type - Choices: `Default`, `StackSwitch`, `AccessPoint`, `Sensor`, `CatalystWLC`, `MobilityExpress`
     */
    type?: pulumi.Input<string>;
    /**
     * Vlan ID. Required for Catalyst 9800 WLC.
     */
    vlanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PnpDeviceClaimSite resource.
 */
export interface PnpDeviceClaimSiteArgs {
    /**
     * Config (temaplate) ID. Required if `type` is `Default` or `StackSwitch`.
     */
    configId?: pulumi.Input<string>;
    /**
     * List of config (temaplate) parameters.
     */
    configParameters?: pulumi.Input<pulumi.Input<inputs.PnpDeviceClaimSiteConfigParameter>[]>;
    /**
     * The device ID
     */
    deviceId: pulumi.Input<string>;
    /**
     * Gateway IP. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Image ID. Required if `type` is `Default` or `StackSwitch`.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Skip image provisioning.
     */
    imageSkip?: pulumi.Input<boolean>;
    /**
     * IP interface name. Required for Catalyst 9800 WLC.
     */
    ipInterfaceName?: pulumi.Input<string>;
    /**
     * RF profile. Required if `type` is `AccessPoint`.
     */
    rfProfile?: pulumi.Input<string>;
    /**
     * Sensor profile. Required if `type` is `Sensor`.
     */
    sensorProfile?: pulumi.Input<string>;
    /**
     * The site ID
     */
    siteId: pulumi.Input<string>;
    /**
     * Static IP address. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    staticIp?: pulumi.Input<string>;
    /**
     * Subnet mask. Required if `type` is `CatalystWLC` or `MobilityExpress`.
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * The device type - Choices: `Default`, `StackSwitch`, `AccessPoint`, `Sensor`, `CatalystWLC`, `MobilityExpress`
     */
    type: pulumi.Input<string>;
    /**
     * Vlan ID. Required for Catalyst 9800 WLC.
     */
    vlanId?: pulumi.Input<string>;
}
