// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWirelessEnterpriseSsid(args: GetWirelessEnterpriseSsidArgs, opts?: pulumi.InvokeOptions): Promise<GetWirelessEnterpriseSsidResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("catalystcenter:index/getWirelessEnterpriseSsid:getWirelessEnterpriseSsid", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWirelessEnterpriseSsid.
 */
export interface GetWirelessEnterpriseSsidArgs {
    id: string;
}

/**
 * A collection of values returned by getWirelessEnterpriseSsid.
 */
export interface GetWirelessEnterpriseSsidResult {
    readonly aaaOverride: boolean;
    readonly authKeyMgmts: string[];
    readonly basicServiceSetClientIdleTimeout: number;
    readonly clientExclusionTimeout: number;
    readonly clientRateLimit: number;
    readonly coverageHoleDetectionEnable: boolean;
    readonly enableBasicServiceSetMaxIdle: boolean;
    readonly enableBroadcastSsid: boolean;
    readonly enableClientExclusion: boolean;
    readonly enableDirectedMulticastService: boolean;
    readonly enableFastLane: boolean;
    readonly enableMacFiltering: boolean;
    readonly enableNeighborList: boolean;
    readonly enableSessionTimeOut: boolean;
    readonly fastTransition: string;
    readonly ghz24Policy: string;
    readonly ghz6PolicyClientSteering: boolean;
    readonly id: string;
    readonly mfpClientProtection: string;
    readonly multiPskSettings: outputs.GetWirelessEnterpriseSsidMultiPskSetting[];
    readonly name: string;
    readonly nasOptions: string[];
    readonly passphrase: string;
    readonly policyProfileName: string;
    readonly profileName: string;
    readonly protectedManagementFrame: string;
    readonly radioPolicy: string;
    readonly rsnCipherSuiteCcmp256: boolean;
    readonly rsnCipherSuiteGcmp128: boolean;
    readonly rsnCipherSuiteGcmp256: boolean;
    readonly securityLevel: string;
    readonly sessionTimeOut: number;
    readonly trafficType: string;
}
export function getWirelessEnterpriseSsidOutput(args: GetWirelessEnterpriseSsidOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWirelessEnterpriseSsidResult> {
    return pulumi.output(args).apply((a: any) => getWirelessEnterpriseSsid(a, opts))
}

/**
 * A collection of arguments for invoking getWirelessEnterpriseSsid.
 */
export interface GetWirelessEnterpriseSsidOutputArgs {
    id: pulumi.Input<string>;
}
