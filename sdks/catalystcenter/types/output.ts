// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DeployTemplateMemberTemplateDeploymentInfo {
    /**
     * Force Push Template
     */
    forcePushTemplate?: boolean;
    /**
     * Composite template flag
     */
    isComposite?: boolean;
    /**
     * Composite Template ID
     */
    mainTemplateId?: string;
    /**
     * Target info to deploy template
     */
    targetInfos: outputs.DeployTemplateMemberTemplateDeploymentInfoTargetInfo[];
    /**
     * ID of template to be provisioned
     */
    templateId: string;
}

export interface DeployTemplateMemberTemplateDeploymentInfoTargetInfo {
    /**
     * Hostname of device is required if targetType is MANAGED_DEVICE_HOSTNAME
     */
    hostName?: string;
    /**
     * ID of device is required if targetType is MANAGED_DEVICE_UUID
     */
    id?: string;
    /**
     * Template params/values to be provisioned
     */
    params?: {[key: string]: string};
    /**
     * Resource params to be provisioned
     */
    resourceParams?: {[key: string]: string};
    /**
     * Target type of device
     *   - Choices: `MANAGED_DEVICE_IP`, `MANAGED_DEVICE_UUID`, `PRE_PROVISIONED_SERIAL`, `PRE_PROVISIONED_MAC`, `DEFAULT`, `MANAGED_DEVICE_HOSTNAME`
     */
    type: string;
    /**
     * Versioned template ID to be provisioned
     */
    versionedTemplateId: string;
}

export interface DeployTemplateTargetInfo {
    /**
     * Hostname of device is required if targetType is MANAGED_DEVICE_HOSTNAME
     */
    hostName?: string;
    /**
     * ID of device is required if `type` is MANAGED_DEVICE_UUID
     */
    id?: string;
    /**
     * Template params/values to be provisioned
     */
    params?: {[key: string]: string};
    /**
     * Resource params to be provisioned
     */
    resourceParams?: {[key: string]: string};
    /**
     * Target type of device
     *   - Choices: `MANAGED_DEVICE_IP`, `MANAGED_DEVICE_UUID`, `PRE_PROVISIONED_SERIAL`, `PRE_PROVISIONED_MAC`, `DEFAULT`, `MANAGED_DEVICE_HOSTNAME`
     */
    type: string;
    /**
     * Versioned template ID to be provisioned
     */
    versionedTemplateId: string;
}

export interface DeviceUpdateMgmtIpAddress {
    /**
     * Existing IP address of the device
     */
    existMgmtIpAddress?: string;
    /**
     * New IP address of the device
     */
    newMgmtIpAddress?: string;
}

export interface GetLanAutomationIpPool {
    /**
     * Name of the IP pool.
     */
    ipPoolName: string;
    /**
     * Role of the IP pool.
     */
    ipPoolRole: string;
}

export interface GetNetworkDevicesDevice {
    /**
     * Hostname of the network device
     */
    hostname: string;
    /**
     * UUID of the network device
     */
    id: string;
    /**
     * Management IP address
     */
    managementIpAddress: string;
    /**
     * Management state of a network device. If it is not "Managed" for a device, then the `catalystcenter_network_device_detail` may fail for that device.
     */
    managementState: string;
    /**
     * Platform identifier
     */
    platformId: string;
    /**
     * Role of the network device, such as `ACCESS` or `DISTRIBUTION`.
     */
    role: string;
    /**
     * Type of software
     */
    softwareType: string;
}

export interface GetNetworkProfileTemplate {
    attributes: outputs.GetNetworkProfileTemplateAttribute[];
    /**
     * Template type
     */
    type: string;
}

export interface GetNetworkProfileTemplateAttribute {
    /**
     * Template ID
     */
    templateId: string;
}

export interface GetRoleResourceType {
    /**
     * List of operations allowed for the application. Possible values are `gRead`, `gWrite`, `gUpdate`, `gDelete`, or some combination of these.
     */
    operations: string[];
    /**
     * Name of the application
     */
    type: string;
}

export interface GetTagDynamicRule {
    /**
     * items details, multiple rules can be defined by items
     */
    items: outputs.GetTagDynamicRuleItem[];
    /**
     * memberType of the tag
     */
    memberType: string;
    /**
     * Name of the parameter (e.g. for interface:portName,adminStatus,speed,status,description. for networkdevice:family,series,hostname,managementIpAddress,groupNameHierarchy,softwareVersion)
     */
    name: string;
    /**
     * Operation of the rule
     */
    operation: string;
    /**
     * Value of the parameter (e.g. for portName:1/0/1,for adminStatus,status:up/down, for speed: any integer value, for description: any valid string, for family:switches, for series:C3650, for managementIpAddress:10.197.124.90, groupNameHierarchy:Global, softwareVersion: 16.9.1)
     */
    value: string;
    /**
     * values of the parameter,Only one of the value or values can be used for the given parameter. (for managementIpAddress e.g. ["10.197.124.90","10.197.124.91"])
     */
    values: string[];
}

export interface GetTagDynamicRuleItem {
    /**
     * Name of the parameter (e.g. managementIpAddress,hostname)
     */
    name: string;
    /**
     * Operation of the rule
     */
    operation: string;
    /**
     * Value of the parameter (e.g. %10%,%NA%)
     */
    value: string;
}

export interface GetTemplateDeviceType {
    /**
     * Product family
     */
    productFamily: string;
    /**
     * Product series
     */
    productSeries: string;
    /**
     * Product type
     */
    productType: string;
}

export interface GetTemplateTemplateParam {
    /**
     * Bind to source
     */
    binding: string;
    /**
     * Datatype of template parameter
     */
    dataType: string;
    /**
     * Default selection values
     */
    defaultSelectedValues: string[];
    /**
     * Default value of template parameter
     */
    defaultValue: string;
    /**
     * Description of template parameter
     */
    description: string;
    /**
     * Display name of template parameter
     */
    displayName: string;
    /**
     * Instruction text
     */
    instructionText: string;
    /**
     * Is it not a variable
     */
    notParam: boolean;
    /**
     * Is it an array
     */
    paramArray: boolean;
    /**
     * Name of the template parameter
     */
    parameterName: string;
    /**
     * List of ranges
     */
    ranges: outputs.GetTemplateTemplateParamRange[];
    /**
     * Is parameter required
     */
    required: boolean;
    /**
     * Type of selection
     */
    selectionType: string;
    /**
     * Selection values
     */
    selectionValues: {[key: string]: string};
}

export interface GetTemplateTemplateParamRange {
    /**
     * Max value of range
     */
    maxValue: number;
    /**
     * Min value of range
     */
    minValue: number;
}

export interface GetTransitPeerNetworkTransitControlPlaneSetting {
    /**
     * Device Management Ip Address of provisioned device
     */
    deviceManagementIpAddress: string;
    /**
     * Site Name Hierarchy where device is provisioned
     */
    siteNameHierarchy: string;
}

export interface GetWirelessEnterpriseSsidMultiPskSetting {
    /**
     * Passphrase
     */
    passphrase: string;
    /**
     * Passphrase Type
     */
    passphraseType: string;
    /**
     * Priority
     */
    priority: string;
}

export interface GetWirelessProfileSsidDetail {
    /**
     * 802.11be Profile Id. Applicable to IOS controllers with version 17.15 and higher. 802.11be Profiles if passed, should be same across all SSIDs in network profile being configured
     */
    dot11beProfileId: string;
    /**
     * True if fabric is enabled, else False. Flex and fabric cannot be enabled simultaneously and a profile can only contain either flex SSIDs or fabric SSIDs and not both at the same time
     */
    enableFabric: boolean;
    /**
     * True if flex connect is enabled, else False. Flex and fabric cannot be enabled simultaneously and a profile can only contain either flex SSIDs or fabric SSIDs and not both at the same time
     */
    enableFlexConnect: boolean;
    /**
     * Interface Name
     */
    interfaceName: string;
    /**
     * Local To Vlan Id
     */
    localToVlan: number;
    /**
     * SSID Name
     */
    ssidName: string;
    /**
     * WLAN Profile Name
     */
    wlanProfileName: string;
}

export interface LanAutomationIpPool {
    /**
     * Name of the IP pool.
     */
    ipPoolName: string;
    /**
     * Role of the IP pool.
     *   - Choices: `MAIN_POOL`, `PHYSICAL_LINK_POOL`
     */
    ipPoolRole: string;
}

export interface NetworkProfileTemplate {
    attributes?: outputs.NetworkProfileTemplateAttribute[];
    /**
     * Template type
     *   - Choices: `cli.templates`, `day0.templates`
     */
    type: string;
}

export interface NetworkProfileTemplateAttribute {
    /**
     * Template ID
     */
    templateId: string;
}

export interface PnpDeviceClaimSiteConfigParameter {
    /**
     * Name of config parameter.
     */
    name: string;
    /**
     * Value of config parameter.
     */
    value?: string;
}

export interface PnpImportDevicesDevice {
    /**
     * Device hostname
     */
    hostname?: string;
    /**
     * Device product ID
     */
    pid?: string;
    /**
     * Device serial number
     */
    serialNumber?: string;
    /**
     * Device is a stacked switch
     */
    stack?: boolean;
}

export interface RoleResourceType {
    /**
     * List of operations allowed for the application. Possible values are `gRead`, `gWrite`, `gUpdate`, `gDelete`, or some combination of these.
     */
    operations: string[];
    /**
     * Name of the application
     */
    type: string;
}

export interface TagDynamicRule {
    /**
     * items details, multiple rules can be defined by items
     */
    items?: outputs.TagDynamicRuleItem[];
    /**
     * memberType of the tag
     *   - Choices: `networkdevice`, `interface`
     */
    memberType?: string;
    /**
     * Name of the parameter (e.g. for interface:portName,adminStatus,speed,status,description. for networkdevice:family,series,hostname,managementIpAddress,groupNameHierarchy,softwareVersion)
     */
    name?: string;
    /**
     * Operation of the rule
     *   - Choices: `OR`, `IN`, `EQ`, `LIKE`, `ILIKE`, `AND`
     */
    operation?: string;
    /**
     * Value of the parameter (e.g. for portName:1/0/1,for adminStatus,status:up/down, for speed: any integer value, for description: any valid string, for family:switches, for series:C3650, for managementIpAddress:10.197.124.90, groupNameHierarchy:Global, softwareVersion: 16.9.1)
     */
    value?: string;
    /**
     * values of the parameter,Only one of the value or values can be used for the given parameter. (for managementIpAddress e.g. ["10.197.124.90","10.197.124.91"])
     */
    values?: string[];
}

export interface TagDynamicRuleItem {
    /**
     * Name of the parameter (e.g. managementIpAddress,hostname)
     */
    name?: string;
    /**
     * Operation of the rule
     *   - Choices: `OR`, `IN`, `EQ`, `LIKE`, `ILIKE`, `AND`
     */
    operation?: string;
    /**
     * Value of the parameter (e.g. %10%,%NA%)
     */
    value?: string;
}

export interface TemplateDeviceType {
    /**
     * Product family
     */
    productFamily: string;
    /**
     * Product series
     */
    productSeries?: string;
    /**
     * Product type
     */
    productType?: string;
}

export interface TemplateTemplateParam {
    /**
     * Bind to source
     */
    binding?: string;
    /**
     * Datatype of template parameter
     *   - Choices: `STRING`, `INTEGER`, `IPADDRESS`, `MACADDRESS`, `SECTIONDIVIDER`
     */
    dataType: string;
    /**
     * Default selection values
     */
    defaultSelectedValues?: string[];
    /**
     * Default value of template parameter
     */
    defaultValue?: string;
    /**
     * Description of template parameter
     */
    description?: string;
    /**
     * Display name of template parameter
     */
    displayName?: string;
    /**
     * Instruction text
     */
    instructionText?: string;
    /**
     * Is it not a variable
     */
    notParam?: boolean;
    /**
     * Is it an array
     */
    paramArray?: boolean;
    /**
     * Name of the template parameter
     */
    parameterName?: string;
    /**
     * List of ranges
     */
    ranges?: outputs.TemplateTemplateParamRange[];
    /**
     * Is parameter required
     */
    required?: boolean;
    /**
     * Type of selection
     *   - Choices: `SINGLE_SELECT`, `MULTI_SELECT`
     */
    selectionType?: string;
    /**
     * Selection values
     */
    selectionValues?: {[key: string]: string};
}

export interface TemplateTemplateParamRange {
    /**
     * Max value of range
     */
    maxValue?: number;
    /**
     * Min value of range
     */
    minValue?: number;
}

export interface TransitPeerNetworkTransitControlPlaneSetting {
    /**
     * Device Management Ip Address of provisioned device
     */
    deviceManagementIpAddress?: string;
    /**
     * Site Name Hierarchy where device is provisioned
     */
    siteNameHierarchy?: string;
}

export interface WirelessDeviceProvisionDynamicInterface {
    /**
     * Interface Gateway. Required for AireOS
     */
    interfaceGateway?: string;
    /**
     * Interface IP Address. Required for AireOS
     */
    interfaceIpAddress?: string;
    /**
     * Interface Name. Required for both AireOS and EWLC.
     */
    interfaceName?: string;
    /**
     * Interface Netmask In CIDR. Required for AireOS
     */
    interfaceNetmask?: number;
    /**
     * LAG or Port Number. Required for AireOS
     */
    lagOrPortNumber?: string;
    /**
     * VLAN ID. Required for both AireOS and EWLC
     */
    vlanId?: number;
}

export interface WirelessEnterpriseSsidMultiPskSetting {
    /**
     * Passphrase
     */
    passphrase?: string;
    /**
     * Passphrase Type
     *   - Choices: `ASCII`, `HEX`
     */
    passphraseType?: string;
    /**
     * Priority
     */
    priority?: string;
}

export interface WirelessProfileSsidDetail {
    /**
     * 802.11be Profile Id. Applicable to IOS controllers with version 17.15 and higher. 802.11be Profiles if passed, should be same across all SSIDs in network profile being configured
     */
    dot11beProfileId?: string;
    /**
     * True if fabric is enabled, else False. Flex and fabric cannot be enabled simultaneously and a profile can only contain either flex SSIDs or fabric SSIDs and not both at the same time
     */
    enableFabric?: boolean;
    /**
     * True if flex connect is enabled, else False. Flex and fabric cannot be enabled simultaneously and a profile can only contain either flex SSIDs or fabric SSIDs and not both at the same time
     */
    enableFlexConnect?: boolean;
    /**
     * Interface Name
     *   - Default value: `management`
     */
    interfaceName: string;
    /**
     * Local To Vlan Id
     */
    localToVlan?: number;
    /**
     * SSID Name
     */
    ssidName: string;
    /**
     * WLAN Profile Name
     */
    wlanProfileName?: string;
}

