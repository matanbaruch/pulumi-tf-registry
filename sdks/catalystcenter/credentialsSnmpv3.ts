// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CredentialsSnmpv3 extends pulumi.CustomResource {
    /**
     * Get an existing CredentialsSnmpv3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialsSnmpv3State, opts?: pulumi.CustomResourceOptions): CredentialsSnmpv3 {
        return new CredentialsSnmpv3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/credentialsSnmpv3:CredentialsSnmpv3';

    /**
     * Returns true if the given object is an instance of CredentialsSnmpv3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialsSnmpv3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialsSnmpv3.__pulumiType;
    }

    /**
     * Authentication password
     */
    public readonly authPassword!: pulumi.Output<string | undefined>;
    /**
     * Authentication type - Choices: `SHA`, `MD5`
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * The description of the SNMPv3 credentials
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Privacy password
     */
    public readonly privacyPassword!: pulumi.Output<string | undefined>;
    /**
     * Privacy type - Choices: `AES128`, `AES192`, `AES256`
     */
    public readonly privacyType!: pulumi.Output<string | undefined>;
    /**
     * SNMP mode - Choices: `AUTHPRIV`, `AUTHNOPRIV`, `NOAUTHNOPRIV`
     */
    public readonly snmpMode!: pulumi.Output<string>;
    /**
     * Username
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a CredentialsSnmpv3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialsSnmpv3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialsSnmpv3Args | CredentialsSnmpv3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialsSnmpv3State | undefined;
            resourceInputs["authPassword"] = state ? state.authPassword : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["privacyPassword"] = state ? state.privacyPassword : undefined;
            resourceInputs["privacyType"] = state ? state.privacyType : undefined;
            resourceInputs["snmpMode"] = state ? state.snmpMode : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as CredentialsSnmpv3Args | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.snmpMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpMode'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authPassword"] = args ? args.authPassword : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["privacyPassword"] = args ? args.privacyPassword : undefined;
            resourceInputs["privacyType"] = args ? args.privacyType : undefined;
            resourceInputs["snmpMode"] = args ? args.snmpMode : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialsSnmpv3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CredentialsSnmpv3 resources.
 */
export interface CredentialsSnmpv3State {
    /**
     * Authentication password
     */
    authPassword?: pulumi.Input<string>;
    /**
     * Authentication type - Choices: `SHA`, `MD5`
     */
    authType?: pulumi.Input<string>;
    /**
     * The description of the SNMPv3 credentials
     */
    description?: pulumi.Input<string>;
    /**
     * Privacy password
     */
    privacyPassword?: pulumi.Input<string>;
    /**
     * Privacy type - Choices: `AES128`, `AES192`, `AES256`
     */
    privacyType?: pulumi.Input<string>;
    /**
     * SNMP mode - Choices: `AUTHPRIV`, `AUTHNOPRIV`, `NOAUTHNOPRIV`
     */
    snmpMode?: pulumi.Input<string>;
    /**
     * Username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialsSnmpv3 resource.
 */
export interface CredentialsSnmpv3Args {
    /**
     * Authentication password
     */
    authPassword?: pulumi.Input<string>;
    /**
     * Authentication type - Choices: `SHA`, `MD5`
     */
    authType?: pulumi.Input<string>;
    /**
     * The description of the SNMPv3 credentials
     */
    description: pulumi.Input<string>;
    /**
     * Privacy password
     */
    privacyPassword?: pulumi.Input<string>;
    /**
     * Privacy type - Choices: `AES128`, `AES192`, `AES256`
     */
    privacyType?: pulumi.Input<string>;
    /**
     * SNMP mode - Choices: `AUTHPRIV`, `AUTHNOPRIV`, `NOAUTHNOPRIV`
     */
    snmpMode: pulumi.Input<string>;
    /**
     * Username
     */
    username: pulumi.Input<string>;
}
