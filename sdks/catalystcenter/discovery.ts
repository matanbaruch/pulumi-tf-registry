// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Discovery extends pulumi.CustomResource {
    /**
     * Get an existing Discovery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiscoveryState, opts?: pulumi.CustomResourceOptions): Discovery {
        return new Discovery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/discovery:Discovery';

    /**
     * Returns true if the given object is an instance of Discovery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Discovery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Discovery.__pulumiType;
    }

    /**
     * CDP level is the number of hops across neighbor devices.
     */
    public readonly cdpLevel!: pulumi.Output<number | undefined>;
    /**
     * Type of Discovery. - Choices: `Single`, `Range`, `Multi Range`, `CDP`, `LLDP`, `CIDR`
     */
    public readonly discoveryType!: pulumi.Output<string>;
    /**
     * Enable passwords of the devices to be discovered.
     */
    public readonly enablePasswordLists!: pulumi.Output<string[] | undefined>;
    /**
     * A list of IDs, which must include SNMP credential and CLI credential.
     */
    public readonly globalCredentialIdLists!: pulumi.Output<string[] | undefined>;
    public readonly httpReadCredential!: pulumi.Output<string | undefined>;
    public readonly httpWriteCredential!: pulumi.Output<string | undefined>;
    /**
     * A string of IP address ranges to discover. E.g.: '172.30.0.1' for discovery_type Single, CDP and LLDP;
     * '172.30.0.1-172.30.0.4' for Range; '72.30.0.1-172.30.0.4,172.31.0.1-172.31.0.4' for Multi Range; '172.30.0.1/20' for
     * CIDR.
     */
    public readonly ipAddressList!: pulumi.Output<string | undefined>;
    /**
     * A list of IP address ranges to exclude from the discovery.
     */
    public readonly ipFilterLists!: pulumi.Output<string[] | undefined>;
    /**
     * LLDP level to which neighbor devices to be discovered.
     */
    public readonly lldpLevel!: pulumi.Output<number | undefined>;
    /**
     * A name of the discovery.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Port number for netconf as a string. It requires SSH protocol to work.
     */
    public readonly netconfPort!: pulumi.Output<string | undefined>;
    /**
     * Passwords of the devices to be discovered.
     */
    public readonly passwordLists!: pulumi.Output<string[] | undefined>;
    /**
     * Preferred method for selecting management IP address. - Choices: `None`, `UseLoopBack` - Default value: `None`
     */
    public readonly preferredIpMethod!: pulumi.Output<string>;
    /**
     * A string of comma-separated protocols (SSH/Telnet), in the same order in which the connections to each device are
     * attempted. E.g.: 'Telnet': only telnet; 'SSH,Telnet': ssh first, with telnet fallback.
     */
    public readonly protocolOrder!: pulumi.Output<string>;
    /**
     * Number of times to try establishing SSH/Telnet connection to a device.
     */
    public readonly retry!: pulumi.Output<number | undefined>;
    /**
     * Auth passphrase for SNMP.
     */
    public readonly snmpAuthPassphrase!: pulumi.Output<string | undefined>;
    /**
     * SNMP auth protocol. - Choices: `SHA`, `MD5`
     */
    public readonly snmpAuthProtocol!: pulumi.Output<string | undefined>;
    /**
     * Mode of SNMP. The `snmp_auth_protocol` and `snmp_auth_passphrase` are required for "AuthNoPriv" mode. Additionally,
     * `snmp_priv_protocol` and `snmp_priv_passphrase` are required for "AuthPriv" mode. - Choices: `AuthPriv`, `AuthNoPriv`,
     * `NoAuthNoPriv`
     */
    public readonly snmpMode!: pulumi.Output<string | undefined>;
    /**
     * Passphrase for SNMP privacy.
     */
    public readonly snmpPrivPassphrase!: pulumi.Output<string | undefined>;
    /**
     * SNMP privacy protocol. - Choices: `DES`, `AES128`
     */
    public readonly snmpPrivProtocol!: pulumi.Output<string | undefined>;
    /**
     * SNMP RO community of the devices to be discovered.
     */
    public readonly snmpRoCommunity!: pulumi.Output<string | undefined>;
    /**
     * Description for snmp_ro_community.
     */
    public readonly snmpRoCommunityDesc!: pulumi.Output<string | undefined>;
    /**
     * SNMP RW community of the devices to be discovered.
     */
    public readonly snmpRwCommunity!: pulumi.Output<string | undefined>;
    /**
     * Description for snmp_rw_community
     */
    public readonly snmpRwCommunityDesc!: pulumi.Output<string | undefined>;
    /**
     * SNMP username of the devices to be discovered.
     */
    public readonly snmpUserName!: pulumi.Output<string | undefined>;
    /**
     * SNMP version - Choices: `v2`, `v3`
     */
    public readonly snmpVersion!: pulumi.Output<string | undefined>;
    /**
     * Number of seconds to wait for each SSH/Telnet connection to a device.
     */
    public readonly timeoutSeconds!: pulumi.Output<number | undefined>;
    /**
     * Usernames for the devices to be discovered.
     */
    public readonly userNameLists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Discovery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiscoveryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiscoveryArgs | DiscoveryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiscoveryState | undefined;
            resourceInputs["cdpLevel"] = state ? state.cdpLevel : undefined;
            resourceInputs["discoveryType"] = state ? state.discoveryType : undefined;
            resourceInputs["enablePasswordLists"] = state ? state.enablePasswordLists : undefined;
            resourceInputs["globalCredentialIdLists"] = state ? state.globalCredentialIdLists : undefined;
            resourceInputs["httpReadCredential"] = state ? state.httpReadCredential : undefined;
            resourceInputs["httpWriteCredential"] = state ? state.httpWriteCredential : undefined;
            resourceInputs["ipAddressList"] = state ? state.ipAddressList : undefined;
            resourceInputs["ipFilterLists"] = state ? state.ipFilterLists : undefined;
            resourceInputs["lldpLevel"] = state ? state.lldpLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netconfPort"] = state ? state.netconfPort : undefined;
            resourceInputs["passwordLists"] = state ? state.passwordLists : undefined;
            resourceInputs["preferredIpMethod"] = state ? state.preferredIpMethod : undefined;
            resourceInputs["protocolOrder"] = state ? state.protocolOrder : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["snmpAuthPassphrase"] = state ? state.snmpAuthPassphrase : undefined;
            resourceInputs["snmpAuthProtocol"] = state ? state.snmpAuthProtocol : undefined;
            resourceInputs["snmpMode"] = state ? state.snmpMode : undefined;
            resourceInputs["snmpPrivPassphrase"] = state ? state.snmpPrivPassphrase : undefined;
            resourceInputs["snmpPrivProtocol"] = state ? state.snmpPrivProtocol : undefined;
            resourceInputs["snmpRoCommunity"] = state ? state.snmpRoCommunity : undefined;
            resourceInputs["snmpRoCommunityDesc"] = state ? state.snmpRoCommunityDesc : undefined;
            resourceInputs["snmpRwCommunity"] = state ? state.snmpRwCommunity : undefined;
            resourceInputs["snmpRwCommunityDesc"] = state ? state.snmpRwCommunityDesc : undefined;
            resourceInputs["snmpUserName"] = state ? state.snmpUserName : undefined;
            resourceInputs["snmpVersion"] = state ? state.snmpVersion : undefined;
            resourceInputs["timeoutSeconds"] = state ? state.timeoutSeconds : undefined;
            resourceInputs["userNameLists"] = state ? state.userNameLists : undefined;
        } else {
            const args = argsOrState as DiscoveryArgs | undefined;
            if ((!args || args.discoveryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'discoveryType'");
            }
            if ((!args || args.protocolOrder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolOrder'");
            }
            resourceInputs["cdpLevel"] = args ? args.cdpLevel : undefined;
            resourceInputs["discoveryType"] = args ? args.discoveryType : undefined;
            resourceInputs["enablePasswordLists"] = args ? args.enablePasswordLists : undefined;
            resourceInputs["globalCredentialIdLists"] = args ? args.globalCredentialIdLists : undefined;
            resourceInputs["httpReadCredential"] = args ? args.httpReadCredential : undefined;
            resourceInputs["httpWriteCredential"] = args ? args.httpWriteCredential : undefined;
            resourceInputs["ipAddressList"] = args ? args.ipAddressList : undefined;
            resourceInputs["ipFilterLists"] = args ? args.ipFilterLists : undefined;
            resourceInputs["lldpLevel"] = args ? args.lldpLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netconfPort"] = args ? args.netconfPort : undefined;
            resourceInputs["passwordLists"] = args ? args.passwordLists : undefined;
            resourceInputs["preferredIpMethod"] = args ? args.preferredIpMethod : undefined;
            resourceInputs["protocolOrder"] = args ? args.protocolOrder : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["snmpAuthPassphrase"] = args ? args.snmpAuthPassphrase : undefined;
            resourceInputs["snmpAuthProtocol"] = args ? args.snmpAuthProtocol : undefined;
            resourceInputs["snmpMode"] = args ? args.snmpMode : undefined;
            resourceInputs["snmpPrivPassphrase"] = args ? args.snmpPrivPassphrase : undefined;
            resourceInputs["snmpPrivProtocol"] = args ? args.snmpPrivProtocol : undefined;
            resourceInputs["snmpRoCommunity"] = args ? args.snmpRoCommunity : undefined;
            resourceInputs["snmpRoCommunityDesc"] = args ? args.snmpRoCommunityDesc : undefined;
            resourceInputs["snmpRwCommunity"] = args ? args.snmpRwCommunity : undefined;
            resourceInputs["snmpRwCommunityDesc"] = args ? args.snmpRwCommunityDesc : undefined;
            resourceInputs["snmpUserName"] = args ? args.snmpUserName : undefined;
            resourceInputs["snmpVersion"] = args ? args.snmpVersion : undefined;
            resourceInputs["timeoutSeconds"] = args ? args.timeoutSeconds : undefined;
            resourceInputs["userNameLists"] = args ? args.userNameLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Discovery.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Discovery resources.
 */
export interface DiscoveryState {
    /**
     * CDP level is the number of hops across neighbor devices.
     */
    cdpLevel?: pulumi.Input<number>;
    /**
     * Type of Discovery. - Choices: `Single`, `Range`, `Multi Range`, `CDP`, `LLDP`, `CIDR`
     */
    discoveryType?: pulumi.Input<string>;
    /**
     * Enable passwords of the devices to be discovered.
     */
    enablePasswordLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IDs, which must include SNMP credential and CLI credential.
     */
    globalCredentialIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    httpReadCredential?: pulumi.Input<string>;
    httpWriteCredential?: pulumi.Input<string>;
    /**
     * A string of IP address ranges to discover. E.g.: '172.30.0.1' for discovery_type Single, CDP and LLDP;
     * '172.30.0.1-172.30.0.4' for Range; '72.30.0.1-172.30.0.4,172.31.0.1-172.31.0.4' for Multi Range; '172.30.0.1/20' for
     * CIDR.
     */
    ipAddressList?: pulumi.Input<string>;
    /**
     * A list of IP address ranges to exclude from the discovery.
     */
    ipFilterLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * LLDP level to which neighbor devices to be discovered.
     */
    lldpLevel?: pulumi.Input<number>;
    /**
     * A name of the discovery.
     */
    name?: pulumi.Input<string>;
    /**
     * Port number for netconf as a string. It requires SSH protocol to work.
     */
    netconfPort?: pulumi.Input<string>;
    /**
     * Passwords of the devices to be discovered.
     */
    passwordLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Preferred method for selecting management IP address. - Choices: `None`, `UseLoopBack` - Default value: `None`
     */
    preferredIpMethod?: pulumi.Input<string>;
    /**
     * A string of comma-separated protocols (SSH/Telnet), in the same order in which the connections to each device are
     * attempted. E.g.: 'Telnet': only telnet; 'SSH,Telnet': ssh first, with telnet fallback.
     */
    protocolOrder?: pulumi.Input<string>;
    /**
     * Number of times to try establishing SSH/Telnet connection to a device.
     */
    retry?: pulumi.Input<number>;
    /**
     * Auth passphrase for SNMP.
     */
    snmpAuthPassphrase?: pulumi.Input<string>;
    /**
     * SNMP auth protocol. - Choices: `SHA`, `MD5`
     */
    snmpAuthProtocol?: pulumi.Input<string>;
    /**
     * Mode of SNMP. The `snmp_auth_protocol` and `snmp_auth_passphrase` are required for "AuthNoPriv" mode. Additionally,
     * `snmp_priv_protocol` and `snmp_priv_passphrase` are required for "AuthPriv" mode. - Choices: `AuthPriv`, `AuthNoPriv`,
     * `NoAuthNoPriv`
     */
    snmpMode?: pulumi.Input<string>;
    /**
     * Passphrase for SNMP privacy.
     */
    snmpPrivPassphrase?: pulumi.Input<string>;
    /**
     * SNMP privacy protocol. - Choices: `DES`, `AES128`
     */
    snmpPrivProtocol?: pulumi.Input<string>;
    /**
     * SNMP RO community of the devices to be discovered.
     */
    snmpRoCommunity?: pulumi.Input<string>;
    /**
     * Description for snmp_ro_community.
     */
    snmpRoCommunityDesc?: pulumi.Input<string>;
    /**
     * SNMP RW community of the devices to be discovered.
     */
    snmpRwCommunity?: pulumi.Input<string>;
    /**
     * Description for snmp_rw_community
     */
    snmpRwCommunityDesc?: pulumi.Input<string>;
    /**
     * SNMP username of the devices to be discovered.
     */
    snmpUserName?: pulumi.Input<string>;
    /**
     * SNMP version - Choices: `v2`, `v3`
     */
    snmpVersion?: pulumi.Input<string>;
    /**
     * Number of seconds to wait for each SSH/Telnet connection to a device.
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * Usernames for the devices to be discovered.
     */
    userNameLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Discovery resource.
 */
export interface DiscoveryArgs {
    /**
     * CDP level is the number of hops across neighbor devices.
     */
    cdpLevel?: pulumi.Input<number>;
    /**
     * Type of Discovery. - Choices: `Single`, `Range`, `Multi Range`, `CDP`, `LLDP`, `CIDR`
     */
    discoveryType: pulumi.Input<string>;
    /**
     * Enable passwords of the devices to be discovered.
     */
    enablePasswordLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IDs, which must include SNMP credential and CLI credential.
     */
    globalCredentialIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    httpReadCredential?: pulumi.Input<string>;
    httpWriteCredential?: pulumi.Input<string>;
    /**
     * A string of IP address ranges to discover. E.g.: '172.30.0.1' for discovery_type Single, CDP and LLDP;
     * '172.30.0.1-172.30.0.4' for Range; '72.30.0.1-172.30.0.4,172.31.0.1-172.31.0.4' for Multi Range; '172.30.0.1/20' for
     * CIDR.
     */
    ipAddressList?: pulumi.Input<string>;
    /**
     * A list of IP address ranges to exclude from the discovery.
     */
    ipFilterLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * LLDP level to which neighbor devices to be discovered.
     */
    lldpLevel?: pulumi.Input<number>;
    /**
     * A name of the discovery.
     */
    name?: pulumi.Input<string>;
    /**
     * Port number for netconf as a string. It requires SSH protocol to work.
     */
    netconfPort?: pulumi.Input<string>;
    /**
     * Passwords of the devices to be discovered.
     */
    passwordLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Preferred method for selecting management IP address. - Choices: `None`, `UseLoopBack` - Default value: `None`
     */
    preferredIpMethod?: pulumi.Input<string>;
    /**
     * A string of comma-separated protocols (SSH/Telnet), in the same order in which the connections to each device are
     * attempted. E.g.: 'Telnet': only telnet; 'SSH,Telnet': ssh first, with telnet fallback.
     */
    protocolOrder: pulumi.Input<string>;
    /**
     * Number of times to try establishing SSH/Telnet connection to a device.
     */
    retry?: pulumi.Input<number>;
    /**
     * Auth passphrase for SNMP.
     */
    snmpAuthPassphrase?: pulumi.Input<string>;
    /**
     * SNMP auth protocol. - Choices: `SHA`, `MD5`
     */
    snmpAuthProtocol?: pulumi.Input<string>;
    /**
     * Mode of SNMP. The `snmp_auth_protocol` and `snmp_auth_passphrase` are required for "AuthNoPriv" mode. Additionally,
     * `snmp_priv_protocol` and `snmp_priv_passphrase` are required for "AuthPriv" mode. - Choices: `AuthPriv`, `AuthNoPriv`,
     * `NoAuthNoPriv`
     */
    snmpMode?: pulumi.Input<string>;
    /**
     * Passphrase for SNMP privacy.
     */
    snmpPrivPassphrase?: pulumi.Input<string>;
    /**
     * SNMP privacy protocol. - Choices: `DES`, `AES128`
     */
    snmpPrivProtocol?: pulumi.Input<string>;
    /**
     * SNMP RO community of the devices to be discovered.
     */
    snmpRoCommunity?: pulumi.Input<string>;
    /**
     * Description for snmp_ro_community.
     */
    snmpRoCommunityDesc?: pulumi.Input<string>;
    /**
     * SNMP RW community of the devices to be discovered.
     */
    snmpRwCommunity?: pulumi.Input<string>;
    /**
     * Description for snmp_rw_community
     */
    snmpRwCommunityDesc?: pulumi.Input<string>;
    /**
     * SNMP username of the devices to be discovered.
     */
    snmpUserName?: pulumi.Input<string>;
    /**
     * SNMP version - Choices: `v2`, `v3`
     */
    snmpVersion?: pulumi.Input<string>;
    /**
     * Number of seconds to wait for each SSH/Telnet connection to a device.
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * Usernames for the devices to be discovered.
     */
    userNameLists?: pulumi.Input<pulumi.Input<string>[]>;
}
