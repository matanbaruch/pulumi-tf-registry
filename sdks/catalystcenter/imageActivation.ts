// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ImageActivation extends pulumi.CustomResource {
    /**
     * Get an existing ImageActivation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageActivationState, opts?: pulumi.CustomResourceOptions): ImageActivation {
        return new ImageActivation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'catalystcenter:index/imageActivation:ImageActivation';

    /**
     * Returns true if the given object is an instance of ImageActivation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageActivation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageActivation.__pulumiType;
    }

    /**
     * Allow to activate a lower version of an image. Updating this attribute later does not cause image to be re-activated.
     */
    public readonly activateLowerImageVersion!: pulumi.Output<boolean | undefined>;
    /**
     * Device upgrade mode. Updating this attribute later does not cause image to be re-activated.
     */
    public readonly deviceUpgradeMode!: pulumi.Output<string | undefined>;
    /**
     * The UUID of the network device on which to active the software image. Changing it forces the entire resource to be
     * re-created, so that the activation occurs as newly specified.
     */
    public readonly deviceUuid!: pulumi.Output<string | undefined>;
    /**
     * Whether to distribute the image as needed, thus negating the need for a separate `catalystcenter.ImageDistribution`.
     * Updating this attribute later does not cause image to be re-activated.
     */
    public readonly distributeIfNeeded!: pulumi.Output<boolean | undefined>;
    /**
     * The list of UUIDs of the software images to activate. The UUIDs could be obtained for example from
     * `catalystcenter_image.id`. SMU images shouldn't be specified in this list. Changing/adding/removing any UUID causes the
     * entire resource to be re-created, so that the entire activation occurs as newly specified.
     */
    public readonly imageUuidLists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ImageActivation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageActivationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageActivationArgs | ImageActivationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageActivationState | undefined;
            resourceInputs["activateLowerImageVersion"] = state ? state.activateLowerImageVersion : undefined;
            resourceInputs["deviceUpgradeMode"] = state ? state.deviceUpgradeMode : undefined;
            resourceInputs["deviceUuid"] = state ? state.deviceUuid : undefined;
            resourceInputs["distributeIfNeeded"] = state ? state.distributeIfNeeded : undefined;
            resourceInputs["imageUuidLists"] = state ? state.imageUuidLists : undefined;
        } else {
            const args = argsOrState as ImageActivationArgs | undefined;
            resourceInputs["activateLowerImageVersion"] = args ? args.activateLowerImageVersion : undefined;
            resourceInputs["deviceUpgradeMode"] = args ? args.deviceUpgradeMode : undefined;
            resourceInputs["deviceUuid"] = args ? args.deviceUuid : undefined;
            resourceInputs["distributeIfNeeded"] = args ? args.distributeIfNeeded : undefined;
            resourceInputs["imageUuidLists"] = args ? args.imageUuidLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageActivation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImageActivation resources.
 */
export interface ImageActivationState {
    /**
     * Allow to activate a lower version of an image. Updating this attribute later does not cause image to be re-activated.
     */
    activateLowerImageVersion?: pulumi.Input<boolean>;
    /**
     * Device upgrade mode. Updating this attribute later does not cause image to be re-activated.
     */
    deviceUpgradeMode?: pulumi.Input<string>;
    /**
     * The UUID of the network device on which to active the software image. Changing it forces the entire resource to be
     * re-created, so that the activation occurs as newly specified.
     */
    deviceUuid?: pulumi.Input<string>;
    /**
     * Whether to distribute the image as needed, thus negating the need for a separate `catalystcenter.ImageDistribution`.
     * Updating this attribute later does not cause image to be re-activated.
     */
    distributeIfNeeded?: pulumi.Input<boolean>;
    /**
     * The list of UUIDs of the software images to activate. The UUIDs could be obtained for example from
     * `catalystcenter_image.id`. SMU images shouldn't be specified in this list. Changing/adding/removing any UUID causes the
     * entire resource to be re-created, so that the entire activation occurs as newly specified.
     */
    imageUuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ImageActivation resource.
 */
export interface ImageActivationArgs {
    /**
     * Allow to activate a lower version of an image. Updating this attribute later does not cause image to be re-activated.
     */
    activateLowerImageVersion?: pulumi.Input<boolean>;
    /**
     * Device upgrade mode. Updating this attribute later does not cause image to be re-activated.
     */
    deviceUpgradeMode?: pulumi.Input<string>;
    /**
     * The UUID of the network device on which to active the software image. Changing it forces the entire resource to be
     * re-created, so that the activation occurs as newly specified.
     */
    deviceUuid?: pulumi.Input<string>;
    /**
     * Whether to distribute the image as needed, thus negating the need for a separate `catalystcenter.ImageDistribution`.
     * Updating this attribute later does not cause image to be re-activated.
     */
    distributeIfNeeded?: pulumi.Input<boolean>;
    /**
     * The list of UUIDs of the software images to activate. The UUIDs could be obtained for example from
     * `catalystcenter_image.id`. SMU images shouldn't be specified in this list. Changing/adding/removing any UUID causes the
     * entire resource to be re-created, so that the entire activation occurs as newly specified.
     */
    imageUuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}
