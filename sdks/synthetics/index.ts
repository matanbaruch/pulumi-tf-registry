// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CreateApiCheckV2Args, CreateApiCheckV2State } from "./createApiCheckV2";
export type CreateApiCheckV2 = import("./createApiCheckV2").CreateApiCheckV2;
export const CreateApiCheckV2: typeof import("./createApiCheckV2").CreateApiCheckV2 = null as any;
utilities.lazyLoad(exports, ["CreateApiCheckV2"], () => require("./createApiCheckV2"));

export { CreateBrowserCheckArgs, CreateBrowserCheckState } from "./createBrowserCheck";
export type CreateBrowserCheck = import("./createBrowserCheck").CreateBrowserCheck;
export const CreateBrowserCheck: typeof import("./createBrowserCheck").CreateBrowserCheck = null as any;
utilities.lazyLoad(exports, ["CreateBrowserCheck"], () => require("./createBrowserCheck"));

export { CreateBrowserCheckV2Args, CreateBrowserCheckV2State } from "./createBrowserCheckV2";
export type CreateBrowserCheckV2 = import("./createBrowserCheckV2").CreateBrowserCheckV2;
export const CreateBrowserCheckV2: typeof import("./createBrowserCheckV2").CreateBrowserCheckV2 = null as any;
utilities.lazyLoad(exports, ["CreateBrowserCheckV2"], () => require("./createBrowserCheckV2"));

export { CreateDowntimeConfigurationV2Args, CreateDowntimeConfigurationV2State } from "./createDowntimeConfigurationV2";
export type CreateDowntimeConfigurationV2 = import("./createDowntimeConfigurationV2").CreateDowntimeConfigurationV2;
export const CreateDowntimeConfigurationV2: typeof import("./createDowntimeConfigurationV2").CreateDowntimeConfigurationV2 = null as any;
utilities.lazyLoad(exports, ["CreateDowntimeConfigurationV2"], () => require("./createDowntimeConfigurationV2"));

export { CreateHttpCheckArgs, CreateHttpCheckState } from "./createHttpCheck";
export type CreateHttpCheck = import("./createHttpCheck").CreateHttpCheck;
export const CreateHttpCheck: typeof import("./createHttpCheck").CreateHttpCheck = null as any;
utilities.lazyLoad(exports, ["CreateHttpCheck"], () => require("./createHttpCheck"));

export { CreateHttpCheckV2Args, CreateHttpCheckV2State } from "./createHttpCheckV2";
export type CreateHttpCheckV2 = import("./createHttpCheckV2").CreateHttpCheckV2;
export const CreateHttpCheckV2: typeof import("./createHttpCheckV2").CreateHttpCheckV2 = null as any;
utilities.lazyLoad(exports, ["CreateHttpCheckV2"], () => require("./createHttpCheckV2"));

export { CreateLocationV2Args, CreateLocationV2State } from "./createLocationV2";
export type CreateLocationV2 = import("./createLocationV2").CreateLocationV2;
export const CreateLocationV2: typeof import("./createLocationV2").CreateLocationV2 = null as any;
utilities.lazyLoad(exports, ["CreateLocationV2"], () => require("./createLocationV2"));

export { CreatePortCheckV2Args, CreatePortCheckV2State } from "./createPortCheckV2";
export type CreatePortCheckV2 = import("./createPortCheckV2").CreatePortCheckV2;
export const CreatePortCheckV2: typeof import("./createPortCheckV2").CreatePortCheckV2 = null as any;
utilities.lazyLoad(exports, ["CreatePortCheckV2"], () => require("./createPortCheckV2"));

export { CreateVariableV2Args, CreateVariableV2State } from "./createVariableV2";
export type CreateVariableV2 = import("./createVariableV2").CreateVariableV2;
export const CreateVariableV2: typeof import("./createVariableV2").CreateVariableV2 = null as any;
utilities.lazyLoad(exports, ["CreateVariableV2"], () => require("./createVariableV2"));

export { GetApiV2CheckArgs, GetApiV2CheckResult, GetApiV2CheckOutputArgs } from "./getApiV2Check";
export const getApiV2Check: typeof import("./getApiV2Check").getApiV2Check = null as any;
export const getApiV2CheckOutput: typeof import("./getApiV2Check").getApiV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getApiV2Check","getApiV2CheckOutput"], () => require("./getApiV2Check"));

export { GetBrowserV2CheckArgs, GetBrowserV2CheckResult, GetBrowserV2CheckOutputArgs } from "./getBrowserV2Check";
export const getBrowserV2Check: typeof import("./getBrowserV2Check").getBrowserV2Check = null as any;
export const getBrowserV2CheckOutput: typeof import("./getBrowserV2Check").getBrowserV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getBrowserV2Check","getBrowserV2CheckOutput"], () => require("./getBrowserV2Check"));

export { GetCheckArgs, GetCheckResult, GetCheckOutputArgs } from "./getCheck";
export const getCheck: typeof import("./getCheck").getCheck = null as any;
export const getCheckOutput: typeof import("./getCheck").getCheckOutput = null as any;
utilities.lazyLoad(exports, ["getCheck","getCheckOutput"], () => require("./getCheck"));

export { GetDevicesV2CheckArgs, GetDevicesV2CheckResult, GetDevicesV2CheckOutputArgs } from "./getDevicesV2Check";
export const getDevicesV2Check: typeof import("./getDevicesV2Check").getDevicesV2Check = null as any;
export const getDevicesV2CheckOutput: typeof import("./getDevicesV2Check").getDevicesV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesV2Check","getDevicesV2CheckOutput"], () => require("./getDevicesV2Check"));

export { GetDowntimeConfigurationV2CheckArgs, GetDowntimeConfigurationV2CheckResult, GetDowntimeConfigurationV2CheckOutputArgs } from "./getDowntimeConfigurationV2Check";
export const getDowntimeConfigurationV2Check: typeof import("./getDowntimeConfigurationV2Check").getDowntimeConfigurationV2Check = null as any;
export const getDowntimeConfigurationV2CheckOutput: typeof import("./getDowntimeConfigurationV2Check").getDowntimeConfigurationV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getDowntimeConfigurationV2Check","getDowntimeConfigurationV2CheckOutput"], () => require("./getDowntimeConfigurationV2Check"));

export { GetDowntimeConfigurationsV2CheckArgs, GetDowntimeConfigurationsV2CheckResult, GetDowntimeConfigurationsV2CheckOutputArgs } from "./getDowntimeConfigurationsV2Check";
export const getDowntimeConfigurationsV2Check: typeof import("./getDowntimeConfigurationsV2Check").getDowntimeConfigurationsV2Check = null as any;
export const getDowntimeConfigurationsV2CheckOutput: typeof import("./getDowntimeConfigurationsV2Check").getDowntimeConfigurationsV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getDowntimeConfigurationsV2Check","getDowntimeConfigurationsV2CheckOutput"], () => require("./getDowntimeConfigurationsV2Check"));

export { GetHttpV2CheckArgs, GetHttpV2CheckResult, GetHttpV2CheckOutputArgs } from "./getHttpV2Check";
export const getHttpV2Check: typeof import("./getHttpV2Check").getHttpV2Check = null as any;
export const getHttpV2CheckOutput: typeof import("./getHttpV2Check").getHttpV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getHttpV2Check","getHttpV2CheckOutput"], () => require("./getHttpV2Check"));

export { GetLocationV2CheckArgs, GetLocationV2CheckResult, GetLocationV2CheckOutputArgs } from "./getLocationV2Check";
export const getLocationV2Check: typeof import("./getLocationV2Check").getLocationV2Check = null as any;
export const getLocationV2CheckOutput: typeof import("./getLocationV2Check").getLocationV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getLocationV2Check","getLocationV2CheckOutput"], () => require("./getLocationV2Check"));

export { GetLocationsV2CheckArgs, GetLocationsV2CheckResult, GetLocationsV2CheckOutputArgs } from "./getLocationsV2Check";
export const getLocationsV2Check: typeof import("./getLocationsV2Check").getLocationsV2Check = null as any;
export const getLocationsV2CheckOutput: typeof import("./getLocationsV2Check").getLocationsV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getLocationsV2Check","getLocationsV2CheckOutput"], () => require("./getLocationsV2Check"));

export { GetPortV2CheckArgs, GetPortV2CheckResult, GetPortV2CheckOutputArgs } from "./getPortV2Check";
export const getPortV2Check: typeof import("./getPortV2Check").getPortV2Check = null as any;
export const getPortV2CheckOutput: typeof import("./getPortV2Check").getPortV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getPortV2Check","getPortV2CheckOutput"], () => require("./getPortV2Check"));

export { GetVariableV2CheckArgs, GetVariableV2CheckResult, GetVariableV2CheckOutputArgs } from "./getVariableV2Check";
export const getVariableV2Check: typeof import("./getVariableV2Check").getVariableV2Check = null as any;
export const getVariableV2CheckOutput: typeof import("./getVariableV2Check").getVariableV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getVariableV2Check","getVariableV2CheckOutput"], () => require("./getVariableV2Check"));

export { GetVariablesV2CheckArgs, GetVariablesV2CheckResult, GetVariablesV2CheckOutputArgs } from "./getVariablesV2Check";
export const getVariablesV2Check: typeof import("./getVariablesV2Check").getVariablesV2Check = null as any;
export const getVariablesV2CheckOutput: typeof import("./getVariablesV2Check").getVariablesV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["getVariablesV2Check","getVariablesV2CheckOutput"], () => require("./getVariablesV2Check"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "synthetics:index/createApiCheckV2:CreateApiCheckV2":
                return new CreateApiCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/createBrowserCheck:CreateBrowserCheck":
                return new CreateBrowserCheck(name, <any>undefined, { urn })
            case "synthetics:index/createBrowserCheckV2:CreateBrowserCheckV2":
                return new CreateBrowserCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/createDowntimeConfigurationV2:CreateDowntimeConfigurationV2":
                return new CreateDowntimeConfigurationV2(name, <any>undefined, { urn })
            case "synthetics:index/createHttpCheck:CreateHttpCheck":
                return new CreateHttpCheck(name, <any>undefined, { urn })
            case "synthetics:index/createHttpCheckV2:CreateHttpCheckV2":
                return new CreateHttpCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/createLocationV2:CreateLocationV2":
                return new CreateLocationV2(name, <any>undefined, { urn })
            case "synthetics:index/createPortCheckV2:CreatePortCheckV2":
                return new CreatePortCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/createVariableV2:CreateVariableV2":
                return new CreateVariableV2(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("synthetics", "index/createApiCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createBrowserCheck", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createBrowserCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createDowntimeConfigurationV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createHttpCheck", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createHttpCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createLocationV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createPortCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/createVariableV2", _module)
pulumi.runtime.registerResourcePackage("synthetics", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:synthetics") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
