// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CreateApiCheckV2Test {
    active: boolean;
    automaticRetries: number;
    customProperties?: outputs.CreateApiCheckV2TestCustomProperty[];
    deviceId: number;
    frequency: number;
    locationIds: string[];
    name: string;
    /**
     * Unique elements of a given request. See official [API documentation](https://dev.splunk.com/observability/reference/api/synthetics_api_tests/latest#endpoint-createapitest) as the source of truth for descriptions and options for these values.
     */
    requests?: outputs.CreateApiCheckV2TestRequest[];
    schedulingStrategy?: string;
}

export interface CreateApiCheckV2TestCustomProperty {
    key?: string;
    value?: string;
}

export interface CreateApiCheckV2TestRequest {
    configurations?: outputs.CreateApiCheckV2TestRequestConfiguration[];
    setups?: outputs.CreateApiCheckV2TestRequestSetup[];
    validations?: outputs.CreateApiCheckV2TestRequestValidation[];
}

export interface CreateApiCheckV2TestRequestConfiguration {
    body?: string;
    headers?: {[key: string]: string};
    name?: string;
    requestMethod?: string;
    url?: string;
}

export interface CreateApiCheckV2TestRequestSetup {
    code?: string;
    extractor?: string;
    name?: string;
    source?: string;
    type?: string;
    value?: string;
    variable?: string;
}

export interface CreateApiCheckV2TestRequestValidation {
    actual?: string;
    code?: string;
    comparator?: string;
    expected?: string;
    extractor?: string;
    name?: string;
    source?: string;
    type?: string;
    value?: string;
    variable?: string;
}

export interface CreateBrowserCheckBlackoutPeriod {
    createdAt: string;
    durationInMinutes: number;
    endDate: string;
    endTime: string;
    isRepeat: boolean;
    monthlyRepeatType: string;
    repeatType: string;
    startDate: string;
    startTime: string;
    timezone: string;
    updatedAt: string;
}

export interface CreateBrowserCheckBrowser {
    type?: string;
}

export interface CreateBrowserCheckCheckConnection {
    downloadBandwidth?: number;
    latency?: number;
    packetLoss?: number;
    uploadBandwidth?: number;
}

export interface CreateBrowserCheckCookie {
    domain?: string;
    key?: string;
    path?: string;
    value?: string;
}

export interface CreateBrowserCheckDnsOverride {
    originalDomain?: string;
    originalHost?: string;
}

export interface CreateBrowserCheckExcludedFile {
    exclusionType?: string;
    pattern?: string;
    presetName?: string;
}

export interface CreateBrowserCheckHttpRequestHeader {
    userAgent: string;
}

export interface CreateBrowserCheckJavascriptFile {
    id?: number;
    name?: string;
}

export interface CreateBrowserCheckNotification {
    call?: boolean;
    email?: boolean;
    escalations?: outputs.CreateBrowserCheckNotificationEscalation[];
    muted?: boolean;
    notificationWindows?: outputs.CreateBrowserCheckNotificationNotificationWindow[];
    notifyAfterFailureCount?: number;
    notifyOnLocationFailure?: boolean;
    notifyWhos?: outputs.CreateBrowserCheckNotificationNotifyWho[];
    sms?: boolean;
}

export interface CreateBrowserCheckNotificationEscalation {
    afterMinutes?: number;
    call?: boolean;
    email?: boolean;
    isRepeat: boolean;
    notificationWindows?: outputs.CreateBrowserCheckNotificationEscalationNotificationWindow[];
    notifyWhos?: outputs.CreateBrowserCheckNotificationEscalationNotifyWho[];
    sms?: boolean;
}

export interface CreateBrowserCheckNotificationEscalationNotificationWindow {
    durationInMinutes?: number;
    endTime?: string;
    startTime?: string;
    timeZone?: string;
}

export interface CreateBrowserCheckNotificationEscalationNotifyWho {
    call?: boolean;
    customUserEmail?: string;
    email?: boolean;
    id?: number;
    links: outputs.CreateBrowserCheckNotificationEscalationNotifyWhoLink[];
    sms?: boolean;
    type?: string;
}

export interface CreateBrowserCheckNotificationEscalationNotifyWhoLink {
    selfHtml: string;
}

export interface CreateBrowserCheckNotificationNotificationWindow {
    durationInMinutes?: number;
    endTime?: string;
    startTime?: string;
    timeZone?: string;
}

export interface CreateBrowserCheckNotificationNotifyWho {
    call?: boolean;
    customUserEmail?: string;
    email?: boolean;
    id: number;
    links: outputs.CreateBrowserCheckNotificationNotifyWhoLink[];
    sms?: boolean;
    type?: string;
}

export interface CreateBrowserCheckNotificationNotifyWhoLink {
    selfHtml: string;
}

export interface CreateBrowserCheckStep {
    how?: string;
    itemMethod?: string;
    name?: string;
    position?: number;
    value?: string;
    variableName?: string;
    what?: string;
}

export interface CreateBrowserCheckSuccessCriteria {
    actionType?: string;
    comparisonString?: string;
    createdAt?: string;
    updatedAt?: string;
}

export interface CreateBrowserCheckThresholdMonitor {
    comparisonType?: string;
    matcher?: string;
    metricName?: string;
    value?: number;
}

export interface CreateBrowserCheckV2Test {
    active?: boolean;
    advancedSettings: outputs.CreateBrowserCheckV2TestAdvancedSetting[];
    automaticRetries: number;
    customProperties?: outputs.CreateBrowserCheckV2TestCustomProperty[];
    deviceId?: number;
    frequency?: number;
    locationIds?: string[];
    name: string;
    schedulingStrategy?: string;
    startUrl?: string;
    transactions: outputs.CreateBrowserCheckV2TestTransaction[];
    urlProtocol?: string;
}

export interface CreateBrowserCheckV2TestAdvancedSetting {
    authentications?: outputs.CreateBrowserCheckV2TestAdvancedSettingAuthentication[];
    collectInteractiveMetrics?: boolean;
    cookies?: outputs.CreateBrowserCheckV2TestAdvancedSettingCookie[];
    headers?: outputs.CreateBrowserCheckV2TestAdvancedSettingHeader[];
    hostOverrides?: outputs.CreateBrowserCheckV2TestAdvancedSettingHostOverride[];
    userAgent?: string;
    verifyCertificates: boolean;
}

export interface CreateBrowserCheckV2TestAdvancedSettingAuthentication {
    password?: string;
    username?: string;
}

export interface CreateBrowserCheckV2TestAdvancedSettingCookie {
    domain?: string;
    key?: string;
    path?: string;
    value?: string;
}

export interface CreateBrowserCheckV2TestAdvancedSettingHeader {
    domain?: string;
    name?: string;
    value?: string;
}

export interface CreateBrowserCheckV2TestAdvancedSettingHostOverride {
    keepHostHeader?: boolean;
    source?: string;
    target?: string;
}

export interface CreateBrowserCheckV2TestCustomProperty {
    key?: string;
    value?: string;
}

export interface CreateBrowserCheckV2TestTransaction {
    name?: string;
    /**
     * Unique steps for the transaction. See official [API documentation](https://dev.splunk.com/observability/reference/api/synthetics_browser/latest#endpoint-createbrowsertest) as the source of truth for descriptions and options for these values.
     */
    steps: outputs.CreateBrowserCheckV2TestTransactionStep[];
}

export interface CreateBrowserCheckV2TestTransactionStep {
    action?: string;
    duration?: number;
    maxWaitTime?: number;
    name?: string;
    optionSelector?: string;
    optionSelectorType?: string;
    options?: outputs.CreateBrowserCheckV2TestTransactionStepOption[];
    selector?: string;
    selectorType?: string;
    type?: string;
    url?: string;
    value?: string;
    variableName?: string;
    waitForNav?: boolean;
    waitForNavTimeout?: number;
}

export interface CreateBrowserCheckV2TestTransactionStepOption {
    url?: string;
}

export interface CreateBrowserCheckViewport {
    height?: number;
    width?: number;
}

export interface CreateDowntimeConfigurationV2DowntimeConfiguration {
    createdAt: string;
    description?: string;
    endTime: string;
    id: number;
    name: string;
    rule: string;
    startTime: string;
    status: string;
    testIds: number[];
    testsUpdatedAt: string;
    updatedAt: string;
}

export interface CreateHttpCheckBlackoutPeriod {
    createdAt: string;
    durationInMinutes: number;
    endDate: string;
    endTime: string;
    isRepeat: boolean;
    monthlyRepeatType: string;
    repeatType: string;
    startDate: string;
    startTime: string;
    timezone: string;
    updatedAt: string;
}

export interface CreateHttpCheckCheckConnection {
    downloadBandwidth?: number;
    latency?: number;
    packetLoss?: number;
    uploadBandwidth?: number;
}

export interface CreateHttpCheckHttpRequestHeader {
    userAgent: string;
}

export interface CreateHttpCheckNotification {
    call?: boolean;
    email?: boolean;
    escalations?: outputs.CreateHttpCheckNotificationEscalation[];
    muted?: boolean;
    notificationWindows?: outputs.CreateHttpCheckNotificationNotificationWindow[];
    notifyAfterFailureCount?: number;
    notifyOnLocationFailure?: boolean;
    notifyWhos?: outputs.CreateHttpCheckNotificationNotifyWho[];
    sms?: boolean;
}

export interface CreateHttpCheckNotificationEscalation {
    afterMinutes?: number;
    call?: boolean;
    email?: boolean;
    isRepeat: boolean;
    notificationWindows?: outputs.CreateHttpCheckNotificationEscalationNotificationWindow[];
    notifyWhos?: outputs.CreateHttpCheckNotificationEscalationNotifyWho[];
    sms?: boolean;
}

export interface CreateHttpCheckNotificationEscalationNotificationWindow {
    durationInMinutes?: number;
    endTime?: string;
    startTime?: string;
    timeZone?: string;
}

export interface CreateHttpCheckNotificationEscalationNotifyWho {
    call?: boolean;
    customUserEmail?: string;
    email?: boolean;
    id?: number;
    links: outputs.CreateHttpCheckNotificationEscalationNotifyWhoLink[];
    sms?: boolean;
    type?: string;
}

export interface CreateHttpCheckNotificationEscalationNotifyWhoLink {
    selfHtml: string;
}

export interface CreateHttpCheckNotificationNotificationWindow {
    durationInMinutes?: number;
    endTime?: string;
    startTime?: string;
    timeZone?: string;
}

export interface CreateHttpCheckNotificationNotifyWho {
    call?: boolean;
    customUserEmail?: string;
    email?: boolean;
    id: number;
    links: outputs.CreateHttpCheckNotificationNotifyWhoLink[];
    sms?: boolean;
    type?: string;
}

export interface CreateHttpCheckNotificationNotifyWhoLink {
    selfHtml: string;
}

export interface CreateHttpCheckSuccessCriteria {
    actionType?: string;
    comparisonString?: string;
    createdAt?: string;
    updatedAt?: string;
}

export interface CreateHttpCheckV2Test {
    active: boolean;
    automaticRetries: number;
    body?: string;
    createdAt: string;
    customProperties?: outputs.CreateHttpCheckV2TestCustomProperty[];
    frequency: number;
    headers?: outputs.CreateHttpCheckV2TestHeader[];
    id: number;
    locationIds: string[];
    name: string;
    requestMethod: string;
    schedulingStrategy?: string;
    type?: string;
    updatedAt: string;
    url: string;
    userAgent?: string;
    validations?: outputs.CreateHttpCheckV2TestValidation[];
    verifyCertificates: boolean;
}

export interface CreateHttpCheckV2TestCustomProperty {
    key?: string;
    value?: string;
}

export interface CreateHttpCheckV2TestHeader {
    name?: string;
    value?: string;
}

export interface CreateHttpCheckV2TestValidation {
    actual?: string;
    code?: string;
    comparator?: string;
    expected?: string;
    extractor?: string;
    name?: string;
    source?: string;
    type?: string;
    value?: string;
    variable?: string;
}

export interface CreateLocationV2Location {
    country: string;
    default: boolean;
    id: string;
    label: string;
    type: string;
}

export interface CreatePortCheckV2Test {
    active: boolean;
    automaticRetries: number;
    createdAt: string;
    customProperties?: outputs.CreatePortCheckV2TestCustomProperty[];
    frequency: number;
    host: string;
    id: number;
    locationIds: string[];
    name: string;
    port: number;
    protocol: string;
    schedulingStrategy?: string;
    type?: string;
    updatedAt: string;
    url?: string;
}

export interface CreatePortCheckV2TestCustomProperty {
    key?: string;
    value?: string;
}

export interface CreateVariableV2Variable {
    createdAt: string;
    description: string;
    id: number;
    name: string;
    secret: boolean;
    updatedAt: string;
    value: string;
}

export interface GetApiV2CheckTest {
    active: boolean;
    automaticRetries: number;
    createdAt: string;
    createdBy: string;
    customProperties?: outputs.GetApiV2CheckTestCustomProperty[];
    devices: outputs.GetApiV2CheckTestDevice[];
    frequency: number;
    id: number;
    lastRunAt: string;
    lastRunStatus: string;
    locationIds?: string[];
    name: string;
    requests: outputs.GetApiV2CheckTestRequest[];
    schedulingStrategy: string;
    type: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetApiV2CheckTestCustomProperty {
    key?: string;
    value?: string;
}

export interface GetApiV2CheckTestDevice {
    id: number;
    label: string;
    networkConnections: outputs.GetApiV2CheckTestDeviceNetworkConnection[];
    userAgent: string;
    viewportHeight: number;
    viewportWidth: number;
}

export interface GetApiV2CheckTestDeviceNetworkConnection {
    description: string;
    downloadBandwidth: number;
    latency: number;
    packetLoss: number;
    uploadBandwidth: number;
}

export interface GetApiV2CheckTestRequest {
    configurations: outputs.GetApiV2CheckTestRequestConfiguration[];
    setups: outputs.GetApiV2CheckTestRequestSetup[];
    validations: outputs.GetApiV2CheckTestRequestValidation[];
}

export interface GetApiV2CheckTestRequestConfiguration {
    body: string;
    headers: {[key: string]: string};
    name: string;
    requestMethod: string;
    url: string;
}

export interface GetApiV2CheckTestRequestSetup {
    code: string;
    extractor: string;
    name: string;
    source: string;
    type: string;
    value: string;
    variable: string;
}

export interface GetApiV2CheckTestRequestValidation {
    actual: string;
    code: string;
    comparator: string;
    expected: string;
    extractor: string;
    name: string;
    source: string;
    type: string;
    value: string;
    variable: string;
}

export interface GetBrowserV2CheckTest {
    active: boolean;
    advancedSettings: outputs.GetBrowserV2CheckTestAdvancedSetting[];
    automaticRetries: number;
    businessTransactions: outputs.GetBrowserV2CheckTestBusinessTransaction[];
    createdAt: string;
    createdBy: string;
    customProperties?: outputs.GetBrowserV2CheckTestCustomProperty[];
    devices: outputs.GetBrowserV2CheckTestDevice[];
    frequency: number;
    id: number;
    lastRunAt: string;
    lastRunStatus: string;
    locationIds: string[];
    name: string;
    schedulingStrategy: string;
    transactions: outputs.GetBrowserV2CheckTestTransaction[];
    type: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetBrowserV2CheckTestAdvancedSetting {
    authentications: outputs.GetBrowserV2CheckTestAdvancedSettingAuthentication[];
    collectInteractiveMetrics: boolean;
    cookies: outputs.GetBrowserV2CheckTestAdvancedSettingCookie[];
    headers: outputs.GetBrowserV2CheckTestAdvancedSettingHeader[];
    hostOverrides: outputs.GetBrowserV2CheckTestAdvancedSettingHostOverride[];
    userAgent: string;
    verifyCertificates: boolean;
}

export interface GetBrowserV2CheckTestAdvancedSettingAuthentication {
    password: string;
    username: string;
}

export interface GetBrowserV2CheckTestAdvancedSettingCookie {
    domain: string;
    key: string;
    path: string;
    value: string;
}

export interface GetBrowserV2CheckTestAdvancedSettingHeader {
    domain: string;
    name: string;
    value: string;
}

export interface GetBrowserV2CheckTestAdvancedSettingHostOverride {
    keepHostHeader: boolean;
    source: string;
    target: string;
}

export interface GetBrowserV2CheckTestBusinessTransaction {
    name: string;
    steps: outputs.GetBrowserV2CheckTestBusinessTransactionStep[];
}

export interface GetBrowserV2CheckTestBusinessTransactionStep {
    action: string;
    maxWaitTime: number;
    name: string;
    optionSelector: string;
    optionSelectorType: string;
    options: outputs.GetBrowserV2CheckTestBusinessTransactionStepOption[];
    selector: string;
    selectorType: string;
    type: string;
    url: string;
    value: string;
    variableName: string;
    waitForNav: boolean;
    waitForNavTimeout: number;
}

export interface GetBrowserV2CheckTestBusinessTransactionStepOption {
    url: string;
}

export interface GetBrowserV2CheckTestCustomProperty {
    key?: string;
    value?: string;
}

export interface GetBrowserV2CheckTestDevice {
    id: number;
    label: string;
    networkConnections: outputs.GetBrowserV2CheckTestDeviceNetworkConnection[];
    userAgent: string;
    viewportHeight: number;
    viewportWidth: number;
}

export interface GetBrowserV2CheckTestDeviceNetworkConnection {
    description: string;
    downloadBandwidth: number;
    latency: number;
    packetLoss: number;
    uploadBandwidth: number;
}

export interface GetBrowserV2CheckTestTransaction {
    name: string;
    steps: outputs.GetBrowserV2CheckTestTransactionStep[];
}

export interface GetBrowserV2CheckTestTransactionStep {
    action: string;
    duration: number;
    maxWaitTime: number;
    name: string;
    optionSelector: string;
    optionSelectorType: string;
    options: outputs.GetBrowserV2CheckTestTransactionStepOption[];
    selector: string;
    selectorType: string;
    type: string;
    url: string;
    value: string;
    variableName: string;
    waitForNav: boolean;
    waitForNavTimeout: number;
}

export interface GetBrowserV2CheckTestTransactionStepOption {
    url: string;
}

export interface GetCheckBlackoutPeriod {
    createdAt: string;
    durationInMinutes: number;
    endDate: string;
    endTime: string;
    isRepeat: boolean;
    monthlyRepeatType: string;
    repeatType: string;
    startDate: string;
    startTime: string;
    timezone: string;
    updatedAt: string;
}

export interface GetCheckBrowser {
    type?: string;
}

export interface GetCheckCheckConnection {
    downloadBandwidth: number;
    latency: number;
    packetLoss: number;
    uploadBandwidth: number;
}

export interface GetCheckCookie {
    domain?: string;
    key?: string;
    path?: string;
    value?: string;
}

export interface GetCheckDnsOverride {
    originalDomain?: string;
    originalHost?: string;
}

export interface GetCheckExcludedFile {
    exclusionType?: string;
    pattern?: string;
    presetName?: string;
}

export interface GetCheckHttpRequestHeader {
    userAgent: string;
}

export interface GetCheckIntegration {
    id: number;
    name: string;
}

export interface GetCheckJavascriptFile {
    id?: number;
    name?: string;
}

export interface GetCheckLink {
    lastRun: string;
    metrics: string;
    self: string;
    selfHtml: string;
}

export interface GetCheckLocation {
    id: number;
    name: string;
    regionCode: string;
    worldRegion: string;
}

export interface GetCheckNotification {
    call: boolean;
    email: boolean;
    escalations: outputs.GetCheckNotificationEscalation[];
    muted: boolean;
    notificationWindows: outputs.GetCheckNotificationNotificationWindow[];
    notifyAfterFailureCount: number;
    notifyOnLocationFailure: boolean;
    notifyWhos: outputs.GetCheckNotificationNotifyWho[];
    sms: boolean;
}

export interface GetCheckNotificationEscalation {
    afterMinutes: number;
    call: boolean;
    email: boolean;
    isRepeat: boolean;
    notificationWindows: outputs.GetCheckNotificationEscalationNotificationWindow[];
    notifyWhos: outputs.GetCheckNotificationEscalationNotifyWho[];
    sms: boolean;
}

export interface GetCheckNotificationEscalationNotificationWindow {
    durationInMinutes: number;
    endTime: string;
    startTime: string;
    timeZone: string;
}

export interface GetCheckNotificationEscalationNotifyWho {
    customUserEmail: string;
    id: number;
    links: outputs.GetCheckNotificationEscalationNotifyWhoLink[];
    type: string;
}

export interface GetCheckNotificationEscalationNotifyWhoLink {
    selfHtml: string;
}

export interface GetCheckNotificationNotificationWindow {
    durationInMinutes: number;
    endTime: string;
    startTime: string;
    timeZone: string;
}

export interface GetCheckNotificationNotifyWho {
    call: boolean;
    customUserEmail: string;
    email: boolean;
    id: number;
    links: outputs.GetCheckNotificationNotifyWhoLink[];
    sms: boolean;
    type: string;
}

export interface GetCheckNotificationNotifyWhoLink {
    selfHtml: string;
}

export interface GetCheckStatus {
    hasFailure: boolean;
    hasLocationFailure: boolean;
    lastAlertAt: string;
    lastCode: number;
    lastFailureAt: string;
    lastMessage: string;
    lastResponseTime: number;
    lastRunAt: string;
}

export interface GetCheckStep {
    how?: string;
    itemMethod?: string;
    name?: string;
    position?: number;
    value?: string;
    variableName?: string;
    what?: string;
}

export interface GetCheckSuccessCriteria {
    actionType: string;
    comparisonString: string;
    createdAt: string;
    updatedAt: string;
}

export interface GetCheckTag {
    id: number;
    name: string;
}

export interface GetCheckThresholdMonitor {
    comparisonType?: string;
    matcher?: string;
    metricName?: string;
    value?: number;
}

export interface GetCheckViewport {
    height?: number;
    width?: number;
}

export interface GetDevicesV2CheckDevice {
    id: number;
    label: string;
    networkConnections: outputs.GetDevicesV2CheckDeviceNetworkConnection[];
    userAgent: string;
    viewportHeight: number;
    viewportWidth: number;
}

export interface GetDevicesV2CheckDeviceNetworkConnection {
    description: string;
    downloadBandwidth: number;
    latency: number;
    packetLoss: number;
    uploadBandwidth: number;
}

export interface GetDowntimeConfigurationV2CheckDowntimeConfiguration {
    createdAt: string;
    description: string;
    endTime: string;
    id: number;
    name: string;
    rule: string;
    startTime: string;
    status: string;
    testCount: number;
    testsUpdatedAt: string;
    updatedAt: string;
}

export interface GetDowntimeConfigurationsV2CheckDowntimeConfiguration {
    createdAt: string;
    description: string;
    endTime: string;
    id: number;
    name: string;
    rule: string;
    startTime: string;
    status: string;
    testCount: number;
    testsUpdatedAt: string;
    updatedAt: string;
}

export interface GetHttpV2CheckTest {
    active: boolean;
    automaticRetries: number;
    body: string;
    createdAt: string;
    createdBy: string;
    customProperties?: outputs.GetHttpV2CheckTestCustomProperty[];
    frequency: number;
    headers?: outputs.GetHttpV2CheckTestHeader[];
    id: number;
    lastRunAt: string;
    lastRunStatus: string;
    locationIds: string[];
    name: string;
    requestMethod: string;
    schedulingStrategy: string;
    type: string;
    updatedAt: string;
    updatedBy: string;
    url: string;
    userAgent: string;
    validations?: outputs.GetHttpV2CheckTestValidation[];
    verifyCertificates: boolean;
}

export interface GetHttpV2CheckTestCustomProperty {
    key?: string;
    value?: string;
}

export interface GetHttpV2CheckTestHeader {
    name?: string;
    value?: string;
}

export interface GetHttpV2CheckTestValidation {
    actual?: string;
    code?: string;
    comparator?: string;
    expected?: string;
    extractor?: string;
    name?: string;
    source?: string;
    type?: string;
    value?: string;
    variable?: string;
}

export interface GetLocationV2CheckLocation {
    country: string;
    default: boolean;
    id: string;
    label: string;
    type: string;
}

export interface GetLocationV2CheckMeta {
    activeTestIds: number[];
    pausedTestIds: number[];
}

export interface GetLocationsV2CheckLocation {
    country: string;
    default: boolean;
    id: string;
    label: string;
    type: string;
}

export interface GetPortV2CheckTest {
    active: boolean;
    automaticRetries: number;
    createdAt: string;
    createdBy: string;
    customProperties?: outputs.GetPortV2CheckTestCustomProperty[];
    frequency: number;
    host: string;
    id: number;
    lastRunAt: string;
    lastRunStatus: string;
    locationIds?: string[];
    name: string;
    port: number;
    protocol: string;
    schedulingStrategy: string;
    type: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetPortV2CheckTestCustomProperty {
    key?: string;
    value?: string;
}

export interface GetVariableV2CheckVariable {
    createdAt: string;
    description: string;
    id: number;
    name: string;
    secret: boolean;
    updatedAt: string;
    value: string;
}

export interface GetVariablesV2CheckVariable {
    createdAt: string;
    description: string;
    id: number;
    name: string;
    secret: boolean;
    updatedAt: string;
    value: string;
}

