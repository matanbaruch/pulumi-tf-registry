// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CreateHttpCheck extends pulumi.CustomResource {
    /**
     * Get an existing CreateHttpCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CreateHttpCheckState, opts?: pulumi.CustomResourceOptions): CreateHttpCheck {
        return new CreateHttpCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'synthetics:index/createHttpCheck:CreateHttpCheck';

    /**
     * Returns true if the given object is an instance of CreateHttpCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CreateHttpCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CreateHttpCheck.__pulumiType;
    }

    public readonly autoRetry!: pulumi.Output<boolean | undefined>;
    public readonly blackoutPeriods!: pulumi.Output<outputs.CreateHttpCheckBlackoutPeriod[] | undefined>;
    public readonly checkConnections!: pulumi.Output<outputs.CreateHttpCheckCheckConnection[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly frequency!: pulumi.Output<number>;
    public readonly httpMethod!: pulumi.Output<string | undefined>;
    public readonly httpRequestBody!: pulumi.Output<string | undefined>;
    public readonly httpRequestHeaders!: pulumi.Output<outputs.CreateHttpCheckHttpRequestHeader[] | undefined>;
    public readonly integrations!: pulumi.Output<number[] | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly locations!: pulumi.Output<number[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifications!: pulumi.Output<outputs.CreateHttpCheckNotification[] | undefined>;
    public readonly roundRobin!: pulumi.Output<boolean | undefined>;
    public readonly successCriterias!: pulumi.Output<outputs.CreateHttpCheckSuccessCriteria[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a CreateHttpCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CreateHttpCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CreateHttpCheckArgs | CreateHttpCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CreateHttpCheckState | undefined;
            resourceInputs["autoRetry"] = state ? state.autoRetry : undefined;
            resourceInputs["blackoutPeriods"] = state ? state.blackoutPeriods : undefined;
            resourceInputs["checkConnections"] = state ? state.checkConnections : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["httpRequestBody"] = state ? state.httpRequestBody : undefined;
            resourceInputs["httpRequestHeaders"] = state ? state.httpRequestHeaders : undefined;
            resourceInputs["integrations"] = state ? state.integrations : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["roundRobin"] = state ? state.roundRobin : undefined;
            resourceInputs["successCriterias"] = state ? state.successCriterias : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as CreateHttpCheckArgs | undefined;
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["autoRetry"] = args ? args.autoRetry : undefined;
            resourceInputs["blackoutPeriods"] = args ? args.blackoutPeriods : undefined;
            resourceInputs["checkConnections"] = args ? args.checkConnections : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["httpRequestBody"] = args ? args.httpRequestBody : undefined;
            resourceInputs["httpRequestHeaders"] = args ? args.httpRequestHeaders : undefined;
            resourceInputs["integrations"] = args ? args.integrations : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["roundRobin"] = args ? args.roundRobin : undefined;
            resourceInputs["successCriterias"] = args ? args.successCriterias : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CreateHttpCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CreateHttpCheck resources.
 */
export interface CreateHttpCheckState {
    autoRetry?: pulumi.Input<boolean>;
    blackoutPeriods?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckBlackoutPeriod>[]>;
    checkConnections?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckCheckConnection>[]>;
    enabled?: pulumi.Input<boolean>;
    frequency?: pulumi.Input<number>;
    httpMethod?: pulumi.Input<string>;
    httpRequestBody?: pulumi.Input<string>;
    httpRequestHeaders?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckHttpRequestHeader>[]>;
    integrations?: pulumi.Input<pulumi.Input<number>[]>;
    lastUpdated?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckNotification>[]>;
    roundRobin?: pulumi.Input<boolean>;
    successCriterias?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckSuccessCriteria>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CreateHttpCheck resource.
 */
export interface CreateHttpCheckArgs {
    autoRetry?: pulumi.Input<boolean>;
    blackoutPeriods?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckBlackoutPeriod>[]>;
    checkConnections?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckCheckConnection>[]>;
    enabled?: pulumi.Input<boolean>;
    frequency: pulumi.Input<number>;
    httpMethod?: pulumi.Input<string>;
    httpRequestBody?: pulumi.Input<string>;
    httpRequestHeaders?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckHttpRequestHeader>[]>;
    integrations?: pulumi.Input<pulumi.Input<number>[]>;
    lastUpdated?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckNotification>[]>;
    roundRobin?: pulumi.Input<boolean>;
    successCriterias?: pulumi.Input<pulumi.Input<inputs.CreateHttpCheckSuccessCriteria>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    url: pulumi.Input<string>;
}
