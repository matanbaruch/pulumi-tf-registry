// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationFlowPolicyArgs, ApplicationFlowPolicyState } from "./applicationFlowPolicy";
export type ApplicationFlowPolicy = import("./applicationFlowPolicy").ApplicationFlowPolicy;
export const ApplicationFlowPolicy: typeof import("./applicationFlowPolicy").ApplicationFlowPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationFlowPolicy"], () => require("./applicationFlowPolicy"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationsArgs, GetApplicationsResult, GetApplicationsOutputArgs } from "./getApplications";
export const getApplications: typeof import("./getApplications").getApplications = null as any;
export const getApplicationsOutput: typeof import("./getApplications").getApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getApplications","getApplicationsOutput"], () => require("./getApplications"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "davinci:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "davinci:index/applicationFlowPolicy:ApplicationFlowPolicy":
                return new ApplicationFlowPolicy(name, <any>undefined, { urn })
            case "davinci:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "davinci:index/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "davinci:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("davinci", "index/application", _module)
pulumi.runtime.registerResourceModule("davinci", "index/applicationFlowPolicy", _module)
pulumi.runtime.registerResourceModule("davinci", "index/connection", _module)
pulumi.runtime.registerResourceModule("davinci", "index/flow", _module)
pulumi.runtime.registerResourceModule("davinci", "index/variable", _module)
pulumi.runtime.registerResourcePackage("davinci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:davinci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
