// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Variable extends pulumi.CustomResource {
    /**
     * Get an existing Variable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VariableState, opts?: pulumi.CustomResourceOptions): Variable {
        return new Variable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'davinci:index/variable:Variable';

    /**
     * Returns true if the given object is an instance of Variable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Variable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Variable.__pulumiType;
    }

    /**
     * A string that specifies the context of the variable. Options are `company`, `flow`, `flowInstance`, `user`. This field
     * is immutable and will trigger a replace plan if changed.
     */
    public readonly context!: pulumi.Output<string>;
    /**
     * A string that specifies the description of the variable.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A boolean that specifies whether the variable's `value` must be kept as an empty string. Conflicts with `value`.
     */
    public readonly emptyValue!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the PingOne environment to manage the DaVinci variable in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A string that specifies the ID of the flow to which the variable is assigned. This field is required when the `context`
     * field is set to `flow`. Must be a valid PingOne resource ID. This field is immutable and will trigger a replace plan if
     * changed.
     */
    public readonly flowId!: pulumi.Output<string | undefined>;
    /**
     * An integer that specifies the maximum value of the variable, if the `type` parameter is set as `number`. Defaults to
     * `2000`.
     */
    public readonly max!: pulumi.Output<number>;
    /**
     * An integer that specifies the minimum value of the variable, if the `type` parameter is set as `number`. Defaults to
     * `0`.
     */
    public readonly min!: pulumi.Output<number>;
    /**
     * A boolean that specifies whether the variable is mutable. If `true`, the variable can be modified by the flow. If
     * `false`, the variable is read-only and cannot be modified by the flow. Defaults to `true`.
     */
    public readonly mutable!: pulumi.Output<boolean>;
    /**
     * A string that specifies the name of the variable. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A string that specifies the variable's data type. Options are `boolean`, `number`, `object`, `secret`, `string`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * A string that specifies the default value of the variable, the type will be inferred from the value specified in the
     * `type` parameter. If left blank or omitted, the resource will not track the variable's value in state. If the variable
     * value should be tracked in state as an empty string, use the `empty_value` parameter. Note that if the `type` is
     * `secret`, the provider will not be able to remediate the value's configuration drift in the DaVinci service. Conflicts
     * with `empty_value`.
     */
    public readonly value!: pulumi.Output<string | undefined>;
    /**
     * A string that specifies the value of the variable in the service, the type will be inferred from the value specified in
     * the `type` parameter.
     */
    public /*out*/ readonly valueService!: pulumi.Output<string>;

    /**
     * Create a Variable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VariableArgs | VariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VariableState | undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emptyValue"] = state ? state.emptyValue : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["flowId"] = state ? state.flowId : undefined;
            resourceInputs["max"] = state ? state.max : undefined;
            resourceInputs["min"] = state ? state.min : undefined;
            resourceInputs["mutable"] = state ? state.mutable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["valueService"] = state ? state.valueService : undefined;
        } else {
            const args = argsOrState as VariableArgs | undefined;
            if ((!args || args.context === undefined) && !opts.urn) {
                throw new Error("Missing required property 'context'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emptyValue"] = args ? args.emptyValue : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["flowId"] = args ? args.flowId : undefined;
            resourceInputs["max"] = args ? args.max : undefined;
            resourceInputs["min"] = args ? args.min : undefined;
            resourceInputs["mutable"] = args ? args.mutable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["valueService"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value", "valueService"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Variable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Variable resources.
 */
export interface VariableState {
    /**
     * A string that specifies the context of the variable. Options are `company`, `flow`, `flowInstance`, `user`. This field
     * is immutable and will trigger a replace plan if changed.
     */
    context?: pulumi.Input<string>;
    /**
     * A string that specifies the description of the variable.
     */
    description?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the variable's `value` must be kept as an empty string. Conflicts with `value`.
     */
    emptyValue?: pulumi.Input<boolean>;
    /**
     * The ID of the PingOne environment to manage the DaVinci variable in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A string that specifies the ID of the flow to which the variable is assigned. This field is required when the `context`
     * field is set to `flow`. Must be a valid PingOne resource ID. This field is immutable and will trigger a replace plan if
     * changed.
     */
    flowId?: pulumi.Input<string>;
    /**
     * An integer that specifies the maximum value of the variable, if the `type` parameter is set as `number`. Defaults to
     * `2000`.
     */
    max?: pulumi.Input<number>;
    /**
     * An integer that specifies the minimum value of the variable, if the `type` parameter is set as `number`. Defaults to
     * `0`.
     */
    min?: pulumi.Input<number>;
    /**
     * A boolean that specifies whether the variable is mutable. If `true`, the variable can be modified by the flow. If
     * `false`, the variable is read-only and cannot be modified by the flow. Defaults to `true`.
     */
    mutable?: pulumi.Input<boolean>;
    /**
     * A string that specifies the name of the variable. This field is immutable and will trigger a replace plan if changed.
     */
    name?: pulumi.Input<string>;
    /**
     * A string that specifies the variable's data type. Options are `boolean`, `number`, `object`, `secret`, `string`.
     */
    type?: pulumi.Input<string>;
    /**
     * A string that specifies the default value of the variable, the type will be inferred from the value specified in the
     * `type` parameter. If left blank or omitted, the resource will not track the variable's value in state. If the variable
     * value should be tracked in state as an empty string, use the `empty_value` parameter. Note that if the `type` is
     * `secret`, the provider will not be able to remediate the value's configuration drift in the DaVinci service. Conflicts
     * with `empty_value`.
     */
    value?: pulumi.Input<string>;
    /**
     * A string that specifies the value of the variable in the service, the type will be inferred from the value specified in
     * the `type` parameter.
     */
    valueService?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Variable resource.
 */
export interface VariableArgs {
    /**
     * A string that specifies the context of the variable. Options are `company`, `flow`, `flowInstance`, `user`. This field
     * is immutable and will trigger a replace plan if changed.
     */
    context: pulumi.Input<string>;
    /**
     * A string that specifies the description of the variable.
     */
    description?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the variable's `value` must be kept as an empty string. Conflicts with `value`.
     */
    emptyValue?: pulumi.Input<boolean>;
    /**
     * The ID of the PingOne environment to manage the DaVinci variable in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A string that specifies the ID of the flow to which the variable is assigned. This field is required when the `context`
     * field is set to `flow`. Must be a valid PingOne resource ID. This field is immutable and will trigger a replace plan if
     * changed.
     */
    flowId?: pulumi.Input<string>;
    /**
     * An integer that specifies the maximum value of the variable, if the `type` parameter is set as `number`. Defaults to
     * `2000`.
     */
    max?: pulumi.Input<number>;
    /**
     * An integer that specifies the minimum value of the variable, if the `type` parameter is set as `number`. Defaults to
     * `0`.
     */
    min?: pulumi.Input<number>;
    /**
     * A boolean that specifies whether the variable is mutable. If `true`, the variable can be modified by the flow. If
     * `false`, the variable is read-only and cannot be modified by the flow. Defaults to `true`.
     */
    mutable?: pulumi.Input<boolean>;
    /**
     * A string that specifies the name of the variable. This field is immutable and will trigger a replace plan if changed.
     */
    name?: pulumi.Input<string>;
    /**
     * A string that specifies the variable's data type. Options are `boolean`, `number`, `object`, `secret`, `string`.
     */
    type: pulumi.Input<string>;
    /**
     * A string that specifies the default value of the variable, the type will be inferred from the value specified in the
     * `type` parameter. If left blank or omitted, the resource will not track the variable's value in state. If the variable
     * value should be tracked in state as an empty string, use the `empty_value` parameter. Note that if the `type` is
     * `secret`, the provider will not be able to remediate the value's configuration drift in the DaVinci service. Conflicts
     * with `empty_value`.
     */
    value?: pulumi.Input<string>;
}
