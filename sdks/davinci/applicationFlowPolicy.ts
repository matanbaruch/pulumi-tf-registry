// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationFlowPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationFlowPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationFlowPolicyState, opts?: pulumi.CustomResourceOptions): ApplicationFlowPolicy {
        return new ApplicationFlowPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'davinci:index/applicationFlowPolicy:ApplicationFlowPolicy';

    /**
     * Returns true if the given object is an instance of ApplicationFlowPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationFlowPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationFlowPolicy.__pulumiType;
    }

    /**
     * The ID of the DaVinci application to manage the flow policy for. Must be a valid DaVinci resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Resource creation date as epoch.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<number>;
    /**
     * The ID of the PingOne environment to manage the flow policy in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A string that specifies the name of the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set of weighted flows that this application will use.
     */
    public readonly policyFlows!: pulumi.Output<outputs.ApplicationFlowPolicyPolicyFlow[]>;
    /**
     * A boolan that specifies whether the policy should be enabled. Valid values are: `enabled`, `disabled`. Defaults to
     * `enabled`.
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationFlowPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationFlowPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationFlowPolicyArgs | ApplicationFlowPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationFlowPolicyState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyFlows"] = state ? state.policyFlows : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ApplicationFlowPolicyArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.policyFlows === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyFlows'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyFlows"] = args ? args.policyFlows : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationFlowPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationFlowPolicy resources.
 */
export interface ApplicationFlowPolicyState {
    /**
     * The ID of the DaVinci application to manage the flow policy for. Must be a valid DaVinci resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Resource creation date as epoch.
     */
    createdDate?: pulumi.Input<number>;
    /**
     * The ID of the PingOne environment to manage the flow policy in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A string that specifies the name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Set of weighted flows that this application will use.
     */
    policyFlows?: pulumi.Input<pulumi.Input<inputs.ApplicationFlowPolicyPolicyFlow>[]>;
    /**
     * A boolan that specifies whether the policy should be enabled. Valid values are: `enabled`, `disabled`. Defaults to
     * `enabled`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationFlowPolicy resource.
 */
export interface ApplicationFlowPolicyArgs {
    /**
     * The ID of the DaVinci application to manage the flow policy for. Must be a valid DaVinci resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The ID of the PingOne environment to manage the flow policy in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A string that specifies the name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Set of weighted flows that this application will use.
     */
    policyFlows: pulumi.Input<pulumi.Input<inputs.ApplicationFlowPolicyPolicyFlow>[]>;
    /**
     * A boolan that specifies whether the policy should be enabled. Valid values are: `enabled`, `disabled`. Defaults to
     * `enabled`.
     */
    status?: pulumi.Input<string>;
}
