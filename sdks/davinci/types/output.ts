// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationFlowPolicyPolicyFlow {
    /**
     * A list of IP CIDR entries that are allowed use of the application policy flow.
     */
    allowedIpLists?: string[];
    /**
     * Identifier of the flow that this policy will use.
     */
    flowId: string;
    /**
     * A list of node ids used by analytics for tracking user interaction.
     */
    successNodes?: string[];
    /**
     * Version of the flow that this policy will use. Use `-1` for the latest version.
     */
    versionId: number;
    /**
     * If multiple flows are specified, the weight determines the probability of the flow being used. The weights across all policy flows must add up to `100`.
     */
    weight?: number;
}

export interface ApplicationOauth {
    /**
     * A boolean that specifies whether OIDC/OAuth 2.0 settings are enabled for the application. Defaults to `true`.
     */
    enabled?: boolean;
    /**
     * A single list item specifying OIDC/OAuth 2.0 configuration values.
     */
    values?: outputs.ApplicationOauthValues;
}

export interface ApplicationOauthValues {
    /**
     * Allowed grants for the application. Available grants are `authorizationCode`, `clientCredentials`, `implicit`.
     */
    allowedGrants?: string[];
    /**
     * Allowed scopes for the application. Available scopes are `openid`, `profile`, `flow_analytics`.
     */
    allowedScopes?: string[];
    /**
     * The client secret for the OIDC application.
     */
    clientSecret: string;
    /**
     * A boolean that enables/disables the OAuth 2.0 configuration for the application. Defaults to `true`.
     */
    enabled?: boolean;
    /**
     * A boolean that specifies whether to enforce receiving signed requests.
     */
    enforceSignedRequestOpenid?: boolean;
    /**
     * Logout URLs for the application.
     */
    logoutUris?: string[];
    /**
     * Redirect URLs for the application.
     */
    redirectUris?: string[];
    /**
     * A string that specifies service provider (SP) JWKS keys to verify the authorization request signature.
     */
    spJwksOpenid?: string;
    /**
     * A string that specifies a service provider (SP) JWKS URL.
     */
    spJwksUrl?: string;
}

export interface ApplicationPolicy {
    /**
     * Creation epoch of policy.
     */
    createdDate: number;
    /**
     * Policy friendly name
     */
    name?: string;
    /**
     * Set of weighted flows that this application will use
     */
    policyFlows?: outputs.ApplicationPolicyPolicyFlow[];
    /**
     * Generated identifier of a created policy.
     */
    policyId: string;
    /**
     * Policy status. Valid values are: enabled, disabled Defaults to `enabled`.
     */
    status?: string;
}

export interface ApplicationPolicyPolicyFlow {
    /**
     * Identifier of the flow that this policy will use.
     */
    flowId?: string;
    /**
     * List of node ids used by analytics for tracking user interaction.
     */
    successNodes?: string[];
    /**
     * Version of the flow that this policy will use. Use -1 for latest
     */
    versionId?: number;
    /**
     * If multiple flows are specified, the weight determines the probability of the flow being used. This must add up to 100
     */
    weight?: number;
}

export interface ApplicationSaml {
    /**
     * SAML configuration
     */
    values?: outputs.ApplicationSamlValues;
}

export interface ApplicationSamlValues {
    /**
     * Field: 'Audience' in UI. This is now deprecated in the service and will be removed from the provider in the next major release.
     */
    audience?: string;
    /**
     * Set to true if using saml block. This is now deprecated in the service and will be removed from the provider in the next major release.
     */
    enabled?: boolean;
    /**
     * Field: 'Enforce Receiving Signed Requests' in UI. This is now deprecated in the service and will be removed from the provider in the next major release.
     */
    enforceSignedRequest?: boolean;
    /**
     * The redirect URI for the SAML application. This is now deprecated in the service and will be removed from the provider in the next major release.
     */
    redirectUri?: string;
    /**
     * This is now deprecated in the service and will be removed from the provider in the next major release.
     */
    spCert?: string;
}

export interface ApplicationUserPortal {
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    addAuthMethodTitle?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    credPageSubtitle?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    credPageTitle?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    flowTimeoutSeconds?: number;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    nameAuthMethodTitle?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    nameConfirmBtnText?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    removeAuthMethodTitle?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    removeBodyMessage?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    removeCancelBtnText?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    removeConfirmBtnText?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    removeMessage?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release. Defaults to `false`.
     *
     * @deprecated Deprecated
     */
    showLogoutButton?: boolean;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release. Defaults to `false`.
     *
     * @deprecated Deprecated
     */
    showMfaButton?: boolean;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release. Defaults to `false`.
     *
     * @deprecated Deprecated
     */
    showUserInfo?: boolean;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release. Defaults to `false`.
     *
     * @deprecated Deprecated
     */
    showVariables?: boolean;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    upTitle?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    updateBodyMessage?: string;
    /**
     * **Deprecation notice** This is now deprecated in the service and will be removed from the provider in the next major release.
     *
     * @deprecated Deprecated
     */
    updateMessage?: string;
}

export interface ConnectionProperty {
    /**
     * The name of the property.
     */
    name: string;
    /**
     * Type of the property. This is used to cast the value to the correct type. Must be: `string`, `number`, `boolean` or `json`. Defaults to `string`.
     */
    type?: string;
    /**
     * The value of the property as string.  Use in conjunction with `type` to cast the value to the correct type.  For example, a number value should be entered as a string and `type` set to `number`.  JSON in string form should be used for complex types.
     */
    value: string;
}

export interface FlowConnectionLink {
    /**
     * A string that specifies the connector ID that will be applied when flow is imported.
     */
    id: string;
    /**
     * The connector name.  If `replace_import_connection_id` is also specified, this value is used when the flow is imported.  If `replace_import_connection_id` is not specified, the name must match that of the connector in the import file, so the connector ID in the `id` parameter can be updated.
     */
    name: string;
    /**
     * Connection ID of the connector in the import to replace with the connector described in `id` and `name` parameters.  This can be found in the source system in the "Connectors" menu, but is also at the following path in the JSON file: `[enabledGraphData|graphData].elements.nodes.data.connectionId`.
     */
    replaceImportConnectionId?: string;
}

export interface FlowFlowVariable {
    /**
     * The variable context.  Should always return `flow`.
     */
    context: string;
    /**
     * The flow ID that the variable belongs to, which should match the ID of this resource.
     */
    flowId: string;
    /**
     * The DaVinci internal ID of the variable.
     */
    id: string;
    /**
     * The user friendly name of the variable in the UI.
     */
    name: string;
    /**
     * The variable's data type.  Expected to be one of `string`, `number`, `boolean`, `object`.
     */
    type: string;
}

export interface FlowSubflowLink {
    /**
     * A string that specifies the subflow ID that will be applied when flow is imported.
     */
    id: string;
    /**
     * The subflow name.  If `replace_import_subflow_id` is also specified, this value is used when the flow is imported.  If `replace_import_subflow_id` is not specified, the name must match that of the connector in the import file, so the connector ID in the `id` parameter can be updated.
     */
    name: string;
    /**
     * Subflow ID of the subflow in the import to replace with the subflow described in `id` and `name` parameters.  This can be found in the source system in the "Connectors" menu, but is also at the following path in the JSON file: `[enabledGraphData|graphData].elements.nodes.data.connectionId`.
     */
    replaceImportSubflowId?: string;
}

export interface GetApplicationOauth {
    enabled: boolean;
    values: outputs.GetApplicationOauthValue[];
}

export interface GetApplicationOauthValue {
    allowedGrants: string[];
    allowedScopes: string[];
    clientSecret: string;
    enabled: boolean;
    enforceSignedRequestOpenid: boolean;
    logoutUris: string[];
    redirectUris: string[];
    spJwksOpenid: string;
    spJwksUrl: string;
}

export interface GetApplicationPolicy {
    createdDate: number;
    name: string;
    policyFlows: outputs.GetApplicationPolicyPolicyFlow[];
    policyId: string;
    status: string;
}

export interface GetApplicationPolicyPolicyFlow {
    flowId: string;
    successNodes: string[];
    versionId: number;
    weight: number;
}

export interface GetApplicationSaml {
    values: outputs.GetApplicationSamlValue[];
}

export interface GetApplicationSamlValue {
    audience: string;
    enabled: boolean;
    enforceSignedRequest: boolean;
    redirectUri: string;
    spCert: string;
}

export interface GetApplicationUserPortal {
    addAuthMethodTitle: string;
    credPageSubtitle: string;
    credPageTitle: string;
    flowTimeoutSeconds: number;
    nameAuthMethodTitle: string;
    nameConfirmBtnText: string;
    removeAuthMethodTitle: string;
    removeBodyMessage: string;
    removeCancelBtnText: string;
    removeConfirmBtnText: string;
    removeMessage: string;
    showLogoutButton: boolean;
    showMfaButton: boolean;
    showUserInfo: boolean;
    showVariables: boolean;
    upTitle: string;
    updateBodyMessage: string;
    updateMessage: string;
}

export interface GetApplicationsApplication {
    apiKeyEnabled: boolean;
    apiKeys: {[key: string]: string};
    createdDate: number;
    customerId: string;
    environmentId: string;
    id: string;
    metadata: {[key: string]: string};
    name: string;
    oauths: outputs.GetApplicationsApplicationOauth[];
    policies: outputs.GetApplicationsApplicationPolicy[];
    samls: outputs.GetApplicationsApplicationSaml[];
    userPools: {[key: string]: string};
    userPortals: outputs.GetApplicationsApplicationUserPortal[];
}

export interface GetApplicationsApplicationOauth {
    enabled: boolean;
    values: outputs.GetApplicationsApplicationOauthValue[];
}

export interface GetApplicationsApplicationOauthValue {
    allowedGrants: string[];
    allowedScopes: string[];
    clientSecret: string;
    enabled: boolean;
    enforceSignedRequestOpenid: boolean;
    logoutUris: string[];
    redirectUris: string[];
    spJwksOpenid: string;
    spJwksUrl: string;
}

export interface GetApplicationsApplicationPolicy {
    createdDate: number;
    name: string;
    policyFlows: outputs.GetApplicationsApplicationPolicyPolicyFlow[];
    policyId: string;
    status: string;
}

export interface GetApplicationsApplicationPolicyPolicyFlow {
    flowId: string;
    successNodes: string[];
    versionId: number;
    weight: number;
}

export interface GetApplicationsApplicationSaml {
    values: outputs.GetApplicationsApplicationSamlValue[];
}

export interface GetApplicationsApplicationSamlValue {
    audience: string;
    enabled: boolean;
    enforceSignedRequest: boolean;
    redirectUri: string;
    spCert: string;
}

export interface GetApplicationsApplicationUserPortal {
    addAuthMethodTitle: string;
    credPageSubtitle: string;
    credPageTitle: string;
    flowTimeoutSeconds: number;
    nameAuthMethodTitle: string;
    nameConfirmBtnText: string;
    removeAuthMethodTitle: string;
    removeBodyMessage: string;
    removeCancelBtnText: string;
    removeConfirmBtnText: string;
    removeMessage: string;
    showLogoutButton: boolean;
    showMfaButton: boolean;
    showUserInfo: boolean;
    showVariables: boolean;
    upTitle: string;
    updateBodyMessage: string;
    updateMessage: string;
}

export interface GetApplicationsTimeouts {
    read?: string;
}

export interface GetConnectionProperty {
    name: string;
    type: string;
    value: string;
}

export interface GetConnectionTimeouts {
    read?: string;
}

export interface GetConnectionsConnection {
    companyId: string;
    connectorId: string;
    createdDate: number;
    customerId: string;
    id: string;
    name: string;
    properties: outputs.GetConnectionsConnectionProperty[];
}

export interface GetConnectionsConnectionProperty {
    name: string;
    type: string;
    value: string;
}

export interface GetConnectionsTimeouts {
    read?: string;
}

