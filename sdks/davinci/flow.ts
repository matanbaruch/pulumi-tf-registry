// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Flow extends pulumi.CustomResource {
    /**
     * Get an existing Flow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowState, opts?: pulumi.CustomResourceOptions): Flow {
        return new Flow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'davinci:index/flow:Flow';

    /**
     * Returns true if the given object is an instance of Flow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flow.__pulumiType;
    }

    /**
     * Mappings to connections that this flow depends on. Connections should be managed (with the `davinci.Connection`
     * resource) or retrieved (with the `davinci.Connection` data source) to provide the mappings needed for this configuration
     * block.
     */
    public readonly connectionLinks!: pulumi.Output<outputs.FlowConnectionLink[] | undefined>;
    /**
     * **Deprecation notice:** This attribute is deprecated and will be removed in a future release. Flows are automatically
     * deployed on import. A boolean that specifies whether to deploy the flow after import. Defaults to `true`.
     *
     * @deprecated Deprecated
     */
    public readonly deploy!: pulumi.Output<boolean>;
    /**
     * A string that specifies a description of the flow. If the field is left undefined, the description from the flow export
     * will be used. If this field is left undefined and the flow export does not contain a description, the service will
     * define a description on import.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ID of the PingOne environment to import the DaVinci flow to. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The parsed configuration of the DaVinci Flow import JSON. Drift is calculated based on this attribute.
     */
    public /*out*/ readonly flowConfigurationJson!: pulumi.Output<string>;
    /**
     * The DaVinci Flow export in raw JSON format following successful import, including target environment metadata.
     */
    public /*out*/ readonly flowExportJson!: pulumi.Output<string>;
    /**
     * The DaVinci Flow to import, in raw JSON format. Should be a JSON file of a single flow (without subflows) that has been
     * exported from a source DaVinci environment. Must be a valid JSON string.
     */
    public readonly flowJson!: pulumi.Output<string>;
    /**
     * List of Flow variables that will be updated in the DaVinci instance. These are variable resources that are created and
     * managed by the Flow resource, where variables are embedded in the `flow_json` DaVinci export file.
     */
    public /*out*/ readonly flowVariables!: pulumi.Output<outputs.FlowFlowVariable[]>;
    /**
     * A string that identifies the flow name after import. If the field is left blank, a flow name will be derived by the
     * service from the name in the import JSON (the `flow_json` parameter).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Child flows of this resource, where the `flow_json` contains reference to subflows. If the `flow_json` contains
     * subflows, this one `subflow_link` block is required per contained subflow.
     */
    public readonly subflowLinks!: pulumi.Output<outputs.FlowSubflowLink[] | undefined>;

    /**
     * Create a Flow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowArgs | FlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowState | undefined;
            resourceInputs["connectionLinks"] = state ? state.connectionLinks : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["flowConfigurationJson"] = state ? state.flowConfigurationJson : undefined;
            resourceInputs["flowExportJson"] = state ? state.flowExportJson : undefined;
            resourceInputs["flowJson"] = state ? state.flowJson : undefined;
            resourceInputs["flowVariables"] = state ? state.flowVariables : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subflowLinks"] = state ? state.subflowLinks : undefined;
        } else {
            const args = argsOrState as FlowArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.flowJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowJson'");
            }
            resourceInputs["connectionLinks"] = args ? args.connectionLinks : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["flowJson"] = args?.flowJson ? pulumi.secret(args.flowJson) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subflowLinks"] = args ? args.subflowLinks : undefined;
            resourceInputs["flowConfigurationJson"] = undefined /*out*/;
            resourceInputs["flowExportJson"] = undefined /*out*/;
            resourceInputs["flowVariables"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["flowConfigurationJson", "flowExportJson", "flowJson"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Flow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Flow resources.
 */
export interface FlowState {
    /**
     * Mappings to connections that this flow depends on. Connections should be managed (with the `davinci.Connection`
     * resource) or retrieved (with the `davinci.Connection` data source) to provide the mappings needed for this configuration
     * block.
     */
    connectionLinks?: pulumi.Input<pulumi.Input<inputs.FlowConnectionLink>[]>;
    /**
     * **Deprecation notice:** This attribute is deprecated and will be removed in a future release. Flows are automatically
     * deployed on import. A boolean that specifies whether to deploy the flow after import. Defaults to `true`.
     *
     * @deprecated Deprecated
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * A string that specifies a description of the flow. If the field is left undefined, the description from the flow export
     * will be used. If this field is left undefined and the flow export does not contain a description, the service will
     * define a description on import.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the PingOne environment to import the DaVinci flow to. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The parsed configuration of the DaVinci Flow import JSON. Drift is calculated based on this attribute.
     */
    flowConfigurationJson?: pulumi.Input<string>;
    /**
     * The DaVinci Flow export in raw JSON format following successful import, including target environment metadata.
     */
    flowExportJson?: pulumi.Input<string>;
    /**
     * The DaVinci Flow to import, in raw JSON format. Should be a JSON file of a single flow (without subflows) that has been
     * exported from a source DaVinci environment. Must be a valid JSON string.
     */
    flowJson?: pulumi.Input<string>;
    /**
     * List of Flow variables that will be updated in the DaVinci instance. These are variable resources that are created and
     * managed by the Flow resource, where variables are embedded in the `flow_json` DaVinci export file.
     */
    flowVariables?: pulumi.Input<pulumi.Input<inputs.FlowFlowVariable>[]>;
    /**
     * A string that identifies the flow name after import. If the field is left blank, a flow name will be derived by the
     * service from the name in the import JSON (the `flow_json` parameter).
     */
    name?: pulumi.Input<string>;
    /**
     * Child flows of this resource, where the `flow_json` contains reference to subflows. If the `flow_json` contains
     * subflows, this one `subflow_link` block is required per contained subflow.
     */
    subflowLinks?: pulumi.Input<pulumi.Input<inputs.FlowSubflowLink>[]>;
}

/**
 * The set of arguments for constructing a Flow resource.
 */
export interface FlowArgs {
    /**
     * Mappings to connections that this flow depends on. Connections should be managed (with the `davinci.Connection`
     * resource) or retrieved (with the `davinci.Connection` data source) to provide the mappings needed for this configuration
     * block.
     */
    connectionLinks?: pulumi.Input<pulumi.Input<inputs.FlowConnectionLink>[]>;
    /**
     * **Deprecation notice:** This attribute is deprecated and will be removed in a future release. Flows are automatically
     * deployed on import. A boolean that specifies whether to deploy the flow after import. Defaults to `true`.
     *
     * @deprecated Deprecated
     */
    deploy?: pulumi.Input<boolean>;
    /**
     * A string that specifies a description of the flow. If the field is left undefined, the description from the flow export
     * will be used. If this field is left undefined and the flow export does not contain a description, the service will
     * define a description on import.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the PingOne environment to import the DaVinci flow to. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The DaVinci Flow to import, in raw JSON format. Should be a JSON file of a single flow (without subflows) that has been
     * exported from a source DaVinci environment. Must be a valid JSON string.
     */
    flowJson: pulumi.Input<string>;
    /**
     * A string that identifies the flow name after import. If the field is left blank, a flow name will be derived by the
     * service from the name in the import JSON (the `flow_json` parameter).
     */
    name?: pulumi.Input<string>;
    /**
     * Child flows of this resource, where the `flow_json` contains reference to subflows. If the `flow_json` contains
     * subflows, this one `subflow_link` block is required per contained subflow.
     */
    subflowLinks?: pulumi.Input<pulumi.Input<inputs.FlowSubflowLink>[]>;
}
