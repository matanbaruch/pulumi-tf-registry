// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAntiddosOverviewAttackTrend(args: GetAntiddosOverviewAttackTrendArgs, opts?: pulumi.InvokeOptions): Promise<GetAntiddosOverviewAttackTrendResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getAntiddosOverviewAttackTrend:getAntiddosOverviewAttackTrend", {
        "dimension": args.dimension,
        "endTime": args.endTime,
        "id": args.id,
        "period": args.period,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAntiddosOverviewAttackTrend.
 */
export interface GetAntiddosOverviewAttackTrendArgs {
    dimension: string;
    endTime: string;
    id?: string;
    period: number;
    resultOutputFile?: string;
    startTime: string;
    type: string;
}

/**
 * A collection of values returned by getAntiddosOverviewAttackTrend.
 */
export interface GetAntiddosOverviewAttackTrendResult {
    readonly datas: number[];
    readonly dimension: string;
    readonly endTime: string;
    readonly id: string;
    readonly period: number;
    readonly periodPointCount: number;
    readonly resultOutputFile?: string;
    readonly startTime: string;
    readonly type: string;
}
export function getAntiddosOverviewAttackTrendOutput(args: GetAntiddosOverviewAttackTrendOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAntiddosOverviewAttackTrendResult> {
    return pulumi.output(args).apply((a: any) => getAntiddosOverviewAttackTrend(a, opts))
}

/**
 * A collection of arguments for invoking getAntiddosOverviewAttackTrend.
 */
export interface GetAntiddosOverviewAttackTrendOutputArgs {
    dimension: pulumi.Input<string>;
    endTime: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    period: pulumi.Input<number>;
    resultOutputFile?: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
