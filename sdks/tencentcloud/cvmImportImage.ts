// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CvmImportImage extends pulumi.CustomResource {
    /**
     * Get an existing CvmImportImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CvmImportImageState, opts?: pulumi.CustomResourceOptions): CvmImportImage {
        return new CvmImportImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/cvmImportImage:CvmImportImage';

    /**
     * Returns true if the given object is an instance of CvmImportImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CvmImportImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CvmImportImage.__pulumiType;
    }

    /**
     * OS architecture of the image to be imported, `x86_64` or `i386`.
     */
    public readonly architecture!: pulumi.Output<string>;
    /**
     * Boot mode.
     */
    public readonly bootMode!: pulumi.Output<string | undefined>;
    /**
     * Dry run to check the parameters without performing the operation.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to force import the image.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * Image description.
     */
    public readonly imageDescription!: pulumi.Output<string | undefined>;
    /**
     * Image name.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * Address on COS where the image to be imported is stored.
     */
    public readonly imageUrl!: pulumi.Output<string>;
    /**
     * The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
     * license BYOL: Bring Your Own License.
     */
    public readonly licenseType!: pulumi.Output<string | undefined>;
    /**
     * OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
     * systems.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
     * systems.
     */
    public readonly osVersion!: pulumi.Output<string>;
    /**
     * Tag description list. This parameter is used to bind a tag to a custom image.
     */
    public readonly tagSpecifications!: pulumi.Output<outputs.CvmImportImageTagSpecification[] | undefined>;

    /**
     * Create a CvmImportImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CvmImportImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CvmImportImageArgs | CvmImportImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CvmImportImageState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["bootMode"] = state ? state.bootMode : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["imageDescription"] = state ? state.imageDescription : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["tagSpecifications"] = state ? state.tagSpecifications : undefined;
        } else {
            const args = argsOrState as CvmImportImageArgs | undefined;
            if ((!args || args.architecture === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architecture'");
            }
            if ((!args || args.imageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            if ((!args || args.imageUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageUrl'");
            }
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.osVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osVersion'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["bootMode"] = args ? args.bootMode : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["imageDescription"] = args ? args.imageDescription : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["osVersion"] = args ? args.osVersion : undefined;
            resourceInputs["tagSpecifications"] = args ? args.tagSpecifications : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CvmImportImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CvmImportImage resources.
 */
export interface CvmImportImageState {
    /**
     * OS architecture of the image to be imported, `x86_64` or `i386`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * Boot mode.
     */
    bootMode?: pulumi.Input<string>;
    /**
     * Dry run to check the parameters without performing the operation.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether to force import the image.
     */
    force?: pulumi.Input<boolean>;
    /**
     * Image description.
     */
    imageDescription?: pulumi.Input<string>;
    /**
     * Image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Address on COS where the image to be imported is stored.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
     * license BYOL: Bring Your Own License.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
     * systems.
     */
    osType?: pulumi.Input<string>;
    /**
     * OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
     * systems.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Tag description list. This parameter is used to bind a tag to a custom image.
     */
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.CvmImportImageTagSpecification>[]>;
}

/**
 * The set of arguments for constructing a CvmImportImage resource.
 */
export interface CvmImportImageArgs {
    /**
     * OS architecture of the image to be imported, `x86_64` or `i386`.
     */
    architecture: pulumi.Input<string>;
    /**
     * Boot mode.
     */
    bootMode?: pulumi.Input<string>;
    /**
     * Dry run to check the parameters without performing the operation.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Whether to force import the image.
     */
    force?: pulumi.Input<boolean>;
    /**
     * Image description.
     */
    imageDescription?: pulumi.Input<string>;
    /**
     * Image name.
     */
    imageName: pulumi.Input<string>;
    /**
     * Address on COS where the image to be imported is stored.
     */
    imageUrl: pulumi.Input<string>;
    /**
     * The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
     * license BYOL: Bring Your Own License.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
     * systems.
     */
    osType: pulumi.Input<string>;
    /**
     * OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
     * systems.
     */
    osVersion: pulumi.Input<string>;
    /**
     * Tag description list. This parameter is used to bind a tag to a custom image.
     */
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.CvmImportImageTagSpecification>[]>;
}
