// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedisInstances(args?: GetRedisInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetRedisInstancesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getRedisInstances:getRedisInstances", {
        "id": args.id,
        "limit": args.limit,
        "projectId": args.projectId,
        "resultOutputFile": args.resultOutputFile,
        "searchKey": args.searchKey,
        "tags": args.tags,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedisInstances.
 */
export interface GetRedisInstancesArgs {
    id?: string;
    limit?: number;
    projectId?: number;
    resultOutputFile?: string;
    searchKey?: string;
    tags?: {[key: string]: string};
    zone?: string;
}

/**
 * A collection of values returned by getRedisInstances.
 */
export interface GetRedisInstancesResult {
    readonly id: string;
    readonly instanceLists: outputs.GetRedisInstancesInstanceList[];
    readonly limit?: number;
    readonly projectId?: number;
    readonly resultOutputFile?: string;
    readonly searchKey?: string;
    readonly tags?: {[key: string]: string};
    readonly zone?: string;
}
export function getRedisInstancesOutput(args?: GetRedisInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedisInstancesResult> {
    return pulumi.output(args).apply((a: any) => getRedisInstances(a, opts))
}

/**
 * A collection of arguments for invoking getRedisInstances.
 */
export interface GetRedisInstancesOutputArgs {
    id?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    projectId?: pulumi.Input<number>;
    resultOutputFile?: pulumi.Input<string>;
    searchKey?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    zone?: pulumi.Input<string>;
}
