// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanusJobConfig extends pulumi.CustomResource {
    /**
     * Get an existing OceanusJobConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanusJobConfigState, opts?: pulumi.CustomResourceOptions): OceanusJobConfig {
        return new OceanusJobConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/oceanusJobConfig:OceanusJobConfig';

    /**
     * Returns true if the given object is an instance of OceanusJobConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanusJobConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanusJobConfig.__pulumiType;
    }

    /**
     * Oceanus platform job recovery switch 1: on -1: off.
     */
    public readonly autoRecover!: pulumi.Output<number | undefined>;
    /**
     * Class log level.
     */
    public readonly clazzLevels!: pulumi.Output<outputs.OceanusJobConfigClazzLevel[] | undefined>;
    /**
     * CLS logset ID.
     */
    public readonly clsLogsetId!: pulumi.Output<string | undefined>;
    /**
     * CLS log topic ID.
     */
    public readonly clsTopicId!: pulumi.Output<string | undefined>;
    /**
     * COS storage bucket name used by the job.
     */
    public readonly cosBucket!: pulumi.Output<string>;
    /**
     * Job default parallelism.
     */
    public readonly defaultParallelism!: pulumi.Output<number | undefined>;
    /**
     * Main class.
     */
    public readonly entrypointClass!: pulumi.Output<string | undefined>;
    /**
     * Expert mode configuration.
     */
    public readonly expertModeConfiguration!: pulumi.Output<outputs.OceanusJobConfigExpertModeConfiguration | undefined>;
    /**
     * Whether to enable expert mode.
     */
    public readonly expertModeOn!: pulumi.Output<boolean | undefined>;
    /**
     * Job ID.
     */
    public readonly jobId!: pulumi.Output<string>;
    /**
     * JobManager specification.
     */
    public readonly jobManagerSpec!: pulumi.Output<number | undefined>;
    /**
     * Whether to collect job logs.
     */
    public readonly logCollect!: pulumi.Output<boolean | undefined>;
    /**
     * Log collection type 2:CLS; 3:COS.
     */
    public readonly logCollectType!: pulumi.Output<number | undefined>;
    /**
     * Log level.
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * Main class parameters.
     */
    public readonly programArgs!: pulumi.Output<string | undefined>;
    /**
     * System parameters.
     */
    public readonly properties!: pulumi.Output<outputs.OceanusJobConfigProperty[] | undefined>;
    /**
     * Python version used by the pyflink job at runtime.
     */
    public readonly pythonVersion!: pulumi.Output<string | undefined>;
    /**
     * Remarks.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Resource reference array.
     */
    public readonly resourceRefs!: pulumi.Output<outputs.OceanusJobConfigResourceRef[] | undefined>;
    /**
     * TaskManager specification.
     */
    public readonly taskManagerSpec!: pulumi.Output<number | undefined>;
    /**
     * Workspace SerialId.
     */
    public readonly workSpaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a OceanusJobConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanusJobConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanusJobConfigArgs | OceanusJobConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanusJobConfigState | undefined;
            resourceInputs["autoRecover"] = state ? state.autoRecover : undefined;
            resourceInputs["clazzLevels"] = state ? state.clazzLevels : undefined;
            resourceInputs["clsLogsetId"] = state ? state.clsLogsetId : undefined;
            resourceInputs["clsTopicId"] = state ? state.clsTopicId : undefined;
            resourceInputs["cosBucket"] = state ? state.cosBucket : undefined;
            resourceInputs["defaultParallelism"] = state ? state.defaultParallelism : undefined;
            resourceInputs["entrypointClass"] = state ? state.entrypointClass : undefined;
            resourceInputs["expertModeConfiguration"] = state ? state.expertModeConfiguration : undefined;
            resourceInputs["expertModeOn"] = state ? state.expertModeOn : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["jobManagerSpec"] = state ? state.jobManagerSpec : undefined;
            resourceInputs["logCollect"] = state ? state.logCollect : undefined;
            resourceInputs["logCollectType"] = state ? state.logCollectType : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["programArgs"] = state ? state.programArgs : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["pythonVersion"] = state ? state.pythonVersion : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["resourceRefs"] = state ? state.resourceRefs : undefined;
            resourceInputs["taskManagerSpec"] = state ? state.taskManagerSpec : undefined;
            resourceInputs["workSpaceId"] = state ? state.workSpaceId : undefined;
        } else {
            const args = argsOrState as OceanusJobConfigArgs | undefined;
            if ((!args || args.jobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobId'");
            }
            resourceInputs["autoRecover"] = args ? args.autoRecover : undefined;
            resourceInputs["clazzLevels"] = args ? args.clazzLevels : undefined;
            resourceInputs["clsLogsetId"] = args ? args.clsLogsetId : undefined;
            resourceInputs["clsTopicId"] = args ? args.clsTopicId : undefined;
            resourceInputs["cosBucket"] = args ? args.cosBucket : undefined;
            resourceInputs["defaultParallelism"] = args ? args.defaultParallelism : undefined;
            resourceInputs["entrypointClass"] = args ? args.entrypointClass : undefined;
            resourceInputs["expertModeConfiguration"] = args ? args.expertModeConfiguration : undefined;
            resourceInputs["expertModeOn"] = args ? args.expertModeOn : undefined;
            resourceInputs["jobId"] = args ? args.jobId : undefined;
            resourceInputs["jobManagerSpec"] = args ? args.jobManagerSpec : undefined;
            resourceInputs["logCollect"] = args ? args.logCollect : undefined;
            resourceInputs["logCollectType"] = args ? args.logCollectType : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["programArgs"] = args ? args.programArgs : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["pythonVersion"] = args ? args.pythonVersion : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["resourceRefs"] = args ? args.resourceRefs : undefined;
            resourceInputs["taskManagerSpec"] = args ? args.taskManagerSpec : undefined;
            resourceInputs["workSpaceId"] = args ? args.workSpaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanusJobConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanusJobConfig resources.
 */
export interface OceanusJobConfigState {
    /**
     * Oceanus platform job recovery switch 1: on -1: off.
     */
    autoRecover?: pulumi.Input<number>;
    /**
     * Class log level.
     */
    clazzLevels?: pulumi.Input<pulumi.Input<inputs.OceanusJobConfigClazzLevel>[]>;
    /**
     * CLS logset ID.
     */
    clsLogsetId?: pulumi.Input<string>;
    /**
     * CLS log topic ID.
     */
    clsTopicId?: pulumi.Input<string>;
    /**
     * COS storage bucket name used by the job.
     */
    cosBucket?: pulumi.Input<string>;
    /**
     * Job default parallelism.
     */
    defaultParallelism?: pulumi.Input<number>;
    /**
     * Main class.
     */
    entrypointClass?: pulumi.Input<string>;
    /**
     * Expert mode configuration.
     */
    expertModeConfiguration?: pulumi.Input<inputs.OceanusJobConfigExpertModeConfiguration>;
    /**
     * Whether to enable expert mode.
     */
    expertModeOn?: pulumi.Input<boolean>;
    /**
     * Job ID.
     */
    jobId?: pulumi.Input<string>;
    /**
     * JobManager specification.
     */
    jobManagerSpec?: pulumi.Input<number>;
    /**
     * Whether to collect job logs.
     */
    logCollect?: pulumi.Input<boolean>;
    /**
     * Log collection type 2:CLS; 3:COS.
     */
    logCollectType?: pulumi.Input<number>;
    /**
     * Log level.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Main class parameters.
     */
    programArgs?: pulumi.Input<string>;
    /**
     * System parameters.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.OceanusJobConfigProperty>[]>;
    /**
     * Python version used by the pyflink job at runtime.
     */
    pythonVersion?: pulumi.Input<string>;
    /**
     * Remarks.
     */
    remark?: pulumi.Input<string>;
    /**
     * Resource reference array.
     */
    resourceRefs?: pulumi.Input<pulumi.Input<inputs.OceanusJobConfigResourceRef>[]>;
    /**
     * TaskManager specification.
     */
    taskManagerSpec?: pulumi.Input<number>;
    /**
     * Workspace SerialId.
     */
    workSpaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OceanusJobConfig resource.
 */
export interface OceanusJobConfigArgs {
    /**
     * Oceanus platform job recovery switch 1: on -1: off.
     */
    autoRecover?: pulumi.Input<number>;
    /**
     * Class log level.
     */
    clazzLevels?: pulumi.Input<pulumi.Input<inputs.OceanusJobConfigClazzLevel>[]>;
    /**
     * CLS logset ID.
     */
    clsLogsetId?: pulumi.Input<string>;
    /**
     * CLS log topic ID.
     */
    clsTopicId?: pulumi.Input<string>;
    /**
     * COS storage bucket name used by the job.
     */
    cosBucket?: pulumi.Input<string>;
    /**
     * Job default parallelism.
     */
    defaultParallelism?: pulumi.Input<number>;
    /**
     * Main class.
     */
    entrypointClass?: pulumi.Input<string>;
    /**
     * Expert mode configuration.
     */
    expertModeConfiguration?: pulumi.Input<inputs.OceanusJobConfigExpertModeConfiguration>;
    /**
     * Whether to enable expert mode.
     */
    expertModeOn?: pulumi.Input<boolean>;
    /**
     * Job ID.
     */
    jobId: pulumi.Input<string>;
    /**
     * JobManager specification.
     */
    jobManagerSpec?: pulumi.Input<number>;
    /**
     * Whether to collect job logs.
     */
    logCollect?: pulumi.Input<boolean>;
    /**
     * Log collection type 2:CLS; 3:COS.
     */
    logCollectType?: pulumi.Input<number>;
    /**
     * Log level.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Main class parameters.
     */
    programArgs?: pulumi.Input<string>;
    /**
     * System parameters.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.OceanusJobConfigProperty>[]>;
    /**
     * Python version used by the pyflink job at runtime.
     */
    pythonVersion?: pulumi.Input<string>;
    /**
     * Remarks.
     */
    remark?: pulumi.Input<string>;
    /**
     * Resource reference array.
     */
    resourceRefs?: pulumi.Input<pulumi.Input<inputs.OceanusJobConfigResourceRef>[]>;
    /**
     * TaskManager specification.
     */
    taskManagerSpec?: pulumi.Input<number>;
    /**
     * Workspace SerialId.
     */
    workSpaceId?: pulumi.Input<string>;
}
