// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CiMediaTranscodeProTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiMediaTranscodeProTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiMediaTranscodeProTemplateState, opts?: pulumi.CustomResourceOptions): CiMediaTranscodeProTemplate {
        return new CiMediaTranscodeProTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/ciMediaTranscodeProTemplate:CiMediaTranscodeProTemplate';

    /**
     * Returns true if the given object is an instance of CiMediaTranscodeProTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiMediaTranscodeProTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiMediaTranscodeProTemplate.__pulumiType;
    }

    /**
     * Audio information, do not transmit Audio, which is equivalent to deleting audio information.
     */
    public readonly audio!: pulumi.Output<outputs.CiMediaTranscodeProTemplateAudio | undefined>;
    /**
     * bucket name.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * container format.
     */
    public readonly container!: pulumi.Output<outputs.CiMediaTranscodeProTemplateContainer>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * time interval.
     */
    public readonly timeInterval!: pulumi.Output<outputs.CiMediaTranscodeProTemplateTimeInterval | undefined>;
    /**
     * transcoding configuration.
     */
    public readonly transConfig!: pulumi.Output<outputs.CiMediaTranscodeProTemplateTransConfig | undefined>;
    /**
     * video information, do not upload Video, which is equivalent to deleting video information.
     */
    public readonly video!: pulumi.Output<outputs.CiMediaTranscodeProTemplateVideo | undefined>;

    /**
     * Create a CiMediaTranscodeProTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiMediaTranscodeProTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiMediaTranscodeProTemplateArgs | CiMediaTranscodeProTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiMediaTranscodeProTemplateState | undefined;
            resourceInputs["audio"] = state ? state.audio : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeInterval"] = state ? state.timeInterval : undefined;
            resourceInputs["transConfig"] = state ? state.transConfig : undefined;
            resourceInputs["video"] = state ? state.video : undefined;
        } else {
            const args = argsOrState as CiMediaTranscodeProTemplateArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.container === undefined) && !opts.urn) {
                throw new Error("Missing required property 'container'");
            }
            resourceInputs["audio"] = args ? args.audio : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeInterval"] = args ? args.timeInterval : undefined;
            resourceInputs["transConfig"] = args ? args.transConfig : undefined;
            resourceInputs["video"] = args ? args.video : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiMediaTranscodeProTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CiMediaTranscodeProTemplate resources.
 */
export interface CiMediaTranscodeProTemplateState {
    /**
     * Audio information, do not transmit Audio, which is equivalent to deleting audio information.
     */
    audio?: pulumi.Input<inputs.CiMediaTranscodeProTemplateAudio>;
    /**
     * bucket name.
     */
    bucket?: pulumi.Input<string>;
    /**
     * container format.
     */
    container?: pulumi.Input<inputs.CiMediaTranscodeProTemplateContainer>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    name?: pulumi.Input<string>;
    /**
     * time interval.
     */
    timeInterval?: pulumi.Input<inputs.CiMediaTranscodeProTemplateTimeInterval>;
    /**
     * transcoding configuration.
     */
    transConfig?: pulumi.Input<inputs.CiMediaTranscodeProTemplateTransConfig>;
    /**
     * video information, do not upload Video, which is equivalent to deleting video information.
     */
    video?: pulumi.Input<inputs.CiMediaTranscodeProTemplateVideo>;
}

/**
 * The set of arguments for constructing a CiMediaTranscodeProTemplate resource.
 */
export interface CiMediaTranscodeProTemplateArgs {
    /**
     * Audio information, do not transmit Audio, which is equivalent to deleting audio information.
     */
    audio?: pulumi.Input<inputs.CiMediaTranscodeProTemplateAudio>;
    /**
     * bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * container format.
     */
    container: pulumi.Input<inputs.CiMediaTranscodeProTemplateContainer>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    name?: pulumi.Input<string>;
    /**
     * time interval.
     */
    timeInterval?: pulumi.Input<inputs.CiMediaTranscodeProTemplateTimeInterval>;
    /**
     * transcoding configuration.
     */
    transConfig?: pulumi.Input<inputs.CiMediaTranscodeProTemplateTransConfig>;
    /**
     * video information, do not upload Video, which is equivalent to deleting video information.
     */
    video?: pulumi.Input<inputs.CiMediaTranscodeProTemplateVideo>;
}
