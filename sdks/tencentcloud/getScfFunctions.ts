// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getScfFunctions(args?: GetScfFunctionsArgs, opts?: pulumi.InvokeOptions): Promise<GetScfFunctionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getScfFunctions:getScfFunctions", {
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "namespace": args.namespace,
        "resultOutputFile": args.resultOutputFile,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getScfFunctions.
 */
export interface GetScfFunctionsArgs {
    description?: string;
    id?: string;
    name?: string;
    namespace?: string;
    resultOutputFile?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getScfFunctions.
 */
export interface GetScfFunctionsResult {
    readonly description?: string;
    readonly functions: outputs.GetScfFunctionsFunction[];
    readonly id: string;
    readonly name?: string;
    readonly namespace?: string;
    readonly resultOutputFile?: string;
    readonly tags?: {[key: string]: string};
}
export function getScfFunctionsOutput(args?: GetScfFunctionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetScfFunctionsResult> {
    return pulumi.output(args).apply((a: any) => getScfFunctions(a, opts))
}

/**
 * A collection of arguments for invoking getScfFunctions.
 */
export interface GetScfFunctionsOutputArgs {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
