// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLighthouseBundle(args?: GetLighthouseBundleArgs, opts?: pulumi.InvokeOptions): Promise<GetLighthouseBundleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getLighthouseBundle:getLighthouseBundle", {
        "bundleIds": args.bundleIds,
        "filters": args.filters,
        "id": args.id,
        "limit": args.limit,
        "offset": args.offset,
        "resultOutputFile": args.resultOutputFile,
        "zones": args.zones,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLighthouseBundle.
 */
export interface GetLighthouseBundleArgs {
    bundleIds?: string[];
    filters?: inputs.GetLighthouseBundleFilter[];
    id?: string;
    limit?: number;
    offset?: number;
    resultOutputFile?: string;
    zones?: string[];
}

/**
 * A collection of values returned by getLighthouseBundle.
 */
export interface GetLighthouseBundleResult {
    readonly bundleIds?: string[];
    readonly bundleSets: outputs.GetLighthouseBundleBundleSet[];
    readonly filters?: outputs.GetLighthouseBundleFilter[];
    readonly id: string;
    readonly limit?: number;
    readonly offset?: number;
    readonly resultOutputFile?: string;
    readonly zones?: string[];
}
export function getLighthouseBundleOutput(args?: GetLighthouseBundleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLighthouseBundleResult> {
    return pulumi.output(args).apply((a: any) => getLighthouseBundle(a, opts))
}

/**
 * A collection of arguments for invoking getLighthouseBundle.
 */
export interface GetLighthouseBundleOutputArgs {
    bundleIds?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetLighthouseBundleFilterArgs>[]>;
    id?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    resultOutputFile?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
