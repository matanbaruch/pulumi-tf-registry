// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitorData(args: GetMonitorDataArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getMonitorData:getMonitorData", {
        "dimensions": args.dimensions,
        "endTime": args.endTime,
        "id": args.id,
        "metricName": args.metricName,
        "namespace": args.namespace,
        "period": args.period,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitorData.
 */
export interface GetMonitorDataArgs {
    dimensions: inputs.GetMonitorDataDimension[];
    endTime: string;
    id?: string;
    metricName: string;
    namespace: string;
    period?: number;
    resultOutputFile?: string;
    startTime: string;
}

/**
 * A collection of values returned by getMonitorData.
 */
export interface GetMonitorDataResult {
    readonly dimensions: outputs.GetMonitorDataDimension[];
    readonly endTime: string;
    readonly id: string;
    readonly lists: outputs.GetMonitorDataList[];
    readonly metricName: string;
    readonly namespace: string;
    readonly period?: number;
    readonly resultOutputFile?: string;
    readonly startTime: string;
}
export function getMonitorDataOutput(args: GetMonitorDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorDataResult> {
    return pulumi.output(args).apply((a: any) => getMonitorData(a, opts))
}

/**
 * A collection of arguments for invoking getMonitorData.
 */
export interface GetMonitorDataOutputArgs {
    dimensions: pulumi.Input<pulumi.Input<inputs.GetMonitorDataDimensionArgs>[]>;
    endTime: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metricName: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    resultOutputFile?: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}
