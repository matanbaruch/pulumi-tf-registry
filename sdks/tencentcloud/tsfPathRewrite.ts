// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TsfPathRewrite extends pulumi.CustomResource {
    /**
     * Get an existing TsfPathRewrite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TsfPathRewriteState, opts?: pulumi.CustomResourceOptions): TsfPathRewrite {
        return new TsfPathRewrite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/tsfPathRewrite:TsfPathRewrite';

    /**
     * Returns true if the given object is an instance of TsfPathRewrite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TsfPathRewrite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TsfPathRewrite.__pulumiType;
    }

    /**
     * Whether to shield the mapped path, Y: Yes N: No.
     */
    public readonly blocked!: pulumi.Output<string>;
    /**
     * gateway deployment group ID.
     */
    public readonly gatewayGroupId!: pulumi.Output<string>;
    /**
     * rule order, the smaller the higher the priority.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * path rewrite rule ID.
     */
    public /*out*/ readonly pathRewriteId!: pulumi.Output<string>;
    /**
     * regular expression.
     */
    public readonly regex!: pulumi.Output<string>;
    /**
     * content to replace.
     */
    public readonly replacement!: pulumi.Output<string>;

    /**
     * Create a TsfPathRewrite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TsfPathRewriteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TsfPathRewriteArgs | TsfPathRewriteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TsfPathRewriteState | undefined;
            resourceInputs["blocked"] = state ? state.blocked : undefined;
            resourceInputs["gatewayGroupId"] = state ? state.gatewayGroupId : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["pathRewriteId"] = state ? state.pathRewriteId : undefined;
            resourceInputs["regex"] = state ? state.regex : undefined;
            resourceInputs["replacement"] = state ? state.replacement : undefined;
        } else {
            const args = argsOrState as TsfPathRewriteArgs | undefined;
            if ((!args || args.blocked === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blocked'");
            }
            if ((!args || args.gatewayGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayGroupId'");
            }
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if ((!args || args.regex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regex'");
            }
            if ((!args || args.replacement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replacement'");
            }
            resourceInputs["blocked"] = args ? args.blocked : undefined;
            resourceInputs["gatewayGroupId"] = args ? args.gatewayGroupId : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["regex"] = args ? args.regex : undefined;
            resourceInputs["replacement"] = args ? args.replacement : undefined;
            resourceInputs["pathRewriteId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TsfPathRewrite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TsfPathRewrite resources.
 */
export interface TsfPathRewriteState {
    /**
     * Whether to shield the mapped path, Y: Yes N: No.
     */
    blocked?: pulumi.Input<string>;
    /**
     * gateway deployment group ID.
     */
    gatewayGroupId?: pulumi.Input<string>;
    /**
     * rule order, the smaller the higher the priority.
     */
    order?: pulumi.Input<number>;
    /**
     * path rewrite rule ID.
     */
    pathRewriteId?: pulumi.Input<string>;
    /**
     * regular expression.
     */
    regex?: pulumi.Input<string>;
    /**
     * content to replace.
     */
    replacement?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TsfPathRewrite resource.
 */
export interface TsfPathRewriteArgs {
    /**
     * Whether to shield the mapped path, Y: Yes N: No.
     */
    blocked: pulumi.Input<string>;
    /**
     * gateway deployment group ID.
     */
    gatewayGroupId: pulumi.Input<string>;
    /**
     * rule order, the smaller the higher the priority.
     */
    order: pulumi.Input<number>;
    /**
     * regular expression.
     */
    regex: pulumi.Input<string>;
    /**
     * content to replace.
     */
    replacement: pulumi.Input<string>;
}
