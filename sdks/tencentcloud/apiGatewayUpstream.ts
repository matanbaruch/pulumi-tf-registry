// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiGatewayUpstream extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayUpstream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayUpstreamState, opts?: pulumi.CustomResourceOptions): ApiGatewayUpstream {
        return new ApiGatewayUpstream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/apiGatewayUpstream:ApiGatewayUpstream';

    /**
     * Returns true if the given object is an instance of ApiGatewayUpstream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayUpstream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayUpstream.__pulumiType;
    }

    /**
     * Load balancing algorithm, value range: ROUND-ROBIN.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * Health check configuration, currently only supports VPC channels.
     */
    public readonly healthChecker!: pulumi.Output<outputs.ApiGatewayUpstreamHealthChecker | undefined>;
    /**
     * Configuration of K8S container service.
     */
    public readonly k8sServices!: pulumi.Output<outputs.ApiGatewayUpstreamK8sService[] | undefined>;
    /**
     * Backend nodes.
     */
    public readonly nodes!: pulumi.Output<outputs.ApiGatewayUpstreamNode[] | undefined>;
    /**
     * Request retry count, default to 3 times.
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
     */
    public readonly scheme!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * VPC Unique ID.
     */
    public readonly uniqVpcId!: pulumi.Output<string>;
    /**
     * Backend channel description.
     */
    public readonly upstreamDescription!: pulumi.Output<string | undefined>;
    /**
     * Host request header forwarded by gateway to backend.
     */
    public readonly upstreamHost!: pulumi.Output<string | undefined>;
    /**
     * Backend channel name.
     */
    public readonly upstreamName!: pulumi.Output<string | undefined>;
    /**
     * Backend access type, value range: IP_PORT, K8S.
     */
    public readonly upstreamType!: pulumi.Output<string | undefined>;

    /**
     * Create a ApiGatewayUpstream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayUpstreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayUpstreamArgs | ApiGatewayUpstreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayUpstreamState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["healthChecker"] = state ? state.healthChecker : undefined;
            resourceInputs["k8sServices"] = state ? state.k8sServices : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["scheme"] = state ? state.scheme : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uniqVpcId"] = state ? state.uniqVpcId : undefined;
            resourceInputs["upstreamDescription"] = state ? state.upstreamDescription : undefined;
            resourceInputs["upstreamHost"] = state ? state.upstreamHost : undefined;
            resourceInputs["upstreamName"] = state ? state.upstreamName : undefined;
            resourceInputs["upstreamType"] = state ? state.upstreamType : undefined;
        } else {
            const args = argsOrState as ApiGatewayUpstreamArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.scheme === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheme'");
            }
            if ((!args || args.uniqVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uniqVpcId'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["healthChecker"] = args ? args.healthChecker : undefined;
            resourceInputs["k8sServices"] = args ? args.k8sServices : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["scheme"] = args ? args.scheme : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uniqVpcId"] = args ? args.uniqVpcId : undefined;
            resourceInputs["upstreamDescription"] = args ? args.upstreamDescription : undefined;
            resourceInputs["upstreamHost"] = args ? args.upstreamHost : undefined;
            resourceInputs["upstreamName"] = args ? args.upstreamName : undefined;
            resourceInputs["upstreamType"] = args ? args.upstreamType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayUpstream.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayUpstream resources.
 */
export interface ApiGatewayUpstreamState {
    /**
     * Load balancing algorithm, value range: ROUND-ROBIN.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Health check configuration, currently only supports VPC channels.
     */
    healthChecker?: pulumi.Input<inputs.ApiGatewayUpstreamHealthChecker>;
    /**
     * Configuration of K8S container service.
     */
    k8sServices?: pulumi.Input<pulumi.Input<inputs.ApiGatewayUpstreamK8sService>[]>;
    /**
     * Backend nodes.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.ApiGatewayUpstreamNode>[]>;
    /**
     * Request retry count, default to 3 times.
     */
    retries?: pulumi.Input<number>;
    /**
     * Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
     */
    scheme?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC Unique ID.
     */
    uniqVpcId?: pulumi.Input<string>;
    /**
     * Backend channel description.
     */
    upstreamDescription?: pulumi.Input<string>;
    /**
     * Host request header forwarded by gateway to backend.
     */
    upstreamHost?: pulumi.Input<string>;
    /**
     * Backend channel name.
     */
    upstreamName?: pulumi.Input<string>;
    /**
     * Backend access type, value range: IP_PORT, K8S.
     */
    upstreamType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiGatewayUpstream resource.
 */
export interface ApiGatewayUpstreamArgs {
    /**
     * Load balancing algorithm, value range: ROUND-ROBIN.
     */
    algorithm: pulumi.Input<string>;
    /**
     * Health check configuration, currently only supports VPC channels.
     */
    healthChecker?: pulumi.Input<inputs.ApiGatewayUpstreamHealthChecker>;
    /**
     * Configuration of K8S container service.
     */
    k8sServices?: pulumi.Input<pulumi.Input<inputs.ApiGatewayUpstreamK8sService>[]>;
    /**
     * Backend nodes.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.ApiGatewayUpstreamNode>[]>;
    /**
     * Request retry count, default to 3 times.
     */
    retries?: pulumi.Input<number>;
    /**
     * Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
     */
    scheme: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC Unique ID.
     */
    uniqVpcId: pulumi.Input<string>;
    /**
     * Backend channel description.
     */
    upstreamDescription?: pulumi.Input<string>;
    /**
     * Host request header forwarded by gateway to backend.
     */
    upstreamHost?: pulumi.Input<string>;
    /**
     * Backend channel name.
     */
    upstreamName?: pulumi.Input<string>;
    /**
     * Backend access type, value range: IP_PORT, K8S.
     */
    upstreamType?: pulumi.Input<string>;
}
