// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DcGateway extends pulumi.CustomResource {
    /**
     * Get an existing DcGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcGatewayState, opts?: pulumi.CustomResourceOptions): DcGateway {
        return new DcGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/dcGateway:DcGateway';

    /**
     * Returns true if the given object is an instance of DcGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcGateway.__pulumiType;
    }

    /**
     * Type of CCN route. Valid value: `BGP` and `STATIC`. The property is available when the DCG type is CCN gateway and BGP
     * enabled.
     */
    public /*out*/ readonly cnnRouteType!: pulumi.Output<string>;
    /**
     * Creation time of resource.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Indicates whether the BGP is enabled.
     */
    public /*out*/ readonly enableBgp!: pulumi.Output<boolean>;
    /**
     * Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
     * can create two DCGs, the one is NAT type and the other is non-NAT type.
     */
    public readonly gatewayType!: pulumi.Output<string | undefined>;
    /**
     * Name of the DCG.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
     * available value is CCN instance ID.
     */
    public readonly networkInstanceId!: pulumi.Output<string>;
    /**
     * Type of associated network. Valid value: `VPC` and `CCN`.
     */
    public readonly networkType!: pulumi.Output<string>;

    /**
     * Create a DcGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcGatewayArgs | DcGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcGatewayState | undefined;
            resourceInputs["cnnRouteType"] = state ? state.cnnRouteType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enableBgp"] = state ? state.enableBgp : undefined;
            resourceInputs["gatewayType"] = state ? state.gatewayType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInstanceId"] = state ? state.networkInstanceId : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
        } else {
            const args = argsOrState as DcGatewayArgs | undefined;
            if ((!args || args.networkInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInstanceId'");
            }
            if ((!args || args.networkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkType'");
            }
            resourceInputs["gatewayType"] = args ? args.gatewayType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInstanceId"] = args ? args.networkInstanceId : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["cnnRouteType"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["enableBgp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DcGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DcGateway resources.
 */
export interface DcGatewayState {
    /**
     * Type of CCN route. Valid value: `BGP` and `STATIC`. The property is available when the DCG type is CCN gateway and BGP
     * enabled.
     */
    cnnRouteType?: pulumi.Input<string>;
    /**
     * Creation time of resource.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Indicates whether the BGP is enabled.
     */
    enableBgp?: pulumi.Input<boolean>;
    /**
     * Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
     * can create two DCGs, the one is NAT type and the other is non-NAT type.
     */
    gatewayType?: pulumi.Input<string>;
    /**
     * Name of the DCG.
     */
    name?: pulumi.Input<string>;
    /**
     * If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
     * available value is CCN instance ID.
     */
    networkInstanceId?: pulumi.Input<string>;
    /**
     * Type of associated network. Valid value: `VPC` and `CCN`.
     */
    networkType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcGateway resource.
 */
export interface DcGatewayArgs {
    /**
     * Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
     * can create two DCGs, the one is NAT type and the other is non-NAT type.
     */
    gatewayType?: pulumi.Input<string>;
    /**
     * Name of the DCG.
     */
    name?: pulumi.Input<string>;
    /**
     * If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
     * available value is CCN instance ID.
     */
    networkInstanceId: pulumi.Input<string>;
    /**
     * Type of associated network. Valid value: `VPC` and `CCN`.
     */
    networkType: pulumi.Input<string>;
}
