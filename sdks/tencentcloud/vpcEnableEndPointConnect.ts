// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpcEnableEndPointConnect extends pulumi.CustomResource {
    /**
     * Get an existing VpcEnableEndPointConnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcEnableEndPointConnectState, opts?: pulumi.CustomResourceOptions): VpcEnableEndPointConnect {
        return new VpcEnableEndPointConnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/vpcEnableEndPointConnect:VpcEnableEndPointConnect';

    /**
     * Returns true if the given object is an instance of VpcEnableEndPointConnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcEnableEndPointConnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEnableEndPointConnect.__pulumiType;
    }

    /**
     * Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
     */
    public readonly acceptFlag!: pulumi.Output<boolean>;
    /**
     * Endpoint ID.
     */
    public readonly endPointIds!: pulumi.Output<string[]>;
    /**
     * Endpoint service ID.
     */
    public readonly endPointServiceId!: pulumi.Output<string>;

    /**
     * Create a VpcEnableEndPointConnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcEnableEndPointConnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcEnableEndPointConnectArgs | VpcEnableEndPointConnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcEnableEndPointConnectState | undefined;
            resourceInputs["acceptFlag"] = state ? state.acceptFlag : undefined;
            resourceInputs["endPointIds"] = state ? state.endPointIds : undefined;
            resourceInputs["endPointServiceId"] = state ? state.endPointServiceId : undefined;
        } else {
            const args = argsOrState as VpcEnableEndPointConnectArgs | undefined;
            if ((!args || args.acceptFlag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptFlag'");
            }
            if ((!args || args.endPointIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endPointIds'");
            }
            if ((!args || args.endPointServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endPointServiceId'");
            }
            resourceInputs["acceptFlag"] = args ? args.acceptFlag : undefined;
            resourceInputs["endPointIds"] = args ? args.endPointIds : undefined;
            resourceInputs["endPointServiceId"] = args ? args.endPointServiceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcEnableEndPointConnect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcEnableEndPointConnect resources.
 */
export interface VpcEnableEndPointConnectState {
    /**
     * Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
     */
    acceptFlag?: pulumi.Input<boolean>;
    /**
     * Endpoint ID.
     */
    endPointIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Endpoint service ID.
     */
    endPointServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcEnableEndPointConnect resource.
 */
export interface VpcEnableEndPointConnectArgs {
    /**
     * Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
     */
    acceptFlag: pulumi.Input<boolean>;
    /**
     * Endpoint ID.
     */
    endPointIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Endpoint service ID.
     */
    endPointServiceId: pulumi.Input<string>;
}
