// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CvmRebootInstance extends pulumi.CustomResource {
    /**
     * Get an existing CvmRebootInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CvmRebootInstanceState, opts?: pulumi.CustomResourceOptions): CvmRebootInstance {
        return new CvmRebootInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/cvmRebootInstance:CvmRebootInstance';

    /**
     * Returns true if the given object is an instance of CvmRebootInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CvmRebootInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CvmRebootInstance.__pulumiType;
    }

    /**
     * This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters
     * cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values
     * are `TRUE` and `FALSE`. Default value: FALSE.
     *
     * @deprecated Deprecated
     */
    public readonly forceReboot!: pulumi.Output<boolean | undefined>;
    /**
     * Instance ID.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first,
     * and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
     */
    public readonly stopType!: pulumi.Output<string | undefined>;

    /**
     * Create a CvmRebootInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CvmRebootInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CvmRebootInstanceArgs | CvmRebootInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CvmRebootInstanceState | undefined;
            resourceInputs["forceReboot"] = state ? state.forceReboot : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["stopType"] = state ? state.stopType : undefined;
        } else {
            const args = argsOrState as CvmRebootInstanceArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["forceReboot"] = args ? args.forceReboot : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["stopType"] = args ? args.stopType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CvmRebootInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CvmRebootInstance resources.
 */
export interface CvmRebootInstanceState {
    /**
     * This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters
     * cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values
     * are `TRUE` and `FALSE`. Default value: FALSE.
     *
     * @deprecated Deprecated
     */
    forceReboot?: pulumi.Input<boolean>;
    /**
     * Instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first,
     * and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
     */
    stopType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CvmRebootInstance resource.
 */
export interface CvmRebootInstanceArgs {
    /**
     * This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters
     * cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values
     * are `TRUE` and `FALSE`. Default value: FALSE.
     *
     * @deprecated Deprecated
     */
    forceReboot?: pulumi.Input<boolean>;
    /**
     * Instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first,
     * and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
     */
    stopType?: pulumi.Input<string>;
}
