// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CamRolePolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing CamRolePolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CamRolePolicyAttachmentState, opts?: pulumi.CustomResourceOptions): CamRolePolicyAttachment {
        return new CamRolePolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/camRolePolicyAttachment:CamRolePolicyAttachment';

    /**
     * Returns true if the given object is an instance of CamRolePolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CamRolePolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CamRolePolicyAttachment.__pulumiType;
    }

    /**
     * Mode of Creation of the CAM role policy attachment. `1` means the CAM policy attachment is created by production, and
     * the others indicate syntax strategy ways.
     */
    public /*out*/ readonly createMode!: pulumi.Output<number>;
    /**
     * The create time of the CAM role policy attachment.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * ID of the policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The name of the policy.
     */
    public /*out*/ readonly policyName!: pulumi.Output<string>;
    /**
     * Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
     */
    public /*out*/ readonly policyType!: pulumi.Output<string>;
    /**
     * ID of the attached CAM role.
     */
    public readonly roleId!: pulumi.Output<string>;

    /**
     * Create a CamRolePolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CamRolePolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CamRolePolicyAttachmentArgs | CamRolePolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CamRolePolicyAttachmentState | undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        } else {
            const args = argsOrState as CamRolePolicyAttachmentArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["createMode"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
            resourceInputs["policyType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CamRolePolicyAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CamRolePolicyAttachment resources.
 */
export interface CamRolePolicyAttachmentState {
    /**
     * Mode of Creation of the CAM role policy attachment. `1` means the CAM policy attachment is created by production, and
     * the others indicate syntax strategy ways.
     */
    createMode?: pulumi.Input<number>;
    /**
     * The create time of the CAM role policy attachment.
     */
    createTime?: pulumi.Input<string>;
    /**
     * ID of the policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The name of the policy.
     */
    policyName?: pulumi.Input<string>;
    /**
     * Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
     */
    policyType?: pulumi.Input<string>;
    /**
     * ID of the attached CAM role.
     */
    roleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CamRolePolicyAttachment resource.
 */
export interface CamRolePolicyAttachmentArgs {
    /**
     * ID of the policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * ID of the attached CAM role.
     */
    roleId: pulumi.Input<string>;
}
