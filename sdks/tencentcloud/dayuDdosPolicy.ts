// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DayuDdosPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DayuDdosPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DayuDdosPolicyState, opts?: pulumi.CustomResourceOptions): DayuDdosPolicy {
        return new DayuDdosPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/dayuDdosPolicy:DayuDdosPolicy';

    /**
     * Returns true if the given object is an instance of DayuDdosPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DayuDdosPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DayuDdosPolicy.__pulumiType;
    }

    /**
     * Black IP list.
     */
    public readonly blackIps!: pulumi.Output<string[] | undefined>;
    /**
     * Create time of the DDoS policy.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Option list of abnormal check of the DDos policy, should set at least one policy.
     */
    public readonly dropOptions!: pulumi.Output<outputs.DayuDdosPolicyDropOption[]>;
    /**
     * Name of the DDoS policy. Length should between 1 and 32.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Message filter options list.
     */
    public readonly packetFilters!: pulumi.Output<outputs.DayuDdosPolicyPacketFilter[] | undefined>;
    /**
     * Id of policy.
     */
    public /*out*/ readonly policyId!: pulumi.Output<string>;
    /**
     * Port limits of abnormal check of the DDos policy.
     */
    public readonly portFilters!: pulumi.Output<outputs.DayuDdosPolicyPortFilter[] | undefined>;
    /**
     * Type of the resource that the DDoS policy works for. Valid values: `bgpip`, `bgp`, `bgp-multip` and `net`.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Id of policy case that the DDoS policy works for.
     */
    public /*out*/ readonly sceneId!: pulumi.Output<string>;
    /**
     * Watermark policy options, and only support one watermark policy at most.
     */
    public readonly watermarkFilters!: pulumi.Output<outputs.DayuDdosPolicyWatermarkFilter[] | undefined>;
    /**
     * Watermark content.
     */
    public /*out*/ readonly watermarkKeys!: pulumi.Output<outputs.DayuDdosPolicyWatermarkKey[]>;
    /**
     * White IP list.
     */
    public readonly whiteIps!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DayuDdosPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DayuDdosPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DayuDdosPolicyArgs | DayuDdosPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DayuDdosPolicyState | undefined;
            resourceInputs["blackIps"] = state ? state.blackIps : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dropOptions"] = state ? state.dropOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetFilters"] = state ? state.packetFilters : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["portFilters"] = state ? state.portFilters : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["sceneId"] = state ? state.sceneId : undefined;
            resourceInputs["watermarkFilters"] = state ? state.watermarkFilters : undefined;
            resourceInputs["watermarkKeys"] = state ? state.watermarkKeys : undefined;
            resourceInputs["whiteIps"] = state ? state.whiteIps : undefined;
        } else {
            const args = argsOrState as DayuDdosPolicyArgs | undefined;
            if ((!args || args.dropOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dropOptions'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["blackIps"] = args ? args.blackIps : undefined;
            resourceInputs["dropOptions"] = args ? args.dropOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetFilters"] = args ? args.packetFilters : undefined;
            resourceInputs["portFilters"] = args ? args.portFilters : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["watermarkFilters"] = args ? args.watermarkFilters : undefined;
            resourceInputs["whiteIps"] = args ? args.whiteIps : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
            resourceInputs["sceneId"] = undefined /*out*/;
            resourceInputs["watermarkKeys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DayuDdosPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DayuDdosPolicy resources.
 */
export interface DayuDdosPolicyState {
    /**
     * Black IP list.
     */
    blackIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create time of the DDoS policy.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Option list of abnormal check of the DDos policy, should set at least one policy.
     */
    dropOptions?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyDropOption>[]>;
    /**
     * Name of the DDoS policy. Length should between 1 and 32.
     */
    name?: pulumi.Input<string>;
    /**
     * Message filter options list.
     */
    packetFilters?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyPacketFilter>[]>;
    /**
     * Id of policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Port limits of abnormal check of the DDos policy.
     */
    portFilters?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyPortFilter>[]>;
    /**
     * Type of the resource that the DDoS policy works for. Valid values: `bgpip`, `bgp`, `bgp-multip` and `net`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Id of policy case that the DDoS policy works for.
     */
    sceneId?: pulumi.Input<string>;
    /**
     * Watermark policy options, and only support one watermark policy at most.
     */
    watermarkFilters?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyWatermarkFilter>[]>;
    /**
     * Watermark content.
     */
    watermarkKeys?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyWatermarkKey>[]>;
    /**
     * White IP list.
     */
    whiteIps?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DayuDdosPolicy resource.
 */
export interface DayuDdosPolicyArgs {
    /**
     * Black IP list.
     */
    blackIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Option list of abnormal check of the DDos policy, should set at least one policy.
     */
    dropOptions: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyDropOption>[]>;
    /**
     * Name of the DDoS policy. Length should between 1 and 32.
     */
    name?: pulumi.Input<string>;
    /**
     * Message filter options list.
     */
    packetFilters?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyPacketFilter>[]>;
    /**
     * Port limits of abnormal check of the DDos policy.
     */
    portFilters?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyPortFilter>[]>;
    /**
     * Type of the resource that the DDoS policy works for. Valid values: `bgpip`, `bgp`, `bgp-multip` and `net`.
     */
    resourceType: pulumi.Input<string>;
    /**
     * Watermark policy options, and only support one watermark policy at most.
     */
    watermarkFilters?: pulumi.Input<pulumi.Input<inputs.DayuDdosPolicyWatermarkFilter>[]>;
    /**
     * White IP list.
     */
    whiteIps?: pulumi.Input<pulumi.Input<string>[]>;
}
