// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CamAccessKey extends pulumi.CustomResource {
    /**
     * Get an existing CamAccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CamAccessKeyState, opts?: pulumi.CustomResourceOptions): CamAccessKey {
        return new CamAccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/camAccessKey:CamAccessKey';

    /**
     * Returns true if the given object is an instance of CamAccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CamAccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CamAccessKey.__pulumiType;
    }

    /**
     * Access_key is the access key identification, required when updating.
     */
    public readonly accessKey!: pulumi.Output<string>;
    public /*out*/ readonly encryptedSecretAccessKey!: pulumi.Output<string>;
    /**
     * Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
     */
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in
     * the encrypted_secret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw"
     * version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
     */
    public readonly pgpKey!: pulumi.Output<string | undefined>;
    /**
     * Access key (key is only visible when created, please keep it properly).
     */
    public /*out*/ readonly secretAccessKey!: pulumi.Output<string>;
    /**
     * Key status, activated (Active) or inactive (Inactive), required when updating.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Specify user Uin, if not filled, the access key is created for the current user by default.
     */
    public readonly targetUin!: pulumi.Output<number | undefined>;

    /**
     * Create a CamAccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CamAccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CamAccessKeyArgs | CamAccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CamAccessKeyState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["encryptedSecretAccessKey"] = state ? state.encryptedSecretAccessKey : undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["pgpKey"] = state ? state.pgpKey : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetUin"] = state ? state.targetUin : undefined;
        } else {
            const args = argsOrState as CamAccessKeyArgs | undefined;
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["pgpKey"] = args ? args.pgpKey : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["targetUin"] = args ? args.targetUin : undefined;
            resourceInputs["encryptedSecretAccessKey"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["secretAccessKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CamAccessKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CamAccessKey resources.
 */
export interface CamAccessKeyState {
    /**
     * Access_key is the access key identification, required when updating.
     */
    accessKey?: pulumi.Input<string>;
    encryptedSecretAccessKey?: pulumi.Input<string>;
    /**
     * Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
     */
    keyFingerprint?: pulumi.Input<string>;
    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in
     * the encrypted_secret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw"
     * version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
     */
    pgpKey?: pulumi.Input<string>;
    /**
     * Access key (key is only visible when created, please keep it properly).
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * Key status, activated (Active) or inactive (Inactive), required when updating.
     */
    status?: pulumi.Input<string>;
    /**
     * Specify user Uin, if not filled, the access key is created for the current user by default.
     */
    targetUin?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CamAccessKey resource.
 */
export interface CamAccessKeyArgs {
    /**
     * Access_key is the access key identification, required when updating.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in
     * the encrypted_secret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw"
     * version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
     */
    pgpKey?: pulumi.Input<string>;
    /**
     * Key status, activated (Active) or inactive (Inactive), required when updating.
     */
    status?: pulumi.Input<string>;
    /**
     * Specify user Uin, if not filled, the access key is created for the current user by default.
     */
    targetUin?: pulumi.Input<number>;
}
