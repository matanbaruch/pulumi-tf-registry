// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ChdfsMountPoint extends pulumi.CustomResource {
    /**
     * Get an existing ChdfsMountPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChdfsMountPointState, opts?: pulumi.CustomResourceOptions): ChdfsMountPoint {
        return new ChdfsMountPoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/chdfsMountPoint:ChdfsMountPoint';

    /**
     * Returns true if the given object is an instance of ChdfsMountPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChdfsMountPoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChdfsMountPoint.__pulumiType;
    }

    /**
     * file system id you want to mount.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * mount point name.
     */
    public readonly mountPointName!: pulumi.Output<string>;
    /**
     * mount status 1:open, 2:close.
     */
    public readonly mountPointStatus!: pulumi.Output<number>;

    /**
     * Create a ChdfsMountPoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChdfsMountPointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChdfsMountPointArgs | ChdfsMountPointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChdfsMountPointState | undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["mountPointName"] = state ? state.mountPointName : undefined;
            resourceInputs["mountPointStatus"] = state ? state.mountPointStatus : undefined;
        } else {
            const args = argsOrState as ChdfsMountPointArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.mountPointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mountPointName'");
            }
            if ((!args || args.mountPointStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mountPointStatus'");
            }
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["mountPointName"] = args ? args.mountPointName : undefined;
            resourceInputs["mountPointStatus"] = args ? args.mountPointStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChdfsMountPoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ChdfsMountPoint resources.
 */
export interface ChdfsMountPointState {
    /**
     * file system id you want to mount.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * mount point name.
     */
    mountPointName?: pulumi.Input<string>;
    /**
     * mount status 1:open, 2:close.
     */
    mountPointStatus?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ChdfsMountPoint resource.
 */
export interface ChdfsMountPointArgs {
    /**
     * file system id you want to mount.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * mount point name.
     */
    mountPointName: pulumi.Input<string>;
    /**
     * mount status 1:open, 2:close.
     */
    mountPointStatus: pulumi.Input<number>;
}
