// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlserverRollbackInstance extends pulumi.CustomResource {
    /**
     * Get an existing SqlserverRollbackInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlserverRollbackInstanceState, opts?: pulumi.CustomResourceOptions): SqlserverRollbackInstance {
        return new SqlserverRollbackInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/sqlserverRollbackInstance:SqlserverRollbackInstance';

    /**
     * Returns true if the given object is an instance of SqlserverRollbackInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlserverRollbackInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlserverRollbackInstance.__pulumiType;
    }

    /**
     * TDE encryption, `enable` encrypted, `disable` unencrypted.
     */
    public /*out*/ readonly encryptions!: pulumi.Output<outputs.SqlserverRollbackInstanceEncryption[]>;
    /**
     * Instance ID.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Rename the databases listed in ReNameRestoreDatabase.
     */
    public readonly renameRestores!: pulumi.Output<outputs.SqlserverRollbackInstanceRenameRestore[]>;
    /**
     * Target time point for rollback.
     */
    public readonly time!: pulumi.Output<string>;

    /**
     * Create a SqlserverRollbackInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlserverRollbackInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlserverRollbackInstanceArgs | SqlserverRollbackInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlserverRollbackInstanceState | undefined;
            resourceInputs["encryptions"] = state ? state.encryptions : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["renameRestores"] = state ? state.renameRestores : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
        } else {
            const args = argsOrState as SqlserverRollbackInstanceArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.renameRestores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'renameRestores'");
            }
            if ((!args || args.time === undefined) && !opts.urn) {
                throw new Error("Missing required property 'time'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["renameRestores"] = args ? args.renameRestores : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
            resourceInputs["encryptions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlserverRollbackInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlserverRollbackInstance resources.
 */
export interface SqlserverRollbackInstanceState {
    /**
     * TDE encryption, `enable` encrypted, `disable` unencrypted.
     */
    encryptions?: pulumi.Input<pulumi.Input<inputs.SqlserverRollbackInstanceEncryption>[]>;
    /**
     * Instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Rename the databases listed in ReNameRestoreDatabase.
     */
    renameRestores?: pulumi.Input<pulumi.Input<inputs.SqlserverRollbackInstanceRenameRestore>[]>;
    /**
     * Target time point for rollback.
     */
    time?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlserverRollbackInstance resource.
 */
export interface SqlserverRollbackInstanceArgs {
    /**
     * Instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Rename the databases listed in ReNameRestoreDatabase.
     */
    renameRestores: pulumi.Input<pulumi.Input<inputs.SqlserverRollbackInstanceRenameRestore>[]>;
    /**
     * Target time point for rollback.
     */
    time: pulumi.Input<string>;
}
