// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WafIpAccessControl extends pulumi.CustomResource {
    /**
     * Get an existing WafIpAccessControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafIpAccessControlState, opts?: pulumi.CustomResourceOptions): WafIpAccessControl {
        return new WafIpAccessControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/wafIpAccessControl:WafIpAccessControl';

    /**
     * Returns true if the given object is an instance of WafIpAccessControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WafIpAccessControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WafIpAccessControl.__pulumiType;
    }

    /**
     * Domain.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
     */
    public readonly edition!: pulumi.Output<string>;
    /**
     * Waf instance Id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Ip parameter list.
     */
    public readonly items!: pulumi.Output<outputs.WafIpAccessControlItem[]>;

    /**
     * Create a WafIpAccessControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafIpAccessControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafIpAccessControlArgs | WafIpAccessControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafIpAccessControlState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["items"] = state ? state.items : undefined;
        } else {
            const args = argsOrState as WafIpAccessControlArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.edition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edition'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.items === undefined) && !opts.urn) {
                throw new Error("Missing required property 'items'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["items"] = args ? args.items : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WafIpAccessControl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WafIpAccessControl resources.
 */
export interface WafIpAccessControlState {
    /**
     * Domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
     */
    edition?: pulumi.Input<string>;
    /**
     * Waf instance Id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Ip parameter list.
     */
    items?: pulumi.Input<pulumi.Input<inputs.WafIpAccessControlItem>[]>;
}

/**
 * The set of arguments for constructing a WafIpAccessControl resource.
 */
export interface WafIpAccessControlArgs {
    /**
     * Domain.
     */
    domain: pulumi.Input<string>;
    /**
     * Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
     */
    edition: pulumi.Input<string>;
    /**
     * Waf instance Id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Ip parameter list.
     */
    items: pulumi.Input<pulumi.Input<inputs.WafIpAccessControlItem>[]>;
}
