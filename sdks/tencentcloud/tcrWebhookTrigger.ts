// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TcrWebhookTrigger extends pulumi.CustomResource {
    /**
     * Get an existing TcrWebhookTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TcrWebhookTriggerState, opts?: pulumi.CustomResourceOptions): TcrWebhookTrigger {
        return new TcrWebhookTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/tcrWebhookTrigger:TcrWebhookTrigger';

    /**
     * Returns true if the given object is an instance of TcrWebhookTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TcrWebhookTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TcrWebhookTrigger.__pulumiType;
    }

    /**
     * namespace name.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * instance Id.
     */
    public readonly registryId!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * trigger parameters.
     */
    public readonly trigger!: pulumi.Output<outputs.TcrWebhookTriggerTrigger>;

    /**
     * Create a TcrWebhookTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TcrWebhookTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TcrWebhookTriggerArgs | TcrWebhookTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TcrWebhookTriggerState | undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as TcrWebhookTriggerArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TcrWebhookTrigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TcrWebhookTrigger resources.
 */
export interface TcrWebhookTriggerState {
    /**
     * namespace name.
     */
    namespace?: pulumi.Input<string>;
    /**
     * instance Id.
     */
    registryId?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * trigger parameters.
     */
    trigger?: pulumi.Input<inputs.TcrWebhookTriggerTrigger>;
}

/**
 * The set of arguments for constructing a TcrWebhookTrigger resource.
 */
export interface TcrWebhookTriggerArgs {
    /**
     * namespace name.
     */
    namespace: pulumi.Input<string>;
    /**
     * instance Id.
     */
    registryId: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * trigger parameters.
     */
    trigger: pulumi.Input<inputs.TcrWebhookTriggerTrigger>;
}
