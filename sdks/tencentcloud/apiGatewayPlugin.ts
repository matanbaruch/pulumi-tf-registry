// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApiGatewayPlugin extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayPluginState, opts?: pulumi.CustomResourceOptions): ApiGatewayPlugin {
        return new ApiGatewayPlugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/apiGatewayPlugin:ApiGatewayPlugin';

    /**
     * Returns true if the given object is an instance of ApiGatewayPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayPlugin.__pulumiType;
    }

    /**
     * Description of plugin.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Statement to define plugin.
     */
    public readonly pluginData!: pulumi.Output<string>;
    /**
     * Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters,
     * numbers and dashes(-). The length range is from 2 to 50.
     */
    public readonly pluginName!: pulumi.Output<string>;
    /**
     * Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter,
     * CircuitBreaker, ProxyCache.
     */
    public readonly pluginType!: pulumi.Output<string>;

    /**
     * Create a ApiGatewayPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayPluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayPluginArgs | ApiGatewayPluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayPluginState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["pluginData"] = state ? state.pluginData : undefined;
            resourceInputs["pluginName"] = state ? state.pluginName : undefined;
            resourceInputs["pluginType"] = state ? state.pluginType : undefined;
        } else {
            const args = argsOrState as ApiGatewayPluginArgs | undefined;
            if ((!args || args.pluginData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginData'");
            }
            if ((!args || args.pluginName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginName'");
            }
            if ((!args || args.pluginType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pluginType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["pluginData"] = args ? args.pluginData : undefined;
            resourceInputs["pluginName"] = args ? args.pluginName : undefined;
            resourceInputs["pluginType"] = args ? args.pluginType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayPlugin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayPlugin resources.
 */
export interface ApiGatewayPluginState {
    /**
     * Description of plugin.
     */
    description?: pulumi.Input<string>;
    /**
     * Statement to define plugin.
     */
    pluginData?: pulumi.Input<string>;
    /**
     * Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters,
     * numbers and dashes(-). The length range is from 2 to 50.
     */
    pluginName?: pulumi.Input<string>;
    /**
     * Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter,
     * CircuitBreaker, ProxyCache.
     */
    pluginType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiGatewayPlugin resource.
 */
export interface ApiGatewayPluginArgs {
    /**
     * Description of plugin.
     */
    description?: pulumi.Input<string>;
    /**
     * Statement to define plugin.
     */
    pluginData: pulumi.Input<string>;
    /**
     * Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters,
     * numbers and dashes(-). The length range is from 2 to 50.
     */
    pluginName: pulumi.Input<string>;
    /**
     * Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter,
     * CircuitBreaker, ProxyCache.
     */
    pluginType: pulumi.Input<string>;
}
