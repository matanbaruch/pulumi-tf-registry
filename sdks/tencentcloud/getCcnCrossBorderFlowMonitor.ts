// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCcnCrossBorderFlowMonitor(args: GetCcnCrossBorderFlowMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetCcnCrossBorderFlowMonitorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getCcnCrossBorderFlowMonitor:getCcnCrossBorderFlowMonitor", {
        "ccnId": args.ccnId,
        "ccnUin": args.ccnUin,
        "destinationRegion": args.destinationRegion,
        "endTime": args.endTime,
        "id": args.id,
        "period": args.period,
        "resultOutputFile": args.resultOutputFile,
        "sourceRegion": args.sourceRegion,
        "startTime": args.startTime,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCcnCrossBorderFlowMonitor.
 */
export interface GetCcnCrossBorderFlowMonitorArgs {
    ccnId: string;
    ccnUin: string;
    destinationRegion: string;
    endTime: string;
    id?: string;
    period: number;
    resultOutputFile?: string;
    sourceRegion: string;
    startTime: string;
}

/**
 * A collection of values returned by getCcnCrossBorderFlowMonitor.
 */
export interface GetCcnCrossBorderFlowMonitorResult {
    readonly ccnId: string;
    readonly ccnUin: string;
    readonly crossBorderFlowMonitorDatas: outputs.GetCcnCrossBorderFlowMonitorCrossBorderFlowMonitorData[];
    readonly destinationRegion: string;
    readonly endTime: string;
    readonly id: string;
    readonly period: number;
    readonly resultOutputFile?: string;
    readonly sourceRegion: string;
    readonly startTime: string;
}
export function getCcnCrossBorderFlowMonitorOutput(args: GetCcnCrossBorderFlowMonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCcnCrossBorderFlowMonitorResult> {
    return pulumi.output(args).apply((a: any) => getCcnCrossBorderFlowMonitor(a, opts))
}

/**
 * A collection of arguments for invoking getCcnCrossBorderFlowMonitor.
 */
export interface GetCcnCrossBorderFlowMonitorOutputArgs {
    ccnId: pulumi.Input<string>;
    ccnUin: pulumi.Input<string>;
    destinationRegion: pulumi.Input<string>;
    endTime: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    period: pulumi.Input<number>;
    resultOutputFile?: pulumi.Input<string>;
    sourceRegion: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}
