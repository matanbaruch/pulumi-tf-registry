// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ClsExport extends pulumi.CustomResource {
    /**
     * Get an existing ClsExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClsExportState, opts?: pulumi.CustomResourceOptions): ClsExport {
        return new ClsExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/clsExport:ClsExport';

    /**
     * Returns true if the given object is an instance of ClsExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClsExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClsExport.__pulumiType;
    }

    /**
     * log export format.
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * export start time.
     */
    public readonly from!: pulumi.Output<number>;
    /**
     * export amount of log.
     */
    public readonly logCount!: pulumi.Output<number>;
    /**
     * log export time sorting. desc or asc.
     */
    public readonly order!: pulumi.Output<string | undefined>;
    /**
     * export query rules.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * export end time.
     */
    public readonly to!: pulumi.Output<number>;
    /**
     * topic id.
     */
    public readonly topicId!: pulumi.Output<string>;

    /**
     * Create a ClsExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClsExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClsExportArgs | ClsExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClsExportState | undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["logCount"] = state ? state.logCount : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["to"] = state ? state.to : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        } else {
            const args = argsOrState as ClsExportArgs | undefined;
            if ((!args || args.from === undefined) && !opts.urn) {
                throw new Error("Missing required property 'from'");
            }
            if ((!args || args.logCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logCount'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.to === undefined) && !opts.urn) {
                throw new Error("Missing required property 'to'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["logCount"] = args ? args.logCount : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["to"] = args ? args.to : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClsExport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClsExport resources.
 */
export interface ClsExportState {
    /**
     * log export format.
     */
    format?: pulumi.Input<string>;
    /**
     * export start time.
     */
    from?: pulumi.Input<number>;
    /**
     * export amount of log.
     */
    logCount?: pulumi.Input<number>;
    /**
     * log export time sorting. desc or asc.
     */
    order?: pulumi.Input<string>;
    /**
     * export query rules.
     */
    query?: pulumi.Input<string>;
    /**
     * export end time.
     */
    to?: pulumi.Input<number>;
    /**
     * topic id.
     */
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClsExport resource.
 */
export interface ClsExportArgs {
    /**
     * log export format.
     */
    format?: pulumi.Input<string>;
    /**
     * export start time.
     */
    from: pulumi.Input<number>;
    /**
     * export amount of log.
     */
    logCount: pulumi.Input<number>;
    /**
     * log export time sorting. desc or asc.
     */
    order?: pulumi.Input<string>;
    /**
     * export query rules.
     */
    query: pulumi.Input<string>;
    /**
     * export end time.
     */
    to: pulumi.Input<number>;
    /**
     * topic id.
     */
    topicId: pulumi.Input<string>;
}
