// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedisAccount extends pulumi.CustomResource {
    /**
     * Get an existing RedisAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisAccountState, opts?: pulumi.CustomResourceOptions): RedisAccount {
        return new RedisAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/redisAccount:RedisAccount';

    /**
     * Returns true if the given object is an instance of RedisAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisAccount.__pulumiType;
    }

    /**
     * The account name.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
     * at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
     * d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
     */
    public readonly accountPassword!: pulumi.Output<string>;
    /**
     * The ID of instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
     */
    public readonly privilege!: pulumi.Output<string>;
    /**
     * Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
     * modifying operations.
     */
    public readonly readonlyPolicies!: pulumi.Output<string[]>;
    /**
     * Remark.
     */
    public readonly remark!: pulumi.Output<string | undefined>;

    /**
     * Create a RedisAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisAccountArgs | RedisAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisAccountState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["accountPassword"] = state ? state.accountPassword : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["privilege"] = state ? state.privilege : undefined;
            resourceInputs["readonlyPolicies"] = state ? state.readonlyPolicies : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
        } else {
            const args = argsOrState as RedisAccountArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.accountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountPassword'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.privilege === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privilege'");
            }
            if ((!args || args.readonlyPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readonlyPolicies'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["accountPassword"] = args?.accountPassword ? pulumi.secret(args.accountPassword) : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["privilege"] = args ? args.privilege : undefined;
            resourceInputs["readonlyPolicies"] = args ? args.readonlyPolicies : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedisAccount resources.
 */
export interface RedisAccountState {
    /**
     * The account name.
     */
    accountName?: pulumi.Input<string>;
    /**
     * 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
     * at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
     * d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
     */
    accountPassword?: pulumi.Input<string>;
    /**
     * The ID of instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
     */
    privilege?: pulumi.Input<string>;
    /**
     * Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
     * modifying operations.
     */
    readonlyPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remark.
     */
    remark?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisAccount resource.
 */
export interface RedisAccountArgs {
    /**
     * The account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
     * at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
     * d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
     */
    accountPassword: pulumi.Input<string>;
    /**
     * The ID of instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
     */
    privilege: pulumi.Input<string>;
    /**
     * Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
     * modifying operations.
     */
    readonlyPolicies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remark.
     */
    remark?: pulumi.Input<string>;
}
