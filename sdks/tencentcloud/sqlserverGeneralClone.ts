// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SqlserverGeneralClone extends pulumi.CustomResource {
    /**
     * Get an existing SqlserverGeneralClone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlserverGeneralCloneState, opts?: pulumi.CustomResourceOptions): SqlserverGeneralClone {
        return new SqlserverGeneralClone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/sqlserverGeneralClone:SqlserverGeneralClone';

    /**
     * Returns true if the given object is an instance of SqlserverGeneralClone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlserverGeneralClone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlserverGeneralClone.__pulumiType;
    }

    /**
     * Instance ID.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be
     * both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
     */
    public readonly newName!: pulumi.Output<string>;
    /**
     * Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline
     * migration tasks.
     */
    public readonly oldName!: pulumi.Output<string>;

    /**
     * Create a SqlserverGeneralClone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlserverGeneralCloneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlserverGeneralCloneArgs | SqlserverGeneralCloneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlserverGeneralCloneState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["newName"] = state ? state.newName : undefined;
            resourceInputs["oldName"] = state ? state.oldName : undefined;
        } else {
            const args = argsOrState as SqlserverGeneralCloneArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.newName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'newName'");
            }
            if ((!args || args.oldName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oldName'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["newName"] = args ? args.newName : undefined;
            resourceInputs["oldName"] = args ? args.oldName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlserverGeneralClone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlserverGeneralClone resources.
 */
export interface SqlserverGeneralCloneState {
    /**
     * Instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be
     * both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
     */
    newName?: pulumi.Input<string>;
    /**
     * Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline
     * migration tasks.
     */
    oldName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlserverGeneralClone resource.
 */
export interface SqlserverGeneralCloneArgs {
    /**
     * Instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be
     * both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
     */
    newName: pulumi.Input<string>;
    /**
     * Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline
     * migration tasks.
     */
    oldName: pulumi.Input<string>;
}
