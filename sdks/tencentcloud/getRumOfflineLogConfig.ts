// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRumOfflineLogConfig(args: GetRumOfflineLogConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetRumOfflineLogConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getRumOfflineLogConfig:getRumOfflineLogConfig", {
        "id": args.id,
        "projectKey": args.projectKey,
        "resultOutputFile": args.resultOutputFile,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRumOfflineLogConfig.
 */
export interface GetRumOfflineLogConfigArgs {
    id?: string;
    projectKey: string;
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getRumOfflineLogConfig.
 */
export interface GetRumOfflineLogConfigResult {
    readonly id: string;
    readonly msg: string;
    readonly projectKey: string;
    readonly resultOutputFile?: string;
    readonly uniqueIdSets: string[];
}
export function getRumOfflineLogConfigOutput(args: GetRumOfflineLogConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRumOfflineLogConfigResult> {
    return pulumi.output(args).apply((a: any) => getRumOfflineLogConfig(a, opts))
}

/**
 * A collection of arguments for invoking getRumOfflineLogConfig.
 */
export interface GetRumOfflineLogConfigOutputArgs {
    id?: pulumi.Input<string>;
    projectKey: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
}
