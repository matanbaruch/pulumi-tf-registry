// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesClusters(args?: GetKubernetesClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesClustersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getKubernetesClusters:getKubernetesClusters", {
        "clusterId": args.clusterId,
        "clusterName": args.clusterName,
        "id": args.id,
        "kubeConfigFilePrefix": args.kubeConfigFilePrefix,
        "resultOutputFile": args.resultOutputFile,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesClusters.
 */
export interface GetKubernetesClustersArgs {
    clusterId?: string;
    clusterName?: string;
    id?: string;
    kubeConfigFilePrefix?: string;
    resultOutputFile?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getKubernetesClusters.
 */
export interface GetKubernetesClustersResult {
    readonly clusterId?: string;
    readonly clusterName?: string;
    readonly id: string;
    readonly kubeConfigFilePrefix?: string;
    readonly lists: outputs.GetKubernetesClustersList[];
    readonly resultOutputFile?: string;
    readonly tags?: {[key: string]: string};
}
export function getKubernetesClustersOutput(args?: GetKubernetesClustersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesClustersResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesClusters(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesClusters.
 */
export interface GetKubernetesClustersOutputArgs {
    clusterId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    kubeConfigFilePrefix?: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
