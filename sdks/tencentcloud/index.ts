// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddressTemplateArgs, AddressTemplateState } from "./addressTemplate";
export type AddressTemplate = import("./addressTemplate").AddressTemplate;
export const AddressTemplate: typeof import("./addressTemplate").AddressTemplate = null as any;
utilities.lazyLoad(exports, ["AddressTemplate"], () => require("./addressTemplate"));

export { AddressTemplateGroupArgs, AddressTemplateGroupState } from "./addressTemplateGroup";
export type AddressTemplateGroup = import("./addressTemplateGroup").AddressTemplateGroup;
export const AddressTemplateGroup: typeof import("./addressTemplateGroup").AddressTemplateGroup = null as any;
utilities.lazyLoad(exports, ["AddressTemplateGroup"], () => require("./addressTemplateGroup"));

export { AlbServerAttachmentArgs, AlbServerAttachmentState } from "./albServerAttachment";
export type AlbServerAttachment = import("./albServerAttachment").AlbServerAttachment;
export const AlbServerAttachment: typeof import("./albServerAttachment").AlbServerAttachment = null as any;
utilities.lazyLoad(exports, ["AlbServerAttachment"], () => require("./albServerAttachment"));

export { AntiddosCcBlackWhiteIpArgs, AntiddosCcBlackWhiteIpState } from "./antiddosCcBlackWhiteIp";
export type AntiddosCcBlackWhiteIp = import("./antiddosCcBlackWhiteIp").AntiddosCcBlackWhiteIp;
export const AntiddosCcBlackWhiteIp: typeof import("./antiddosCcBlackWhiteIp").AntiddosCcBlackWhiteIp = null as any;
utilities.lazyLoad(exports, ["AntiddosCcBlackWhiteIp"], () => require("./antiddosCcBlackWhiteIp"));

export { AntiddosCcPrecisionPolicyArgs, AntiddosCcPrecisionPolicyState } from "./antiddosCcPrecisionPolicy";
export type AntiddosCcPrecisionPolicy = import("./antiddosCcPrecisionPolicy").AntiddosCcPrecisionPolicy;
export const AntiddosCcPrecisionPolicy: typeof import("./antiddosCcPrecisionPolicy").AntiddosCcPrecisionPolicy = null as any;
utilities.lazyLoad(exports, ["AntiddosCcPrecisionPolicy"], () => require("./antiddosCcPrecisionPolicy"));

export { AntiddosDdosBlackWhiteIpArgs, AntiddosDdosBlackWhiteIpState } from "./antiddosDdosBlackWhiteIp";
export type AntiddosDdosBlackWhiteIp = import("./antiddosDdosBlackWhiteIp").AntiddosDdosBlackWhiteIp;
export const AntiddosDdosBlackWhiteIp: typeof import("./antiddosDdosBlackWhiteIp").AntiddosDdosBlackWhiteIp = null as any;
utilities.lazyLoad(exports, ["AntiddosDdosBlackWhiteIp"], () => require("./antiddosDdosBlackWhiteIp"));

export { AntiddosDdosGeoIpBlockConfigArgs, AntiddosDdosGeoIpBlockConfigState } from "./antiddosDdosGeoIpBlockConfig";
export type AntiddosDdosGeoIpBlockConfig = import("./antiddosDdosGeoIpBlockConfig").AntiddosDdosGeoIpBlockConfig;
export const AntiddosDdosGeoIpBlockConfig: typeof import("./antiddosDdosGeoIpBlockConfig").AntiddosDdosGeoIpBlockConfig = null as any;
utilities.lazyLoad(exports, ["AntiddosDdosGeoIpBlockConfig"], () => require("./antiddosDdosGeoIpBlockConfig"));

export { AntiddosDdosSpeedLimitConfigArgs, AntiddosDdosSpeedLimitConfigState } from "./antiddosDdosSpeedLimitConfig";
export type AntiddosDdosSpeedLimitConfig = import("./antiddosDdosSpeedLimitConfig").AntiddosDdosSpeedLimitConfig;
export const AntiddosDdosSpeedLimitConfig: typeof import("./antiddosDdosSpeedLimitConfig").AntiddosDdosSpeedLimitConfig = null as any;
utilities.lazyLoad(exports, ["AntiddosDdosSpeedLimitConfig"], () => require("./antiddosDdosSpeedLimitConfig"));

export { AntiddosDefaultAlarmThresholdArgs, AntiddosDefaultAlarmThresholdState } from "./antiddosDefaultAlarmThreshold";
export type AntiddosDefaultAlarmThreshold = import("./antiddosDefaultAlarmThreshold").AntiddosDefaultAlarmThreshold;
export const AntiddosDefaultAlarmThreshold: typeof import("./antiddosDefaultAlarmThreshold").AntiddosDefaultAlarmThreshold = null as any;
utilities.lazyLoad(exports, ["AntiddosDefaultAlarmThreshold"], () => require("./antiddosDefaultAlarmThreshold"));

export { AntiddosIpAlarmThresholdConfigArgs, AntiddosIpAlarmThresholdConfigState } from "./antiddosIpAlarmThresholdConfig";
export type AntiddosIpAlarmThresholdConfig = import("./antiddosIpAlarmThresholdConfig").AntiddosIpAlarmThresholdConfig;
export const AntiddosIpAlarmThresholdConfig: typeof import("./antiddosIpAlarmThresholdConfig").AntiddosIpAlarmThresholdConfig = null as any;
utilities.lazyLoad(exports, ["AntiddosIpAlarmThresholdConfig"], () => require("./antiddosIpAlarmThresholdConfig"));

export { AntiddosPacketFilterConfigArgs, AntiddosPacketFilterConfigState } from "./antiddosPacketFilterConfig";
export type AntiddosPacketFilterConfig = import("./antiddosPacketFilterConfig").AntiddosPacketFilterConfig;
export const AntiddosPacketFilterConfig: typeof import("./antiddosPacketFilterConfig").AntiddosPacketFilterConfig = null as any;
utilities.lazyLoad(exports, ["AntiddosPacketFilterConfig"], () => require("./antiddosPacketFilterConfig"));

export { AntiddosPortAclConfigArgs, AntiddosPortAclConfigState } from "./antiddosPortAclConfig";
export type AntiddosPortAclConfig = import("./antiddosPortAclConfig").AntiddosPortAclConfig;
export const AntiddosPortAclConfig: typeof import("./antiddosPortAclConfig").AntiddosPortAclConfig = null as any;
utilities.lazyLoad(exports, ["AntiddosPortAclConfig"], () => require("./antiddosPortAclConfig"));

export { AntiddosSchedulingDomainUserNameArgs, AntiddosSchedulingDomainUserNameState } from "./antiddosSchedulingDomainUserName";
export type AntiddosSchedulingDomainUserName = import("./antiddosSchedulingDomainUserName").AntiddosSchedulingDomainUserName;
export const AntiddosSchedulingDomainUserName: typeof import("./antiddosSchedulingDomainUserName").AntiddosSchedulingDomainUserName = null as any;
utilities.lazyLoad(exports, ["AntiddosSchedulingDomainUserName"], () => require("./antiddosSchedulingDomainUserName"));

export { ApiGatewayApiArgs, ApiGatewayApiState } from "./apiGatewayApi";
export type ApiGatewayApi = import("./apiGatewayApi").ApiGatewayApi;
export const ApiGatewayApi: typeof import("./apiGatewayApi").ApiGatewayApi = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApi"], () => require("./apiGatewayApi"));

export { ApiGatewayApiAppArgs, ApiGatewayApiAppState } from "./apiGatewayApiApp";
export type ApiGatewayApiApp = import("./apiGatewayApiApp").ApiGatewayApiApp;
export const ApiGatewayApiApp: typeof import("./apiGatewayApiApp").ApiGatewayApiApp = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiApp"], () => require("./apiGatewayApiApp"));

export { ApiGatewayApiAppAttachmentArgs, ApiGatewayApiAppAttachmentState } from "./apiGatewayApiAppAttachment";
export type ApiGatewayApiAppAttachment = import("./apiGatewayApiAppAttachment").ApiGatewayApiAppAttachment;
export const ApiGatewayApiAppAttachment: typeof import("./apiGatewayApiAppAttachment").ApiGatewayApiAppAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiAppAttachment"], () => require("./apiGatewayApiAppAttachment"));

export { ApiGatewayApiDocArgs, ApiGatewayApiDocState } from "./apiGatewayApiDoc";
export type ApiGatewayApiDoc = import("./apiGatewayApiDoc").ApiGatewayApiDoc;
export const ApiGatewayApiDoc: typeof import("./apiGatewayApiDoc").ApiGatewayApiDoc = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiDoc"], () => require("./apiGatewayApiDoc"));

export { ApiGatewayApiKeyArgs, ApiGatewayApiKeyState } from "./apiGatewayApiKey";
export type ApiGatewayApiKey = import("./apiGatewayApiKey").ApiGatewayApiKey;
export const ApiGatewayApiKey: typeof import("./apiGatewayApiKey").ApiGatewayApiKey = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiKey"], () => require("./apiGatewayApiKey"));

export { ApiGatewayApiKeyAttachmentArgs, ApiGatewayApiKeyAttachmentState } from "./apiGatewayApiKeyAttachment";
export type ApiGatewayApiKeyAttachment = import("./apiGatewayApiKeyAttachment").ApiGatewayApiKeyAttachment;
export const ApiGatewayApiKeyAttachment: typeof import("./apiGatewayApiKeyAttachment").ApiGatewayApiKeyAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiKeyAttachment"], () => require("./apiGatewayApiKeyAttachment"));

export { ApiGatewayCustomDomainArgs, ApiGatewayCustomDomainState } from "./apiGatewayCustomDomain";
export type ApiGatewayCustomDomain = import("./apiGatewayCustomDomain").ApiGatewayCustomDomain;
export const ApiGatewayCustomDomain: typeof import("./apiGatewayCustomDomain").ApiGatewayCustomDomain = null as any;
utilities.lazyLoad(exports, ["ApiGatewayCustomDomain"], () => require("./apiGatewayCustomDomain"));

export { ApiGatewayImportOpenApiArgs, ApiGatewayImportOpenApiState } from "./apiGatewayImportOpenApi";
export type ApiGatewayImportOpenApi = import("./apiGatewayImportOpenApi").ApiGatewayImportOpenApi;
export const ApiGatewayImportOpenApi: typeof import("./apiGatewayImportOpenApi").ApiGatewayImportOpenApi = null as any;
utilities.lazyLoad(exports, ["ApiGatewayImportOpenApi"], () => require("./apiGatewayImportOpenApi"));

export { ApiGatewayIpStrategyArgs, ApiGatewayIpStrategyState } from "./apiGatewayIpStrategy";
export type ApiGatewayIpStrategy = import("./apiGatewayIpStrategy").ApiGatewayIpStrategy;
export const ApiGatewayIpStrategy: typeof import("./apiGatewayIpStrategy").ApiGatewayIpStrategy = null as any;
utilities.lazyLoad(exports, ["ApiGatewayIpStrategy"], () => require("./apiGatewayIpStrategy"));

export { ApiGatewayPluginArgs, ApiGatewayPluginState } from "./apiGatewayPlugin";
export type ApiGatewayPlugin = import("./apiGatewayPlugin").ApiGatewayPlugin;
export const ApiGatewayPlugin: typeof import("./apiGatewayPlugin").ApiGatewayPlugin = null as any;
utilities.lazyLoad(exports, ["ApiGatewayPlugin"], () => require("./apiGatewayPlugin"));

export { ApiGatewayPluginAttachmentArgs, ApiGatewayPluginAttachmentState } from "./apiGatewayPluginAttachment";
export type ApiGatewayPluginAttachment = import("./apiGatewayPluginAttachment").ApiGatewayPluginAttachment;
export const ApiGatewayPluginAttachment: typeof import("./apiGatewayPluginAttachment").ApiGatewayPluginAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayPluginAttachment"], () => require("./apiGatewayPluginAttachment"));

export { ApiGatewayServiceArgs, ApiGatewayServiceState } from "./apiGatewayService";
export type ApiGatewayService = import("./apiGatewayService").ApiGatewayService;
export const ApiGatewayService: typeof import("./apiGatewayService").ApiGatewayService = null as any;
utilities.lazyLoad(exports, ["ApiGatewayService"], () => require("./apiGatewayService"));

export { ApiGatewayServiceReleaseArgs, ApiGatewayServiceReleaseState } from "./apiGatewayServiceRelease";
export type ApiGatewayServiceRelease = import("./apiGatewayServiceRelease").ApiGatewayServiceRelease;
export const ApiGatewayServiceRelease: typeof import("./apiGatewayServiceRelease").ApiGatewayServiceRelease = null as any;
utilities.lazyLoad(exports, ["ApiGatewayServiceRelease"], () => require("./apiGatewayServiceRelease"));

export { ApiGatewayStrategyAttachmentArgs, ApiGatewayStrategyAttachmentState } from "./apiGatewayStrategyAttachment";
export type ApiGatewayStrategyAttachment = import("./apiGatewayStrategyAttachment").ApiGatewayStrategyAttachment;
export const ApiGatewayStrategyAttachment: typeof import("./apiGatewayStrategyAttachment").ApiGatewayStrategyAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayStrategyAttachment"], () => require("./apiGatewayStrategyAttachment"));

export { ApiGatewayUpdateApiAppKeyArgs, ApiGatewayUpdateApiAppKeyState } from "./apiGatewayUpdateApiAppKey";
export type ApiGatewayUpdateApiAppKey = import("./apiGatewayUpdateApiAppKey").ApiGatewayUpdateApiAppKey;
export const ApiGatewayUpdateApiAppKey: typeof import("./apiGatewayUpdateApiAppKey").ApiGatewayUpdateApiAppKey = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUpdateApiAppKey"], () => require("./apiGatewayUpdateApiAppKey"));

export { ApiGatewayUpdateServiceArgs, ApiGatewayUpdateServiceState } from "./apiGatewayUpdateService";
export type ApiGatewayUpdateService = import("./apiGatewayUpdateService").ApiGatewayUpdateService;
export const ApiGatewayUpdateService: typeof import("./apiGatewayUpdateService").ApiGatewayUpdateService = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUpdateService"], () => require("./apiGatewayUpdateService"));

export { ApiGatewayUpstreamArgs, ApiGatewayUpstreamState } from "./apiGatewayUpstream";
export type ApiGatewayUpstream = import("./apiGatewayUpstream").ApiGatewayUpstream;
export const ApiGatewayUpstream: typeof import("./apiGatewayUpstream").ApiGatewayUpstream = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUpstream"], () => require("./apiGatewayUpstream"));

export { ApiGatewayUsagePlanArgs, ApiGatewayUsagePlanState } from "./apiGatewayUsagePlan";
export type ApiGatewayUsagePlan = import("./apiGatewayUsagePlan").ApiGatewayUsagePlan;
export const ApiGatewayUsagePlan: typeof import("./apiGatewayUsagePlan").ApiGatewayUsagePlan = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUsagePlan"], () => require("./apiGatewayUsagePlan"));

export { ApiGatewayUsagePlanAttachmentArgs, ApiGatewayUsagePlanAttachmentState } from "./apiGatewayUsagePlanAttachment";
export type ApiGatewayUsagePlanAttachment = import("./apiGatewayUsagePlanAttachment").ApiGatewayUsagePlanAttachment;
export const ApiGatewayUsagePlanAttachment: typeof import("./apiGatewayUsagePlanAttachment").ApiGatewayUsagePlanAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUsagePlanAttachment"], () => require("./apiGatewayUsagePlanAttachment"));

export { ApmInstanceArgs, ApmInstanceState } from "./apmInstance";
export type ApmInstance = import("./apmInstance").ApmInstance;
export const ApmInstance: typeof import("./apmInstance").ApmInstance = null as any;
utilities.lazyLoad(exports, ["ApmInstance"], () => require("./apmInstance"));

export { AsAttachmentArgs, AsAttachmentState } from "./asAttachment";
export type AsAttachment = import("./asAttachment").AsAttachment;
export const AsAttachment: typeof import("./asAttachment").AsAttachment = null as any;
utilities.lazyLoad(exports, ["AsAttachment"], () => require("./asAttachment"));

export { AsCompleteLifecycleArgs, AsCompleteLifecycleState } from "./asCompleteLifecycle";
export type AsCompleteLifecycle = import("./asCompleteLifecycle").AsCompleteLifecycle;
export const AsCompleteLifecycle: typeof import("./asCompleteLifecycle").AsCompleteLifecycle = null as any;
utilities.lazyLoad(exports, ["AsCompleteLifecycle"], () => require("./asCompleteLifecycle"));

export { AsExecuteScalingPolicyArgs, AsExecuteScalingPolicyState } from "./asExecuteScalingPolicy";
export type AsExecuteScalingPolicy = import("./asExecuteScalingPolicy").AsExecuteScalingPolicy;
export const AsExecuteScalingPolicy: typeof import("./asExecuteScalingPolicy").AsExecuteScalingPolicy = null as any;
utilities.lazyLoad(exports, ["AsExecuteScalingPolicy"], () => require("./asExecuteScalingPolicy"));

export { AsLifecycleHookArgs, AsLifecycleHookState } from "./asLifecycleHook";
export type AsLifecycleHook = import("./asLifecycleHook").AsLifecycleHook;
export const AsLifecycleHook: typeof import("./asLifecycleHook").AsLifecycleHook = null as any;
utilities.lazyLoad(exports, ["AsLifecycleHook"], () => require("./asLifecycleHook"));

export { AsLoadBalancerArgs, AsLoadBalancerState } from "./asLoadBalancer";
export type AsLoadBalancer = import("./asLoadBalancer").AsLoadBalancer;
export const AsLoadBalancer: typeof import("./asLoadBalancer").AsLoadBalancer = null as any;
utilities.lazyLoad(exports, ["AsLoadBalancer"], () => require("./asLoadBalancer"));

export { AsNotificationArgs, AsNotificationState } from "./asNotification";
export type AsNotification = import("./asNotification").AsNotification;
export const AsNotification: typeof import("./asNotification").AsNotification = null as any;
utilities.lazyLoad(exports, ["AsNotification"], () => require("./asNotification"));

export { AsProtectInstancesArgs, AsProtectInstancesState } from "./asProtectInstances";
export type AsProtectInstances = import("./asProtectInstances").AsProtectInstances;
export const AsProtectInstances: typeof import("./asProtectInstances").AsProtectInstances = null as any;
utilities.lazyLoad(exports, ["AsProtectInstances"], () => require("./asProtectInstances"));

export { AsRemoveInstancesArgs, AsRemoveInstancesState } from "./asRemoveInstances";
export type AsRemoveInstances = import("./asRemoveInstances").AsRemoveInstances;
export const AsRemoveInstances: typeof import("./asRemoveInstances").AsRemoveInstances = null as any;
utilities.lazyLoad(exports, ["AsRemoveInstances"], () => require("./asRemoveInstances"));

export { AsScaleInInstancesArgs, AsScaleInInstancesState } from "./asScaleInInstances";
export type AsScaleInInstances = import("./asScaleInInstances").AsScaleInInstances;
export const AsScaleInInstances: typeof import("./asScaleInInstances").AsScaleInInstances = null as any;
utilities.lazyLoad(exports, ["AsScaleInInstances"], () => require("./asScaleInInstances"));

export { AsScaleOutInstancesArgs, AsScaleOutInstancesState } from "./asScaleOutInstances";
export type AsScaleOutInstances = import("./asScaleOutInstances").AsScaleOutInstances;
export const AsScaleOutInstances: typeof import("./asScaleOutInstances").AsScaleOutInstances = null as any;
utilities.lazyLoad(exports, ["AsScaleOutInstances"], () => require("./asScaleOutInstances"));

export { AsScalingConfigArgs, AsScalingConfigState } from "./asScalingConfig";
export type AsScalingConfig = import("./asScalingConfig").AsScalingConfig;
export const AsScalingConfig: typeof import("./asScalingConfig").AsScalingConfig = null as any;
utilities.lazyLoad(exports, ["AsScalingConfig"], () => require("./asScalingConfig"));

export { AsScalingGroupArgs, AsScalingGroupState } from "./asScalingGroup";
export type AsScalingGroup = import("./asScalingGroup").AsScalingGroup;
export const AsScalingGroup: typeof import("./asScalingGroup").AsScalingGroup = null as any;
utilities.lazyLoad(exports, ["AsScalingGroup"], () => require("./asScalingGroup"));

export { AsScalingGroupStatusArgs, AsScalingGroupStatusState } from "./asScalingGroupStatus";
export type AsScalingGroupStatus = import("./asScalingGroupStatus").AsScalingGroupStatus;
export const AsScalingGroupStatus: typeof import("./asScalingGroupStatus").AsScalingGroupStatus = null as any;
utilities.lazyLoad(exports, ["AsScalingGroupStatus"], () => require("./asScalingGroupStatus"));

export { AsScalingPolicyArgs, AsScalingPolicyState } from "./asScalingPolicy";
export type AsScalingPolicy = import("./asScalingPolicy").AsScalingPolicy;
export const AsScalingPolicy: typeof import("./asScalingPolicy").AsScalingPolicy = null as any;
utilities.lazyLoad(exports, ["AsScalingPolicy"], () => require("./asScalingPolicy"));

export { AsScheduleArgs, AsScheduleState } from "./asSchedule";
export type AsSchedule = import("./asSchedule").AsSchedule;
export const AsSchedule: typeof import("./asSchedule").AsSchedule = null as any;
utilities.lazyLoad(exports, ["AsSchedule"], () => require("./asSchedule"));

export { AsStartInstancesArgs, AsStartInstancesState } from "./asStartInstances";
export type AsStartInstances = import("./asStartInstances").AsStartInstances;
export const AsStartInstances: typeof import("./asStartInstances").AsStartInstances = null as any;
utilities.lazyLoad(exports, ["AsStartInstances"], () => require("./asStartInstances"));

export { AsStopInstancesArgs, AsStopInstancesState } from "./asStopInstances";
export type AsStopInstances = import("./asStopInstances").AsStopInstances;
export const AsStopInstances: typeof import("./asStopInstances").AsStopInstances = null as any;
utilities.lazyLoad(exports, ["AsStopInstances"], () => require("./asStopInstances"));

export { AuditArgs, AuditState } from "./audit";
export type Audit = import("./audit").Audit;
export const Audit: typeof import("./audit").Audit = null as any;
utilities.lazyLoad(exports, ["Audit"], () => require("./audit"));

export { AuditTrackArgs, AuditTrackState } from "./auditTrack";
export type AuditTrack = import("./auditTrack").AuditTrack;
export const AuditTrack: typeof import("./auditTrack").AuditTrack = null as any;
utilities.lazyLoad(exports, ["AuditTrack"], () => require("./auditTrack"));

export { BiDatasourceArgs, BiDatasourceState } from "./biDatasource";
export type BiDatasource = import("./biDatasource").BiDatasource;
export const BiDatasource: typeof import("./biDatasource").BiDatasource = null as any;
utilities.lazyLoad(exports, ["BiDatasource"], () => require("./biDatasource"));

export { BiDatasourceCloudArgs, BiDatasourceCloudState } from "./biDatasourceCloud";
export type BiDatasourceCloud = import("./biDatasourceCloud").BiDatasourceCloud;
export const BiDatasourceCloud: typeof import("./biDatasourceCloud").BiDatasourceCloud = null as any;
utilities.lazyLoad(exports, ["BiDatasourceCloud"], () => require("./biDatasourceCloud"));

export { BiEmbedIntervalApplyArgs, BiEmbedIntervalApplyState } from "./biEmbedIntervalApply";
export type BiEmbedIntervalApply = import("./biEmbedIntervalApply").BiEmbedIntervalApply;
export const BiEmbedIntervalApply: typeof import("./biEmbedIntervalApply").BiEmbedIntervalApply = null as any;
utilities.lazyLoad(exports, ["BiEmbedIntervalApply"], () => require("./biEmbedIntervalApply"));

export { BiEmbedTokenApplyArgs, BiEmbedTokenApplyState } from "./biEmbedTokenApply";
export type BiEmbedTokenApply = import("./biEmbedTokenApply").BiEmbedTokenApply;
export const BiEmbedTokenApply: typeof import("./biEmbedTokenApply").BiEmbedTokenApply = null as any;
utilities.lazyLoad(exports, ["BiEmbedTokenApply"], () => require("./biEmbedTokenApply"));

export { BiProjectArgs, BiProjectState } from "./biProject";
export type BiProject = import("./biProject").BiProject;
export const BiProject: typeof import("./biProject").BiProject = null as any;
utilities.lazyLoad(exports, ["BiProject"], () => require("./biProject"));

export { BiProjectUserRoleArgs, BiProjectUserRoleState } from "./biProjectUserRole";
export type BiProjectUserRole = import("./biProjectUserRole").BiProjectUserRole;
export const BiProjectUserRole: typeof import("./biProjectUserRole").BiProjectUserRole = null as any;
utilities.lazyLoad(exports, ["BiProjectUserRole"], () => require("./biProjectUserRole"));

export { BiUserRoleArgs, BiUserRoleState } from "./biUserRole";
export type BiUserRole = import("./biUserRole").BiUserRole;
export const BiUserRole: typeof import("./biUserRole").BiUserRole = null as any;
utilities.lazyLoad(exports, ["BiUserRole"], () => require("./biUserRole"));

export { CamAccessKeyArgs, CamAccessKeyState } from "./camAccessKey";
export type CamAccessKey = import("./camAccessKey").CamAccessKey;
export const CamAccessKey: typeof import("./camAccessKey").CamAccessKey = null as any;
utilities.lazyLoad(exports, ["CamAccessKey"], () => require("./camAccessKey"));

export { CamGroupArgs, CamGroupState } from "./camGroup";
export type CamGroup = import("./camGroup").CamGroup;
export const CamGroup: typeof import("./camGroup").CamGroup = null as any;
utilities.lazyLoad(exports, ["CamGroup"], () => require("./camGroup"));

export { CamGroupMembershipArgs, CamGroupMembershipState } from "./camGroupMembership";
export type CamGroupMembership = import("./camGroupMembership").CamGroupMembership;
export const CamGroupMembership: typeof import("./camGroupMembership").CamGroupMembership = null as any;
utilities.lazyLoad(exports, ["CamGroupMembership"], () => require("./camGroupMembership"));

export { CamGroupPolicyAttachmentArgs, CamGroupPolicyAttachmentState } from "./camGroupPolicyAttachment";
export type CamGroupPolicyAttachment = import("./camGroupPolicyAttachment").CamGroupPolicyAttachment;
export const CamGroupPolicyAttachment: typeof import("./camGroupPolicyAttachment").CamGroupPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CamGroupPolicyAttachment"], () => require("./camGroupPolicyAttachment"));

export { CamMfaFlagArgs, CamMfaFlagState } from "./camMfaFlag";
export type CamMfaFlag = import("./camMfaFlag").CamMfaFlag;
export const CamMfaFlag: typeof import("./camMfaFlag").CamMfaFlag = null as any;
utilities.lazyLoad(exports, ["CamMfaFlag"], () => require("./camMfaFlag"));

export { CamOidcSsoArgs, CamOidcSsoState } from "./camOidcSso";
export type CamOidcSso = import("./camOidcSso").CamOidcSso;
export const CamOidcSso: typeof import("./camOidcSso").CamOidcSso = null as any;
utilities.lazyLoad(exports, ["CamOidcSso"], () => require("./camOidcSso"));

export { CamPolicyArgs, CamPolicyState } from "./camPolicy";
export type CamPolicy = import("./camPolicy").CamPolicy;
export const CamPolicy: typeof import("./camPolicy").CamPolicy = null as any;
utilities.lazyLoad(exports, ["CamPolicy"], () => require("./camPolicy"));

export { CamPolicyByNameArgs, CamPolicyByNameState } from "./camPolicyByName";
export type CamPolicyByName = import("./camPolicyByName").CamPolicyByName;
export const CamPolicyByName: typeof import("./camPolicyByName").CamPolicyByName = null as any;
utilities.lazyLoad(exports, ["CamPolicyByName"], () => require("./camPolicyByName"));

export { CamPolicyVersionArgs, CamPolicyVersionState } from "./camPolicyVersion";
export type CamPolicyVersion = import("./camPolicyVersion").CamPolicyVersion;
export const CamPolicyVersion: typeof import("./camPolicyVersion").CamPolicyVersion = null as any;
utilities.lazyLoad(exports, ["CamPolicyVersion"], () => require("./camPolicyVersion"));

export { CamRoleArgs, CamRoleState } from "./camRole";
export type CamRole = import("./camRole").CamRole;
export const CamRole: typeof import("./camRole").CamRole = null as any;
utilities.lazyLoad(exports, ["CamRole"], () => require("./camRole"));

export { CamRoleByNameArgs, CamRoleByNameState } from "./camRoleByName";
export type CamRoleByName = import("./camRoleByName").CamRoleByName;
export const CamRoleByName: typeof import("./camRoleByName").CamRoleByName = null as any;
utilities.lazyLoad(exports, ["CamRoleByName"], () => require("./camRoleByName"));

export { CamRolePermissionBoundaryAttachmentArgs, CamRolePermissionBoundaryAttachmentState } from "./camRolePermissionBoundaryAttachment";
export type CamRolePermissionBoundaryAttachment = import("./camRolePermissionBoundaryAttachment").CamRolePermissionBoundaryAttachment;
export const CamRolePermissionBoundaryAttachment: typeof import("./camRolePermissionBoundaryAttachment").CamRolePermissionBoundaryAttachment = null as any;
utilities.lazyLoad(exports, ["CamRolePermissionBoundaryAttachment"], () => require("./camRolePermissionBoundaryAttachment"));

export { CamRolePolicyAttachmentArgs, CamRolePolicyAttachmentState } from "./camRolePolicyAttachment";
export type CamRolePolicyAttachment = import("./camRolePolicyAttachment").CamRolePolicyAttachment;
export const CamRolePolicyAttachment: typeof import("./camRolePolicyAttachment").CamRolePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CamRolePolicyAttachment"], () => require("./camRolePolicyAttachment"));

export { CamRolePolicyAttachmentByNameArgs, CamRolePolicyAttachmentByNameState } from "./camRolePolicyAttachmentByName";
export type CamRolePolicyAttachmentByName = import("./camRolePolicyAttachmentByName").CamRolePolicyAttachmentByName;
export const CamRolePolicyAttachmentByName: typeof import("./camRolePolicyAttachmentByName").CamRolePolicyAttachmentByName = null as any;
utilities.lazyLoad(exports, ["CamRolePolicyAttachmentByName"], () => require("./camRolePolicyAttachmentByName"));

export { CamRoleSsoArgs, CamRoleSsoState } from "./camRoleSso";
export type CamRoleSso = import("./camRoleSso").CamRoleSso;
export const CamRoleSso: typeof import("./camRoleSso").CamRoleSso = null as any;
utilities.lazyLoad(exports, ["CamRoleSso"], () => require("./camRoleSso"));

export { CamSamlProviderArgs, CamSamlProviderState } from "./camSamlProvider";
export type CamSamlProvider = import("./camSamlProvider").CamSamlProvider;
export const CamSamlProvider: typeof import("./camSamlProvider").CamSamlProvider = null as any;
utilities.lazyLoad(exports, ["CamSamlProvider"], () => require("./camSamlProvider"));

export { CamServiceLinkedRoleArgs, CamServiceLinkedRoleState } from "./camServiceLinkedRole";
export type CamServiceLinkedRole = import("./camServiceLinkedRole").CamServiceLinkedRole;
export const CamServiceLinkedRole: typeof import("./camServiceLinkedRole").CamServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["CamServiceLinkedRole"], () => require("./camServiceLinkedRole"));

export { CamSetPolicyVersionConfigArgs, CamSetPolicyVersionConfigState } from "./camSetPolicyVersionConfig";
export type CamSetPolicyVersionConfig = import("./camSetPolicyVersionConfig").CamSetPolicyVersionConfig;
export const CamSetPolicyVersionConfig: typeof import("./camSetPolicyVersionConfig").CamSetPolicyVersionConfig = null as any;
utilities.lazyLoad(exports, ["CamSetPolicyVersionConfig"], () => require("./camSetPolicyVersionConfig"));

export { CamTagRoleAttachmentArgs, CamTagRoleAttachmentState } from "./camTagRoleAttachment";
export type CamTagRoleAttachment = import("./camTagRoleAttachment").CamTagRoleAttachment;
export const CamTagRoleAttachment: typeof import("./camTagRoleAttachment").CamTagRoleAttachment = null as any;
utilities.lazyLoad(exports, ["CamTagRoleAttachment"], () => require("./camTagRoleAttachment"));

export { CamUserArgs, CamUserState } from "./camUser";
export type CamUser = import("./camUser").CamUser;
export const CamUser: typeof import("./camUser").CamUser = null as any;
utilities.lazyLoad(exports, ["CamUser"], () => require("./camUser"));

export { CamUserPermissionBoundaryAttachmentArgs, CamUserPermissionBoundaryAttachmentState } from "./camUserPermissionBoundaryAttachment";
export type CamUserPermissionBoundaryAttachment = import("./camUserPermissionBoundaryAttachment").CamUserPermissionBoundaryAttachment;
export const CamUserPermissionBoundaryAttachment: typeof import("./camUserPermissionBoundaryAttachment").CamUserPermissionBoundaryAttachment = null as any;
utilities.lazyLoad(exports, ["CamUserPermissionBoundaryAttachment"], () => require("./camUserPermissionBoundaryAttachment"));

export { CamUserPolicyAttachmentArgs, CamUserPolicyAttachmentState } from "./camUserPolicyAttachment";
export type CamUserPolicyAttachment = import("./camUserPolicyAttachment").CamUserPolicyAttachment;
export const CamUserPolicyAttachment: typeof import("./camUserPolicyAttachment").CamUserPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CamUserPolicyAttachment"], () => require("./camUserPolicyAttachment"));

export { CamUserSamlConfigArgs, CamUserSamlConfigState } from "./camUserSamlConfig";
export type CamUserSamlConfig = import("./camUserSamlConfig").CamUserSamlConfig;
export const CamUserSamlConfig: typeof import("./camUserSamlConfig").CamUserSamlConfig = null as any;
utilities.lazyLoad(exports, ["CamUserSamlConfig"], () => require("./camUserSamlConfig"));

export { CatTaskSetArgs, CatTaskSetState } from "./catTaskSet";
export type CatTaskSet = import("./catTaskSet").CatTaskSet;
export const CatTaskSet: typeof import("./catTaskSet").CatTaskSet = null as any;
utilities.lazyLoad(exports, ["CatTaskSet"], () => require("./catTaskSet"));

export { CbsDiskBackupArgs, CbsDiskBackupState } from "./cbsDiskBackup";
export type CbsDiskBackup = import("./cbsDiskBackup").CbsDiskBackup;
export const CbsDiskBackup: typeof import("./cbsDiskBackup").CbsDiskBackup = null as any;
utilities.lazyLoad(exports, ["CbsDiskBackup"], () => require("./cbsDiskBackup"));

export { CbsDiskBackupRollbackOperationArgs, CbsDiskBackupRollbackOperationState } from "./cbsDiskBackupRollbackOperation";
export type CbsDiskBackupRollbackOperation = import("./cbsDiskBackupRollbackOperation").CbsDiskBackupRollbackOperation;
export const CbsDiskBackupRollbackOperation: typeof import("./cbsDiskBackupRollbackOperation").CbsDiskBackupRollbackOperation = null as any;
utilities.lazyLoad(exports, ["CbsDiskBackupRollbackOperation"], () => require("./cbsDiskBackupRollbackOperation"));

export { CbsSnapshotArgs, CbsSnapshotState } from "./cbsSnapshot";
export type CbsSnapshot = import("./cbsSnapshot").CbsSnapshot;
export const CbsSnapshot: typeof import("./cbsSnapshot").CbsSnapshot = null as any;
utilities.lazyLoad(exports, ["CbsSnapshot"], () => require("./cbsSnapshot"));

export { CbsSnapshotPolicyArgs, CbsSnapshotPolicyState } from "./cbsSnapshotPolicy";
export type CbsSnapshotPolicy = import("./cbsSnapshotPolicy").CbsSnapshotPolicy;
export const CbsSnapshotPolicy: typeof import("./cbsSnapshotPolicy").CbsSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["CbsSnapshotPolicy"], () => require("./cbsSnapshotPolicy"));

export { CbsSnapshotPolicyAttachmentArgs, CbsSnapshotPolicyAttachmentState } from "./cbsSnapshotPolicyAttachment";
export type CbsSnapshotPolicyAttachment = import("./cbsSnapshotPolicyAttachment").CbsSnapshotPolicyAttachment;
export const CbsSnapshotPolicyAttachment: typeof import("./cbsSnapshotPolicyAttachment").CbsSnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CbsSnapshotPolicyAttachment"], () => require("./cbsSnapshotPolicyAttachment"));

export { CbsSnapshotSharePermissionArgs, CbsSnapshotSharePermissionState } from "./cbsSnapshotSharePermission";
export type CbsSnapshotSharePermission = import("./cbsSnapshotSharePermission").CbsSnapshotSharePermission;
export const CbsSnapshotSharePermission: typeof import("./cbsSnapshotSharePermission").CbsSnapshotSharePermission = null as any;
utilities.lazyLoad(exports, ["CbsSnapshotSharePermission"], () => require("./cbsSnapshotSharePermission"));

export { CbsStorageArgs, CbsStorageState } from "./cbsStorage";
export type CbsStorage = import("./cbsStorage").CbsStorage;
export const CbsStorage: typeof import("./cbsStorage").CbsStorage = null as any;
utilities.lazyLoad(exports, ["CbsStorage"], () => require("./cbsStorage"));

export { CbsStorageAttachmentArgs, CbsStorageAttachmentState } from "./cbsStorageAttachment";
export type CbsStorageAttachment = import("./cbsStorageAttachment").CbsStorageAttachment;
export const CbsStorageAttachment: typeof import("./cbsStorageAttachment").CbsStorageAttachment = null as any;
utilities.lazyLoad(exports, ["CbsStorageAttachment"], () => require("./cbsStorageAttachment"));

export { CbsStorageSetArgs, CbsStorageSetState } from "./cbsStorageSet";
export type CbsStorageSet = import("./cbsStorageSet").CbsStorageSet;
export const CbsStorageSet: typeof import("./cbsStorageSet").CbsStorageSet = null as any;
utilities.lazyLoad(exports, ["CbsStorageSet"], () => require("./cbsStorageSet"));

export { CbsStorageSetAttachmentArgs, CbsStorageSetAttachmentState } from "./cbsStorageSetAttachment";
export type CbsStorageSetAttachment = import("./cbsStorageSetAttachment").CbsStorageSetAttachment;
export const CbsStorageSetAttachment: typeof import("./cbsStorageSetAttachment").CbsStorageSetAttachment = null as any;
utilities.lazyLoad(exports, ["CbsStorageSetAttachment"], () => require("./cbsStorageSetAttachment"));

export { CcnArgs, CcnState } from "./ccn";
export type Ccn = import("./ccn").Ccn;
export const Ccn: typeof import("./ccn").Ccn = null as any;
utilities.lazyLoad(exports, ["Ccn"], () => require("./ccn"));

export { CcnAttachmentArgs, CcnAttachmentState } from "./ccnAttachment";
export type CcnAttachment = import("./ccnAttachment").CcnAttachment;
export const CcnAttachment: typeof import("./ccnAttachment").CcnAttachment = null as any;
utilities.lazyLoad(exports, ["CcnAttachment"], () => require("./ccnAttachment"));

export { CcnBandwidthLimitArgs, CcnBandwidthLimitState } from "./ccnBandwidthLimit";
export type CcnBandwidthLimit = import("./ccnBandwidthLimit").CcnBandwidthLimit;
export const CcnBandwidthLimit: typeof import("./ccnBandwidthLimit").CcnBandwidthLimit = null as any;
utilities.lazyLoad(exports, ["CcnBandwidthLimit"], () => require("./ccnBandwidthLimit"));

export { CcnInstancesAcceptAttachArgs, CcnInstancesAcceptAttachState } from "./ccnInstancesAcceptAttach";
export type CcnInstancesAcceptAttach = import("./ccnInstancesAcceptAttach").CcnInstancesAcceptAttach;
export const CcnInstancesAcceptAttach: typeof import("./ccnInstancesAcceptAttach").CcnInstancesAcceptAttach = null as any;
utilities.lazyLoad(exports, ["CcnInstancesAcceptAttach"], () => require("./ccnInstancesAcceptAttach"));

export { CcnInstancesRejectAttachArgs, CcnInstancesRejectAttachState } from "./ccnInstancesRejectAttach";
export type CcnInstancesRejectAttach = import("./ccnInstancesRejectAttach").CcnInstancesRejectAttach;
export const CcnInstancesRejectAttach: typeof import("./ccnInstancesRejectAttach").CcnInstancesRejectAttach = null as any;
utilities.lazyLoad(exports, ["CcnInstancesRejectAttach"], () => require("./ccnInstancesRejectAttach"));

export { CcnInstancesResetAttachArgs, CcnInstancesResetAttachState } from "./ccnInstancesResetAttach";
export type CcnInstancesResetAttach = import("./ccnInstancesResetAttach").CcnInstancesResetAttach;
export const CcnInstancesResetAttach: typeof import("./ccnInstancesResetAttach").CcnInstancesResetAttach = null as any;
utilities.lazyLoad(exports, ["CcnInstancesResetAttach"], () => require("./ccnInstancesResetAttach"));

export { CcnRouteTableArgs, CcnRouteTableState } from "./ccnRouteTable";
export type CcnRouteTable = import("./ccnRouteTable").CcnRouteTable;
export const CcnRouteTable: typeof import("./ccnRouteTable").CcnRouteTable = null as any;
utilities.lazyLoad(exports, ["CcnRouteTable"], () => require("./ccnRouteTable"));

export { CcnRouteTableAssociateInstanceConfigArgs, CcnRouteTableAssociateInstanceConfigState } from "./ccnRouteTableAssociateInstanceConfig";
export type CcnRouteTableAssociateInstanceConfig = import("./ccnRouteTableAssociateInstanceConfig").CcnRouteTableAssociateInstanceConfig;
export const CcnRouteTableAssociateInstanceConfig: typeof import("./ccnRouteTableAssociateInstanceConfig").CcnRouteTableAssociateInstanceConfig = null as any;
utilities.lazyLoad(exports, ["CcnRouteTableAssociateInstanceConfig"], () => require("./ccnRouteTableAssociateInstanceConfig"));

export { CcnRouteTableBroadcastPoliciesArgs, CcnRouteTableBroadcastPoliciesState } from "./ccnRouteTableBroadcastPolicies";
export type CcnRouteTableBroadcastPolicies = import("./ccnRouteTableBroadcastPolicies").CcnRouteTableBroadcastPolicies;
export const CcnRouteTableBroadcastPolicies: typeof import("./ccnRouteTableBroadcastPolicies").CcnRouteTableBroadcastPolicies = null as any;
utilities.lazyLoad(exports, ["CcnRouteTableBroadcastPolicies"], () => require("./ccnRouteTableBroadcastPolicies"));

export { CcnRouteTableInputPoliciesArgs, CcnRouteTableInputPoliciesState } from "./ccnRouteTableInputPolicies";
export type CcnRouteTableInputPolicies = import("./ccnRouteTableInputPolicies").CcnRouteTableInputPolicies;
export const CcnRouteTableInputPolicies: typeof import("./ccnRouteTableInputPolicies").CcnRouteTableInputPolicies = null as any;
utilities.lazyLoad(exports, ["CcnRouteTableInputPolicies"], () => require("./ccnRouteTableInputPolicies"));

export { CcnRouteTableSelectionPoliciesArgs, CcnRouteTableSelectionPoliciesState } from "./ccnRouteTableSelectionPolicies";
export type CcnRouteTableSelectionPolicies = import("./ccnRouteTableSelectionPolicies").CcnRouteTableSelectionPolicies;
export const CcnRouteTableSelectionPolicies: typeof import("./ccnRouteTableSelectionPolicies").CcnRouteTableSelectionPolicies = null as any;
utilities.lazyLoad(exports, ["CcnRouteTableSelectionPolicies"], () => require("./ccnRouteTableSelectionPolicies"));

export { CcnRoutesArgs, CcnRoutesState } from "./ccnRoutes";
export type CcnRoutes = import("./ccnRoutes").CcnRoutes;
export const CcnRoutes: typeof import("./ccnRoutes").CcnRoutes = null as any;
utilities.lazyLoad(exports, ["CcnRoutes"], () => require("./ccnRoutes"));

export { CdcDedicatedClusterArgs, CdcDedicatedClusterState } from "./cdcDedicatedCluster";
export type CdcDedicatedCluster = import("./cdcDedicatedCluster").CdcDedicatedCluster;
export const CdcDedicatedCluster: typeof import("./cdcDedicatedCluster").CdcDedicatedCluster = null as any;
utilities.lazyLoad(exports, ["CdcDedicatedCluster"], () => require("./cdcDedicatedCluster"));

export { CdcSiteArgs, CdcSiteState } from "./cdcSite";
export type CdcSite = import("./cdcSite").CdcSite;
export const CdcSite: typeof import("./cdcSite").CdcSite = null as any;
utilities.lazyLoad(exports, ["CdcSite"], () => require("./cdcSite"));

export { CdhInstanceArgs, CdhInstanceState } from "./cdhInstance";
export type CdhInstance = import("./cdhInstance").CdhInstance;
export const CdhInstance: typeof import("./cdhInstance").CdhInstance = null as any;
utilities.lazyLoad(exports, ["CdhInstance"], () => require("./cdhInstance"));

export { CdnDomainArgs, CdnDomainState } from "./cdnDomain";
export type CdnDomain = import("./cdnDomain").CdnDomain;
export const CdnDomain: typeof import("./cdnDomain").CdnDomain = null as any;
utilities.lazyLoad(exports, ["CdnDomain"], () => require("./cdnDomain"));

export { CdnUrlPurgeArgs, CdnUrlPurgeState } from "./cdnUrlPurge";
export type CdnUrlPurge = import("./cdnUrlPurge").CdnUrlPurge;
export const CdnUrlPurge: typeof import("./cdnUrlPurge").CdnUrlPurge = null as any;
utilities.lazyLoad(exports, ["CdnUrlPurge"], () => require("./cdnUrlPurge"));

export { CdnUrlPushArgs, CdnUrlPushState } from "./cdnUrlPush";
export type CdnUrlPush = import("./cdnUrlPush").CdnUrlPush;
export const CdnUrlPush: typeof import("./cdnUrlPush").CdnUrlPush = null as any;
utilities.lazyLoad(exports, ["CdnUrlPush"], () => require("./cdnUrlPush"));

export { CdwdorisInstanceArgs, CdwdorisInstanceState } from "./cdwdorisInstance";
export type CdwdorisInstance = import("./cdwdorisInstance").CdwdorisInstance;
export const CdwdorisInstance: typeof import("./cdwdorisInstance").CdwdorisInstance = null as any;
utilities.lazyLoad(exports, ["CdwdorisInstance"], () => require("./cdwdorisInstance"));

export { CdwdorisWorkloadGroupArgs, CdwdorisWorkloadGroupState } from "./cdwdorisWorkloadGroup";
export type CdwdorisWorkloadGroup = import("./cdwdorisWorkloadGroup").CdwdorisWorkloadGroup;
export const CdwdorisWorkloadGroup: typeof import("./cdwdorisWorkloadGroup").CdwdorisWorkloadGroup = null as any;
utilities.lazyLoad(exports, ["CdwdorisWorkloadGroup"], () => require("./cdwdorisWorkloadGroup"));

export { CdwpgInstanceArgs, CdwpgInstanceState } from "./cdwpgInstance";
export type CdwpgInstance = import("./cdwpgInstance").CdwpgInstance;
export const CdwpgInstance: typeof import("./cdwpgInstance").CdwpgInstance = null as any;
utilities.lazyLoad(exports, ["CdwpgInstance"], () => require("./cdwpgInstance"));

export { CfsAccessGroupArgs, CfsAccessGroupState } from "./cfsAccessGroup";
export type CfsAccessGroup = import("./cfsAccessGroup").CfsAccessGroup;
export const CfsAccessGroup: typeof import("./cfsAccessGroup").CfsAccessGroup = null as any;
utilities.lazyLoad(exports, ["CfsAccessGroup"], () => require("./cfsAccessGroup"));

export { CfsAccessRuleArgs, CfsAccessRuleState } from "./cfsAccessRule";
export type CfsAccessRule = import("./cfsAccessRule").CfsAccessRule;
export const CfsAccessRule: typeof import("./cfsAccessRule").CfsAccessRule = null as any;
utilities.lazyLoad(exports, ["CfsAccessRule"], () => require("./cfsAccessRule"));

export { CfsAutoSnapshotPolicyArgs, CfsAutoSnapshotPolicyState } from "./cfsAutoSnapshotPolicy";
export type CfsAutoSnapshotPolicy = import("./cfsAutoSnapshotPolicy").CfsAutoSnapshotPolicy;
export const CfsAutoSnapshotPolicy: typeof import("./cfsAutoSnapshotPolicy").CfsAutoSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["CfsAutoSnapshotPolicy"], () => require("./cfsAutoSnapshotPolicy"));

export { CfsAutoSnapshotPolicyAttachmentArgs, CfsAutoSnapshotPolicyAttachmentState } from "./cfsAutoSnapshotPolicyAttachment";
export type CfsAutoSnapshotPolicyAttachment = import("./cfsAutoSnapshotPolicyAttachment").CfsAutoSnapshotPolicyAttachment;
export const CfsAutoSnapshotPolicyAttachment: typeof import("./cfsAutoSnapshotPolicyAttachment").CfsAutoSnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CfsAutoSnapshotPolicyAttachment"], () => require("./cfsAutoSnapshotPolicyAttachment"));

export { CfsFileSystemArgs, CfsFileSystemState } from "./cfsFileSystem";
export type CfsFileSystem = import("./cfsFileSystem").CfsFileSystem;
export const CfsFileSystem: typeof import("./cfsFileSystem").CfsFileSystem = null as any;
utilities.lazyLoad(exports, ["CfsFileSystem"], () => require("./cfsFileSystem"));

export { CfsSignUpCfsServiceArgs, CfsSignUpCfsServiceState } from "./cfsSignUpCfsService";
export type CfsSignUpCfsService = import("./cfsSignUpCfsService").CfsSignUpCfsService;
export const CfsSignUpCfsService: typeof import("./cfsSignUpCfsService").CfsSignUpCfsService = null as any;
utilities.lazyLoad(exports, ["CfsSignUpCfsService"], () => require("./cfsSignUpCfsService"));

export { CfsSnapshotArgs, CfsSnapshotState } from "./cfsSnapshot";
export type CfsSnapshot = import("./cfsSnapshot").CfsSnapshot;
export const CfsSnapshot: typeof import("./cfsSnapshot").CfsSnapshot = null as any;
utilities.lazyLoad(exports, ["CfsSnapshot"], () => require("./cfsSnapshot"));

export { CfsUserQuotaArgs, CfsUserQuotaState } from "./cfsUserQuota";
export type CfsUserQuota = import("./cfsUserQuota").CfsUserQuota;
export const CfsUserQuota: typeof import("./cfsUserQuota").CfsUserQuota = null as any;
utilities.lazyLoad(exports, ["CfsUserQuota"], () => require("./cfsUserQuota"));

export { CfwAddressTemplateArgs, CfwAddressTemplateState } from "./cfwAddressTemplate";
export type CfwAddressTemplate = import("./cfwAddressTemplate").CfwAddressTemplate;
export const CfwAddressTemplate: typeof import("./cfwAddressTemplate").CfwAddressTemplate = null as any;
utilities.lazyLoad(exports, ["CfwAddressTemplate"], () => require("./cfwAddressTemplate"));

export { CfwBlockIgnoreArgs, CfwBlockIgnoreState } from "./cfwBlockIgnore";
export type CfwBlockIgnore = import("./cfwBlockIgnore").CfwBlockIgnore;
export const CfwBlockIgnore: typeof import("./cfwBlockIgnore").CfwBlockIgnore = null as any;
utilities.lazyLoad(exports, ["CfwBlockIgnore"], () => require("./cfwBlockIgnore"));

export { CfwEdgeFirewallSwitchArgs, CfwEdgeFirewallSwitchState } from "./cfwEdgeFirewallSwitch";
export type CfwEdgeFirewallSwitch = import("./cfwEdgeFirewallSwitch").CfwEdgeFirewallSwitch;
export const CfwEdgeFirewallSwitch: typeof import("./cfwEdgeFirewallSwitch").CfwEdgeFirewallSwitch = null as any;
utilities.lazyLoad(exports, ["CfwEdgeFirewallSwitch"], () => require("./cfwEdgeFirewallSwitch"));

export { CfwEdgePolicyArgs, CfwEdgePolicyState } from "./cfwEdgePolicy";
export type CfwEdgePolicy = import("./cfwEdgePolicy").CfwEdgePolicy;
export const CfwEdgePolicy: typeof import("./cfwEdgePolicy").CfwEdgePolicy = null as any;
utilities.lazyLoad(exports, ["CfwEdgePolicy"], () => require("./cfwEdgePolicy"));

export { CfwNatFirewallSwitchArgs, CfwNatFirewallSwitchState } from "./cfwNatFirewallSwitch";
export type CfwNatFirewallSwitch = import("./cfwNatFirewallSwitch").CfwNatFirewallSwitch;
export const CfwNatFirewallSwitch: typeof import("./cfwNatFirewallSwitch").CfwNatFirewallSwitch = null as any;
utilities.lazyLoad(exports, ["CfwNatFirewallSwitch"], () => require("./cfwNatFirewallSwitch"));

export { CfwNatInstanceArgs, CfwNatInstanceState } from "./cfwNatInstance";
export type CfwNatInstance = import("./cfwNatInstance").CfwNatInstance;
export const CfwNatInstance: typeof import("./cfwNatInstance").CfwNatInstance = null as any;
utilities.lazyLoad(exports, ["CfwNatInstance"], () => require("./cfwNatInstance"));

export { CfwNatPolicyArgs, CfwNatPolicyState } from "./cfwNatPolicy";
export type CfwNatPolicy = import("./cfwNatPolicy").CfwNatPolicy;
export const CfwNatPolicy: typeof import("./cfwNatPolicy").CfwNatPolicy = null as any;
utilities.lazyLoad(exports, ["CfwNatPolicy"], () => require("./cfwNatPolicy"));

export { CfwSyncAssetArgs, CfwSyncAssetState } from "./cfwSyncAsset";
export type CfwSyncAsset = import("./cfwSyncAsset").CfwSyncAsset;
export const CfwSyncAsset: typeof import("./cfwSyncAsset").CfwSyncAsset = null as any;
utilities.lazyLoad(exports, ["CfwSyncAsset"], () => require("./cfwSyncAsset"));

export { CfwSyncRouteArgs, CfwSyncRouteState } from "./cfwSyncRoute";
export type CfwSyncRoute = import("./cfwSyncRoute").CfwSyncRoute;
export const CfwSyncRoute: typeof import("./cfwSyncRoute").CfwSyncRoute = null as any;
utilities.lazyLoad(exports, ["CfwSyncRoute"], () => require("./cfwSyncRoute"));

export { CfwVpcFirewallSwitchArgs, CfwVpcFirewallSwitchState } from "./cfwVpcFirewallSwitch";
export type CfwVpcFirewallSwitch = import("./cfwVpcFirewallSwitch").CfwVpcFirewallSwitch;
export const CfwVpcFirewallSwitch: typeof import("./cfwVpcFirewallSwitch").CfwVpcFirewallSwitch = null as any;
utilities.lazyLoad(exports, ["CfwVpcFirewallSwitch"], () => require("./cfwVpcFirewallSwitch"));

export { CfwVpcInstanceArgs, CfwVpcInstanceState } from "./cfwVpcInstance";
export type CfwVpcInstance = import("./cfwVpcInstance").CfwVpcInstance;
export const CfwVpcInstance: typeof import("./cfwVpcInstance").CfwVpcInstance = null as any;
utilities.lazyLoad(exports, ["CfwVpcInstance"], () => require("./cfwVpcInstance"));

export { CfwVpcPolicyArgs, CfwVpcPolicyState } from "./cfwVpcPolicy";
export type CfwVpcPolicy = import("./cfwVpcPolicy").CfwVpcPolicy;
export const CfwVpcPolicy: typeof import("./cfwVpcPolicy").CfwVpcPolicy = null as any;
utilities.lazyLoad(exports, ["CfwVpcPolicy"], () => require("./cfwVpcPolicy"));

export { ChdfsAccessGroupArgs, ChdfsAccessGroupState } from "./chdfsAccessGroup";
export type ChdfsAccessGroup = import("./chdfsAccessGroup").ChdfsAccessGroup;
export const ChdfsAccessGroup: typeof import("./chdfsAccessGroup").ChdfsAccessGroup = null as any;
utilities.lazyLoad(exports, ["ChdfsAccessGroup"], () => require("./chdfsAccessGroup"));

export { ChdfsAccessRuleArgs, ChdfsAccessRuleState } from "./chdfsAccessRule";
export type ChdfsAccessRule = import("./chdfsAccessRule").ChdfsAccessRule;
export const ChdfsAccessRule: typeof import("./chdfsAccessRule").ChdfsAccessRule = null as any;
utilities.lazyLoad(exports, ["ChdfsAccessRule"], () => require("./chdfsAccessRule"));

export { ChdfsFileSystemArgs, ChdfsFileSystemState } from "./chdfsFileSystem";
export type ChdfsFileSystem = import("./chdfsFileSystem").ChdfsFileSystem;
export const ChdfsFileSystem: typeof import("./chdfsFileSystem").ChdfsFileSystem = null as any;
utilities.lazyLoad(exports, ["ChdfsFileSystem"], () => require("./chdfsFileSystem"));

export { ChdfsLifeCycleRuleArgs, ChdfsLifeCycleRuleState } from "./chdfsLifeCycleRule";
export type ChdfsLifeCycleRule = import("./chdfsLifeCycleRule").ChdfsLifeCycleRule;
export const ChdfsLifeCycleRule: typeof import("./chdfsLifeCycleRule").ChdfsLifeCycleRule = null as any;
utilities.lazyLoad(exports, ["ChdfsLifeCycleRule"], () => require("./chdfsLifeCycleRule"));

export { ChdfsMountPointArgs, ChdfsMountPointState } from "./chdfsMountPoint";
export type ChdfsMountPoint = import("./chdfsMountPoint").ChdfsMountPoint;
export const ChdfsMountPoint: typeof import("./chdfsMountPoint").ChdfsMountPoint = null as any;
utilities.lazyLoad(exports, ["ChdfsMountPoint"], () => require("./chdfsMountPoint"));

export { ChdfsMountPointAttachmentArgs, ChdfsMountPointAttachmentState } from "./chdfsMountPointAttachment";
export type ChdfsMountPointAttachment = import("./chdfsMountPointAttachment").ChdfsMountPointAttachment;
export const ChdfsMountPointAttachment: typeof import("./chdfsMountPointAttachment").ChdfsMountPointAttachment = null as any;
utilities.lazyLoad(exports, ["ChdfsMountPointAttachment"], () => require("./chdfsMountPointAttachment"));

export { CiBucketAttachmentArgs, CiBucketAttachmentState } from "./ciBucketAttachment";
export type CiBucketAttachment = import("./ciBucketAttachment").CiBucketAttachment;
export const CiBucketAttachment: typeof import("./ciBucketAttachment").CiBucketAttachment = null as any;
utilities.lazyLoad(exports, ["CiBucketAttachment"], () => require("./ciBucketAttachment"));

export { CiBucketPicStyleArgs, CiBucketPicStyleState } from "./ciBucketPicStyle";
export type CiBucketPicStyle = import("./ciBucketPicStyle").CiBucketPicStyle;
export const CiBucketPicStyle: typeof import("./ciBucketPicStyle").CiBucketPicStyle = null as any;
utilities.lazyLoad(exports, ["CiBucketPicStyle"], () => require("./ciBucketPicStyle"));

export { CiGuetzliArgs, CiGuetzliState } from "./ciGuetzli";
export type CiGuetzli = import("./ciGuetzli").CiGuetzli;
export const CiGuetzli: typeof import("./ciGuetzli").CiGuetzli = null as any;
utilities.lazyLoad(exports, ["CiGuetzli"], () => require("./ciGuetzli"));

export { CiHotLinkArgs, CiHotLinkState } from "./ciHotLink";
export type CiHotLink = import("./ciHotLink").CiHotLink;
export const CiHotLink: typeof import("./ciHotLink").CiHotLink = null as any;
utilities.lazyLoad(exports, ["CiHotLink"], () => require("./ciHotLink"));

export { CiMediaAnimationTemplateArgs, CiMediaAnimationTemplateState } from "./ciMediaAnimationTemplate";
export type CiMediaAnimationTemplate = import("./ciMediaAnimationTemplate").CiMediaAnimationTemplate;
export const CiMediaAnimationTemplate: typeof import("./ciMediaAnimationTemplate").CiMediaAnimationTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaAnimationTemplate"], () => require("./ciMediaAnimationTemplate"));

export { CiMediaConcatTemplateArgs, CiMediaConcatTemplateState } from "./ciMediaConcatTemplate";
export type CiMediaConcatTemplate = import("./ciMediaConcatTemplate").CiMediaConcatTemplate;
export const CiMediaConcatTemplate: typeof import("./ciMediaConcatTemplate").CiMediaConcatTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaConcatTemplate"], () => require("./ciMediaConcatTemplate"));

export { CiMediaPicProcessTemplateArgs, CiMediaPicProcessTemplateState } from "./ciMediaPicProcessTemplate";
export type CiMediaPicProcessTemplate = import("./ciMediaPicProcessTemplate").CiMediaPicProcessTemplate;
export const CiMediaPicProcessTemplate: typeof import("./ciMediaPicProcessTemplate").CiMediaPicProcessTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaPicProcessTemplate"], () => require("./ciMediaPicProcessTemplate"));

export { CiMediaSmartCoverTemplateArgs, CiMediaSmartCoverTemplateState } from "./ciMediaSmartCoverTemplate";
export type CiMediaSmartCoverTemplate = import("./ciMediaSmartCoverTemplate").CiMediaSmartCoverTemplate;
export const CiMediaSmartCoverTemplate: typeof import("./ciMediaSmartCoverTemplate").CiMediaSmartCoverTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaSmartCoverTemplate"], () => require("./ciMediaSmartCoverTemplate"));

export { CiMediaSnapshotTemplateArgs, CiMediaSnapshotTemplateState } from "./ciMediaSnapshotTemplate";
export type CiMediaSnapshotTemplate = import("./ciMediaSnapshotTemplate").CiMediaSnapshotTemplate;
export const CiMediaSnapshotTemplate: typeof import("./ciMediaSnapshotTemplate").CiMediaSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaSnapshotTemplate"], () => require("./ciMediaSnapshotTemplate"));

export { CiMediaSpeechRecognitionTemplateArgs, CiMediaSpeechRecognitionTemplateState } from "./ciMediaSpeechRecognitionTemplate";
export type CiMediaSpeechRecognitionTemplate = import("./ciMediaSpeechRecognitionTemplate").CiMediaSpeechRecognitionTemplate;
export const CiMediaSpeechRecognitionTemplate: typeof import("./ciMediaSpeechRecognitionTemplate").CiMediaSpeechRecognitionTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaSpeechRecognitionTemplate"], () => require("./ciMediaSpeechRecognitionTemplate"));

export { CiMediaSuperResolutionTemplateArgs, CiMediaSuperResolutionTemplateState } from "./ciMediaSuperResolutionTemplate";
export type CiMediaSuperResolutionTemplate = import("./ciMediaSuperResolutionTemplate").CiMediaSuperResolutionTemplate;
export const CiMediaSuperResolutionTemplate: typeof import("./ciMediaSuperResolutionTemplate").CiMediaSuperResolutionTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaSuperResolutionTemplate"], () => require("./ciMediaSuperResolutionTemplate"));

export { CiMediaTranscodeProTemplateArgs, CiMediaTranscodeProTemplateState } from "./ciMediaTranscodeProTemplate";
export type CiMediaTranscodeProTemplate = import("./ciMediaTranscodeProTemplate").CiMediaTranscodeProTemplate;
export const CiMediaTranscodeProTemplate: typeof import("./ciMediaTranscodeProTemplate").CiMediaTranscodeProTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaTranscodeProTemplate"], () => require("./ciMediaTranscodeProTemplate"));

export { CiMediaTranscodeTemplateArgs, CiMediaTranscodeTemplateState } from "./ciMediaTranscodeTemplate";
export type CiMediaTranscodeTemplate = import("./ciMediaTranscodeTemplate").CiMediaTranscodeTemplate;
export const CiMediaTranscodeTemplate: typeof import("./ciMediaTranscodeTemplate").CiMediaTranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaTranscodeTemplate"], () => require("./ciMediaTranscodeTemplate"));

export { CiMediaTtsTemplateArgs, CiMediaTtsTemplateState } from "./ciMediaTtsTemplate";
export type CiMediaTtsTemplate = import("./ciMediaTtsTemplate").CiMediaTtsTemplate;
export const CiMediaTtsTemplate: typeof import("./ciMediaTtsTemplate").CiMediaTtsTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaTtsTemplate"], () => require("./ciMediaTtsTemplate"));

export { CiMediaVideoMontageTemplateArgs, CiMediaVideoMontageTemplateState } from "./ciMediaVideoMontageTemplate";
export type CiMediaVideoMontageTemplate = import("./ciMediaVideoMontageTemplate").CiMediaVideoMontageTemplate;
export const CiMediaVideoMontageTemplate: typeof import("./ciMediaVideoMontageTemplate").CiMediaVideoMontageTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaVideoMontageTemplate"], () => require("./ciMediaVideoMontageTemplate"));

export { CiMediaVideoProcessTemplateArgs, CiMediaVideoProcessTemplateState } from "./ciMediaVideoProcessTemplate";
export type CiMediaVideoProcessTemplate = import("./ciMediaVideoProcessTemplate").CiMediaVideoProcessTemplate;
export const CiMediaVideoProcessTemplate: typeof import("./ciMediaVideoProcessTemplate").CiMediaVideoProcessTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaVideoProcessTemplate"], () => require("./ciMediaVideoProcessTemplate"));

export { CiMediaVoiceSeparateTemplateArgs, CiMediaVoiceSeparateTemplateState } from "./ciMediaVoiceSeparateTemplate";
export type CiMediaVoiceSeparateTemplate = import("./ciMediaVoiceSeparateTemplate").CiMediaVoiceSeparateTemplate;
export const CiMediaVoiceSeparateTemplate: typeof import("./ciMediaVoiceSeparateTemplate").CiMediaVoiceSeparateTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaVoiceSeparateTemplate"], () => require("./ciMediaVoiceSeparateTemplate"));

export { CiMediaWatermarkTemplateArgs, CiMediaWatermarkTemplateState } from "./ciMediaWatermarkTemplate";
export type CiMediaWatermarkTemplate = import("./ciMediaWatermarkTemplate").CiMediaWatermarkTemplate;
export const CiMediaWatermarkTemplate: typeof import("./ciMediaWatermarkTemplate").CiMediaWatermarkTemplate = null as any;
utilities.lazyLoad(exports, ["CiMediaWatermarkTemplate"], () => require("./ciMediaWatermarkTemplate"));

export { CiOriginalImageProtectionArgs, CiOriginalImageProtectionState } from "./ciOriginalImageProtection";
export type CiOriginalImageProtection = import("./ciOriginalImageProtection").CiOriginalImageProtection;
export const CiOriginalImageProtection: typeof import("./ciOriginalImageProtection").CiOriginalImageProtection = null as any;
utilities.lazyLoad(exports, ["CiOriginalImageProtection"], () => require("./ciOriginalImageProtection"));

export { CiamUserGroupArgs, CiamUserGroupState } from "./ciamUserGroup";
export type CiamUserGroup = import("./ciamUserGroup").CiamUserGroup;
export const CiamUserGroup: typeof import("./ciamUserGroup").CiamUserGroup = null as any;
utilities.lazyLoad(exports, ["CiamUserGroup"], () => require("./ciamUserGroup"));

export { CiamUserStoreArgs, CiamUserStoreState } from "./ciamUserStore";
export type CiamUserStore = import("./ciamUserStore").CiamUserStore;
export const CiamUserStore: typeof import("./ciamUserStore").CiamUserStore = null as any;
utilities.lazyLoad(exports, ["CiamUserStore"], () => require("./ciamUserStore"));

export { CkafkaAclArgs, CkafkaAclState } from "./ckafkaAcl";
export type CkafkaAcl = import("./ckafkaAcl").CkafkaAcl;
export const CkafkaAcl: typeof import("./ckafkaAcl").CkafkaAcl = null as any;
utilities.lazyLoad(exports, ["CkafkaAcl"], () => require("./ckafkaAcl"));

export { CkafkaAclRuleArgs, CkafkaAclRuleState } from "./ckafkaAclRule";
export type CkafkaAclRule = import("./ckafkaAclRule").CkafkaAclRule;
export const CkafkaAclRule: typeof import("./ckafkaAclRule").CkafkaAclRule = null as any;
utilities.lazyLoad(exports, ["CkafkaAclRule"], () => require("./ckafkaAclRule"));

export { CkafkaConnectResourceArgs, CkafkaConnectResourceState } from "./ckafkaConnectResource";
export type CkafkaConnectResource = import("./ckafkaConnectResource").CkafkaConnectResource;
export const CkafkaConnectResource: typeof import("./ckafkaConnectResource").CkafkaConnectResource = null as any;
utilities.lazyLoad(exports, ["CkafkaConnectResource"], () => require("./ckafkaConnectResource"));

export { CkafkaConsumerGroupArgs, CkafkaConsumerGroupState } from "./ckafkaConsumerGroup";
export type CkafkaConsumerGroup = import("./ckafkaConsumerGroup").CkafkaConsumerGroup;
export const CkafkaConsumerGroup: typeof import("./ckafkaConsumerGroup").CkafkaConsumerGroup = null as any;
utilities.lazyLoad(exports, ["CkafkaConsumerGroup"], () => require("./ckafkaConsumerGroup"));

export { CkafkaConsumerGroupModifyOffsetArgs, CkafkaConsumerGroupModifyOffsetState } from "./ckafkaConsumerGroupModifyOffset";
export type CkafkaConsumerGroupModifyOffset = import("./ckafkaConsumerGroupModifyOffset").CkafkaConsumerGroupModifyOffset;
export const CkafkaConsumerGroupModifyOffset: typeof import("./ckafkaConsumerGroupModifyOffset").CkafkaConsumerGroupModifyOffset = null as any;
utilities.lazyLoad(exports, ["CkafkaConsumerGroupModifyOffset"], () => require("./ckafkaConsumerGroupModifyOffset"));

export { CkafkaDatahubTaskArgs, CkafkaDatahubTaskState } from "./ckafkaDatahubTask";
export type CkafkaDatahubTask = import("./ckafkaDatahubTask").CkafkaDatahubTask;
export const CkafkaDatahubTask: typeof import("./ckafkaDatahubTask").CkafkaDatahubTask = null as any;
utilities.lazyLoad(exports, ["CkafkaDatahubTask"], () => require("./ckafkaDatahubTask"));

export { CkafkaDatahubTopicArgs, CkafkaDatahubTopicState } from "./ckafkaDatahubTopic";
export type CkafkaDatahubTopic = import("./ckafkaDatahubTopic").CkafkaDatahubTopic;
export const CkafkaDatahubTopic: typeof import("./ckafkaDatahubTopic").CkafkaDatahubTopic = null as any;
utilities.lazyLoad(exports, ["CkafkaDatahubTopic"], () => require("./ckafkaDatahubTopic"));

export { CkafkaInstanceArgs, CkafkaInstanceState } from "./ckafkaInstance";
export type CkafkaInstance = import("./ckafkaInstance").CkafkaInstance;
export const CkafkaInstance: typeof import("./ckafkaInstance").CkafkaInstance = null as any;
utilities.lazyLoad(exports, ["CkafkaInstance"], () => require("./ckafkaInstance"));

export { CkafkaRenewInstanceArgs, CkafkaRenewInstanceState } from "./ckafkaRenewInstance";
export type CkafkaRenewInstance = import("./ckafkaRenewInstance").CkafkaRenewInstance;
export const CkafkaRenewInstance: typeof import("./ckafkaRenewInstance").CkafkaRenewInstance = null as any;
utilities.lazyLoad(exports, ["CkafkaRenewInstance"], () => require("./ckafkaRenewInstance"));

export { CkafkaRouteArgs, CkafkaRouteState } from "./ckafkaRoute";
export type CkafkaRoute = import("./ckafkaRoute").CkafkaRoute;
export const CkafkaRoute: typeof import("./ckafkaRoute").CkafkaRoute = null as any;
utilities.lazyLoad(exports, ["CkafkaRoute"], () => require("./ckafkaRoute"));

export { CkafkaTopicArgs, CkafkaTopicState } from "./ckafkaTopic";
export type CkafkaTopic = import("./ckafkaTopic").CkafkaTopic;
export const CkafkaTopic: typeof import("./ckafkaTopic").CkafkaTopic = null as any;
utilities.lazyLoad(exports, ["CkafkaTopic"], () => require("./ckafkaTopic"));

export { CkafkaUserArgs, CkafkaUserState } from "./ckafkaUser";
export type CkafkaUser = import("./ckafkaUser").CkafkaUser;
export const CkafkaUser: typeof import("./ckafkaUser").CkafkaUser = null as any;
utilities.lazyLoad(exports, ["CkafkaUser"], () => require("./ckafkaUser"));

export { ClbAttachmentArgs, ClbAttachmentState } from "./clbAttachment";
export type ClbAttachment = import("./clbAttachment").ClbAttachment;
export const ClbAttachment: typeof import("./clbAttachment").ClbAttachment = null as any;
utilities.lazyLoad(exports, ["ClbAttachment"], () => require("./clbAttachment"));

export { ClbCustomizedConfigArgs, ClbCustomizedConfigState } from "./clbCustomizedConfig";
export type ClbCustomizedConfig = import("./clbCustomizedConfig").ClbCustomizedConfig;
export const ClbCustomizedConfig: typeof import("./clbCustomizedConfig").ClbCustomizedConfig = null as any;
utilities.lazyLoad(exports, ["ClbCustomizedConfig"], () => require("./clbCustomizedConfig"));

export { ClbFunctionTargetsAttachmentArgs, ClbFunctionTargetsAttachmentState } from "./clbFunctionTargetsAttachment";
export type ClbFunctionTargetsAttachment = import("./clbFunctionTargetsAttachment").ClbFunctionTargetsAttachment;
export const ClbFunctionTargetsAttachment: typeof import("./clbFunctionTargetsAttachment").ClbFunctionTargetsAttachment = null as any;
utilities.lazyLoad(exports, ["ClbFunctionTargetsAttachment"], () => require("./clbFunctionTargetsAttachment"));

export { ClbInstanceArgs, ClbInstanceState } from "./clbInstance";
export type ClbInstance = import("./clbInstance").ClbInstance;
export const ClbInstance: typeof import("./clbInstance").ClbInstance = null as any;
utilities.lazyLoad(exports, ["ClbInstance"], () => require("./clbInstance"));

export { ClbInstanceMixIpTargetConfigArgs, ClbInstanceMixIpTargetConfigState } from "./clbInstanceMixIpTargetConfig";
export type ClbInstanceMixIpTargetConfig = import("./clbInstanceMixIpTargetConfig").ClbInstanceMixIpTargetConfig;
export const ClbInstanceMixIpTargetConfig: typeof import("./clbInstanceMixIpTargetConfig").ClbInstanceMixIpTargetConfig = null as any;
utilities.lazyLoad(exports, ["ClbInstanceMixIpTargetConfig"], () => require("./clbInstanceMixIpTargetConfig"));

export { ClbInstanceSlaConfigArgs, ClbInstanceSlaConfigState } from "./clbInstanceSlaConfig";
export type ClbInstanceSlaConfig = import("./clbInstanceSlaConfig").ClbInstanceSlaConfig;
export const ClbInstanceSlaConfig: typeof import("./clbInstanceSlaConfig").ClbInstanceSlaConfig = null as any;
utilities.lazyLoad(exports, ["ClbInstanceSlaConfig"], () => require("./clbInstanceSlaConfig"));

export { ClbListenerArgs, ClbListenerState } from "./clbListener";
export type ClbListener = import("./clbListener").ClbListener;
export const ClbListener: typeof import("./clbListener").ClbListener = null as any;
utilities.lazyLoad(exports, ["ClbListener"], () => require("./clbListener"));

export { ClbListenerRuleArgs, ClbListenerRuleState } from "./clbListenerRule";
export type ClbListenerRule = import("./clbListenerRule").ClbListenerRule;
export const ClbListenerRule: typeof import("./clbListenerRule").ClbListenerRule = null as any;
utilities.lazyLoad(exports, ["ClbListenerRule"], () => require("./clbListenerRule"));

export { ClbLogSetArgs, ClbLogSetState } from "./clbLogSet";
export type ClbLogSet = import("./clbLogSet").ClbLogSet;
export const ClbLogSet: typeof import("./clbLogSet").ClbLogSet = null as any;
utilities.lazyLoad(exports, ["ClbLogSet"], () => require("./clbLogSet"));

export { ClbLogTopicArgs, ClbLogTopicState } from "./clbLogTopic";
export type ClbLogTopic = import("./clbLogTopic").ClbLogTopic;
export const ClbLogTopic: typeof import("./clbLogTopic").ClbLogTopic = null as any;
utilities.lazyLoad(exports, ["ClbLogTopic"], () => require("./clbLogTopic"));

export { ClbRedirectionArgs, ClbRedirectionState } from "./clbRedirection";
export type ClbRedirection = import("./clbRedirection").ClbRedirection;
export const ClbRedirection: typeof import("./clbRedirection").ClbRedirection = null as any;
utilities.lazyLoad(exports, ["ClbRedirection"], () => require("./clbRedirection"));

export { ClbReplaceCertForLbsArgs, ClbReplaceCertForLbsState } from "./clbReplaceCertForLbs";
export type ClbReplaceCertForLbs = import("./clbReplaceCertForLbs").ClbReplaceCertForLbs;
export const ClbReplaceCertForLbs: typeof import("./clbReplaceCertForLbs").ClbReplaceCertForLbs = null as any;
utilities.lazyLoad(exports, ["ClbReplaceCertForLbs"], () => require("./clbReplaceCertForLbs"));

export { ClbSecurityGroupAttachmentArgs, ClbSecurityGroupAttachmentState } from "./clbSecurityGroupAttachment";
export type ClbSecurityGroupAttachment = import("./clbSecurityGroupAttachment").ClbSecurityGroupAttachment;
export const ClbSecurityGroupAttachment: typeof import("./clbSecurityGroupAttachment").ClbSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["ClbSecurityGroupAttachment"], () => require("./clbSecurityGroupAttachment"));

export { ClbSnatIpArgs, ClbSnatIpState } from "./clbSnatIp";
export type ClbSnatIp = import("./clbSnatIp").ClbSnatIp;
export const ClbSnatIp: typeof import("./clbSnatIp").ClbSnatIp = null as any;
utilities.lazyLoad(exports, ["ClbSnatIp"], () => require("./clbSnatIp"));

export { ClbTargetGroupArgs, ClbTargetGroupState } from "./clbTargetGroup";
export type ClbTargetGroup = import("./clbTargetGroup").ClbTargetGroup;
export const ClbTargetGroup: typeof import("./clbTargetGroup").ClbTargetGroup = null as any;
utilities.lazyLoad(exports, ["ClbTargetGroup"], () => require("./clbTargetGroup"));

export { ClbTargetGroupAttachmentArgs, ClbTargetGroupAttachmentState } from "./clbTargetGroupAttachment";
export type ClbTargetGroupAttachment = import("./clbTargetGroupAttachment").ClbTargetGroupAttachment;
export const ClbTargetGroupAttachment: typeof import("./clbTargetGroupAttachment").ClbTargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["ClbTargetGroupAttachment"], () => require("./clbTargetGroupAttachment"));

export { ClbTargetGroupAttachmentsArgs, ClbTargetGroupAttachmentsState } from "./clbTargetGroupAttachments";
export type ClbTargetGroupAttachments = import("./clbTargetGroupAttachments").ClbTargetGroupAttachments;
export const ClbTargetGroupAttachments: typeof import("./clbTargetGroupAttachments").ClbTargetGroupAttachments = null as any;
utilities.lazyLoad(exports, ["ClbTargetGroupAttachments"], () => require("./clbTargetGroupAttachments"));

export { ClbTargetGroupInstanceAttachmentArgs, ClbTargetGroupInstanceAttachmentState } from "./clbTargetGroupInstanceAttachment";
export type ClbTargetGroupInstanceAttachment = import("./clbTargetGroupInstanceAttachment").ClbTargetGroupInstanceAttachment;
export const ClbTargetGroupInstanceAttachment: typeof import("./clbTargetGroupInstanceAttachment").ClbTargetGroupInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["ClbTargetGroupInstanceAttachment"], () => require("./clbTargetGroupInstanceAttachment"));

export { ClickhouseAccountArgs, ClickhouseAccountState } from "./clickhouseAccount";
export type ClickhouseAccount = import("./clickhouseAccount").ClickhouseAccount;
export const ClickhouseAccount: typeof import("./clickhouseAccount").ClickhouseAccount = null as any;
utilities.lazyLoad(exports, ["ClickhouseAccount"], () => require("./clickhouseAccount"));

export { ClickhouseAccountPermissionArgs, ClickhouseAccountPermissionState } from "./clickhouseAccountPermission";
export type ClickhouseAccountPermission = import("./clickhouseAccountPermission").ClickhouseAccountPermission;
export const ClickhouseAccountPermission: typeof import("./clickhouseAccountPermission").ClickhouseAccountPermission = null as any;
utilities.lazyLoad(exports, ["ClickhouseAccountPermission"], () => require("./clickhouseAccountPermission"));

export { ClickhouseBackupArgs, ClickhouseBackupState } from "./clickhouseBackup";
export type ClickhouseBackup = import("./clickhouseBackup").ClickhouseBackup;
export const ClickhouseBackup: typeof import("./clickhouseBackup").ClickhouseBackup = null as any;
utilities.lazyLoad(exports, ["ClickhouseBackup"], () => require("./clickhouseBackup"));

export { ClickhouseBackupStrategyArgs, ClickhouseBackupStrategyState } from "./clickhouseBackupStrategy";
export type ClickhouseBackupStrategy = import("./clickhouseBackupStrategy").ClickhouseBackupStrategy;
export const ClickhouseBackupStrategy: typeof import("./clickhouseBackupStrategy").ClickhouseBackupStrategy = null as any;
utilities.lazyLoad(exports, ["ClickhouseBackupStrategy"], () => require("./clickhouseBackupStrategy"));

export { ClickhouseDeleteBackupDataArgs, ClickhouseDeleteBackupDataState } from "./clickhouseDeleteBackupData";
export type ClickhouseDeleteBackupData = import("./clickhouseDeleteBackupData").ClickhouseDeleteBackupData;
export const ClickhouseDeleteBackupData: typeof import("./clickhouseDeleteBackupData").ClickhouseDeleteBackupData = null as any;
utilities.lazyLoad(exports, ["ClickhouseDeleteBackupData"], () => require("./clickhouseDeleteBackupData"));

export { ClickhouseInstanceArgs, ClickhouseInstanceState } from "./clickhouseInstance";
export type ClickhouseInstance = import("./clickhouseInstance").ClickhouseInstance;
export const ClickhouseInstance: typeof import("./clickhouseInstance").ClickhouseInstance = null as any;
utilities.lazyLoad(exports, ["ClickhouseInstance"], () => require("./clickhouseInstance"));

export { ClickhouseKeyvalConfigArgs, ClickhouseKeyvalConfigState } from "./clickhouseKeyvalConfig";
export type ClickhouseKeyvalConfig = import("./clickhouseKeyvalConfig").ClickhouseKeyvalConfig;
export const ClickhouseKeyvalConfig: typeof import("./clickhouseKeyvalConfig").ClickhouseKeyvalConfig = null as any;
utilities.lazyLoad(exports, ["ClickhouseKeyvalConfig"], () => require("./clickhouseKeyvalConfig"));

export { ClickhouseRecoverBackupJobArgs, ClickhouseRecoverBackupJobState } from "./clickhouseRecoverBackupJob";
export type ClickhouseRecoverBackupJob = import("./clickhouseRecoverBackupJob").ClickhouseRecoverBackupJob;
export const ClickhouseRecoverBackupJob: typeof import("./clickhouseRecoverBackupJob").ClickhouseRecoverBackupJob = null as any;
utilities.lazyLoad(exports, ["ClickhouseRecoverBackupJob"], () => require("./clickhouseRecoverBackupJob"));

export { ClickhouseXmlConfigArgs, ClickhouseXmlConfigState } from "./clickhouseXmlConfig";
export type ClickhouseXmlConfig = import("./clickhouseXmlConfig").ClickhouseXmlConfig;
export const ClickhouseXmlConfig: typeof import("./clickhouseXmlConfig").ClickhouseXmlConfig = null as any;
utilities.lazyLoad(exports, ["ClickhouseXmlConfig"], () => require("./clickhouseXmlConfig"));

export { ClsAlarmArgs, ClsAlarmState } from "./clsAlarm";
export type ClsAlarm = import("./clsAlarm").ClsAlarm;
export const ClsAlarm: typeof import("./clsAlarm").ClsAlarm = null as any;
utilities.lazyLoad(exports, ["ClsAlarm"], () => require("./clsAlarm"));

export { ClsAlarmNoticeArgs, ClsAlarmNoticeState } from "./clsAlarmNotice";
export type ClsAlarmNotice = import("./clsAlarmNotice").ClsAlarmNotice;
export const ClsAlarmNotice: typeof import("./clsAlarmNotice").ClsAlarmNotice = null as any;
utilities.lazyLoad(exports, ["ClsAlarmNotice"], () => require("./clsAlarmNotice"));

export { ClsCkafkaConsumerArgs, ClsCkafkaConsumerState } from "./clsCkafkaConsumer";
export type ClsCkafkaConsumer = import("./clsCkafkaConsumer").ClsCkafkaConsumer;
export const ClsCkafkaConsumer: typeof import("./clsCkafkaConsumer").ClsCkafkaConsumer = null as any;
utilities.lazyLoad(exports, ["ClsCkafkaConsumer"], () => require("./clsCkafkaConsumer"));

export { ClsConfigArgs, ClsConfigState } from "./clsConfig";
export type ClsConfig = import("./clsConfig").ClsConfig;
export const ClsConfig: typeof import("./clsConfig").ClsConfig = null as any;
utilities.lazyLoad(exports, ["ClsConfig"], () => require("./clsConfig"));

export { ClsConfigAttachmentArgs, ClsConfigAttachmentState } from "./clsConfigAttachment";
export type ClsConfigAttachment = import("./clsConfigAttachment").ClsConfigAttachment;
export const ClsConfigAttachment: typeof import("./clsConfigAttachment").ClsConfigAttachment = null as any;
utilities.lazyLoad(exports, ["ClsConfigAttachment"], () => require("./clsConfigAttachment"));

export { ClsConfigExtraArgs, ClsConfigExtraState } from "./clsConfigExtra";
export type ClsConfigExtra = import("./clsConfigExtra").ClsConfigExtra;
export const ClsConfigExtra: typeof import("./clsConfigExtra").ClsConfigExtra = null as any;
utilities.lazyLoad(exports, ["ClsConfigExtra"], () => require("./clsConfigExtra"));

export { ClsCosRechargeArgs, ClsCosRechargeState } from "./clsCosRecharge";
export type ClsCosRecharge = import("./clsCosRecharge").ClsCosRecharge;
export const ClsCosRecharge: typeof import("./clsCosRecharge").ClsCosRecharge = null as any;
utilities.lazyLoad(exports, ["ClsCosRecharge"], () => require("./clsCosRecharge"));

export { ClsCosShipperArgs, ClsCosShipperState } from "./clsCosShipper";
export type ClsCosShipper = import("./clsCosShipper").ClsCosShipper;
export const ClsCosShipper: typeof import("./clsCosShipper").ClsCosShipper = null as any;
utilities.lazyLoad(exports, ["ClsCosShipper"], () => require("./clsCosShipper"));

export { ClsDataTransformArgs, ClsDataTransformState } from "./clsDataTransform";
export type ClsDataTransform = import("./clsDataTransform").ClsDataTransform;
export const ClsDataTransform: typeof import("./clsDataTransform").ClsDataTransform = null as any;
utilities.lazyLoad(exports, ["ClsDataTransform"], () => require("./clsDataTransform"));

export { ClsExportArgs, ClsExportState } from "./clsExport";
export type ClsExport = import("./clsExport").ClsExport;
export const ClsExport: typeof import("./clsExport").ClsExport = null as any;
utilities.lazyLoad(exports, ["ClsExport"], () => require("./clsExport"));

export { ClsIndexArgs, ClsIndexState } from "./clsIndex";
export type ClsIndex = import("./clsIndex").ClsIndex;
export const ClsIndex: typeof import("./clsIndex").ClsIndex = null as any;
utilities.lazyLoad(exports, ["ClsIndex"], () => require("./clsIndex"));

export { ClsKafkaRechargeArgs, ClsKafkaRechargeState } from "./clsKafkaRecharge";
export type ClsKafkaRecharge = import("./clsKafkaRecharge").ClsKafkaRecharge;
export const ClsKafkaRecharge: typeof import("./clsKafkaRecharge").ClsKafkaRecharge = null as any;
utilities.lazyLoad(exports, ["ClsKafkaRecharge"], () => require("./clsKafkaRecharge"));

export { ClsLogsetArgs, ClsLogsetState } from "./clsLogset";
export type ClsLogset = import("./clsLogset").ClsLogset;
export const ClsLogset: typeof import("./clsLogset").ClsLogset = null as any;
utilities.lazyLoad(exports, ["ClsLogset"], () => require("./clsLogset"));

export { ClsMachineGroupArgs, ClsMachineGroupState } from "./clsMachineGroup";
export type ClsMachineGroup = import("./clsMachineGroup").ClsMachineGroup;
export const ClsMachineGroup: typeof import("./clsMachineGroup").ClsMachineGroup = null as any;
utilities.lazyLoad(exports, ["ClsMachineGroup"], () => require("./clsMachineGroup"));

export { ClsScheduledSqlArgs, ClsScheduledSqlState } from "./clsScheduledSql";
export type ClsScheduledSql = import("./clsScheduledSql").ClsScheduledSql;
export const ClsScheduledSql: typeof import("./clsScheduledSql").ClsScheduledSql = null as any;
utilities.lazyLoad(exports, ["ClsScheduledSql"], () => require("./clsScheduledSql"));

export { ClsTopicArgs, ClsTopicState } from "./clsTopic";
export type ClsTopic = import("./clsTopic").ClsTopic;
export const ClsTopic: typeof import("./clsTopic").ClsTopic = null as any;
utilities.lazyLoad(exports, ["ClsTopic"], () => require("./clsTopic"));

export { ContainerClusterArgs, ContainerClusterState } from "./containerCluster";
export type ContainerCluster = import("./containerCluster").ContainerCluster;
export const ContainerCluster: typeof import("./containerCluster").ContainerCluster = null as any;
utilities.lazyLoad(exports, ["ContainerCluster"], () => require("./containerCluster"));

export { ContainerClusterInstanceArgs, ContainerClusterInstanceState } from "./containerClusterInstance";
export type ContainerClusterInstance = import("./containerClusterInstance").ContainerClusterInstance;
export const ContainerClusterInstance: typeof import("./containerClusterInstance").ContainerClusterInstance = null as any;
utilities.lazyLoad(exports, ["ContainerClusterInstance"], () => require("./containerClusterInstance"));

export { CosBatchArgs, CosBatchState } from "./cosBatch";
export type CosBatch = import("./cosBatch").CosBatch;
export const CosBatch: typeof import("./cosBatch").CosBatch = null as any;
utilities.lazyLoad(exports, ["CosBatch"], () => require("./cosBatch"));

export { CosBucketArgs, CosBucketState } from "./cosBucket";
export type CosBucket = import("./cosBucket").CosBucket;
export const CosBucket: typeof import("./cosBucket").CosBucket = null as any;
utilities.lazyLoad(exports, ["CosBucket"], () => require("./cosBucket"));

export { CosBucketDomainCertificateAttachmentArgs, CosBucketDomainCertificateAttachmentState } from "./cosBucketDomainCertificateAttachment";
export type CosBucketDomainCertificateAttachment = import("./cosBucketDomainCertificateAttachment").CosBucketDomainCertificateAttachment;
export const CosBucketDomainCertificateAttachment: typeof import("./cosBucketDomainCertificateAttachment").CosBucketDomainCertificateAttachment = null as any;
utilities.lazyLoad(exports, ["CosBucketDomainCertificateAttachment"], () => require("./cosBucketDomainCertificateAttachment"));

export { CosBucketGenerateInventoryImmediatelyOperationArgs, CosBucketGenerateInventoryImmediatelyOperationState } from "./cosBucketGenerateInventoryImmediatelyOperation";
export type CosBucketGenerateInventoryImmediatelyOperation = import("./cosBucketGenerateInventoryImmediatelyOperation").CosBucketGenerateInventoryImmediatelyOperation;
export const CosBucketGenerateInventoryImmediatelyOperation: typeof import("./cosBucketGenerateInventoryImmediatelyOperation").CosBucketGenerateInventoryImmediatelyOperation = null as any;
utilities.lazyLoad(exports, ["CosBucketGenerateInventoryImmediatelyOperation"], () => require("./cosBucketGenerateInventoryImmediatelyOperation"));

export { CosBucketInventoryArgs, CosBucketInventoryState } from "./cosBucketInventory";
export type CosBucketInventory = import("./cosBucketInventory").CosBucketInventory;
export const CosBucketInventory: typeof import("./cosBucketInventory").CosBucketInventory = null as any;
utilities.lazyLoad(exports, ["CosBucketInventory"], () => require("./cosBucketInventory"));

export { CosBucketObjectArgs, CosBucketObjectState } from "./cosBucketObject";
export type CosBucketObject = import("./cosBucketObject").CosBucketObject;
export const CosBucketObject: typeof import("./cosBucketObject").CosBucketObject = null as any;
utilities.lazyLoad(exports, ["CosBucketObject"], () => require("./cosBucketObject"));

export { CosBucketPolicyArgs, CosBucketPolicyState } from "./cosBucketPolicy";
export type CosBucketPolicy = import("./cosBucketPolicy").CosBucketPolicy;
export const CosBucketPolicy: typeof import("./cosBucketPolicy").CosBucketPolicy = null as any;
utilities.lazyLoad(exports, ["CosBucketPolicy"], () => require("./cosBucketPolicy"));

export { CosBucketRefererArgs, CosBucketRefererState } from "./cosBucketReferer";
export type CosBucketReferer = import("./cosBucketReferer").CosBucketReferer;
export const CosBucketReferer: typeof import("./cosBucketReferer").CosBucketReferer = null as any;
utilities.lazyLoad(exports, ["CosBucketReferer"], () => require("./cosBucketReferer"));

export { CosBucketVersionArgs, CosBucketVersionState } from "./cosBucketVersion";
export type CosBucketVersion = import("./cosBucketVersion").CosBucketVersion;
export const CosBucketVersion: typeof import("./cosBucketVersion").CosBucketVersion = null as any;
utilities.lazyLoad(exports, ["CosBucketVersion"], () => require("./cosBucketVersion"));

export { CosObjectAbortMultipartUploadOperationArgs, CosObjectAbortMultipartUploadOperationState } from "./cosObjectAbortMultipartUploadOperation";
export type CosObjectAbortMultipartUploadOperation = import("./cosObjectAbortMultipartUploadOperation").CosObjectAbortMultipartUploadOperation;
export const CosObjectAbortMultipartUploadOperation: typeof import("./cosObjectAbortMultipartUploadOperation").CosObjectAbortMultipartUploadOperation = null as any;
utilities.lazyLoad(exports, ["CosObjectAbortMultipartUploadOperation"], () => require("./cosObjectAbortMultipartUploadOperation"));

export { CosObjectCopyOperationArgs, CosObjectCopyOperationState } from "./cosObjectCopyOperation";
export type CosObjectCopyOperation = import("./cosObjectCopyOperation").CosObjectCopyOperation;
export const CosObjectCopyOperation: typeof import("./cosObjectCopyOperation").CosObjectCopyOperation = null as any;
utilities.lazyLoad(exports, ["CosObjectCopyOperation"], () => require("./cosObjectCopyOperation"));

export { CosObjectDownloadOperationArgs, CosObjectDownloadOperationState } from "./cosObjectDownloadOperation";
export type CosObjectDownloadOperation = import("./cosObjectDownloadOperation").CosObjectDownloadOperation;
export const CosObjectDownloadOperation: typeof import("./cosObjectDownloadOperation").CosObjectDownloadOperation = null as any;
utilities.lazyLoad(exports, ["CosObjectDownloadOperation"], () => require("./cosObjectDownloadOperation"));

export { CosObjectRestoreOperationArgs, CosObjectRestoreOperationState } from "./cosObjectRestoreOperation";
export type CosObjectRestoreOperation = import("./cosObjectRestoreOperation").CosObjectRestoreOperation;
export const CosObjectRestoreOperation: typeof import("./cosObjectRestoreOperation").CosObjectRestoreOperation = null as any;
utilities.lazyLoad(exports, ["CosObjectRestoreOperation"], () => require("./cosObjectRestoreOperation"));

export { CsipRiskCenterArgs, CsipRiskCenterState } from "./csipRiskCenter";
export type CsipRiskCenter = import("./csipRiskCenter").CsipRiskCenter;
export const CsipRiskCenter: typeof import("./csipRiskCenter").CsipRiskCenter = null as any;
utilities.lazyLoad(exports, ["CsipRiskCenter"], () => require("./csipRiskCenter"));

export { CssAuthenticateDomainOwnerOperationArgs, CssAuthenticateDomainOwnerOperationState } from "./cssAuthenticateDomainOwnerOperation";
export type CssAuthenticateDomainOwnerOperation = import("./cssAuthenticateDomainOwnerOperation").CssAuthenticateDomainOwnerOperation;
export const CssAuthenticateDomainOwnerOperation: typeof import("./cssAuthenticateDomainOwnerOperation").CssAuthenticateDomainOwnerOperation = null as any;
utilities.lazyLoad(exports, ["CssAuthenticateDomainOwnerOperation"], () => require("./cssAuthenticateDomainOwnerOperation"));

export { CssBackupStreamArgs, CssBackupStreamState } from "./cssBackupStream";
export type CssBackupStream = import("./cssBackupStream").CssBackupStream;
export const CssBackupStream: typeof import("./cssBackupStream").CssBackupStream = null as any;
utilities.lazyLoad(exports, ["CssBackupStream"], () => require("./cssBackupStream"));

export { CssCallbackRuleAttachmentArgs, CssCallbackRuleAttachmentState } from "./cssCallbackRuleAttachment";
export type CssCallbackRuleAttachment = import("./cssCallbackRuleAttachment").CssCallbackRuleAttachment;
export const CssCallbackRuleAttachment: typeof import("./cssCallbackRuleAttachment").CssCallbackRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssCallbackRuleAttachment"], () => require("./cssCallbackRuleAttachment"));

export { CssCallbackTemplateArgs, CssCallbackTemplateState } from "./cssCallbackTemplate";
export type CssCallbackTemplate = import("./cssCallbackTemplate").CssCallbackTemplate;
export const CssCallbackTemplate: typeof import("./cssCallbackTemplate").CssCallbackTemplate = null as any;
utilities.lazyLoad(exports, ["CssCallbackTemplate"], () => require("./cssCallbackTemplate"));

export { CssDomainArgs, CssDomainState } from "./cssDomain";
export type CssDomain = import("./cssDomain").CssDomain;
export const CssDomain: typeof import("./cssDomain").CssDomain = null as any;
utilities.lazyLoad(exports, ["CssDomain"], () => require("./cssDomain"));

export { CssDomainRefererArgs, CssDomainRefererState } from "./cssDomainReferer";
export type CssDomainReferer = import("./cssDomainReferer").CssDomainReferer;
export const CssDomainReferer: typeof import("./cssDomainReferer").CssDomainReferer = null as any;
utilities.lazyLoad(exports, ["CssDomainReferer"], () => require("./cssDomainReferer"));

export { CssEnableOptimalSwitchingArgs, CssEnableOptimalSwitchingState } from "./cssEnableOptimalSwitching";
export type CssEnableOptimalSwitching = import("./cssEnableOptimalSwitching").CssEnableOptimalSwitching;
export const CssEnableOptimalSwitching: typeof import("./cssEnableOptimalSwitching").CssEnableOptimalSwitching = null as any;
utilities.lazyLoad(exports, ["CssEnableOptimalSwitching"], () => require("./cssEnableOptimalSwitching"));

export { CssLiveTranscodeRuleAttachmentArgs, CssLiveTranscodeRuleAttachmentState } from "./cssLiveTranscodeRuleAttachment";
export type CssLiveTranscodeRuleAttachment = import("./cssLiveTranscodeRuleAttachment").CssLiveTranscodeRuleAttachment;
export const CssLiveTranscodeRuleAttachment: typeof import("./cssLiveTranscodeRuleAttachment").CssLiveTranscodeRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssLiveTranscodeRuleAttachment"], () => require("./cssLiveTranscodeRuleAttachment"));

export { CssLiveTranscodeTemplateArgs, CssLiveTranscodeTemplateState } from "./cssLiveTranscodeTemplate";
export type CssLiveTranscodeTemplate = import("./cssLiveTranscodeTemplate").CssLiveTranscodeTemplate;
export const CssLiveTranscodeTemplate: typeof import("./cssLiveTranscodeTemplate").CssLiveTranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["CssLiveTranscodeTemplate"], () => require("./cssLiveTranscodeTemplate"));

export { CssPadRuleAttachmentArgs, CssPadRuleAttachmentState } from "./cssPadRuleAttachment";
export type CssPadRuleAttachment = import("./cssPadRuleAttachment").CssPadRuleAttachment;
export const CssPadRuleAttachment: typeof import("./cssPadRuleAttachment").CssPadRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssPadRuleAttachment"], () => require("./cssPadRuleAttachment"));

export { CssPadTemplateArgs, CssPadTemplateState } from "./cssPadTemplate";
export type CssPadTemplate = import("./cssPadTemplate").CssPadTemplate;
export const CssPadTemplate: typeof import("./cssPadTemplate").CssPadTemplate = null as any;
utilities.lazyLoad(exports, ["CssPadTemplate"], () => require("./cssPadTemplate"));

export { CssPlayAuthKeyConfigArgs, CssPlayAuthKeyConfigState } from "./cssPlayAuthKeyConfig";
export type CssPlayAuthKeyConfig = import("./cssPlayAuthKeyConfig").CssPlayAuthKeyConfig;
export const CssPlayAuthKeyConfig: typeof import("./cssPlayAuthKeyConfig").CssPlayAuthKeyConfig = null as any;
utilities.lazyLoad(exports, ["CssPlayAuthKeyConfig"], () => require("./cssPlayAuthKeyConfig"));

export { CssPlayDomainCertAttachmentArgs, CssPlayDomainCertAttachmentState } from "./cssPlayDomainCertAttachment";
export type CssPlayDomainCertAttachment = import("./cssPlayDomainCertAttachment").CssPlayDomainCertAttachment;
export const CssPlayDomainCertAttachment: typeof import("./cssPlayDomainCertAttachment").CssPlayDomainCertAttachment = null as any;
utilities.lazyLoad(exports, ["CssPlayDomainCertAttachment"], () => require("./cssPlayDomainCertAttachment"));

export { CssPullStreamTaskArgs, CssPullStreamTaskState } from "./cssPullStreamTask";
export type CssPullStreamTask = import("./cssPullStreamTask").CssPullStreamTask;
export const CssPullStreamTask: typeof import("./cssPullStreamTask").CssPullStreamTask = null as any;
utilities.lazyLoad(exports, ["CssPullStreamTask"], () => require("./cssPullStreamTask"));

export { CssPullStreamTaskRestartArgs, CssPullStreamTaskRestartState } from "./cssPullStreamTaskRestart";
export type CssPullStreamTaskRestart = import("./cssPullStreamTaskRestart").CssPullStreamTaskRestart;
export const CssPullStreamTaskRestart: typeof import("./cssPullStreamTaskRestart").CssPullStreamTaskRestart = null as any;
utilities.lazyLoad(exports, ["CssPullStreamTaskRestart"], () => require("./cssPullStreamTaskRestart"));

export { CssPushAuthKeyConfigArgs, CssPushAuthKeyConfigState } from "./cssPushAuthKeyConfig";
export type CssPushAuthKeyConfig = import("./cssPushAuthKeyConfig").CssPushAuthKeyConfig;
export const CssPushAuthKeyConfig: typeof import("./cssPushAuthKeyConfig").CssPushAuthKeyConfig = null as any;
utilities.lazyLoad(exports, ["CssPushAuthKeyConfig"], () => require("./cssPushAuthKeyConfig"));

export { CssRecordRuleAttachmentArgs, CssRecordRuleAttachmentState } from "./cssRecordRuleAttachment";
export type CssRecordRuleAttachment = import("./cssRecordRuleAttachment").CssRecordRuleAttachment;
export const CssRecordRuleAttachment: typeof import("./cssRecordRuleAttachment").CssRecordRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssRecordRuleAttachment"], () => require("./cssRecordRuleAttachment"));

export { CssRecordTemplateArgs, CssRecordTemplateState } from "./cssRecordTemplate";
export type CssRecordTemplate = import("./cssRecordTemplate").CssRecordTemplate;
export const CssRecordTemplate: typeof import("./cssRecordTemplate").CssRecordTemplate = null as any;
utilities.lazyLoad(exports, ["CssRecordTemplate"], () => require("./cssRecordTemplate"));

export { CssSnapshotRuleAttachmentArgs, CssSnapshotRuleAttachmentState } from "./cssSnapshotRuleAttachment";
export type CssSnapshotRuleAttachment = import("./cssSnapshotRuleAttachment").CssSnapshotRuleAttachment;
export const CssSnapshotRuleAttachment: typeof import("./cssSnapshotRuleAttachment").CssSnapshotRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssSnapshotRuleAttachment"], () => require("./cssSnapshotRuleAttachment"));

export { CssSnapshotTemplateArgs, CssSnapshotTemplateState } from "./cssSnapshotTemplate";
export type CssSnapshotTemplate = import("./cssSnapshotTemplate").CssSnapshotTemplate;
export const CssSnapshotTemplate: typeof import("./cssSnapshotTemplate").CssSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["CssSnapshotTemplate"], () => require("./cssSnapshotTemplate"));

export { CssStartStreamMonitorArgs, CssStartStreamMonitorState } from "./cssStartStreamMonitor";
export type CssStartStreamMonitor = import("./cssStartStreamMonitor").CssStartStreamMonitor;
export const CssStartStreamMonitor: typeof import("./cssStartStreamMonitor").CssStartStreamMonitor = null as any;
utilities.lazyLoad(exports, ["CssStartStreamMonitor"], () => require("./cssStartStreamMonitor"));

export { CssStreamMonitorArgs, CssStreamMonitorState } from "./cssStreamMonitor";
export type CssStreamMonitor = import("./cssStreamMonitor").CssStreamMonitor;
export const CssStreamMonitor: typeof import("./cssStreamMonitor").CssStreamMonitor = null as any;
utilities.lazyLoad(exports, ["CssStreamMonitor"], () => require("./cssStreamMonitor"));

export { CssTimeshiftRuleAttachmentArgs, CssTimeshiftRuleAttachmentState } from "./cssTimeshiftRuleAttachment";
export type CssTimeshiftRuleAttachment = import("./cssTimeshiftRuleAttachment").CssTimeshiftRuleAttachment;
export const CssTimeshiftRuleAttachment: typeof import("./cssTimeshiftRuleAttachment").CssTimeshiftRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssTimeshiftRuleAttachment"], () => require("./cssTimeshiftRuleAttachment"));

export { CssTimeshiftTemplateArgs, CssTimeshiftTemplateState } from "./cssTimeshiftTemplate";
export type CssTimeshiftTemplate = import("./cssTimeshiftTemplate").CssTimeshiftTemplate;
export const CssTimeshiftTemplate: typeof import("./cssTimeshiftTemplate").CssTimeshiftTemplate = null as any;
utilities.lazyLoad(exports, ["CssTimeshiftTemplate"], () => require("./cssTimeshiftTemplate"));

export { CssWatermarkArgs, CssWatermarkState } from "./cssWatermark";
export type CssWatermark = import("./cssWatermark").CssWatermark;
export const CssWatermark: typeof import("./cssWatermark").CssWatermark = null as any;
utilities.lazyLoad(exports, ["CssWatermark"], () => require("./cssWatermark"));

export { CssWatermarkRuleAttachmentArgs, CssWatermarkRuleAttachmentState } from "./cssWatermarkRuleAttachment";
export type CssWatermarkRuleAttachment = import("./cssWatermarkRuleAttachment").CssWatermarkRuleAttachment;
export const CssWatermarkRuleAttachment: typeof import("./cssWatermarkRuleAttachment").CssWatermarkRuleAttachment = null as any;
utilities.lazyLoad(exports, ["CssWatermarkRuleAttachment"], () => require("./cssWatermarkRuleAttachment"));

export { CvmChcConfigArgs, CvmChcConfigState } from "./cvmChcConfig";
export type CvmChcConfig = import("./cvmChcConfig").CvmChcConfig;
export const CvmChcConfig: typeof import("./cvmChcConfig").CvmChcConfig = null as any;
utilities.lazyLoad(exports, ["CvmChcConfig"], () => require("./cvmChcConfig"));

export { CvmExportImagesArgs, CvmExportImagesState } from "./cvmExportImages";
export type CvmExportImages = import("./cvmExportImages").CvmExportImages;
export const CvmExportImages: typeof import("./cvmExportImages").CvmExportImages = null as any;
utilities.lazyLoad(exports, ["CvmExportImages"], () => require("./cvmExportImages"));

export { CvmHpcClusterArgs, CvmHpcClusterState } from "./cvmHpcCluster";
export type CvmHpcCluster = import("./cvmHpcCluster").CvmHpcCluster;
export const CvmHpcCluster: typeof import("./cvmHpcCluster").CvmHpcCluster = null as any;
utilities.lazyLoad(exports, ["CvmHpcCluster"], () => require("./cvmHpcCluster"));

export { CvmImageSharePermissionArgs, CvmImageSharePermissionState } from "./cvmImageSharePermission";
export type CvmImageSharePermission = import("./cvmImageSharePermission").CvmImageSharePermission;
export const CvmImageSharePermission: typeof import("./cvmImageSharePermission").CvmImageSharePermission = null as any;
utilities.lazyLoad(exports, ["CvmImageSharePermission"], () => require("./cvmImageSharePermission"));

export { CvmImportImageArgs, CvmImportImageState } from "./cvmImportImage";
export type CvmImportImage = import("./cvmImportImage").CvmImportImage;
export const CvmImportImage: typeof import("./cvmImportImage").CvmImportImage = null as any;
utilities.lazyLoad(exports, ["CvmImportImage"], () => require("./cvmImportImage"));

export { CvmLaunchTemplateArgs, CvmLaunchTemplateState } from "./cvmLaunchTemplate";
export type CvmLaunchTemplate = import("./cvmLaunchTemplate").CvmLaunchTemplate;
export const CvmLaunchTemplate: typeof import("./cvmLaunchTemplate").CvmLaunchTemplate = null as any;
utilities.lazyLoad(exports, ["CvmLaunchTemplate"], () => require("./cvmLaunchTemplate"));

export { CvmLaunchTemplateDefaultVersionArgs, CvmLaunchTemplateDefaultVersionState } from "./cvmLaunchTemplateDefaultVersion";
export type CvmLaunchTemplateDefaultVersion = import("./cvmLaunchTemplateDefaultVersion").CvmLaunchTemplateDefaultVersion;
export const CvmLaunchTemplateDefaultVersion: typeof import("./cvmLaunchTemplateDefaultVersion").CvmLaunchTemplateDefaultVersion = null as any;
utilities.lazyLoad(exports, ["CvmLaunchTemplateDefaultVersion"], () => require("./cvmLaunchTemplateDefaultVersion"));

export { CvmLaunchTemplateVersionArgs, CvmLaunchTemplateVersionState } from "./cvmLaunchTemplateVersion";
export type CvmLaunchTemplateVersion = import("./cvmLaunchTemplateVersion").CvmLaunchTemplateVersion;
export const CvmLaunchTemplateVersion: typeof import("./cvmLaunchTemplateVersion").CvmLaunchTemplateVersion = null as any;
utilities.lazyLoad(exports, ["CvmLaunchTemplateVersion"], () => require("./cvmLaunchTemplateVersion"));

export { CvmModifyInstanceDiskTypeArgs, CvmModifyInstanceDiskTypeState } from "./cvmModifyInstanceDiskType";
export type CvmModifyInstanceDiskType = import("./cvmModifyInstanceDiskType").CvmModifyInstanceDiskType;
export const CvmModifyInstanceDiskType: typeof import("./cvmModifyInstanceDiskType").CvmModifyInstanceDiskType = null as any;
utilities.lazyLoad(exports, ["CvmModifyInstanceDiskType"], () => require("./cvmModifyInstanceDiskType"));

export { CvmProgramFpgaImageArgs, CvmProgramFpgaImageState } from "./cvmProgramFpgaImage";
export type CvmProgramFpgaImage = import("./cvmProgramFpgaImage").CvmProgramFpgaImage;
export const CvmProgramFpgaImage: typeof import("./cvmProgramFpgaImage").CvmProgramFpgaImage = null as any;
utilities.lazyLoad(exports, ["CvmProgramFpgaImage"], () => require("./cvmProgramFpgaImage"));

export { CvmRebootInstanceArgs, CvmRebootInstanceState } from "./cvmRebootInstance";
export type CvmRebootInstance = import("./cvmRebootInstance").CvmRebootInstance;
export const CvmRebootInstance: typeof import("./cvmRebootInstance").CvmRebootInstance = null as any;
utilities.lazyLoad(exports, ["CvmRebootInstance"], () => require("./cvmRebootInstance"));

export { CvmRenewHostArgs, CvmRenewHostState } from "./cvmRenewHost";
export type CvmRenewHost = import("./cvmRenewHost").CvmRenewHost;
export const CvmRenewHost: typeof import("./cvmRenewHost").CvmRenewHost = null as any;
utilities.lazyLoad(exports, ["CvmRenewHost"], () => require("./cvmRenewHost"));

export { CvmRenewInstanceArgs, CvmRenewInstanceState } from "./cvmRenewInstance";
export type CvmRenewInstance = import("./cvmRenewInstance").CvmRenewInstance;
export const CvmRenewInstance: typeof import("./cvmRenewInstance").CvmRenewInstance = null as any;
utilities.lazyLoad(exports, ["CvmRenewInstance"], () => require("./cvmRenewInstance"));

export { CvmSecurityGroupAttachmentArgs, CvmSecurityGroupAttachmentState } from "./cvmSecurityGroupAttachment";
export type CvmSecurityGroupAttachment = import("./cvmSecurityGroupAttachment").CvmSecurityGroupAttachment;
export const CvmSecurityGroupAttachment: typeof import("./cvmSecurityGroupAttachment").CvmSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["CvmSecurityGroupAttachment"], () => require("./cvmSecurityGroupAttachment"));

export { CvmSyncImageArgs, CvmSyncImageState } from "./cvmSyncImage";
export type CvmSyncImage = import("./cvmSyncImage").CvmSyncImage;
export const CvmSyncImage: typeof import("./cvmSyncImage").CvmSyncImage = null as any;
utilities.lazyLoad(exports, ["CvmSyncImage"], () => require("./cvmSyncImage"));

export { CwpLicenseBindAttachmentArgs, CwpLicenseBindAttachmentState } from "./cwpLicenseBindAttachment";
export type CwpLicenseBindAttachment = import("./cwpLicenseBindAttachment").CwpLicenseBindAttachment;
export const CwpLicenseBindAttachment: typeof import("./cwpLicenseBindAttachment").CwpLicenseBindAttachment = null as any;
utilities.lazyLoad(exports, ["CwpLicenseBindAttachment"], () => require("./cwpLicenseBindAttachment"));

export { CwpLicenseOrderArgs, CwpLicenseOrderState } from "./cwpLicenseOrder";
export type CwpLicenseOrder = import("./cwpLicenseOrder").CwpLicenseOrder;
export const CwpLicenseOrder: typeof import("./cwpLicenseOrder").CwpLicenseOrder = null as any;
utilities.lazyLoad(exports, ["CwpLicenseOrder"], () => require("./cwpLicenseOrder"));

export { CynosdbAccountArgs, CynosdbAccountState } from "./cynosdbAccount";
export type CynosdbAccount = import("./cynosdbAccount").CynosdbAccount;
export const CynosdbAccount: typeof import("./cynosdbAccount").CynosdbAccount = null as any;
utilities.lazyLoad(exports, ["CynosdbAccount"], () => require("./cynosdbAccount"));

export { CynosdbAccountPrivilegesArgs, CynosdbAccountPrivilegesState } from "./cynosdbAccountPrivileges";
export type CynosdbAccountPrivileges = import("./cynosdbAccountPrivileges").CynosdbAccountPrivileges;
export const CynosdbAccountPrivileges: typeof import("./cynosdbAccountPrivileges").CynosdbAccountPrivileges = null as any;
utilities.lazyLoad(exports, ["CynosdbAccountPrivileges"], () => require("./cynosdbAccountPrivileges"));

export { CynosdbAuditLogFileArgs, CynosdbAuditLogFileState } from "./cynosdbAuditLogFile";
export type CynosdbAuditLogFile = import("./cynosdbAuditLogFile").CynosdbAuditLogFile;
export const CynosdbAuditLogFile: typeof import("./cynosdbAuditLogFile").CynosdbAuditLogFile = null as any;
utilities.lazyLoad(exports, ["CynosdbAuditLogFile"], () => require("./cynosdbAuditLogFile"));

export { CynosdbBinlogSaveDaysArgs, CynosdbBinlogSaveDaysState } from "./cynosdbBinlogSaveDays";
export type CynosdbBinlogSaveDays = import("./cynosdbBinlogSaveDays").CynosdbBinlogSaveDays;
export const CynosdbBinlogSaveDays: typeof import("./cynosdbBinlogSaveDays").CynosdbBinlogSaveDays = null as any;
utilities.lazyLoad(exports, ["CynosdbBinlogSaveDays"], () => require("./cynosdbBinlogSaveDays"));

export { CynosdbClusterArgs, CynosdbClusterState } from "./cynosdbCluster";
export type CynosdbCluster = import("./cynosdbCluster").CynosdbCluster;
export const CynosdbCluster: typeof import("./cynosdbCluster").CynosdbCluster = null as any;
utilities.lazyLoad(exports, ["CynosdbCluster"], () => require("./cynosdbCluster"));

export { CynosdbClusterDatabasesArgs, CynosdbClusterDatabasesState } from "./cynosdbClusterDatabases";
export type CynosdbClusterDatabases = import("./cynosdbClusterDatabases").CynosdbClusterDatabases;
export const CynosdbClusterDatabases: typeof import("./cynosdbClusterDatabases").CynosdbClusterDatabases = null as any;
utilities.lazyLoad(exports, ["CynosdbClusterDatabases"], () => require("./cynosdbClusterDatabases"));

export { CynosdbClusterPasswordComplexityArgs, CynosdbClusterPasswordComplexityState } from "./cynosdbClusterPasswordComplexity";
export type CynosdbClusterPasswordComplexity = import("./cynosdbClusterPasswordComplexity").CynosdbClusterPasswordComplexity;
export const CynosdbClusterPasswordComplexity: typeof import("./cynosdbClusterPasswordComplexity").CynosdbClusterPasswordComplexity = null as any;
utilities.lazyLoad(exports, ["CynosdbClusterPasswordComplexity"], () => require("./cynosdbClusterPasswordComplexity"));

export { CynosdbClusterResourcePackagesAttachmentArgs, CynosdbClusterResourcePackagesAttachmentState } from "./cynosdbClusterResourcePackagesAttachment";
export type CynosdbClusterResourcePackagesAttachment = import("./cynosdbClusterResourcePackagesAttachment").CynosdbClusterResourcePackagesAttachment;
export const CynosdbClusterResourcePackagesAttachment: typeof import("./cynosdbClusterResourcePackagesAttachment").CynosdbClusterResourcePackagesAttachment = null as any;
utilities.lazyLoad(exports, ["CynosdbClusterResourcePackagesAttachment"], () => require("./cynosdbClusterResourcePackagesAttachment"));

export { CynosdbClusterSlaveZoneArgs, CynosdbClusterSlaveZoneState } from "./cynosdbClusterSlaveZone";
export type CynosdbClusterSlaveZone = import("./cynosdbClusterSlaveZone").CynosdbClusterSlaveZone;
export const CynosdbClusterSlaveZone: typeof import("./cynosdbClusterSlaveZone").CynosdbClusterSlaveZone = null as any;
utilities.lazyLoad(exports, ["CynosdbClusterSlaveZone"], () => require("./cynosdbClusterSlaveZone"));

export { CynosdbExportInstanceErrorLogsArgs, CynosdbExportInstanceErrorLogsState } from "./cynosdbExportInstanceErrorLogs";
export type CynosdbExportInstanceErrorLogs = import("./cynosdbExportInstanceErrorLogs").CynosdbExportInstanceErrorLogs;
export const CynosdbExportInstanceErrorLogs: typeof import("./cynosdbExportInstanceErrorLogs").CynosdbExportInstanceErrorLogs = null as any;
utilities.lazyLoad(exports, ["CynosdbExportInstanceErrorLogs"], () => require("./cynosdbExportInstanceErrorLogs"));

export { CynosdbExportInstanceSlowQueriesArgs, CynosdbExportInstanceSlowQueriesState } from "./cynosdbExportInstanceSlowQueries";
export type CynosdbExportInstanceSlowQueries = import("./cynosdbExportInstanceSlowQueries").CynosdbExportInstanceSlowQueries;
export const CynosdbExportInstanceSlowQueries: typeof import("./cynosdbExportInstanceSlowQueries").CynosdbExportInstanceSlowQueries = null as any;
utilities.lazyLoad(exports, ["CynosdbExportInstanceSlowQueries"], () => require("./cynosdbExportInstanceSlowQueries"));

export { CynosdbInstanceParamArgs, CynosdbInstanceParamState } from "./cynosdbInstanceParam";
export type CynosdbInstanceParam = import("./cynosdbInstanceParam").CynosdbInstanceParam;
export const CynosdbInstanceParam: typeof import("./cynosdbInstanceParam").CynosdbInstanceParam = null as any;
utilities.lazyLoad(exports, ["CynosdbInstanceParam"], () => require("./cynosdbInstanceParam"));

export { CynosdbIsolateInstanceArgs, CynosdbIsolateInstanceState } from "./cynosdbIsolateInstance";
export type CynosdbIsolateInstance = import("./cynosdbIsolateInstance").CynosdbIsolateInstance;
export const CynosdbIsolateInstance: typeof import("./cynosdbIsolateInstance").CynosdbIsolateInstance = null as any;
utilities.lazyLoad(exports, ["CynosdbIsolateInstance"], () => require("./cynosdbIsolateInstance"));

export { CynosdbParamTemplateArgs, CynosdbParamTemplateState } from "./cynosdbParamTemplate";
export type CynosdbParamTemplate = import("./cynosdbParamTemplate").CynosdbParamTemplate;
export const CynosdbParamTemplate: typeof import("./cynosdbParamTemplate").CynosdbParamTemplate = null as any;
utilities.lazyLoad(exports, ["CynosdbParamTemplate"], () => require("./cynosdbParamTemplate"));

export { CynosdbProxyArgs, CynosdbProxyState } from "./cynosdbProxy";
export type CynosdbProxy = import("./cynosdbProxy").CynosdbProxy;
export const CynosdbProxy: typeof import("./cynosdbProxy").CynosdbProxy = null as any;
utilities.lazyLoad(exports, ["CynosdbProxy"], () => require("./cynosdbProxy"));

export { CynosdbProxyEndPointArgs, CynosdbProxyEndPointState } from "./cynosdbProxyEndPoint";
export type CynosdbProxyEndPoint = import("./cynosdbProxyEndPoint").CynosdbProxyEndPoint;
export const CynosdbProxyEndPoint: typeof import("./cynosdbProxyEndPoint").CynosdbProxyEndPoint = null as any;
utilities.lazyLoad(exports, ["CynosdbProxyEndPoint"], () => require("./cynosdbProxyEndPoint"));

export { CynosdbReadOnlyInstanceExclusiveAccessArgs, CynosdbReadOnlyInstanceExclusiveAccessState } from "./cynosdbReadOnlyInstanceExclusiveAccess";
export type CynosdbReadOnlyInstanceExclusiveAccess = import("./cynosdbReadOnlyInstanceExclusiveAccess").CynosdbReadOnlyInstanceExclusiveAccess;
export const CynosdbReadOnlyInstanceExclusiveAccess: typeof import("./cynosdbReadOnlyInstanceExclusiveAccess").CynosdbReadOnlyInstanceExclusiveAccess = null as any;
utilities.lazyLoad(exports, ["CynosdbReadOnlyInstanceExclusiveAccess"], () => require("./cynosdbReadOnlyInstanceExclusiveAccess"));

export { CynosdbReadonlyInstanceArgs, CynosdbReadonlyInstanceState } from "./cynosdbReadonlyInstance";
export type CynosdbReadonlyInstance = import("./cynosdbReadonlyInstance").CynosdbReadonlyInstance;
export const CynosdbReadonlyInstance: typeof import("./cynosdbReadonlyInstance").CynosdbReadonlyInstance = null as any;
utilities.lazyLoad(exports, ["CynosdbReadonlyInstance"], () => require("./cynosdbReadonlyInstance"));

export { CynosdbReloadProxyNodeArgs, CynosdbReloadProxyNodeState } from "./cynosdbReloadProxyNode";
export type CynosdbReloadProxyNode = import("./cynosdbReloadProxyNode").CynosdbReloadProxyNode;
export const CynosdbReloadProxyNode: typeof import("./cynosdbReloadProxyNode").CynosdbReloadProxyNode = null as any;
utilities.lazyLoad(exports, ["CynosdbReloadProxyNode"], () => require("./cynosdbReloadProxyNode"));

export { CynosdbResourcePackageArgs, CynosdbResourcePackageState } from "./cynosdbResourcePackage";
export type CynosdbResourcePackage = import("./cynosdbResourcePackage").CynosdbResourcePackage;
export const CynosdbResourcePackage: typeof import("./cynosdbResourcePackage").CynosdbResourcePackage = null as any;
utilities.lazyLoad(exports, ["CynosdbResourcePackage"], () => require("./cynosdbResourcePackage"));

export { CynosdbRestartInstanceArgs, CynosdbRestartInstanceState } from "./cynosdbRestartInstance";
export type CynosdbRestartInstance = import("./cynosdbRestartInstance").CynosdbRestartInstance;
export const CynosdbRestartInstance: typeof import("./cynosdbRestartInstance").CynosdbRestartInstance = null as any;
utilities.lazyLoad(exports, ["CynosdbRestartInstance"], () => require("./cynosdbRestartInstance"));

export { CynosdbRollBackClusterArgs, CynosdbRollBackClusterState } from "./cynosdbRollBackCluster";
export type CynosdbRollBackCluster = import("./cynosdbRollBackCluster").CynosdbRollBackCluster;
export const CynosdbRollBackCluster: typeof import("./cynosdbRollBackCluster").CynosdbRollBackCluster = null as any;
utilities.lazyLoad(exports, ["CynosdbRollBackCluster"], () => require("./cynosdbRollBackCluster"));

export { CynosdbSecurityGroupArgs, CynosdbSecurityGroupState } from "./cynosdbSecurityGroup";
export type CynosdbSecurityGroup = import("./cynosdbSecurityGroup").CynosdbSecurityGroup;
export const CynosdbSecurityGroup: typeof import("./cynosdbSecurityGroup").CynosdbSecurityGroup = null as any;
utilities.lazyLoad(exports, ["CynosdbSecurityGroup"], () => require("./cynosdbSecurityGroup"));

export { CynosdbUpgradeProxyVersionArgs, CynosdbUpgradeProxyVersionState } from "./cynosdbUpgradeProxyVersion";
export type CynosdbUpgradeProxyVersion = import("./cynosdbUpgradeProxyVersion").CynosdbUpgradeProxyVersion;
export const CynosdbUpgradeProxyVersion: typeof import("./cynosdbUpgradeProxyVersion").CynosdbUpgradeProxyVersion = null as any;
utilities.lazyLoad(exports, ["CynosdbUpgradeProxyVersion"], () => require("./cynosdbUpgradeProxyVersion"));

export { CynosdbWanArgs, CynosdbWanState } from "./cynosdbWan";
export type CynosdbWan = import("./cynosdbWan").CynosdbWan;
export const CynosdbWan: typeof import("./cynosdbWan").CynosdbWan = null as any;
utilities.lazyLoad(exports, ["CynosdbWan"], () => require("./cynosdbWan"));

export { DasbAclArgs, DasbAclState } from "./dasbAcl";
export type DasbAcl = import("./dasbAcl").DasbAcl;
export const DasbAcl: typeof import("./dasbAcl").DasbAcl = null as any;
utilities.lazyLoad(exports, ["DasbAcl"], () => require("./dasbAcl"));

export { DasbBindDeviceAccountPasswordArgs, DasbBindDeviceAccountPasswordState } from "./dasbBindDeviceAccountPassword";
export type DasbBindDeviceAccountPassword = import("./dasbBindDeviceAccountPassword").DasbBindDeviceAccountPassword;
export const DasbBindDeviceAccountPassword: typeof import("./dasbBindDeviceAccountPassword").DasbBindDeviceAccountPassword = null as any;
utilities.lazyLoad(exports, ["DasbBindDeviceAccountPassword"], () => require("./dasbBindDeviceAccountPassword"));

export { DasbBindDeviceAccountPrivateKeyArgs, DasbBindDeviceAccountPrivateKeyState } from "./dasbBindDeviceAccountPrivateKey";
export type DasbBindDeviceAccountPrivateKey = import("./dasbBindDeviceAccountPrivateKey").DasbBindDeviceAccountPrivateKey;
export const DasbBindDeviceAccountPrivateKey: typeof import("./dasbBindDeviceAccountPrivateKey").DasbBindDeviceAccountPrivateKey = null as any;
utilities.lazyLoad(exports, ["DasbBindDeviceAccountPrivateKey"], () => require("./dasbBindDeviceAccountPrivateKey"));

export { DasbBindDeviceResourceArgs, DasbBindDeviceResourceState } from "./dasbBindDeviceResource";
export type DasbBindDeviceResource = import("./dasbBindDeviceResource").DasbBindDeviceResource;
export const DasbBindDeviceResource: typeof import("./dasbBindDeviceResource").DasbBindDeviceResource = null as any;
utilities.lazyLoad(exports, ["DasbBindDeviceResource"], () => require("./dasbBindDeviceResource"));

export { DasbCmdTemplateArgs, DasbCmdTemplateState } from "./dasbCmdTemplate";
export type DasbCmdTemplate = import("./dasbCmdTemplate").DasbCmdTemplate;
export const DasbCmdTemplate: typeof import("./dasbCmdTemplate").DasbCmdTemplate = null as any;
utilities.lazyLoad(exports, ["DasbCmdTemplate"], () => require("./dasbCmdTemplate"));

export { DasbDeviceArgs, DasbDeviceState } from "./dasbDevice";
export type DasbDevice = import("./dasbDevice").DasbDevice;
export const DasbDevice: typeof import("./dasbDevice").DasbDevice = null as any;
utilities.lazyLoad(exports, ["DasbDevice"], () => require("./dasbDevice"));

export { DasbDeviceAccountArgs, DasbDeviceAccountState } from "./dasbDeviceAccount";
export type DasbDeviceAccount = import("./dasbDeviceAccount").DasbDeviceAccount;
export const DasbDeviceAccount: typeof import("./dasbDeviceAccount").DasbDeviceAccount = null as any;
utilities.lazyLoad(exports, ["DasbDeviceAccount"], () => require("./dasbDeviceAccount"));

export { DasbDeviceGroupArgs, DasbDeviceGroupState } from "./dasbDeviceGroup";
export type DasbDeviceGroup = import("./dasbDeviceGroup").DasbDeviceGroup;
export const DasbDeviceGroup: typeof import("./dasbDeviceGroup").DasbDeviceGroup = null as any;
utilities.lazyLoad(exports, ["DasbDeviceGroup"], () => require("./dasbDeviceGroup"));

export { DasbDeviceGroupMembersArgs, DasbDeviceGroupMembersState } from "./dasbDeviceGroupMembers";
export type DasbDeviceGroupMembers = import("./dasbDeviceGroupMembers").DasbDeviceGroupMembers;
export const DasbDeviceGroupMembers: typeof import("./dasbDeviceGroupMembers").DasbDeviceGroupMembers = null as any;
utilities.lazyLoad(exports, ["DasbDeviceGroupMembers"], () => require("./dasbDeviceGroupMembers"));

export { DasbResetUserArgs, DasbResetUserState } from "./dasbResetUser";
export type DasbResetUser = import("./dasbResetUser").DasbResetUser;
export const DasbResetUser: typeof import("./dasbResetUser").DasbResetUser = null as any;
utilities.lazyLoad(exports, ["DasbResetUser"], () => require("./dasbResetUser"));

export { DasbResourceArgs, DasbResourceState } from "./dasbResource";
export type DasbResource = import("./dasbResource").DasbResource;
export const DasbResource: typeof import("./dasbResource").DasbResource = null as any;
utilities.lazyLoad(exports, ["DasbResource"], () => require("./dasbResource"));

export { DasbUserArgs, DasbUserState } from "./dasbUser";
export type DasbUser = import("./dasbUser").DasbUser;
export const DasbUser: typeof import("./dasbUser").DasbUser = null as any;
utilities.lazyLoad(exports, ["DasbUser"], () => require("./dasbUser"));

export { DasbUserGroupArgs, DasbUserGroupState } from "./dasbUserGroup";
export type DasbUserGroup = import("./dasbUserGroup").DasbUserGroup;
export const DasbUserGroup: typeof import("./dasbUserGroup").DasbUserGroup = null as any;
utilities.lazyLoad(exports, ["DasbUserGroup"], () => require("./dasbUserGroup"));

export { DasbUserGroupMembersArgs, DasbUserGroupMembersState } from "./dasbUserGroupMembers";
export type DasbUserGroupMembers = import("./dasbUserGroupMembers").DasbUserGroupMembers;
export const DasbUserGroupMembers: typeof import("./dasbUserGroupMembers").DasbUserGroupMembers = null as any;
utilities.lazyLoad(exports, ["DasbUserGroupMembers"], () => require("./dasbUserGroupMembers"));

export { DayuCcHttpPolicyArgs, DayuCcHttpPolicyState } from "./dayuCcHttpPolicy";
export type DayuCcHttpPolicy = import("./dayuCcHttpPolicy").DayuCcHttpPolicy;
export const DayuCcHttpPolicy: typeof import("./dayuCcHttpPolicy").DayuCcHttpPolicy = null as any;
utilities.lazyLoad(exports, ["DayuCcHttpPolicy"], () => require("./dayuCcHttpPolicy"));

export { DayuCcHttpsPolicyArgs, DayuCcHttpsPolicyState } from "./dayuCcHttpsPolicy";
export type DayuCcHttpsPolicy = import("./dayuCcHttpsPolicy").DayuCcHttpsPolicy;
export const DayuCcHttpsPolicy: typeof import("./dayuCcHttpsPolicy").DayuCcHttpsPolicy = null as any;
utilities.lazyLoad(exports, ["DayuCcHttpsPolicy"], () => require("./dayuCcHttpsPolicy"));

export { DayuCcPolicyV2Args, DayuCcPolicyV2State } from "./dayuCcPolicyV2";
export type DayuCcPolicyV2 = import("./dayuCcPolicyV2").DayuCcPolicyV2;
export const DayuCcPolicyV2: typeof import("./dayuCcPolicyV2").DayuCcPolicyV2 = null as any;
utilities.lazyLoad(exports, ["DayuCcPolicyV2"], () => require("./dayuCcPolicyV2"));

export { DayuDdosIpAttachmentV2Args, DayuDdosIpAttachmentV2State } from "./dayuDdosIpAttachmentV2";
export type DayuDdosIpAttachmentV2 = import("./dayuDdosIpAttachmentV2").DayuDdosIpAttachmentV2;
export const DayuDdosIpAttachmentV2: typeof import("./dayuDdosIpAttachmentV2").DayuDdosIpAttachmentV2 = null as any;
utilities.lazyLoad(exports, ["DayuDdosIpAttachmentV2"], () => require("./dayuDdosIpAttachmentV2"));

export { DayuDdosPolicyArgs, DayuDdosPolicyState } from "./dayuDdosPolicy";
export type DayuDdosPolicy = import("./dayuDdosPolicy").DayuDdosPolicy;
export const DayuDdosPolicy: typeof import("./dayuDdosPolicy").DayuDdosPolicy = null as any;
utilities.lazyLoad(exports, ["DayuDdosPolicy"], () => require("./dayuDdosPolicy"));

export { DayuDdosPolicyAttachmentArgs, DayuDdosPolicyAttachmentState } from "./dayuDdosPolicyAttachment";
export type DayuDdosPolicyAttachment = import("./dayuDdosPolicyAttachment").DayuDdosPolicyAttachment;
export const DayuDdosPolicyAttachment: typeof import("./dayuDdosPolicyAttachment").DayuDdosPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["DayuDdosPolicyAttachment"], () => require("./dayuDdosPolicyAttachment"));

export { DayuDdosPolicyCaseArgs, DayuDdosPolicyCaseState } from "./dayuDdosPolicyCase";
export type DayuDdosPolicyCase = import("./dayuDdosPolicyCase").DayuDdosPolicyCase;
export const DayuDdosPolicyCase: typeof import("./dayuDdosPolicyCase").DayuDdosPolicyCase = null as any;
utilities.lazyLoad(exports, ["DayuDdosPolicyCase"], () => require("./dayuDdosPolicyCase"));

export { DayuDdosPolicyV2Args, DayuDdosPolicyV2State } from "./dayuDdosPolicyV2";
export type DayuDdosPolicyV2 = import("./dayuDdosPolicyV2").DayuDdosPolicyV2;
export const DayuDdosPolicyV2: typeof import("./dayuDdosPolicyV2").DayuDdosPolicyV2 = null as any;
utilities.lazyLoad(exports, ["DayuDdosPolicyV2"], () => require("./dayuDdosPolicyV2"));

export { DayuEipArgs, DayuEipState } from "./dayuEip";
export type DayuEip = import("./dayuEip").DayuEip;
export const DayuEip: typeof import("./dayuEip").DayuEip = null as any;
utilities.lazyLoad(exports, ["DayuEip"], () => require("./dayuEip"));

export { DayuL4RuleArgs, DayuL4RuleState } from "./dayuL4Rule";
export type DayuL4Rule = import("./dayuL4Rule").DayuL4Rule;
export const DayuL4Rule: typeof import("./dayuL4Rule").DayuL4Rule = null as any;
utilities.lazyLoad(exports, ["DayuL4Rule"], () => require("./dayuL4Rule"));

export { DayuL4RuleV2Args, DayuL4RuleV2State } from "./dayuL4RuleV2";
export type DayuL4RuleV2 = import("./dayuL4RuleV2").DayuL4RuleV2;
export const DayuL4RuleV2: typeof import("./dayuL4RuleV2").DayuL4RuleV2 = null as any;
utilities.lazyLoad(exports, ["DayuL4RuleV2"], () => require("./dayuL4RuleV2"));

export { DayuL7RuleArgs, DayuL7RuleState } from "./dayuL7Rule";
export type DayuL7Rule = import("./dayuL7Rule").DayuL7Rule;
export const DayuL7Rule: typeof import("./dayuL7Rule").DayuL7Rule = null as any;
utilities.lazyLoad(exports, ["DayuL7Rule"], () => require("./dayuL7Rule"));

export { DayuL7RuleV2Args, DayuL7RuleV2State } from "./dayuL7RuleV2";
export type DayuL7RuleV2 = import("./dayuL7RuleV2").DayuL7RuleV2;
export const DayuL7RuleV2: typeof import("./dayuL7RuleV2").DayuL7RuleV2 = null as any;
utilities.lazyLoad(exports, ["DayuL7RuleV2"], () => require("./dayuL7RuleV2"));

export { DbbrainDbDiagReportTaskArgs, DbbrainDbDiagReportTaskState } from "./dbbrainDbDiagReportTask";
export type DbbrainDbDiagReportTask = import("./dbbrainDbDiagReportTask").DbbrainDbDiagReportTask;
export const DbbrainDbDiagReportTask: typeof import("./dbbrainDbDiagReportTask").DbbrainDbDiagReportTask = null as any;
utilities.lazyLoad(exports, ["DbbrainDbDiagReportTask"], () => require("./dbbrainDbDiagReportTask"));

export { DbbrainModifyDiagDbInstanceOperationArgs, DbbrainModifyDiagDbInstanceOperationState } from "./dbbrainModifyDiagDbInstanceOperation";
export type DbbrainModifyDiagDbInstanceOperation = import("./dbbrainModifyDiagDbInstanceOperation").DbbrainModifyDiagDbInstanceOperation;
export const DbbrainModifyDiagDbInstanceOperation: typeof import("./dbbrainModifyDiagDbInstanceOperation").DbbrainModifyDiagDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["DbbrainModifyDiagDbInstanceOperation"], () => require("./dbbrainModifyDiagDbInstanceOperation"));

export { DbbrainSecurityAuditLogExportTaskArgs, DbbrainSecurityAuditLogExportTaskState } from "./dbbrainSecurityAuditLogExportTask";
export type DbbrainSecurityAuditLogExportTask = import("./dbbrainSecurityAuditLogExportTask").DbbrainSecurityAuditLogExportTask;
export const DbbrainSecurityAuditLogExportTask: typeof import("./dbbrainSecurityAuditLogExportTask").DbbrainSecurityAuditLogExportTask = null as any;
utilities.lazyLoad(exports, ["DbbrainSecurityAuditLogExportTask"], () => require("./dbbrainSecurityAuditLogExportTask"));

export { DbbrainSqlFilterArgs, DbbrainSqlFilterState } from "./dbbrainSqlFilter";
export type DbbrainSqlFilter = import("./dbbrainSqlFilter").DbbrainSqlFilter;
export const DbbrainSqlFilter: typeof import("./dbbrainSqlFilter").DbbrainSqlFilter = null as any;
utilities.lazyLoad(exports, ["DbbrainSqlFilter"], () => require("./dbbrainSqlFilter"));

export { DbbrainTdsqlAuditLogArgs, DbbrainTdsqlAuditLogState } from "./dbbrainTdsqlAuditLog";
export type DbbrainTdsqlAuditLog = import("./dbbrainTdsqlAuditLog").DbbrainTdsqlAuditLog;
export const DbbrainTdsqlAuditLog: typeof import("./dbbrainTdsqlAuditLog").DbbrainTdsqlAuditLog = null as any;
utilities.lazyLoad(exports, ["DbbrainTdsqlAuditLog"], () => require("./dbbrainTdsqlAuditLog"));

export { DcGatewayArgs, DcGatewayState } from "./dcGateway";
export type DcGateway = import("./dcGateway").DcGateway;
export const DcGateway: typeof import("./dcGateway").DcGateway = null as any;
utilities.lazyLoad(exports, ["DcGateway"], () => require("./dcGateway"));

export { DcGatewayAttachmentArgs, DcGatewayAttachmentState } from "./dcGatewayAttachment";
export type DcGatewayAttachment = import("./dcGatewayAttachment").DcGatewayAttachment;
export const DcGatewayAttachment: typeof import("./dcGatewayAttachment").DcGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["DcGatewayAttachment"], () => require("./dcGatewayAttachment"));

export { DcGatewayCcnRouteArgs, DcGatewayCcnRouteState } from "./dcGatewayCcnRoute";
export type DcGatewayCcnRoute = import("./dcGatewayCcnRoute").DcGatewayCcnRoute;
export const DcGatewayCcnRoute: typeof import("./dcGatewayCcnRoute").DcGatewayCcnRoute = null as any;
utilities.lazyLoad(exports, ["DcGatewayCcnRoute"], () => require("./dcGatewayCcnRoute"));

export { DcInstanceArgs, DcInstanceState } from "./dcInstance";
export type DcInstance = import("./dcInstance").DcInstance;
export const DcInstance: typeof import("./dcInstance").DcInstance = null as any;
utilities.lazyLoad(exports, ["DcInstance"], () => require("./dcInstance"));

export { DcInternetAddressArgs, DcInternetAddressState } from "./dcInternetAddress";
export type DcInternetAddress = import("./dcInternetAddress").DcInternetAddress;
export const DcInternetAddress: typeof import("./dcInternetAddress").DcInternetAddress = null as any;
utilities.lazyLoad(exports, ["DcInternetAddress"], () => require("./dcInternetAddress"));

export { DcInternetAddressConfigArgs, DcInternetAddressConfigState } from "./dcInternetAddressConfig";
export type DcInternetAddressConfig = import("./dcInternetAddressConfig").DcInternetAddressConfig;
export const DcInternetAddressConfig: typeof import("./dcInternetAddressConfig").DcInternetAddressConfig = null as any;
utilities.lazyLoad(exports, ["DcInternetAddressConfig"], () => require("./dcInternetAddressConfig"));

export { DcShareDcxConfigArgs, DcShareDcxConfigState } from "./dcShareDcxConfig";
export type DcShareDcxConfig = import("./dcShareDcxConfig").DcShareDcxConfig;
export const DcShareDcxConfig: typeof import("./dcShareDcxConfig").DcShareDcxConfig = null as any;
utilities.lazyLoad(exports, ["DcShareDcxConfig"], () => require("./dcShareDcxConfig"));

export { DcdbAccountArgs, DcdbAccountState } from "./dcdbAccount";
export type DcdbAccount = import("./dcdbAccount").DcdbAccount;
export const DcdbAccount: typeof import("./dcdbAccount").DcdbAccount = null as any;
utilities.lazyLoad(exports, ["DcdbAccount"], () => require("./dcdbAccount"));

export { DcdbAccountPrivilegesArgs, DcdbAccountPrivilegesState } from "./dcdbAccountPrivileges";
export type DcdbAccountPrivileges = import("./dcdbAccountPrivileges").DcdbAccountPrivileges;
export const DcdbAccountPrivileges: typeof import("./dcdbAccountPrivileges").DcdbAccountPrivileges = null as any;
utilities.lazyLoad(exports, ["DcdbAccountPrivileges"], () => require("./dcdbAccountPrivileges"));

export { DcdbActivateHourInstanceOperationArgs, DcdbActivateHourInstanceOperationState } from "./dcdbActivateHourInstanceOperation";
export type DcdbActivateHourInstanceOperation = import("./dcdbActivateHourInstanceOperation").DcdbActivateHourInstanceOperation;
export const DcdbActivateHourInstanceOperation: typeof import("./dcdbActivateHourInstanceOperation").DcdbActivateHourInstanceOperation = null as any;
utilities.lazyLoad(exports, ["DcdbActivateHourInstanceOperation"], () => require("./dcdbActivateHourInstanceOperation"));

export { DcdbCancelDcnJobOperationArgs, DcdbCancelDcnJobOperationState } from "./dcdbCancelDcnJobOperation";
export type DcdbCancelDcnJobOperation = import("./dcdbCancelDcnJobOperation").DcdbCancelDcnJobOperation;
export const DcdbCancelDcnJobOperation: typeof import("./dcdbCancelDcnJobOperation").DcdbCancelDcnJobOperation = null as any;
utilities.lazyLoad(exports, ["DcdbCancelDcnJobOperation"], () => require("./dcdbCancelDcnJobOperation"));

export { DcdbDbInstanceArgs, DcdbDbInstanceState } from "./dcdbDbInstance";
export type DcdbDbInstance = import("./dcdbDbInstance").DcdbDbInstance;
export const DcdbDbInstance: typeof import("./dcdbDbInstance").DcdbDbInstance = null as any;
utilities.lazyLoad(exports, ["DcdbDbInstance"], () => require("./dcdbDbInstance"));

export { DcdbDbParametersArgs, DcdbDbParametersState } from "./dcdbDbParameters";
export type DcdbDbParameters = import("./dcdbDbParameters").DcdbDbParameters;
export const DcdbDbParameters: typeof import("./dcdbDbParameters").DcdbDbParameters = null as any;
utilities.lazyLoad(exports, ["DcdbDbParameters"], () => require("./dcdbDbParameters"));

export { DcdbDbSyncModeConfigArgs, DcdbDbSyncModeConfigState } from "./dcdbDbSyncModeConfig";
export type DcdbDbSyncModeConfig = import("./dcdbDbSyncModeConfig").DcdbDbSyncModeConfig;
export const DcdbDbSyncModeConfig: typeof import("./dcdbDbSyncModeConfig").DcdbDbSyncModeConfig = null as any;
utilities.lazyLoad(exports, ["DcdbDbSyncModeConfig"], () => require("./dcdbDbSyncModeConfig"));

export { DcdbEncryptAttributesConfigArgs, DcdbEncryptAttributesConfigState } from "./dcdbEncryptAttributesConfig";
export type DcdbEncryptAttributesConfig = import("./dcdbEncryptAttributesConfig").DcdbEncryptAttributesConfig;
export const DcdbEncryptAttributesConfig: typeof import("./dcdbEncryptAttributesConfig").DcdbEncryptAttributesConfig = null as any;
utilities.lazyLoad(exports, ["DcdbEncryptAttributesConfig"], () => require("./dcdbEncryptAttributesConfig"));

export { DcdbFlushBinlogOperationArgs, DcdbFlushBinlogOperationState } from "./dcdbFlushBinlogOperation";
export type DcdbFlushBinlogOperation = import("./dcdbFlushBinlogOperation").DcdbFlushBinlogOperation;
export const DcdbFlushBinlogOperation: typeof import("./dcdbFlushBinlogOperation").DcdbFlushBinlogOperation = null as any;
utilities.lazyLoad(exports, ["DcdbFlushBinlogOperation"], () => require("./dcdbFlushBinlogOperation"));

export { DcdbHourdbInstanceArgs, DcdbHourdbInstanceState } from "./dcdbHourdbInstance";
export type DcdbHourdbInstance = import("./dcdbHourdbInstance").DcdbHourdbInstance;
export const DcdbHourdbInstance: typeof import("./dcdbHourdbInstance").DcdbHourdbInstance = null as any;
utilities.lazyLoad(exports, ["DcdbHourdbInstance"], () => require("./dcdbHourdbInstance"));

export { DcdbInstanceConfigArgs, DcdbInstanceConfigState } from "./dcdbInstanceConfig";
export type DcdbInstanceConfig = import("./dcdbInstanceConfig").DcdbInstanceConfig;
export const DcdbInstanceConfig: typeof import("./dcdbInstanceConfig").DcdbInstanceConfig = null as any;
utilities.lazyLoad(exports, ["DcdbInstanceConfig"], () => require("./dcdbInstanceConfig"));

export { DcdbIsolateHourInstanceOperationArgs, DcdbIsolateHourInstanceOperationState } from "./dcdbIsolateHourInstanceOperation";
export type DcdbIsolateHourInstanceOperation = import("./dcdbIsolateHourInstanceOperation").DcdbIsolateHourInstanceOperation;
export const DcdbIsolateHourInstanceOperation: typeof import("./dcdbIsolateHourInstanceOperation").DcdbIsolateHourInstanceOperation = null as any;
utilities.lazyLoad(exports, ["DcdbIsolateHourInstanceOperation"], () => require("./dcdbIsolateHourInstanceOperation"));

export { DcdbSecurityGroupAttachmentArgs, DcdbSecurityGroupAttachmentState } from "./dcdbSecurityGroupAttachment";
export type DcdbSecurityGroupAttachment = import("./dcdbSecurityGroupAttachment").DcdbSecurityGroupAttachment;
export const DcdbSecurityGroupAttachment: typeof import("./dcdbSecurityGroupAttachment").DcdbSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["DcdbSecurityGroupAttachment"], () => require("./dcdbSecurityGroupAttachment"));

export { DcdbSwitchDbInstanceHaOperationArgs, DcdbSwitchDbInstanceHaOperationState } from "./dcdbSwitchDbInstanceHaOperation";
export type DcdbSwitchDbInstanceHaOperation = import("./dcdbSwitchDbInstanceHaOperation").DcdbSwitchDbInstanceHaOperation;
export const DcdbSwitchDbInstanceHaOperation: typeof import("./dcdbSwitchDbInstanceHaOperation").DcdbSwitchDbInstanceHaOperation = null as any;
utilities.lazyLoad(exports, ["DcdbSwitchDbInstanceHaOperation"], () => require("./dcdbSwitchDbInstanceHaOperation"));

export { DcxArgs, DcxState } from "./dcx";
export type Dcx = import("./dcx").Dcx;
export const Dcx: typeof import("./dcx").Dcx = null as any;
utilities.lazyLoad(exports, ["Dcx"], () => require("./dcx"));

export { DcxExtraConfigArgs, DcxExtraConfigState } from "./dcxExtraConfig";
export type DcxExtraConfig = import("./dcxExtraConfig").DcxExtraConfig;
export const DcxExtraConfig: typeof import("./dcxExtraConfig").DcxExtraConfig = null as any;
utilities.lazyLoad(exports, ["DcxExtraConfig"], () => require("./dcxExtraConfig"));

export { DlcAddUsersToWorkGroupAttachmentArgs, DlcAddUsersToWorkGroupAttachmentState } from "./dlcAddUsersToWorkGroupAttachment";
export type DlcAddUsersToWorkGroupAttachment = import("./dlcAddUsersToWorkGroupAttachment").DlcAddUsersToWorkGroupAttachment;
export const DlcAddUsersToWorkGroupAttachment: typeof import("./dlcAddUsersToWorkGroupAttachment").DlcAddUsersToWorkGroupAttachment = null as any;
utilities.lazyLoad(exports, ["DlcAddUsersToWorkGroupAttachment"], () => require("./dlcAddUsersToWorkGroupAttachment"));

export { DlcAttachUserPolicyOperationArgs, DlcAttachUserPolicyOperationState } from "./dlcAttachUserPolicyOperation";
export type DlcAttachUserPolicyOperation = import("./dlcAttachUserPolicyOperation").DlcAttachUserPolicyOperation;
export const DlcAttachUserPolicyOperation: typeof import("./dlcAttachUserPolicyOperation").DlcAttachUserPolicyOperation = null as any;
utilities.lazyLoad(exports, ["DlcAttachUserPolicyOperation"], () => require("./dlcAttachUserPolicyOperation"));

export { DlcAttachWorkGroupPolicyOperationArgs, DlcAttachWorkGroupPolicyOperationState } from "./dlcAttachWorkGroupPolicyOperation";
export type DlcAttachWorkGroupPolicyOperation = import("./dlcAttachWorkGroupPolicyOperation").DlcAttachWorkGroupPolicyOperation;
export const DlcAttachWorkGroupPolicyOperation: typeof import("./dlcAttachWorkGroupPolicyOperation").DlcAttachWorkGroupPolicyOperation = null as any;
utilities.lazyLoad(exports, ["DlcAttachWorkGroupPolicyOperation"], () => require("./dlcAttachWorkGroupPolicyOperation"));

export { DlcBindWorkGroupsToUserAttachmentArgs, DlcBindWorkGroupsToUserAttachmentState } from "./dlcBindWorkGroupsToUserAttachment";
export type DlcBindWorkGroupsToUserAttachment = import("./dlcBindWorkGroupsToUserAttachment").DlcBindWorkGroupsToUserAttachment;
export const DlcBindWorkGroupsToUserAttachment: typeof import("./dlcBindWorkGroupsToUserAttachment").DlcBindWorkGroupsToUserAttachment = null as any;
utilities.lazyLoad(exports, ["DlcBindWorkGroupsToUserAttachment"], () => require("./dlcBindWorkGroupsToUserAttachment"));

export { DlcDataEngineArgs, DlcDataEngineState } from "./dlcDataEngine";
export type DlcDataEngine = import("./dlcDataEngine").DlcDataEngine;
export const DlcDataEngine: typeof import("./dlcDataEngine").DlcDataEngine = null as any;
utilities.lazyLoad(exports, ["DlcDataEngine"], () => require("./dlcDataEngine"));

export { DlcDetachUserPolicyOperationArgs, DlcDetachUserPolicyOperationState } from "./dlcDetachUserPolicyOperation";
export type DlcDetachUserPolicyOperation = import("./dlcDetachUserPolicyOperation").DlcDetachUserPolicyOperation;
export const DlcDetachUserPolicyOperation: typeof import("./dlcDetachUserPolicyOperation").DlcDetachUserPolicyOperation = null as any;
utilities.lazyLoad(exports, ["DlcDetachUserPolicyOperation"], () => require("./dlcDetachUserPolicyOperation"));

export { DlcDetachWorkGroupPolicyOperationArgs, DlcDetachWorkGroupPolicyOperationState } from "./dlcDetachWorkGroupPolicyOperation";
export type DlcDetachWorkGroupPolicyOperation = import("./dlcDetachWorkGroupPolicyOperation").DlcDetachWorkGroupPolicyOperation;
export const DlcDetachWorkGroupPolicyOperation: typeof import("./dlcDetachWorkGroupPolicyOperation").DlcDetachWorkGroupPolicyOperation = null as any;
utilities.lazyLoad(exports, ["DlcDetachWorkGroupPolicyOperation"], () => require("./dlcDetachWorkGroupPolicyOperation"));

export { DlcModifyDataEngineDescriptionOperationArgs, DlcModifyDataEngineDescriptionOperationState } from "./dlcModifyDataEngineDescriptionOperation";
export type DlcModifyDataEngineDescriptionOperation = import("./dlcModifyDataEngineDescriptionOperation").DlcModifyDataEngineDescriptionOperation;
export const DlcModifyDataEngineDescriptionOperation: typeof import("./dlcModifyDataEngineDescriptionOperation").DlcModifyDataEngineDescriptionOperation = null as any;
utilities.lazyLoad(exports, ["DlcModifyDataEngineDescriptionOperation"], () => require("./dlcModifyDataEngineDescriptionOperation"));

export { DlcModifyUserTypOperationArgs, DlcModifyUserTypOperationState } from "./dlcModifyUserTypOperation";
export type DlcModifyUserTypOperation = import("./dlcModifyUserTypOperation").DlcModifyUserTypOperation;
export const DlcModifyUserTypOperation: typeof import("./dlcModifyUserTypOperation").DlcModifyUserTypOperation = null as any;
utilities.lazyLoad(exports, ["DlcModifyUserTypOperation"], () => require("./dlcModifyUserTypOperation"));

export { DlcRenewDataEngineOperationArgs, DlcRenewDataEngineOperationState } from "./dlcRenewDataEngineOperation";
export type DlcRenewDataEngineOperation = import("./dlcRenewDataEngineOperation").DlcRenewDataEngineOperation;
export const DlcRenewDataEngineOperation: typeof import("./dlcRenewDataEngineOperation").DlcRenewDataEngineOperation = null as any;
utilities.lazyLoad(exports, ["DlcRenewDataEngineOperation"], () => require("./dlcRenewDataEngineOperation"));

export { DlcRestartDataEngineOperationArgs, DlcRestartDataEngineOperationState } from "./dlcRestartDataEngineOperation";
export type DlcRestartDataEngineOperation = import("./dlcRestartDataEngineOperation").DlcRestartDataEngineOperation;
export const DlcRestartDataEngineOperation: typeof import("./dlcRestartDataEngineOperation").DlcRestartDataEngineOperation = null as any;
utilities.lazyLoad(exports, ["DlcRestartDataEngineOperation"], () => require("./dlcRestartDataEngineOperation"));

export { DlcRollbackDataEngineImageOperationArgs, DlcRollbackDataEngineImageOperationState } from "./dlcRollbackDataEngineImageOperation";
export type DlcRollbackDataEngineImageOperation = import("./dlcRollbackDataEngineImageOperation").DlcRollbackDataEngineImageOperation;
export const DlcRollbackDataEngineImageOperation: typeof import("./dlcRollbackDataEngineImageOperation").DlcRollbackDataEngineImageOperation = null as any;
utilities.lazyLoad(exports, ["DlcRollbackDataEngineImageOperation"], () => require("./dlcRollbackDataEngineImageOperation"));

export { DlcStoreLocationConfigArgs, DlcStoreLocationConfigState } from "./dlcStoreLocationConfig";
export type DlcStoreLocationConfig = import("./dlcStoreLocationConfig").DlcStoreLocationConfig;
export const DlcStoreLocationConfig: typeof import("./dlcStoreLocationConfig").DlcStoreLocationConfig = null as any;
utilities.lazyLoad(exports, ["DlcStoreLocationConfig"], () => require("./dlcStoreLocationConfig"));

export { DlcSuspendResumeDataEngineArgs, DlcSuspendResumeDataEngineState } from "./dlcSuspendResumeDataEngine";
export type DlcSuspendResumeDataEngine = import("./dlcSuspendResumeDataEngine").DlcSuspendResumeDataEngine;
export const DlcSuspendResumeDataEngine: typeof import("./dlcSuspendResumeDataEngine").DlcSuspendResumeDataEngine = null as any;
utilities.lazyLoad(exports, ["DlcSuspendResumeDataEngine"], () => require("./dlcSuspendResumeDataEngine"));

export { DlcSwitchDataEngineImageOperationArgs, DlcSwitchDataEngineImageOperationState } from "./dlcSwitchDataEngineImageOperation";
export type DlcSwitchDataEngineImageOperation = import("./dlcSwitchDataEngineImageOperation").DlcSwitchDataEngineImageOperation;
export const DlcSwitchDataEngineImageOperation: typeof import("./dlcSwitchDataEngineImageOperation").DlcSwitchDataEngineImageOperation = null as any;
utilities.lazyLoad(exports, ["DlcSwitchDataEngineImageOperation"], () => require("./dlcSwitchDataEngineImageOperation"));

export { DlcUpdateDataEngineConfigOperationArgs, DlcUpdateDataEngineConfigOperationState } from "./dlcUpdateDataEngineConfigOperation";
export type DlcUpdateDataEngineConfigOperation = import("./dlcUpdateDataEngineConfigOperation").DlcUpdateDataEngineConfigOperation;
export const DlcUpdateDataEngineConfigOperation: typeof import("./dlcUpdateDataEngineConfigOperation").DlcUpdateDataEngineConfigOperation = null as any;
utilities.lazyLoad(exports, ["DlcUpdateDataEngineConfigOperation"], () => require("./dlcUpdateDataEngineConfigOperation"));

export { DlcUpdateRowFilterOperationArgs, DlcUpdateRowFilterOperationState } from "./dlcUpdateRowFilterOperation";
export type DlcUpdateRowFilterOperation = import("./dlcUpdateRowFilterOperation").DlcUpdateRowFilterOperation;
export const DlcUpdateRowFilterOperation: typeof import("./dlcUpdateRowFilterOperation").DlcUpdateRowFilterOperation = null as any;
utilities.lazyLoad(exports, ["DlcUpdateRowFilterOperation"], () => require("./dlcUpdateRowFilterOperation"));

export { DlcUpgradeDataEngineImageOperationArgs, DlcUpgradeDataEngineImageOperationState } from "./dlcUpgradeDataEngineImageOperation";
export type DlcUpgradeDataEngineImageOperation = import("./dlcUpgradeDataEngineImageOperation").DlcUpgradeDataEngineImageOperation;
export const DlcUpgradeDataEngineImageOperation: typeof import("./dlcUpgradeDataEngineImageOperation").DlcUpgradeDataEngineImageOperation = null as any;
utilities.lazyLoad(exports, ["DlcUpgradeDataEngineImageOperation"], () => require("./dlcUpgradeDataEngineImageOperation"));

export { DlcUserArgs, DlcUserState } from "./dlcUser";
export type DlcUser = import("./dlcUser").DlcUser;
export const DlcUser: typeof import("./dlcUser").DlcUser = null as any;
utilities.lazyLoad(exports, ["DlcUser"], () => require("./dlcUser"));

export { DlcUserDataEngineConfigArgs, DlcUserDataEngineConfigState } from "./dlcUserDataEngineConfig";
export type DlcUserDataEngineConfig = import("./dlcUserDataEngineConfig").DlcUserDataEngineConfig;
export const DlcUserDataEngineConfig: typeof import("./dlcUserDataEngineConfig").DlcUserDataEngineConfig = null as any;
utilities.lazyLoad(exports, ["DlcUserDataEngineConfig"], () => require("./dlcUserDataEngineConfig"));

export { DlcWorkGroupArgs, DlcWorkGroupState } from "./dlcWorkGroup";
export type DlcWorkGroup = import("./dlcWorkGroup").DlcWorkGroup;
export const DlcWorkGroup: typeof import("./dlcWorkGroup").DlcWorkGroup = null as any;
utilities.lazyLoad(exports, ["DlcWorkGroup"], () => require("./dlcWorkGroup"));

export { DnatArgs, DnatState } from "./dnat";
export type Dnat = import("./dnat").Dnat;
export const Dnat: typeof import("./dnat").Dnat = null as any;
utilities.lazyLoad(exports, ["Dnat"], () => require("./dnat"));

export { DnspodCustomLineArgs, DnspodCustomLineState } from "./dnspodCustomLine";
export type DnspodCustomLine = import("./dnspodCustomLine").DnspodCustomLine;
export const DnspodCustomLine: typeof import("./dnspodCustomLine").DnspodCustomLine = null as any;
utilities.lazyLoad(exports, ["DnspodCustomLine"], () => require("./dnspodCustomLine"));

export { DnspodDomainAliasArgs, DnspodDomainAliasState } from "./dnspodDomainAlias";
export type DnspodDomainAlias = import("./dnspodDomainAlias").DnspodDomainAlias;
export const DnspodDomainAlias: typeof import("./dnspodDomainAlias").DnspodDomainAlias = null as any;
utilities.lazyLoad(exports, ["DnspodDomainAlias"], () => require("./dnspodDomainAlias"));

export { DnspodDomainInstanceArgs, DnspodDomainInstanceState } from "./dnspodDomainInstance";
export type DnspodDomainInstance = import("./dnspodDomainInstance").DnspodDomainInstance;
export const DnspodDomainInstance: typeof import("./dnspodDomainInstance").DnspodDomainInstance = null as any;
utilities.lazyLoad(exports, ["DnspodDomainInstance"], () => require("./dnspodDomainInstance"));

export { DnspodDomainLockArgs, DnspodDomainLockState } from "./dnspodDomainLock";
export type DnspodDomainLock = import("./dnspodDomainLock").DnspodDomainLock;
export const DnspodDomainLock: typeof import("./dnspodDomainLock").DnspodDomainLock = null as any;
utilities.lazyLoad(exports, ["DnspodDomainLock"], () => require("./dnspodDomainLock"));

export { DnspodDownloadSnapshotOperationArgs, DnspodDownloadSnapshotOperationState } from "./dnspodDownloadSnapshotOperation";
export type DnspodDownloadSnapshotOperation = import("./dnspodDownloadSnapshotOperation").DnspodDownloadSnapshotOperation;
export const DnspodDownloadSnapshotOperation: typeof import("./dnspodDownloadSnapshotOperation").DnspodDownloadSnapshotOperation = null as any;
utilities.lazyLoad(exports, ["DnspodDownloadSnapshotOperation"], () => require("./dnspodDownloadSnapshotOperation"));

export { DnspodModifyDomainOwnerOperationArgs, DnspodModifyDomainOwnerOperationState } from "./dnspodModifyDomainOwnerOperation";
export type DnspodModifyDomainOwnerOperation = import("./dnspodModifyDomainOwnerOperation").DnspodModifyDomainOwnerOperation;
export const DnspodModifyDomainOwnerOperation: typeof import("./dnspodModifyDomainOwnerOperation").DnspodModifyDomainOwnerOperation = null as any;
utilities.lazyLoad(exports, ["DnspodModifyDomainOwnerOperation"], () => require("./dnspodModifyDomainOwnerOperation"));

export { DnspodModifyRecordGroupOperationArgs, DnspodModifyRecordGroupOperationState } from "./dnspodModifyRecordGroupOperation";
export type DnspodModifyRecordGroupOperation = import("./dnspodModifyRecordGroupOperation").DnspodModifyRecordGroupOperation;
export const DnspodModifyRecordGroupOperation: typeof import("./dnspodModifyRecordGroupOperation").DnspodModifyRecordGroupOperation = null as any;
utilities.lazyLoad(exports, ["DnspodModifyRecordGroupOperation"], () => require("./dnspodModifyRecordGroupOperation"));

export { DnspodRecordArgs, DnspodRecordState } from "./dnspodRecord";
export type DnspodRecord = import("./dnspodRecord").DnspodRecord;
export const DnspodRecord: typeof import("./dnspodRecord").DnspodRecord = null as any;
utilities.lazyLoad(exports, ["DnspodRecord"], () => require("./dnspodRecord"));

export { DnspodRecordGroupArgs, DnspodRecordGroupState } from "./dnspodRecordGroup";
export type DnspodRecordGroup = import("./dnspodRecordGroup").DnspodRecordGroup;
export const DnspodRecordGroup: typeof import("./dnspodRecordGroup").DnspodRecordGroup = null as any;
utilities.lazyLoad(exports, ["DnspodRecordGroup"], () => require("./dnspodRecordGroup"));

export { DnspodSnapshotConfigArgs, DnspodSnapshotConfigState } from "./dnspodSnapshotConfig";
export type DnspodSnapshotConfig = import("./dnspodSnapshotConfig").DnspodSnapshotConfig;
export const DnspodSnapshotConfig: typeof import("./dnspodSnapshotConfig").DnspodSnapshotConfig = null as any;
utilities.lazyLoad(exports, ["DnspodSnapshotConfig"], () => require("./dnspodSnapshotConfig"));

export { DtsCompareTaskArgs, DtsCompareTaskState } from "./dtsCompareTask";
export type DtsCompareTask = import("./dtsCompareTask").DtsCompareTask;
export const DtsCompareTask: typeof import("./dtsCompareTask").DtsCompareTask = null as any;
utilities.lazyLoad(exports, ["DtsCompareTask"], () => require("./dtsCompareTask"));

export { DtsCompareTaskStopOperationArgs, DtsCompareTaskStopOperationState } from "./dtsCompareTaskStopOperation";
export type DtsCompareTaskStopOperation = import("./dtsCompareTaskStopOperation").DtsCompareTaskStopOperation;
export const DtsCompareTaskStopOperation: typeof import("./dtsCompareTaskStopOperation").DtsCompareTaskStopOperation = null as any;
utilities.lazyLoad(exports, ["DtsCompareTaskStopOperation"], () => require("./dtsCompareTaskStopOperation"));

export { DtsMigrateJobArgs, DtsMigrateJobState } from "./dtsMigrateJob";
export type DtsMigrateJob = import("./dtsMigrateJob").DtsMigrateJob;
export const DtsMigrateJob: typeof import("./dtsMigrateJob").DtsMigrateJob = null as any;
utilities.lazyLoad(exports, ["DtsMigrateJob"], () => require("./dtsMigrateJob"));

export { DtsMigrateJobConfigArgs, DtsMigrateJobConfigState } from "./dtsMigrateJobConfig";
export type DtsMigrateJobConfig = import("./dtsMigrateJobConfig").DtsMigrateJobConfig;
export const DtsMigrateJobConfig: typeof import("./dtsMigrateJobConfig").DtsMigrateJobConfig = null as any;
utilities.lazyLoad(exports, ["DtsMigrateJobConfig"], () => require("./dtsMigrateJobConfig"));

export { DtsMigrateJobResumeOperationArgs, DtsMigrateJobResumeOperationState } from "./dtsMigrateJobResumeOperation";
export type DtsMigrateJobResumeOperation = import("./dtsMigrateJobResumeOperation").DtsMigrateJobResumeOperation;
export const DtsMigrateJobResumeOperation: typeof import("./dtsMigrateJobResumeOperation").DtsMigrateJobResumeOperation = null as any;
utilities.lazyLoad(exports, ["DtsMigrateJobResumeOperation"], () => require("./dtsMigrateJobResumeOperation"));

export { DtsMigrateJobStartOperationArgs, DtsMigrateJobStartOperationState } from "./dtsMigrateJobStartOperation";
export type DtsMigrateJobStartOperation = import("./dtsMigrateJobStartOperation").DtsMigrateJobStartOperation;
export const DtsMigrateJobStartOperation: typeof import("./dtsMigrateJobStartOperation").DtsMigrateJobStartOperation = null as any;
utilities.lazyLoad(exports, ["DtsMigrateJobStartOperation"], () => require("./dtsMigrateJobStartOperation"));

export { DtsMigrateServiceArgs, DtsMigrateServiceState } from "./dtsMigrateService";
export type DtsMigrateService = import("./dtsMigrateService").DtsMigrateService;
export const DtsMigrateService: typeof import("./dtsMigrateService").DtsMigrateService = null as any;
utilities.lazyLoad(exports, ["DtsMigrateService"], () => require("./dtsMigrateService"));

export { DtsSyncCheckJobOperationArgs, DtsSyncCheckJobOperationState } from "./dtsSyncCheckJobOperation";
export type DtsSyncCheckJobOperation = import("./dtsSyncCheckJobOperation").DtsSyncCheckJobOperation;
export const DtsSyncCheckJobOperation: typeof import("./dtsSyncCheckJobOperation").DtsSyncCheckJobOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncCheckJobOperation"], () => require("./dtsSyncCheckJobOperation"));

export { DtsSyncConfigArgs, DtsSyncConfigState } from "./dtsSyncConfig";
export type DtsSyncConfig = import("./dtsSyncConfig").DtsSyncConfig;
export const DtsSyncConfig: typeof import("./dtsSyncConfig").DtsSyncConfig = null as any;
utilities.lazyLoad(exports, ["DtsSyncConfig"], () => require("./dtsSyncConfig"));

export { DtsSyncJobArgs, DtsSyncJobState } from "./dtsSyncJob";
export type DtsSyncJob = import("./dtsSyncJob").DtsSyncJob;
export const DtsSyncJob: typeof import("./dtsSyncJob").DtsSyncJob = null as any;
utilities.lazyLoad(exports, ["DtsSyncJob"], () => require("./dtsSyncJob"));

export { DtsSyncJobContinueOperationArgs, DtsSyncJobContinueOperationState } from "./dtsSyncJobContinueOperation";
export type DtsSyncJobContinueOperation = import("./dtsSyncJobContinueOperation").DtsSyncJobContinueOperation;
export const DtsSyncJobContinueOperation: typeof import("./dtsSyncJobContinueOperation").DtsSyncJobContinueOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobContinueOperation"], () => require("./dtsSyncJobContinueOperation"));

export { DtsSyncJobIsolateOperationArgs, DtsSyncJobIsolateOperationState } from "./dtsSyncJobIsolateOperation";
export type DtsSyncJobIsolateOperation = import("./dtsSyncJobIsolateOperation").DtsSyncJobIsolateOperation;
export const DtsSyncJobIsolateOperation: typeof import("./dtsSyncJobIsolateOperation").DtsSyncJobIsolateOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobIsolateOperation"], () => require("./dtsSyncJobIsolateOperation"));

export { DtsSyncJobPauseOperationArgs, DtsSyncJobPauseOperationState } from "./dtsSyncJobPauseOperation";
export type DtsSyncJobPauseOperation = import("./dtsSyncJobPauseOperation").DtsSyncJobPauseOperation;
export const DtsSyncJobPauseOperation: typeof import("./dtsSyncJobPauseOperation").DtsSyncJobPauseOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobPauseOperation"], () => require("./dtsSyncJobPauseOperation"));

export { DtsSyncJobRecoverOperationArgs, DtsSyncJobRecoverOperationState } from "./dtsSyncJobRecoverOperation";
export type DtsSyncJobRecoverOperation = import("./dtsSyncJobRecoverOperation").DtsSyncJobRecoverOperation;
export const DtsSyncJobRecoverOperation: typeof import("./dtsSyncJobRecoverOperation").DtsSyncJobRecoverOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobRecoverOperation"], () => require("./dtsSyncJobRecoverOperation"));

export { DtsSyncJobResizeOperationArgs, DtsSyncJobResizeOperationState } from "./dtsSyncJobResizeOperation";
export type DtsSyncJobResizeOperation = import("./dtsSyncJobResizeOperation").DtsSyncJobResizeOperation;
export const DtsSyncJobResizeOperation: typeof import("./dtsSyncJobResizeOperation").DtsSyncJobResizeOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobResizeOperation"], () => require("./dtsSyncJobResizeOperation"));

export { DtsSyncJobResumeOperationArgs, DtsSyncJobResumeOperationState } from "./dtsSyncJobResumeOperation";
export type DtsSyncJobResumeOperation = import("./dtsSyncJobResumeOperation").DtsSyncJobResumeOperation;
export const DtsSyncJobResumeOperation: typeof import("./dtsSyncJobResumeOperation").DtsSyncJobResumeOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobResumeOperation"], () => require("./dtsSyncJobResumeOperation"));

export { DtsSyncJobStartOperationArgs, DtsSyncJobStartOperationState } from "./dtsSyncJobStartOperation";
export type DtsSyncJobStartOperation = import("./dtsSyncJobStartOperation").DtsSyncJobStartOperation;
export const DtsSyncJobStartOperation: typeof import("./dtsSyncJobStartOperation").DtsSyncJobStartOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobStartOperation"], () => require("./dtsSyncJobStartOperation"));

export { DtsSyncJobStopOperationArgs, DtsSyncJobStopOperationState } from "./dtsSyncJobStopOperation";
export type DtsSyncJobStopOperation = import("./dtsSyncJobStopOperation").DtsSyncJobStopOperation;
export const DtsSyncJobStopOperation: typeof import("./dtsSyncJobStopOperation").DtsSyncJobStopOperation = null as any;
utilities.lazyLoad(exports, ["DtsSyncJobStopOperation"], () => require("./dtsSyncJobStopOperation"));

export { EbEventBusArgs, EbEventBusState } from "./ebEventBus";
export type EbEventBus = import("./ebEventBus").EbEventBus;
export const EbEventBus: typeof import("./ebEventBus").EbEventBus = null as any;
utilities.lazyLoad(exports, ["EbEventBus"], () => require("./ebEventBus"));

export { EbEventConnectorArgs, EbEventConnectorState } from "./ebEventConnector";
export type EbEventConnector = import("./ebEventConnector").EbEventConnector;
export const EbEventConnector: typeof import("./ebEventConnector").EbEventConnector = null as any;
utilities.lazyLoad(exports, ["EbEventConnector"], () => require("./ebEventConnector"));

export { EbEventRuleArgs, EbEventRuleState } from "./ebEventRule";
export type EbEventRule = import("./ebEventRule").EbEventRule;
export const EbEventRule: typeof import("./ebEventRule").EbEventRule = null as any;
utilities.lazyLoad(exports, ["EbEventRule"], () => require("./ebEventRule"));

export { EbEventTargetArgs, EbEventTargetState } from "./ebEventTarget";
export type EbEventTarget = import("./ebEventTarget").EbEventTarget;
export const EbEventTarget: typeof import("./ebEventTarget").EbEventTarget = null as any;
utilities.lazyLoad(exports, ["EbEventTarget"], () => require("./ebEventTarget"));

export { EbEventTransformArgs, EbEventTransformState } from "./ebEventTransform";
export type EbEventTransform = import("./ebEventTransform").EbEventTransform;
export const EbEventTransform: typeof import("./ebEventTransform").EbEventTransform = null as any;
utilities.lazyLoad(exports, ["EbEventTransform"], () => require("./ebEventTransform"));

export { EbPutEventsArgs, EbPutEventsState } from "./ebPutEvents";
export type EbPutEvents = import("./ebPutEvents").EbPutEvents;
export const EbPutEvents: typeof import("./ebPutEvents").EbPutEvents = null as any;
utilities.lazyLoad(exports, ["EbPutEvents"], () => require("./ebPutEvents"));

export { EipArgs, EipState } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { EipAddressTransformArgs, EipAddressTransformState } from "./eipAddressTransform";
export type EipAddressTransform = import("./eipAddressTransform").EipAddressTransform;
export const EipAddressTransform: typeof import("./eipAddressTransform").EipAddressTransform = null as any;
utilities.lazyLoad(exports, ["EipAddressTransform"], () => require("./eipAddressTransform"));

export { EipAssociationArgs, EipAssociationState } from "./eipAssociation";
export type EipAssociation = import("./eipAssociation").EipAssociation;
export const EipAssociation: typeof import("./eipAssociation").EipAssociation = null as any;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));

export { EipNormalAddressReturnArgs, EipNormalAddressReturnState } from "./eipNormalAddressReturn";
export type EipNormalAddressReturn = import("./eipNormalAddressReturn").EipNormalAddressReturn;
export const EipNormalAddressReturn: typeof import("./eipNormalAddressReturn").EipNormalAddressReturn = null as any;
utilities.lazyLoad(exports, ["EipNormalAddressReturn"], () => require("./eipNormalAddressReturn"));

export { EipPublicAddressAdjustArgs, EipPublicAddressAdjustState } from "./eipPublicAddressAdjust";
export type EipPublicAddressAdjust = import("./eipPublicAddressAdjust").EipPublicAddressAdjust;
export const EipPublicAddressAdjust: typeof import("./eipPublicAddressAdjust").EipPublicAddressAdjust = null as any;
utilities.lazyLoad(exports, ["EipPublicAddressAdjust"], () => require("./eipPublicAddressAdjust"));

export { EksClusterArgs, EksClusterState } from "./eksCluster";
export type EksCluster = import("./eksCluster").EksCluster;
export const EksCluster: typeof import("./eksCluster").EksCluster = null as any;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));

export { EksContainerInstanceArgs, EksContainerInstanceState } from "./eksContainerInstance";
export type EksContainerInstance = import("./eksContainerInstance").EksContainerInstance;
export const EksContainerInstance: typeof import("./eksContainerInstance").EksContainerInstance = null as any;
utilities.lazyLoad(exports, ["EksContainerInstance"], () => require("./eksContainerInstance"));

export { ElasticsearchDiagnoseArgs, ElasticsearchDiagnoseState } from "./elasticsearchDiagnose";
export type ElasticsearchDiagnose = import("./elasticsearchDiagnose").ElasticsearchDiagnose;
export const ElasticsearchDiagnose: typeof import("./elasticsearchDiagnose").ElasticsearchDiagnose = null as any;
utilities.lazyLoad(exports, ["ElasticsearchDiagnose"], () => require("./elasticsearchDiagnose"));

export { ElasticsearchDiagnoseInstanceArgs, ElasticsearchDiagnoseInstanceState } from "./elasticsearchDiagnoseInstance";
export type ElasticsearchDiagnoseInstance = import("./elasticsearchDiagnoseInstance").ElasticsearchDiagnoseInstance;
export const ElasticsearchDiagnoseInstance: typeof import("./elasticsearchDiagnoseInstance").ElasticsearchDiagnoseInstance = null as any;
utilities.lazyLoad(exports, ["ElasticsearchDiagnoseInstance"], () => require("./elasticsearchDiagnoseInstance"));

export { ElasticsearchIndexArgs, ElasticsearchIndexState } from "./elasticsearchIndex";
export type ElasticsearchIndex = import("./elasticsearchIndex").ElasticsearchIndex;
export const ElasticsearchIndex: typeof import("./elasticsearchIndex").ElasticsearchIndex = null as any;
utilities.lazyLoad(exports, ["ElasticsearchIndex"], () => require("./elasticsearchIndex"));

export { ElasticsearchInstanceArgs, ElasticsearchInstanceState } from "./elasticsearchInstance";
export type ElasticsearchInstance = import("./elasticsearchInstance").ElasticsearchInstance;
export const ElasticsearchInstance: typeof import("./elasticsearchInstance").ElasticsearchInstance = null as any;
utilities.lazyLoad(exports, ["ElasticsearchInstance"], () => require("./elasticsearchInstance"));

export { ElasticsearchLogstashArgs, ElasticsearchLogstashState } from "./elasticsearchLogstash";
export type ElasticsearchLogstash = import("./elasticsearchLogstash").ElasticsearchLogstash;
export const ElasticsearchLogstash: typeof import("./elasticsearchLogstash").ElasticsearchLogstash = null as any;
utilities.lazyLoad(exports, ["ElasticsearchLogstash"], () => require("./elasticsearchLogstash"));

export { ElasticsearchLogstashPipelineArgs, ElasticsearchLogstashPipelineState } from "./elasticsearchLogstashPipeline";
export type ElasticsearchLogstashPipeline = import("./elasticsearchLogstashPipeline").ElasticsearchLogstashPipeline;
export const ElasticsearchLogstashPipeline: typeof import("./elasticsearchLogstashPipeline").ElasticsearchLogstashPipeline = null as any;
utilities.lazyLoad(exports, ["ElasticsearchLogstashPipeline"], () => require("./elasticsearchLogstashPipeline"));

export { ElasticsearchRestartInstanceOperationArgs, ElasticsearchRestartInstanceOperationState } from "./elasticsearchRestartInstanceOperation";
export type ElasticsearchRestartInstanceOperation = import("./elasticsearchRestartInstanceOperation").ElasticsearchRestartInstanceOperation;
export const ElasticsearchRestartInstanceOperation: typeof import("./elasticsearchRestartInstanceOperation").ElasticsearchRestartInstanceOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchRestartInstanceOperation"], () => require("./elasticsearchRestartInstanceOperation"));

export { ElasticsearchRestartKibanaOperationArgs, ElasticsearchRestartKibanaOperationState } from "./elasticsearchRestartKibanaOperation";
export type ElasticsearchRestartKibanaOperation = import("./elasticsearchRestartKibanaOperation").ElasticsearchRestartKibanaOperation;
export const ElasticsearchRestartKibanaOperation: typeof import("./elasticsearchRestartKibanaOperation").ElasticsearchRestartKibanaOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchRestartKibanaOperation"], () => require("./elasticsearchRestartKibanaOperation"));

export { ElasticsearchRestartLogstashInstanceOperationArgs, ElasticsearchRestartLogstashInstanceOperationState } from "./elasticsearchRestartLogstashInstanceOperation";
export type ElasticsearchRestartLogstashInstanceOperation = import("./elasticsearchRestartLogstashInstanceOperation").ElasticsearchRestartLogstashInstanceOperation;
export const ElasticsearchRestartLogstashInstanceOperation: typeof import("./elasticsearchRestartLogstashInstanceOperation").ElasticsearchRestartLogstashInstanceOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchRestartLogstashInstanceOperation"], () => require("./elasticsearchRestartLogstashInstanceOperation"));

export { ElasticsearchRestartNodesOperationArgs, ElasticsearchRestartNodesOperationState } from "./elasticsearchRestartNodesOperation";
export type ElasticsearchRestartNodesOperation = import("./elasticsearchRestartNodesOperation").ElasticsearchRestartNodesOperation;
export const ElasticsearchRestartNodesOperation: typeof import("./elasticsearchRestartNodesOperation").ElasticsearchRestartNodesOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchRestartNodesOperation"], () => require("./elasticsearchRestartNodesOperation"));

export { ElasticsearchSecurityGroupArgs, ElasticsearchSecurityGroupState } from "./elasticsearchSecurityGroup";
export type ElasticsearchSecurityGroup = import("./elasticsearchSecurityGroup").ElasticsearchSecurityGroup;
export const ElasticsearchSecurityGroup: typeof import("./elasticsearchSecurityGroup").ElasticsearchSecurityGroup = null as any;
utilities.lazyLoad(exports, ["ElasticsearchSecurityGroup"], () => require("./elasticsearchSecurityGroup"));

export { ElasticsearchStartLogstashPipelineOperationArgs, ElasticsearchStartLogstashPipelineOperationState } from "./elasticsearchStartLogstashPipelineOperation";
export type ElasticsearchStartLogstashPipelineOperation = import("./elasticsearchStartLogstashPipelineOperation").ElasticsearchStartLogstashPipelineOperation;
export const ElasticsearchStartLogstashPipelineOperation: typeof import("./elasticsearchStartLogstashPipelineOperation").ElasticsearchStartLogstashPipelineOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchStartLogstashPipelineOperation"], () => require("./elasticsearchStartLogstashPipelineOperation"));

export { ElasticsearchStopLogstashPipelineOperationArgs, ElasticsearchStopLogstashPipelineOperationState } from "./elasticsearchStopLogstashPipelineOperation";
export type ElasticsearchStopLogstashPipelineOperation = import("./elasticsearchStopLogstashPipelineOperation").ElasticsearchStopLogstashPipelineOperation;
export const ElasticsearchStopLogstashPipelineOperation: typeof import("./elasticsearchStopLogstashPipelineOperation").ElasticsearchStopLogstashPipelineOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchStopLogstashPipelineOperation"], () => require("./elasticsearchStopLogstashPipelineOperation"));

export { ElasticsearchUpdatePluginsOperationArgs, ElasticsearchUpdatePluginsOperationState } from "./elasticsearchUpdatePluginsOperation";
export type ElasticsearchUpdatePluginsOperation = import("./elasticsearchUpdatePluginsOperation").ElasticsearchUpdatePluginsOperation;
export const ElasticsearchUpdatePluginsOperation: typeof import("./elasticsearchUpdatePluginsOperation").ElasticsearchUpdatePluginsOperation = null as any;
utilities.lazyLoad(exports, ["ElasticsearchUpdatePluginsOperation"], () => require("./elasticsearchUpdatePluginsOperation"));

export { EmrClusterArgs, EmrClusterState } from "./emrCluster";
export type EmrCluster = import("./emrCluster").EmrCluster;
export const EmrCluster: typeof import("./emrCluster").EmrCluster = null as any;
utilities.lazyLoad(exports, ["EmrCluster"], () => require("./emrCluster"));

export { EmrUserManagerArgs, EmrUserManagerState } from "./emrUserManager";
export type EmrUserManager = import("./emrUserManager").EmrUserManager;
export const EmrUserManager: typeof import("./emrUserManager").EmrUserManager = null as any;
utilities.lazyLoad(exports, ["EmrUserManager"], () => require("./emrUserManager"));

export { EniArgs, EniState } from "./eni";
export type Eni = import("./eni").Eni;
export const Eni: typeof import("./eni").Eni = null as any;
utilities.lazyLoad(exports, ["Eni"], () => require("./eni"));

export { EniAttachmentArgs, EniAttachmentState } from "./eniAttachment";
export type EniAttachment = import("./eniAttachment").EniAttachment;
export const EniAttachment: typeof import("./eniAttachment").EniAttachment = null as any;
utilities.lazyLoad(exports, ["EniAttachment"], () => require("./eniAttachment"));

export { EniIpv4AddressArgs, EniIpv4AddressState } from "./eniIpv4Address";
export type EniIpv4Address = import("./eniIpv4Address").EniIpv4Address;
export const EniIpv4Address: typeof import("./eniIpv4Address").EniIpv4Address = null as any;
utilities.lazyLoad(exports, ["EniIpv4Address"], () => require("./eniIpv4Address"));

export { EniIpv6AddressArgs, EniIpv6AddressState } from "./eniIpv6Address";
export type EniIpv6Address = import("./eniIpv6Address").EniIpv6Address;
export const EniIpv6Address: typeof import("./eniIpv6Address").EniIpv6Address = null as any;
utilities.lazyLoad(exports, ["EniIpv6Address"], () => require("./eniIpv6Address"));

export { EniSgAttachmentArgs, EniSgAttachmentState } from "./eniSgAttachment";
export type EniSgAttachment = import("./eniSgAttachment").EniSgAttachment;
export const EniSgAttachment: typeof import("./eniSgAttachment").EniSgAttachment = null as any;
utilities.lazyLoad(exports, ["EniSgAttachment"], () => require("./eniSgAttachment"));

export { GaapCertificateArgs, GaapCertificateState } from "./gaapCertificate";
export type GaapCertificate = import("./gaapCertificate").GaapCertificate;
export const GaapCertificate: typeof import("./gaapCertificate").GaapCertificate = null as any;
utilities.lazyLoad(exports, ["GaapCertificate"], () => require("./gaapCertificate"));

export { GaapCustomHeaderArgs, GaapCustomHeaderState } from "./gaapCustomHeader";
export type GaapCustomHeader = import("./gaapCustomHeader").GaapCustomHeader;
export const GaapCustomHeader: typeof import("./gaapCustomHeader").GaapCustomHeader = null as any;
utilities.lazyLoad(exports, ["GaapCustomHeader"], () => require("./gaapCustomHeader"));

export { GaapDomainErrorPageArgs, GaapDomainErrorPageState } from "./gaapDomainErrorPage";
export type GaapDomainErrorPage = import("./gaapDomainErrorPage").GaapDomainErrorPage;
export const GaapDomainErrorPage: typeof import("./gaapDomainErrorPage").GaapDomainErrorPage = null as any;
utilities.lazyLoad(exports, ["GaapDomainErrorPage"], () => require("./gaapDomainErrorPage"));

export { GaapGlobalDomainArgs, GaapGlobalDomainState } from "./gaapGlobalDomain";
export type GaapGlobalDomain = import("./gaapGlobalDomain").GaapGlobalDomain;
export const GaapGlobalDomain: typeof import("./gaapGlobalDomain").GaapGlobalDomain = null as any;
utilities.lazyLoad(exports, ["GaapGlobalDomain"], () => require("./gaapGlobalDomain"));

export { GaapGlobalDomainDnsArgs, GaapGlobalDomainDnsState } from "./gaapGlobalDomainDns";
export type GaapGlobalDomainDns = import("./gaapGlobalDomainDns").GaapGlobalDomainDns;
export const GaapGlobalDomainDns: typeof import("./gaapGlobalDomainDns").GaapGlobalDomainDns = null as any;
utilities.lazyLoad(exports, ["GaapGlobalDomainDns"], () => require("./gaapGlobalDomainDns"));

export { GaapHttpDomainArgs, GaapHttpDomainState } from "./gaapHttpDomain";
export type GaapHttpDomain = import("./gaapHttpDomain").GaapHttpDomain;
export const GaapHttpDomain: typeof import("./gaapHttpDomain").GaapHttpDomain = null as any;
utilities.lazyLoad(exports, ["GaapHttpDomain"], () => require("./gaapHttpDomain"));

export { GaapHttpRuleArgs, GaapHttpRuleState } from "./gaapHttpRule";
export type GaapHttpRule = import("./gaapHttpRule").GaapHttpRule;
export const GaapHttpRule: typeof import("./gaapHttpRule").GaapHttpRule = null as any;
utilities.lazyLoad(exports, ["GaapHttpRule"], () => require("./gaapHttpRule"));

export { GaapLayer4ListenerArgs, GaapLayer4ListenerState } from "./gaapLayer4Listener";
export type GaapLayer4Listener = import("./gaapLayer4Listener").GaapLayer4Listener;
export const GaapLayer4Listener: typeof import("./gaapLayer4Listener").GaapLayer4Listener = null as any;
utilities.lazyLoad(exports, ["GaapLayer4Listener"], () => require("./gaapLayer4Listener"));

export { GaapLayer7ListenerArgs, GaapLayer7ListenerState } from "./gaapLayer7Listener";
export type GaapLayer7Listener = import("./gaapLayer7Listener").GaapLayer7Listener;
export const GaapLayer7Listener: typeof import("./gaapLayer7Listener").GaapLayer7Listener = null as any;
utilities.lazyLoad(exports, ["GaapLayer7Listener"], () => require("./gaapLayer7Listener"));

export { GaapProxyArgs, GaapProxyState } from "./gaapProxy";
export type GaapProxy = import("./gaapProxy").GaapProxy;
export const GaapProxy: typeof import("./gaapProxy").GaapProxy = null as any;
utilities.lazyLoad(exports, ["GaapProxy"], () => require("./gaapProxy"));

export { GaapProxyGroupArgs, GaapProxyGroupState } from "./gaapProxyGroup";
export type GaapProxyGroup = import("./gaapProxyGroup").GaapProxyGroup;
export const GaapProxyGroup: typeof import("./gaapProxyGroup").GaapProxyGroup = null as any;
utilities.lazyLoad(exports, ["GaapProxyGroup"], () => require("./gaapProxyGroup"));

export { GaapRealserverArgs, GaapRealserverState } from "./gaapRealserver";
export type GaapRealserver = import("./gaapRealserver").GaapRealserver;
export const GaapRealserver: typeof import("./gaapRealserver").GaapRealserver = null as any;
utilities.lazyLoad(exports, ["GaapRealserver"], () => require("./gaapRealserver"));

export { GaapSecurityPolicyArgs, GaapSecurityPolicyState } from "./gaapSecurityPolicy";
export type GaapSecurityPolicy = import("./gaapSecurityPolicy").GaapSecurityPolicy;
export const GaapSecurityPolicy: typeof import("./gaapSecurityPolicy").GaapSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["GaapSecurityPolicy"], () => require("./gaapSecurityPolicy"));

export { GaapSecurityRuleArgs, GaapSecurityRuleState } from "./gaapSecurityRule";
export type GaapSecurityRule = import("./gaapSecurityRule").GaapSecurityRule;
export const GaapSecurityRule: typeof import("./gaapSecurityRule").GaapSecurityRule = null as any;
utilities.lazyLoad(exports, ["GaapSecurityRule"], () => require("./gaapSecurityRule"));

export { GetAddressTemplateGroupsArgs, GetAddressTemplateGroupsResult, GetAddressTemplateGroupsOutputArgs } from "./getAddressTemplateGroups";
export const getAddressTemplateGroups: typeof import("./getAddressTemplateGroups").getAddressTemplateGroups = null as any;
export const getAddressTemplateGroupsOutput: typeof import("./getAddressTemplateGroups").getAddressTemplateGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAddressTemplateGroups","getAddressTemplateGroupsOutput"], () => require("./getAddressTemplateGroups"));

export { GetAddressTemplatesArgs, GetAddressTemplatesResult, GetAddressTemplatesOutputArgs } from "./getAddressTemplates";
export const getAddressTemplates: typeof import("./getAddressTemplates").getAddressTemplates = null as any;
export const getAddressTemplatesOutput: typeof import("./getAddressTemplates").getAddressTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getAddressTemplates","getAddressTemplatesOutput"], () => require("./getAddressTemplates"));

export { GetAntiddosBasicDeviceStatusArgs, GetAntiddosBasicDeviceStatusResult, GetAntiddosBasicDeviceStatusOutputArgs } from "./getAntiddosBasicDeviceStatus";
export const getAntiddosBasicDeviceStatus: typeof import("./getAntiddosBasicDeviceStatus").getAntiddosBasicDeviceStatus = null as any;
export const getAntiddosBasicDeviceStatusOutput: typeof import("./getAntiddosBasicDeviceStatus").getAntiddosBasicDeviceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosBasicDeviceStatus","getAntiddosBasicDeviceStatusOutput"], () => require("./getAntiddosBasicDeviceStatus"));

export { GetAntiddosBgpBizTrendArgs, GetAntiddosBgpBizTrendResult, GetAntiddosBgpBizTrendOutputArgs } from "./getAntiddosBgpBizTrend";
export const getAntiddosBgpBizTrend: typeof import("./getAntiddosBgpBizTrend").getAntiddosBgpBizTrend = null as any;
export const getAntiddosBgpBizTrendOutput: typeof import("./getAntiddosBgpBizTrend").getAntiddosBgpBizTrendOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosBgpBizTrend","getAntiddosBgpBizTrendOutput"], () => require("./getAntiddosBgpBizTrend"));

export { GetAntiddosListListenerArgs, GetAntiddosListListenerResult, GetAntiddosListListenerOutputArgs } from "./getAntiddosListListener";
export const getAntiddosListListener: typeof import("./getAntiddosListListener").getAntiddosListListener = null as any;
export const getAntiddosListListenerOutput: typeof import("./getAntiddosListListener").getAntiddosListListenerOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosListListener","getAntiddosListListenerOutput"], () => require("./getAntiddosListListener"));

export { GetAntiddosOverviewAttackTrendArgs, GetAntiddosOverviewAttackTrendResult, GetAntiddosOverviewAttackTrendOutputArgs } from "./getAntiddosOverviewAttackTrend";
export const getAntiddosOverviewAttackTrend: typeof import("./getAntiddosOverviewAttackTrend").getAntiddosOverviewAttackTrend = null as any;
export const getAntiddosOverviewAttackTrendOutput: typeof import("./getAntiddosOverviewAttackTrend").getAntiddosOverviewAttackTrendOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosOverviewAttackTrend","getAntiddosOverviewAttackTrendOutput"], () => require("./getAntiddosOverviewAttackTrend"));

export { GetAntiddosOverviewCcTrendArgs, GetAntiddosOverviewCcTrendResult, GetAntiddosOverviewCcTrendOutputArgs } from "./getAntiddosOverviewCcTrend";
export const getAntiddosOverviewCcTrend: typeof import("./getAntiddosOverviewCcTrend").getAntiddosOverviewCcTrend = null as any;
export const getAntiddosOverviewCcTrendOutput: typeof import("./getAntiddosOverviewCcTrend").getAntiddosOverviewCcTrendOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosOverviewCcTrend","getAntiddosOverviewCcTrendOutput"], () => require("./getAntiddosOverviewCcTrend"));

export { GetAntiddosOverviewDdosEventListArgs, GetAntiddosOverviewDdosEventListResult, GetAntiddosOverviewDdosEventListOutputArgs } from "./getAntiddosOverviewDdosEventList";
export const getAntiddosOverviewDdosEventList: typeof import("./getAntiddosOverviewDdosEventList").getAntiddosOverviewDdosEventList = null as any;
export const getAntiddosOverviewDdosEventListOutput: typeof import("./getAntiddosOverviewDdosEventList").getAntiddosOverviewDdosEventListOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosOverviewDdosEventList","getAntiddosOverviewDdosEventListOutput"], () => require("./getAntiddosOverviewDdosEventList"));

export { GetAntiddosOverviewDdosTrendArgs, GetAntiddosOverviewDdosTrendResult, GetAntiddosOverviewDdosTrendOutputArgs } from "./getAntiddosOverviewDdosTrend";
export const getAntiddosOverviewDdosTrend: typeof import("./getAntiddosOverviewDdosTrend").getAntiddosOverviewDdosTrend = null as any;
export const getAntiddosOverviewDdosTrendOutput: typeof import("./getAntiddosOverviewDdosTrend").getAntiddosOverviewDdosTrendOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosOverviewDdosTrend","getAntiddosOverviewDdosTrendOutput"], () => require("./getAntiddosOverviewDdosTrend"));

export { GetAntiddosOverviewIndexArgs, GetAntiddosOverviewIndexResult, GetAntiddosOverviewIndexOutputArgs } from "./getAntiddosOverviewIndex";
export const getAntiddosOverviewIndex: typeof import("./getAntiddosOverviewIndex").getAntiddosOverviewIndex = null as any;
export const getAntiddosOverviewIndexOutput: typeof import("./getAntiddosOverviewIndex").getAntiddosOverviewIndexOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosOverviewIndex","getAntiddosOverviewIndexOutput"], () => require("./getAntiddosOverviewIndex"));

export { GetAntiddosPendingRiskInfoArgs, GetAntiddosPendingRiskInfoResult, GetAntiddosPendingRiskInfoOutputArgs } from "./getAntiddosPendingRiskInfo";
export const getAntiddosPendingRiskInfo: typeof import("./getAntiddosPendingRiskInfo").getAntiddosPendingRiskInfo = null as any;
export const getAntiddosPendingRiskInfoOutput: typeof import("./getAntiddosPendingRiskInfo").getAntiddosPendingRiskInfoOutput = null as any;
utilities.lazyLoad(exports, ["getAntiddosPendingRiskInfo","getAntiddosPendingRiskInfoOutput"], () => require("./getAntiddosPendingRiskInfo"));

export { GetApiGatewayApiAppApiArgs, GetApiGatewayApiAppApiResult, GetApiGatewayApiAppApiOutputArgs } from "./getApiGatewayApiAppApi";
export const getApiGatewayApiAppApi: typeof import("./getApiGatewayApiAppApi").getApiGatewayApiAppApi = null as any;
export const getApiGatewayApiAppApiOutput: typeof import("./getApiGatewayApiAppApi").getApiGatewayApiAppApiOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiAppApi","getApiGatewayApiAppApiOutput"], () => require("./getApiGatewayApiAppApi"));

export { GetApiGatewayApiAppServiceArgs, GetApiGatewayApiAppServiceResult, GetApiGatewayApiAppServiceOutputArgs } from "./getApiGatewayApiAppService";
export const getApiGatewayApiAppService: typeof import("./getApiGatewayApiAppService").getApiGatewayApiAppService = null as any;
export const getApiGatewayApiAppServiceOutput: typeof import("./getApiGatewayApiAppService").getApiGatewayApiAppServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiAppService","getApiGatewayApiAppServiceOutput"], () => require("./getApiGatewayApiAppService"));

export { GetApiGatewayApiAppsArgs, GetApiGatewayApiAppsResult, GetApiGatewayApiAppsOutputArgs } from "./getApiGatewayApiApps";
export const getApiGatewayApiApps: typeof import("./getApiGatewayApiApps").getApiGatewayApiApps = null as any;
export const getApiGatewayApiAppsOutput: typeof import("./getApiGatewayApiApps").getApiGatewayApiAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiApps","getApiGatewayApiAppsOutput"], () => require("./getApiGatewayApiApps"));

export { GetApiGatewayApiDocsArgs, GetApiGatewayApiDocsResult, GetApiGatewayApiDocsOutputArgs } from "./getApiGatewayApiDocs";
export const getApiGatewayApiDocs: typeof import("./getApiGatewayApiDocs").getApiGatewayApiDocs = null as any;
export const getApiGatewayApiDocsOutput: typeof import("./getApiGatewayApiDocs").getApiGatewayApiDocsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiDocs","getApiGatewayApiDocsOutput"], () => require("./getApiGatewayApiDocs"));

export { GetApiGatewayApiKeysArgs, GetApiGatewayApiKeysResult, GetApiGatewayApiKeysOutputArgs } from "./getApiGatewayApiKeys";
export const getApiGatewayApiKeys: typeof import("./getApiGatewayApiKeys").getApiGatewayApiKeys = null as any;
export const getApiGatewayApiKeysOutput: typeof import("./getApiGatewayApiKeys").getApiGatewayApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiKeys","getApiGatewayApiKeysOutput"], () => require("./getApiGatewayApiKeys"));

export { GetApiGatewayApiPluginsArgs, GetApiGatewayApiPluginsResult, GetApiGatewayApiPluginsOutputArgs } from "./getApiGatewayApiPlugins";
export const getApiGatewayApiPlugins: typeof import("./getApiGatewayApiPlugins").getApiGatewayApiPlugins = null as any;
export const getApiGatewayApiPluginsOutput: typeof import("./getApiGatewayApiPlugins").getApiGatewayApiPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiPlugins","getApiGatewayApiPluginsOutput"], () => require("./getApiGatewayApiPlugins"));

export { GetApiGatewayApiUsagePlansArgs, GetApiGatewayApiUsagePlansResult, GetApiGatewayApiUsagePlansOutputArgs } from "./getApiGatewayApiUsagePlans";
export const getApiGatewayApiUsagePlans: typeof import("./getApiGatewayApiUsagePlans").getApiGatewayApiUsagePlans = null as any;
export const getApiGatewayApiUsagePlansOutput: typeof import("./getApiGatewayApiUsagePlans").getApiGatewayApiUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiUsagePlans","getApiGatewayApiUsagePlansOutput"], () => require("./getApiGatewayApiUsagePlans"));

export { GetApiGatewayApisArgs, GetApiGatewayApisResult, GetApiGatewayApisOutputArgs } from "./getApiGatewayApis";
export const getApiGatewayApis: typeof import("./getApiGatewayApis").getApiGatewayApis = null as any;
export const getApiGatewayApisOutput: typeof import("./getApiGatewayApis").getApiGatewayApisOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApis","getApiGatewayApisOutput"], () => require("./getApiGatewayApis"));

export { GetApiGatewayBindApiAppsStatusArgs, GetApiGatewayBindApiAppsStatusResult, GetApiGatewayBindApiAppsStatusOutputArgs } from "./getApiGatewayBindApiAppsStatus";
export const getApiGatewayBindApiAppsStatus: typeof import("./getApiGatewayBindApiAppsStatus").getApiGatewayBindApiAppsStatus = null as any;
export const getApiGatewayBindApiAppsStatusOutput: typeof import("./getApiGatewayBindApiAppsStatus").getApiGatewayBindApiAppsStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayBindApiAppsStatus","getApiGatewayBindApiAppsStatusOutput"], () => require("./getApiGatewayBindApiAppsStatus"));

export { GetApiGatewayCustomerDomainsArgs, GetApiGatewayCustomerDomainsResult, GetApiGatewayCustomerDomainsOutputArgs } from "./getApiGatewayCustomerDomains";
export const getApiGatewayCustomerDomains: typeof import("./getApiGatewayCustomerDomains").getApiGatewayCustomerDomains = null as any;
export const getApiGatewayCustomerDomainsOutput: typeof import("./getApiGatewayCustomerDomains").getApiGatewayCustomerDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayCustomerDomains","getApiGatewayCustomerDomainsOutput"], () => require("./getApiGatewayCustomerDomains"));

export { GetApiGatewayIpStrategiesArgs, GetApiGatewayIpStrategiesResult, GetApiGatewayIpStrategiesOutputArgs } from "./getApiGatewayIpStrategies";
export const getApiGatewayIpStrategies: typeof import("./getApiGatewayIpStrategies").getApiGatewayIpStrategies = null as any;
export const getApiGatewayIpStrategiesOutput: typeof import("./getApiGatewayIpStrategies").getApiGatewayIpStrategiesOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayIpStrategies","getApiGatewayIpStrategiesOutput"], () => require("./getApiGatewayIpStrategies"));

export { GetApiGatewayPluginsArgs, GetApiGatewayPluginsResult, GetApiGatewayPluginsOutputArgs } from "./getApiGatewayPlugins";
export const getApiGatewayPlugins: typeof import("./getApiGatewayPlugins").getApiGatewayPlugins = null as any;
export const getApiGatewayPluginsOutput: typeof import("./getApiGatewayPlugins").getApiGatewayPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayPlugins","getApiGatewayPluginsOutput"], () => require("./getApiGatewayPlugins"));

export { GetApiGatewayServiceEnvironmentListArgs, GetApiGatewayServiceEnvironmentListResult, GetApiGatewayServiceEnvironmentListOutputArgs } from "./getApiGatewayServiceEnvironmentList";
export const getApiGatewayServiceEnvironmentList: typeof import("./getApiGatewayServiceEnvironmentList").getApiGatewayServiceEnvironmentList = null as any;
export const getApiGatewayServiceEnvironmentListOutput: typeof import("./getApiGatewayServiceEnvironmentList").getApiGatewayServiceEnvironmentListOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayServiceEnvironmentList","getApiGatewayServiceEnvironmentListOutput"], () => require("./getApiGatewayServiceEnvironmentList"));

export { GetApiGatewayServiceReleaseVersionsArgs, GetApiGatewayServiceReleaseVersionsResult, GetApiGatewayServiceReleaseVersionsOutputArgs } from "./getApiGatewayServiceReleaseVersions";
export const getApiGatewayServiceReleaseVersions: typeof import("./getApiGatewayServiceReleaseVersions").getApiGatewayServiceReleaseVersions = null as any;
export const getApiGatewayServiceReleaseVersionsOutput: typeof import("./getApiGatewayServiceReleaseVersions").getApiGatewayServiceReleaseVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayServiceReleaseVersions","getApiGatewayServiceReleaseVersionsOutput"], () => require("./getApiGatewayServiceReleaseVersions"));

export { GetApiGatewayServicesArgs, GetApiGatewayServicesResult, GetApiGatewayServicesOutputArgs } from "./getApiGatewayServices";
export const getApiGatewayServices: typeof import("./getApiGatewayServices").getApiGatewayServices = null as any;
export const getApiGatewayServicesOutput: typeof import("./getApiGatewayServices").getApiGatewayServicesOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayServices","getApiGatewayServicesOutput"], () => require("./getApiGatewayServices"));

export { GetApiGatewayThrottlingApisArgs, GetApiGatewayThrottlingApisResult, GetApiGatewayThrottlingApisOutputArgs } from "./getApiGatewayThrottlingApis";
export const getApiGatewayThrottlingApis: typeof import("./getApiGatewayThrottlingApis").getApiGatewayThrottlingApis = null as any;
export const getApiGatewayThrottlingApisOutput: typeof import("./getApiGatewayThrottlingApis").getApiGatewayThrottlingApisOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayThrottlingApis","getApiGatewayThrottlingApisOutput"], () => require("./getApiGatewayThrottlingApis"));

export { GetApiGatewayThrottlingServicesArgs, GetApiGatewayThrottlingServicesResult, GetApiGatewayThrottlingServicesOutputArgs } from "./getApiGatewayThrottlingServices";
export const getApiGatewayThrottlingServices: typeof import("./getApiGatewayThrottlingServices").getApiGatewayThrottlingServices = null as any;
export const getApiGatewayThrottlingServicesOutput: typeof import("./getApiGatewayThrottlingServices").getApiGatewayThrottlingServicesOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayThrottlingServices","getApiGatewayThrottlingServicesOutput"], () => require("./getApiGatewayThrottlingServices"));

export { GetApiGatewayUpstreamsArgs, GetApiGatewayUpstreamsResult, GetApiGatewayUpstreamsOutputArgs } from "./getApiGatewayUpstreams";
export const getApiGatewayUpstreams: typeof import("./getApiGatewayUpstreams").getApiGatewayUpstreams = null as any;
export const getApiGatewayUpstreamsOutput: typeof import("./getApiGatewayUpstreams").getApiGatewayUpstreamsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayUpstreams","getApiGatewayUpstreamsOutput"], () => require("./getApiGatewayUpstreams"));

export { GetApiGatewayUsagePlanEnvironmentsArgs, GetApiGatewayUsagePlanEnvironmentsResult, GetApiGatewayUsagePlanEnvironmentsOutputArgs } from "./getApiGatewayUsagePlanEnvironments";
export const getApiGatewayUsagePlanEnvironments: typeof import("./getApiGatewayUsagePlanEnvironments").getApiGatewayUsagePlanEnvironments = null as any;
export const getApiGatewayUsagePlanEnvironmentsOutput: typeof import("./getApiGatewayUsagePlanEnvironments").getApiGatewayUsagePlanEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayUsagePlanEnvironments","getApiGatewayUsagePlanEnvironmentsOutput"], () => require("./getApiGatewayUsagePlanEnvironments"));

export { GetApiGatewayUsagePlansArgs, GetApiGatewayUsagePlansResult, GetApiGatewayUsagePlansOutputArgs } from "./getApiGatewayUsagePlans";
export const getApiGatewayUsagePlans: typeof import("./getApiGatewayUsagePlans").getApiGatewayUsagePlans = null as any;
export const getApiGatewayUsagePlansOutput: typeof import("./getApiGatewayUsagePlans").getApiGatewayUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayUsagePlans","getApiGatewayUsagePlansOutput"], () => require("./getApiGatewayUsagePlans"));

export { GetAsAdvicesArgs, GetAsAdvicesResult, GetAsAdvicesOutputArgs } from "./getAsAdvices";
export const getAsAdvices: typeof import("./getAsAdvices").getAsAdvices = null as any;
export const getAsAdvicesOutput: typeof import("./getAsAdvices").getAsAdvicesOutput = null as any;
utilities.lazyLoad(exports, ["getAsAdvices","getAsAdvicesOutput"], () => require("./getAsAdvices"));

export { GetAsInstancesArgs, GetAsInstancesResult, GetAsInstancesOutputArgs } from "./getAsInstances";
export const getAsInstances: typeof import("./getAsInstances").getAsInstances = null as any;
export const getAsInstancesOutput: typeof import("./getAsInstances").getAsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAsInstances","getAsInstancesOutput"], () => require("./getAsInstances"));

export { GetAsLastActivityArgs, GetAsLastActivityResult, GetAsLastActivityOutputArgs } from "./getAsLastActivity";
export const getAsLastActivity: typeof import("./getAsLastActivity").getAsLastActivity = null as any;
export const getAsLastActivityOutput: typeof import("./getAsLastActivity").getAsLastActivityOutput = null as any;
utilities.lazyLoad(exports, ["getAsLastActivity","getAsLastActivityOutput"], () => require("./getAsLastActivity"));

export { GetAsLimitsArgs, GetAsLimitsResult, GetAsLimitsOutputArgs } from "./getAsLimits";
export const getAsLimits: typeof import("./getAsLimits").getAsLimits = null as any;
export const getAsLimitsOutput: typeof import("./getAsLimits").getAsLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getAsLimits","getAsLimitsOutput"], () => require("./getAsLimits"));

export { GetAsScalingConfigsArgs, GetAsScalingConfigsResult, GetAsScalingConfigsOutputArgs } from "./getAsScalingConfigs";
export const getAsScalingConfigs: typeof import("./getAsScalingConfigs").getAsScalingConfigs = null as any;
export const getAsScalingConfigsOutput: typeof import("./getAsScalingConfigs").getAsScalingConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getAsScalingConfigs","getAsScalingConfigsOutput"], () => require("./getAsScalingConfigs"));

export { GetAsScalingGroupsArgs, GetAsScalingGroupsResult, GetAsScalingGroupsOutputArgs } from "./getAsScalingGroups";
export const getAsScalingGroups: typeof import("./getAsScalingGroups").getAsScalingGroups = null as any;
export const getAsScalingGroupsOutput: typeof import("./getAsScalingGroups").getAsScalingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAsScalingGroups","getAsScalingGroupsOutput"], () => require("./getAsScalingGroups"));

export { GetAsScalingPoliciesArgs, GetAsScalingPoliciesResult, GetAsScalingPoliciesOutputArgs } from "./getAsScalingPolicies";
export const getAsScalingPolicies: typeof import("./getAsScalingPolicies").getAsScalingPolicies = null as any;
export const getAsScalingPoliciesOutput: typeof import("./getAsScalingPolicies").getAsScalingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAsScalingPolicies","getAsScalingPoliciesOutput"], () => require("./getAsScalingPolicies"));

export { GetAuditCosRegionsArgs, GetAuditCosRegionsResult, GetAuditCosRegionsOutputArgs } from "./getAuditCosRegions";
export const getAuditCosRegions: typeof import("./getAuditCosRegions").getAuditCosRegions = null as any;
export const getAuditCosRegionsOutput: typeof import("./getAuditCosRegions").getAuditCosRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getAuditCosRegions","getAuditCosRegionsOutput"], () => require("./getAuditCosRegions"));

export { GetAuditKeyAliasArgs, GetAuditKeyAliasResult, GetAuditKeyAliasOutputArgs } from "./getAuditKeyAlias";
export const getAuditKeyAlias: typeof import("./getAuditKeyAlias").getAuditKeyAlias = null as any;
export const getAuditKeyAliasOutput: typeof import("./getAuditKeyAlias").getAuditKeyAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAuditKeyAlias","getAuditKeyAliasOutput"], () => require("./getAuditKeyAlias"));

export { GetAuditsArgs, GetAuditsResult, GetAuditsOutputArgs } from "./getAudits";
export const getAudits: typeof import("./getAudits").getAudits = null as any;
export const getAuditsOutput: typeof import("./getAudits").getAuditsOutput = null as any;
utilities.lazyLoad(exports, ["getAudits","getAuditsOutput"], () => require("./getAudits"));

export { GetAvailabilityRegionsArgs, GetAvailabilityRegionsResult, GetAvailabilityRegionsOutputArgs } from "./getAvailabilityRegions";
export const getAvailabilityRegions: typeof import("./getAvailabilityRegions").getAvailabilityRegions = null as any;
export const getAvailabilityRegionsOutput: typeof import("./getAvailabilityRegions").getAvailabilityRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityRegions","getAvailabilityRegionsOutput"], () => require("./getAvailabilityRegions"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetAvailabilityZonesByProductArgs, GetAvailabilityZonesByProductResult, GetAvailabilityZonesByProductOutputArgs } from "./getAvailabilityZonesByProduct";
export const getAvailabilityZonesByProduct: typeof import("./getAvailabilityZonesByProduct").getAvailabilityZonesByProduct = null as any;
export const getAvailabilityZonesByProductOutput: typeof import("./getAvailabilityZonesByProduct").getAvailabilityZonesByProductOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZonesByProduct","getAvailabilityZonesByProductOutput"], () => require("./getAvailabilityZonesByProduct"));

export { GetBiProjectArgs, GetBiProjectResult, GetBiProjectOutputArgs } from "./getBiProject";
export const getBiProject: typeof import("./getBiProject").getBiProject = null as any;
export const getBiProjectOutput: typeof import("./getBiProject").getBiProjectOutput = null as any;
utilities.lazyLoad(exports, ["getBiProject","getBiProjectOutput"], () => require("./getBiProject"));

export { GetBiUserProjectArgs, GetBiUserProjectResult, GetBiUserProjectOutputArgs } from "./getBiUserProject";
export const getBiUserProject: typeof import("./getBiUserProject").getBiUserProject = null as any;
export const getBiUserProjectOutput: typeof import("./getBiUserProject").getBiUserProjectOutput = null as any;
utilities.lazyLoad(exports, ["getBiUserProject","getBiUserProjectOutput"], () => require("./getBiUserProject"));

export { GetCamAccountSummaryArgs, GetCamAccountSummaryResult, GetCamAccountSummaryOutputArgs } from "./getCamAccountSummary";
export const getCamAccountSummary: typeof import("./getCamAccountSummary").getCamAccountSummary = null as any;
export const getCamAccountSummaryOutput: typeof import("./getCamAccountSummary").getCamAccountSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getCamAccountSummary","getCamAccountSummaryOutput"], () => require("./getCamAccountSummary"));

export { GetCamGroupMembershipsArgs, GetCamGroupMembershipsResult, GetCamGroupMembershipsOutputArgs } from "./getCamGroupMemberships";
export const getCamGroupMemberships: typeof import("./getCamGroupMemberships").getCamGroupMemberships = null as any;
export const getCamGroupMembershipsOutput: typeof import("./getCamGroupMemberships").getCamGroupMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getCamGroupMemberships","getCamGroupMembershipsOutput"], () => require("./getCamGroupMemberships"));

export { GetCamGroupPolicyAttachmentsArgs, GetCamGroupPolicyAttachmentsResult, GetCamGroupPolicyAttachmentsOutputArgs } from "./getCamGroupPolicyAttachments";
export const getCamGroupPolicyAttachments: typeof import("./getCamGroupPolicyAttachments").getCamGroupPolicyAttachments = null as any;
export const getCamGroupPolicyAttachmentsOutput: typeof import("./getCamGroupPolicyAttachments").getCamGroupPolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCamGroupPolicyAttachments","getCamGroupPolicyAttachmentsOutput"], () => require("./getCamGroupPolicyAttachments"));

export { GetCamGroupUserAccountArgs, GetCamGroupUserAccountResult, GetCamGroupUserAccountOutputArgs } from "./getCamGroupUserAccount";
export const getCamGroupUserAccount: typeof import("./getCamGroupUserAccount").getCamGroupUserAccount = null as any;
export const getCamGroupUserAccountOutput: typeof import("./getCamGroupUserAccount").getCamGroupUserAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCamGroupUserAccount","getCamGroupUserAccountOutput"], () => require("./getCamGroupUserAccount"));

export { GetCamGroupsArgs, GetCamGroupsResult, GetCamGroupsOutputArgs } from "./getCamGroups";
export const getCamGroups: typeof import("./getCamGroups").getCamGroups = null as any;
export const getCamGroupsOutput: typeof import("./getCamGroups").getCamGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCamGroups","getCamGroupsOutput"], () => require("./getCamGroups"));

export { GetCamListAttachedUserPolicyArgs, GetCamListAttachedUserPolicyResult, GetCamListAttachedUserPolicyOutputArgs } from "./getCamListAttachedUserPolicy";
export const getCamListAttachedUserPolicy: typeof import("./getCamListAttachedUserPolicy").getCamListAttachedUserPolicy = null as any;
export const getCamListAttachedUserPolicyOutput: typeof import("./getCamListAttachedUserPolicy").getCamListAttachedUserPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCamListAttachedUserPolicy","getCamListAttachedUserPolicyOutput"], () => require("./getCamListAttachedUserPolicy"));

export { GetCamListEntitiesForPolicyArgs, GetCamListEntitiesForPolicyResult, GetCamListEntitiesForPolicyOutputArgs } from "./getCamListEntitiesForPolicy";
export const getCamListEntitiesForPolicy: typeof import("./getCamListEntitiesForPolicy").getCamListEntitiesForPolicy = null as any;
export const getCamListEntitiesForPolicyOutput: typeof import("./getCamListEntitiesForPolicy").getCamListEntitiesForPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCamListEntitiesForPolicy","getCamListEntitiesForPolicyOutput"], () => require("./getCamListEntitiesForPolicy"));

export { GetCamOidcConfigArgs, GetCamOidcConfigResult, GetCamOidcConfigOutputArgs } from "./getCamOidcConfig";
export const getCamOidcConfig: typeof import("./getCamOidcConfig").getCamOidcConfig = null as any;
export const getCamOidcConfigOutput: typeof import("./getCamOidcConfig").getCamOidcConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCamOidcConfig","getCamOidcConfigOutput"], () => require("./getCamOidcConfig"));

export { GetCamPoliciesArgs, GetCamPoliciesResult, GetCamPoliciesOutputArgs } from "./getCamPolicies";
export const getCamPolicies: typeof import("./getCamPolicies").getCamPolicies = null as any;
export const getCamPoliciesOutput: typeof import("./getCamPolicies").getCamPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCamPolicies","getCamPoliciesOutput"], () => require("./getCamPolicies"));

export { GetCamPolicyGrantingServiceAccessArgs, GetCamPolicyGrantingServiceAccessResult, GetCamPolicyGrantingServiceAccessOutputArgs } from "./getCamPolicyGrantingServiceAccess";
export const getCamPolicyGrantingServiceAccess: typeof import("./getCamPolicyGrantingServiceAccess").getCamPolicyGrantingServiceAccess = null as any;
export const getCamPolicyGrantingServiceAccessOutput: typeof import("./getCamPolicyGrantingServiceAccess").getCamPolicyGrantingServiceAccessOutput = null as any;
utilities.lazyLoad(exports, ["getCamPolicyGrantingServiceAccess","getCamPolicyGrantingServiceAccessOutput"], () => require("./getCamPolicyGrantingServiceAccess"));

export { GetCamRolePolicyAttachmentsArgs, GetCamRolePolicyAttachmentsResult, GetCamRolePolicyAttachmentsOutputArgs } from "./getCamRolePolicyAttachments";
export const getCamRolePolicyAttachments: typeof import("./getCamRolePolicyAttachments").getCamRolePolicyAttachments = null as any;
export const getCamRolePolicyAttachmentsOutput: typeof import("./getCamRolePolicyAttachments").getCamRolePolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCamRolePolicyAttachments","getCamRolePolicyAttachmentsOutput"], () => require("./getCamRolePolicyAttachments"));

export { GetCamRolesArgs, GetCamRolesResult, GetCamRolesOutputArgs } from "./getCamRoles";
export const getCamRoles: typeof import("./getCamRoles").getCamRoles = null as any;
export const getCamRolesOutput: typeof import("./getCamRoles").getCamRolesOutput = null as any;
utilities.lazyLoad(exports, ["getCamRoles","getCamRolesOutput"], () => require("./getCamRoles"));

export { GetCamSamlProvidersArgs, GetCamSamlProvidersResult, GetCamSamlProvidersOutputArgs } from "./getCamSamlProviders";
export const getCamSamlProviders: typeof import("./getCamSamlProviders").getCamSamlProviders = null as any;
export const getCamSamlProvidersOutput: typeof import("./getCamSamlProviders").getCamSamlProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getCamSamlProviders","getCamSamlProvidersOutput"], () => require("./getCamSamlProviders"));

export { GetCamSecretLastUsedTimeArgs, GetCamSecretLastUsedTimeResult, GetCamSecretLastUsedTimeOutputArgs } from "./getCamSecretLastUsedTime";
export const getCamSecretLastUsedTime: typeof import("./getCamSecretLastUsedTime").getCamSecretLastUsedTime = null as any;
export const getCamSecretLastUsedTimeOutput: typeof import("./getCamSecretLastUsedTime").getCamSecretLastUsedTimeOutput = null as any;
utilities.lazyLoad(exports, ["getCamSecretLastUsedTime","getCamSecretLastUsedTimeOutput"], () => require("./getCamSecretLastUsedTime"));

export { GetCamUserPolicyAttachmentsArgs, GetCamUserPolicyAttachmentsResult, GetCamUserPolicyAttachmentsOutputArgs } from "./getCamUserPolicyAttachments";
export const getCamUserPolicyAttachments: typeof import("./getCamUserPolicyAttachments").getCamUserPolicyAttachments = null as any;
export const getCamUserPolicyAttachmentsOutput: typeof import("./getCamUserPolicyAttachments").getCamUserPolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCamUserPolicyAttachments","getCamUserPolicyAttachmentsOutput"], () => require("./getCamUserPolicyAttachments"));

export { GetCamUsersArgs, GetCamUsersResult, GetCamUsersOutputArgs } from "./getCamUsers";
export const getCamUsers: typeof import("./getCamUsers").getCamUsers = null as any;
export const getCamUsersOutput: typeof import("./getCamUsers").getCamUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCamUsers","getCamUsersOutput"], () => require("./getCamUsers"));

export { GetCatMetricDataArgs, GetCatMetricDataResult, GetCatMetricDataOutputArgs } from "./getCatMetricData";
export const getCatMetricData: typeof import("./getCatMetricData").getCatMetricData = null as any;
export const getCatMetricDataOutput: typeof import("./getCatMetricData").getCatMetricDataOutput = null as any;
utilities.lazyLoad(exports, ["getCatMetricData","getCatMetricDataOutput"], () => require("./getCatMetricData"));

export { GetCatNodeArgs, GetCatNodeResult, GetCatNodeOutputArgs } from "./getCatNode";
export const getCatNode: typeof import("./getCatNode").getCatNode = null as any;
export const getCatNodeOutput: typeof import("./getCatNode").getCatNodeOutput = null as any;
utilities.lazyLoad(exports, ["getCatNode","getCatNodeOutput"], () => require("./getCatNode"));

export { GetCatProbeDataArgs, GetCatProbeDataResult, GetCatProbeDataOutputArgs } from "./getCatProbeData";
export const getCatProbeData: typeof import("./getCatProbeData").getCatProbeData = null as any;
export const getCatProbeDataOutput: typeof import("./getCatProbeData").getCatProbeDataOutput = null as any;
utilities.lazyLoad(exports, ["getCatProbeData","getCatProbeDataOutput"], () => require("./getCatProbeData"));

export { GetCbsSnapshotPoliciesArgs, GetCbsSnapshotPoliciesResult, GetCbsSnapshotPoliciesOutputArgs } from "./getCbsSnapshotPolicies";
export const getCbsSnapshotPolicies: typeof import("./getCbsSnapshotPolicies").getCbsSnapshotPolicies = null as any;
export const getCbsSnapshotPoliciesOutput: typeof import("./getCbsSnapshotPolicies").getCbsSnapshotPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCbsSnapshotPolicies","getCbsSnapshotPoliciesOutput"], () => require("./getCbsSnapshotPolicies"));

export { GetCbsSnapshotsArgs, GetCbsSnapshotsResult, GetCbsSnapshotsOutputArgs } from "./getCbsSnapshots";
export const getCbsSnapshots: typeof import("./getCbsSnapshots").getCbsSnapshots = null as any;
export const getCbsSnapshotsOutput: typeof import("./getCbsSnapshots").getCbsSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getCbsSnapshots","getCbsSnapshotsOutput"], () => require("./getCbsSnapshots"));

export { GetCbsStoragesArgs, GetCbsStoragesResult, GetCbsStoragesOutputArgs } from "./getCbsStorages";
export const getCbsStorages: typeof import("./getCbsStorages").getCbsStorages = null as any;
export const getCbsStoragesOutput: typeof import("./getCbsStorages").getCbsStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getCbsStorages","getCbsStoragesOutput"], () => require("./getCbsStorages"));

export { GetCbsStoragesSetArgs, GetCbsStoragesSetResult, GetCbsStoragesSetOutputArgs } from "./getCbsStoragesSet";
export const getCbsStoragesSet: typeof import("./getCbsStoragesSet").getCbsStoragesSet = null as any;
export const getCbsStoragesSetOutput: typeof import("./getCbsStoragesSet").getCbsStoragesSetOutput = null as any;
utilities.lazyLoad(exports, ["getCbsStoragesSet","getCbsStoragesSetOutput"], () => require("./getCbsStoragesSet"));

export { GetCcnBandwidthLimitsArgs, GetCcnBandwidthLimitsResult, GetCcnBandwidthLimitsOutputArgs } from "./getCcnBandwidthLimits";
export const getCcnBandwidthLimits: typeof import("./getCcnBandwidthLimits").getCcnBandwidthLimits = null as any;
export const getCcnBandwidthLimitsOutput: typeof import("./getCcnBandwidthLimits").getCcnBandwidthLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getCcnBandwidthLimits","getCcnBandwidthLimitsOutput"], () => require("./getCcnBandwidthLimits"));

export { GetCcnCrossBorderComplianceArgs, GetCcnCrossBorderComplianceResult, GetCcnCrossBorderComplianceOutputArgs } from "./getCcnCrossBorderCompliance";
export const getCcnCrossBorderCompliance: typeof import("./getCcnCrossBorderCompliance").getCcnCrossBorderCompliance = null as any;
export const getCcnCrossBorderComplianceOutput: typeof import("./getCcnCrossBorderCompliance").getCcnCrossBorderComplianceOutput = null as any;
utilities.lazyLoad(exports, ["getCcnCrossBorderCompliance","getCcnCrossBorderComplianceOutput"], () => require("./getCcnCrossBorderCompliance"));

export { GetCcnCrossBorderFlowMonitorArgs, GetCcnCrossBorderFlowMonitorResult, GetCcnCrossBorderFlowMonitorOutputArgs } from "./getCcnCrossBorderFlowMonitor";
export const getCcnCrossBorderFlowMonitor: typeof import("./getCcnCrossBorderFlowMonitor").getCcnCrossBorderFlowMonitor = null as any;
export const getCcnCrossBorderFlowMonitorOutput: typeof import("./getCcnCrossBorderFlowMonitor").getCcnCrossBorderFlowMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getCcnCrossBorderFlowMonitor","getCcnCrossBorderFlowMonitorOutput"], () => require("./getCcnCrossBorderFlowMonitor"));

export { GetCcnCrossBorderRegionBandwidthLimitsArgs, GetCcnCrossBorderRegionBandwidthLimitsResult, GetCcnCrossBorderRegionBandwidthLimitsOutputArgs } from "./getCcnCrossBorderRegionBandwidthLimits";
export const getCcnCrossBorderRegionBandwidthLimits: typeof import("./getCcnCrossBorderRegionBandwidthLimits").getCcnCrossBorderRegionBandwidthLimits = null as any;
export const getCcnCrossBorderRegionBandwidthLimitsOutput: typeof import("./getCcnCrossBorderRegionBandwidthLimits").getCcnCrossBorderRegionBandwidthLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getCcnCrossBorderRegionBandwidthLimits","getCcnCrossBorderRegionBandwidthLimitsOutput"], () => require("./getCcnCrossBorderRegionBandwidthLimits"));

export { GetCcnInstancesArgs, GetCcnInstancesResult, GetCcnInstancesOutputArgs } from "./getCcnInstances";
export const getCcnInstances: typeof import("./getCcnInstances").getCcnInstances = null as any;
export const getCcnInstancesOutput: typeof import("./getCcnInstances").getCcnInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCcnInstances","getCcnInstancesOutput"], () => require("./getCcnInstances"));

export { GetCcnRoutesArgs, GetCcnRoutesResult, GetCcnRoutesOutputArgs } from "./getCcnRoutes";
export const getCcnRoutes: typeof import("./getCcnRoutes").getCcnRoutes = null as any;
export const getCcnRoutesOutput: typeof import("./getCcnRoutes").getCcnRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getCcnRoutes","getCcnRoutesOutput"], () => require("./getCcnRoutes"));

export { GetCcnTenantInstancesArgs, GetCcnTenantInstancesResult, GetCcnTenantInstancesOutputArgs } from "./getCcnTenantInstances";
export const getCcnTenantInstances: typeof import("./getCcnTenantInstances").getCcnTenantInstances = null as any;
export const getCcnTenantInstancesOutput: typeof import("./getCcnTenantInstances").getCcnTenantInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCcnTenantInstances","getCcnTenantInstancesOutput"], () => require("./getCcnTenantInstances"));

export { GetCdcDedicatedClusterHostsArgs, GetCdcDedicatedClusterHostsResult, GetCdcDedicatedClusterHostsOutputArgs } from "./getCdcDedicatedClusterHosts";
export const getCdcDedicatedClusterHosts: typeof import("./getCdcDedicatedClusterHosts").getCdcDedicatedClusterHosts = null as any;
export const getCdcDedicatedClusterHostsOutput: typeof import("./getCdcDedicatedClusterHosts").getCdcDedicatedClusterHostsOutput = null as any;
utilities.lazyLoad(exports, ["getCdcDedicatedClusterHosts","getCdcDedicatedClusterHostsOutput"], () => require("./getCdcDedicatedClusterHosts"));

export { GetCdcDedicatedClusterInstanceTypesArgs, GetCdcDedicatedClusterInstanceTypesResult, GetCdcDedicatedClusterInstanceTypesOutputArgs } from "./getCdcDedicatedClusterInstanceTypes";
export const getCdcDedicatedClusterInstanceTypes: typeof import("./getCdcDedicatedClusterInstanceTypes").getCdcDedicatedClusterInstanceTypes = null as any;
export const getCdcDedicatedClusterInstanceTypesOutput: typeof import("./getCdcDedicatedClusterInstanceTypes").getCdcDedicatedClusterInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getCdcDedicatedClusterInstanceTypes","getCdcDedicatedClusterInstanceTypesOutput"], () => require("./getCdcDedicatedClusterInstanceTypes"));

export { GetCdcDedicatedClusterOrdersArgs, GetCdcDedicatedClusterOrdersResult, GetCdcDedicatedClusterOrdersOutputArgs } from "./getCdcDedicatedClusterOrders";
export const getCdcDedicatedClusterOrders: typeof import("./getCdcDedicatedClusterOrders").getCdcDedicatedClusterOrders = null as any;
export const getCdcDedicatedClusterOrdersOutput: typeof import("./getCdcDedicatedClusterOrders").getCdcDedicatedClusterOrdersOutput = null as any;
utilities.lazyLoad(exports, ["getCdcDedicatedClusterOrders","getCdcDedicatedClusterOrdersOutput"], () => require("./getCdcDedicatedClusterOrders"));

export { GetCdhInstancesArgs, GetCdhInstancesResult, GetCdhInstancesOutputArgs } from "./getCdhInstances";
export const getCdhInstances: typeof import("./getCdhInstances").getCdhInstances = null as any;
export const getCdhInstancesOutput: typeof import("./getCdhInstances").getCdhInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCdhInstances","getCdhInstancesOutput"], () => require("./getCdhInstances"));

export { GetCdnDomainVerifierArgs, GetCdnDomainVerifierResult, GetCdnDomainVerifierOutputArgs } from "./getCdnDomainVerifier";
export const getCdnDomainVerifier: typeof import("./getCdnDomainVerifier").getCdnDomainVerifier = null as any;
export const getCdnDomainVerifierOutput: typeof import("./getCdnDomainVerifier").getCdnDomainVerifierOutput = null as any;
utilities.lazyLoad(exports, ["getCdnDomainVerifier","getCdnDomainVerifierOutput"], () => require("./getCdnDomainVerifier"));

export { GetCdnDomainsArgs, GetCdnDomainsResult, GetCdnDomainsOutputArgs } from "./getCdnDomains";
export const getCdnDomains: typeof import("./getCdnDomains").getCdnDomains = null as any;
export const getCdnDomainsOutput: typeof import("./getCdnDomains").getCdnDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getCdnDomains","getCdnDomainsOutput"], () => require("./getCdnDomains"));

export { GetCdwdorisInstancesArgs, GetCdwdorisInstancesResult, GetCdwdorisInstancesOutputArgs } from "./getCdwdorisInstances";
export const getCdwdorisInstances: typeof import("./getCdwdorisInstances").getCdwdorisInstances = null as any;
export const getCdwdorisInstancesOutput: typeof import("./getCdwdorisInstances").getCdwdorisInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCdwdorisInstances","getCdwdorisInstancesOutput"], () => require("./getCdwdorisInstances"));

export { GetCfsAccessGroupsArgs, GetCfsAccessGroupsResult, GetCfsAccessGroupsOutputArgs } from "./getCfsAccessGroups";
export const getCfsAccessGroups: typeof import("./getCfsAccessGroups").getCfsAccessGroups = null as any;
export const getCfsAccessGroupsOutput: typeof import("./getCfsAccessGroups").getCfsAccessGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCfsAccessGroups","getCfsAccessGroupsOutput"], () => require("./getCfsAccessGroups"));

export { GetCfsAccessRulesArgs, GetCfsAccessRulesResult, GetCfsAccessRulesOutputArgs } from "./getCfsAccessRules";
export const getCfsAccessRules: typeof import("./getCfsAccessRules").getCfsAccessRules = null as any;
export const getCfsAccessRulesOutput: typeof import("./getCfsAccessRules").getCfsAccessRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCfsAccessRules","getCfsAccessRulesOutput"], () => require("./getCfsAccessRules"));

export { GetCfsAvailableZoneArgs, GetCfsAvailableZoneResult, GetCfsAvailableZoneOutputArgs } from "./getCfsAvailableZone";
export const getCfsAvailableZone: typeof import("./getCfsAvailableZone").getCfsAvailableZone = null as any;
export const getCfsAvailableZoneOutput: typeof import("./getCfsAvailableZone").getCfsAvailableZoneOutput = null as any;
utilities.lazyLoad(exports, ["getCfsAvailableZone","getCfsAvailableZoneOutput"], () => require("./getCfsAvailableZone"));

export { GetCfsFileSystemClientsArgs, GetCfsFileSystemClientsResult, GetCfsFileSystemClientsOutputArgs } from "./getCfsFileSystemClients";
export const getCfsFileSystemClients: typeof import("./getCfsFileSystemClients").getCfsFileSystemClients = null as any;
export const getCfsFileSystemClientsOutput: typeof import("./getCfsFileSystemClients").getCfsFileSystemClientsOutput = null as any;
utilities.lazyLoad(exports, ["getCfsFileSystemClients","getCfsFileSystemClientsOutput"], () => require("./getCfsFileSystemClients"));

export { GetCfsFileSystemsArgs, GetCfsFileSystemsResult, GetCfsFileSystemsOutputArgs } from "./getCfsFileSystems";
export const getCfsFileSystems: typeof import("./getCfsFileSystems").getCfsFileSystems = null as any;
export const getCfsFileSystemsOutput: typeof import("./getCfsFileSystems").getCfsFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getCfsFileSystems","getCfsFileSystemsOutput"], () => require("./getCfsFileSystems"));

export { GetCfsMountTargetsArgs, GetCfsMountTargetsResult, GetCfsMountTargetsOutputArgs } from "./getCfsMountTargets";
export const getCfsMountTargets: typeof import("./getCfsMountTargets").getCfsMountTargets = null as any;
export const getCfsMountTargetsOutput: typeof import("./getCfsMountTargets").getCfsMountTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getCfsMountTargets","getCfsMountTargetsOutput"], () => require("./getCfsMountTargets"));

export { GetCfwEdgeFwSwitchesArgs, GetCfwEdgeFwSwitchesResult, GetCfwEdgeFwSwitchesOutputArgs } from "./getCfwEdgeFwSwitches";
export const getCfwEdgeFwSwitches: typeof import("./getCfwEdgeFwSwitches").getCfwEdgeFwSwitches = null as any;
export const getCfwEdgeFwSwitchesOutput: typeof import("./getCfwEdgeFwSwitches").getCfwEdgeFwSwitchesOutput = null as any;
utilities.lazyLoad(exports, ["getCfwEdgeFwSwitches","getCfwEdgeFwSwitchesOutput"], () => require("./getCfwEdgeFwSwitches"));

export { GetCfwNatFwSwitchesArgs, GetCfwNatFwSwitchesResult, GetCfwNatFwSwitchesOutputArgs } from "./getCfwNatFwSwitches";
export const getCfwNatFwSwitches: typeof import("./getCfwNatFwSwitches").getCfwNatFwSwitches = null as any;
export const getCfwNatFwSwitchesOutput: typeof import("./getCfwNatFwSwitches").getCfwNatFwSwitchesOutput = null as any;
utilities.lazyLoad(exports, ["getCfwNatFwSwitches","getCfwNatFwSwitchesOutput"], () => require("./getCfwNatFwSwitches"));

export { GetCfwVpcFwSwitchesArgs, GetCfwVpcFwSwitchesResult, GetCfwVpcFwSwitchesOutputArgs } from "./getCfwVpcFwSwitches";
export const getCfwVpcFwSwitches: typeof import("./getCfwVpcFwSwitches").getCfwVpcFwSwitches = null as any;
export const getCfwVpcFwSwitchesOutput: typeof import("./getCfwVpcFwSwitches").getCfwVpcFwSwitchesOutput = null as any;
utilities.lazyLoad(exports, ["getCfwVpcFwSwitches","getCfwVpcFwSwitchesOutput"], () => require("./getCfwVpcFwSwitches"));

export { GetChdfsAccessGroupsArgs, GetChdfsAccessGroupsResult, GetChdfsAccessGroupsOutputArgs } from "./getChdfsAccessGroups";
export const getChdfsAccessGroups: typeof import("./getChdfsAccessGroups").getChdfsAccessGroups = null as any;
export const getChdfsAccessGroupsOutput: typeof import("./getChdfsAccessGroups").getChdfsAccessGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getChdfsAccessGroups","getChdfsAccessGroupsOutput"], () => require("./getChdfsAccessGroups"));

export { GetChdfsFileSystemsArgs, GetChdfsFileSystemsResult, GetChdfsFileSystemsOutputArgs } from "./getChdfsFileSystems";
export const getChdfsFileSystems: typeof import("./getChdfsFileSystems").getChdfsFileSystems = null as any;
export const getChdfsFileSystemsOutput: typeof import("./getChdfsFileSystems").getChdfsFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getChdfsFileSystems","getChdfsFileSystemsOutput"], () => require("./getChdfsFileSystems"));

export { GetChdfsMountPointsArgs, GetChdfsMountPointsResult, GetChdfsMountPointsOutputArgs } from "./getChdfsMountPoints";
export const getChdfsMountPoints: typeof import("./getChdfsMountPoints").getChdfsMountPoints = null as any;
export const getChdfsMountPointsOutput: typeof import("./getChdfsMountPoints").getChdfsMountPointsOutput = null as any;
utilities.lazyLoad(exports, ["getChdfsMountPoints","getChdfsMountPointsOutput"], () => require("./getChdfsMountPoints"));

export { GetCkafkaAclsArgs, GetCkafkaAclsResult, GetCkafkaAclsOutputArgs } from "./getCkafkaAcls";
export const getCkafkaAcls: typeof import("./getCkafkaAcls").getCkafkaAcls = null as any;
export const getCkafkaAclsOutput: typeof import("./getCkafkaAcls").getCkafkaAclsOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaAcls","getCkafkaAclsOutput"], () => require("./getCkafkaAcls"));

export { GetCkafkaConnectResourceArgs, GetCkafkaConnectResourceResult, GetCkafkaConnectResourceOutputArgs } from "./getCkafkaConnectResource";
export const getCkafkaConnectResource: typeof import("./getCkafkaConnectResource").getCkafkaConnectResource = null as any;
export const getCkafkaConnectResourceOutput: typeof import("./getCkafkaConnectResource").getCkafkaConnectResourceOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaConnectResource","getCkafkaConnectResourceOutput"], () => require("./getCkafkaConnectResource"));

export { GetCkafkaDatahubGroupOffsetsArgs, GetCkafkaDatahubGroupOffsetsResult, GetCkafkaDatahubGroupOffsetsOutputArgs } from "./getCkafkaDatahubGroupOffsets";
export const getCkafkaDatahubGroupOffsets: typeof import("./getCkafkaDatahubGroupOffsets").getCkafkaDatahubGroupOffsets = null as any;
export const getCkafkaDatahubGroupOffsetsOutput: typeof import("./getCkafkaDatahubGroupOffsets").getCkafkaDatahubGroupOffsetsOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaDatahubGroupOffsets","getCkafkaDatahubGroupOffsetsOutput"], () => require("./getCkafkaDatahubGroupOffsets"));

export { GetCkafkaDatahubTaskArgs, GetCkafkaDatahubTaskResult, GetCkafkaDatahubTaskOutputArgs } from "./getCkafkaDatahubTask";
export const getCkafkaDatahubTask: typeof import("./getCkafkaDatahubTask").getCkafkaDatahubTask = null as any;
export const getCkafkaDatahubTaskOutput: typeof import("./getCkafkaDatahubTask").getCkafkaDatahubTaskOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaDatahubTask","getCkafkaDatahubTaskOutput"], () => require("./getCkafkaDatahubTask"));

export { GetCkafkaDatahubTopicArgs, GetCkafkaDatahubTopicResult, GetCkafkaDatahubTopicOutputArgs } from "./getCkafkaDatahubTopic";
export const getCkafkaDatahubTopic: typeof import("./getCkafkaDatahubTopic").getCkafkaDatahubTopic = null as any;
export const getCkafkaDatahubTopicOutput: typeof import("./getCkafkaDatahubTopic").getCkafkaDatahubTopicOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaDatahubTopic","getCkafkaDatahubTopicOutput"], () => require("./getCkafkaDatahubTopic"));

export { GetCkafkaGroupArgs, GetCkafkaGroupResult, GetCkafkaGroupOutputArgs } from "./getCkafkaGroup";
export const getCkafkaGroup: typeof import("./getCkafkaGroup").getCkafkaGroup = null as any;
export const getCkafkaGroupOutput: typeof import("./getCkafkaGroup").getCkafkaGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaGroup","getCkafkaGroupOutput"], () => require("./getCkafkaGroup"));

export { GetCkafkaGroupInfoArgs, GetCkafkaGroupInfoResult, GetCkafkaGroupInfoOutputArgs } from "./getCkafkaGroupInfo";
export const getCkafkaGroupInfo: typeof import("./getCkafkaGroupInfo").getCkafkaGroupInfo = null as any;
export const getCkafkaGroupInfoOutput: typeof import("./getCkafkaGroupInfo").getCkafkaGroupInfoOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaGroupInfo","getCkafkaGroupInfoOutput"], () => require("./getCkafkaGroupInfo"));

export { GetCkafkaGroupOffsetsArgs, GetCkafkaGroupOffsetsResult, GetCkafkaGroupOffsetsOutputArgs } from "./getCkafkaGroupOffsets";
export const getCkafkaGroupOffsets: typeof import("./getCkafkaGroupOffsets").getCkafkaGroupOffsets = null as any;
export const getCkafkaGroupOffsetsOutput: typeof import("./getCkafkaGroupOffsets").getCkafkaGroupOffsetsOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaGroupOffsets","getCkafkaGroupOffsetsOutput"], () => require("./getCkafkaGroupOffsets"));

export { GetCkafkaInstancesArgs, GetCkafkaInstancesResult, GetCkafkaInstancesOutputArgs } from "./getCkafkaInstances";
export const getCkafkaInstances: typeof import("./getCkafkaInstances").getCkafkaInstances = null as any;
export const getCkafkaInstancesOutput: typeof import("./getCkafkaInstances").getCkafkaInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaInstances","getCkafkaInstancesOutput"], () => require("./getCkafkaInstances"));

export { GetCkafkaRegionArgs, GetCkafkaRegionResult, GetCkafkaRegionOutputArgs } from "./getCkafkaRegion";
export const getCkafkaRegion: typeof import("./getCkafkaRegion").getCkafkaRegion = null as any;
export const getCkafkaRegionOutput: typeof import("./getCkafkaRegion").getCkafkaRegionOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaRegion","getCkafkaRegionOutput"], () => require("./getCkafkaRegion"));

export { GetCkafkaTaskStatusArgs, GetCkafkaTaskStatusResult, GetCkafkaTaskStatusOutputArgs } from "./getCkafkaTaskStatus";
export const getCkafkaTaskStatus: typeof import("./getCkafkaTaskStatus").getCkafkaTaskStatus = null as any;
export const getCkafkaTaskStatusOutput: typeof import("./getCkafkaTaskStatus").getCkafkaTaskStatusOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaTaskStatus","getCkafkaTaskStatusOutput"], () => require("./getCkafkaTaskStatus"));

export { GetCkafkaTopicFlowRankingArgs, GetCkafkaTopicFlowRankingResult, GetCkafkaTopicFlowRankingOutputArgs } from "./getCkafkaTopicFlowRanking";
export const getCkafkaTopicFlowRanking: typeof import("./getCkafkaTopicFlowRanking").getCkafkaTopicFlowRanking = null as any;
export const getCkafkaTopicFlowRankingOutput: typeof import("./getCkafkaTopicFlowRanking").getCkafkaTopicFlowRankingOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaTopicFlowRanking","getCkafkaTopicFlowRankingOutput"], () => require("./getCkafkaTopicFlowRanking"));

export { GetCkafkaTopicProduceConnectionArgs, GetCkafkaTopicProduceConnectionResult, GetCkafkaTopicProduceConnectionOutputArgs } from "./getCkafkaTopicProduceConnection";
export const getCkafkaTopicProduceConnection: typeof import("./getCkafkaTopicProduceConnection").getCkafkaTopicProduceConnection = null as any;
export const getCkafkaTopicProduceConnectionOutput: typeof import("./getCkafkaTopicProduceConnection").getCkafkaTopicProduceConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaTopicProduceConnection","getCkafkaTopicProduceConnectionOutput"], () => require("./getCkafkaTopicProduceConnection"));

export { GetCkafkaTopicSubscribeGroupArgs, GetCkafkaTopicSubscribeGroupResult, GetCkafkaTopicSubscribeGroupOutputArgs } from "./getCkafkaTopicSubscribeGroup";
export const getCkafkaTopicSubscribeGroup: typeof import("./getCkafkaTopicSubscribeGroup").getCkafkaTopicSubscribeGroup = null as any;
export const getCkafkaTopicSubscribeGroupOutput: typeof import("./getCkafkaTopicSubscribeGroup").getCkafkaTopicSubscribeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaTopicSubscribeGroup","getCkafkaTopicSubscribeGroupOutput"], () => require("./getCkafkaTopicSubscribeGroup"));

export { GetCkafkaTopicSyncReplicaArgs, GetCkafkaTopicSyncReplicaResult, GetCkafkaTopicSyncReplicaOutputArgs } from "./getCkafkaTopicSyncReplica";
export const getCkafkaTopicSyncReplica: typeof import("./getCkafkaTopicSyncReplica").getCkafkaTopicSyncReplica = null as any;
export const getCkafkaTopicSyncReplicaOutput: typeof import("./getCkafkaTopicSyncReplica").getCkafkaTopicSyncReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaTopicSyncReplica","getCkafkaTopicSyncReplicaOutput"], () => require("./getCkafkaTopicSyncReplica"));

export { GetCkafkaTopicsArgs, GetCkafkaTopicsResult, GetCkafkaTopicsOutputArgs } from "./getCkafkaTopics";
export const getCkafkaTopics: typeof import("./getCkafkaTopics").getCkafkaTopics = null as any;
export const getCkafkaTopicsOutput: typeof import("./getCkafkaTopics").getCkafkaTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaTopics","getCkafkaTopicsOutput"], () => require("./getCkafkaTopics"));

export { GetCkafkaUsersArgs, GetCkafkaUsersResult, GetCkafkaUsersOutputArgs } from "./getCkafkaUsers";
export const getCkafkaUsers: typeof import("./getCkafkaUsers").getCkafkaUsers = null as any;
export const getCkafkaUsersOutput: typeof import("./getCkafkaUsers").getCkafkaUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaUsers","getCkafkaUsersOutput"], () => require("./getCkafkaUsers"));

export { GetCkafkaZoneArgs, GetCkafkaZoneResult, GetCkafkaZoneOutputArgs } from "./getCkafkaZone";
export const getCkafkaZone: typeof import("./getCkafkaZone").getCkafkaZone = null as any;
export const getCkafkaZoneOutput: typeof import("./getCkafkaZone").getCkafkaZoneOutput = null as any;
utilities.lazyLoad(exports, ["getCkafkaZone","getCkafkaZoneOutput"], () => require("./getCkafkaZone"));

export { GetClbAttachmentsArgs, GetClbAttachmentsResult, GetClbAttachmentsOutputArgs } from "./getClbAttachments";
export const getClbAttachments: typeof import("./getClbAttachments").getClbAttachments = null as any;
export const getClbAttachmentsOutput: typeof import("./getClbAttachments").getClbAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getClbAttachments","getClbAttachmentsOutput"], () => require("./getClbAttachments"));

export { GetClbClusterResourcesArgs, GetClbClusterResourcesResult, GetClbClusterResourcesOutputArgs } from "./getClbClusterResources";
export const getClbClusterResources: typeof import("./getClbClusterResources").getClbClusterResources = null as any;
export const getClbClusterResourcesOutput: typeof import("./getClbClusterResources").getClbClusterResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getClbClusterResources","getClbClusterResourcesOutput"], () => require("./getClbClusterResources"));

export { GetClbCrossTargetsArgs, GetClbCrossTargetsResult, GetClbCrossTargetsOutputArgs } from "./getClbCrossTargets";
export const getClbCrossTargets: typeof import("./getClbCrossTargets").getClbCrossTargets = null as any;
export const getClbCrossTargetsOutput: typeof import("./getClbCrossTargets").getClbCrossTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getClbCrossTargets","getClbCrossTargetsOutput"], () => require("./getClbCrossTargets"));

export { GetClbExclusiveClustersArgs, GetClbExclusiveClustersResult, GetClbExclusiveClustersOutputArgs } from "./getClbExclusiveClusters";
export const getClbExclusiveClusters: typeof import("./getClbExclusiveClusters").getClbExclusiveClusters = null as any;
export const getClbExclusiveClustersOutput: typeof import("./getClbExclusiveClusters").getClbExclusiveClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClbExclusiveClusters","getClbExclusiveClustersOutput"], () => require("./getClbExclusiveClusters"));

export { GetClbIdleInstancesArgs, GetClbIdleInstancesResult, GetClbIdleInstancesOutputArgs } from "./getClbIdleInstances";
export const getClbIdleInstances: typeof import("./getClbIdleInstances").getClbIdleInstances = null as any;
export const getClbIdleInstancesOutput: typeof import("./getClbIdleInstances").getClbIdleInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getClbIdleInstances","getClbIdleInstancesOutput"], () => require("./getClbIdleInstances"));

export { GetClbInstanceByCertIdArgs, GetClbInstanceByCertIdResult, GetClbInstanceByCertIdOutputArgs } from "./getClbInstanceByCertId";
export const getClbInstanceByCertId: typeof import("./getClbInstanceByCertId").getClbInstanceByCertId = null as any;
export const getClbInstanceByCertIdOutput: typeof import("./getClbInstanceByCertId").getClbInstanceByCertIdOutput = null as any;
utilities.lazyLoad(exports, ["getClbInstanceByCertId","getClbInstanceByCertIdOutput"], () => require("./getClbInstanceByCertId"));

export { GetClbInstanceDetailArgs, GetClbInstanceDetailResult, GetClbInstanceDetailOutputArgs } from "./getClbInstanceDetail";
export const getClbInstanceDetail: typeof import("./getClbInstanceDetail").getClbInstanceDetail = null as any;
export const getClbInstanceDetailOutput: typeof import("./getClbInstanceDetail").getClbInstanceDetailOutput = null as any;
utilities.lazyLoad(exports, ["getClbInstanceDetail","getClbInstanceDetailOutput"], () => require("./getClbInstanceDetail"));

export { GetClbInstanceTrafficArgs, GetClbInstanceTrafficResult, GetClbInstanceTrafficOutputArgs } from "./getClbInstanceTraffic";
export const getClbInstanceTraffic: typeof import("./getClbInstanceTraffic").getClbInstanceTraffic = null as any;
export const getClbInstanceTrafficOutput: typeof import("./getClbInstanceTraffic").getClbInstanceTrafficOutput = null as any;
utilities.lazyLoad(exports, ["getClbInstanceTraffic","getClbInstanceTrafficOutput"], () => require("./getClbInstanceTraffic"));

export { GetClbInstancesArgs, GetClbInstancesResult, GetClbInstancesOutputArgs } from "./getClbInstances";
export const getClbInstances: typeof import("./getClbInstances").getClbInstances = null as any;
export const getClbInstancesOutput: typeof import("./getClbInstances").getClbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getClbInstances","getClbInstancesOutput"], () => require("./getClbInstances"));

export { GetClbListenerRulesArgs, GetClbListenerRulesResult, GetClbListenerRulesOutputArgs } from "./getClbListenerRules";
export const getClbListenerRules: typeof import("./getClbListenerRules").getClbListenerRules = null as any;
export const getClbListenerRulesOutput: typeof import("./getClbListenerRules").getClbListenerRulesOutput = null as any;
utilities.lazyLoad(exports, ["getClbListenerRules","getClbListenerRulesOutput"], () => require("./getClbListenerRules"));

export { GetClbListenersArgs, GetClbListenersResult, GetClbListenersOutputArgs } from "./getClbListeners";
export const getClbListeners: typeof import("./getClbListeners").getClbListeners = null as any;
export const getClbListenersOutput: typeof import("./getClbListeners").getClbListenersOutput = null as any;
utilities.lazyLoad(exports, ["getClbListeners","getClbListenersOutput"], () => require("./getClbListeners"));

export { GetClbListenersByTargetsArgs, GetClbListenersByTargetsResult, GetClbListenersByTargetsOutputArgs } from "./getClbListenersByTargets";
export const getClbListenersByTargets: typeof import("./getClbListenersByTargets").getClbListenersByTargets = null as any;
export const getClbListenersByTargetsOutput: typeof import("./getClbListenersByTargets").getClbListenersByTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getClbListenersByTargets","getClbListenersByTargetsOutput"], () => require("./getClbListenersByTargets"));

export { GetClbRedirectionsArgs, GetClbRedirectionsResult, GetClbRedirectionsOutputArgs } from "./getClbRedirections";
export const getClbRedirections: typeof import("./getClbRedirections").getClbRedirections = null as any;
export const getClbRedirectionsOutput: typeof import("./getClbRedirections").getClbRedirectionsOutput = null as any;
utilities.lazyLoad(exports, ["getClbRedirections","getClbRedirectionsOutput"], () => require("./getClbRedirections"));

export { GetClbResourcesArgs, GetClbResourcesResult, GetClbResourcesOutputArgs } from "./getClbResources";
export const getClbResources: typeof import("./getClbResources").getClbResources = null as any;
export const getClbResourcesOutput: typeof import("./getClbResources").getClbResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getClbResources","getClbResourcesOutput"], () => require("./getClbResources"));

export { GetClbTargetGroupListArgs, GetClbTargetGroupListResult, GetClbTargetGroupListOutputArgs } from "./getClbTargetGroupList";
export const getClbTargetGroupList: typeof import("./getClbTargetGroupList").getClbTargetGroupList = null as any;
export const getClbTargetGroupListOutput: typeof import("./getClbTargetGroupList").getClbTargetGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getClbTargetGroupList","getClbTargetGroupListOutput"], () => require("./getClbTargetGroupList"));

export { GetClbTargetGroupsArgs, GetClbTargetGroupsResult, GetClbTargetGroupsOutputArgs } from "./getClbTargetGroups";
export const getClbTargetGroups: typeof import("./getClbTargetGroups").getClbTargetGroups = null as any;
export const getClbTargetGroupsOutput: typeof import("./getClbTargetGroups").getClbTargetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getClbTargetGroups","getClbTargetGroupsOutput"], () => require("./getClbTargetGroups"));

export { GetClbTargetHealthArgs, GetClbTargetHealthResult, GetClbTargetHealthOutputArgs } from "./getClbTargetHealth";
export const getClbTargetHealth: typeof import("./getClbTargetHealth").getClbTargetHealth = null as any;
export const getClbTargetHealthOutput: typeof import("./getClbTargetHealth").getClbTargetHealthOutput = null as any;
utilities.lazyLoad(exports, ["getClbTargetHealth","getClbTargetHealthOutput"], () => require("./getClbTargetHealth"));

export { GetClickhouseBackupJobDetailArgs, GetClickhouseBackupJobDetailResult, GetClickhouseBackupJobDetailOutputArgs } from "./getClickhouseBackupJobDetail";
export const getClickhouseBackupJobDetail: typeof import("./getClickhouseBackupJobDetail").getClickhouseBackupJobDetail = null as any;
export const getClickhouseBackupJobDetailOutput: typeof import("./getClickhouseBackupJobDetail").getClickhouseBackupJobDetailOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseBackupJobDetail","getClickhouseBackupJobDetailOutput"], () => require("./getClickhouseBackupJobDetail"));

export { GetClickhouseBackupJobsArgs, GetClickhouseBackupJobsResult, GetClickhouseBackupJobsOutputArgs } from "./getClickhouseBackupJobs";
export const getClickhouseBackupJobs: typeof import("./getClickhouseBackupJobs").getClickhouseBackupJobs = null as any;
export const getClickhouseBackupJobsOutput: typeof import("./getClickhouseBackupJobs").getClickhouseBackupJobsOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseBackupJobs","getClickhouseBackupJobsOutput"], () => require("./getClickhouseBackupJobs"));

export { GetClickhouseBackupTablesArgs, GetClickhouseBackupTablesResult, GetClickhouseBackupTablesOutputArgs } from "./getClickhouseBackupTables";
export const getClickhouseBackupTables: typeof import("./getClickhouseBackupTables").getClickhouseBackupTables = null as any;
export const getClickhouseBackupTablesOutput: typeof import("./getClickhouseBackupTables").getClickhouseBackupTablesOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseBackupTables","getClickhouseBackupTablesOutput"], () => require("./getClickhouseBackupTables"));

export { GetClickhouseInstanceNodesArgs, GetClickhouseInstanceNodesResult, GetClickhouseInstanceNodesOutputArgs } from "./getClickhouseInstanceNodes";
export const getClickhouseInstanceNodes: typeof import("./getClickhouseInstanceNodes").getClickhouseInstanceNodes = null as any;
export const getClickhouseInstanceNodesOutput: typeof import("./getClickhouseInstanceNodes").getClickhouseInstanceNodesOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseInstanceNodes","getClickhouseInstanceNodesOutput"], () => require("./getClickhouseInstanceNodes"));

export { GetClickhouseInstanceShardsArgs, GetClickhouseInstanceShardsResult, GetClickhouseInstanceShardsOutputArgs } from "./getClickhouseInstanceShards";
export const getClickhouseInstanceShards: typeof import("./getClickhouseInstanceShards").getClickhouseInstanceShards = null as any;
export const getClickhouseInstanceShardsOutput: typeof import("./getClickhouseInstanceShards").getClickhouseInstanceShardsOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseInstanceShards","getClickhouseInstanceShardsOutput"], () => require("./getClickhouseInstanceShards"));

export { GetClickhouseSpecArgs, GetClickhouseSpecResult, GetClickhouseSpecOutputArgs } from "./getClickhouseSpec";
export const getClickhouseSpec: typeof import("./getClickhouseSpec").getClickhouseSpec = null as any;
export const getClickhouseSpecOutput: typeof import("./getClickhouseSpec").getClickhouseSpecOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseSpec","getClickhouseSpecOutput"], () => require("./getClickhouseSpec"));

export { GetClsLogsetsArgs, GetClsLogsetsResult, GetClsLogsetsOutputArgs } from "./getClsLogsets";
export const getClsLogsets: typeof import("./getClsLogsets").getClsLogsets = null as any;
export const getClsLogsetsOutput: typeof import("./getClsLogsets").getClsLogsetsOutput = null as any;
utilities.lazyLoad(exports, ["getClsLogsets","getClsLogsetsOutput"], () => require("./getClsLogsets"));

export { GetClsMachineGroupConfigsArgs, GetClsMachineGroupConfigsResult, GetClsMachineGroupConfigsOutputArgs } from "./getClsMachineGroupConfigs";
export const getClsMachineGroupConfigs: typeof import("./getClsMachineGroupConfigs").getClsMachineGroupConfigs = null as any;
export const getClsMachineGroupConfigsOutput: typeof import("./getClsMachineGroupConfigs").getClsMachineGroupConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getClsMachineGroupConfigs","getClsMachineGroupConfigsOutput"], () => require("./getClsMachineGroupConfigs"));

export { GetClsMachinesArgs, GetClsMachinesResult, GetClsMachinesOutputArgs } from "./getClsMachines";
export const getClsMachines: typeof import("./getClsMachines").getClsMachines = null as any;
export const getClsMachinesOutput: typeof import("./getClsMachines").getClsMachinesOutput = null as any;
utilities.lazyLoad(exports, ["getClsMachines","getClsMachinesOutput"], () => require("./getClsMachines"));

export { GetClsShipperTasksArgs, GetClsShipperTasksResult, GetClsShipperTasksOutputArgs } from "./getClsShipperTasks";
export const getClsShipperTasks: typeof import("./getClsShipperTasks").getClsShipperTasks = null as any;
export const getClsShipperTasksOutput: typeof import("./getClsShipperTasks").getClsShipperTasksOutput = null as any;
utilities.lazyLoad(exports, ["getClsShipperTasks","getClsShipperTasksOutput"], () => require("./getClsShipperTasks"));

export { GetContainerClusterInstancesArgs, GetContainerClusterInstancesResult, GetContainerClusterInstancesOutputArgs } from "./getContainerClusterInstances";
export const getContainerClusterInstances: typeof import("./getContainerClusterInstances").getContainerClusterInstances = null as any;
export const getContainerClusterInstancesOutput: typeof import("./getContainerClusterInstances").getContainerClusterInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerClusterInstances","getContainerClusterInstancesOutput"], () => require("./getContainerClusterInstances"));

export { GetContainerClustersArgs, GetContainerClustersResult, GetContainerClustersOutputArgs } from "./getContainerClusters";
export const getContainerClusters: typeof import("./getContainerClusters").getContainerClusters = null as any;
export const getContainerClustersOutput: typeof import("./getContainerClusters").getContainerClustersOutput = null as any;
utilities.lazyLoad(exports, ["getContainerClusters","getContainerClustersOutput"], () => require("./getContainerClusters"));

export { GetCosBatchsArgs, GetCosBatchsResult, GetCosBatchsOutputArgs } from "./getCosBatchs";
export const getCosBatchs: typeof import("./getCosBatchs").getCosBatchs = null as any;
export const getCosBatchsOutput: typeof import("./getCosBatchs").getCosBatchsOutput = null as any;
utilities.lazyLoad(exports, ["getCosBatchs","getCosBatchsOutput"], () => require("./getCosBatchs"));

export { GetCosBucketInventorysArgs, GetCosBucketInventorysResult, GetCosBucketInventorysOutputArgs } from "./getCosBucketInventorys";
export const getCosBucketInventorys: typeof import("./getCosBucketInventorys").getCosBucketInventorys = null as any;
export const getCosBucketInventorysOutput: typeof import("./getCosBucketInventorys").getCosBucketInventorysOutput = null as any;
utilities.lazyLoad(exports, ["getCosBucketInventorys","getCosBucketInventorysOutput"], () => require("./getCosBucketInventorys"));

export { GetCosBucketMultipartUploadsArgs, GetCosBucketMultipartUploadsResult, GetCosBucketMultipartUploadsOutputArgs } from "./getCosBucketMultipartUploads";
export const getCosBucketMultipartUploads: typeof import("./getCosBucketMultipartUploads").getCosBucketMultipartUploads = null as any;
export const getCosBucketMultipartUploadsOutput: typeof import("./getCosBucketMultipartUploads").getCosBucketMultipartUploadsOutput = null as any;
utilities.lazyLoad(exports, ["getCosBucketMultipartUploads","getCosBucketMultipartUploadsOutput"], () => require("./getCosBucketMultipartUploads"));

export { GetCosBucketObjectArgs, GetCosBucketObjectResult, GetCosBucketObjectOutputArgs } from "./getCosBucketObject";
export const getCosBucketObject: typeof import("./getCosBucketObject").getCosBucketObject = null as any;
export const getCosBucketObjectOutput: typeof import("./getCosBucketObject").getCosBucketObjectOutput = null as any;
utilities.lazyLoad(exports, ["getCosBucketObject","getCosBucketObjectOutput"], () => require("./getCosBucketObject"));

export { GetCosBucketsArgs, GetCosBucketsResult, GetCosBucketsOutputArgs } from "./getCosBuckets";
export const getCosBuckets: typeof import("./getCosBuckets").getCosBuckets = null as any;
export const getCosBucketsOutput: typeof import("./getCosBuckets").getCosBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getCosBuckets","getCosBucketsOutput"], () => require("./getCosBuckets"));

export { GetCssBackupStreamArgs, GetCssBackupStreamResult, GetCssBackupStreamOutputArgs } from "./getCssBackupStream";
export const getCssBackupStream: typeof import("./getCssBackupStream").getCssBackupStream = null as any;
export const getCssBackupStreamOutput: typeof import("./getCssBackupStream").getCssBackupStreamOutput = null as any;
utilities.lazyLoad(exports, ["getCssBackupStream","getCssBackupStreamOutput"], () => require("./getCssBackupStream"));

export { GetCssDeliverLogDownListArgs, GetCssDeliverLogDownListResult, GetCssDeliverLogDownListOutputArgs } from "./getCssDeliverLogDownList";
export const getCssDeliverLogDownList: typeof import("./getCssDeliverLogDownList").getCssDeliverLogDownList = null as any;
export const getCssDeliverLogDownListOutput: typeof import("./getCssDeliverLogDownList").getCssDeliverLogDownListOutput = null as any;
utilities.lazyLoad(exports, ["getCssDeliverLogDownList","getCssDeliverLogDownListOutput"], () => require("./getCssDeliverLogDownList"));

export { GetCssDomainsArgs, GetCssDomainsResult, GetCssDomainsOutputArgs } from "./getCssDomains";
export const getCssDomains: typeof import("./getCssDomains").getCssDomains = null as any;
export const getCssDomainsOutput: typeof import("./getCssDomains").getCssDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getCssDomains","getCssDomainsOutput"], () => require("./getCssDomains"));

export { GetCssMonitorReportArgs, GetCssMonitorReportResult, GetCssMonitorReportOutputArgs } from "./getCssMonitorReport";
export const getCssMonitorReport: typeof import("./getCssMonitorReport").getCssMonitorReport = null as any;
export const getCssMonitorReportOutput: typeof import("./getCssMonitorReport").getCssMonitorReportOutput = null as any;
utilities.lazyLoad(exports, ["getCssMonitorReport","getCssMonitorReportOutput"], () => require("./getCssMonitorReport"));

export { GetCssPadTemplatesArgs, GetCssPadTemplatesResult, GetCssPadTemplatesOutputArgs } from "./getCssPadTemplates";
export const getCssPadTemplates: typeof import("./getCssPadTemplates").getCssPadTemplates = null as any;
export const getCssPadTemplatesOutput: typeof import("./getCssPadTemplates").getCssPadTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getCssPadTemplates","getCssPadTemplatesOutput"], () => require("./getCssPadTemplates"));

export { GetCssPullStreamTaskStatusArgs, GetCssPullStreamTaskStatusResult, GetCssPullStreamTaskStatusOutputArgs } from "./getCssPullStreamTaskStatus";
export const getCssPullStreamTaskStatus: typeof import("./getCssPullStreamTaskStatus").getCssPullStreamTaskStatus = null as any;
export const getCssPullStreamTaskStatusOutput: typeof import("./getCssPullStreamTaskStatus").getCssPullStreamTaskStatusOutput = null as any;
utilities.lazyLoad(exports, ["getCssPullStreamTaskStatus","getCssPullStreamTaskStatusOutput"], () => require("./getCssPullStreamTaskStatus"));

export { GetCssStreamMonitorListArgs, GetCssStreamMonitorListResult, GetCssStreamMonitorListOutputArgs } from "./getCssStreamMonitorList";
export const getCssStreamMonitorList: typeof import("./getCssStreamMonitorList").getCssStreamMonitorList = null as any;
export const getCssStreamMonitorListOutput: typeof import("./getCssStreamMonitorList").getCssStreamMonitorListOutput = null as any;
utilities.lazyLoad(exports, ["getCssStreamMonitorList","getCssStreamMonitorListOutput"], () => require("./getCssStreamMonitorList"));

export { GetCssTimeShiftRecordDetailArgs, GetCssTimeShiftRecordDetailResult, GetCssTimeShiftRecordDetailOutputArgs } from "./getCssTimeShiftRecordDetail";
export const getCssTimeShiftRecordDetail: typeof import("./getCssTimeShiftRecordDetail").getCssTimeShiftRecordDetail = null as any;
export const getCssTimeShiftRecordDetailOutput: typeof import("./getCssTimeShiftRecordDetail").getCssTimeShiftRecordDetailOutput = null as any;
utilities.lazyLoad(exports, ["getCssTimeShiftRecordDetail","getCssTimeShiftRecordDetailOutput"], () => require("./getCssTimeShiftRecordDetail"));

export { GetCssTimeShiftStreamListArgs, GetCssTimeShiftStreamListResult, GetCssTimeShiftStreamListOutputArgs } from "./getCssTimeShiftStreamList";
export const getCssTimeShiftStreamList: typeof import("./getCssTimeShiftStreamList").getCssTimeShiftStreamList = null as any;
export const getCssTimeShiftStreamListOutput: typeof import("./getCssTimeShiftStreamList").getCssTimeShiftStreamListOutput = null as any;
utilities.lazyLoad(exports, ["getCssTimeShiftStreamList","getCssTimeShiftStreamListOutput"], () => require("./getCssTimeShiftStreamList"));

export { GetCssWatermarksArgs, GetCssWatermarksResult, GetCssWatermarksOutputArgs } from "./getCssWatermarks";
export const getCssWatermarks: typeof import("./getCssWatermarks").getCssWatermarks = null as any;
export const getCssWatermarksOutput: typeof import("./getCssWatermarks").getCssWatermarksOutput = null as any;
utilities.lazyLoad(exports, ["getCssWatermarks","getCssWatermarksOutput"], () => require("./getCssWatermarks"));

export { GetCssXp2pDetailInfoListArgs, GetCssXp2pDetailInfoListResult, GetCssXp2pDetailInfoListOutputArgs } from "./getCssXp2pDetailInfoList";
export const getCssXp2pDetailInfoList: typeof import("./getCssXp2pDetailInfoList").getCssXp2pDetailInfoList = null as any;
export const getCssXp2pDetailInfoListOutput: typeof import("./getCssXp2pDetailInfoList").getCssXp2pDetailInfoListOutput = null as any;
utilities.lazyLoad(exports, ["getCssXp2pDetailInfoList","getCssXp2pDetailInfoListOutput"], () => require("./getCssXp2pDetailInfoList"));

export { GetCvmChcDeniedActionsArgs, GetCvmChcDeniedActionsResult, GetCvmChcDeniedActionsOutputArgs } from "./getCvmChcDeniedActions";
export const getCvmChcDeniedActions: typeof import("./getCvmChcDeniedActions").getCvmChcDeniedActions = null as any;
export const getCvmChcDeniedActionsOutput: typeof import("./getCvmChcDeniedActions").getCvmChcDeniedActionsOutput = null as any;
utilities.lazyLoad(exports, ["getCvmChcDeniedActions","getCvmChcDeniedActionsOutput"], () => require("./getCvmChcDeniedActions"));

export { GetCvmChcHostsArgs, GetCvmChcHostsResult, GetCvmChcHostsOutputArgs } from "./getCvmChcHosts";
export const getCvmChcHosts: typeof import("./getCvmChcHosts").getCvmChcHosts = null as any;
export const getCvmChcHostsOutput: typeof import("./getCvmChcHosts").getCvmChcHostsOutput = null as any;
utilities.lazyLoad(exports, ["getCvmChcHosts","getCvmChcHostsOutput"], () => require("./getCvmChcHosts"));

export { GetCvmDisasterRecoverGroupQuotaArgs, GetCvmDisasterRecoverGroupQuotaResult, GetCvmDisasterRecoverGroupQuotaOutputArgs } from "./getCvmDisasterRecoverGroupQuota";
export const getCvmDisasterRecoverGroupQuota: typeof import("./getCvmDisasterRecoverGroupQuota").getCvmDisasterRecoverGroupQuota = null as any;
export const getCvmDisasterRecoverGroupQuotaOutput: typeof import("./getCvmDisasterRecoverGroupQuota").getCvmDisasterRecoverGroupQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getCvmDisasterRecoverGroupQuota","getCvmDisasterRecoverGroupQuotaOutput"], () => require("./getCvmDisasterRecoverGroupQuota"));

export { GetCvmImageQuotaArgs, GetCvmImageQuotaResult, GetCvmImageQuotaOutputArgs } from "./getCvmImageQuota";
export const getCvmImageQuota: typeof import("./getCvmImageQuota").getCvmImageQuota = null as any;
export const getCvmImageQuotaOutput: typeof import("./getCvmImageQuota").getCvmImageQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getCvmImageQuota","getCvmImageQuotaOutput"], () => require("./getCvmImageQuota"));

export { GetCvmImageSharePermissionArgs, GetCvmImageSharePermissionResult, GetCvmImageSharePermissionOutputArgs } from "./getCvmImageSharePermission";
export const getCvmImageSharePermission: typeof import("./getCvmImageSharePermission").getCvmImageSharePermission = null as any;
export const getCvmImageSharePermissionOutput: typeof import("./getCvmImageSharePermission").getCvmImageSharePermissionOutput = null as any;
utilities.lazyLoad(exports, ["getCvmImageSharePermission","getCvmImageSharePermissionOutput"], () => require("./getCvmImageSharePermission"));

export { GetCvmImportImageOsArgs, GetCvmImportImageOsResult, GetCvmImportImageOsOutputArgs } from "./getCvmImportImageOs";
export const getCvmImportImageOs: typeof import("./getCvmImportImageOs").getCvmImportImageOs = null as any;
export const getCvmImportImageOsOutput: typeof import("./getCvmImportImageOs").getCvmImportImageOsOutput = null as any;
utilities.lazyLoad(exports, ["getCvmImportImageOs","getCvmImportImageOsOutput"], () => require("./getCvmImportImageOs"));

export { GetCvmInstanceVncUrlArgs, GetCvmInstanceVncUrlResult, GetCvmInstanceVncUrlOutputArgs } from "./getCvmInstanceVncUrl";
export const getCvmInstanceVncUrl: typeof import("./getCvmInstanceVncUrl").getCvmInstanceVncUrl = null as any;
export const getCvmInstanceVncUrlOutput: typeof import("./getCvmInstanceVncUrl").getCvmInstanceVncUrlOutput = null as any;
utilities.lazyLoad(exports, ["getCvmInstanceVncUrl","getCvmInstanceVncUrlOutput"], () => require("./getCvmInstanceVncUrl"));

export { GetCvmInstancesModificationArgs, GetCvmInstancesModificationResult, GetCvmInstancesModificationOutputArgs } from "./getCvmInstancesModification";
export const getCvmInstancesModification: typeof import("./getCvmInstancesModification").getCvmInstancesModification = null as any;
export const getCvmInstancesModificationOutput: typeof import("./getCvmInstancesModification").getCvmInstancesModificationOutput = null as any;
utilities.lazyLoad(exports, ["getCvmInstancesModification","getCvmInstancesModificationOutput"], () => require("./getCvmInstancesModification"));

export { GetCwpMachinesSimpleArgs, GetCwpMachinesSimpleResult, GetCwpMachinesSimpleOutputArgs } from "./getCwpMachinesSimple";
export const getCwpMachinesSimple: typeof import("./getCwpMachinesSimple").getCwpMachinesSimple = null as any;
export const getCwpMachinesSimpleOutput: typeof import("./getCwpMachinesSimple").getCwpMachinesSimpleOutput = null as any;
utilities.lazyLoad(exports, ["getCwpMachinesSimple","getCwpMachinesSimpleOutput"], () => require("./getCwpMachinesSimple"));

export { GetCynosdbAccountAllGrantPrivilegesArgs, GetCynosdbAccountAllGrantPrivilegesResult, GetCynosdbAccountAllGrantPrivilegesOutputArgs } from "./getCynosdbAccountAllGrantPrivileges";
export const getCynosdbAccountAllGrantPrivileges: typeof import("./getCynosdbAccountAllGrantPrivileges").getCynosdbAccountAllGrantPrivileges = null as any;
export const getCynosdbAccountAllGrantPrivilegesOutput: typeof import("./getCynosdbAccountAllGrantPrivileges").getCynosdbAccountAllGrantPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbAccountAllGrantPrivileges","getCynosdbAccountAllGrantPrivilegesOutput"], () => require("./getCynosdbAccountAllGrantPrivileges"));

export { GetCynosdbAccountsArgs, GetCynosdbAccountsResult, GetCynosdbAccountsOutputArgs } from "./getCynosdbAccounts";
export const getCynosdbAccounts: typeof import("./getCynosdbAccounts").getCynosdbAccounts = null as any;
export const getCynosdbAccountsOutput: typeof import("./getCynosdbAccounts").getCynosdbAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbAccounts","getCynosdbAccountsOutput"], () => require("./getCynosdbAccounts"));

export { GetCynosdbAuditLogsArgs, GetCynosdbAuditLogsResult, GetCynosdbAuditLogsOutputArgs } from "./getCynosdbAuditLogs";
export const getCynosdbAuditLogs: typeof import("./getCynosdbAuditLogs").getCynosdbAuditLogs = null as any;
export const getCynosdbAuditLogsOutput: typeof import("./getCynosdbAuditLogs").getCynosdbAuditLogsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbAuditLogs","getCynosdbAuditLogsOutput"], () => require("./getCynosdbAuditLogs"));

export { GetCynosdbBackupDownloadUrlArgs, GetCynosdbBackupDownloadUrlResult, GetCynosdbBackupDownloadUrlOutputArgs } from "./getCynosdbBackupDownloadUrl";
export const getCynosdbBackupDownloadUrl: typeof import("./getCynosdbBackupDownloadUrl").getCynosdbBackupDownloadUrl = null as any;
export const getCynosdbBackupDownloadUrlOutput: typeof import("./getCynosdbBackupDownloadUrl").getCynosdbBackupDownloadUrlOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbBackupDownloadUrl","getCynosdbBackupDownloadUrlOutput"], () => require("./getCynosdbBackupDownloadUrl"));

export { GetCynosdbBinlogDownloadUrlArgs, GetCynosdbBinlogDownloadUrlResult, GetCynosdbBinlogDownloadUrlOutputArgs } from "./getCynosdbBinlogDownloadUrl";
export const getCynosdbBinlogDownloadUrl: typeof import("./getCynosdbBinlogDownloadUrl").getCynosdbBinlogDownloadUrl = null as any;
export const getCynosdbBinlogDownloadUrlOutput: typeof import("./getCynosdbBinlogDownloadUrl").getCynosdbBinlogDownloadUrlOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbBinlogDownloadUrl","getCynosdbBinlogDownloadUrlOutput"], () => require("./getCynosdbBinlogDownloadUrl"));

export { GetCynosdbClusterArgs, GetCynosdbClusterResult, GetCynosdbClusterOutputArgs } from "./getCynosdbCluster";
export const getCynosdbCluster: typeof import("./getCynosdbCluster").getCynosdbCluster = null as any;
export const getCynosdbClusterOutput: typeof import("./getCynosdbCluster").getCynosdbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbCluster","getCynosdbClusterOutput"], () => require("./getCynosdbCluster"));

export { GetCynosdbClusterDetailDatabasesArgs, GetCynosdbClusterDetailDatabasesResult, GetCynosdbClusterDetailDatabasesOutputArgs } from "./getCynosdbClusterDetailDatabases";
export const getCynosdbClusterDetailDatabases: typeof import("./getCynosdbClusterDetailDatabases").getCynosdbClusterDetailDatabases = null as any;
export const getCynosdbClusterDetailDatabasesOutput: typeof import("./getCynosdbClusterDetailDatabases").getCynosdbClusterDetailDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbClusterDetailDatabases","getCynosdbClusterDetailDatabasesOutput"], () => require("./getCynosdbClusterDetailDatabases"));

export { GetCynosdbClusterInstanceGroupsArgs, GetCynosdbClusterInstanceGroupsResult, GetCynosdbClusterInstanceGroupsOutputArgs } from "./getCynosdbClusterInstanceGroups";
export const getCynosdbClusterInstanceGroups: typeof import("./getCynosdbClusterInstanceGroups").getCynosdbClusterInstanceGroups = null as any;
export const getCynosdbClusterInstanceGroupsOutput: typeof import("./getCynosdbClusterInstanceGroups").getCynosdbClusterInstanceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbClusterInstanceGroups","getCynosdbClusterInstanceGroupsOutput"], () => require("./getCynosdbClusterInstanceGroups"));

export { GetCynosdbClusterParamLogsArgs, GetCynosdbClusterParamLogsResult, GetCynosdbClusterParamLogsOutputArgs } from "./getCynosdbClusterParamLogs";
export const getCynosdbClusterParamLogs: typeof import("./getCynosdbClusterParamLogs").getCynosdbClusterParamLogs = null as any;
export const getCynosdbClusterParamLogsOutput: typeof import("./getCynosdbClusterParamLogs").getCynosdbClusterParamLogsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbClusterParamLogs","getCynosdbClusterParamLogsOutput"], () => require("./getCynosdbClusterParamLogs"));

export { GetCynosdbClusterParamsArgs, GetCynosdbClusterParamsResult, GetCynosdbClusterParamsOutputArgs } from "./getCynosdbClusterParams";
export const getCynosdbClusterParams: typeof import("./getCynosdbClusterParams").getCynosdbClusterParams = null as any;
export const getCynosdbClusterParamsOutput: typeof import("./getCynosdbClusterParams").getCynosdbClusterParamsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbClusterParams","getCynosdbClusterParamsOutput"], () => require("./getCynosdbClusterParams"));

export { GetCynosdbClustersArgs, GetCynosdbClustersResult, GetCynosdbClustersOutputArgs } from "./getCynosdbClusters";
export const getCynosdbClusters: typeof import("./getCynosdbClusters").getCynosdbClusters = null as any;
export const getCynosdbClustersOutput: typeof import("./getCynosdbClusters").getCynosdbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbClusters","getCynosdbClustersOutput"], () => require("./getCynosdbClusters"));

export { GetCynosdbDescribeInstanceErrorLogsArgs, GetCynosdbDescribeInstanceErrorLogsResult, GetCynosdbDescribeInstanceErrorLogsOutputArgs } from "./getCynosdbDescribeInstanceErrorLogs";
export const getCynosdbDescribeInstanceErrorLogs: typeof import("./getCynosdbDescribeInstanceErrorLogs").getCynosdbDescribeInstanceErrorLogs = null as any;
export const getCynosdbDescribeInstanceErrorLogsOutput: typeof import("./getCynosdbDescribeInstanceErrorLogs").getCynosdbDescribeInstanceErrorLogsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbDescribeInstanceErrorLogs","getCynosdbDescribeInstanceErrorLogsOutput"], () => require("./getCynosdbDescribeInstanceErrorLogs"));

export { GetCynosdbDescribeInstanceSlowQueriesArgs, GetCynosdbDescribeInstanceSlowQueriesResult, GetCynosdbDescribeInstanceSlowQueriesOutputArgs } from "./getCynosdbDescribeInstanceSlowQueries";
export const getCynosdbDescribeInstanceSlowQueries: typeof import("./getCynosdbDescribeInstanceSlowQueries").getCynosdbDescribeInstanceSlowQueries = null as any;
export const getCynosdbDescribeInstanceSlowQueriesOutput: typeof import("./getCynosdbDescribeInstanceSlowQueries").getCynosdbDescribeInstanceSlowQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbDescribeInstanceSlowQueries","getCynosdbDescribeInstanceSlowQueriesOutput"], () => require("./getCynosdbDescribeInstanceSlowQueries"));

export { GetCynosdbInstanceSlowQueriesArgs, GetCynosdbInstanceSlowQueriesResult, GetCynosdbInstanceSlowQueriesOutputArgs } from "./getCynosdbInstanceSlowQueries";
export const getCynosdbInstanceSlowQueries: typeof import("./getCynosdbInstanceSlowQueries").getCynosdbInstanceSlowQueries = null as any;
export const getCynosdbInstanceSlowQueriesOutput: typeof import("./getCynosdbInstanceSlowQueries").getCynosdbInstanceSlowQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbInstanceSlowQueries","getCynosdbInstanceSlowQueriesOutput"], () => require("./getCynosdbInstanceSlowQueries"));

export { GetCynosdbInstancesArgs, GetCynosdbInstancesResult, GetCynosdbInstancesOutputArgs } from "./getCynosdbInstances";
export const getCynosdbInstances: typeof import("./getCynosdbInstances").getCynosdbInstances = null as any;
export const getCynosdbInstancesOutput: typeof import("./getCynosdbInstances").getCynosdbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbInstances","getCynosdbInstancesOutput"], () => require("./getCynosdbInstances"));

export { GetCynosdbParamTemplatesArgs, GetCynosdbParamTemplatesResult, GetCynosdbParamTemplatesOutputArgs } from "./getCynosdbParamTemplates";
export const getCynosdbParamTemplates: typeof import("./getCynosdbParamTemplates").getCynosdbParamTemplates = null as any;
export const getCynosdbParamTemplatesOutput: typeof import("./getCynosdbParamTemplates").getCynosdbParamTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbParamTemplates","getCynosdbParamTemplatesOutput"], () => require("./getCynosdbParamTemplates"));

export { GetCynosdbProjectSecurityGroupsArgs, GetCynosdbProjectSecurityGroupsResult, GetCynosdbProjectSecurityGroupsOutputArgs } from "./getCynosdbProjectSecurityGroups";
export const getCynosdbProjectSecurityGroups: typeof import("./getCynosdbProjectSecurityGroups").getCynosdbProjectSecurityGroups = null as any;
export const getCynosdbProjectSecurityGroupsOutput: typeof import("./getCynosdbProjectSecurityGroups").getCynosdbProjectSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbProjectSecurityGroups","getCynosdbProjectSecurityGroupsOutput"], () => require("./getCynosdbProjectSecurityGroups"));

export { GetCynosdbProxyNodeArgs, GetCynosdbProxyNodeResult, GetCynosdbProxyNodeOutputArgs } from "./getCynosdbProxyNode";
export const getCynosdbProxyNode: typeof import("./getCynosdbProxyNode").getCynosdbProxyNode = null as any;
export const getCynosdbProxyNodeOutput: typeof import("./getCynosdbProxyNode").getCynosdbProxyNodeOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbProxyNode","getCynosdbProxyNodeOutput"], () => require("./getCynosdbProxyNode"));

export { GetCynosdbProxyVersionArgs, GetCynosdbProxyVersionResult, GetCynosdbProxyVersionOutputArgs } from "./getCynosdbProxyVersion";
export const getCynosdbProxyVersion: typeof import("./getCynosdbProxyVersion").getCynosdbProxyVersion = null as any;
export const getCynosdbProxyVersionOutput: typeof import("./getCynosdbProxyVersion").getCynosdbProxyVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbProxyVersion","getCynosdbProxyVersionOutput"], () => require("./getCynosdbProxyVersion"));

export { GetCynosdbResourcePackageListArgs, GetCynosdbResourcePackageListResult, GetCynosdbResourcePackageListOutputArgs } from "./getCynosdbResourcePackageList";
export const getCynosdbResourcePackageList: typeof import("./getCynosdbResourcePackageList").getCynosdbResourcePackageList = null as any;
export const getCynosdbResourcePackageListOutput: typeof import("./getCynosdbResourcePackageList").getCynosdbResourcePackageListOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbResourcePackageList","getCynosdbResourcePackageListOutput"], () => require("./getCynosdbResourcePackageList"));

export { GetCynosdbResourcePackageSaleSpecsArgs, GetCynosdbResourcePackageSaleSpecsResult, GetCynosdbResourcePackageSaleSpecsOutputArgs } from "./getCynosdbResourcePackageSaleSpecs";
export const getCynosdbResourcePackageSaleSpecs: typeof import("./getCynosdbResourcePackageSaleSpecs").getCynosdbResourcePackageSaleSpecs = null as any;
export const getCynosdbResourcePackageSaleSpecsOutput: typeof import("./getCynosdbResourcePackageSaleSpecs").getCynosdbResourcePackageSaleSpecsOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbResourcePackageSaleSpecs","getCynosdbResourcePackageSaleSpecsOutput"], () => require("./getCynosdbResourcePackageSaleSpecs"));

export { GetCynosdbRollbackTimeRangeArgs, GetCynosdbRollbackTimeRangeResult, GetCynosdbRollbackTimeRangeOutputArgs } from "./getCynosdbRollbackTimeRange";
export const getCynosdbRollbackTimeRange: typeof import("./getCynosdbRollbackTimeRange").getCynosdbRollbackTimeRange = null as any;
export const getCynosdbRollbackTimeRangeOutput: typeof import("./getCynosdbRollbackTimeRange").getCynosdbRollbackTimeRangeOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbRollbackTimeRange","getCynosdbRollbackTimeRangeOutput"], () => require("./getCynosdbRollbackTimeRange"));

export { GetCynosdbZoneArgs, GetCynosdbZoneResult, GetCynosdbZoneOutputArgs } from "./getCynosdbZone";
export const getCynosdbZone: typeof import("./getCynosdbZone").getCynosdbZone = null as any;
export const getCynosdbZoneOutput: typeof import("./getCynosdbZone").getCynosdbZoneOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbZone","getCynosdbZoneOutput"], () => require("./getCynosdbZone"));

export { GetCynosdbZoneConfigArgs, GetCynosdbZoneConfigResult, GetCynosdbZoneConfigOutputArgs } from "./getCynosdbZoneConfig";
export const getCynosdbZoneConfig: typeof import("./getCynosdbZoneConfig").getCynosdbZoneConfig = null as any;
export const getCynosdbZoneConfigOutput: typeof import("./getCynosdbZoneConfig").getCynosdbZoneConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCynosdbZoneConfig","getCynosdbZoneConfigOutput"], () => require("./getCynosdbZoneConfig"));

export { GetDayuCcHttpPoliciesArgs, GetDayuCcHttpPoliciesResult, GetDayuCcHttpPoliciesOutputArgs } from "./getDayuCcHttpPolicies";
export const getDayuCcHttpPolicies: typeof import("./getDayuCcHttpPolicies").getDayuCcHttpPolicies = null as any;
export const getDayuCcHttpPoliciesOutput: typeof import("./getDayuCcHttpPolicies").getDayuCcHttpPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDayuCcHttpPolicies","getDayuCcHttpPoliciesOutput"], () => require("./getDayuCcHttpPolicies"));

export { GetDayuCcHttpsPoliciesArgs, GetDayuCcHttpsPoliciesResult, GetDayuCcHttpsPoliciesOutputArgs } from "./getDayuCcHttpsPolicies";
export const getDayuCcHttpsPolicies: typeof import("./getDayuCcHttpsPolicies").getDayuCcHttpsPolicies = null as any;
export const getDayuCcHttpsPoliciesOutput: typeof import("./getDayuCcHttpsPolicies").getDayuCcHttpsPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDayuCcHttpsPolicies","getDayuCcHttpsPoliciesOutput"], () => require("./getDayuCcHttpsPolicies"));

export { GetDayuDdosPoliciesArgs, GetDayuDdosPoliciesResult, GetDayuDdosPoliciesOutputArgs } from "./getDayuDdosPolicies";
export const getDayuDdosPolicies: typeof import("./getDayuDdosPolicies").getDayuDdosPolicies = null as any;
export const getDayuDdosPoliciesOutput: typeof import("./getDayuDdosPolicies").getDayuDdosPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDayuDdosPolicies","getDayuDdosPoliciesOutput"], () => require("./getDayuDdosPolicies"));

export { GetDayuDdosPolicyAttachmentsArgs, GetDayuDdosPolicyAttachmentsResult, GetDayuDdosPolicyAttachmentsOutputArgs } from "./getDayuDdosPolicyAttachments";
export const getDayuDdosPolicyAttachments: typeof import("./getDayuDdosPolicyAttachments").getDayuDdosPolicyAttachments = null as any;
export const getDayuDdosPolicyAttachmentsOutput: typeof import("./getDayuDdosPolicyAttachments").getDayuDdosPolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDayuDdosPolicyAttachments","getDayuDdosPolicyAttachmentsOutput"], () => require("./getDayuDdosPolicyAttachments"));

export { GetDayuDdosPolicyCasesArgs, GetDayuDdosPolicyCasesResult, GetDayuDdosPolicyCasesOutputArgs } from "./getDayuDdosPolicyCases";
export const getDayuDdosPolicyCases: typeof import("./getDayuDdosPolicyCases").getDayuDdosPolicyCases = null as any;
export const getDayuDdosPolicyCasesOutput: typeof import("./getDayuDdosPolicyCases").getDayuDdosPolicyCasesOutput = null as any;
utilities.lazyLoad(exports, ["getDayuDdosPolicyCases","getDayuDdosPolicyCasesOutput"], () => require("./getDayuDdosPolicyCases"));

export { GetDayuEipArgs, GetDayuEipResult, GetDayuEipOutputArgs } from "./getDayuEip";
export const getDayuEip: typeof import("./getDayuEip").getDayuEip = null as any;
export const getDayuEipOutput: typeof import("./getDayuEip").getDayuEipOutput = null as any;
utilities.lazyLoad(exports, ["getDayuEip","getDayuEipOutput"], () => require("./getDayuEip"));

export { GetDayuL4RulesArgs, GetDayuL4RulesResult, GetDayuL4RulesOutputArgs } from "./getDayuL4Rules";
export const getDayuL4Rules: typeof import("./getDayuL4Rules").getDayuL4Rules = null as any;
export const getDayuL4RulesOutput: typeof import("./getDayuL4Rules").getDayuL4RulesOutput = null as any;
utilities.lazyLoad(exports, ["getDayuL4Rules","getDayuL4RulesOutput"], () => require("./getDayuL4Rules"));

export { GetDayuL4RulesV2Args, GetDayuL4RulesV2Result, GetDayuL4RulesV2OutputArgs } from "./getDayuL4RulesV2";
export const getDayuL4RulesV2: typeof import("./getDayuL4RulesV2").getDayuL4RulesV2 = null as any;
export const getDayuL4RulesV2Output: typeof import("./getDayuL4RulesV2").getDayuL4RulesV2Output = null as any;
utilities.lazyLoad(exports, ["getDayuL4RulesV2","getDayuL4RulesV2Output"], () => require("./getDayuL4RulesV2"));

export { GetDayuL7RulesArgs, GetDayuL7RulesResult, GetDayuL7RulesOutputArgs } from "./getDayuL7Rules";
export const getDayuL7Rules: typeof import("./getDayuL7Rules").getDayuL7Rules = null as any;
export const getDayuL7RulesOutput: typeof import("./getDayuL7Rules").getDayuL7RulesOutput = null as any;
utilities.lazyLoad(exports, ["getDayuL7Rules","getDayuL7RulesOutput"], () => require("./getDayuL7Rules"));

export { GetDayuL7RulesV2Args, GetDayuL7RulesV2Result, GetDayuL7RulesV2OutputArgs } from "./getDayuL7RulesV2";
export const getDayuL7RulesV2: typeof import("./getDayuL7RulesV2").getDayuL7RulesV2 = null as any;
export const getDayuL7RulesV2Output: typeof import("./getDayuL7RulesV2").getDayuL7RulesV2Output = null as any;
utilities.lazyLoad(exports, ["getDayuL7RulesV2","getDayuL7RulesV2Output"], () => require("./getDayuL7RulesV2"));

export { GetDbbrainDbSpaceStatusArgs, GetDbbrainDbSpaceStatusResult, GetDbbrainDbSpaceStatusOutputArgs } from "./getDbbrainDbSpaceStatus";
export const getDbbrainDbSpaceStatus: typeof import("./getDbbrainDbSpaceStatus").getDbbrainDbSpaceStatus = null as any;
export const getDbbrainDbSpaceStatusOutput: typeof import("./getDbbrainDbSpaceStatus").getDbbrainDbSpaceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainDbSpaceStatus","getDbbrainDbSpaceStatusOutput"], () => require("./getDbbrainDbSpaceStatus"));

export { GetDbbrainDiagDbInstancesArgs, GetDbbrainDiagDbInstancesResult, GetDbbrainDiagDbInstancesOutputArgs } from "./getDbbrainDiagDbInstances";
export const getDbbrainDiagDbInstances: typeof import("./getDbbrainDiagDbInstances").getDbbrainDiagDbInstances = null as any;
export const getDbbrainDiagDbInstancesOutput: typeof import("./getDbbrainDiagDbInstances").getDbbrainDiagDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainDiagDbInstances","getDbbrainDiagDbInstancesOutput"], () => require("./getDbbrainDiagDbInstances"));

export { GetDbbrainDiagEventArgs, GetDbbrainDiagEventResult, GetDbbrainDiagEventOutputArgs } from "./getDbbrainDiagEvent";
export const getDbbrainDiagEvent: typeof import("./getDbbrainDiagEvent").getDbbrainDiagEvent = null as any;
export const getDbbrainDiagEventOutput: typeof import("./getDbbrainDiagEvent").getDbbrainDiagEventOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainDiagEvent","getDbbrainDiagEventOutput"], () => require("./getDbbrainDiagEvent"));

export { GetDbbrainDiagEventsArgs, GetDbbrainDiagEventsResult, GetDbbrainDiagEventsOutputArgs } from "./getDbbrainDiagEvents";
export const getDbbrainDiagEvents: typeof import("./getDbbrainDiagEvents").getDbbrainDiagEvents = null as any;
export const getDbbrainDiagEventsOutput: typeof import("./getDbbrainDiagEvents").getDbbrainDiagEventsOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainDiagEvents","getDbbrainDiagEventsOutput"], () => require("./getDbbrainDiagEvents"));

export { GetDbbrainDiagHistoryArgs, GetDbbrainDiagHistoryResult, GetDbbrainDiagHistoryOutputArgs } from "./getDbbrainDiagHistory";
export const getDbbrainDiagHistory: typeof import("./getDbbrainDiagHistory").getDbbrainDiagHistory = null as any;
export const getDbbrainDiagHistoryOutput: typeof import("./getDbbrainDiagHistory").getDbbrainDiagHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainDiagHistory","getDbbrainDiagHistoryOutput"], () => require("./getDbbrainDiagHistory"));

export { GetDbbrainHealthScoresArgs, GetDbbrainHealthScoresResult, GetDbbrainHealthScoresOutputArgs } from "./getDbbrainHealthScores";
export const getDbbrainHealthScores: typeof import("./getDbbrainHealthScores").getDbbrainHealthScores = null as any;
export const getDbbrainHealthScoresOutput: typeof import("./getDbbrainHealthScores").getDbbrainHealthScoresOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainHealthScores","getDbbrainHealthScoresOutput"], () => require("./getDbbrainHealthScores"));

export { GetDbbrainMysqlProcessListArgs, GetDbbrainMysqlProcessListResult, GetDbbrainMysqlProcessListOutputArgs } from "./getDbbrainMysqlProcessList";
export const getDbbrainMysqlProcessList: typeof import("./getDbbrainMysqlProcessList").getDbbrainMysqlProcessList = null as any;
export const getDbbrainMysqlProcessListOutput: typeof import("./getDbbrainMysqlProcessList").getDbbrainMysqlProcessListOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainMysqlProcessList","getDbbrainMysqlProcessListOutput"], () => require("./getDbbrainMysqlProcessList"));

export { GetDbbrainNoPrimaryKeyTablesArgs, GetDbbrainNoPrimaryKeyTablesResult, GetDbbrainNoPrimaryKeyTablesOutputArgs } from "./getDbbrainNoPrimaryKeyTables";
export const getDbbrainNoPrimaryKeyTables: typeof import("./getDbbrainNoPrimaryKeyTables").getDbbrainNoPrimaryKeyTables = null as any;
export const getDbbrainNoPrimaryKeyTablesOutput: typeof import("./getDbbrainNoPrimaryKeyTables").getDbbrainNoPrimaryKeyTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainNoPrimaryKeyTables","getDbbrainNoPrimaryKeyTablesOutput"], () => require("./getDbbrainNoPrimaryKeyTables"));

export { GetDbbrainRedisTopBigKeysArgs, GetDbbrainRedisTopBigKeysResult, GetDbbrainRedisTopBigKeysOutputArgs } from "./getDbbrainRedisTopBigKeys";
export const getDbbrainRedisTopBigKeys: typeof import("./getDbbrainRedisTopBigKeys").getDbbrainRedisTopBigKeys = null as any;
export const getDbbrainRedisTopBigKeysOutput: typeof import("./getDbbrainRedisTopBigKeys").getDbbrainRedisTopBigKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainRedisTopBigKeys","getDbbrainRedisTopBigKeysOutput"], () => require("./getDbbrainRedisTopBigKeys"));

export { GetDbbrainRedisTopKeyPrefixListArgs, GetDbbrainRedisTopKeyPrefixListResult, GetDbbrainRedisTopKeyPrefixListOutputArgs } from "./getDbbrainRedisTopKeyPrefixList";
export const getDbbrainRedisTopKeyPrefixList: typeof import("./getDbbrainRedisTopKeyPrefixList").getDbbrainRedisTopKeyPrefixList = null as any;
export const getDbbrainRedisTopKeyPrefixListOutput: typeof import("./getDbbrainRedisTopKeyPrefixList").getDbbrainRedisTopKeyPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainRedisTopKeyPrefixList","getDbbrainRedisTopKeyPrefixListOutput"], () => require("./getDbbrainRedisTopKeyPrefixList"));

export { GetDbbrainSecurityAuditLogDownloadUrlsArgs, GetDbbrainSecurityAuditLogDownloadUrlsResult, GetDbbrainSecurityAuditLogDownloadUrlsOutputArgs } from "./getDbbrainSecurityAuditLogDownloadUrls";
export const getDbbrainSecurityAuditLogDownloadUrls: typeof import("./getDbbrainSecurityAuditLogDownloadUrls").getDbbrainSecurityAuditLogDownloadUrls = null as any;
export const getDbbrainSecurityAuditLogDownloadUrlsOutput: typeof import("./getDbbrainSecurityAuditLogDownloadUrls").getDbbrainSecurityAuditLogDownloadUrlsOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSecurityAuditLogDownloadUrls","getDbbrainSecurityAuditLogDownloadUrlsOutput"], () => require("./getDbbrainSecurityAuditLogDownloadUrls"));

export { GetDbbrainSecurityAuditLogExportTasksArgs, GetDbbrainSecurityAuditLogExportTasksResult, GetDbbrainSecurityAuditLogExportTasksOutputArgs } from "./getDbbrainSecurityAuditLogExportTasks";
export const getDbbrainSecurityAuditLogExportTasks: typeof import("./getDbbrainSecurityAuditLogExportTasks").getDbbrainSecurityAuditLogExportTasks = null as any;
export const getDbbrainSecurityAuditLogExportTasksOutput: typeof import("./getDbbrainSecurityAuditLogExportTasks").getDbbrainSecurityAuditLogExportTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSecurityAuditLogExportTasks","getDbbrainSecurityAuditLogExportTasksOutput"], () => require("./getDbbrainSecurityAuditLogExportTasks"));

export { GetDbbrainSlowLogTimeSeriesStatsArgs, GetDbbrainSlowLogTimeSeriesStatsResult, GetDbbrainSlowLogTimeSeriesStatsOutputArgs } from "./getDbbrainSlowLogTimeSeriesStats";
export const getDbbrainSlowLogTimeSeriesStats: typeof import("./getDbbrainSlowLogTimeSeriesStats").getDbbrainSlowLogTimeSeriesStats = null as any;
export const getDbbrainSlowLogTimeSeriesStatsOutput: typeof import("./getDbbrainSlowLogTimeSeriesStats").getDbbrainSlowLogTimeSeriesStatsOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSlowLogTimeSeriesStats","getDbbrainSlowLogTimeSeriesStatsOutput"], () => require("./getDbbrainSlowLogTimeSeriesStats"));

export { GetDbbrainSlowLogTopSqlsArgs, GetDbbrainSlowLogTopSqlsResult, GetDbbrainSlowLogTopSqlsOutputArgs } from "./getDbbrainSlowLogTopSqls";
export const getDbbrainSlowLogTopSqls: typeof import("./getDbbrainSlowLogTopSqls").getDbbrainSlowLogTopSqls = null as any;
export const getDbbrainSlowLogTopSqlsOutput: typeof import("./getDbbrainSlowLogTopSqls").getDbbrainSlowLogTopSqlsOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSlowLogTopSqls","getDbbrainSlowLogTopSqlsOutput"], () => require("./getDbbrainSlowLogTopSqls"));

export { GetDbbrainSlowLogUserHostStatsArgs, GetDbbrainSlowLogUserHostStatsResult, GetDbbrainSlowLogUserHostStatsOutputArgs } from "./getDbbrainSlowLogUserHostStats";
export const getDbbrainSlowLogUserHostStats: typeof import("./getDbbrainSlowLogUserHostStats").getDbbrainSlowLogUserHostStats = null as any;
export const getDbbrainSlowLogUserHostStatsOutput: typeof import("./getDbbrainSlowLogUserHostStats").getDbbrainSlowLogUserHostStatsOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSlowLogUserHostStats","getDbbrainSlowLogUserHostStatsOutput"], () => require("./getDbbrainSlowLogUserHostStats"));

export { GetDbbrainSlowLogUserSqlAdviceArgs, GetDbbrainSlowLogUserSqlAdviceResult, GetDbbrainSlowLogUserSqlAdviceOutputArgs } from "./getDbbrainSlowLogUserSqlAdvice";
export const getDbbrainSlowLogUserSqlAdvice: typeof import("./getDbbrainSlowLogUserSqlAdvice").getDbbrainSlowLogUserSqlAdvice = null as any;
export const getDbbrainSlowLogUserSqlAdviceOutput: typeof import("./getDbbrainSlowLogUserSqlAdvice").getDbbrainSlowLogUserSqlAdviceOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSlowLogUserSqlAdvice","getDbbrainSlowLogUserSqlAdviceOutput"], () => require("./getDbbrainSlowLogUserSqlAdvice"));

export { GetDbbrainSlowLogsArgs, GetDbbrainSlowLogsResult, GetDbbrainSlowLogsOutputArgs } from "./getDbbrainSlowLogs";
export const getDbbrainSlowLogs: typeof import("./getDbbrainSlowLogs").getDbbrainSlowLogs = null as any;
export const getDbbrainSlowLogsOutput: typeof import("./getDbbrainSlowLogs").getDbbrainSlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSlowLogs","getDbbrainSlowLogsOutput"], () => require("./getDbbrainSlowLogs"));

export { GetDbbrainSqlFiltersArgs, GetDbbrainSqlFiltersResult, GetDbbrainSqlFiltersOutputArgs } from "./getDbbrainSqlFilters";
export const getDbbrainSqlFilters: typeof import("./getDbbrainSqlFilters").getDbbrainSqlFilters = null as any;
export const getDbbrainSqlFiltersOutput: typeof import("./getDbbrainSqlFilters").getDbbrainSqlFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSqlFilters","getDbbrainSqlFiltersOutput"], () => require("./getDbbrainSqlFilters"));

export { GetDbbrainSqlTemplatesArgs, GetDbbrainSqlTemplatesResult, GetDbbrainSqlTemplatesOutputArgs } from "./getDbbrainSqlTemplates";
export const getDbbrainSqlTemplates: typeof import("./getDbbrainSqlTemplates").getDbbrainSqlTemplates = null as any;
export const getDbbrainSqlTemplatesOutput: typeof import("./getDbbrainSqlTemplates").getDbbrainSqlTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainSqlTemplates","getDbbrainSqlTemplatesOutput"], () => require("./getDbbrainSqlTemplates"));

export { GetDbbrainTopSpaceSchemaTimeSeriesArgs, GetDbbrainTopSpaceSchemaTimeSeriesResult, GetDbbrainTopSpaceSchemaTimeSeriesOutputArgs } from "./getDbbrainTopSpaceSchemaTimeSeries";
export const getDbbrainTopSpaceSchemaTimeSeries: typeof import("./getDbbrainTopSpaceSchemaTimeSeries").getDbbrainTopSpaceSchemaTimeSeries = null as any;
export const getDbbrainTopSpaceSchemaTimeSeriesOutput: typeof import("./getDbbrainTopSpaceSchemaTimeSeries").getDbbrainTopSpaceSchemaTimeSeriesOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainTopSpaceSchemaTimeSeries","getDbbrainTopSpaceSchemaTimeSeriesOutput"], () => require("./getDbbrainTopSpaceSchemaTimeSeries"));

export { GetDbbrainTopSpaceSchemasArgs, GetDbbrainTopSpaceSchemasResult, GetDbbrainTopSpaceSchemasOutputArgs } from "./getDbbrainTopSpaceSchemas";
export const getDbbrainTopSpaceSchemas: typeof import("./getDbbrainTopSpaceSchemas").getDbbrainTopSpaceSchemas = null as any;
export const getDbbrainTopSpaceSchemasOutput: typeof import("./getDbbrainTopSpaceSchemas").getDbbrainTopSpaceSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainTopSpaceSchemas","getDbbrainTopSpaceSchemasOutput"], () => require("./getDbbrainTopSpaceSchemas"));

export { GetDbbrainTopSpaceTableTimeSeriesArgs, GetDbbrainTopSpaceTableTimeSeriesResult, GetDbbrainTopSpaceTableTimeSeriesOutputArgs } from "./getDbbrainTopSpaceTableTimeSeries";
export const getDbbrainTopSpaceTableTimeSeries: typeof import("./getDbbrainTopSpaceTableTimeSeries").getDbbrainTopSpaceTableTimeSeries = null as any;
export const getDbbrainTopSpaceTableTimeSeriesOutput: typeof import("./getDbbrainTopSpaceTableTimeSeries").getDbbrainTopSpaceTableTimeSeriesOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainTopSpaceTableTimeSeries","getDbbrainTopSpaceTableTimeSeriesOutput"], () => require("./getDbbrainTopSpaceTableTimeSeries"));

export { GetDbbrainTopSpaceTablesArgs, GetDbbrainTopSpaceTablesResult, GetDbbrainTopSpaceTablesOutputArgs } from "./getDbbrainTopSpaceTables";
export const getDbbrainTopSpaceTables: typeof import("./getDbbrainTopSpaceTables").getDbbrainTopSpaceTables = null as any;
export const getDbbrainTopSpaceTablesOutput: typeof import("./getDbbrainTopSpaceTables").getDbbrainTopSpaceTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDbbrainTopSpaceTables","getDbbrainTopSpaceTablesOutput"], () => require("./getDbbrainTopSpaceTables"));

export { GetDcAccessPointsArgs, GetDcAccessPointsResult, GetDcAccessPointsOutputArgs } from "./getDcAccessPoints";
export const getDcAccessPoints: typeof import("./getDcAccessPoints").getDcAccessPoints = null as any;
export const getDcAccessPointsOutput: typeof import("./getDcAccessPoints").getDcAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getDcAccessPoints","getDcAccessPointsOutput"], () => require("./getDcAccessPoints"));

export { GetDcGatewayCcnRoutesArgs, GetDcGatewayCcnRoutesResult, GetDcGatewayCcnRoutesOutputArgs } from "./getDcGatewayCcnRoutes";
export const getDcGatewayCcnRoutes: typeof import("./getDcGatewayCcnRoutes").getDcGatewayCcnRoutes = null as any;
export const getDcGatewayCcnRoutesOutput: typeof import("./getDcGatewayCcnRoutes").getDcGatewayCcnRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getDcGatewayCcnRoutes","getDcGatewayCcnRoutesOutput"], () => require("./getDcGatewayCcnRoutes"));

export { GetDcGatewayInstancesArgs, GetDcGatewayInstancesResult, GetDcGatewayInstancesOutputArgs } from "./getDcGatewayInstances";
export const getDcGatewayInstances: typeof import("./getDcGatewayInstances").getDcGatewayInstances = null as any;
export const getDcGatewayInstancesOutput: typeof import("./getDcGatewayInstances").getDcGatewayInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDcGatewayInstances","getDcGatewayInstancesOutput"], () => require("./getDcGatewayInstances"));

export { GetDcInstancesArgs, GetDcInstancesResult, GetDcInstancesOutputArgs } from "./getDcInstances";
export const getDcInstances: typeof import("./getDcInstances").getDcInstances = null as any;
export const getDcInstancesOutput: typeof import("./getDcInstances").getDcInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDcInstances","getDcInstancesOutput"], () => require("./getDcInstances"));

export { GetDcInternetAddressQuotaArgs, GetDcInternetAddressQuotaResult, GetDcInternetAddressQuotaOutputArgs } from "./getDcInternetAddressQuota";
export const getDcInternetAddressQuota: typeof import("./getDcInternetAddressQuota").getDcInternetAddressQuota = null as any;
export const getDcInternetAddressQuotaOutput: typeof import("./getDcInternetAddressQuota").getDcInternetAddressQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getDcInternetAddressQuota","getDcInternetAddressQuotaOutput"], () => require("./getDcInternetAddressQuota"));

export { GetDcInternetAddressStatisticsArgs, GetDcInternetAddressStatisticsResult, GetDcInternetAddressStatisticsOutputArgs } from "./getDcInternetAddressStatistics";
export const getDcInternetAddressStatistics: typeof import("./getDcInternetAddressStatistics").getDcInternetAddressStatistics = null as any;
export const getDcInternetAddressStatisticsOutput: typeof import("./getDcInternetAddressStatistics").getDcInternetAddressStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getDcInternetAddressStatistics","getDcInternetAddressStatisticsOutput"], () => require("./getDcInternetAddressStatistics"));

export { GetDcPublicDirectConnectTunnelRoutesArgs, GetDcPublicDirectConnectTunnelRoutesResult, GetDcPublicDirectConnectTunnelRoutesOutputArgs } from "./getDcPublicDirectConnectTunnelRoutes";
export const getDcPublicDirectConnectTunnelRoutes: typeof import("./getDcPublicDirectConnectTunnelRoutes").getDcPublicDirectConnectTunnelRoutes = null as any;
export const getDcPublicDirectConnectTunnelRoutesOutput: typeof import("./getDcPublicDirectConnectTunnelRoutes").getDcPublicDirectConnectTunnelRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getDcPublicDirectConnectTunnelRoutes","getDcPublicDirectConnectTunnelRoutesOutput"], () => require("./getDcPublicDirectConnectTunnelRoutes"));

export { GetDcdbAccountsArgs, GetDcdbAccountsResult, GetDcdbAccountsOutputArgs } from "./getDcdbAccounts";
export const getDcdbAccounts: typeof import("./getDcdbAccounts").getDcdbAccounts = null as any;
export const getDcdbAccountsOutput: typeof import("./getDcdbAccounts").getDcdbAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbAccounts","getDcdbAccountsOutput"], () => require("./getDcdbAccounts"));

export { GetDcdbDatabaseObjectsArgs, GetDcdbDatabaseObjectsResult, GetDcdbDatabaseObjectsOutputArgs } from "./getDcdbDatabaseObjects";
export const getDcdbDatabaseObjects: typeof import("./getDcdbDatabaseObjects").getDcdbDatabaseObjects = null as any;
export const getDcdbDatabaseObjectsOutput: typeof import("./getDcdbDatabaseObjects").getDcdbDatabaseObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbDatabaseObjects","getDcdbDatabaseObjectsOutput"], () => require("./getDcdbDatabaseObjects"));

export { GetDcdbDatabaseTablesArgs, GetDcdbDatabaseTablesResult, GetDcdbDatabaseTablesOutputArgs } from "./getDcdbDatabaseTables";
export const getDcdbDatabaseTables: typeof import("./getDcdbDatabaseTables").getDcdbDatabaseTables = null as any;
export const getDcdbDatabaseTablesOutput: typeof import("./getDcdbDatabaseTables").getDcdbDatabaseTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbDatabaseTables","getDcdbDatabaseTablesOutput"], () => require("./getDcdbDatabaseTables"));

export { GetDcdbDatabasesArgs, GetDcdbDatabasesResult, GetDcdbDatabasesOutputArgs } from "./getDcdbDatabases";
export const getDcdbDatabases: typeof import("./getDcdbDatabases").getDcdbDatabases = null as any;
export const getDcdbDatabasesOutput: typeof import("./getDcdbDatabases").getDcdbDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbDatabases","getDcdbDatabasesOutput"], () => require("./getDcdbDatabases"));

export { GetDcdbFileDownloadUrlArgs, GetDcdbFileDownloadUrlResult, GetDcdbFileDownloadUrlOutputArgs } from "./getDcdbFileDownloadUrl";
export const getDcdbFileDownloadUrl: typeof import("./getDcdbFileDownloadUrl").getDcdbFileDownloadUrl = null as any;
export const getDcdbFileDownloadUrlOutput: typeof import("./getDcdbFileDownloadUrl").getDcdbFileDownloadUrlOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbFileDownloadUrl","getDcdbFileDownloadUrlOutput"], () => require("./getDcdbFileDownloadUrl"));

export { GetDcdbInstanceNodeInfoArgs, GetDcdbInstanceNodeInfoResult, GetDcdbInstanceNodeInfoOutputArgs } from "./getDcdbInstanceNodeInfo";
export const getDcdbInstanceNodeInfo: typeof import("./getDcdbInstanceNodeInfo").getDcdbInstanceNodeInfo = null as any;
export const getDcdbInstanceNodeInfoOutput: typeof import("./getDcdbInstanceNodeInfo").getDcdbInstanceNodeInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbInstanceNodeInfo","getDcdbInstanceNodeInfoOutput"], () => require("./getDcdbInstanceNodeInfo"));

export { GetDcdbInstancesArgs, GetDcdbInstancesResult, GetDcdbInstancesOutputArgs } from "./getDcdbInstances";
export const getDcdbInstances: typeof import("./getDcdbInstances").getDcdbInstances = null as any;
export const getDcdbInstancesOutput: typeof import("./getDcdbInstances").getDcdbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbInstances","getDcdbInstancesOutput"], () => require("./getDcdbInstances"));

export { GetDcdbLogFilesArgs, GetDcdbLogFilesResult, GetDcdbLogFilesOutputArgs } from "./getDcdbLogFiles";
export const getDcdbLogFiles: typeof import("./getDcdbLogFiles").getDcdbLogFiles = null as any;
export const getDcdbLogFilesOutput: typeof import("./getDcdbLogFiles").getDcdbLogFilesOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbLogFiles","getDcdbLogFilesOutput"], () => require("./getDcdbLogFiles"));

export { GetDcdbOrdersArgs, GetDcdbOrdersResult, GetDcdbOrdersOutputArgs } from "./getDcdbOrders";
export const getDcdbOrders: typeof import("./getDcdbOrders").getDcdbOrders = null as any;
export const getDcdbOrdersOutput: typeof import("./getDcdbOrders").getDcdbOrdersOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbOrders","getDcdbOrdersOutput"], () => require("./getDcdbOrders"));

export { GetDcdbParametersArgs, GetDcdbParametersResult, GetDcdbParametersOutputArgs } from "./getDcdbParameters";
export const getDcdbParameters: typeof import("./getDcdbParameters").getDcdbParameters = null as any;
export const getDcdbParametersOutput: typeof import("./getDcdbParameters").getDcdbParametersOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbParameters","getDcdbParametersOutput"], () => require("./getDcdbParameters"));

export { GetDcdbPriceArgs, GetDcdbPriceResult, GetDcdbPriceOutputArgs } from "./getDcdbPrice";
export const getDcdbPrice: typeof import("./getDcdbPrice").getDcdbPrice = null as any;
export const getDcdbPriceOutput: typeof import("./getDcdbPrice").getDcdbPriceOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbPrice","getDcdbPriceOutput"], () => require("./getDcdbPrice"));

export { GetDcdbProjectSecurityGroupsArgs, GetDcdbProjectSecurityGroupsResult, GetDcdbProjectSecurityGroupsOutputArgs } from "./getDcdbProjectSecurityGroups";
export const getDcdbProjectSecurityGroups: typeof import("./getDcdbProjectSecurityGroups").getDcdbProjectSecurityGroups = null as any;
export const getDcdbProjectSecurityGroupsOutput: typeof import("./getDcdbProjectSecurityGroups").getDcdbProjectSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbProjectSecurityGroups","getDcdbProjectSecurityGroupsOutput"], () => require("./getDcdbProjectSecurityGroups"));

export { GetDcdbProjectsArgs, GetDcdbProjectsResult, GetDcdbProjectsOutputArgs } from "./getDcdbProjects";
export const getDcdbProjects: typeof import("./getDcdbProjects").getDcdbProjects = null as any;
export const getDcdbProjectsOutput: typeof import("./getDcdbProjects").getDcdbProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbProjects","getDcdbProjectsOutput"], () => require("./getDcdbProjects"));

export { GetDcdbRenewalPriceArgs, GetDcdbRenewalPriceResult, GetDcdbRenewalPriceOutputArgs } from "./getDcdbRenewalPrice";
export const getDcdbRenewalPrice: typeof import("./getDcdbRenewalPrice").getDcdbRenewalPrice = null as any;
export const getDcdbRenewalPriceOutput: typeof import("./getDcdbRenewalPrice").getDcdbRenewalPriceOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbRenewalPrice","getDcdbRenewalPriceOutput"], () => require("./getDcdbRenewalPrice"));

export { GetDcdbSaleInfoArgs, GetDcdbSaleInfoResult, GetDcdbSaleInfoOutputArgs } from "./getDcdbSaleInfo";
export const getDcdbSaleInfo: typeof import("./getDcdbSaleInfo").getDcdbSaleInfo = null as any;
export const getDcdbSaleInfoOutput: typeof import("./getDcdbSaleInfo").getDcdbSaleInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbSaleInfo","getDcdbSaleInfoOutput"], () => require("./getDcdbSaleInfo"));

export { GetDcdbSecurityGroupsArgs, GetDcdbSecurityGroupsResult, GetDcdbSecurityGroupsOutputArgs } from "./getDcdbSecurityGroups";
export const getDcdbSecurityGroups: typeof import("./getDcdbSecurityGroups").getDcdbSecurityGroups = null as any;
export const getDcdbSecurityGroupsOutput: typeof import("./getDcdbSecurityGroups").getDcdbSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbSecurityGroups","getDcdbSecurityGroupsOutput"], () => require("./getDcdbSecurityGroups"));

export { GetDcdbShardSpecArgs, GetDcdbShardSpecResult, GetDcdbShardSpecOutputArgs } from "./getDcdbShardSpec";
export const getDcdbShardSpec: typeof import("./getDcdbShardSpec").getDcdbShardSpec = null as any;
export const getDcdbShardSpecOutput: typeof import("./getDcdbShardSpec").getDcdbShardSpecOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbShardSpec","getDcdbShardSpecOutput"], () => require("./getDcdbShardSpec"));

export { GetDcdbShardsArgs, GetDcdbShardsResult, GetDcdbShardsOutputArgs } from "./getDcdbShards";
export const getDcdbShards: typeof import("./getDcdbShards").getDcdbShards = null as any;
export const getDcdbShardsOutput: typeof import("./getDcdbShards").getDcdbShardsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbShards","getDcdbShardsOutput"], () => require("./getDcdbShards"));

export { GetDcdbSlowLogsArgs, GetDcdbSlowLogsResult, GetDcdbSlowLogsOutputArgs } from "./getDcdbSlowLogs";
export const getDcdbSlowLogs: typeof import("./getDcdbSlowLogs").getDcdbSlowLogs = null as any;
export const getDcdbSlowLogsOutput: typeof import("./getDcdbSlowLogs").getDcdbSlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbSlowLogs","getDcdbSlowLogsOutput"], () => require("./getDcdbSlowLogs"));

export { GetDcdbUpgradePriceArgs, GetDcdbUpgradePriceResult, GetDcdbUpgradePriceOutputArgs } from "./getDcdbUpgradePrice";
export const getDcdbUpgradePrice: typeof import("./getDcdbUpgradePrice").getDcdbUpgradePrice = null as any;
export const getDcdbUpgradePriceOutput: typeof import("./getDcdbUpgradePrice").getDcdbUpgradePriceOutput = null as any;
utilities.lazyLoad(exports, ["getDcdbUpgradePrice","getDcdbUpgradePriceOutput"], () => require("./getDcdbUpgradePrice"));

export { GetDcxInstancesArgs, GetDcxInstancesResult, GetDcxInstancesOutputArgs } from "./getDcxInstances";
export const getDcxInstances: typeof import("./getDcxInstances").getDcxInstances = null as any;
export const getDcxInstancesOutput: typeof import("./getDcxInstances").getDcxInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDcxInstances","getDcxInstancesOutput"], () => require("./getDcxInstances"));

export { GetDlcCheckDataEngineConfigPairsValidityArgs, GetDlcCheckDataEngineConfigPairsValidityResult, GetDlcCheckDataEngineConfigPairsValidityOutputArgs } from "./getDlcCheckDataEngineConfigPairsValidity";
export const getDlcCheckDataEngineConfigPairsValidity: typeof import("./getDlcCheckDataEngineConfigPairsValidity").getDlcCheckDataEngineConfigPairsValidity = null as any;
export const getDlcCheckDataEngineConfigPairsValidityOutput: typeof import("./getDlcCheckDataEngineConfigPairsValidity").getDlcCheckDataEngineConfigPairsValidityOutput = null as any;
utilities.lazyLoad(exports, ["getDlcCheckDataEngineConfigPairsValidity","getDlcCheckDataEngineConfigPairsValidityOutput"], () => require("./getDlcCheckDataEngineConfigPairsValidity"));

export { GetDlcCheckDataEngineImageCanBeRollbackArgs, GetDlcCheckDataEngineImageCanBeRollbackResult, GetDlcCheckDataEngineImageCanBeRollbackOutputArgs } from "./getDlcCheckDataEngineImageCanBeRollback";
export const getDlcCheckDataEngineImageCanBeRollback: typeof import("./getDlcCheckDataEngineImageCanBeRollback").getDlcCheckDataEngineImageCanBeRollback = null as any;
export const getDlcCheckDataEngineImageCanBeRollbackOutput: typeof import("./getDlcCheckDataEngineImageCanBeRollback").getDlcCheckDataEngineImageCanBeRollbackOutput = null as any;
utilities.lazyLoad(exports, ["getDlcCheckDataEngineImageCanBeRollback","getDlcCheckDataEngineImageCanBeRollbackOutput"], () => require("./getDlcCheckDataEngineImageCanBeRollback"));

export { GetDlcCheckDataEngineImageCanBeUpgradeArgs, GetDlcCheckDataEngineImageCanBeUpgradeResult, GetDlcCheckDataEngineImageCanBeUpgradeOutputArgs } from "./getDlcCheckDataEngineImageCanBeUpgrade";
export const getDlcCheckDataEngineImageCanBeUpgrade: typeof import("./getDlcCheckDataEngineImageCanBeUpgrade").getDlcCheckDataEngineImageCanBeUpgrade = null as any;
export const getDlcCheckDataEngineImageCanBeUpgradeOutput: typeof import("./getDlcCheckDataEngineImageCanBeUpgrade").getDlcCheckDataEngineImageCanBeUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getDlcCheckDataEngineImageCanBeUpgrade","getDlcCheckDataEngineImageCanBeUpgradeOutput"], () => require("./getDlcCheckDataEngineImageCanBeUpgrade"));

export { GetDlcDescribeDataEngineArgs, GetDlcDescribeDataEngineResult, GetDlcDescribeDataEngineOutputArgs } from "./getDlcDescribeDataEngine";
export const getDlcDescribeDataEngine: typeof import("./getDlcDescribeDataEngine").getDlcDescribeDataEngine = null as any;
export const getDlcDescribeDataEngineOutput: typeof import("./getDlcDescribeDataEngine").getDlcDescribeDataEngineOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeDataEngine","getDlcDescribeDataEngineOutput"], () => require("./getDlcDescribeDataEngine"));

export { GetDlcDescribeDataEngineEventsArgs, GetDlcDescribeDataEngineEventsResult, GetDlcDescribeDataEngineEventsOutputArgs } from "./getDlcDescribeDataEngineEvents";
export const getDlcDescribeDataEngineEvents: typeof import("./getDlcDescribeDataEngineEvents").getDlcDescribeDataEngineEvents = null as any;
export const getDlcDescribeDataEngineEventsOutput: typeof import("./getDlcDescribeDataEngineEvents").getDlcDescribeDataEngineEventsOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeDataEngineEvents","getDlcDescribeDataEngineEventsOutput"], () => require("./getDlcDescribeDataEngineEvents"));

export { GetDlcDescribeDataEngineImageVersionsArgs, GetDlcDescribeDataEngineImageVersionsResult, GetDlcDescribeDataEngineImageVersionsOutputArgs } from "./getDlcDescribeDataEngineImageVersions";
export const getDlcDescribeDataEngineImageVersions: typeof import("./getDlcDescribeDataEngineImageVersions").getDlcDescribeDataEngineImageVersions = null as any;
export const getDlcDescribeDataEngineImageVersionsOutput: typeof import("./getDlcDescribeDataEngineImageVersions").getDlcDescribeDataEngineImageVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeDataEngineImageVersions","getDlcDescribeDataEngineImageVersionsOutput"], () => require("./getDlcDescribeDataEngineImageVersions"));

export { GetDlcDescribeDataEnginePythonSparkImagesArgs, GetDlcDescribeDataEnginePythonSparkImagesResult, GetDlcDescribeDataEnginePythonSparkImagesOutputArgs } from "./getDlcDescribeDataEnginePythonSparkImages";
export const getDlcDescribeDataEnginePythonSparkImages: typeof import("./getDlcDescribeDataEnginePythonSparkImages").getDlcDescribeDataEnginePythonSparkImages = null as any;
export const getDlcDescribeDataEnginePythonSparkImagesOutput: typeof import("./getDlcDescribeDataEnginePythonSparkImages").getDlcDescribeDataEnginePythonSparkImagesOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeDataEnginePythonSparkImages","getDlcDescribeDataEnginePythonSparkImagesOutput"], () => require("./getDlcDescribeDataEnginePythonSparkImages"));

export { GetDlcDescribeEngineUsageInfoArgs, GetDlcDescribeEngineUsageInfoResult, GetDlcDescribeEngineUsageInfoOutputArgs } from "./getDlcDescribeEngineUsageInfo";
export const getDlcDescribeEngineUsageInfo: typeof import("./getDlcDescribeEngineUsageInfo").getDlcDescribeEngineUsageInfo = null as any;
export const getDlcDescribeEngineUsageInfoOutput: typeof import("./getDlcDescribeEngineUsageInfo").getDlcDescribeEngineUsageInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeEngineUsageInfo","getDlcDescribeEngineUsageInfoOutput"], () => require("./getDlcDescribeEngineUsageInfo"));

export { GetDlcDescribeUpdatableDataEnginesArgs, GetDlcDescribeUpdatableDataEnginesResult, GetDlcDescribeUpdatableDataEnginesOutputArgs } from "./getDlcDescribeUpdatableDataEngines";
export const getDlcDescribeUpdatableDataEngines: typeof import("./getDlcDescribeUpdatableDataEngines").getDlcDescribeUpdatableDataEngines = null as any;
export const getDlcDescribeUpdatableDataEnginesOutput: typeof import("./getDlcDescribeUpdatableDataEngines").getDlcDescribeUpdatableDataEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeUpdatableDataEngines","getDlcDescribeUpdatableDataEnginesOutput"], () => require("./getDlcDescribeUpdatableDataEngines"));

export { GetDlcDescribeUserInfoArgs, GetDlcDescribeUserInfoResult, GetDlcDescribeUserInfoOutputArgs } from "./getDlcDescribeUserInfo";
export const getDlcDescribeUserInfo: typeof import("./getDlcDescribeUserInfo").getDlcDescribeUserInfo = null as any;
export const getDlcDescribeUserInfoOutput: typeof import("./getDlcDescribeUserInfo").getDlcDescribeUserInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeUserInfo","getDlcDescribeUserInfoOutput"], () => require("./getDlcDescribeUserInfo"));

export { GetDlcDescribeUserRolesArgs, GetDlcDescribeUserRolesResult, GetDlcDescribeUserRolesOutputArgs } from "./getDlcDescribeUserRoles";
export const getDlcDescribeUserRoles: typeof import("./getDlcDescribeUserRoles").getDlcDescribeUserRoles = null as any;
export const getDlcDescribeUserRolesOutput: typeof import("./getDlcDescribeUserRoles").getDlcDescribeUserRolesOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeUserRoles","getDlcDescribeUserRolesOutput"], () => require("./getDlcDescribeUserRoles"));

export { GetDlcDescribeUserTypeArgs, GetDlcDescribeUserTypeResult, GetDlcDescribeUserTypeOutputArgs } from "./getDlcDescribeUserType";
export const getDlcDescribeUserType: typeof import("./getDlcDescribeUserType").getDlcDescribeUserType = null as any;
export const getDlcDescribeUserTypeOutput: typeof import("./getDlcDescribeUserType").getDlcDescribeUserTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeUserType","getDlcDescribeUserTypeOutput"], () => require("./getDlcDescribeUserType"));

export { GetDlcDescribeWorkGroupInfoArgs, GetDlcDescribeWorkGroupInfoResult, GetDlcDescribeWorkGroupInfoOutputArgs } from "./getDlcDescribeWorkGroupInfo";
export const getDlcDescribeWorkGroupInfo: typeof import("./getDlcDescribeWorkGroupInfo").getDlcDescribeWorkGroupInfo = null as any;
export const getDlcDescribeWorkGroupInfoOutput: typeof import("./getDlcDescribeWorkGroupInfo").getDlcDescribeWorkGroupInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDlcDescribeWorkGroupInfo","getDlcDescribeWorkGroupInfoOutput"], () => require("./getDlcDescribeWorkGroupInfo"));

export { GetDnatsArgs, GetDnatsResult, GetDnatsOutputArgs } from "./getDnats";
export const getDnats: typeof import("./getDnats").getDnats = null as any;
export const getDnatsOutput: typeof import("./getDnats").getDnatsOutput = null as any;
utilities.lazyLoad(exports, ["getDnats","getDnatsOutput"], () => require("./getDnats"));

export { GetDnspodDomainAnalyticsArgs, GetDnspodDomainAnalyticsResult, GetDnspodDomainAnalyticsOutputArgs } from "./getDnspodDomainAnalytics";
export const getDnspodDomainAnalytics: typeof import("./getDnspodDomainAnalytics").getDnspodDomainAnalytics = null as any;
export const getDnspodDomainAnalyticsOutput: typeof import("./getDnspodDomainAnalytics").getDnspodDomainAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodDomainAnalytics","getDnspodDomainAnalyticsOutput"], () => require("./getDnspodDomainAnalytics"));

export { GetDnspodDomainListArgs, GetDnspodDomainListResult, GetDnspodDomainListOutputArgs } from "./getDnspodDomainList";
export const getDnspodDomainList: typeof import("./getDnspodDomainList").getDnspodDomainList = null as any;
export const getDnspodDomainListOutput: typeof import("./getDnspodDomainList").getDnspodDomainListOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodDomainList","getDnspodDomainListOutput"], () => require("./getDnspodDomainList"));

export { GetDnspodDomainLogListArgs, GetDnspodDomainLogListResult, GetDnspodDomainLogListOutputArgs } from "./getDnspodDomainLogList";
export const getDnspodDomainLogList: typeof import("./getDnspodDomainLogList").getDnspodDomainLogList = null as any;
export const getDnspodDomainLogListOutput: typeof import("./getDnspodDomainLogList").getDnspodDomainLogListOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodDomainLogList","getDnspodDomainLogListOutput"], () => require("./getDnspodDomainLogList"));

export { GetDnspodRecordAnalyticsArgs, GetDnspodRecordAnalyticsResult, GetDnspodRecordAnalyticsOutputArgs } from "./getDnspodRecordAnalytics";
export const getDnspodRecordAnalytics: typeof import("./getDnspodRecordAnalytics").getDnspodRecordAnalytics = null as any;
export const getDnspodRecordAnalyticsOutput: typeof import("./getDnspodRecordAnalytics").getDnspodRecordAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodRecordAnalytics","getDnspodRecordAnalyticsOutput"], () => require("./getDnspodRecordAnalytics"));

export { GetDnspodRecordLineListArgs, GetDnspodRecordLineListResult, GetDnspodRecordLineListOutputArgs } from "./getDnspodRecordLineList";
export const getDnspodRecordLineList: typeof import("./getDnspodRecordLineList").getDnspodRecordLineList = null as any;
export const getDnspodRecordLineListOutput: typeof import("./getDnspodRecordLineList").getDnspodRecordLineListOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodRecordLineList","getDnspodRecordLineListOutput"], () => require("./getDnspodRecordLineList"));

export { GetDnspodRecordListArgs, GetDnspodRecordListResult, GetDnspodRecordListOutputArgs } from "./getDnspodRecordList";
export const getDnspodRecordList: typeof import("./getDnspodRecordList").getDnspodRecordList = null as any;
export const getDnspodRecordListOutput: typeof import("./getDnspodRecordList").getDnspodRecordListOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodRecordList","getDnspodRecordListOutput"], () => require("./getDnspodRecordList"));

export { GetDnspodRecordTypeArgs, GetDnspodRecordTypeResult, GetDnspodRecordTypeOutputArgs } from "./getDnspodRecordType";
export const getDnspodRecordType: typeof import("./getDnspodRecordType").getDnspodRecordType = null as any;
export const getDnspodRecordTypeOutput: typeof import("./getDnspodRecordType").getDnspodRecordTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodRecordType","getDnspodRecordTypeOutput"], () => require("./getDnspodRecordType"));

export { GetDnspodRecordsArgs, GetDnspodRecordsResult, GetDnspodRecordsOutputArgs } from "./getDnspodRecords";
export const getDnspodRecords: typeof import("./getDnspodRecords").getDnspodRecords = null as any;
export const getDnspodRecordsOutput: typeof import("./getDnspodRecords").getDnspodRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnspodRecords","getDnspodRecordsOutput"], () => require("./getDnspodRecords"));

export { GetDomainsArgs, GetDomainsResult, GetDomainsOutputArgs } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export { GetDtsCompareTasksArgs, GetDtsCompareTasksResult, GetDtsCompareTasksOutputArgs } from "./getDtsCompareTasks";
export const getDtsCompareTasks: typeof import("./getDtsCompareTasks").getDtsCompareTasks = null as any;
export const getDtsCompareTasksOutput: typeof import("./getDtsCompareTasks").getDtsCompareTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDtsCompareTasks","getDtsCompareTasksOutput"], () => require("./getDtsCompareTasks"));

export { GetDtsMigrateDbInstancesArgs, GetDtsMigrateDbInstancesResult, GetDtsMigrateDbInstancesOutputArgs } from "./getDtsMigrateDbInstances";
export const getDtsMigrateDbInstances: typeof import("./getDtsMigrateDbInstances").getDtsMigrateDbInstances = null as any;
export const getDtsMigrateDbInstancesOutput: typeof import("./getDtsMigrateDbInstances").getDtsMigrateDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDtsMigrateDbInstances","getDtsMigrateDbInstancesOutput"], () => require("./getDtsMigrateDbInstances"));

export { GetDtsMigrateJobsArgs, GetDtsMigrateJobsResult, GetDtsMigrateJobsOutputArgs } from "./getDtsMigrateJobs";
export const getDtsMigrateJobs: typeof import("./getDtsMigrateJobs").getDtsMigrateJobs = null as any;
export const getDtsMigrateJobsOutput: typeof import("./getDtsMigrateJobs").getDtsMigrateJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDtsMigrateJobs","getDtsMigrateJobsOutput"], () => require("./getDtsMigrateJobs"));

export { GetDtsSyncJobsArgs, GetDtsSyncJobsResult, GetDtsSyncJobsOutputArgs } from "./getDtsSyncJobs";
export const getDtsSyncJobs: typeof import("./getDtsSyncJobs").getDtsSyncJobs = null as any;
export const getDtsSyncJobsOutput: typeof import("./getDtsSyncJobs").getDtsSyncJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDtsSyncJobs","getDtsSyncJobsOutput"], () => require("./getDtsSyncJobs"));

export { GetEbBusArgs, GetEbBusResult, GetEbBusOutputArgs } from "./getEbBus";
export const getEbBus: typeof import("./getEbBus").getEbBus = null as any;
export const getEbBusOutput: typeof import("./getEbBus").getEbBusOutput = null as any;
utilities.lazyLoad(exports, ["getEbBus","getEbBusOutput"], () => require("./getEbBus"));

export { GetEbEventRulesArgs, GetEbEventRulesResult, GetEbEventRulesOutputArgs } from "./getEbEventRules";
export const getEbEventRules: typeof import("./getEbEventRules").getEbEventRules = null as any;
export const getEbEventRulesOutput: typeof import("./getEbEventRules").getEbEventRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEbEventRules","getEbEventRulesOutput"], () => require("./getEbEventRules"));

export { GetEbPlateformEventTemplateArgs, GetEbPlateformEventTemplateResult, GetEbPlateformEventTemplateOutputArgs } from "./getEbPlateformEventTemplate";
export const getEbPlateformEventTemplate: typeof import("./getEbPlateformEventTemplate").getEbPlateformEventTemplate = null as any;
export const getEbPlateformEventTemplateOutput: typeof import("./getEbPlateformEventTemplate").getEbPlateformEventTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEbPlateformEventTemplate","getEbPlateformEventTemplateOutput"], () => require("./getEbPlateformEventTemplate"));

export { GetEbPlatformEventNamesArgs, GetEbPlatformEventNamesResult, GetEbPlatformEventNamesOutputArgs } from "./getEbPlatformEventNames";
export const getEbPlatformEventNames: typeof import("./getEbPlatformEventNames").getEbPlatformEventNames = null as any;
export const getEbPlatformEventNamesOutput: typeof import("./getEbPlatformEventNames").getEbPlatformEventNamesOutput = null as any;
utilities.lazyLoad(exports, ["getEbPlatformEventNames","getEbPlatformEventNamesOutput"], () => require("./getEbPlatformEventNames"));

export { GetEbPlatformEventPatternsArgs, GetEbPlatformEventPatternsResult, GetEbPlatformEventPatternsOutputArgs } from "./getEbPlatformEventPatterns";
export const getEbPlatformEventPatterns: typeof import("./getEbPlatformEventPatterns").getEbPlatformEventPatterns = null as any;
export const getEbPlatformEventPatternsOutput: typeof import("./getEbPlatformEventPatterns").getEbPlatformEventPatternsOutput = null as any;
utilities.lazyLoad(exports, ["getEbPlatformEventPatterns","getEbPlatformEventPatternsOutput"], () => require("./getEbPlatformEventPatterns"));

export { GetEbPlatformProductsArgs, GetEbPlatformProductsResult, GetEbPlatformProductsOutputArgs } from "./getEbPlatformProducts";
export const getEbPlatformProducts: typeof import("./getEbPlatformProducts").getEbPlatformProducts = null as any;
export const getEbPlatformProductsOutput: typeof import("./getEbPlatformProducts").getEbPlatformProductsOutput = null as any;
utilities.lazyLoad(exports, ["getEbPlatformProducts","getEbPlatformProductsOutput"], () => require("./getEbPlatformProducts"));

export { GetEbSearchArgs, GetEbSearchResult, GetEbSearchOutputArgs } from "./getEbSearch";
export const getEbSearch: typeof import("./getEbSearch").getEbSearch = null as any;
export const getEbSearchOutput: typeof import("./getEbSearch").getEbSearchOutput = null as any;
utilities.lazyLoad(exports, ["getEbSearch","getEbSearchOutput"], () => require("./getEbSearch"));

export { GetEipArgs, GetEipResult, GetEipOutputArgs } from "./getEip";
export const getEip: typeof import("./getEip").getEip = null as any;
export const getEipOutput: typeof import("./getEip").getEipOutput = null as any;
utilities.lazyLoad(exports, ["getEip","getEipOutput"], () => require("./getEip"));

export { GetEipAddressQuotaArgs, GetEipAddressQuotaResult, GetEipAddressQuotaOutputArgs } from "./getEipAddressQuota";
export const getEipAddressQuota: typeof import("./getEipAddressQuota").getEipAddressQuota = null as any;
export const getEipAddressQuotaOutput: typeof import("./getEipAddressQuota").getEipAddressQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getEipAddressQuota","getEipAddressQuotaOutput"], () => require("./getEipAddressQuota"));

export { GetEipNetworkAccountTypeArgs, GetEipNetworkAccountTypeResult, GetEipNetworkAccountTypeOutputArgs } from "./getEipNetworkAccountType";
export const getEipNetworkAccountType: typeof import("./getEipNetworkAccountType").getEipNetworkAccountType = null as any;
export const getEipNetworkAccountTypeOutput: typeof import("./getEipNetworkAccountType").getEipNetworkAccountTypeOutput = null as any;
utilities.lazyLoad(exports, ["getEipNetworkAccountType","getEipNetworkAccountTypeOutput"], () => require("./getEipNetworkAccountType"));

export { GetEipsArgs, GetEipsResult, GetEipsOutputArgs } from "./getEips";
export const getEips: typeof import("./getEips").getEips = null as any;
export const getEipsOutput: typeof import("./getEips").getEipsOutput = null as any;
utilities.lazyLoad(exports, ["getEips","getEipsOutput"], () => require("./getEips"));

export { GetEksClusterCredentialArgs, GetEksClusterCredentialResult, GetEksClusterCredentialOutputArgs } from "./getEksClusterCredential";
export const getEksClusterCredential: typeof import("./getEksClusterCredential").getEksClusterCredential = null as any;
export const getEksClusterCredentialOutput: typeof import("./getEksClusterCredential").getEksClusterCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getEksClusterCredential","getEksClusterCredentialOutput"], () => require("./getEksClusterCredential"));

export { GetEksClustersArgs, GetEksClustersResult, GetEksClustersOutputArgs } from "./getEksClusters";
export const getEksClusters: typeof import("./getEksClusters").getEksClusters = null as any;
export const getEksClustersOutput: typeof import("./getEksClusters").getEksClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEksClusters","getEksClustersOutput"], () => require("./getEksClusters"));

export { GetElasticsearchDescribeIndexListArgs, GetElasticsearchDescribeIndexListResult, GetElasticsearchDescribeIndexListOutputArgs } from "./getElasticsearchDescribeIndexList";
export const getElasticsearchDescribeIndexList: typeof import("./getElasticsearchDescribeIndexList").getElasticsearchDescribeIndexList = null as any;
export const getElasticsearchDescribeIndexListOutput: typeof import("./getElasticsearchDescribeIndexList").getElasticsearchDescribeIndexListOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchDescribeIndexList","getElasticsearchDescribeIndexListOutput"], () => require("./getElasticsearchDescribeIndexList"));

export { GetElasticsearchDiagnoseArgs, GetElasticsearchDiagnoseResult, GetElasticsearchDiagnoseOutputArgs } from "./getElasticsearchDiagnose";
export const getElasticsearchDiagnose: typeof import("./getElasticsearchDiagnose").getElasticsearchDiagnose = null as any;
export const getElasticsearchDiagnoseOutput: typeof import("./getElasticsearchDiagnose").getElasticsearchDiagnoseOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchDiagnose","getElasticsearchDiagnoseOutput"], () => require("./getElasticsearchDiagnose"));

export { GetElasticsearchInstanceLogsArgs, GetElasticsearchInstanceLogsResult, GetElasticsearchInstanceLogsOutputArgs } from "./getElasticsearchInstanceLogs";
export const getElasticsearchInstanceLogs: typeof import("./getElasticsearchInstanceLogs").getElasticsearchInstanceLogs = null as any;
export const getElasticsearchInstanceLogsOutput: typeof import("./getElasticsearchInstanceLogs").getElasticsearchInstanceLogsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchInstanceLogs","getElasticsearchInstanceLogsOutput"], () => require("./getElasticsearchInstanceLogs"));

export { GetElasticsearchInstanceOperationsArgs, GetElasticsearchInstanceOperationsResult, GetElasticsearchInstanceOperationsOutputArgs } from "./getElasticsearchInstanceOperations";
export const getElasticsearchInstanceOperations: typeof import("./getElasticsearchInstanceOperations").getElasticsearchInstanceOperations = null as any;
export const getElasticsearchInstanceOperationsOutput: typeof import("./getElasticsearchInstanceOperations").getElasticsearchInstanceOperationsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchInstanceOperations","getElasticsearchInstanceOperationsOutput"], () => require("./getElasticsearchInstanceOperations"));

export { GetElasticsearchInstancePluginListArgs, GetElasticsearchInstancePluginListResult, GetElasticsearchInstancePluginListOutputArgs } from "./getElasticsearchInstancePluginList";
export const getElasticsearchInstancePluginList: typeof import("./getElasticsearchInstancePluginList").getElasticsearchInstancePluginList = null as any;
export const getElasticsearchInstancePluginListOutput: typeof import("./getElasticsearchInstancePluginList").getElasticsearchInstancePluginListOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchInstancePluginList","getElasticsearchInstancePluginListOutput"], () => require("./getElasticsearchInstancePluginList"));

export { GetElasticsearchInstancesArgs, GetElasticsearchInstancesResult, GetElasticsearchInstancesOutputArgs } from "./getElasticsearchInstances";
export const getElasticsearchInstances: typeof import("./getElasticsearchInstances").getElasticsearchInstances = null as any;
export const getElasticsearchInstancesOutput: typeof import("./getElasticsearchInstances").getElasticsearchInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchInstances","getElasticsearchInstancesOutput"], () => require("./getElasticsearchInstances"));

export { GetElasticsearchLogstashInstanceLogsArgs, GetElasticsearchLogstashInstanceLogsResult, GetElasticsearchLogstashInstanceLogsOutputArgs } from "./getElasticsearchLogstashInstanceLogs";
export const getElasticsearchLogstashInstanceLogs: typeof import("./getElasticsearchLogstashInstanceLogs").getElasticsearchLogstashInstanceLogs = null as any;
export const getElasticsearchLogstashInstanceLogsOutput: typeof import("./getElasticsearchLogstashInstanceLogs").getElasticsearchLogstashInstanceLogsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchLogstashInstanceLogs","getElasticsearchLogstashInstanceLogsOutput"], () => require("./getElasticsearchLogstashInstanceLogs"));

export { GetElasticsearchLogstashInstanceOperationsArgs, GetElasticsearchLogstashInstanceOperationsResult, GetElasticsearchLogstashInstanceOperationsOutputArgs } from "./getElasticsearchLogstashInstanceOperations";
export const getElasticsearchLogstashInstanceOperations: typeof import("./getElasticsearchLogstashInstanceOperations").getElasticsearchLogstashInstanceOperations = null as any;
export const getElasticsearchLogstashInstanceOperationsOutput: typeof import("./getElasticsearchLogstashInstanceOperations").getElasticsearchLogstashInstanceOperationsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchLogstashInstanceOperations","getElasticsearchLogstashInstanceOperationsOutput"], () => require("./getElasticsearchLogstashInstanceOperations"));

export { GetElasticsearchViewsArgs, GetElasticsearchViewsResult, GetElasticsearchViewsOutputArgs } from "./getElasticsearchViews";
export const getElasticsearchViews: typeof import("./getElasticsearchViews").getElasticsearchViews = null as any;
export const getElasticsearchViewsOutput: typeof import("./getElasticsearchViews").getElasticsearchViewsOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchViews","getElasticsearchViewsOutput"], () => require("./getElasticsearchViews"));

export { GetEmrArgs, GetEmrResult, GetEmrOutputArgs } from "./getEmr";
export const getEmr: typeof import("./getEmr").getEmr = null as any;
export const getEmrOutput: typeof import("./getEmr").getEmrOutput = null as any;
utilities.lazyLoad(exports, ["getEmr","getEmrOutput"], () => require("./getEmr"));

export { GetEmrAutoScaleRecordsArgs, GetEmrAutoScaleRecordsResult, GetEmrAutoScaleRecordsOutputArgs } from "./getEmrAutoScaleRecords";
export const getEmrAutoScaleRecords: typeof import("./getEmrAutoScaleRecords").getEmrAutoScaleRecords = null as any;
export const getEmrAutoScaleRecordsOutput: typeof import("./getEmrAutoScaleRecords").getEmrAutoScaleRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getEmrAutoScaleRecords","getEmrAutoScaleRecordsOutput"], () => require("./getEmrAutoScaleRecords"));

export { GetEmrCvmQuotaArgs, GetEmrCvmQuotaResult, GetEmrCvmQuotaOutputArgs } from "./getEmrCvmQuota";
export const getEmrCvmQuota: typeof import("./getEmrCvmQuota").getEmrCvmQuota = null as any;
export const getEmrCvmQuotaOutput: typeof import("./getEmrCvmQuota").getEmrCvmQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getEmrCvmQuota","getEmrCvmQuotaOutput"], () => require("./getEmrCvmQuota"));

export { GetEmrNodesArgs, GetEmrNodesResult, GetEmrNodesOutputArgs } from "./getEmrNodes";
export const getEmrNodes: typeof import("./getEmrNodes").getEmrNodes = null as any;
export const getEmrNodesOutput: typeof import("./getEmrNodes").getEmrNodesOutput = null as any;
utilities.lazyLoad(exports, ["getEmrNodes","getEmrNodesOutput"], () => require("./getEmrNodes"));

export { GetEnisArgs, GetEnisResult, GetEnisOutputArgs } from "./getEnis";
export const getEnis: typeof import("./getEnis").getEnis = null as any;
export const getEnisOutput: typeof import("./getEnis").getEnisOutput = null as any;
utilities.lazyLoad(exports, ["getEnis","getEnisOutput"], () => require("./getEnis"));

export { GetGaapAccessRegionsArgs, GetGaapAccessRegionsResult, GetGaapAccessRegionsOutputArgs } from "./getGaapAccessRegions";
export const getGaapAccessRegions: typeof import("./getGaapAccessRegions").getGaapAccessRegions = null as any;
export const getGaapAccessRegionsOutput: typeof import("./getGaapAccessRegions").getGaapAccessRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapAccessRegions","getGaapAccessRegionsOutput"], () => require("./getGaapAccessRegions"));

export { GetGaapAccessRegionsByDestRegionArgs, GetGaapAccessRegionsByDestRegionResult, GetGaapAccessRegionsByDestRegionOutputArgs } from "./getGaapAccessRegionsByDestRegion";
export const getGaapAccessRegionsByDestRegion: typeof import("./getGaapAccessRegionsByDestRegion").getGaapAccessRegionsByDestRegion = null as any;
export const getGaapAccessRegionsByDestRegionOutput: typeof import("./getGaapAccessRegionsByDestRegion").getGaapAccessRegionsByDestRegionOutput = null as any;
utilities.lazyLoad(exports, ["getGaapAccessRegionsByDestRegion","getGaapAccessRegionsByDestRegionOutput"], () => require("./getGaapAccessRegionsByDestRegion"));

export { GetGaapBlackHeaderArgs, GetGaapBlackHeaderResult, GetGaapBlackHeaderOutputArgs } from "./getGaapBlackHeader";
export const getGaapBlackHeader: typeof import("./getGaapBlackHeader").getGaapBlackHeader = null as any;
export const getGaapBlackHeaderOutput: typeof import("./getGaapBlackHeader").getGaapBlackHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getGaapBlackHeader","getGaapBlackHeaderOutput"], () => require("./getGaapBlackHeader"));

export { GetGaapCertificatesArgs, GetGaapCertificatesResult, GetGaapCertificatesOutputArgs } from "./getGaapCertificates";
export const getGaapCertificates: typeof import("./getGaapCertificates").getGaapCertificates = null as any;
export const getGaapCertificatesOutput: typeof import("./getGaapCertificates").getGaapCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getGaapCertificates","getGaapCertificatesOutput"], () => require("./getGaapCertificates"));

export { GetGaapCheckProxyCreateArgs, GetGaapCheckProxyCreateResult, GetGaapCheckProxyCreateOutputArgs } from "./getGaapCheckProxyCreate";
export const getGaapCheckProxyCreate: typeof import("./getGaapCheckProxyCreate").getGaapCheckProxyCreate = null as any;
export const getGaapCheckProxyCreateOutput: typeof import("./getGaapCheckProxyCreate").getGaapCheckProxyCreateOutput = null as any;
utilities.lazyLoad(exports, ["getGaapCheckProxyCreate","getGaapCheckProxyCreateOutput"], () => require("./getGaapCheckProxyCreate"));

export { GetGaapCountryAreaMappingArgs, GetGaapCountryAreaMappingResult, GetGaapCountryAreaMappingOutputArgs } from "./getGaapCountryAreaMapping";
export const getGaapCountryAreaMapping: typeof import("./getGaapCountryAreaMapping").getGaapCountryAreaMapping = null as any;
export const getGaapCountryAreaMappingOutput: typeof import("./getGaapCountryAreaMapping").getGaapCountryAreaMappingOutput = null as any;
utilities.lazyLoad(exports, ["getGaapCountryAreaMapping","getGaapCountryAreaMappingOutput"], () => require("./getGaapCountryAreaMapping"));

export { GetGaapCustomHeaderArgs, GetGaapCustomHeaderResult, GetGaapCustomHeaderOutputArgs } from "./getGaapCustomHeader";
export const getGaapCustomHeader: typeof import("./getGaapCustomHeader").getGaapCustomHeader = null as any;
export const getGaapCustomHeaderOutput: typeof import("./getGaapCustomHeader").getGaapCustomHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getGaapCustomHeader","getGaapCustomHeaderOutput"], () => require("./getGaapCustomHeader"));

export { GetGaapDestRegionsArgs, GetGaapDestRegionsResult, GetGaapDestRegionsOutputArgs } from "./getGaapDestRegions";
export const getGaapDestRegions: typeof import("./getGaapDestRegions").getGaapDestRegions = null as any;
export const getGaapDestRegionsOutput: typeof import("./getGaapDestRegions").getGaapDestRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapDestRegions","getGaapDestRegionsOutput"], () => require("./getGaapDestRegions"));

export { GetGaapDomainErrorPageInfosArgs, GetGaapDomainErrorPageInfosResult, GetGaapDomainErrorPageInfosOutputArgs } from "./getGaapDomainErrorPageInfos";
export const getGaapDomainErrorPageInfos: typeof import("./getGaapDomainErrorPageInfos").getGaapDomainErrorPageInfos = null as any;
export const getGaapDomainErrorPageInfosOutput: typeof import("./getGaapDomainErrorPageInfos").getGaapDomainErrorPageInfosOutput = null as any;
utilities.lazyLoad(exports, ["getGaapDomainErrorPageInfos","getGaapDomainErrorPageInfosOutput"], () => require("./getGaapDomainErrorPageInfos"));

export { GetGaapDomainErrorPagesArgs, GetGaapDomainErrorPagesResult, GetGaapDomainErrorPagesOutputArgs } from "./getGaapDomainErrorPages";
export const getGaapDomainErrorPages: typeof import("./getGaapDomainErrorPages").getGaapDomainErrorPages = null as any;
export const getGaapDomainErrorPagesOutput: typeof import("./getGaapDomainErrorPages").getGaapDomainErrorPagesOutput = null as any;
utilities.lazyLoad(exports, ["getGaapDomainErrorPages","getGaapDomainErrorPagesOutput"], () => require("./getGaapDomainErrorPages"));

export { GetGaapGroupAndStatisticsProxyArgs, GetGaapGroupAndStatisticsProxyResult, GetGaapGroupAndStatisticsProxyOutputArgs } from "./getGaapGroupAndStatisticsProxy";
export const getGaapGroupAndStatisticsProxy: typeof import("./getGaapGroupAndStatisticsProxy").getGaapGroupAndStatisticsProxy = null as any;
export const getGaapGroupAndStatisticsProxyOutput: typeof import("./getGaapGroupAndStatisticsProxy").getGaapGroupAndStatisticsProxyOutput = null as any;
utilities.lazyLoad(exports, ["getGaapGroupAndStatisticsProxy","getGaapGroupAndStatisticsProxyOutput"], () => require("./getGaapGroupAndStatisticsProxy"));

export { GetGaapHttpDomainsArgs, GetGaapHttpDomainsResult, GetGaapHttpDomainsOutputArgs } from "./getGaapHttpDomains";
export const getGaapHttpDomains: typeof import("./getGaapHttpDomains").getGaapHttpDomains = null as any;
export const getGaapHttpDomainsOutput: typeof import("./getGaapHttpDomains").getGaapHttpDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapHttpDomains","getGaapHttpDomainsOutput"], () => require("./getGaapHttpDomains"));

export { GetGaapHttpRulesArgs, GetGaapHttpRulesResult, GetGaapHttpRulesOutputArgs } from "./getGaapHttpRules";
export const getGaapHttpRules: typeof import("./getGaapHttpRules").getGaapHttpRules = null as any;
export const getGaapHttpRulesOutput: typeof import("./getGaapHttpRules").getGaapHttpRulesOutput = null as any;
utilities.lazyLoad(exports, ["getGaapHttpRules","getGaapHttpRulesOutput"], () => require("./getGaapHttpRules"));

export { GetGaapLayer4ListenersArgs, GetGaapLayer4ListenersResult, GetGaapLayer4ListenersOutputArgs } from "./getGaapLayer4Listeners";
export const getGaapLayer4Listeners: typeof import("./getGaapLayer4Listeners").getGaapLayer4Listeners = null as any;
export const getGaapLayer4ListenersOutput: typeof import("./getGaapLayer4Listeners").getGaapLayer4ListenersOutput = null as any;
utilities.lazyLoad(exports, ["getGaapLayer4Listeners","getGaapLayer4ListenersOutput"], () => require("./getGaapLayer4Listeners"));

export { GetGaapLayer7ListenersArgs, GetGaapLayer7ListenersResult, GetGaapLayer7ListenersOutputArgs } from "./getGaapLayer7Listeners";
export const getGaapLayer7Listeners: typeof import("./getGaapLayer7Listeners").getGaapLayer7Listeners = null as any;
export const getGaapLayer7ListenersOutput: typeof import("./getGaapLayer7Listeners").getGaapLayer7ListenersOutput = null as any;
utilities.lazyLoad(exports, ["getGaapLayer7Listeners","getGaapLayer7ListenersOutput"], () => require("./getGaapLayer7Listeners"));

export { GetGaapListenerRealServersArgs, GetGaapListenerRealServersResult, GetGaapListenerRealServersOutputArgs } from "./getGaapListenerRealServers";
export const getGaapListenerRealServers: typeof import("./getGaapListenerRealServers").getGaapListenerRealServers = null as any;
export const getGaapListenerRealServersOutput: typeof import("./getGaapListenerRealServers").getGaapListenerRealServersOutput = null as any;
utilities.lazyLoad(exports, ["getGaapListenerRealServers","getGaapListenerRealServersOutput"], () => require("./getGaapListenerRealServers"));

export { GetGaapListenerStatisticsArgs, GetGaapListenerStatisticsResult, GetGaapListenerStatisticsOutputArgs } from "./getGaapListenerStatistics";
export const getGaapListenerStatistics: typeof import("./getGaapListenerStatistics").getGaapListenerStatistics = null as any;
export const getGaapListenerStatisticsOutput: typeof import("./getGaapListenerStatistics").getGaapListenerStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapListenerStatistics","getGaapListenerStatisticsOutput"], () => require("./getGaapListenerStatistics"));

export { GetGaapProxiesArgs, GetGaapProxiesResult, GetGaapProxiesOutputArgs } from "./getGaapProxies";
export const getGaapProxies: typeof import("./getGaapProxies").getGaapProxies = null as any;
export const getGaapProxiesOutput: typeof import("./getGaapProxies").getGaapProxiesOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxies","getGaapProxiesOutput"], () => require("./getGaapProxies"));

export { GetGaapProxiesStatusArgs, GetGaapProxiesStatusResult, GetGaapProxiesStatusOutputArgs } from "./getGaapProxiesStatus";
export const getGaapProxiesStatus: typeof import("./getGaapProxiesStatus").getGaapProxiesStatus = null as any;
export const getGaapProxiesStatusOutput: typeof import("./getGaapProxiesStatus").getGaapProxiesStatusOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxiesStatus","getGaapProxiesStatusOutput"], () => require("./getGaapProxiesStatus"));

export { GetGaapProxyAndStatisticsListenersArgs, GetGaapProxyAndStatisticsListenersResult, GetGaapProxyAndStatisticsListenersOutputArgs } from "./getGaapProxyAndStatisticsListeners";
export const getGaapProxyAndStatisticsListeners: typeof import("./getGaapProxyAndStatisticsListeners").getGaapProxyAndStatisticsListeners = null as any;
export const getGaapProxyAndStatisticsListenersOutput: typeof import("./getGaapProxyAndStatisticsListeners").getGaapProxyAndStatisticsListenersOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxyAndStatisticsListeners","getGaapProxyAndStatisticsListenersOutput"], () => require("./getGaapProxyAndStatisticsListeners"));

export { GetGaapProxyDetailArgs, GetGaapProxyDetailResult, GetGaapProxyDetailOutputArgs } from "./getGaapProxyDetail";
export const getGaapProxyDetail: typeof import("./getGaapProxyDetail").getGaapProxyDetail = null as any;
export const getGaapProxyDetailOutput: typeof import("./getGaapProxyDetail").getGaapProxyDetailOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxyDetail","getGaapProxyDetailOutput"], () => require("./getGaapProxyDetail"));

export { GetGaapProxyGroupStatisticsArgs, GetGaapProxyGroupStatisticsResult, GetGaapProxyGroupStatisticsOutputArgs } from "./getGaapProxyGroupStatistics";
export const getGaapProxyGroupStatistics: typeof import("./getGaapProxyGroupStatistics").getGaapProxyGroupStatistics = null as any;
export const getGaapProxyGroupStatisticsOutput: typeof import("./getGaapProxyGroupStatistics").getGaapProxyGroupStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxyGroupStatistics","getGaapProxyGroupStatisticsOutput"], () => require("./getGaapProxyGroupStatistics"));

export { GetGaapProxyGroupsArgs, GetGaapProxyGroupsResult, GetGaapProxyGroupsOutputArgs } from "./getGaapProxyGroups";
export const getGaapProxyGroups: typeof import("./getGaapProxyGroups").getGaapProxyGroups = null as any;
export const getGaapProxyGroupsOutput: typeof import("./getGaapProxyGroups").getGaapProxyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxyGroups","getGaapProxyGroupsOutput"], () => require("./getGaapProxyGroups"));

export { GetGaapProxyStatisticsArgs, GetGaapProxyStatisticsResult, GetGaapProxyStatisticsOutputArgs } from "./getGaapProxyStatistics";
export const getGaapProxyStatistics: typeof import("./getGaapProxyStatistics").getGaapProxyStatistics = null as any;
export const getGaapProxyStatisticsOutput: typeof import("./getGaapProxyStatistics").getGaapProxyStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getGaapProxyStatistics","getGaapProxyStatisticsOutput"], () => require("./getGaapProxyStatistics"));

export { GetGaapRealServersStatusArgs, GetGaapRealServersStatusResult, GetGaapRealServersStatusOutputArgs } from "./getGaapRealServersStatus";
export const getGaapRealServersStatus: typeof import("./getGaapRealServersStatus").getGaapRealServersStatus = null as any;
export const getGaapRealServersStatusOutput: typeof import("./getGaapRealServersStatus").getGaapRealServersStatusOutput = null as any;
utilities.lazyLoad(exports, ["getGaapRealServersStatus","getGaapRealServersStatusOutput"], () => require("./getGaapRealServersStatus"));

export { GetGaapRealserversArgs, GetGaapRealserversResult, GetGaapRealserversOutputArgs } from "./getGaapRealservers";
export const getGaapRealservers: typeof import("./getGaapRealservers").getGaapRealservers = null as any;
export const getGaapRealserversOutput: typeof import("./getGaapRealservers").getGaapRealserversOutput = null as any;
utilities.lazyLoad(exports, ["getGaapRealservers","getGaapRealserversOutput"], () => require("./getGaapRealservers"));

export { GetGaapRegionAndPriceArgs, GetGaapRegionAndPriceResult, GetGaapRegionAndPriceOutputArgs } from "./getGaapRegionAndPrice";
export const getGaapRegionAndPrice: typeof import("./getGaapRegionAndPrice").getGaapRegionAndPrice = null as any;
export const getGaapRegionAndPriceOutput: typeof import("./getGaapRegionAndPrice").getGaapRegionAndPriceOutput = null as any;
utilities.lazyLoad(exports, ["getGaapRegionAndPrice","getGaapRegionAndPriceOutput"], () => require("./getGaapRegionAndPrice"));

export { GetGaapResourcesByTagArgs, GetGaapResourcesByTagResult, GetGaapResourcesByTagOutputArgs } from "./getGaapResourcesByTag";
export const getGaapResourcesByTag: typeof import("./getGaapResourcesByTag").getGaapResourcesByTag = null as any;
export const getGaapResourcesByTagOutput: typeof import("./getGaapResourcesByTag").getGaapResourcesByTagOutput = null as any;
utilities.lazyLoad(exports, ["getGaapResourcesByTag","getGaapResourcesByTagOutput"], () => require("./getGaapResourcesByTag"));

export { GetGaapRuleRealServersArgs, GetGaapRuleRealServersResult, GetGaapRuleRealServersOutputArgs } from "./getGaapRuleRealServers";
export const getGaapRuleRealServers: typeof import("./getGaapRuleRealServers").getGaapRuleRealServers = null as any;
export const getGaapRuleRealServersOutput: typeof import("./getGaapRuleRealServers").getGaapRuleRealServersOutput = null as any;
utilities.lazyLoad(exports, ["getGaapRuleRealServers","getGaapRuleRealServersOutput"], () => require("./getGaapRuleRealServers"));

export { GetGaapSecurityPoliciesArgs, GetGaapSecurityPoliciesResult, GetGaapSecurityPoliciesOutputArgs } from "./getGaapSecurityPolicies";
export const getGaapSecurityPolicies: typeof import("./getGaapSecurityPolicies").getGaapSecurityPolicies = null as any;
export const getGaapSecurityPoliciesOutput: typeof import("./getGaapSecurityPolicies").getGaapSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getGaapSecurityPolicies","getGaapSecurityPoliciesOutput"], () => require("./getGaapSecurityPolicies"));

export { GetGaapSecurityRulesArgs, GetGaapSecurityRulesResult, GetGaapSecurityRulesOutputArgs } from "./getGaapSecurityRules";
export const getGaapSecurityRules: typeof import("./getGaapSecurityRules").getGaapSecurityRules = null as any;
export const getGaapSecurityRulesOutput: typeof import("./getGaapSecurityRules").getGaapSecurityRulesOutput = null as any;
utilities.lazyLoad(exports, ["getGaapSecurityRules","getGaapSecurityRulesOutput"], () => require("./getGaapSecurityRules"));

export { GetHaVipEipAttachmentsArgs, GetHaVipEipAttachmentsResult, GetHaVipEipAttachmentsOutputArgs } from "./getHaVipEipAttachments";
export const getHaVipEipAttachments: typeof import("./getHaVipEipAttachments").getHaVipEipAttachments = null as any;
export const getHaVipEipAttachmentsOutput: typeof import("./getHaVipEipAttachments").getHaVipEipAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getHaVipEipAttachments","getHaVipEipAttachmentsOutput"], () => require("./getHaVipEipAttachments"));

export { GetHaVipsArgs, GetHaVipsResult, GetHaVipsOutputArgs } from "./getHaVips";
export const getHaVips: typeof import("./getHaVips").getHaVips = null as any;
export const getHaVipsOutput: typeof import("./getHaVips").getHaVipsOutput = null as any;
utilities.lazyLoad(exports, ["getHaVips","getHaVipsOutput"], () => require("./getHaVips"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetInstanceTypesArgs, GetInstanceTypesResult, GetInstanceTypesOutputArgs } from "./getInstanceTypes";
export const getInstanceTypes: typeof import("./getInstanceTypes").getInstanceTypes = null as any;
export const getInstanceTypesOutput: typeof import("./getInstanceTypes").getInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypes","getInstanceTypesOutput"], () => require("./getInstanceTypes"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetInstancesSetArgs, GetInstancesSetResult, GetInstancesSetOutputArgs } from "./getInstancesSet";
export const getInstancesSet: typeof import("./getInstancesSet").getInstancesSet = null as any;
export const getInstancesSetOutput: typeof import("./getInstancesSet").getInstancesSetOutput = null as any;
utilities.lazyLoad(exports, ["getInstancesSet","getInstancesSetOutput"], () => require("./getInstancesSet"));

export { GetKeyPairsArgs, GetKeyPairsResult, GetKeyPairsOutputArgs } from "./getKeyPairs";
export const getKeyPairs: typeof import("./getKeyPairs").getKeyPairs = null as any;
export const getKeyPairsOutput: typeof import("./getKeyPairs").getKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairs","getKeyPairsOutput"], () => require("./getKeyPairs"));

export { GetKmsDescribeKeysArgs, GetKmsDescribeKeysResult, GetKmsDescribeKeysOutputArgs } from "./getKmsDescribeKeys";
export const getKmsDescribeKeys: typeof import("./getKmsDescribeKeys").getKmsDescribeKeys = null as any;
export const getKmsDescribeKeysOutput: typeof import("./getKmsDescribeKeys").getKmsDescribeKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsDescribeKeys","getKmsDescribeKeysOutput"], () => require("./getKmsDescribeKeys"));

export { GetKmsGetParametersForImportArgs, GetKmsGetParametersForImportResult, GetKmsGetParametersForImportOutputArgs } from "./getKmsGetParametersForImport";
export const getKmsGetParametersForImport: typeof import("./getKmsGetParametersForImport").getKmsGetParametersForImport = null as any;
export const getKmsGetParametersForImportOutput: typeof import("./getKmsGetParametersForImport").getKmsGetParametersForImportOutput = null as any;
utilities.lazyLoad(exports, ["getKmsGetParametersForImport","getKmsGetParametersForImportOutput"], () => require("./getKmsGetParametersForImport"));

export { GetKmsKeysArgs, GetKmsKeysResult, GetKmsKeysOutputArgs } from "./getKmsKeys";
export const getKmsKeys: typeof import("./getKmsKeys").getKmsKeys = null as any;
export const getKmsKeysOutput: typeof import("./getKmsKeys").getKmsKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeys","getKmsKeysOutput"], () => require("./getKmsKeys"));

export { GetKmsListAlgorithmsArgs, GetKmsListAlgorithmsResult, GetKmsListAlgorithmsOutputArgs } from "./getKmsListAlgorithms";
export const getKmsListAlgorithms: typeof import("./getKmsListAlgorithms").getKmsListAlgorithms = null as any;
export const getKmsListAlgorithmsOutput: typeof import("./getKmsListAlgorithms").getKmsListAlgorithmsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsListAlgorithms","getKmsListAlgorithmsOutput"], () => require("./getKmsListAlgorithms"));

export { GetKmsListKeysArgs, GetKmsListKeysResult, GetKmsListKeysOutputArgs } from "./getKmsListKeys";
export const getKmsListKeys: typeof import("./getKmsListKeys").getKmsListKeys = null as any;
export const getKmsListKeysOutput: typeof import("./getKmsListKeys").getKmsListKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsListKeys","getKmsListKeysOutput"], () => require("./getKmsListKeys"));

export { GetKmsPublicKeyArgs, GetKmsPublicKeyResult, GetKmsPublicKeyOutputArgs } from "./getKmsPublicKey";
export const getKmsPublicKey: typeof import("./getKmsPublicKey").getKmsPublicKey = null as any;
export const getKmsPublicKeyOutput: typeof import("./getKmsPublicKey").getKmsPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsPublicKey","getKmsPublicKeyOutput"], () => require("./getKmsPublicKey"));

export { GetKmsWhiteBoxDecryptKeyArgs, GetKmsWhiteBoxDecryptKeyResult, GetKmsWhiteBoxDecryptKeyOutputArgs } from "./getKmsWhiteBoxDecryptKey";
export const getKmsWhiteBoxDecryptKey: typeof import("./getKmsWhiteBoxDecryptKey").getKmsWhiteBoxDecryptKey = null as any;
export const getKmsWhiteBoxDecryptKeyOutput: typeof import("./getKmsWhiteBoxDecryptKey").getKmsWhiteBoxDecryptKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsWhiteBoxDecryptKey","getKmsWhiteBoxDecryptKeyOutput"], () => require("./getKmsWhiteBoxDecryptKey"));

export { GetKmsWhiteBoxDeviceFingerprintsArgs, GetKmsWhiteBoxDeviceFingerprintsResult, GetKmsWhiteBoxDeviceFingerprintsOutputArgs } from "./getKmsWhiteBoxDeviceFingerprints";
export const getKmsWhiteBoxDeviceFingerprints: typeof import("./getKmsWhiteBoxDeviceFingerprints").getKmsWhiteBoxDeviceFingerprints = null as any;
export const getKmsWhiteBoxDeviceFingerprintsOutput: typeof import("./getKmsWhiteBoxDeviceFingerprints").getKmsWhiteBoxDeviceFingerprintsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsWhiteBoxDeviceFingerprints","getKmsWhiteBoxDeviceFingerprintsOutput"], () => require("./getKmsWhiteBoxDeviceFingerprints"));

export { GetKmsWhiteBoxKeyDetailsArgs, GetKmsWhiteBoxKeyDetailsResult, GetKmsWhiteBoxKeyDetailsOutputArgs } from "./getKmsWhiteBoxKeyDetails";
export const getKmsWhiteBoxKeyDetails: typeof import("./getKmsWhiteBoxKeyDetails").getKmsWhiteBoxKeyDetails = null as any;
export const getKmsWhiteBoxKeyDetailsOutput: typeof import("./getKmsWhiteBoxKeyDetails").getKmsWhiteBoxKeyDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsWhiteBoxKeyDetails","getKmsWhiteBoxKeyDetailsOutput"], () => require("./getKmsWhiteBoxKeyDetails"));

export { GetKubernetesAvailableClusterVersionsArgs, GetKubernetesAvailableClusterVersionsResult, GetKubernetesAvailableClusterVersionsOutputArgs } from "./getKubernetesAvailableClusterVersions";
export const getKubernetesAvailableClusterVersions: typeof import("./getKubernetesAvailableClusterVersions").getKubernetesAvailableClusterVersions = null as any;
export const getKubernetesAvailableClusterVersionsOutput: typeof import("./getKubernetesAvailableClusterVersions").getKubernetesAvailableClusterVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAvailableClusterVersions","getKubernetesAvailableClusterVersionsOutput"], () => require("./getKubernetesAvailableClusterVersions"));

export { GetKubernetesChartsArgs, GetKubernetesChartsResult, GetKubernetesChartsOutputArgs } from "./getKubernetesCharts";
export const getKubernetesCharts: typeof import("./getKubernetesCharts").getKubernetesCharts = null as any;
export const getKubernetesChartsOutput: typeof import("./getKubernetesCharts").getKubernetesChartsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCharts","getKubernetesChartsOutput"], () => require("./getKubernetesCharts"));

export { GetKubernetesClusterAuthenticationOptionsArgs, GetKubernetesClusterAuthenticationOptionsResult, GetKubernetesClusterAuthenticationOptionsOutputArgs } from "./getKubernetesClusterAuthenticationOptions";
export const getKubernetesClusterAuthenticationOptions: typeof import("./getKubernetesClusterAuthenticationOptions").getKubernetesClusterAuthenticationOptions = null as any;
export const getKubernetesClusterAuthenticationOptionsOutput: typeof import("./getKubernetesClusterAuthenticationOptions").getKubernetesClusterAuthenticationOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterAuthenticationOptions","getKubernetesClusterAuthenticationOptionsOutput"], () => require("./getKubernetesClusterAuthenticationOptions"));

export { GetKubernetesClusterCommonNamesArgs, GetKubernetesClusterCommonNamesResult, GetKubernetesClusterCommonNamesOutputArgs } from "./getKubernetesClusterCommonNames";
export const getKubernetesClusterCommonNames: typeof import("./getKubernetesClusterCommonNames").getKubernetesClusterCommonNames = null as any;
export const getKubernetesClusterCommonNamesOutput: typeof import("./getKubernetesClusterCommonNames").getKubernetesClusterCommonNamesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterCommonNames","getKubernetesClusterCommonNamesOutput"], () => require("./getKubernetesClusterCommonNames"));

export { GetKubernetesClusterInstancesArgs, GetKubernetesClusterInstancesResult, GetKubernetesClusterInstancesOutputArgs } from "./getKubernetesClusterInstances";
export const getKubernetesClusterInstances: typeof import("./getKubernetesClusterInstances").getKubernetesClusterInstances = null as any;
export const getKubernetesClusterInstancesOutput: typeof import("./getKubernetesClusterInstances").getKubernetesClusterInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterInstances","getKubernetesClusterInstancesOutput"], () => require("./getKubernetesClusterInstances"));

export { GetKubernetesClusterLevelsArgs, GetKubernetesClusterLevelsResult, GetKubernetesClusterLevelsOutputArgs } from "./getKubernetesClusterLevels";
export const getKubernetesClusterLevels: typeof import("./getKubernetesClusterLevels").getKubernetesClusterLevels = null as any;
export const getKubernetesClusterLevelsOutput: typeof import("./getKubernetesClusterLevels").getKubernetesClusterLevelsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterLevels","getKubernetesClusterLevelsOutput"], () => require("./getKubernetesClusterLevels"));

export { GetKubernetesClusterNativeNodePoolsArgs, GetKubernetesClusterNativeNodePoolsResult, GetKubernetesClusterNativeNodePoolsOutputArgs } from "./getKubernetesClusterNativeNodePools";
export const getKubernetesClusterNativeNodePools: typeof import("./getKubernetesClusterNativeNodePools").getKubernetesClusterNativeNodePools = null as any;
export const getKubernetesClusterNativeNodePoolsOutput: typeof import("./getKubernetesClusterNativeNodePools").getKubernetesClusterNativeNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterNativeNodePools","getKubernetesClusterNativeNodePoolsOutput"], () => require("./getKubernetesClusterNativeNodePools"));

export { GetKubernetesClusterNodePoolsArgs, GetKubernetesClusterNodePoolsResult, GetKubernetesClusterNodePoolsOutputArgs } from "./getKubernetesClusterNodePools";
export const getKubernetesClusterNodePools: typeof import("./getKubernetesClusterNodePools").getKubernetesClusterNodePools = null as any;
export const getKubernetesClusterNodePoolsOutput: typeof import("./getKubernetesClusterNodePools").getKubernetesClusterNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterNodePools","getKubernetesClusterNodePoolsOutput"], () => require("./getKubernetesClusterNodePools"));

export { GetKubernetesClustersArgs, GetKubernetesClustersResult, GetKubernetesClustersOutputArgs } from "./getKubernetesClusters";
export const getKubernetesClusters: typeof import("./getKubernetesClusters").getKubernetesClusters = null as any;
export const getKubernetesClustersOutput: typeof import("./getKubernetesClusters").getKubernetesClustersOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusters","getKubernetesClustersOutput"], () => require("./getKubernetesClusters"));

export { GetLighthouseAllSceneArgs, GetLighthouseAllSceneResult, GetLighthouseAllSceneOutputArgs } from "./getLighthouseAllScene";
export const getLighthouseAllScene: typeof import("./getLighthouseAllScene").getLighthouseAllScene = null as any;
export const getLighthouseAllSceneOutput: typeof import("./getLighthouseAllScene").getLighthouseAllSceneOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseAllScene","getLighthouseAllSceneOutput"], () => require("./getLighthouseAllScene"));

export { GetLighthouseBundleArgs, GetLighthouseBundleResult, GetLighthouseBundleOutputArgs } from "./getLighthouseBundle";
export const getLighthouseBundle: typeof import("./getLighthouseBundle").getLighthouseBundle = null as any;
export const getLighthouseBundleOutput: typeof import("./getLighthouseBundle").getLighthouseBundleOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseBundle","getLighthouseBundleOutput"], () => require("./getLighthouseBundle"));

export { GetLighthouseDiskConfigArgs, GetLighthouseDiskConfigResult, GetLighthouseDiskConfigOutputArgs } from "./getLighthouseDiskConfig";
export const getLighthouseDiskConfig: typeof import("./getLighthouseDiskConfig").getLighthouseDiskConfig = null as any;
export const getLighthouseDiskConfigOutput: typeof import("./getLighthouseDiskConfig").getLighthouseDiskConfigOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseDiskConfig","getLighthouseDiskConfigOutput"], () => require("./getLighthouseDiskConfig"));

export { GetLighthouseDisksArgs, GetLighthouseDisksResult, GetLighthouseDisksOutputArgs } from "./getLighthouseDisks";
export const getLighthouseDisks: typeof import("./getLighthouseDisks").getLighthouseDisks = null as any;
export const getLighthouseDisksOutput: typeof import("./getLighthouseDisks").getLighthouseDisksOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseDisks","getLighthouseDisksOutput"], () => require("./getLighthouseDisks"));

export { GetLighthouseFirewallRulesTemplateArgs, GetLighthouseFirewallRulesTemplateResult, GetLighthouseFirewallRulesTemplateOutputArgs } from "./getLighthouseFirewallRulesTemplate";
export const getLighthouseFirewallRulesTemplate: typeof import("./getLighthouseFirewallRulesTemplate").getLighthouseFirewallRulesTemplate = null as any;
export const getLighthouseFirewallRulesTemplateOutput: typeof import("./getLighthouseFirewallRulesTemplate").getLighthouseFirewallRulesTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseFirewallRulesTemplate","getLighthouseFirewallRulesTemplateOutput"], () => require("./getLighthouseFirewallRulesTemplate"));

export { GetLighthouseInstanceBlueprintArgs, GetLighthouseInstanceBlueprintResult, GetLighthouseInstanceBlueprintOutputArgs } from "./getLighthouseInstanceBlueprint";
export const getLighthouseInstanceBlueprint: typeof import("./getLighthouseInstanceBlueprint").getLighthouseInstanceBlueprint = null as any;
export const getLighthouseInstanceBlueprintOutput: typeof import("./getLighthouseInstanceBlueprint").getLighthouseInstanceBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseInstanceBlueprint","getLighthouseInstanceBlueprintOutput"], () => require("./getLighthouseInstanceBlueprint"));

export { GetLighthouseInstanceDiskNumArgs, GetLighthouseInstanceDiskNumResult, GetLighthouseInstanceDiskNumOutputArgs } from "./getLighthouseInstanceDiskNum";
export const getLighthouseInstanceDiskNum: typeof import("./getLighthouseInstanceDiskNum").getLighthouseInstanceDiskNum = null as any;
export const getLighthouseInstanceDiskNumOutput: typeof import("./getLighthouseInstanceDiskNum").getLighthouseInstanceDiskNumOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseInstanceDiskNum","getLighthouseInstanceDiskNumOutput"], () => require("./getLighthouseInstanceDiskNum"));

export { GetLighthouseInstanceTrafficPackageArgs, GetLighthouseInstanceTrafficPackageResult, GetLighthouseInstanceTrafficPackageOutputArgs } from "./getLighthouseInstanceTrafficPackage";
export const getLighthouseInstanceTrafficPackage: typeof import("./getLighthouseInstanceTrafficPackage").getLighthouseInstanceTrafficPackage = null as any;
export const getLighthouseInstanceTrafficPackageOutput: typeof import("./getLighthouseInstanceTrafficPackage").getLighthouseInstanceTrafficPackageOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseInstanceTrafficPackage","getLighthouseInstanceTrafficPackageOutput"], () => require("./getLighthouseInstanceTrafficPackage"));

export { GetLighthouseInstanceVncUrlArgs, GetLighthouseInstanceVncUrlResult, GetLighthouseInstanceVncUrlOutputArgs } from "./getLighthouseInstanceVncUrl";
export const getLighthouseInstanceVncUrl: typeof import("./getLighthouseInstanceVncUrl").getLighthouseInstanceVncUrl = null as any;
export const getLighthouseInstanceVncUrlOutput: typeof import("./getLighthouseInstanceVncUrl").getLighthouseInstanceVncUrlOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseInstanceVncUrl","getLighthouseInstanceVncUrlOutput"], () => require("./getLighthouseInstanceVncUrl"));

export { GetLighthouseModifyInstanceBundleArgs, GetLighthouseModifyInstanceBundleResult, GetLighthouseModifyInstanceBundleOutputArgs } from "./getLighthouseModifyInstanceBundle";
export const getLighthouseModifyInstanceBundle: typeof import("./getLighthouseModifyInstanceBundle").getLighthouseModifyInstanceBundle = null as any;
export const getLighthouseModifyInstanceBundleOutput: typeof import("./getLighthouseModifyInstanceBundle").getLighthouseModifyInstanceBundleOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseModifyInstanceBundle","getLighthouseModifyInstanceBundleOutput"], () => require("./getLighthouseModifyInstanceBundle"));

export { GetLighthouseRegionArgs, GetLighthouseRegionResult, GetLighthouseRegionOutputArgs } from "./getLighthouseRegion";
export const getLighthouseRegion: typeof import("./getLighthouseRegion").getLighthouseRegion = null as any;
export const getLighthouseRegionOutput: typeof import("./getLighthouseRegion").getLighthouseRegionOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseRegion","getLighthouseRegionOutput"], () => require("./getLighthouseRegion"));

export { GetLighthouseResetInstanceBlueprintArgs, GetLighthouseResetInstanceBlueprintResult, GetLighthouseResetInstanceBlueprintOutputArgs } from "./getLighthouseResetInstanceBlueprint";
export const getLighthouseResetInstanceBlueprint: typeof import("./getLighthouseResetInstanceBlueprint").getLighthouseResetInstanceBlueprint = null as any;
export const getLighthouseResetInstanceBlueprintOutput: typeof import("./getLighthouseResetInstanceBlueprint").getLighthouseResetInstanceBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseResetInstanceBlueprint","getLighthouseResetInstanceBlueprintOutput"], () => require("./getLighthouseResetInstanceBlueprint"));

export { GetLighthouseSceneArgs, GetLighthouseSceneResult, GetLighthouseSceneOutputArgs } from "./getLighthouseScene";
export const getLighthouseScene: typeof import("./getLighthouseScene").getLighthouseScene = null as any;
export const getLighthouseSceneOutput: typeof import("./getLighthouseScene").getLighthouseSceneOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseScene","getLighthouseSceneOutput"], () => require("./getLighthouseScene"));

export { GetLighthouseZoneArgs, GetLighthouseZoneResult, GetLighthouseZoneOutputArgs } from "./getLighthouseZone";
export const getLighthouseZone: typeof import("./getLighthouseZone").getLighthouseZone = null as any;
export const getLighthouseZoneOutput: typeof import("./getLighthouseZone").getLighthouseZoneOutput = null as any;
utilities.lazyLoad(exports, ["getLighthouseZone","getLighthouseZoneOutput"], () => require("./getLighthouseZone"));

export { GetMariadbAccountsArgs, GetMariadbAccountsResult, GetMariadbAccountsOutputArgs } from "./getMariadbAccounts";
export const getMariadbAccounts: typeof import("./getMariadbAccounts").getMariadbAccounts = null as any;
export const getMariadbAccountsOutput: typeof import("./getMariadbAccounts").getMariadbAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbAccounts","getMariadbAccountsOutput"], () => require("./getMariadbAccounts"));

export { GetMariadbDatabaseObjectsArgs, GetMariadbDatabaseObjectsResult, GetMariadbDatabaseObjectsOutputArgs } from "./getMariadbDatabaseObjects";
export const getMariadbDatabaseObjects: typeof import("./getMariadbDatabaseObjects").getMariadbDatabaseObjects = null as any;
export const getMariadbDatabaseObjectsOutput: typeof import("./getMariadbDatabaseObjects").getMariadbDatabaseObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbDatabaseObjects","getMariadbDatabaseObjectsOutput"], () => require("./getMariadbDatabaseObjects"));

export { GetMariadbDatabaseTableArgs, GetMariadbDatabaseTableResult, GetMariadbDatabaseTableOutputArgs } from "./getMariadbDatabaseTable";
export const getMariadbDatabaseTable: typeof import("./getMariadbDatabaseTable").getMariadbDatabaseTable = null as any;
export const getMariadbDatabaseTableOutput: typeof import("./getMariadbDatabaseTable").getMariadbDatabaseTableOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbDatabaseTable","getMariadbDatabaseTableOutput"], () => require("./getMariadbDatabaseTable"));

export { GetMariadbDatabasesArgs, GetMariadbDatabasesResult, GetMariadbDatabasesOutputArgs } from "./getMariadbDatabases";
export const getMariadbDatabases: typeof import("./getMariadbDatabases").getMariadbDatabases = null as any;
export const getMariadbDatabasesOutput: typeof import("./getMariadbDatabases").getMariadbDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbDatabases","getMariadbDatabasesOutput"], () => require("./getMariadbDatabases"));

export { GetMariadbDbInstancesArgs, GetMariadbDbInstancesResult, GetMariadbDbInstancesOutputArgs } from "./getMariadbDbInstances";
export const getMariadbDbInstances: typeof import("./getMariadbDbInstances").getMariadbDbInstances = null as any;
export const getMariadbDbInstancesOutput: typeof import("./getMariadbDbInstances").getMariadbDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbDbInstances","getMariadbDbInstancesOutput"], () => require("./getMariadbDbInstances"));

export { GetMariadbDcnDetailArgs, GetMariadbDcnDetailResult, GetMariadbDcnDetailOutputArgs } from "./getMariadbDcnDetail";
export const getMariadbDcnDetail: typeof import("./getMariadbDcnDetail").getMariadbDcnDetail = null as any;
export const getMariadbDcnDetailOutput: typeof import("./getMariadbDcnDetail").getMariadbDcnDetailOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbDcnDetail","getMariadbDcnDetailOutput"], () => require("./getMariadbDcnDetail"));

export { GetMariadbFileDownloadUrlArgs, GetMariadbFileDownloadUrlResult, GetMariadbFileDownloadUrlOutputArgs } from "./getMariadbFileDownloadUrl";
export const getMariadbFileDownloadUrl: typeof import("./getMariadbFileDownloadUrl").getMariadbFileDownloadUrl = null as any;
export const getMariadbFileDownloadUrlOutput: typeof import("./getMariadbFileDownloadUrl").getMariadbFileDownloadUrlOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbFileDownloadUrl","getMariadbFileDownloadUrlOutput"], () => require("./getMariadbFileDownloadUrl"));

export { GetMariadbFlowArgs, GetMariadbFlowResult, GetMariadbFlowOutputArgs } from "./getMariadbFlow";
export const getMariadbFlow: typeof import("./getMariadbFlow").getMariadbFlow = null as any;
export const getMariadbFlowOutput: typeof import("./getMariadbFlow").getMariadbFlowOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbFlow","getMariadbFlowOutput"], () => require("./getMariadbFlow"));

export { GetMariadbInstanceNodeInfoArgs, GetMariadbInstanceNodeInfoResult, GetMariadbInstanceNodeInfoOutputArgs } from "./getMariadbInstanceNodeInfo";
export const getMariadbInstanceNodeInfo: typeof import("./getMariadbInstanceNodeInfo").getMariadbInstanceNodeInfo = null as any;
export const getMariadbInstanceNodeInfoOutput: typeof import("./getMariadbInstanceNodeInfo").getMariadbInstanceNodeInfoOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbInstanceNodeInfo","getMariadbInstanceNodeInfoOutput"], () => require("./getMariadbInstanceNodeInfo"));

export { GetMariadbInstanceSpecsArgs, GetMariadbInstanceSpecsResult, GetMariadbInstanceSpecsOutputArgs } from "./getMariadbInstanceSpecs";
export const getMariadbInstanceSpecs: typeof import("./getMariadbInstanceSpecs").getMariadbInstanceSpecs = null as any;
export const getMariadbInstanceSpecsOutput: typeof import("./getMariadbInstanceSpecs").getMariadbInstanceSpecsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbInstanceSpecs","getMariadbInstanceSpecsOutput"], () => require("./getMariadbInstanceSpecs"));

export { GetMariadbLogFilesArgs, GetMariadbLogFilesResult, GetMariadbLogFilesOutputArgs } from "./getMariadbLogFiles";
export const getMariadbLogFiles: typeof import("./getMariadbLogFiles").getMariadbLogFiles = null as any;
export const getMariadbLogFilesOutput: typeof import("./getMariadbLogFiles").getMariadbLogFilesOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbLogFiles","getMariadbLogFilesOutput"], () => require("./getMariadbLogFiles"));

export { GetMariadbOrdersArgs, GetMariadbOrdersResult, GetMariadbOrdersOutputArgs } from "./getMariadbOrders";
export const getMariadbOrders: typeof import("./getMariadbOrders").getMariadbOrders = null as any;
export const getMariadbOrdersOutput: typeof import("./getMariadbOrders").getMariadbOrdersOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbOrders","getMariadbOrdersOutput"], () => require("./getMariadbOrders"));

export { GetMariadbPriceArgs, GetMariadbPriceResult, GetMariadbPriceOutputArgs } from "./getMariadbPrice";
export const getMariadbPrice: typeof import("./getMariadbPrice").getMariadbPrice = null as any;
export const getMariadbPriceOutput: typeof import("./getMariadbPrice").getMariadbPriceOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbPrice","getMariadbPriceOutput"], () => require("./getMariadbPrice"));

export { GetMariadbProjectSecurityGroupsArgs, GetMariadbProjectSecurityGroupsResult, GetMariadbProjectSecurityGroupsOutputArgs } from "./getMariadbProjectSecurityGroups";
export const getMariadbProjectSecurityGroups: typeof import("./getMariadbProjectSecurityGroups").getMariadbProjectSecurityGroups = null as any;
export const getMariadbProjectSecurityGroupsOutput: typeof import("./getMariadbProjectSecurityGroups").getMariadbProjectSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbProjectSecurityGroups","getMariadbProjectSecurityGroupsOutput"], () => require("./getMariadbProjectSecurityGroups"));

export { GetMariadbRenewalPriceArgs, GetMariadbRenewalPriceResult, GetMariadbRenewalPriceOutputArgs } from "./getMariadbRenewalPrice";
export const getMariadbRenewalPrice: typeof import("./getMariadbRenewalPrice").getMariadbRenewalPrice = null as any;
export const getMariadbRenewalPriceOutput: typeof import("./getMariadbRenewalPrice").getMariadbRenewalPriceOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbRenewalPrice","getMariadbRenewalPriceOutput"], () => require("./getMariadbRenewalPrice"));

export { GetMariadbSaleInfoArgs, GetMariadbSaleInfoResult, GetMariadbSaleInfoOutputArgs } from "./getMariadbSaleInfo";
export const getMariadbSaleInfo: typeof import("./getMariadbSaleInfo").getMariadbSaleInfo = null as any;
export const getMariadbSaleInfoOutput: typeof import("./getMariadbSaleInfo").getMariadbSaleInfoOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbSaleInfo","getMariadbSaleInfoOutput"], () => require("./getMariadbSaleInfo"));

export { GetMariadbSecurityGroupsArgs, GetMariadbSecurityGroupsResult, GetMariadbSecurityGroupsOutputArgs } from "./getMariadbSecurityGroups";
export const getMariadbSecurityGroups: typeof import("./getMariadbSecurityGroups").getMariadbSecurityGroups = null as any;
export const getMariadbSecurityGroupsOutput: typeof import("./getMariadbSecurityGroups").getMariadbSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbSecurityGroups","getMariadbSecurityGroupsOutput"], () => require("./getMariadbSecurityGroups"));

export { GetMariadbSlowLogsArgs, GetMariadbSlowLogsResult, GetMariadbSlowLogsOutputArgs } from "./getMariadbSlowLogs";
export const getMariadbSlowLogs: typeof import("./getMariadbSlowLogs").getMariadbSlowLogs = null as any;
export const getMariadbSlowLogsOutput: typeof import("./getMariadbSlowLogs").getMariadbSlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbSlowLogs","getMariadbSlowLogsOutput"], () => require("./getMariadbSlowLogs"));

export { GetMariadbUpgradePriceArgs, GetMariadbUpgradePriceResult, GetMariadbUpgradePriceOutputArgs } from "./getMariadbUpgradePrice";
export const getMariadbUpgradePrice: typeof import("./getMariadbUpgradePrice").getMariadbUpgradePrice = null as any;
export const getMariadbUpgradePriceOutput: typeof import("./getMariadbUpgradePrice").getMariadbUpgradePriceOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbUpgradePrice","getMariadbUpgradePriceOutput"], () => require("./getMariadbUpgradePrice"));

export { GetMongodbInstanceBackupsArgs, GetMongodbInstanceBackupsResult, GetMongodbInstanceBackupsOutputArgs } from "./getMongodbInstanceBackups";
export const getMongodbInstanceBackups: typeof import("./getMongodbInstanceBackups").getMongodbInstanceBackups = null as any;
export const getMongodbInstanceBackupsOutput: typeof import("./getMongodbInstanceBackups").getMongodbInstanceBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstanceBackups","getMongodbInstanceBackupsOutput"], () => require("./getMongodbInstanceBackups"));

export { GetMongodbInstanceConnectionsArgs, GetMongodbInstanceConnectionsResult, GetMongodbInstanceConnectionsOutputArgs } from "./getMongodbInstanceConnections";
export const getMongodbInstanceConnections: typeof import("./getMongodbInstanceConnections").getMongodbInstanceConnections = null as any;
export const getMongodbInstanceConnectionsOutput: typeof import("./getMongodbInstanceConnections").getMongodbInstanceConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstanceConnections","getMongodbInstanceConnectionsOutput"], () => require("./getMongodbInstanceConnections"));

export { GetMongodbInstanceCurrentOpArgs, GetMongodbInstanceCurrentOpResult, GetMongodbInstanceCurrentOpOutputArgs } from "./getMongodbInstanceCurrentOp";
export const getMongodbInstanceCurrentOp: typeof import("./getMongodbInstanceCurrentOp").getMongodbInstanceCurrentOp = null as any;
export const getMongodbInstanceCurrentOpOutput: typeof import("./getMongodbInstanceCurrentOp").getMongodbInstanceCurrentOpOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstanceCurrentOp","getMongodbInstanceCurrentOpOutput"], () => require("./getMongodbInstanceCurrentOp"));

export { GetMongodbInstanceParamsArgs, GetMongodbInstanceParamsResult, GetMongodbInstanceParamsOutputArgs } from "./getMongodbInstanceParams";
export const getMongodbInstanceParams: typeof import("./getMongodbInstanceParams").getMongodbInstanceParams = null as any;
export const getMongodbInstanceParamsOutput: typeof import("./getMongodbInstanceParams").getMongodbInstanceParamsOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstanceParams","getMongodbInstanceParamsOutput"], () => require("./getMongodbInstanceParams"));

export { GetMongodbInstanceSlowLogArgs, GetMongodbInstanceSlowLogResult, GetMongodbInstanceSlowLogOutputArgs } from "./getMongodbInstanceSlowLog";
export const getMongodbInstanceSlowLog: typeof import("./getMongodbInstanceSlowLog").getMongodbInstanceSlowLog = null as any;
export const getMongodbInstanceSlowLogOutput: typeof import("./getMongodbInstanceSlowLog").getMongodbInstanceSlowLogOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstanceSlowLog","getMongodbInstanceSlowLogOutput"], () => require("./getMongodbInstanceSlowLog"));

export { GetMongodbInstancesArgs, GetMongodbInstancesResult, GetMongodbInstancesOutputArgs } from "./getMongodbInstances";
export const getMongodbInstances: typeof import("./getMongodbInstances").getMongodbInstances = null as any;
export const getMongodbInstancesOutput: typeof import("./getMongodbInstances").getMongodbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstances","getMongodbInstancesOutput"], () => require("./getMongodbInstances"));

export { GetMongodbZoneConfigArgs, GetMongodbZoneConfigResult, GetMongodbZoneConfigOutputArgs } from "./getMongodbZoneConfig";
export const getMongodbZoneConfig: typeof import("./getMongodbZoneConfig").getMongodbZoneConfig = null as any;
export const getMongodbZoneConfigOutput: typeof import("./getMongodbZoneConfig").getMongodbZoneConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbZoneConfig","getMongodbZoneConfigOutput"], () => require("./getMongodbZoneConfig"));

export { GetMonitorAlarmAllNamespacesArgs, GetMonitorAlarmAllNamespacesResult, GetMonitorAlarmAllNamespacesOutputArgs } from "./getMonitorAlarmAllNamespaces";
export const getMonitorAlarmAllNamespaces: typeof import("./getMonitorAlarmAllNamespaces").getMonitorAlarmAllNamespaces = null as any;
export const getMonitorAlarmAllNamespacesOutput: typeof import("./getMonitorAlarmAllNamespaces").getMonitorAlarmAllNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmAllNamespaces","getMonitorAlarmAllNamespacesOutput"], () => require("./getMonitorAlarmAllNamespaces"));

export { GetMonitorAlarmBasicAlarmsArgs, GetMonitorAlarmBasicAlarmsResult, GetMonitorAlarmBasicAlarmsOutputArgs } from "./getMonitorAlarmBasicAlarms";
export const getMonitorAlarmBasicAlarms: typeof import("./getMonitorAlarmBasicAlarms").getMonitorAlarmBasicAlarms = null as any;
export const getMonitorAlarmBasicAlarmsOutput: typeof import("./getMonitorAlarmBasicAlarms").getMonitorAlarmBasicAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmBasicAlarms","getMonitorAlarmBasicAlarmsOutput"], () => require("./getMonitorAlarmBasicAlarms"));

export { GetMonitorAlarmBasicMetricArgs, GetMonitorAlarmBasicMetricResult, GetMonitorAlarmBasicMetricOutputArgs } from "./getMonitorAlarmBasicMetric";
export const getMonitorAlarmBasicMetric: typeof import("./getMonitorAlarmBasicMetric").getMonitorAlarmBasicMetric = null as any;
export const getMonitorAlarmBasicMetricOutput: typeof import("./getMonitorAlarmBasicMetric").getMonitorAlarmBasicMetricOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmBasicMetric","getMonitorAlarmBasicMetricOutput"], () => require("./getMonitorAlarmBasicMetric"));

export { GetMonitorAlarmConditionsTemplateArgs, GetMonitorAlarmConditionsTemplateResult, GetMonitorAlarmConditionsTemplateOutputArgs } from "./getMonitorAlarmConditionsTemplate";
export const getMonitorAlarmConditionsTemplate: typeof import("./getMonitorAlarmConditionsTemplate").getMonitorAlarmConditionsTemplate = null as any;
export const getMonitorAlarmConditionsTemplateOutput: typeof import("./getMonitorAlarmConditionsTemplate").getMonitorAlarmConditionsTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmConditionsTemplate","getMonitorAlarmConditionsTemplateOutput"], () => require("./getMonitorAlarmConditionsTemplate"));

export { GetMonitorAlarmHistoryArgs, GetMonitorAlarmHistoryResult, GetMonitorAlarmHistoryOutputArgs } from "./getMonitorAlarmHistory";
export const getMonitorAlarmHistory: typeof import("./getMonitorAlarmHistory").getMonitorAlarmHistory = null as any;
export const getMonitorAlarmHistoryOutput: typeof import("./getMonitorAlarmHistory").getMonitorAlarmHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmHistory","getMonitorAlarmHistoryOutput"], () => require("./getMonitorAlarmHistory"));

export { GetMonitorAlarmMetricArgs, GetMonitorAlarmMetricResult, GetMonitorAlarmMetricOutputArgs } from "./getMonitorAlarmMetric";
export const getMonitorAlarmMetric: typeof import("./getMonitorAlarmMetric").getMonitorAlarmMetric = null as any;
export const getMonitorAlarmMetricOutput: typeof import("./getMonitorAlarmMetric").getMonitorAlarmMetricOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmMetric","getMonitorAlarmMetricOutput"], () => require("./getMonitorAlarmMetric"));

export { GetMonitorAlarmMonitorTypeArgs, GetMonitorAlarmMonitorTypeResult, GetMonitorAlarmMonitorTypeOutputArgs } from "./getMonitorAlarmMonitorType";
export const getMonitorAlarmMonitorType: typeof import("./getMonitorAlarmMonitorType").getMonitorAlarmMonitorType = null as any;
export const getMonitorAlarmMonitorTypeOutput: typeof import("./getMonitorAlarmMonitorType").getMonitorAlarmMonitorTypeOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmMonitorType","getMonitorAlarmMonitorTypeOutput"], () => require("./getMonitorAlarmMonitorType"));

export { GetMonitorAlarmNoticeCallbacksArgs, GetMonitorAlarmNoticeCallbacksResult, GetMonitorAlarmNoticeCallbacksOutputArgs } from "./getMonitorAlarmNoticeCallbacks";
export const getMonitorAlarmNoticeCallbacks: typeof import("./getMonitorAlarmNoticeCallbacks").getMonitorAlarmNoticeCallbacks = null as any;
export const getMonitorAlarmNoticeCallbacksOutput: typeof import("./getMonitorAlarmNoticeCallbacks").getMonitorAlarmNoticeCallbacksOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmNoticeCallbacks","getMonitorAlarmNoticeCallbacksOutput"], () => require("./getMonitorAlarmNoticeCallbacks"));

export { GetMonitorAlarmNoticesArgs, GetMonitorAlarmNoticesResult, GetMonitorAlarmNoticesOutputArgs } from "./getMonitorAlarmNotices";
export const getMonitorAlarmNotices: typeof import("./getMonitorAlarmNotices").getMonitorAlarmNotices = null as any;
export const getMonitorAlarmNoticesOutput: typeof import("./getMonitorAlarmNotices").getMonitorAlarmNoticesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmNotices","getMonitorAlarmNoticesOutput"], () => require("./getMonitorAlarmNotices"));

export { GetMonitorAlarmPolicyArgs, GetMonitorAlarmPolicyResult, GetMonitorAlarmPolicyOutputArgs } from "./getMonitorAlarmPolicy";
export const getMonitorAlarmPolicy: typeof import("./getMonitorAlarmPolicy").getMonitorAlarmPolicy = null as any;
export const getMonitorAlarmPolicyOutput: typeof import("./getMonitorAlarmPolicy").getMonitorAlarmPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorAlarmPolicy","getMonitorAlarmPolicyOutput"], () => require("./getMonitorAlarmPolicy"));

export { GetMonitorBindingObjectsArgs, GetMonitorBindingObjectsResult, GetMonitorBindingObjectsOutputArgs } from "./getMonitorBindingObjects";
export const getMonitorBindingObjects: typeof import("./getMonitorBindingObjects").getMonitorBindingObjects = null as any;
export const getMonitorBindingObjectsOutput: typeof import("./getMonitorBindingObjects").getMonitorBindingObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorBindingObjects","getMonitorBindingObjectsOutput"], () => require("./getMonitorBindingObjects"));

export { GetMonitorDataArgs, GetMonitorDataResult, GetMonitorDataOutputArgs } from "./getMonitorData";
export const getMonitorData: typeof import("./getMonitorData").getMonitorData = null as any;
export const getMonitorDataOutput: typeof import("./getMonitorData").getMonitorDataOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorData","getMonitorDataOutput"], () => require("./getMonitorData"));

export { GetMonitorGrafanaPluginOverviewsArgs, GetMonitorGrafanaPluginOverviewsResult, GetMonitorGrafanaPluginOverviewsOutputArgs } from "./getMonitorGrafanaPluginOverviews";
export const getMonitorGrafanaPluginOverviews: typeof import("./getMonitorGrafanaPluginOverviews").getMonitorGrafanaPluginOverviews = null as any;
export const getMonitorGrafanaPluginOverviewsOutput: typeof import("./getMonitorGrafanaPluginOverviews").getMonitorGrafanaPluginOverviewsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorGrafanaPluginOverviews","getMonitorGrafanaPluginOverviewsOutput"], () => require("./getMonitorGrafanaPluginOverviews"));

export { GetMonitorPolicyConditionsArgs, GetMonitorPolicyConditionsResult, GetMonitorPolicyConditionsOutputArgs } from "./getMonitorPolicyConditions";
export const getMonitorPolicyConditions: typeof import("./getMonitorPolicyConditions").getMonitorPolicyConditions = null as any;
export const getMonitorPolicyConditionsOutput: typeof import("./getMonitorPolicyConditions").getMonitorPolicyConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorPolicyConditions","getMonitorPolicyConditionsOutput"], () => require("./getMonitorPolicyConditions"));

export { GetMonitorPolicyGroupsArgs, GetMonitorPolicyGroupsResult, GetMonitorPolicyGroupsOutputArgs } from "./getMonitorPolicyGroups";
export const getMonitorPolicyGroups: typeof import("./getMonitorPolicyGroups").getMonitorPolicyGroups = null as any;
export const getMonitorPolicyGroupsOutput: typeof import("./getMonitorPolicyGroups").getMonitorPolicyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorPolicyGroups","getMonitorPolicyGroupsOutput"], () => require("./getMonitorPolicyGroups"));

export { GetMonitorProductEventArgs, GetMonitorProductEventResult, GetMonitorProductEventOutputArgs } from "./getMonitorProductEvent";
export const getMonitorProductEvent: typeof import("./getMonitorProductEvent").getMonitorProductEvent = null as any;
export const getMonitorProductEventOutput: typeof import("./getMonitorProductEvent").getMonitorProductEventOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorProductEvent","getMonitorProductEventOutput"], () => require("./getMonitorProductEvent"));

export { GetMonitorProductNamespaceArgs, GetMonitorProductNamespaceResult, GetMonitorProductNamespaceOutputArgs } from "./getMonitorProductNamespace";
export const getMonitorProductNamespace: typeof import("./getMonitorProductNamespace").getMonitorProductNamespace = null as any;
export const getMonitorProductNamespaceOutput: typeof import("./getMonitorProductNamespace").getMonitorProductNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorProductNamespace","getMonitorProductNamespaceOutput"], () => require("./getMonitorProductNamespace"));

export { GetMonitorStatisticDataArgs, GetMonitorStatisticDataResult, GetMonitorStatisticDataOutputArgs } from "./getMonitorStatisticData";
export const getMonitorStatisticData: typeof import("./getMonitorStatisticData").getMonitorStatisticData = null as any;
export const getMonitorStatisticDataOutput: typeof import("./getMonitorStatisticData").getMonitorStatisticDataOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorStatisticData","getMonitorStatisticDataOutput"], () => require("./getMonitorStatisticData"));

export { GetMonitorTmpInstancesArgs, GetMonitorTmpInstancesResult, GetMonitorTmpInstancesOutputArgs } from "./getMonitorTmpInstances";
export const getMonitorTmpInstances: typeof import("./getMonitorTmpInstances").getMonitorTmpInstances = null as any;
export const getMonitorTmpInstancesOutput: typeof import("./getMonitorTmpInstances").getMonitorTmpInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorTmpInstances","getMonitorTmpInstancesOutput"], () => require("./getMonitorTmpInstances"));

export { GetMonitorTmpRegionsArgs, GetMonitorTmpRegionsResult, GetMonitorTmpRegionsOutputArgs } from "./getMonitorTmpRegions";
export const getMonitorTmpRegions: typeof import("./getMonitorTmpRegions").getMonitorTmpRegions = null as any;
export const getMonitorTmpRegionsOutput: typeof import("./getMonitorTmpRegions").getMonitorTmpRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorTmpRegions","getMonitorTmpRegionsOutput"], () => require("./getMonitorTmpRegions"));

export { GetMpsMediaMetaDataArgs, GetMpsMediaMetaDataResult, GetMpsMediaMetaDataOutputArgs } from "./getMpsMediaMetaData";
export const getMpsMediaMetaData: typeof import("./getMpsMediaMetaData").getMpsMediaMetaData = null as any;
export const getMpsMediaMetaDataOutput: typeof import("./getMpsMediaMetaData").getMpsMediaMetaDataOutput = null as any;
utilities.lazyLoad(exports, ["getMpsMediaMetaData","getMpsMediaMetaDataOutput"], () => require("./getMpsMediaMetaData"));

export { GetMpsParseLiveStreamProcessNotificationArgs, GetMpsParseLiveStreamProcessNotificationResult, GetMpsParseLiveStreamProcessNotificationOutputArgs } from "./getMpsParseLiveStreamProcessNotification";
export const getMpsParseLiveStreamProcessNotification: typeof import("./getMpsParseLiveStreamProcessNotification").getMpsParseLiveStreamProcessNotification = null as any;
export const getMpsParseLiveStreamProcessNotificationOutput: typeof import("./getMpsParseLiveStreamProcessNotification").getMpsParseLiveStreamProcessNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getMpsParseLiveStreamProcessNotification","getMpsParseLiveStreamProcessNotificationOutput"], () => require("./getMpsParseLiveStreamProcessNotification"));

export { GetMpsParseNotificationArgs, GetMpsParseNotificationResult, GetMpsParseNotificationOutputArgs } from "./getMpsParseNotification";
export const getMpsParseNotification: typeof import("./getMpsParseNotification").getMpsParseNotification = null as any;
export const getMpsParseNotificationOutput: typeof import("./getMpsParseNotification").getMpsParseNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getMpsParseNotification","getMpsParseNotificationOutput"], () => require("./getMpsParseNotification"));

export { GetMpsSchedulesArgs, GetMpsSchedulesResult, GetMpsSchedulesOutputArgs } from "./getMpsSchedules";
export const getMpsSchedules: typeof import("./getMpsSchedules").getMpsSchedules = null as any;
export const getMpsSchedulesOutput: typeof import("./getMpsSchedules").getMpsSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getMpsSchedules","getMpsSchedulesOutput"], () => require("./getMpsSchedules"));

export { GetMpsTasksArgs, GetMpsTasksResult, GetMpsTasksOutputArgs } from "./getMpsTasks";
export const getMpsTasks: typeof import("./getMpsTasks").getMpsTasks = null as any;
export const getMpsTasksOutput: typeof import("./getMpsTasks").getMpsTasksOutput = null as any;
utilities.lazyLoad(exports, ["getMpsTasks","getMpsTasksOutput"], () => require("./getMpsTasks"));

export { GetMysqlBackupListArgs, GetMysqlBackupListResult, GetMysqlBackupListOutputArgs } from "./getMysqlBackupList";
export const getMysqlBackupList: typeof import("./getMysqlBackupList").getMysqlBackupList = null as any;
export const getMysqlBackupListOutput: typeof import("./getMysqlBackupList").getMysqlBackupListOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlBackupList","getMysqlBackupListOutput"], () => require("./getMysqlBackupList"));

export { GetMysqlBackupOverviewArgs, GetMysqlBackupOverviewResult, GetMysqlBackupOverviewOutputArgs } from "./getMysqlBackupOverview";
export const getMysqlBackupOverview: typeof import("./getMysqlBackupOverview").getMysqlBackupOverview = null as any;
export const getMysqlBackupOverviewOutput: typeof import("./getMysqlBackupOverview").getMysqlBackupOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlBackupOverview","getMysqlBackupOverviewOutput"], () => require("./getMysqlBackupOverview"));

export { GetMysqlBackupSummariesArgs, GetMysqlBackupSummariesResult, GetMysqlBackupSummariesOutputArgs } from "./getMysqlBackupSummaries";
export const getMysqlBackupSummaries: typeof import("./getMysqlBackupSummaries").getMysqlBackupSummaries = null as any;
export const getMysqlBackupSummariesOutput: typeof import("./getMysqlBackupSummaries").getMysqlBackupSummariesOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlBackupSummaries","getMysqlBackupSummariesOutput"], () => require("./getMysqlBackupSummaries"));

export { GetMysqlBinLogArgs, GetMysqlBinLogResult, GetMysqlBinLogOutputArgs } from "./getMysqlBinLog";
export const getMysqlBinLog: typeof import("./getMysqlBinLog").getMysqlBinLog = null as any;
export const getMysqlBinLogOutput: typeof import("./getMysqlBinLog").getMysqlBinLogOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlBinLog","getMysqlBinLogOutput"], () => require("./getMysqlBinLog"));

export { GetMysqlBinlogBackupOverviewArgs, GetMysqlBinlogBackupOverviewResult, GetMysqlBinlogBackupOverviewOutputArgs } from "./getMysqlBinlogBackupOverview";
export const getMysqlBinlogBackupOverview: typeof import("./getMysqlBinlogBackupOverview").getMysqlBinlogBackupOverview = null as any;
export const getMysqlBinlogBackupOverviewOutput: typeof import("./getMysqlBinlogBackupOverview").getMysqlBinlogBackupOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlBinlogBackupOverview","getMysqlBinlogBackupOverviewOutput"], () => require("./getMysqlBinlogBackupOverview"));

export { GetMysqlCloneListArgs, GetMysqlCloneListResult, GetMysqlCloneListOutputArgs } from "./getMysqlCloneList";
export const getMysqlCloneList: typeof import("./getMysqlCloneList").getMysqlCloneList = null as any;
export const getMysqlCloneListOutput: typeof import("./getMysqlCloneList").getMysqlCloneListOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlCloneList","getMysqlCloneListOutput"], () => require("./getMysqlCloneList"));

export { GetMysqlDataBackupOverviewArgs, GetMysqlDataBackupOverviewResult, GetMysqlDataBackupOverviewOutputArgs } from "./getMysqlDataBackupOverview";
export const getMysqlDataBackupOverview: typeof import("./getMysqlDataBackupOverview").getMysqlDataBackupOverview = null as any;
export const getMysqlDataBackupOverviewOutput: typeof import("./getMysqlDataBackupOverview").getMysqlDataBackupOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlDataBackupOverview","getMysqlDataBackupOverviewOutput"], () => require("./getMysqlDataBackupOverview"));

export { GetMysqlDatabasesArgs, GetMysqlDatabasesResult, GetMysqlDatabasesOutputArgs } from "./getMysqlDatabases";
export const getMysqlDatabases: typeof import("./getMysqlDatabases").getMysqlDatabases = null as any;
export const getMysqlDatabasesOutput: typeof import("./getMysqlDatabases").getMysqlDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlDatabases","getMysqlDatabasesOutput"], () => require("./getMysqlDatabases"));

export { GetMysqlDbFeaturesArgs, GetMysqlDbFeaturesResult, GetMysqlDbFeaturesOutputArgs } from "./getMysqlDbFeatures";
export const getMysqlDbFeatures: typeof import("./getMysqlDbFeatures").getMysqlDbFeatures = null as any;
export const getMysqlDbFeaturesOutput: typeof import("./getMysqlDbFeatures").getMysqlDbFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlDbFeatures","getMysqlDbFeaturesOutput"], () => require("./getMysqlDbFeatures"));

export { GetMysqlDefaultParamsArgs, GetMysqlDefaultParamsResult, GetMysqlDefaultParamsOutputArgs } from "./getMysqlDefaultParams";
export const getMysqlDefaultParams: typeof import("./getMysqlDefaultParams").getMysqlDefaultParams = null as any;
export const getMysqlDefaultParamsOutput: typeof import("./getMysqlDefaultParams").getMysqlDefaultParamsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlDefaultParams","getMysqlDefaultParamsOutput"], () => require("./getMysqlDefaultParams"));

export { GetMysqlErrorLogArgs, GetMysqlErrorLogResult, GetMysqlErrorLogOutputArgs } from "./getMysqlErrorLog";
export const getMysqlErrorLog: typeof import("./getMysqlErrorLog").getMysqlErrorLog = null as any;
export const getMysqlErrorLogOutput: typeof import("./getMysqlErrorLog").getMysqlErrorLogOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlErrorLog","getMysqlErrorLogOutput"], () => require("./getMysqlErrorLog"));

export { GetMysqlInstTablesArgs, GetMysqlInstTablesResult, GetMysqlInstTablesOutputArgs } from "./getMysqlInstTables";
export const getMysqlInstTables: typeof import("./getMysqlInstTables").getMysqlInstTables = null as any;
export const getMysqlInstTablesOutput: typeof import("./getMysqlInstTables").getMysqlInstTablesOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlInstTables","getMysqlInstTablesOutput"], () => require("./getMysqlInstTables"));

export { GetMysqlInstanceArgs, GetMysqlInstanceResult, GetMysqlInstanceOutputArgs } from "./getMysqlInstance";
export const getMysqlInstance: typeof import("./getMysqlInstance").getMysqlInstance = null as any;
export const getMysqlInstanceOutput: typeof import("./getMysqlInstance").getMysqlInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlInstance","getMysqlInstanceOutput"], () => require("./getMysqlInstance"));

export { GetMysqlInstanceCharsetArgs, GetMysqlInstanceCharsetResult, GetMysqlInstanceCharsetOutputArgs } from "./getMysqlInstanceCharset";
export const getMysqlInstanceCharset: typeof import("./getMysqlInstanceCharset").getMysqlInstanceCharset = null as any;
export const getMysqlInstanceCharsetOutput: typeof import("./getMysqlInstanceCharset").getMysqlInstanceCharsetOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlInstanceCharset","getMysqlInstanceCharsetOutput"], () => require("./getMysqlInstanceCharset"));

export { GetMysqlInstanceInfoArgs, GetMysqlInstanceInfoResult, GetMysqlInstanceInfoOutputArgs } from "./getMysqlInstanceInfo";
export const getMysqlInstanceInfo: typeof import("./getMysqlInstanceInfo").getMysqlInstanceInfo = null as any;
export const getMysqlInstanceInfoOutput: typeof import("./getMysqlInstanceInfo").getMysqlInstanceInfoOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlInstanceInfo","getMysqlInstanceInfoOutput"], () => require("./getMysqlInstanceInfo"));

export { GetMysqlInstanceParamRecordArgs, GetMysqlInstanceParamRecordResult, GetMysqlInstanceParamRecordOutputArgs } from "./getMysqlInstanceParamRecord";
export const getMysqlInstanceParamRecord: typeof import("./getMysqlInstanceParamRecord").getMysqlInstanceParamRecord = null as any;
export const getMysqlInstanceParamRecordOutput: typeof import("./getMysqlInstanceParamRecord").getMysqlInstanceParamRecordOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlInstanceParamRecord","getMysqlInstanceParamRecordOutput"], () => require("./getMysqlInstanceParamRecord"));

export { GetMysqlInstanceRebootTimeArgs, GetMysqlInstanceRebootTimeResult, GetMysqlInstanceRebootTimeOutputArgs } from "./getMysqlInstanceRebootTime";
export const getMysqlInstanceRebootTime: typeof import("./getMysqlInstanceRebootTime").getMysqlInstanceRebootTime = null as any;
export const getMysqlInstanceRebootTimeOutput: typeof import("./getMysqlInstanceRebootTime").getMysqlInstanceRebootTimeOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlInstanceRebootTime","getMysqlInstanceRebootTimeOutput"], () => require("./getMysqlInstanceRebootTime"));

export { GetMysqlParameterListArgs, GetMysqlParameterListResult, GetMysqlParameterListOutputArgs } from "./getMysqlParameterList";
export const getMysqlParameterList: typeof import("./getMysqlParameterList").getMysqlParameterList = null as any;
export const getMysqlParameterListOutput: typeof import("./getMysqlParameterList").getMysqlParameterListOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlParameterList","getMysqlParameterListOutput"], () => require("./getMysqlParameterList"));

export { GetMysqlProjectSecurityGroupArgs, GetMysqlProjectSecurityGroupResult, GetMysqlProjectSecurityGroupOutputArgs } from "./getMysqlProjectSecurityGroup";
export const getMysqlProjectSecurityGroup: typeof import("./getMysqlProjectSecurityGroup").getMysqlProjectSecurityGroup = null as any;
export const getMysqlProjectSecurityGroupOutput: typeof import("./getMysqlProjectSecurityGroup").getMysqlProjectSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlProjectSecurityGroup","getMysqlProjectSecurityGroupOutput"], () => require("./getMysqlProjectSecurityGroup"));

export { GetMysqlProxyCustomArgs, GetMysqlProxyCustomResult, GetMysqlProxyCustomOutputArgs } from "./getMysqlProxyCustom";
export const getMysqlProxyCustom: typeof import("./getMysqlProxyCustom").getMysqlProxyCustom = null as any;
export const getMysqlProxyCustomOutput: typeof import("./getMysqlProxyCustom").getMysqlProxyCustomOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlProxyCustom","getMysqlProxyCustomOutput"], () => require("./getMysqlProxyCustom"));

export { GetMysqlRoMinScaleArgs, GetMysqlRoMinScaleResult, GetMysqlRoMinScaleOutputArgs } from "./getMysqlRoMinScale";
export const getMysqlRoMinScale: typeof import("./getMysqlRoMinScale").getMysqlRoMinScale = null as any;
export const getMysqlRoMinScaleOutput: typeof import("./getMysqlRoMinScale").getMysqlRoMinScaleOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlRoMinScale","getMysqlRoMinScaleOutput"], () => require("./getMysqlRoMinScale"));

export { GetMysqlRollbackRangeTimeArgs, GetMysqlRollbackRangeTimeResult, GetMysqlRollbackRangeTimeOutputArgs } from "./getMysqlRollbackRangeTime";
export const getMysqlRollbackRangeTime: typeof import("./getMysqlRollbackRangeTime").getMysqlRollbackRangeTime = null as any;
export const getMysqlRollbackRangeTimeOutput: typeof import("./getMysqlRollbackRangeTime").getMysqlRollbackRangeTimeOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlRollbackRangeTime","getMysqlRollbackRangeTimeOutput"], () => require("./getMysqlRollbackRangeTime"));

export { GetMysqlSlowLogArgs, GetMysqlSlowLogResult, GetMysqlSlowLogOutputArgs } from "./getMysqlSlowLog";
export const getMysqlSlowLog: typeof import("./getMysqlSlowLog").getMysqlSlowLog = null as any;
export const getMysqlSlowLogOutput: typeof import("./getMysqlSlowLog").getMysqlSlowLogOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlSlowLog","getMysqlSlowLogOutput"], () => require("./getMysqlSlowLog"));

export { GetMysqlSlowLogDataArgs, GetMysqlSlowLogDataResult, GetMysqlSlowLogDataOutputArgs } from "./getMysqlSlowLogData";
export const getMysqlSlowLogData: typeof import("./getMysqlSlowLogData").getMysqlSlowLogData = null as any;
export const getMysqlSlowLogDataOutput: typeof import("./getMysqlSlowLogData").getMysqlSlowLogDataOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlSlowLogData","getMysqlSlowLogDataOutput"], () => require("./getMysqlSlowLogData"));

export { GetMysqlSupportedPrivilegesArgs, GetMysqlSupportedPrivilegesResult, GetMysqlSupportedPrivilegesOutputArgs } from "./getMysqlSupportedPrivileges";
export const getMysqlSupportedPrivileges: typeof import("./getMysqlSupportedPrivileges").getMysqlSupportedPrivileges = null as any;
export const getMysqlSupportedPrivilegesOutput: typeof import("./getMysqlSupportedPrivileges").getMysqlSupportedPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlSupportedPrivileges","getMysqlSupportedPrivilegesOutput"], () => require("./getMysqlSupportedPrivileges"));

export { GetMysqlSwitchRecordArgs, GetMysqlSwitchRecordResult, GetMysqlSwitchRecordOutputArgs } from "./getMysqlSwitchRecord";
export const getMysqlSwitchRecord: typeof import("./getMysqlSwitchRecord").getMysqlSwitchRecord = null as any;
export const getMysqlSwitchRecordOutput: typeof import("./getMysqlSwitchRecord").getMysqlSwitchRecordOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlSwitchRecord","getMysqlSwitchRecordOutput"], () => require("./getMysqlSwitchRecord"));

export { GetMysqlUserTaskArgs, GetMysqlUserTaskResult, GetMysqlUserTaskOutputArgs } from "./getMysqlUserTask";
export const getMysqlUserTask: typeof import("./getMysqlUserTask").getMysqlUserTask = null as any;
export const getMysqlUserTaskOutput: typeof import("./getMysqlUserTask").getMysqlUserTaskOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlUserTask","getMysqlUserTaskOutput"], () => require("./getMysqlUserTask"));

export { GetMysqlZoneConfigArgs, GetMysqlZoneConfigResult, GetMysqlZoneConfigOutputArgs } from "./getMysqlZoneConfig";
export const getMysqlZoneConfig: typeof import("./getMysqlZoneConfig").getMysqlZoneConfig = null as any;
export const getMysqlZoneConfigOutput: typeof import("./getMysqlZoneConfig").getMysqlZoneConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlZoneConfig","getMysqlZoneConfigOutput"], () => require("./getMysqlZoneConfig"));

export { GetNatDcRouteArgs, GetNatDcRouteResult, GetNatDcRouteOutputArgs } from "./getNatDcRoute";
export const getNatDcRoute: typeof import("./getNatDcRoute").getNatDcRoute = null as any;
export const getNatDcRouteOutput: typeof import("./getNatDcRoute").getNatDcRouteOutput = null as any;
utilities.lazyLoad(exports, ["getNatDcRoute","getNatDcRouteOutput"], () => require("./getNatDcRoute"));

export { GetNatGatewaySnatsArgs, GetNatGatewaySnatsResult, GetNatGatewaySnatsOutputArgs } from "./getNatGatewaySnats";
export const getNatGatewaySnats: typeof import("./getNatGatewaySnats").getNatGatewaySnats = null as any;
export const getNatGatewaySnatsOutput: typeof import("./getNatGatewaySnats").getNatGatewaySnatsOutput = null as any;
utilities.lazyLoad(exports, ["getNatGatewaySnats","getNatGatewaySnatsOutput"], () => require("./getNatGatewaySnats"));

export { GetNatGatewaysArgs, GetNatGatewaysResult, GetNatGatewaysOutputArgs } from "./getNatGateways";
export const getNatGateways: typeof import("./getNatGateways").getNatGateways = null as any;
export const getNatGatewaysOutput: typeof import("./getNatGateways").getNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateways","getNatGatewaysOutput"], () => require("./getNatGateways"));

export { GetNatsArgs, GetNatsResult, GetNatsOutputArgs } from "./getNats";
export const getNats: typeof import("./getNats").getNats = null as any;
export const getNatsOutput: typeof import("./getNats").getNatsOutput = null as any;
utilities.lazyLoad(exports, ["getNats","getNatsOutput"], () => require("./getNats"));

export { GetOceanusCheckSavepointArgs, GetOceanusCheckSavepointResult, GetOceanusCheckSavepointOutputArgs } from "./getOceanusCheckSavepoint";
export const getOceanusCheckSavepoint: typeof import("./getOceanusCheckSavepoint").getOceanusCheckSavepoint = null as any;
export const getOceanusCheckSavepointOutput: typeof import("./getOceanusCheckSavepoint").getOceanusCheckSavepointOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusCheckSavepoint","getOceanusCheckSavepointOutput"], () => require("./getOceanusCheckSavepoint"));

export { GetOceanusClustersArgs, GetOceanusClustersResult, GetOceanusClustersOutputArgs } from "./getOceanusClusters";
export const getOceanusClusters: typeof import("./getOceanusClusters").getOceanusClusters = null as any;
export const getOceanusClustersOutput: typeof import("./getOceanusClusters").getOceanusClustersOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusClusters","getOceanusClustersOutput"], () => require("./getOceanusClusters"));

export { GetOceanusJobEventsArgs, GetOceanusJobEventsResult, GetOceanusJobEventsOutputArgs } from "./getOceanusJobEvents";
export const getOceanusJobEvents: typeof import("./getOceanusJobEvents").getOceanusJobEvents = null as any;
export const getOceanusJobEventsOutput: typeof import("./getOceanusJobEvents").getOceanusJobEventsOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusJobEvents","getOceanusJobEventsOutput"], () => require("./getOceanusJobEvents"));

export { GetOceanusJobSubmissionLogArgs, GetOceanusJobSubmissionLogResult, GetOceanusJobSubmissionLogOutputArgs } from "./getOceanusJobSubmissionLog";
export const getOceanusJobSubmissionLog: typeof import("./getOceanusJobSubmissionLog").getOceanusJobSubmissionLog = null as any;
export const getOceanusJobSubmissionLogOutput: typeof import("./getOceanusJobSubmissionLog").getOceanusJobSubmissionLogOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusJobSubmissionLog","getOceanusJobSubmissionLogOutput"], () => require("./getOceanusJobSubmissionLog"));

export { GetOceanusMetaTableArgs, GetOceanusMetaTableResult, GetOceanusMetaTableOutputArgs } from "./getOceanusMetaTable";
export const getOceanusMetaTable: typeof import("./getOceanusMetaTable").getOceanusMetaTable = null as any;
export const getOceanusMetaTableOutput: typeof import("./getOceanusMetaTable").getOceanusMetaTableOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusMetaTable","getOceanusMetaTableOutput"], () => require("./getOceanusMetaTable"));

export { GetOceanusResourceRelatedJobArgs, GetOceanusResourceRelatedJobResult, GetOceanusResourceRelatedJobOutputArgs } from "./getOceanusResourceRelatedJob";
export const getOceanusResourceRelatedJob: typeof import("./getOceanusResourceRelatedJob").getOceanusResourceRelatedJob = null as any;
export const getOceanusResourceRelatedJobOutput: typeof import("./getOceanusResourceRelatedJob").getOceanusResourceRelatedJobOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusResourceRelatedJob","getOceanusResourceRelatedJobOutput"], () => require("./getOceanusResourceRelatedJob"));

export { GetOceanusSavepointListArgs, GetOceanusSavepointListResult, GetOceanusSavepointListOutputArgs } from "./getOceanusSavepointList";
export const getOceanusSavepointList: typeof import("./getOceanusSavepointList").getOceanusSavepointList = null as any;
export const getOceanusSavepointListOutput: typeof import("./getOceanusSavepointList").getOceanusSavepointListOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusSavepointList","getOceanusSavepointListOutput"], () => require("./getOceanusSavepointList"));

export { GetOceanusSystemResourceArgs, GetOceanusSystemResourceResult, GetOceanusSystemResourceOutputArgs } from "./getOceanusSystemResource";
export const getOceanusSystemResource: typeof import("./getOceanusSystemResource").getOceanusSystemResource = null as any;
export const getOceanusSystemResourceOutput: typeof import("./getOceanusSystemResource").getOceanusSystemResourceOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusSystemResource","getOceanusSystemResourceOutput"], () => require("./getOceanusSystemResource"));

export { GetOceanusTreeJobsArgs, GetOceanusTreeJobsResult, GetOceanusTreeJobsOutputArgs } from "./getOceanusTreeJobs";
export const getOceanusTreeJobs: typeof import("./getOceanusTreeJobs").getOceanusTreeJobs = null as any;
export const getOceanusTreeJobsOutput: typeof import("./getOceanusTreeJobs").getOceanusTreeJobsOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusTreeJobs","getOceanusTreeJobsOutput"], () => require("./getOceanusTreeJobs"));

export { GetOceanusTreeResourcesArgs, GetOceanusTreeResourcesResult, GetOceanusTreeResourcesOutputArgs } from "./getOceanusTreeResources";
export const getOceanusTreeResources: typeof import("./getOceanusTreeResources").getOceanusTreeResources = null as any;
export const getOceanusTreeResourcesOutput: typeof import("./getOceanusTreeResources").getOceanusTreeResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusTreeResources","getOceanusTreeResourcesOutput"], () => require("./getOceanusTreeResources"));

export { GetOceanusWorkSpacesArgs, GetOceanusWorkSpacesResult, GetOceanusWorkSpacesOutputArgs } from "./getOceanusWorkSpaces";
export const getOceanusWorkSpaces: typeof import("./getOceanusWorkSpaces").getOceanusWorkSpaces = null as any;
export const getOceanusWorkSpacesOutput: typeof import("./getOceanusWorkSpaces").getOceanusWorkSpacesOutput = null as any;
utilities.lazyLoad(exports, ["getOceanusWorkSpaces","getOceanusWorkSpacesOutput"], () => require("./getOceanusWorkSpaces"));

export { GetOrganizationMembersArgs, GetOrganizationMembersResult, GetOrganizationMembersOutputArgs } from "./getOrganizationMembers";
export const getOrganizationMembers: typeof import("./getOrganizationMembers").getOrganizationMembers = null as any;
export const getOrganizationMembersOutput: typeof import("./getOrganizationMembers").getOrganizationMembersOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationMembers","getOrganizationMembersOutput"], () => require("./getOrganizationMembers"));

export { GetOrganizationOrgAuthNodeArgs, GetOrganizationOrgAuthNodeResult, GetOrganizationOrgAuthNodeOutputArgs } from "./getOrganizationOrgAuthNode";
export const getOrganizationOrgAuthNode: typeof import("./getOrganizationOrgAuthNode").getOrganizationOrgAuthNode = null as any;
export const getOrganizationOrgAuthNodeOutput: typeof import("./getOrganizationOrgAuthNode").getOrganizationOrgAuthNodeOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationOrgAuthNode","getOrganizationOrgAuthNodeOutput"], () => require("./getOrganizationOrgAuthNode"));

export { GetOrganizationOrgFinancialByMemberArgs, GetOrganizationOrgFinancialByMemberResult, GetOrganizationOrgFinancialByMemberOutputArgs } from "./getOrganizationOrgFinancialByMember";
export const getOrganizationOrgFinancialByMember: typeof import("./getOrganizationOrgFinancialByMember").getOrganizationOrgFinancialByMember = null as any;
export const getOrganizationOrgFinancialByMemberOutput: typeof import("./getOrganizationOrgFinancialByMember").getOrganizationOrgFinancialByMemberOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationOrgFinancialByMember","getOrganizationOrgFinancialByMemberOutput"], () => require("./getOrganizationOrgFinancialByMember"));

export { GetOrganizationOrgFinancialByMonthArgs, GetOrganizationOrgFinancialByMonthResult, GetOrganizationOrgFinancialByMonthOutputArgs } from "./getOrganizationOrgFinancialByMonth";
export const getOrganizationOrgFinancialByMonth: typeof import("./getOrganizationOrgFinancialByMonth").getOrganizationOrgFinancialByMonth = null as any;
export const getOrganizationOrgFinancialByMonthOutput: typeof import("./getOrganizationOrgFinancialByMonth").getOrganizationOrgFinancialByMonthOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationOrgFinancialByMonth","getOrganizationOrgFinancialByMonthOutput"], () => require("./getOrganizationOrgFinancialByMonth"));

export { GetOrganizationOrgFinancialByProductArgs, GetOrganizationOrgFinancialByProductResult, GetOrganizationOrgFinancialByProductOutputArgs } from "./getOrganizationOrgFinancialByProduct";
export const getOrganizationOrgFinancialByProduct: typeof import("./getOrganizationOrgFinancialByProduct").getOrganizationOrgFinancialByProduct = null as any;
export const getOrganizationOrgFinancialByProductOutput: typeof import("./getOrganizationOrgFinancialByProduct").getOrganizationOrgFinancialByProductOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationOrgFinancialByProduct","getOrganizationOrgFinancialByProductOutput"], () => require("./getOrganizationOrgFinancialByProduct"));

export { GetOrganizationOrgShareAreaArgs, GetOrganizationOrgShareAreaResult, GetOrganizationOrgShareAreaOutputArgs } from "./getOrganizationOrgShareArea";
export const getOrganizationOrgShareArea: typeof import("./getOrganizationOrgShareArea").getOrganizationOrgShareArea = null as any;
export const getOrganizationOrgShareAreaOutput: typeof import("./getOrganizationOrgShareArea").getOrganizationOrgShareAreaOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationOrgShareArea","getOrganizationOrgShareAreaOutput"], () => require("./getOrganizationOrgShareArea"));

export { GetOrganizationServicesArgs, GetOrganizationServicesResult, GetOrganizationServicesOutputArgs } from "./getOrganizationServices";
export const getOrganizationServices: typeof import("./getOrganizationServices").getOrganizationServices = null as any;
export const getOrganizationServicesOutput: typeof import("./getOrganizationServices").getOrganizationServicesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationServices","getOrganizationServicesOutput"], () => require("./getOrganizationServices"));

export { GetPlacementGroupsArgs, GetPlacementGroupsResult, GetPlacementGroupsOutputArgs } from "./getPlacementGroups";
export const getPlacementGroups: typeof import("./getPlacementGroups").getPlacementGroups = null as any;
export const getPlacementGroupsOutput: typeof import("./getPlacementGroups").getPlacementGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPlacementGroups","getPlacementGroupsOutput"], () => require("./getPlacementGroups"));

export { GetPostgresqlBackupDownloadUrlsArgs, GetPostgresqlBackupDownloadUrlsResult, GetPostgresqlBackupDownloadUrlsOutputArgs } from "./getPostgresqlBackupDownloadUrls";
export const getPostgresqlBackupDownloadUrls: typeof import("./getPostgresqlBackupDownloadUrls").getPostgresqlBackupDownloadUrls = null as any;
export const getPostgresqlBackupDownloadUrlsOutput: typeof import("./getPostgresqlBackupDownloadUrls").getPostgresqlBackupDownloadUrlsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlBackupDownloadUrls","getPostgresqlBackupDownloadUrlsOutput"], () => require("./getPostgresqlBackupDownloadUrls"));

export { GetPostgresqlBaseBackupsArgs, GetPostgresqlBaseBackupsResult, GetPostgresqlBaseBackupsOutputArgs } from "./getPostgresqlBaseBackups";
export const getPostgresqlBaseBackups: typeof import("./getPostgresqlBaseBackups").getPostgresqlBaseBackups = null as any;
export const getPostgresqlBaseBackupsOutput: typeof import("./getPostgresqlBaseBackups").getPostgresqlBaseBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlBaseBackups","getPostgresqlBaseBackupsOutput"], () => require("./getPostgresqlBaseBackups"));

export { GetPostgresqlDbInstanceClassesArgs, GetPostgresqlDbInstanceClassesResult, GetPostgresqlDbInstanceClassesOutputArgs } from "./getPostgresqlDbInstanceClasses";
export const getPostgresqlDbInstanceClasses: typeof import("./getPostgresqlDbInstanceClasses").getPostgresqlDbInstanceClasses = null as any;
export const getPostgresqlDbInstanceClassesOutput: typeof import("./getPostgresqlDbInstanceClasses").getPostgresqlDbInstanceClassesOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlDbInstanceClasses","getPostgresqlDbInstanceClassesOutput"], () => require("./getPostgresqlDbInstanceClasses"));

export { GetPostgresqlDbInstanceVersionsArgs, GetPostgresqlDbInstanceVersionsResult, GetPostgresqlDbInstanceVersionsOutputArgs } from "./getPostgresqlDbInstanceVersions";
export const getPostgresqlDbInstanceVersions: typeof import("./getPostgresqlDbInstanceVersions").getPostgresqlDbInstanceVersions = null as any;
export const getPostgresqlDbInstanceVersionsOutput: typeof import("./getPostgresqlDbInstanceVersions").getPostgresqlDbInstanceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlDbInstanceVersions","getPostgresqlDbInstanceVersionsOutput"], () => require("./getPostgresqlDbInstanceVersions"));

export { GetPostgresqlDefaultParametersArgs, GetPostgresqlDefaultParametersResult, GetPostgresqlDefaultParametersOutputArgs } from "./getPostgresqlDefaultParameters";
export const getPostgresqlDefaultParameters: typeof import("./getPostgresqlDefaultParameters").getPostgresqlDefaultParameters = null as any;
export const getPostgresqlDefaultParametersOutput: typeof import("./getPostgresqlDefaultParameters").getPostgresqlDefaultParametersOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlDefaultParameters","getPostgresqlDefaultParametersOutput"], () => require("./getPostgresqlDefaultParameters"));

export { GetPostgresqlInstancesArgs, GetPostgresqlInstancesResult, GetPostgresqlInstancesOutputArgs } from "./getPostgresqlInstances";
export const getPostgresqlInstances: typeof import("./getPostgresqlInstances").getPostgresqlInstances = null as any;
export const getPostgresqlInstancesOutput: typeof import("./getPostgresqlInstances").getPostgresqlInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlInstances","getPostgresqlInstancesOutput"], () => require("./getPostgresqlInstances"));

export { GetPostgresqlLogBackupsArgs, GetPostgresqlLogBackupsResult, GetPostgresqlLogBackupsOutputArgs } from "./getPostgresqlLogBackups";
export const getPostgresqlLogBackups: typeof import("./getPostgresqlLogBackups").getPostgresqlLogBackups = null as any;
export const getPostgresqlLogBackupsOutput: typeof import("./getPostgresqlLogBackups").getPostgresqlLogBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlLogBackups","getPostgresqlLogBackupsOutput"], () => require("./getPostgresqlLogBackups"));

export { GetPostgresqlParameterTemplatesArgs, GetPostgresqlParameterTemplatesResult, GetPostgresqlParameterTemplatesOutputArgs } from "./getPostgresqlParameterTemplates";
export const getPostgresqlParameterTemplates: typeof import("./getPostgresqlParameterTemplates").getPostgresqlParameterTemplates = null as any;
export const getPostgresqlParameterTemplatesOutput: typeof import("./getPostgresqlParameterTemplates").getPostgresqlParameterTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlParameterTemplates","getPostgresqlParameterTemplatesOutput"], () => require("./getPostgresqlParameterTemplates"));

export { GetPostgresqlReadonlyGroupsArgs, GetPostgresqlReadonlyGroupsResult, GetPostgresqlReadonlyGroupsOutputArgs } from "./getPostgresqlReadonlyGroups";
export const getPostgresqlReadonlyGroups: typeof import("./getPostgresqlReadonlyGroups").getPostgresqlReadonlyGroups = null as any;
export const getPostgresqlReadonlyGroupsOutput: typeof import("./getPostgresqlReadonlyGroups").getPostgresqlReadonlyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlReadonlyGroups","getPostgresqlReadonlyGroupsOutput"], () => require("./getPostgresqlReadonlyGroups"));

export { GetPostgresqlRecoveryTimeArgs, GetPostgresqlRecoveryTimeResult, GetPostgresqlRecoveryTimeOutputArgs } from "./getPostgresqlRecoveryTime";
export const getPostgresqlRecoveryTime: typeof import("./getPostgresqlRecoveryTime").getPostgresqlRecoveryTime = null as any;
export const getPostgresqlRecoveryTimeOutput: typeof import("./getPostgresqlRecoveryTime").getPostgresqlRecoveryTimeOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlRecoveryTime","getPostgresqlRecoveryTimeOutput"], () => require("./getPostgresqlRecoveryTime"));

export { GetPostgresqlRegionsArgs, GetPostgresqlRegionsResult, GetPostgresqlRegionsOutputArgs } from "./getPostgresqlRegions";
export const getPostgresqlRegions: typeof import("./getPostgresqlRegions").getPostgresqlRegions = null as any;
export const getPostgresqlRegionsOutput: typeof import("./getPostgresqlRegions").getPostgresqlRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlRegions","getPostgresqlRegionsOutput"], () => require("./getPostgresqlRegions"));

export { GetPostgresqlSpecinfosArgs, GetPostgresqlSpecinfosResult, GetPostgresqlSpecinfosOutputArgs } from "./getPostgresqlSpecinfos";
export const getPostgresqlSpecinfos: typeof import("./getPostgresqlSpecinfos").getPostgresqlSpecinfos = null as any;
export const getPostgresqlSpecinfosOutput: typeof import("./getPostgresqlSpecinfos").getPostgresqlSpecinfosOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlSpecinfos","getPostgresqlSpecinfosOutput"], () => require("./getPostgresqlSpecinfos"));

export { GetPostgresqlXlogsArgs, GetPostgresqlXlogsResult, GetPostgresqlXlogsOutputArgs } from "./getPostgresqlXlogs";
export const getPostgresqlXlogs: typeof import("./getPostgresqlXlogs").getPostgresqlXlogs = null as any;
export const getPostgresqlXlogsOutput: typeof import("./getPostgresqlXlogs").getPostgresqlXlogsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlXlogs","getPostgresqlXlogsOutput"], () => require("./getPostgresqlXlogs"));

export { GetPostgresqlZonesArgs, GetPostgresqlZonesResult, GetPostgresqlZonesOutputArgs } from "./getPostgresqlZones";
export const getPostgresqlZones: typeof import("./getPostgresqlZones").getPostgresqlZones = null as any;
export const getPostgresqlZonesOutput: typeof import("./getPostgresqlZones").getPostgresqlZonesOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlZones","getPostgresqlZonesOutput"], () => require("./getPostgresqlZones"));

export { GetPrivateDnsPrivateZoneListArgs, GetPrivateDnsPrivateZoneListResult, GetPrivateDnsPrivateZoneListOutputArgs } from "./getPrivateDnsPrivateZoneList";
export const getPrivateDnsPrivateZoneList: typeof import("./getPrivateDnsPrivateZoneList").getPrivateDnsPrivateZoneList = null as any;
export const getPrivateDnsPrivateZoneListOutput: typeof import("./getPrivateDnsPrivateZoneList").getPrivateDnsPrivateZoneListOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsPrivateZoneList","getPrivateDnsPrivateZoneListOutput"], () => require("./getPrivateDnsPrivateZoneList"));

export { GetPrivateDnsRecordsArgs, GetPrivateDnsRecordsResult, GetPrivateDnsRecordsOutputArgs } from "./getPrivateDnsRecords";
export const getPrivateDnsRecords: typeof import("./getPrivateDnsRecords").getPrivateDnsRecords = null as any;
export const getPrivateDnsRecordsOutput: typeof import("./getPrivateDnsRecords").getPrivateDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateDnsRecords","getPrivateDnsRecordsOutput"], () => require("./getPrivateDnsRecords"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetProtocolTemplateGroupsArgs, GetProtocolTemplateGroupsResult, GetProtocolTemplateGroupsOutputArgs } from "./getProtocolTemplateGroups";
export const getProtocolTemplateGroups: typeof import("./getProtocolTemplateGroups").getProtocolTemplateGroups = null as any;
export const getProtocolTemplateGroupsOutput: typeof import("./getProtocolTemplateGroups").getProtocolTemplateGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolTemplateGroups","getProtocolTemplateGroupsOutput"], () => require("./getProtocolTemplateGroups"));

export { GetProtocolTemplatesArgs, GetProtocolTemplatesResult, GetProtocolTemplatesOutputArgs } from "./getProtocolTemplates";
export const getProtocolTemplates: typeof import("./getProtocolTemplates").getProtocolTemplates = null as any;
export const getProtocolTemplatesOutput: typeof import("./getProtocolTemplates").getProtocolTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolTemplates","getProtocolTemplatesOutput"], () => require("./getProtocolTemplates"));

export { GetPtsScenarioWithJobsArgs, GetPtsScenarioWithJobsResult, GetPtsScenarioWithJobsOutputArgs } from "./getPtsScenarioWithJobs";
export const getPtsScenarioWithJobs: typeof import("./getPtsScenarioWithJobs").getPtsScenarioWithJobs = null as any;
export const getPtsScenarioWithJobsOutput: typeof import("./getPtsScenarioWithJobs").getPtsScenarioWithJobsOutput = null as any;
utilities.lazyLoad(exports, ["getPtsScenarioWithJobs","getPtsScenarioWithJobsOutput"], () => require("./getPtsScenarioWithJobs"));

export { GetRedisBackupArgs, GetRedisBackupResult, GetRedisBackupOutputArgs } from "./getRedisBackup";
export const getRedisBackup: typeof import("./getRedisBackup").getRedisBackup = null as any;
export const getRedisBackupOutput: typeof import("./getRedisBackup").getRedisBackupOutput = null as any;
utilities.lazyLoad(exports, ["getRedisBackup","getRedisBackupOutput"], () => require("./getRedisBackup"));

export { GetRedisBackupDownloadInfoArgs, GetRedisBackupDownloadInfoResult, GetRedisBackupDownloadInfoOutputArgs } from "./getRedisBackupDownloadInfo";
export const getRedisBackupDownloadInfo: typeof import("./getRedisBackupDownloadInfo").getRedisBackupDownloadInfo = null as any;
export const getRedisBackupDownloadInfoOutput: typeof import("./getRedisBackupDownloadInfo").getRedisBackupDownloadInfoOutput = null as any;
utilities.lazyLoad(exports, ["getRedisBackupDownloadInfo","getRedisBackupDownloadInfoOutput"], () => require("./getRedisBackupDownloadInfo"));

export { GetRedisInstanceNodeInfoArgs, GetRedisInstanceNodeInfoResult, GetRedisInstanceNodeInfoOutputArgs } from "./getRedisInstanceNodeInfo";
export const getRedisInstanceNodeInfo: typeof import("./getRedisInstanceNodeInfo").getRedisInstanceNodeInfo = null as any;
export const getRedisInstanceNodeInfoOutput: typeof import("./getRedisInstanceNodeInfo").getRedisInstanceNodeInfoOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstanceNodeInfo","getRedisInstanceNodeInfoOutput"], () => require("./getRedisInstanceNodeInfo"));

export { GetRedisInstanceShardsArgs, GetRedisInstanceShardsResult, GetRedisInstanceShardsOutputArgs } from "./getRedisInstanceShards";
export const getRedisInstanceShards: typeof import("./getRedisInstanceShards").getRedisInstanceShards = null as any;
export const getRedisInstanceShardsOutput: typeof import("./getRedisInstanceShards").getRedisInstanceShardsOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstanceShards","getRedisInstanceShardsOutput"], () => require("./getRedisInstanceShards"));

export { GetRedisInstanceTaskListArgs, GetRedisInstanceTaskListResult, GetRedisInstanceTaskListOutputArgs } from "./getRedisInstanceTaskList";
export const getRedisInstanceTaskList: typeof import("./getRedisInstanceTaskList").getRedisInstanceTaskList = null as any;
export const getRedisInstanceTaskListOutput: typeof import("./getRedisInstanceTaskList").getRedisInstanceTaskListOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstanceTaskList","getRedisInstanceTaskListOutput"], () => require("./getRedisInstanceTaskList"));

export { GetRedisInstanceZoneInfoArgs, GetRedisInstanceZoneInfoResult, GetRedisInstanceZoneInfoOutputArgs } from "./getRedisInstanceZoneInfo";
export const getRedisInstanceZoneInfo: typeof import("./getRedisInstanceZoneInfo").getRedisInstanceZoneInfo = null as any;
export const getRedisInstanceZoneInfoOutput: typeof import("./getRedisInstanceZoneInfo").getRedisInstanceZoneInfoOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstanceZoneInfo","getRedisInstanceZoneInfoOutput"], () => require("./getRedisInstanceZoneInfo"));

export { GetRedisInstancesArgs, GetRedisInstancesResult, GetRedisInstancesOutputArgs } from "./getRedisInstances";
export const getRedisInstances: typeof import("./getRedisInstances").getRedisInstances = null as any;
export const getRedisInstancesOutput: typeof import("./getRedisInstances").getRedisInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getRedisInstances","getRedisInstancesOutput"], () => require("./getRedisInstances"));

export { GetRedisParamRecordsArgs, GetRedisParamRecordsResult, GetRedisParamRecordsOutputArgs } from "./getRedisParamRecords";
export const getRedisParamRecords: typeof import("./getRedisParamRecords").getRedisParamRecords = null as any;
export const getRedisParamRecordsOutput: typeof import("./getRedisParamRecords").getRedisParamRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getRedisParamRecords","getRedisParamRecordsOutput"], () => require("./getRedisParamRecords"));

export { GetRedisZoneConfigArgs, GetRedisZoneConfigResult, GetRedisZoneConfigOutputArgs } from "./getRedisZoneConfig";
export const getRedisZoneConfig: typeof import("./getRedisZoneConfig").getRedisZoneConfig = null as any;
export const getRedisZoneConfigOutput: typeof import("./getRedisZoneConfig").getRedisZoneConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRedisZoneConfig","getRedisZoneConfigOutput"], () => require("./getRedisZoneConfig"));

export { GetReservedInstanceConfigsArgs, GetReservedInstanceConfigsResult, GetReservedInstanceConfigsOutputArgs } from "./getReservedInstanceConfigs";
export const getReservedInstanceConfigs: typeof import("./getReservedInstanceConfigs").getReservedInstanceConfigs = null as any;
export const getReservedInstanceConfigsOutput: typeof import("./getReservedInstanceConfigs").getReservedInstanceConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getReservedInstanceConfigs","getReservedInstanceConfigsOutput"], () => require("./getReservedInstanceConfigs"));

export { GetReservedInstancesArgs, GetReservedInstancesResult, GetReservedInstancesOutputArgs } from "./getReservedInstances";
export const getReservedInstances: typeof import("./getReservedInstances").getReservedInstances = null as any;
export const getReservedInstancesOutput: typeof import("./getReservedInstances").getReservedInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getReservedInstances","getReservedInstancesOutput"], () => require("./getReservedInstances"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRumCustomUrlArgs, GetRumCustomUrlResult, GetRumCustomUrlOutputArgs } from "./getRumCustomUrl";
export const getRumCustomUrl: typeof import("./getRumCustomUrl").getRumCustomUrl = null as any;
export const getRumCustomUrlOutput: typeof import("./getRumCustomUrl").getRumCustomUrlOutput = null as any;
utilities.lazyLoad(exports, ["getRumCustomUrl","getRumCustomUrlOutput"], () => require("./getRumCustomUrl"));

export { GetRumEventUrlArgs, GetRumEventUrlResult, GetRumEventUrlOutputArgs } from "./getRumEventUrl";
export const getRumEventUrl: typeof import("./getRumEventUrl").getRumEventUrl = null as any;
export const getRumEventUrlOutput: typeof import("./getRumEventUrl").getRumEventUrlOutput = null as any;
utilities.lazyLoad(exports, ["getRumEventUrl","getRumEventUrlOutput"], () => require("./getRumEventUrl"));

export { GetRumFetchUrlArgs, GetRumFetchUrlResult, GetRumFetchUrlOutputArgs } from "./getRumFetchUrl";
export const getRumFetchUrl: typeof import("./getRumFetchUrl").getRumFetchUrl = null as any;
export const getRumFetchUrlOutput: typeof import("./getRumFetchUrl").getRumFetchUrlOutput = null as any;
utilities.lazyLoad(exports, ["getRumFetchUrl","getRumFetchUrlOutput"], () => require("./getRumFetchUrl"));

export { GetRumFetchUrlInfoArgs, GetRumFetchUrlInfoResult, GetRumFetchUrlInfoOutputArgs } from "./getRumFetchUrlInfo";
export const getRumFetchUrlInfo: typeof import("./getRumFetchUrlInfo").getRumFetchUrlInfo = null as any;
export const getRumFetchUrlInfoOutput: typeof import("./getRumFetchUrlInfo").getRumFetchUrlInfoOutput = null as any;
utilities.lazyLoad(exports, ["getRumFetchUrlInfo","getRumFetchUrlInfoOutput"], () => require("./getRumFetchUrlInfo"));

export { GetRumGroupLogArgs, GetRumGroupLogResult, GetRumGroupLogOutputArgs } from "./getRumGroupLog";
export const getRumGroupLog: typeof import("./getRumGroupLog").getRumGroupLog = null as any;
export const getRumGroupLogOutput: typeof import("./getRumGroupLog").getRumGroupLogOutput = null as any;
utilities.lazyLoad(exports, ["getRumGroupLog","getRumGroupLogOutput"], () => require("./getRumGroupLog"));

export { GetRumLogExportArgs, GetRumLogExportResult, GetRumLogExportOutputArgs } from "./getRumLogExport";
export const getRumLogExport: typeof import("./getRumLogExport").getRumLogExport = null as any;
export const getRumLogExportOutput: typeof import("./getRumLogExport").getRumLogExportOutput = null as any;
utilities.lazyLoad(exports, ["getRumLogExport","getRumLogExportOutput"], () => require("./getRumLogExport"));

export { GetRumLogExportListArgs, GetRumLogExportListResult, GetRumLogExportListOutputArgs } from "./getRumLogExportList";
export const getRumLogExportList: typeof import("./getRumLogExportList").getRumLogExportList = null as any;
export const getRumLogExportListOutput: typeof import("./getRumLogExportList").getRumLogExportListOutput = null as any;
utilities.lazyLoad(exports, ["getRumLogExportList","getRumLogExportListOutput"], () => require("./getRumLogExportList"));

export { GetRumLogListArgs, GetRumLogListResult, GetRumLogListOutputArgs } from "./getRumLogList";
export const getRumLogList: typeof import("./getRumLogList").getRumLogList = null as any;
export const getRumLogListOutput: typeof import("./getRumLogList").getRumLogListOutput = null as any;
utilities.lazyLoad(exports, ["getRumLogList","getRumLogListOutput"], () => require("./getRumLogList"));

export { GetRumLogStatsLogListArgs, GetRumLogStatsLogListResult, GetRumLogStatsLogListOutputArgs } from "./getRumLogStatsLogList";
export const getRumLogStatsLogList: typeof import("./getRumLogStatsLogList").getRumLogStatsLogList = null as any;
export const getRumLogStatsLogListOutput: typeof import("./getRumLogStatsLogList").getRumLogStatsLogListOutput = null as any;
utilities.lazyLoad(exports, ["getRumLogStatsLogList","getRumLogStatsLogListOutput"], () => require("./getRumLogStatsLogList"));

export { GetRumLogUrlStatisticsArgs, GetRumLogUrlStatisticsResult, GetRumLogUrlStatisticsOutputArgs } from "./getRumLogUrlStatistics";
export const getRumLogUrlStatistics: typeof import("./getRumLogUrlStatistics").getRumLogUrlStatistics = null as any;
export const getRumLogUrlStatisticsOutput: typeof import("./getRumLogUrlStatistics").getRumLogUrlStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getRumLogUrlStatistics","getRumLogUrlStatisticsOutput"], () => require("./getRumLogUrlStatistics"));

export { GetRumOfflineLogConfigArgs, GetRumOfflineLogConfigResult, GetRumOfflineLogConfigOutputArgs } from "./getRumOfflineLogConfig";
export const getRumOfflineLogConfig: typeof import("./getRumOfflineLogConfig").getRumOfflineLogConfig = null as any;
export const getRumOfflineLogConfigOutput: typeof import("./getRumOfflineLogConfig").getRumOfflineLogConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRumOfflineLogConfig","getRumOfflineLogConfigOutput"], () => require("./getRumOfflineLogConfig"));

export { GetRumPerformancePageArgs, GetRumPerformancePageResult, GetRumPerformancePageOutputArgs } from "./getRumPerformancePage";
export const getRumPerformancePage: typeof import("./getRumPerformancePage").getRumPerformancePage = null as any;
export const getRumPerformancePageOutput: typeof import("./getRumPerformancePage").getRumPerformancePageOutput = null as any;
utilities.lazyLoad(exports, ["getRumPerformancePage","getRumPerformancePageOutput"], () => require("./getRumPerformancePage"));

export { GetRumProjectArgs, GetRumProjectResult, GetRumProjectOutputArgs } from "./getRumProject";
export const getRumProject: typeof import("./getRumProject").getRumProject = null as any;
export const getRumProjectOutput: typeof import("./getRumProject").getRumProjectOutput = null as any;
utilities.lazyLoad(exports, ["getRumProject","getRumProjectOutput"], () => require("./getRumProject"));

export { GetRumPvUrlInfoArgs, GetRumPvUrlInfoResult, GetRumPvUrlInfoOutputArgs } from "./getRumPvUrlInfo";
export const getRumPvUrlInfo: typeof import("./getRumPvUrlInfo").getRumPvUrlInfo = null as any;
export const getRumPvUrlInfoOutput: typeof import("./getRumPvUrlInfo").getRumPvUrlInfoOutput = null as any;
utilities.lazyLoad(exports, ["getRumPvUrlInfo","getRumPvUrlInfoOutput"], () => require("./getRumPvUrlInfo"));

export { GetRumPvUrlStatisticsArgs, GetRumPvUrlStatisticsResult, GetRumPvUrlStatisticsOutputArgs } from "./getRumPvUrlStatistics";
export const getRumPvUrlStatistics: typeof import("./getRumPvUrlStatistics").getRumPvUrlStatistics = null as any;
export const getRumPvUrlStatisticsOutput: typeof import("./getRumPvUrlStatistics").getRumPvUrlStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getRumPvUrlStatistics","getRumPvUrlStatisticsOutput"], () => require("./getRumPvUrlStatistics"));

export { GetRumReportCountArgs, GetRumReportCountResult, GetRumReportCountOutputArgs } from "./getRumReportCount";
export const getRumReportCount: typeof import("./getRumReportCount").getRumReportCount = null as any;
export const getRumReportCountOutput: typeof import("./getRumReportCount").getRumReportCountOutput = null as any;
utilities.lazyLoad(exports, ["getRumReportCount","getRumReportCountOutput"], () => require("./getRumReportCount"));

export { GetRumScoresArgs, GetRumScoresResult, GetRumScoresOutputArgs } from "./getRumScores";
export const getRumScores: typeof import("./getRumScores").getRumScores = null as any;
export const getRumScoresOutput: typeof import("./getRumScores").getRumScoresOutput = null as any;
utilities.lazyLoad(exports, ["getRumScores","getRumScoresOutput"], () => require("./getRumScores"));

export { GetRumSetUrlStatisticsArgs, GetRumSetUrlStatisticsResult, GetRumSetUrlStatisticsOutputArgs } from "./getRumSetUrlStatistics";
export const getRumSetUrlStatistics: typeof import("./getRumSetUrlStatistics").getRumSetUrlStatistics = null as any;
export const getRumSetUrlStatisticsOutput: typeof import("./getRumSetUrlStatistics").getRumSetUrlStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getRumSetUrlStatistics","getRumSetUrlStatisticsOutput"], () => require("./getRumSetUrlStatistics"));

export { GetRumSignArgs, GetRumSignResult, GetRumSignOutputArgs } from "./getRumSign";
export const getRumSign: typeof import("./getRumSign").getRumSign = null as any;
export const getRumSignOutput: typeof import("./getRumSign").getRumSignOutput = null as any;
utilities.lazyLoad(exports, ["getRumSign","getRumSignOutput"], () => require("./getRumSign"));

export { GetRumStaticProjectArgs, GetRumStaticProjectResult, GetRumStaticProjectOutputArgs } from "./getRumStaticProject";
export const getRumStaticProject: typeof import("./getRumStaticProject").getRumStaticProject = null as any;
export const getRumStaticProjectOutput: typeof import("./getRumStaticProject").getRumStaticProjectOutput = null as any;
utilities.lazyLoad(exports, ["getRumStaticProject","getRumStaticProjectOutput"], () => require("./getRumStaticProject"));

export { GetRumStaticResourceArgs, GetRumStaticResourceResult, GetRumStaticResourceOutputArgs } from "./getRumStaticResource";
export const getRumStaticResource: typeof import("./getRumStaticResource").getRumStaticResource = null as any;
export const getRumStaticResourceOutput: typeof import("./getRumStaticResource").getRumStaticResourceOutput = null as any;
utilities.lazyLoad(exports, ["getRumStaticResource","getRumStaticResourceOutput"], () => require("./getRumStaticResource"));

export { GetRumStaticUrlArgs, GetRumStaticUrlResult, GetRumStaticUrlOutputArgs } from "./getRumStaticUrl";
export const getRumStaticUrl: typeof import("./getRumStaticUrl").getRumStaticUrl = null as any;
export const getRumStaticUrlOutput: typeof import("./getRumStaticUrl").getRumStaticUrlOutput = null as any;
utilities.lazyLoad(exports, ["getRumStaticUrl","getRumStaticUrlOutput"], () => require("./getRumStaticUrl"));

export { GetRumTawAreaArgs, GetRumTawAreaResult, GetRumTawAreaOutputArgs } from "./getRumTawArea";
export const getRumTawArea: typeof import("./getRumTawArea").getRumTawArea = null as any;
export const getRumTawAreaOutput: typeof import("./getRumTawArea").getRumTawAreaOutput = null as any;
utilities.lazyLoad(exports, ["getRumTawArea","getRumTawAreaOutput"], () => require("./getRumTawArea"));

export { GetRumTawInstanceArgs, GetRumTawInstanceResult, GetRumTawInstanceOutputArgs } from "./getRumTawInstance";
export const getRumTawInstance: typeof import("./getRumTawInstance").getRumTawInstance = null as any;
export const getRumTawInstanceOutput: typeof import("./getRumTawInstance").getRumTawInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRumTawInstance","getRumTawInstanceOutput"], () => require("./getRumTawInstance"));

export { GetRumWebVitalsPageArgs, GetRumWebVitalsPageResult, GetRumWebVitalsPageOutputArgs } from "./getRumWebVitalsPage";
export const getRumWebVitalsPage: typeof import("./getRumWebVitalsPage").getRumWebVitalsPage = null as any;
export const getRumWebVitalsPageOutput: typeof import("./getRumWebVitalsPage").getRumWebVitalsPageOutput = null as any;
utilities.lazyLoad(exports, ["getRumWebVitalsPage","getRumWebVitalsPageOutput"], () => require("./getRumWebVitalsPage"));

export { GetRumWhitelistArgs, GetRumWhitelistResult, GetRumWhitelistOutputArgs } from "./getRumWhitelist";
export const getRumWhitelist: typeof import("./getRumWhitelist").getRumWhitelist = null as any;
export const getRumWhitelistOutput: typeof import("./getRumWhitelist").getRumWhitelistOutput = null as any;
utilities.lazyLoad(exports, ["getRumWhitelist","getRumWhitelistOutput"], () => require("./getRumWhitelist"));

export { GetScfAccountInfoArgs, GetScfAccountInfoResult, GetScfAccountInfoOutputArgs } from "./getScfAccountInfo";
export const getScfAccountInfo: typeof import("./getScfAccountInfo").getScfAccountInfo = null as any;
export const getScfAccountInfoOutput: typeof import("./getScfAccountInfo").getScfAccountInfoOutput = null as any;
utilities.lazyLoad(exports, ["getScfAccountInfo","getScfAccountInfoOutput"], () => require("./getScfAccountInfo"));

export { GetScfAsyncEventManagementArgs, GetScfAsyncEventManagementResult, GetScfAsyncEventManagementOutputArgs } from "./getScfAsyncEventManagement";
export const getScfAsyncEventManagement: typeof import("./getScfAsyncEventManagement").getScfAsyncEventManagement = null as any;
export const getScfAsyncEventManagementOutput: typeof import("./getScfAsyncEventManagement").getScfAsyncEventManagementOutput = null as any;
utilities.lazyLoad(exports, ["getScfAsyncEventManagement","getScfAsyncEventManagementOutput"], () => require("./getScfAsyncEventManagement"));

export { GetScfAsyncEventStatusArgs, GetScfAsyncEventStatusResult, GetScfAsyncEventStatusOutputArgs } from "./getScfAsyncEventStatus";
export const getScfAsyncEventStatus: typeof import("./getScfAsyncEventStatus").getScfAsyncEventStatus = null as any;
export const getScfAsyncEventStatusOutput: typeof import("./getScfAsyncEventStatus").getScfAsyncEventStatusOutput = null as any;
utilities.lazyLoad(exports, ["getScfAsyncEventStatus","getScfAsyncEventStatusOutput"], () => require("./getScfAsyncEventStatus"));

export { GetScfFunctionAddressArgs, GetScfFunctionAddressResult, GetScfFunctionAddressOutputArgs } from "./getScfFunctionAddress";
export const getScfFunctionAddress: typeof import("./getScfFunctionAddress").getScfFunctionAddress = null as any;
export const getScfFunctionAddressOutput: typeof import("./getScfFunctionAddress").getScfFunctionAddressOutput = null as any;
utilities.lazyLoad(exports, ["getScfFunctionAddress","getScfFunctionAddressOutput"], () => require("./getScfFunctionAddress"));

export { GetScfFunctionAliasesArgs, GetScfFunctionAliasesResult, GetScfFunctionAliasesOutputArgs } from "./getScfFunctionAliases";
export const getScfFunctionAliases: typeof import("./getScfFunctionAliases").getScfFunctionAliases = null as any;
export const getScfFunctionAliasesOutput: typeof import("./getScfFunctionAliases").getScfFunctionAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getScfFunctionAliases","getScfFunctionAliasesOutput"], () => require("./getScfFunctionAliases"));

export { GetScfFunctionVersionsArgs, GetScfFunctionVersionsResult, GetScfFunctionVersionsOutputArgs } from "./getScfFunctionVersions";
export const getScfFunctionVersions: typeof import("./getScfFunctionVersions").getScfFunctionVersions = null as any;
export const getScfFunctionVersionsOutput: typeof import("./getScfFunctionVersions").getScfFunctionVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getScfFunctionVersions","getScfFunctionVersionsOutput"], () => require("./getScfFunctionVersions"));

export { GetScfFunctionsArgs, GetScfFunctionsResult, GetScfFunctionsOutputArgs } from "./getScfFunctions";
export const getScfFunctions: typeof import("./getScfFunctions").getScfFunctions = null as any;
export const getScfFunctionsOutput: typeof import("./getScfFunctions").getScfFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getScfFunctions","getScfFunctionsOutput"], () => require("./getScfFunctions"));

export { GetScfLayerVersionsArgs, GetScfLayerVersionsResult, GetScfLayerVersionsOutputArgs } from "./getScfLayerVersions";
export const getScfLayerVersions: typeof import("./getScfLayerVersions").getScfLayerVersions = null as any;
export const getScfLayerVersionsOutput: typeof import("./getScfLayerVersions").getScfLayerVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getScfLayerVersions","getScfLayerVersionsOutput"], () => require("./getScfLayerVersions"));

export { GetScfLayersArgs, GetScfLayersResult, GetScfLayersOutputArgs } from "./getScfLayers";
export const getScfLayers: typeof import("./getScfLayers").getScfLayers = null as any;
export const getScfLayersOutput: typeof import("./getScfLayers").getScfLayersOutput = null as any;
utilities.lazyLoad(exports, ["getScfLayers","getScfLayersOutput"], () => require("./getScfLayers"));

export { GetScfLogsArgs, GetScfLogsResult, GetScfLogsOutputArgs } from "./getScfLogs";
export const getScfLogs: typeof import("./getScfLogs").getScfLogs = null as any;
export const getScfLogsOutput: typeof import("./getScfLogs").getScfLogsOutput = null as any;
utilities.lazyLoad(exports, ["getScfLogs","getScfLogsOutput"], () => require("./getScfLogs"));

export { GetScfNamespacesArgs, GetScfNamespacesResult, GetScfNamespacesOutputArgs } from "./getScfNamespaces";
export const getScfNamespaces: typeof import("./getScfNamespaces").getScfNamespaces = null as any;
export const getScfNamespacesOutput: typeof import("./getScfNamespaces").getScfNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getScfNamespaces","getScfNamespacesOutput"], () => require("./getScfNamespaces"));

export { GetScfRequestStatusArgs, GetScfRequestStatusResult, GetScfRequestStatusOutputArgs } from "./getScfRequestStatus";
export const getScfRequestStatus: typeof import("./getScfRequestStatus").getScfRequestStatus = null as any;
export const getScfRequestStatusOutput: typeof import("./getScfRequestStatus").getScfRequestStatusOutput = null as any;
utilities.lazyLoad(exports, ["getScfRequestStatus","getScfRequestStatusOutput"], () => require("./getScfRequestStatus"));

export { GetScfTriggersArgs, GetScfTriggersResult, GetScfTriggersOutputArgs } from "./getScfTriggers";
export const getScfTriggers: typeof import("./getScfTriggers").getScfTriggers = null as any;
export const getScfTriggersOutput: typeof import("./getScfTriggers").getScfTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getScfTriggers","getScfTriggersOutput"], () => require("./getScfTriggers"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetSesBlackEmailAddressArgs, GetSesBlackEmailAddressResult, GetSesBlackEmailAddressOutputArgs } from "./getSesBlackEmailAddress";
export const getSesBlackEmailAddress: typeof import("./getSesBlackEmailAddress").getSesBlackEmailAddress = null as any;
export const getSesBlackEmailAddressOutput: typeof import("./getSesBlackEmailAddress").getSesBlackEmailAddressOutput = null as any;
utilities.lazyLoad(exports, ["getSesBlackEmailAddress","getSesBlackEmailAddressOutput"], () => require("./getSesBlackEmailAddress"));

export { GetSesEmailIdentitiesArgs, GetSesEmailIdentitiesResult, GetSesEmailIdentitiesOutputArgs } from "./getSesEmailIdentities";
export const getSesEmailIdentities: typeof import("./getSesEmailIdentities").getSesEmailIdentities = null as any;
export const getSesEmailIdentitiesOutput: typeof import("./getSesEmailIdentities").getSesEmailIdentitiesOutput = null as any;
utilities.lazyLoad(exports, ["getSesEmailIdentities","getSesEmailIdentitiesOutput"], () => require("./getSesEmailIdentities"));

export { GetSesReceiversArgs, GetSesReceiversResult, GetSesReceiversOutputArgs } from "./getSesReceivers";
export const getSesReceivers: typeof import("./getSesReceivers").getSesReceivers = null as any;
export const getSesReceiversOutput: typeof import("./getSesReceivers").getSesReceiversOutput = null as any;
utilities.lazyLoad(exports, ["getSesReceivers","getSesReceiversOutput"], () => require("./getSesReceivers"));

export { GetSesSendEmailStatusArgs, GetSesSendEmailStatusResult, GetSesSendEmailStatusOutputArgs } from "./getSesSendEmailStatus";
export const getSesSendEmailStatus: typeof import("./getSesSendEmailStatus").getSesSendEmailStatus = null as any;
export const getSesSendEmailStatusOutput: typeof import("./getSesSendEmailStatus").getSesSendEmailStatusOutput = null as any;
utilities.lazyLoad(exports, ["getSesSendEmailStatus","getSesSendEmailStatusOutput"], () => require("./getSesSendEmailStatus"));

export { GetSesSendTasksArgs, GetSesSendTasksResult, GetSesSendTasksOutputArgs } from "./getSesSendTasks";
export const getSesSendTasks: typeof import("./getSesSendTasks").getSesSendTasks = null as any;
export const getSesSendTasksOutput: typeof import("./getSesSendTasks").getSesSendTasksOutput = null as any;
utilities.lazyLoad(exports, ["getSesSendTasks","getSesSendTasksOutput"], () => require("./getSesSendTasks"));

export { GetSesStatisticsReportArgs, GetSesStatisticsReportResult, GetSesStatisticsReportOutputArgs } from "./getSesStatisticsReport";
export const getSesStatisticsReport: typeof import("./getSesStatisticsReport").getSesStatisticsReport = null as any;
export const getSesStatisticsReportOutput: typeof import("./getSesStatisticsReport").getSesStatisticsReportOutput = null as any;
utilities.lazyLoad(exports, ["getSesStatisticsReport","getSesStatisticsReportOutput"], () => require("./getSesStatisticsReport"));

export { GetSqlserverAccountDbAttachmentsArgs, GetSqlserverAccountDbAttachmentsResult, GetSqlserverAccountDbAttachmentsOutputArgs } from "./getSqlserverAccountDbAttachments";
export const getSqlserverAccountDbAttachments: typeof import("./getSqlserverAccountDbAttachments").getSqlserverAccountDbAttachments = null as any;
export const getSqlserverAccountDbAttachmentsOutput: typeof import("./getSqlserverAccountDbAttachments").getSqlserverAccountDbAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverAccountDbAttachments","getSqlserverAccountDbAttachmentsOutput"], () => require("./getSqlserverAccountDbAttachments"));

export { GetSqlserverAccountsArgs, GetSqlserverAccountsResult, GetSqlserverAccountsOutputArgs } from "./getSqlserverAccounts";
export const getSqlserverAccounts: typeof import("./getSqlserverAccounts").getSqlserverAccounts = null as any;
export const getSqlserverAccountsOutput: typeof import("./getSqlserverAccounts").getSqlserverAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverAccounts","getSqlserverAccountsOutput"], () => require("./getSqlserverAccounts"));

export { GetSqlserverBackupByFlowIdArgs, GetSqlserverBackupByFlowIdResult, GetSqlserverBackupByFlowIdOutputArgs } from "./getSqlserverBackupByFlowId";
export const getSqlserverBackupByFlowId: typeof import("./getSqlserverBackupByFlowId").getSqlserverBackupByFlowId = null as any;
export const getSqlserverBackupByFlowIdOutput: typeof import("./getSqlserverBackupByFlowId").getSqlserverBackupByFlowIdOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverBackupByFlowId","getSqlserverBackupByFlowIdOutput"], () => require("./getSqlserverBackupByFlowId"));

export { GetSqlserverBackupCommandsArgs, GetSqlserverBackupCommandsResult, GetSqlserverBackupCommandsOutputArgs } from "./getSqlserverBackupCommands";
export const getSqlserverBackupCommands: typeof import("./getSqlserverBackupCommands").getSqlserverBackupCommands = null as any;
export const getSqlserverBackupCommandsOutput: typeof import("./getSqlserverBackupCommands").getSqlserverBackupCommandsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverBackupCommands","getSqlserverBackupCommandsOutput"], () => require("./getSqlserverBackupCommands"));

export { GetSqlserverBackupUploadSizeArgs, GetSqlserverBackupUploadSizeResult, GetSqlserverBackupUploadSizeOutputArgs } from "./getSqlserverBackupUploadSize";
export const getSqlserverBackupUploadSize: typeof import("./getSqlserverBackupUploadSize").getSqlserverBackupUploadSize = null as any;
export const getSqlserverBackupUploadSizeOutput: typeof import("./getSqlserverBackupUploadSize").getSqlserverBackupUploadSizeOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverBackupUploadSize","getSqlserverBackupUploadSizeOutput"], () => require("./getSqlserverBackupUploadSize"));

export { GetSqlserverBackupsArgs, GetSqlserverBackupsResult, GetSqlserverBackupsOutputArgs } from "./getSqlserverBackups";
export const getSqlserverBackups: typeof import("./getSqlserverBackups").getSqlserverBackups = null as any;
export const getSqlserverBackupsOutput: typeof import("./getSqlserverBackups").getSqlserverBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverBackups","getSqlserverBackupsOutput"], () => require("./getSqlserverBackups"));

export { GetSqlserverBasicInstancesArgs, GetSqlserverBasicInstancesResult, GetSqlserverBasicInstancesOutputArgs } from "./getSqlserverBasicInstances";
export const getSqlserverBasicInstances: typeof import("./getSqlserverBasicInstances").getSqlserverBasicInstances = null as any;
export const getSqlserverBasicInstancesOutput: typeof import("./getSqlserverBasicInstances").getSqlserverBasicInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverBasicInstances","getSqlserverBasicInstancesOutput"], () => require("./getSqlserverBasicInstances"));

export { GetSqlserverCrossRegionZoneArgs, GetSqlserverCrossRegionZoneResult, GetSqlserverCrossRegionZoneOutputArgs } from "./getSqlserverCrossRegionZone";
export const getSqlserverCrossRegionZone: typeof import("./getSqlserverCrossRegionZone").getSqlserverCrossRegionZone = null as any;
export const getSqlserverCrossRegionZoneOutput: typeof import("./getSqlserverCrossRegionZone").getSqlserverCrossRegionZoneOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverCrossRegionZone","getSqlserverCrossRegionZoneOutput"], () => require("./getSqlserverCrossRegionZone"));

export { GetSqlserverDbCharsetsArgs, GetSqlserverDbCharsetsResult, GetSqlserverDbCharsetsOutputArgs } from "./getSqlserverDbCharsets";
export const getSqlserverDbCharsets: typeof import("./getSqlserverDbCharsets").getSqlserverDbCharsets = null as any;
export const getSqlserverDbCharsetsOutput: typeof import("./getSqlserverDbCharsets").getSqlserverDbCharsetsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverDbCharsets","getSqlserverDbCharsetsOutput"], () => require("./getSqlserverDbCharsets"));

export { GetSqlserverDbsArgs, GetSqlserverDbsResult, GetSqlserverDbsOutputArgs } from "./getSqlserverDbs";
export const getSqlserverDbs: typeof import("./getSqlserverDbs").getSqlserverDbs = null as any;
export const getSqlserverDbsOutput: typeof import("./getSqlserverDbs").getSqlserverDbsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverDbs","getSqlserverDbsOutput"], () => require("./getSqlserverDbs"));

export { GetSqlserverDescHaLogArgs, GetSqlserverDescHaLogResult, GetSqlserverDescHaLogOutputArgs } from "./getSqlserverDescHaLog";
export const getSqlserverDescHaLog: typeof import("./getSqlserverDescHaLog").getSqlserverDescHaLog = null as any;
export const getSqlserverDescHaLogOutput: typeof import("./getSqlserverDescHaLog").getSqlserverDescHaLogOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverDescHaLog","getSqlserverDescHaLogOutput"], () => require("./getSqlserverDescHaLog"));

export { GetSqlserverInsAttributeArgs, GetSqlserverInsAttributeResult, GetSqlserverInsAttributeOutputArgs } from "./getSqlserverInsAttribute";
export const getSqlserverInsAttribute: typeof import("./getSqlserverInsAttribute").getSqlserverInsAttribute = null as any;
export const getSqlserverInsAttributeOutput: typeof import("./getSqlserverInsAttribute").getSqlserverInsAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverInsAttribute","getSqlserverInsAttributeOutput"], () => require("./getSqlserverInsAttribute"));

export { GetSqlserverInstanceParamRecordsArgs, GetSqlserverInstanceParamRecordsResult, GetSqlserverInstanceParamRecordsOutputArgs } from "./getSqlserverInstanceParamRecords";
export const getSqlserverInstanceParamRecords: typeof import("./getSqlserverInstanceParamRecords").getSqlserverInstanceParamRecords = null as any;
export const getSqlserverInstanceParamRecordsOutput: typeof import("./getSqlserverInstanceParamRecords").getSqlserverInstanceParamRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverInstanceParamRecords","getSqlserverInstanceParamRecordsOutput"], () => require("./getSqlserverInstanceParamRecords"));

export { GetSqlserverInstancesArgs, GetSqlserverInstancesResult, GetSqlserverInstancesOutputArgs } from "./getSqlserverInstances";
export const getSqlserverInstances: typeof import("./getSqlserverInstances").getSqlserverInstances = null as any;
export const getSqlserverInstancesOutput: typeof import("./getSqlserverInstances").getSqlserverInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverInstances","getSqlserverInstancesOutput"], () => require("./getSqlserverInstances"));

export { GetSqlserverProjectSecurityGroupsArgs, GetSqlserverProjectSecurityGroupsResult, GetSqlserverProjectSecurityGroupsOutputArgs } from "./getSqlserverProjectSecurityGroups";
export const getSqlserverProjectSecurityGroups: typeof import("./getSqlserverProjectSecurityGroups").getSqlserverProjectSecurityGroups = null as any;
export const getSqlserverProjectSecurityGroupsOutput: typeof import("./getSqlserverProjectSecurityGroups").getSqlserverProjectSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverProjectSecurityGroups","getSqlserverProjectSecurityGroupsOutput"], () => require("./getSqlserverProjectSecurityGroups"));

export { GetSqlserverPublishSubscribesArgs, GetSqlserverPublishSubscribesResult, GetSqlserverPublishSubscribesOutputArgs } from "./getSqlserverPublishSubscribes";
export const getSqlserverPublishSubscribes: typeof import("./getSqlserverPublishSubscribes").getSqlserverPublishSubscribes = null as any;
export const getSqlserverPublishSubscribesOutput: typeof import("./getSqlserverPublishSubscribes").getSqlserverPublishSubscribesOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverPublishSubscribes","getSqlserverPublishSubscribesOutput"], () => require("./getSqlserverPublishSubscribes"));

export { GetSqlserverQueryXeventArgs, GetSqlserverQueryXeventResult, GetSqlserverQueryXeventOutputArgs } from "./getSqlserverQueryXevent";
export const getSqlserverQueryXevent: typeof import("./getSqlserverQueryXevent").getSqlserverQueryXevent = null as any;
export const getSqlserverQueryXeventOutput: typeof import("./getSqlserverQueryXevent").getSqlserverQueryXeventOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverQueryXevent","getSqlserverQueryXeventOutput"], () => require("./getSqlserverQueryXevent"));

export { GetSqlserverReadonlyGroupsArgs, GetSqlserverReadonlyGroupsResult, GetSqlserverReadonlyGroupsOutputArgs } from "./getSqlserverReadonlyGroups";
export const getSqlserverReadonlyGroups: typeof import("./getSqlserverReadonlyGroups").getSqlserverReadonlyGroups = null as any;
export const getSqlserverReadonlyGroupsOutput: typeof import("./getSqlserverReadonlyGroups").getSqlserverReadonlyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverReadonlyGroups","getSqlserverReadonlyGroupsOutput"], () => require("./getSqlserverReadonlyGroups"));

export { GetSqlserverRegionsArgs, GetSqlserverRegionsResult, GetSqlserverRegionsOutputArgs } from "./getSqlserverRegions";
export const getSqlserverRegions: typeof import("./getSqlserverRegions").getSqlserverRegions = null as any;
export const getSqlserverRegionsOutput: typeof import("./getSqlserverRegions").getSqlserverRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverRegions","getSqlserverRegionsOutput"], () => require("./getSqlserverRegions"));

export { GetSqlserverRollbackTimeArgs, GetSqlserverRollbackTimeResult, GetSqlserverRollbackTimeOutputArgs } from "./getSqlserverRollbackTime";
export const getSqlserverRollbackTime: typeof import("./getSqlserverRollbackTime").getSqlserverRollbackTime = null as any;
export const getSqlserverRollbackTimeOutput: typeof import("./getSqlserverRollbackTime").getSqlserverRollbackTimeOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverRollbackTime","getSqlserverRollbackTimeOutput"], () => require("./getSqlserverRollbackTime"));

export { GetSqlserverSlowlogsArgs, GetSqlserverSlowlogsResult, GetSqlserverSlowlogsOutputArgs } from "./getSqlserverSlowlogs";
export const getSqlserverSlowlogs: typeof import("./getSqlserverSlowlogs").getSqlserverSlowlogs = null as any;
export const getSqlserverSlowlogsOutput: typeof import("./getSqlserverSlowlogs").getSqlserverSlowlogsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverSlowlogs","getSqlserverSlowlogsOutput"], () => require("./getSqlserverSlowlogs"));

export { GetSqlserverUploadBackupInfoArgs, GetSqlserverUploadBackupInfoResult, GetSqlserverUploadBackupInfoOutputArgs } from "./getSqlserverUploadBackupInfo";
export const getSqlserverUploadBackupInfo: typeof import("./getSqlserverUploadBackupInfo").getSqlserverUploadBackupInfo = null as any;
export const getSqlserverUploadBackupInfoOutput: typeof import("./getSqlserverUploadBackupInfo").getSqlserverUploadBackupInfoOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverUploadBackupInfo","getSqlserverUploadBackupInfoOutput"], () => require("./getSqlserverUploadBackupInfo"));

export { GetSqlserverUploadIncrementalInfoArgs, GetSqlserverUploadIncrementalInfoResult, GetSqlserverUploadIncrementalInfoOutputArgs } from "./getSqlserverUploadIncrementalInfo";
export const getSqlserverUploadIncrementalInfo: typeof import("./getSqlserverUploadIncrementalInfo").getSqlserverUploadIncrementalInfo = null as any;
export const getSqlserverUploadIncrementalInfoOutput: typeof import("./getSqlserverUploadIncrementalInfo").getSqlserverUploadIncrementalInfoOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverUploadIncrementalInfo","getSqlserverUploadIncrementalInfoOutput"], () => require("./getSqlserverUploadIncrementalInfo"));

export { GetSqlserverZoneConfigArgs, GetSqlserverZoneConfigResult, GetSqlserverZoneConfigOutputArgs } from "./getSqlserverZoneConfig";
export const getSqlserverZoneConfig: typeof import("./getSqlserverZoneConfig").getSqlserverZoneConfig = null as any;
export const getSqlserverZoneConfigOutput: typeof import("./getSqlserverZoneConfig").getSqlserverZoneConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserverZoneConfig","getSqlserverZoneConfigOutput"], () => require("./getSqlserverZoneConfig"));

export { GetSslCertificatesArgs, GetSslCertificatesResult, GetSslCertificatesOutputArgs } from "./getSslCertificates";
export const getSslCertificates: typeof import("./getSslCertificates").getSslCertificates = null as any;
export const getSslCertificatesOutput: typeof import("./getSslCertificates").getSslCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getSslCertificates","getSslCertificatesOutput"], () => require("./getSslCertificates"));

export { GetSslDescribeCertificateArgs, GetSslDescribeCertificateResult, GetSslDescribeCertificateOutputArgs } from "./getSslDescribeCertificate";
export const getSslDescribeCertificate: typeof import("./getSslDescribeCertificate").getSslDescribeCertificate = null as any;
export const getSslDescribeCertificateOutput: typeof import("./getSslDescribeCertificate").getSslDescribeCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeCertificate","getSslDescribeCertificateOutput"], () => require("./getSslDescribeCertificate"));

export { GetSslDescribeCompaniesArgs, GetSslDescribeCompaniesResult, GetSslDescribeCompaniesOutputArgs } from "./getSslDescribeCompanies";
export const getSslDescribeCompanies: typeof import("./getSslDescribeCompanies").getSslDescribeCompanies = null as any;
export const getSslDescribeCompaniesOutput: typeof import("./getSslDescribeCompanies").getSslDescribeCompaniesOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeCompanies","getSslDescribeCompaniesOutput"], () => require("./getSslDescribeCompanies"));

export { GetSslDescribeHostApiGatewayInstanceListArgs, GetSslDescribeHostApiGatewayInstanceListResult, GetSslDescribeHostApiGatewayInstanceListOutputArgs } from "./getSslDescribeHostApiGatewayInstanceList";
export const getSslDescribeHostApiGatewayInstanceList: typeof import("./getSslDescribeHostApiGatewayInstanceList").getSslDescribeHostApiGatewayInstanceList = null as any;
export const getSslDescribeHostApiGatewayInstanceListOutput: typeof import("./getSslDescribeHostApiGatewayInstanceList").getSslDescribeHostApiGatewayInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostApiGatewayInstanceList","getSslDescribeHostApiGatewayInstanceListOutput"], () => require("./getSslDescribeHostApiGatewayInstanceList"));

export { GetSslDescribeHostCdnInstanceListArgs, GetSslDescribeHostCdnInstanceListResult, GetSslDescribeHostCdnInstanceListOutputArgs } from "./getSslDescribeHostCdnInstanceList";
export const getSslDescribeHostCdnInstanceList: typeof import("./getSslDescribeHostCdnInstanceList").getSslDescribeHostCdnInstanceList = null as any;
export const getSslDescribeHostCdnInstanceListOutput: typeof import("./getSslDescribeHostCdnInstanceList").getSslDescribeHostCdnInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostCdnInstanceList","getSslDescribeHostCdnInstanceListOutput"], () => require("./getSslDescribeHostCdnInstanceList"));

export { GetSslDescribeHostClbInstanceListArgs, GetSslDescribeHostClbInstanceListResult, GetSslDescribeHostClbInstanceListOutputArgs } from "./getSslDescribeHostClbInstanceList";
export const getSslDescribeHostClbInstanceList: typeof import("./getSslDescribeHostClbInstanceList").getSslDescribeHostClbInstanceList = null as any;
export const getSslDescribeHostClbInstanceListOutput: typeof import("./getSslDescribeHostClbInstanceList").getSslDescribeHostClbInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostClbInstanceList","getSslDescribeHostClbInstanceListOutput"], () => require("./getSslDescribeHostClbInstanceList"));

export { GetSslDescribeHostCosInstanceListArgs, GetSslDescribeHostCosInstanceListResult, GetSslDescribeHostCosInstanceListOutputArgs } from "./getSslDescribeHostCosInstanceList";
export const getSslDescribeHostCosInstanceList: typeof import("./getSslDescribeHostCosInstanceList").getSslDescribeHostCosInstanceList = null as any;
export const getSslDescribeHostCosInstanceListOutput: typeof import("./getSslDescribeHostCosInstanceList").getSslDescribeHostCosInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostCosInstanceList","getSslDescribeHostCosInstanceListOutput"], () => require("./getSslDescribeHostCosInstanceList"));

export { GetSslDescribeHostDdosInstanceListArgs, GetSslDescribeHostDdosInstanceListResult, GetSslDescribeHostDdosInstanceListOutputArgs } from "./getSslDescribeHostDdosInstanceList";
export const getSslDescribeHostDdosInstanceList: typeof import("./getSslDescribeHostDdosInstanceList").getSslDescribeHostDdosInstanceList = null as any;
export const getSslDescribeHostDdosInstanceListOutput: typeof import("./getSslDescribeHostDdosInstanceList").getSslDescribeHostDdosInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostDdosInstanceList","getSslDescribeHostDdosInstanceListOutput"], () => require("./getSslDescribeHostDdosInstanceList"));

export { GetSslDescribeHostDeployRecordArgs, GetSslDescribeHostDeployRecordResult, GetSslDescribeHostDeployRecordOutputArgs } from "./getSslDescribeHostDeployRecord";
export const getSslDescribeHostDeployRecord: typeof import("./getSslDescribeHostDeployRecord").getSslDescribeHostDeployRecord = null as any;
export const getSslDescribeHostDeployRecordOutput: typeof import("./getSslDescribeHostDeployRecord").getSslDescribeHostDeployRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostDeployRecord","getSslDescribeHostDeployRecordOutput"], () => require("./getSslDescribeHostDeployRecord"));

export { GetSslDescribeHostDeployRecordDetailArgs, GetSslDescribeHostDeployRecordDetailResult, GetSslDescribeHostDeployRecordDetailOutputArgs } from "./getSslDescribeHostDeployRecordDetail";
export const getSslDescribeHostDeployRecordDetail: typeof import("./getSslDescribeHostDeployRecordDetail").getSslDescribeHostDeployRecordDetail = null as any;
export const getSslDescribeHostDeployRecordDetailOutput: typeof import("./getSslDescribeHostDeployRecordDetail").getSslDescribeHostDeployRecordDetailOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostDeployRecordDetail","getSslDescribeHostDeployRecordDetailOutput"], () => require("./getSslDescribeHostDeployRecordDetail"));

export { GetSslDescribeHostLighthouseInstanceListArgs, GetSslDescribeHostLighthouseInstanceListResult, GetSslDescribeHostLighthouseInstanceListOutputArgs } from "./getSslDescribeHostLighthouseInstanceList";
export const getSslDescribeHostLighthouseInstanceList: typeof import("./getSslDescribeHostLighthouseInstanceList").getSslDescribeHostLighthouseInstanceList = null as any;
export const getSslDescribeHostLighthouseInstanceListOutput: typeof import("./getSslDescribeHostLighthouseInstanceList").getSslDescribeHostLighthouseInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostLighthouseInstanceList","getSslDescribeHostLighthouseInstanceListOutput"], () => require("./getSslDescribeHostLighthouseInstanceList"));

export { GetSslDescribeHostLiveInstanceListArgs, GetSslDescribeHostLiveInstanceListResult, GetSslDescribeHostLiveInstanceListOutputArgs } from "./getSslDescribeHostLiveInstanceList";
export const getSslDescribeHostLiveInstanceList: typeof import("./getSslDescribeHostLiveInstanceList").getSslDescribeHostLiveInstanceList = null as any;
export const getSslDescribeHostLiveInstanceListOutput: typeof import("./getSslDescribeHostLiveInstanceList").getSslDescribeHostLiveInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostLiveInstanceList","getSslDescribeHostLiveInstanceListOutput"], () => require("./getSslDescribeHostLiveInstanceList"));

export { GetSslDescribeHostTeoInstanceListArgs, GetSslDescribeHostTeoInstanceListResult, GetSslDescribeHostTeoInstanceListOutputArgs } from "./getSslDescribeHostTeoInstanceList";
export const getSslDescribeHostTeoInstanceList: typeof import("./getSslDescribeHostTeoInstanceList").getSslDescribeHostTeoInstanceList = null as any;
export const getSslDescribeHostTeoInstanceListOutput: typeof import("./getSslDescribeHostTeoInstanceList").getSslDescribeHostTeoInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostTeoInstanceList","getSslDescribeHostTeoInstanceListOutput"], () => require("./getSslDescribeHostTeoInstanceList"));

export { GetSslDescribeHostTkeInstanceListArgs, GetSslDescribeHostTkeInstanceListResult, GetSslDescribeHostTkeInstanceListOutputArgs } from "./getSslDescribeHostTkeInstanceList";
export const getSslDescribeHostTkeInstanceList: typeof import("./getSslDescribeHostTkeInstanceList").getSslDescribeHostTkeInstanceList = null as any;
export const getSslDescribeHostTkeInstanceListOutput: typeof import("./getSslDescribeHostTkeInstanceList").getSslDescribeHostTkeInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostTkeInstanceList","getSslDescribeHostTkeInstanceListOutput"], () => require("./getSslDescribeHostTkeInstanceList"));

export { GetSslDescribeHostUpdateRecordArgs, GetSslDescribeHostUpdateRecordResult, GetSslDescribeHostUpdateRecordOutputArgs } from "./getSslDescribeHostUpdateRecord";
export const getSslDescribeHostUpdateRecord: typeof import("./getSslDescribeHostUpdateRecord").getSslDescribeHostUpdateRecord = null as any;
export const getSslDescribeHostUpdateRecordOutput: typeof import("./getSslDescribeHostUpdateRecord").getSslDescribeHostUpdateRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostUpdateRecord","getSslDescribeHostUpdateRecordOutput"], () => require("./getSslDescribeHostUpdateRecord"));

export { GetSslDescribeHostUpdateRecordDetailArgs, GetSslDescribeHostUpdateRecordDetailResult, GetSslDescribeHostUpdateRecordDetailOutputArgs } from "./getSslDescribeHostUpdateRecordDetail";
export const getSslDescribeHostUpdateRecordDetail: typeof import("./getSslDescribeHostUpdateRecordDetail").getSslDescribeHostUpdateRecordDetail = null as any;
export const getSslDescribeHostUpdateRecordDetailOutput: typeof import("./getSslDescribeHostUpdateRecordDetail").getSslDescribeHostUpdateRecordDetailOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostUpdateRecordDetail","getSslDescribeHostUpdateRecordDetailOutput"], () => require("./getSslDescribeHostUpdateRecordDetail"));

export { GetSslDescribeHostVodInstanceListArgs, GetSslDescribeHostVodInstanceListResult, GetSslDescribeHostVodInstanceListOutputArgs } from "./getSslDescribeHostVodInstanceList";
export const getSslDescribeHostVodInstanceList: typeof import("./getSslDescribeHostVodInstanceList").getSslDescribeHostVodInstanceList = null as any;
export const getSslDescribeHostVodInstanceListOutput: typeof import("./getSslDescribeHostVodInstanceList").getSslDescribeHostVodInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostVodInstanceList","getSslDescribeHostVodInstanceListOutput"], () => require("./getSslDescribeHostVodInstanceList"));

export { GetSslDescribeHostWafInstanceListArgs, GetSslDescribeHostWafInstanceListResult, GetSslDescribeHostWafInstanceListOutputArgs } from "./getSslDescribeHostWafInstanceList";
export const getSslDescribeHostWafInstanceList: typeof import("./getSslDescribeHostWafInstanceList").getSslDescribeHostWafInstanceList = null as any;
export const getSslDescribeHostWafInstanceListOutput: typeof import("./getSslDescribeHostWafInstanceList").getSslDescribeHostWafInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeHostWafInstanceList","getSslDescribeHostWafInstanceListOutput"], () => require("./getSslDescribeHostWafInstanceList"));

export { GetSslDescribeManagerDetailArgs, GetSslDescribeManagerDetailResult, GetSslDescribeManagerDetailOutputArgs } from "./getSslDescribeManagerDetail";
export const getSslDescribeManagerDetail: typeof import("./getSslDescribeManagerDetail").getSslDescribeManagerDetail = null as any;
export const getSslDescribeManagerDetailOutput: typeof import("./getSslDescribeManagerDetail").getSslDescribeManagerDetailOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeManagerDetail","getSslDescribeManagerDetailOutput"], () => require("./getSslDescribeManagerDetail"));

export { GetSslDescribeManagersArgs, GetSslDescribeManagersResult, GetSslDescribeManagersOutputArgs } from "./getSslDescribeManagers";
export const getSslDescribeManagers: typeof import("./getSslDescribeManagers").getSslDescribeManagers = null as any;
export const getSslDescribeManagersOutput: typeof import("./getSslDescribeManagers").getSslDescribeManagersOutput = null as any;
utilities.lazyLoad(exports, ["getSslDescribeManagers","getSslDescribeManagersOutput"], () => require("./getSslDescribeManagers"));

export { GetSsmProductsArgs, GetSsmProductsResult, GetSsmProductsOutputArgs } from "./getSsmProducts";
export const getSsmProducts: typeof import("./getSsmProducts").getSsmProducts = null as any;
export const getSsmProductsOutput: typeof import("./getSsmProducts").getSsmProductsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmProducts","getSsmProductsOutput"], () => require("./getSsmProducts"));

export { GetSsmRotationDetailArgs, GetSsmRotationDetailResult, GetSsmRotationDetailOutputArgs } from "./getSsmRotationDetail";
export const getSsmRotationDetail: typeof import("./getSsmRotationDetail").getSsmRotationDetail = null as any;
export const getSsmRotationDetailOutput: typeof import("./getSsmRotationDetail").getSsmRotationDetailOutput = null as any;
utilities.lazyLoad(exports, ["getSsmRotationDetail","getSsmRotationDetailOutput"], () => require("./getSsmRotationDetail"));

export { GetSsmRotationHistoryArgs, GetSsmRotationHistoryResult, GetSsmRotationHistoryOutputArgs } from "./getSsmRotationHistory";
export const getSsmRotationHistory: typeof import("./getSsmRotationHistory").getSsmRotationHistory = null as any;
export const getSsmRotationHistoryOutput: typeof import("./getSsmRotationHistory").getSsmRotationHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getSsmRotationHistory","getSsmRotationHistoryOutput"], () => require("./getSsmRotationHistory"));

export { GetSsmSecretVersionsArgs, GetSsmSecretVersionsResult, GetSsmSecretVersionsOutputArgs } from "./getSsmSecretVersions";
export const getSsmSecretVersions: typeof import("./getSsmSecretVersions").getSsmSecretVersions = null as any;
export const getSsmSecretVersionsOutput: typeof import("./getSsmSecretVersions").getSsmSecretVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmSecretVersions","getSsmSecretVersionsOutput"], () => require("./getSsmSecretVersions"));

export { GetSsmSecretsArgs, GetSsmSecretsResult, GetSsmSecretsOutputArgs } from "./getSsmSecrets";
export const getSsmSecrets: typeof import("./getSsmSecrets").getSsmSecrets = null as any;
export const getSsmSecretsOutput: typeof import("./getSsmSecrets").getSsmSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmSecrets","getSsmSecretsOutput"], () => require("./getSsmSecrets"));

export { GetSsmServiceStatusArgs, GetSsmServiceStatusResult, GetSsmServiceStatusOutputArgs } from "./getSsmServiceStatus";
export const getSsmServiceStatus: typeof import("./getSsmServiceStatus").getSsmServiceStatus = null as any;
export const getSsmServiceStatusOutput: typeof import("./getSsmServiceStatus").getSsmServiceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getSsmServiceStatus","getSsmServiceStatusOutput"], () => require("./getSsmServiceStatus"));

export { GetSsmSshKeyPairValueArgs, GetSsmSshKeyPairValueResult, GetSsmSshKeyPairValueOutputArgs } from "./getSsmSshKeyPairValue";
export const getSsmSshKeyPairValue: typeof import("./getSsmSshKeyPairValue").getSsmSshKeyPairValue = null as any;
export const getSsmSshKeyPairValueOutput: typeof import("./getSsmSshKeyPairValue").getSsmSshKeyPairValueOutput = null as any;
utilities.lazyLoad(exports, ["getSsmSshKeyPairValue","getSsmSshKeyPairValueOutput"], () => require("./getSsmSshKeyPairValue"));

export { GetStsCallerIdentityArgs, GetStsCallerIdentityResult, GetStsCallerIdentityOutputArgs } from "./getStsCallerIdentity";
export const getStsCallerIdentity: typeof import("./getStsCallerIdentity").getStsCallerIdentity = null as any;
export const getStsCallerIdentityOutput: typeof import("./getStsCallerIdentity").getStsCallerIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getStsCallerIdentity","getStsCallerIdentityOutput"], () => require("./getStsCallerIdentity"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetTatAgentArgs, GetTatAgentResult, GetTatAgentOutputArgs } from "./getTatAgent";
export const getTatAgent: typeof import("./getTatAgent").getTatAgent = null as any;
export const getTatAgentOutput: typeof import("./getTatAgent").getTatAgentOutput = null as any;
utilities.lazyLoad(exports, ["getTatAgent","getTatAgentOutput"], () => require("./getTatAgent"));

export { GetTatCommandArgs, GetTatCommandResult, GetTatCommandOutputArgs } from "./getTatCommand";
export const getTatCommand: typeof import("./getTatCommand").getTatCommand = null as any;
export const getTatCommandOutput: typeof import("./getTatCommand").getTatCommandOutput = null as any;
utilities.lazyLoad(exports, ["getTatCommand","getTatCommandOutput"], () => require("./getTatCommand"));

export { GetTatInvocationTaskArgs, GetTatInvocationTaskResult, GetTatInvocationTaskOutputArgs } from "./getTatInvocationTask";
export const getTatInvocationTask: typeof import("./getTatInvocationTask").getTatInvocationTask = null as any;
export const getTatInvocationTaskOutput: typeof import("./getTatInvocationTask").getTatInvocationTaskOutput = null as any;
utilities.lazyLoad(exports, ["getTatInvocationTask","getTatInvocationTaskOutput"], () => require("./getTatInvocationTask"));

export { GetTatInvokerArgs, GetTatInvokerResult, GetTatInvokerOutputArgs } from "./getTatInvoker";
export const getTatInvoker: typeof import("./getTatInvoker").getTatInvoker = null as any;
export const getTatInvokerOutput: typeof import("./getTatInvoker").getTatInvokerOutput = null as any;
utilities.lazyLoad(exports, ["getTatInvoker","getTatInvokerOutput"], () => require("./getTatInvoker"));

export { GetTatInvokerRecordsArgs, GetTatInvokerRecordsResult, GetTatInvokerRecordsOutputArgs } from "./getTatInvokerRecords";
export const getTatInvokerRecords: typeof import("./getTatInvokerRecords").getTatInvokerRecords = null as any;
export const getTatInvokerRecordsOutput: typeof import("./getTatInvokerRecords").getTatInvokerRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getTatInvokerRecords","getTatInvokerRecordsOutput"], () => require("./getTatInvokerRecords"));

export { GetTcaplusClustersArgs, GetTcaplusClustersResult, GetTcaplusClustersOutputArgs } from "./getTcaplusClusters";
export const getTcaplusClusters: typeof import("./getTcaplusClusters").getTcaplusClusters = null as any;
export const getTcaplusClustersOutput: typeof import("./getTcaplusClusters").getTcaplusClustersOutput = null as any;
utilities.lazyLoad(exports, ["getTcaplusClusters","getTcaplusClustersOutput"], () => require("./getTcaplusClusters"));

export { GetTcaplusIdlsArgs, GetTcaplusIdlsResult, GetTcaplusIdlsOutputArgs } from "./getTcaplusIdls";
export const getTcaplusIdls: typeof import("./getTcaplusIdls").getTcaplusIdls = null as any;
export const getTcaplusIdlsOutput: typeof import("./getTcaplusIdls").getTcaplusIdlsOutput = null as any;
utilities.lazyLoad(exports, ["getTcaplusIdls","getTcaplusIdlsOutput"], () => require("./getTcaplusIdls"));

export { GetTcaplusTablegroupsArgs, GetTcaplusTablegroupsResult, GetTcaplusTablegroupsOutputArgs } from "./getTcaplusTablegroups";
export const getTcaplusTablegroups: typeof import("./getTcaplusTablegroups").getTcaplusTablegroups = null as any;
export const getTcaplusTablegroupsOutput: typeof import("./getTcaplusTablegroups").getTcaplusTablegroupsOutput = null as any;
utilities.lazyLoad(exports, ["getTcaplusTablegroups","getTcaplusTablegroupsOutput"], () => require("./getTcaplusTablegroups"));

export { GetTcaplusTablesArgs, GetTcaplusTablesResult, GetTcaplusTablesOutputArgs } from "./getTcaplusTables";
export const getTcaplusTables: typeof import("./getTcaplusTables").getTcaplusTables = null as any;
export const getTcaplusTablesOutput: typeof import("./getTcaplusTables").getTcaplusTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTcaplusTables","getTcaplusTablesOutput"], () => require("./getTcaplusTables"));

export { GetTcmMeshArgs, GetTcmMeshResult, GetTcmMeshOutputArgs } from "./getTcmMesh";
export const getTcmMesh: typeof import("./getTcmMesh").getTcmMesh = null as any;
export const getTcmMeshOutput: typeof import("./getTcmMesh").getTcmMeshOutput = null as any;
utilities.lazyLoad(exports, ["getTcmMesh","getTcmMeshOutput"], () => require("./getTcmMesh"));

export { GetTcmqQueueArgs, GetTcmqQueueResult, GetTcmqQueueOutputArgs } from "./getTcmqQueue";
export const getTcmqQueue: typeof import("./getTcmqQueue").getTcmqQueue = null as any;
export const getTcmqQueueOutput: typeof import("./getTcmqQueue").getTcmqQueueOutput = null as any;
utilities.lazyLoad(exports, ["getTcmqQueue","getTcmqQueueOutput"], () => require("./getTcmqQueue"));

export { GetTcmqSubscribeArgs, GetTcmqSubscribeResult, GetTcmqSubscribeOutputArgs } from "./getTcmqSubscribe";
export const getTcmqSubscribe: typeof import("./getTcmqSubscribe").getTcmqSubscribe = null as any;
export const getTcmqSubscribeOutput: typeof import("./getTcmqSubscribe").getTcmqSubscribeOutput = null as any;
utilities.lazyLoad(exports, ["getTcmqSubscribe","getTcmqSubscribeOutput"], () => require("./getTcmqSubscribe"));

export { GetTcmqTopicArgs, GetTcmqTopicResult, GetTcmqTopicOutputArgs } from "./getTcmqTopic";
export const getTcmqTopic: typeof import("./getTcmqTopic").getTcmqTopic = null as any;
export const getTcmqTopicOutput: typeof import("./getTcmqTopic").getTcmqTopicOutput = null as any;
utilities.lazyLoad(exports, ["getTcmqTopic","getTcmqTopicOutput"], () => require("./getTcmqTopic"));

export { GetTcrImageManifestsArgs, GetTcrImageManifestsResult, GetTcrImageManifestsOutputArgs } from "./getTcrImageManifests";
export const getTcrImageManifests: typeof import("./getTcrImageManifests").getTcrImageManifests = null as any;
export const getTcrImageManifestsOutput: typeof import("./getTcrImageManifests").getTcrImageManifestsOutput = null as any;
utilities.lazyLoad(exports, ["getTcrImageManifests","getTcrImageManifestsOutput"], () => require("./getTcrImageManifests"));

export { GetTcrImagesArgs, GetTcrImagesResult, GetTcrImagesOutputArgs } from "./getTcrImages";
export const getTcrImages: typeof import("./getTcrImages").getTcrImages = null as any;
export const getTcrImagesOutput: typeof import("./getTcrImages").getTcrImagesOutput = null as any;
utilities.lazyLoad(exports, ["getTcrImages","getTcrImagesOutput"], () => require("./getTcrImages"));

export { GetTcrInstancesArgs, GetTcrInstancesResult, GetTcrInstancesOutputArgs } from "./getTcrInstances";
export const getTcrInstances: typeof import("./getTcrInstances").getTcrInstances = null as any;
export const getTcrInstancesOutput: typeof import("./getTcrInstances").getTcrInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTcrInstances","getTcrInstancesOutput"], () => require("./getTcrInstances"));

export { GetTcrNamespacesArgs, GetTcrNamespacesResult, GetTcrNamespacesOutputArgs } from "./getTcrNamespaces";
export const getTcrNamespaces: typeof import("./getTcrNamespaces").getTcrNamespaces = null as any;
export const getTcrNamespacesOutput: typeof import("./getTcrNamespaces").getTcrNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getTcrNamespaces","getTcrNamespacesOutput"], () => require("./getTcrNamespaces"));

export { GetTcrReplicationInstanceCreateTasksArgs, GetTcrReplicationInstanceCreateTasksResult, GetTcrReplicationInstanceCreateTasksOutputArgs } from "./getTcrReplicationInstanceCreateTasks";
export const getTcrReplicationInstanceCreateTasks: typeof import("./getTcrReplicationInstanceCreateTasks").getTcrReplicationInstanceCreateTasks = null as any;
export const getTcrReplicationInstanceCreateTasksOutput: typeof import("./getTcrReplicationInstanceCreateTasks").getTcrReplicationInstanceCreateTasksOutput = null as any;
utilities.lazyLoad(exports, ["getTcrReplicationInstanceCreateTasks","getTcrReplicationInstanceCreateTasksOutput"], () => require("./getTcrReplicationInstanceCreateTasks"));

export { GetTcrReplicationInstanceSyncStatusArgs, GetTcrReplicationInstanceSyncStatusResult, GetTcrReplicationInstanceSyncStatusOutputArgs } from "./getTcrReplicationInstanceSyncStatus";
export const getTcrReplicationInstanceSyncStatus: typeof import("./getTcrReplicationInstanceSyncStatus").getTcrReplicationInstanceSyncStatus = null as any;
export const getTcrReplicationInstanceSyncStatusOutput: typeof import("./getTcrReplicationInstanceSyncStatus").getTcrReplicationInstanceSyncStatusOutput = null as any;
utilities.lazyLoad(exports, ["getTcrReplicationInstanceSyncStatus","getTcrReplicationInstanceSyncStatusOutput"], () => require("./getTcrReplicationInstanceSyncStatus"));

export { GetTcrRepositoriesArgs, GetTcrRepositoriesResult, GetTcrRepositoriesOutputArgs } from "./getTcrRepositories";
export const getTcrRepositories: typeof import("./getTcrRepositories").getTcrRepositories = null as any;
export const getTcrRepositoriesOutput: typeof import("./getTcrRepositories").getTcrRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getTcrRepositories","getTcrRepositoriesOutput"], () => require("./getTcrRepositories"));

export { GetTcrTagRetentionExecutionTasksArgs, GetTcrTagRetentionExecutionTasksResult, GetTcrTagRetentionExecutionTasksOutputArgs } from "./getTcrTagRetentionExecutionTasks";
export const getTcrTagRetentionExecutionTasks: typeof import("./getTcrTagRetentionExecutionTasks").getTcrTagRetentionExecutionTasks = null as any;
export const getTcrTagRetentionExecutionTasksOutput: typeof import("./getTcrTagRetentionExecutionTasks").getTcrTagRetentionExecutionTasksOutput = null as any;
utilities.lazyLoad(exports, ["getTcrTagRetentionExecutionTasks","getTcrTagRetentionExecutionTasksOutput"], () => require("./getTcrTagRetentionExecutionTasks"));

export { GetTcrTagRetentionExecutionsArgs, GetTcrTagRetentionExecutionsResult, GetTcrTagRetentionExecutionsOutputArgs } from "./getTcrTagRetentionExecutions";
export const getTcrTagRetentionExecutions: typeof import("./getTcrTagRetentionExecutions").getTcrTagRetentionExecutions = null as any;
export const getTcrTagRetentionExecutionsOutput: typeof import("./getTcrTagRetentionExecutions").getTcrTagRetentionExecutionsOutput = null as any;
utilities.lazyLoad(exports, ["getTcrTagRetentionExecutions","getTcrTagRetentionExecutionsOutput"], () => require("./getTcrTagRetentionExecutions"));

export { GetTcrTokensArgs, GetTcrTokensResult, GetTcrTokensOutputArgs } from "./getTcrTokens";
export const getTcrTokens: typeof import("./getTcrTokens").getTcrTokens = null as any;
export const getTcrTokensOutput: typeof import("./getTcrTokens").getTcrTokensOutput = null as any;
utilities.lazyLoad(exports, ["getTcrTokens","getTcrTokensOutput"], () => require("./getTcrTokens"));

export { GetTcrVpcAttachmentsArgs, GetTcrVpcAttachmentsResult, GetTcrVpcAttachmentsOutputArgs } from "./getTcrVpcAttachments";
export const getTcrVpcAttachments: typeof import("./getTcrVpcAttachments").getTcrVpcAttachments = null as any;
export const getTcrVpcAttachmentsOutput: typeof import("./getTcrVpcAttachments").getTcrVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getTcrVpcAttachments","getTcrVpcAttachmentsOutput"], () => require("./getTcrVpcAttachments"));

export { GetTcrWebhookTriggerLogsArgs, GetTcrWebhookTriggerLogsResult, GetTcrWebhookTriggerLogsOutputArgs } from "./getTcrWebhookTriggerLogs";
export const getTcrWebhookTriggerLogs: typeof import("./getTcrWebhookTriggerLogs").getTcrWebhookTriggerLogs = null as any;
export const getTcrWebhookTriggerLogsOutput: typeof import("./getTcrWebhookTriggerLogs").getTcrWebhookTriggerLogsOutput = null as any;
utilities.lazyLoad(exports, ["getTcrWebhookTriggerLogs","getTcrWebhookTriggerLogsOutput"], () => require("./getTcrWebhookTriggerLogs"));

export { GetTdcpgClustersArgs, GetTdcpgClustersResult, GetTdcpgClustersOutputArgs } from "./getTdcpgClusters";
export const getTdcpgClusters: typeof import("./getTdcpgClusters").getTdcpgClusters = null as any;
export const getTdcpgClustersOutput: typeof import("./getTdcpgClusters").getTdcpgClustersOutput = null as any;
utilities.lazyLoad(exports, ["getTdcpgClusters","getTdcpgClustersOutput"], () => require("./getTdcpgClusters"));

export { GetTdcpgInstancesArgs, GetTdcpgInstancesResult, GetTdcpgInstancesOutputArgs } from "./getTdcpgInstances";
export const getTdcpgInstances: typeof import("./getTdcpgInstances").getTdcpgInstances = null as any;
export const getTdcpgInstancesOutput: typeof import("./getTdcpgInstances").getTdcpgInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTdcpgInstances","getTdcpgInstancesOutput"], () => require("./getTdcpgInstances"));

export { GetTdmqEnvironmentAttributesArgs, GetTdmqEnvironmentAttributesResult, GetTdmqEnvironmentAttributesOutputArgs } from "./getTdmqEnvironmentAttributes";
export const getTdmqEnvironmentAttributes: typeof import("./getTdmqEnvironmentAttributes").getTdmqEnvironmentAttributes = null as any;
export const getTdmqEnvironmentAttributesOutput: typeof import("./getTdmqEnvironmentAttributes").getTdmqEnvironmentAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqEnvironmentAttributes","getTdmqEnvironmentAttributesOutput"], () => require("./getTdmqEnvironmentAttributes"));

export { GetTdmqProInstanceDetailArgs, GetTdmqProInstanceDetailResult, GetTdmqProInstanceDetailOutputArgs } from "./getTdmqProInstanceDetail";
export const getTdmqProInstanceDetail: typeof import("./getTdmqProInstanceDetail").getTdmqProInstanceDetail = null as any;
export const getTdmqProInstanceDetailOutput: typeof import("./getTdmqProInstanceDetail").getTdmqProInstanceDetailOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqProInstanceDetail","getTdmqProInstanceDetailOutput"], () => require("./getTdmqProInstanceDetail"));

export { GetTdmqProInstancesArgs, GetTdmqProInstancesResult, GetTdmqProInstancesOutputArgs } from "./getTdmqProInstances";
export const getTdmqProInstances: typeof import("./getTdmqProInstances").getTdmqProInstances = null as any;
export const getTdmqProInstancesOutput: typeof import("./getTdmqProInstances").getTdmqProInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqProInstances","getTdmqProInstancesOutput"], () => require("./getTdmqProInstances"));

export { GetTdmqPublisherSummaryArgs, GetTdmqPublisherSummaryResult, GetTdmqPublisherSummaryOutputArgs } from "./getTdmqPublisherSummary";
export const getTdmqPublisherSummary: typeof import("./getTdmqPublisherSummary").getTdmqPublisherSummary = null as any;
export const getTdmqPublisherSummaryOutput: typeof import("./getTdmqPublisherSummary").getTdmqPublisherSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqPublisherSummary","getTdmqPublisherSummaryOutput"], () => require("./getTdmqPublisherSummary"));

export { GetTdmqPublishersArgs, GetTdmqPublishersResult, GetTdmqPublishersOutputArgs } from "./getTdmqPublishers";
export const getTdmqPublishers: typeof import("./getTdmqPublishers").getTdmqPublishers = null as any;
export const getTdmqPublishersOutput: typeof import("./getTdmqPublishers").getTdmqPublishersOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqPublishers","getTdmqPublishersOutput"], () => require("./getTdmqPublishers"));

export { GetTdmqRabbitmqNodeListArgs, GetTdmqRabbitmqNodeListResult, GetTdmqRabbitmqNodeListOutputArgs } from "./getTdmqRabbitmqNodeList";
export const getTdmqRabbitmqNodeList: typeof import("./getTdmqRabbitmqNodeList").getTdmqRabbitmqNodeList = null as any;
export const getTdmqRabbitmqNodeListOutput: typeof import("./getTdmqRabbitmqNodeList").getTdmqRabbitmqNodeListOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRabbitmqNodeList","getTdmqRabbitmqNodeListOutput"], () => require("./getTdmqRabbitmqNodeList"));

export { GetTdmqRabbitmqVipInstanceArgs, GetTdmqRabbitmqVipInstanceResult, GetTdmqRabbitmqVipInstanceOutputArgs } from "./getTdmqRabbitmqVipInstance";
export const getTdmqRabbitmqVipInstance: typeof import("./getTdmqRabbitmqVipInstance").getTdmqRabbitmqVipInstance = null as any;
export const getTdmqRabbitmqVipInstanceOutput: typeof import("./getTdmqRabbitmqVipInstance").getTdmqRabbitmqVipInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRabbitmqVipInstance","getTdmqRabbitmqVipInstanceOutput"], () => require("./getTdmqRabbitmqVipInstance"));

export { GetTdmqRocketmqClusterArgs, GetTdmqRocketmqClusterResult, GetTdmqRocketmqClusterOutputArgs } from "./getTdmqRocketmqCluster";
export const getTdmqRocketmqCluster: typeof import("./getTdmqRocketmqCluster").getTdmqRocketmqCluster = null as any;
export const getTdmqRocketmqClusterOutput: typeof import("./getTdmqRocketmqCluster").getTdmqRocketmqClusterOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRocketmqCluster","getTdmqRocketmqClusterOutput"], () => require("./getTdmqRocketmqCluster"));

export { GetTdmqRocketmqGroupArgs, GetTdmqRocketmqGroupResult, GetTdmqRocketmqGroupOutputArgs } from "./getTdmqRocketmqGroup";
export const getTdmqRocketmqGroup: typeof import("./getTdmqRocketmqGroup").getTdmqRocketmqGroup = null as any;
export const getTdmqRocketmqGroupOutput: typeof import("./getTdmqRocketmqGroup").getTdmqRocketmqGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRocketmqGroup","getTdmqRocketmqGroupOutput"], () => require("./getTdmqRocketmqGroup"));

export { GetTdmqRocketmqMessagesArgs, GetTdmqRocketmqMessagesResult, GetTdmqRocketmqMessagesOutputArgs } from "./getTdmqRocketmqMessages";
export const getTdmqRocketmqMessages: typeof import("./getTdmqRocketmqMessages").getTdmqRocketmqMessages = null as any;
export const getTdmqRocketmqMessagesOutput: typeof import("./getTdmqRocketmqMessages").getTdmqRocketmqMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRocketmqMessages","getTdmqRocketmqMessagesOutput"], () => require("./getTdmqRocketmqMessages"));

export { GetTdmqRocketmqNamespaceArgs, GetTdmqRocketmqNamespaceResult, GetTdmqRocketmqNamespaceOutputArgs } from "./getTdmqRocketmqNamespace";
export const getTdmqRocketmqNamespace: typeof import("./getTdmqRocketmqNamespace").getTdmqRocketmqNamespace = null as any;
export const getTdmqRocketmqNamespaceOutput: typeof import("./getTdmqRocketmqNamespace").getTdmqRocketmqNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRocketmqNamespace","getTdmqRocketmqNamespaceOutput"], () => require("./getTdmqRocketmqNamespace"));

export { GetTdmqRocketmqRoleArgs, GetTdmqRocketmqRoleResult, GetTdmqRocketmqRoleOutputArgs } from "./getTdmqRocketmqRole";
export const getTdmqRocketmqRole: typeof import("./getTdmqRocketmqRole").getTdmqRocketmqRole = null as any;
export const getTdmqRocketmqRoleOutput: typeof import("./getTdmqRocketmqRole").getTdmqRocketmqRoleOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRocketmqRole","getTdmqRocketmqRoleOutput"], () => require("./getTdmqRocketmqRole"));

export { GetTdmqRocketmqTopicArgs, GetTdmqRocketmqTopicResult, GetTdmqRocketmqTopicOutputArgs } from "./getTdmqRocketmqTopic";
export const getTdmqRocketmqTopic: typeof import("./getTdmqRocketmqTopic").getTdmqRocketmqTopic = null as any;
export const getTdmqRocketmqTopicOutput: typeof import("./getTdmqRocketmqTopic").getTdmqRocketmqTopicOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqRocketmqTopic","getTdmqRocketmqTopicOutput"], () => require("./getTdmqRocketmqTopic"));

export { GetTdmqVipInstanceArgs, GetTdmqVipInstanceResult, GetTdmqVipInstanceOutputArgs } from "./getTdmqVipInstance";
export const getTdmqVipInstance: typeof import("./getTdmqVipInstance").getTdmqVipInstance = null as any;
export const getTdmqVipInstanceOutput: typeof import("./getTdmqVipInstance").getTdmqVipInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getTdmqVipInstance","getTdmqVipInstanceOutput"], () => require("./getTdmqVipInstance"));

export { GetTeoRuleEngineSettingsArgs, GetTeoRuleEngineSettingsResult, GetTeoRuleEngineSettingsOutputArgs } from "./getTeoRuleEngineSettings";
export const getTeoRuleEngineSettings: typeof import("./getTeoRuleEngineSettings").getTeoRuleEngineSettings = null as any;
export const getTeoRuleEngineSettingsOutput: typeof import("./getTeoRuleEngineSettings").getTeoRuleEngineSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getTeoRuleEngineSettings","getTeoRuleEngineSettingsOutput"], () => require("./getTeoRuleEngineSettings"));

export { GetTeoZoneAvailablePlansArgs, GetTeoZoneAvailablePlansResult, GetTeoZoneAvailablePlansOutputArgs } from "./getTeoZoneAvailablePlans";
export const getTeoZoneAvailablePlans: typeof import("./getTeoZoneAvailablePlans").getTeoZoneAvailablePlans = null as any;
export const getTeoZoneAvailablePlansOutput: typeof import("./getTeoZoneAvailablePlans").getTeoZoneAvailablePlansOutput = null as any;
utilities.lazyLoad(exports, ["getTeoZoneAvailablePlans","getTeoZoneAvailablePlansOutput"], () => require("./getTeoZoneAvailablePlans"));

export { GetTseAccessAddressArgs, GetTseAccessAddressResult, GetTseAccessAddressOutputArgs } from "./getTseAccessAddress";
export const getTseAccessAddress: typeof import("./getTseAccessAddress").getTseAccessAddress = null as any;
export const getTseAccessAddressOutput: typeof import("./getTseAccessAddress").getTseAccessAddressOutput = null as any;
utilities.lazyLoad(exports, ["getTseAccessAddress","getTseAccessAddressOutput"], () => require("./getTseAccessAddress"));

export { GetTseGatewayCanaryRulesArgs, GetTseGatewayCanaryRulesResult, GetTseGatewayCanaryRulesOutputArgs } from "./getTseGatewayCanaryRules";
export const getTseGatewayCanaryRules: typeof import("./getTseGatewayCanaryRules").getTseGatewayCanaryRules = null as any;
export const getTseGatewayCanaryRulesOutput: typeof import("./getTseGatewayCanaryRules").getTseGatewayCanaryRulesOutput = null as any;
utilities.lazyLoad(exports, ["getTseGatewayCanaryRules","getTseGatewayCanaryRulesOutput"], () => require("./getTseGatewayCanaryRules"));

export { GetTseGatewayCertificatesArgs, GetTseGatewayCertificatesResult, GetTseGatewayCertificatesOutputArgs } from "./getTseGatewayCertificates";
export const getTseGatewayCertificates: typeof import("./getTseGatewayCertificates").getTseGatewayCertificates = null as any;
export const getTseGatewayCertificatesOutput: typeof import("./getTseGatewayCertificates").getTseGatewayCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getTseGatewayCertificates","getTseGatewayCertificatesOutput"], () => require("./getTseGatewayCertificates"));

export { GetTseGatewayNodesArgs, GetTseGatewayNodesResult, GetTseGatewayNodesOutputArgs } from "./getTseGatewayNodes";
export const getTseGatewayNodes: typeof import("./getTseGatewayNodes").getTseGatewayNodes = null as any;
export const getTseGatewayNodesOutput: typeof import("./getTseGatewayNodes").getTseGatewayNodesOutput = null as any;
utilities.lazyLoad(exports, ["getTseGatewayNodes","getTseGatewayNodesOutput"], () => require("./getTseGatewayNodes"));

export { GetTseGatewayRoutesArgs, GetTseGatewayRoutesResult, GetTseGatewayRoutesOutputArgs } from "./getTseGatewayRoutes";
export const getTseGatewayRoutes: typeof import("./getTseGatewayRoutes").getTseGatewayRoutes = null as any;
export const getTseGatewayRoutesOutput: typeof import("./getTseGatewayRoutes").getTseGatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getTseGatewayRoutes","getTseGatewayRoutesOutput"], () => require("./getTseGatewayRoutes"));

export { GetTseGatewayServicesArgs, GetTseGatewayServicesResult, GetTseGatewayServicesOutputArgs } from "./getTseGatewayServices";
export const getTseGatewayServices: typeof import("./getTseGatewayServices").getTseGatewayServices = null as any;
export const getTseGatewayServicesOutput: typeof import("./getTseGatewayServices").getTseGatewayServicesOutput = null as any;
utilities.lazyLoad(exports, ["getTseGatewayServices","getTseGatewayServicesOutput"], () => require("./getTseGatewayServices"));

export { GetTseGatewaysArgs, GetTseGatewaysResult, GetTseGatewaysOutputArgs } from "./getTseGateways";
export const getTseGateways: typeof import("./getTseGateways").getTseGateways = null as any;
export const getTseGatewaysOutput: typeof import("./getTseGateways").getTseGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getTseGateways","getTseGatewaysOutput"], () => require("./getTseGateways"));

export { GetTseGroupsArgs, GetTseGroupsResult, GetTseGroupsOutputArgs } from "./getTseGroups";
export const getTseGroups: typeof import("./getTseGroups").getTseGroups = null as any;
export const getTseGroupsOutput: typeof import("./getTseGroups").getTseGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getTseGroups","getTseGroupsOutput"], () => require("./getTseGroups"));

export { GetTseNacosReplicasArgs, GetTseNacosReplicasResult, GetTseNacosReplicasOutputArgs } from "./getTseNacosReplicas";
export const getTseNacosReplicas: typeof import("./getTseNacosReplicas").getTseNacosReplicas = null as any;
export const getTseNacosReplicasOutput: typeof import("./getTseNacosReplicas").getTseNacosReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getTseNacosReplicas","getTseNacosReplicasOutput"], () => require("./getTseNacosReplicas"));

export { GetTseNacosServerInterfacesArgs, GetTseNacosServerInterfacesResult, GetTseNacosServerInterfacesOutputArgs } from "./getTseNacosServerInterfaces";
export const getTseNacosServerInterfaces: typeof import("./getTseNacosServerInterfaces").getTseNacosServerInterfaces = null as any;
export const getTseNacosServerInterfacesOutput: typeof import("./getTseNacosServerInterfaces").getTseNacosServerInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getTseNacosServerInterfaces","getTseNacosServerInterfacesOutput"], () => require("./getTseNacosServerInterfaces"));

export { GetTseZookeeperReplicasArgs, GetTseZookeeperReplicasResult, GetTseZookeeperReplicasOutputArgs } from "./getTseZookeeperReplicas";
export const getTseZookeeperReplicas: typeof import("./getTseZookeeperReplicas").getTseZookeeperReplicas = null as any;
export const getTseZookeeperReplicasOutput: typeof import("./getTseZookeeperReplicas").getTseZookeeperReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getTseZookeeperReplicas","getTseZookeeperReplicasOutput"], () => require("./getTseZookeeperReplicas"));

export { GetTseZookeeperServerInterfacesArgs, GetTseZookeeperServerInterfacesResult, GetTseZookeeperServerInterfacesOutputArgs } from "./getTseZookeeperServerInterfaces";
export const getTseZookeeperServerInterfaces: typeof import("./getTseZookeeperServerInterfaces").getTseZookeeperServerInterfaces = null as any;
export const getTseZookeeperServerInterfacesOutput: typeof import("./getTseZookeeperServerInterfaces").getTseZookeeperServerInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getTseZookeeperServerInterfaces","getTseZookeeperServerInterfacesOutput"], () => require("./getTseZookeeperServerInterfaces"));

export { GetTsfApiDetailArgs, GetTsfApiDetailResult, GetTsfApiDetailOutputArgs } from "./getTsfApiDetail";
export const getTsfApiDetail: typeof import("./getTsfApiDetail").getTsfApiDetail = null as any;
export const getTsfApiDetailOutput: typeof import("./getTsfApiDetail").getTsfApiDetailOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApiDetail","getTsfApiDetailOutput"], () => require("./getTsfApiDetail"));

export { GetTsfApiGroupArgs, GetTsfApiGroupResult, GetTsfApiGroupOutputArgs } from "./getTsfApiGroup";
export const getTsfApiGroup: typeof import("./getTsfApiGroup").getTsfApiGroup = null as any;
export const getTsfApiGroupOutput: typeof import("./getTsfApiGroup").getTsfApiGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApiGroup","getTsfApiGroupOutput"], () => require("./getTsfApiGroup"));

export { GetTsfApplicationArgs, GetTsfApplicationResult, GetTsfApplicationOutputArgs } from "./getTsfApplication";
export const getTsfApplication: typeof import("./getTsfApplication").getTsfApplication = null as any;
export const getTsfApplicationOutput: typeof import("./getTsfApplication").getTsfApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApplication","getTsfApplicationOutput"], () => require("./getTsfApplication"));

export { GetTsfApplicationAttributeArgs, GetTsfApplicationAttributeResult, GetTsfApplicationAttributeOutputArgs } from "./getTsfApplicationAttribute";
export const getTsfApplicationAttribute: typeof import("./getTsfApplicationAttribute").getTsfApplicationAttribute = null as any;
export const getTsfApplicationAttributeOutput: typeof import("./getTsfApplicationAttribute").getTsfApplicationAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApplicationAttribute","getTsfApplicationAttributeOutput"], () => require("./getTsfApplicationAttribute"));

export { GetTsfApplicationConfigArgs, GetTsfApplicationConfigResult, GetTsfApplicationConfigOutputArgs } from "./getTsfApplicationConfig";
export const getTsfApplicationConfig: typeof import("./getTsfApplicationConfig").getTsfApplicationConfig = null as any;
export const getTsfApplicationConfigOutput: typeof import("./getTsfApplicationConfig").getTsfApplicationConfigOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApplicationConfig","getTsfApplicationConfigOutput"], () => require("./getTsfApplicationConfig"));

export { GetTsfApplicationFileConfigArgs, GetTsfApplicationFileConfigResult, GetTsfApplicationFileConfigOutputArgs } from "./getTsfApplicationFileConfig";
export const getTsfApplicationFileConfig: typeof import("./getTsfApplicationFileConfig").getTsfApplicationFileConfig = null as any;
export const getTsfApplicationFileConfigOutput: typeof import("./getTsfApplicationFileConfig").getTsfApplicationFileConfigOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApplicationFileConfig","getTsfApplicationFileConfigOutput"], () => require("./getTsfApplicationFileConfig"));

export { GetTsfApplicationPublicConfigArgs, GetTsfApplicationPublicConfigResult, GetTsfApplicationPublicConfigOutputArgs } from "./getTsfApplicationPublicConfig";
export const getTsfApplicationPublicConfig: typeof import("./getTsfApplicationPublicConfig").getTsfApplicationPublicConfig = null as any;
export const getTsfApplicationPublicConfigOutput: typeof import("./getTsfApplicationPublicConfig").getTsfApplicationPublicConfigOutput = null as any;
utilities.lazyLoad(exports, ["getTsfApplicationPublicConfig","getTsfApplicationPublicConfigOutput"], () => require("./getTsfApplicationPublicConfig"));

export { GetTsfBusinessLogConfigsArgs, GetTsfBusinessLogConfigsResult, GetTsfBusinessLogConfigsOutputArgs } from "./getTsfBusinessLogConfigs";
export const getTsfBusinessLogConfigs: typeof import("./getTsfBusinessLogConfigs").getTsfBusinessLogConfigs = null as any;
export const getTsfBusinessLogConfigsOutput: typeof import("./getTsfBusinessLogConfigs").getTsfBusinessLogConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getTsfBusinessLogConfigs","getTsfBusinessLogConfigsOutput"], () => require("./getTsfBusinessLogConfigs"));

export { GetTsfClusterArgs, GetTsfClusterResult, GetTsfClusterOutputArgs } from "./getTsfCluster";
export const getTsfCluster: typeof import("./getTsfCluster").getTsfCluster = null as any;
export const getTsfClusterOutput: typeof import("./getTsfCluster").getTsfClusterOutput = null as any;
utilities.lazyLoad(exports, ["getTsfCluster","getTsfClusterOutput"], () => require("./getTsfCluster"));

export { GetTsfConfigSummaryArgs, GetTsfConfigSummaryResult, GetTsfConfigSummaryOutputArgs } from "./getTsfConfigSummary";
export const getTsfConfigSummary: typeof import("./getTsfConfigSummary").getTsfConfigSummary = null as any;
export const getTsfConfigSummaryOutput: typeof import("./getTsfConfigSummary").getTsfConfigSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getTsfConfigSummary","getTsfConfigSummaryOutput"], () => require("./getTsfConfigSummary"));

export { GetTsfContainerGroupArgs, GetTsfContainerGroupResult, GetTsfContainerGroupOutputArgs } from "./getTsfContainerGroup";
export const getTsfContainerGroup: typeof import("./getTsfContainerGroup").getTsfContainerGroup = null as any;
export const getTsfContainerGroupOutput: typeof import("./getTsfContainerGroup").getTsfContainerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTsfContainerGroup","getTsfContainerGroupOutput"], () => require("./getTsfContainerGroup"));

export { GetTsfDeliveryConfigByGroupIdArgs, GetTsfDeliveryConfigByGroupIdResult, GetTsfDeliveryConfigByGroupIdOutputArgs } from "./getTsfDeliveryConfigByGroupId";
export const getTsfDeliveryConfigByGroupId: typeof import("./getTsfDeliveryConfigByGroupId").getTsfDeliveryConfigByGroupId = null as any;
export const getTsfDeliveryConfigByGroupIdOutput: typeof import("./getTsfDeliveryConfigByGroupId").getTsfDeliveryConfigByGroupIdOutput = null as any;
utilities.lazyLoad(exports, ["getTsfDeliveryConfigByGroupId","getTsfDeliveryConfigByGroupIdOutput"], () => require("./getTsfDeliveryConfigByGroupId"));

export { GetTsfDeliveryConfigsArgs, GetTsfDeliveryConfigsResult, GetTsfDeliveryConfigsOutputArgs } from "./getTsfDeliveryConfigs";
export const getTsfDeliveryConfigs: typeof import("./getTsfDeliveryConfigs").getTsfDeliveryConfigs = null as any;
export const getTsfDeliveryConfigsOutput: typeof import("./getTsfDeliveryConfigs").getTsfDeliveryConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getTsfDeliveryConfigs","getTsfDeliveryConfigsOutput"], () => require("./getTsfDeliveryConfigs"));

export { GetTsfGatewayAllGroupApisArgs, GetTsfGatewayAllGroupApisResult, GetTsfGatewayAllGroupApisOutputArgs } from "./getTsfGatewayAllGroupApis";
export const getTsfGatewayAllGroupApis: typeof import("./getTsfGatewayAllGroupApis").getTsfGatewayAllGroupApis = null as any;
export const getTsfGatewayAllGroupApisOutput: typeof import("./getTsfGatewayAllGroupApis").getTsfGatewayAllGroupApisOutput = null as any;
utilities.lazyLoad(exports, ["getTsfGatewayAllGroupApis","getTsfGatewayAllGroupApisOutput"], () => require("./getTsfGatewayAllGroupApis"));

export { GetTsfGroupConfigReleaseArgs, GetTsfGroupConfigReleaseResult, GetTsfGroupConfigReleaseOutputArgs } from "./getTsfGroupConfigRelease";
export const getTsfGroupConfigRelease: typeof import("./getTsfGroupConfigRelease").getTsfGroupConfigRelease = null as any;
export const getTsfGroupConfigReleaseOutput: typeof import("./getTsfGroupConfigRelease").getTsfGroupConfigReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getTsfGroupConfigRelease","getTsfGroupConfigReleaseOutput"], () => require("./getTsfGroupConfigRelease"));

export { GetTsfGroupGatewaysArgs, GetTsfGroupGatewaysResult, GetTsfGroupGatewaysOutputArgs } from "./getTsfGroupGateways";
export const getTsfGroupGateways: typeof import("./getTsfGroupGateways").getTsfGroupGateways = null as any;
export const getTsfGroupGatewaysOutput: typeof import("./getTsfGroupGateways").getTsfGroupGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getTsfGroupGateways","getTsfGroupGatewaysOutput"], () => require("./getTsfGroupGateways"));

export { GetTsfGroupInstancesArgs, GetTsfGroupInstancesResult, GetTsfGroupInstancesOutputArgs } from "./getTsfGroupInstances";
export const getTsfGroupInstances: typeof import("./getTsfGroupInstances").getTsfGroupInstances = null as any;
export const getTsfGroupInstancesOutput: typeof import("./getTsfGroupInstances").getTsfGroupInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTsfGroupInstances","getTsfGroupInstancesOutput"], () => require("./getTsfGroupInstances"));

export { GetTsfGroupsArgs, GetTsfGroupsResult, GetTsfGroupsOutputArgs } from "./getTsfGroups";
export const getTsfGroups: typeof import("./getTsfGroups").getTsfGroups = null as any;
export const getTsfGroupsOutput: typeof import("./getTsfGroups").getTsfGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getTsfGroups","getTsfGroupsOutput"], () => require("./getTsfGroups"));

export { GetTsfMicroserviceArgs, GetTsfMicroserviceResult, GetTsfMicroserviceOutputArgs } from "./getTsfMicroservice";
export const getTsfMicroservice: typeof import("./getTsfMicroservice").getTsfMicroservice = null as any;
export const getTsfMicroserviceOutput: typeof import("./getTsfMicroservice").getTsfMicroserviceOutput = null as any;
utilities.lazyLoad(exports, ["getTsfMicroservice","getTsfMicroserviceOutput"], () => require("./getTsfMicroservice"));

export { GetTsfMicroserviceApiVersionArgs, GetTsfMicroserviceApiVersionResult, GetTsfMicroserviceApiVersionOutputArgs } from "./getTsfMicroserviceApiVersion";
export const getTsfMicroserviceApiVersion: typeof import("./getTsfMicroserviceApiVersion").getTsfMicroserviceApiVersion = null as any;
export const getTsfMicroserviceApiVersionOutput: typeof import("./getTsfMicroserviceApiVersion").getTsfMicroserviceApiVersionOutput = null as any;
utilities.lazyLoad(exports, ["getTsfMicroserviceApiVersion","getTsfMicroserviceApiVersionOutput"], () => require("./getTsfMicroserviceApiVersion"));

export { GetTsfMsApiListArgs, GetTsfMsApiListResult, GetTsfMsApiListOutputArgs } from "./getTsfMsApiList";
export const getTsfMsApiList: typeof import("./getTsfMsApiList").getTsfMsApiList = null as any;
export const getTsfMsApiListOutput: typeof import("./getTsfMsApiList").getTsfMsApiListOutput = null as any;
utilities.lazyLoad(exports, ["getTsfMsApiList","getTsfMsApiListOutput"], () => require("./getTsfMsApiList"));

export { GetTsfPodInstancesArgs, GetTsfPodInstancesResult, GetTsfPodInstancesOutputArgs } from "./getTsfPodInstances";
export const getTsfPodInstances: typeof import("./getTsfPodInstances").getTsfPodInstances = null as any;
export const getTsfPodInstancesOutput: typeof import("./getTsfPodInstances").getTsfPodInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTsfPodInstances","getTsfPodInstancesOutput"], () => require("./getTsfPodInstances"));

export { GetTsfPublicConfigSummaryArgs, GetTsfPublicConfigSummaryResult, GetTsfPublicConfigSummaryOutputArgs } from "./getTsfPublicConfigSummary";
export const getTsfPublicConfigSummary: typeof import("./getTsfPublicConfigSummary").getTsfPublicConfigSummary = null as any;
export const getTsfPublicConfigSummaryOutput: typeof import("./getTsfPublicConfigSummary").getTsfPublicConfigSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getTsfPublicConfigSummary","getTsfPublicConfigSummaryOutput"], () => require("./getTsfPublicConfigSummary"));

export { GetTsfRepositoryArgs, GetTsfRepositoryResult, GetTsfRepositoryOutputArgs } from "./getTsfRepository";
export const getTsfRepository: typeof import("./getTsfRepository").getTsfRepository = null as any;
export const getTsfRepositoryOutput: typeof import("./getTsfRepository").getTsfRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getTsfRepository","getTsfRepositoryOutput"], () => require("./getTsfRepository"));

export { GetTsfUnitRulesArgs, GetTsfUnitRulesResult, GetTsfUnitRulesOutputArgs } from "./getTsfUnitRules";
export const getTsfUnitRules: typeof import("./getTsfUnitRules").getTsfUnitRules = null as any;
export const getTsfUnitRulesOutput: typeof import("./getTsfUnitRules").getTsfUnitRulesOutput = null as any;
utilities.lazyLoad(exports, ["getTsfUnitRules","getTsfUnitRulesOutput"], () => require("./getTsfUnitRules"));

export { GetTsfUsableUnitNamespacesArgs, GetTsfUsableUnitNamespacesResult, GetTsfUsableUnitNamespacesOutputArgs } from "./getTsfUsableUnitNamespaces";
export const getTsfUsableUnitNamespaces: typeof import("./getTsfUsableUnitNamespaces").getTsfUsableUnitNamespaces = null as any;
export const getTsfUsableUnitNamespacesOutput: typeof import("./getTsfUsableUnitNamespaces").getTsfUsableUnitNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getTsfUsableUnitNamespaces","getTsfUsableUnitNamespacesOutput"], () => require("./getTsfUsableUnitNamespaces"));

export { GetUserInfoArgs, GetUserInfoResult, GetUserInfoOutputArgs } from "./getUserInfo";
export const getUserInfo: typeof import("./getUserInfo").getUserInfo = null as any;
export const getUserInfoOutput: typeof import("./getUserInfo").getUserInfoOutput = null as any;
utilities.lazyLoad(exports, ["getUserInfo","getUserInfoOutput"], () => require("./getUserInfo"));

export { GetVodAdaptiveDynamicStreamingTemplatesArgs, GetVodAdaptiveDynamicStreamingTemplatesResult, GetVodAdaptiveDynamicStreamingTemplatesOutputArgs } from "./getVodAdaptiveDynamicStreamingTemplates";
export const getVodAdaptiveDynamicStreamingTemplates: typeof import("./getVodAdaptiveDynamicStreamingTemplates").getVodAdaptiveDynamicStreamingTemplates = null as any;
export const getVodAdaptiveDynamicStreamingTemplatesOutput: typeof import("./getVodAdaptiveDynamicStreamingTemplates").getVodAdaptiveDynamicStreamingTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getVodAdaptiveDynamicStreamingTemplates","getVodAdaptiveDynamicStreamingTemplatesOutput"], () => require("./getVodAdaptiveDynamicStreamingTemplates"));

export { GetVodImageSpriteTemplatesArgs, GetVodImageSpriteTemplatesResult, GetVodImageSpriteTemplatesOutputArgs } from "./getVodImageSpriteTemplates";
export const getVodImageSpriteTemplates: typeof import("./getVodImageSpriteTemplates").getVodImageSpriteTemplates = null as any;
export const getVodImageSpriteTemplatesOutput: typeof import("./getVodImageSpriteTemplates").getVodImageSpriteTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getVodImageSpriteTemplates","getVodImageSpriteTemplatesOutput"], () => require("./getVodImageSpriteTemplates"));

export { GetVodProcedureTemplatesArgs, GetVodProcedureTemplatesResult, GetVodProcedureTemplatesOutputArgs } from "./getVodProcedureTemplates";
export const getVodProcedureTemplates: typeof import("./getVodProcedureTemplates").getVodProcedureTemplates = null as any;
export const getVodProcedureTemplatesOutput: typeof import("./getVodProcedureTemplates").getVodProcedureTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getVodProcedureTemplates","getVodProcedureTemplatesOutput"], () => require("./getVodProcedureTemplates"));

export { GetVodSnapshotByTimeOffsetTemplatesArgs, GetVodSnapshotByTimeOffsetTemplatesResult, GetVodSnapshotByTimeOffsetTemplatesOutputArgs } from "./getVodSnapshotByTimeOffsetTemplates";
export const getVodSnapshotByTimeOffsetTemplates: typeof import("./getVodSnapshotByTimeOffsetTemplates").getVodSnapshotByTimeOffsetTemplates = null as any;
export const getVodSnapshotByTimeOffsetTemplatesOutput: typeof import("./getVodSnapshotByTimeOffsetTemplates").getVodSnapshotByTimeOffsetTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getVodSnapshotByTimeOffsetTemplates","getVodSnapshotByTimeOffsetTemplatesOutput"], () => require("./getVodSnapshotByTimeOffsetTemplates"));

export { GetVodSuperPlayerConfigsArgs, GetVodSuperPlayerConfigsResult, GetVodSuperPlayerConfigsOutputArgs } from "./getVodSuperPlayerConfigs";
export const getVodSuperPlayerConfigs: typeof import("./getVodSuperPlayerConfigs").getVodSuperPlayerConfigs = null as any;
export const getVodSuperPlayerConfigsOutput: typeof import("./getVodSuperPlayerConfigs").getVodSuperPlayerConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getVodSuperPlayerConfigs","getVodSuperPlayerConfigsOutput"], () => require("./getVodSuperPlayerConfigs"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcAccountAttributesArgs, GetVpcAccountAttributesResult, GetVpcAccountAttributesOutputArgs } from "./getVpcAccountAttributes";
export const getVpcAccountAttributes: typeof import("./getVpcAccountAttributes").getVpcAccountAttributes = null as any;
export const getVpcAccountAttributesOutput: typeof import("./getVpcAccountAttributes").getVpcAccountAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAccountAttributes","getVpcAccountAttributesOutput"], () => require("./getVpcAccountAttributes"));

export { GetVpcAclsArgs, GetVpcAclsResult, GetVpcAclsOutputArgs } from "./getVpcAcls";
export const getVpcAcls: typeof import("./getVpcAcls").getVpcAcls = null as any;
export const getVpcAclsOutput: typeof import("./getVpcAcls").getVpcAclsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAcls","getVpcAclsOutput"], () => require("./getVpcAcls"));

export { GetVpcBandwidthPackageBillUsageArgs, GetVpcBandwidthPackageBillUsageResult, GetVpcBandwidthPackageBillUsageOutputArgs } from "./getVpcBandwidthPackageBillUsage";
export const getVpcBandwidthPackageBillUsage: typeof import("./getVpcBandwidthPackageBillUsage").getVpcBandwidthPackageBillUsage = null as any;
export const getVpcBandwidthPackageBillUsageOutput: typeof import("./getVpcBandwidthPackageBillUsage").getVpcBandwidthPackageBillUsageOutput = null as any;
utilities.lazyLoad(exports, ["getVpcBandwidthPackageBillUsage","getVpcBandwidthPackageBillUsageOutput"], () => require("./getVpcBandwidthPackageBillUsage"));

export { GetVpcBandwidthPackageQuotaArgs, GetVpcBandwidthPackageQuotaResult, GetVpcBandwidthPackageQuotaOutputArgs } from "./getVpcBandwidthPackageQuota";
export const getVpcBandwidthPackageQuota: typeof import("./getVpcBandwidthPackageQuota").getVpcBandwidthPackageQuota = null as any;
export const getVpcBandwidthPackageQuotaOutput: typeof import("./getVpcBandwidthPackageQuota").getVpcBandwidthPackageQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getVpcBandwidthPackageQuota","getVpcBandwidthPackageQuotaOutput"], () => require("./getVpcBandwidthPackageQuota"));

export { GetVpcClassicLinkInstancesArgs, GetVpcClassicLinkInstancesResult, GetVpcClassicLinkInstancesOutputArgs } from "./getVpcClassicLinkInstances";
export const getVpcClassicLinkInstances: typeof import("./getVpcClassicLinkInstances").getVpcClassicLinkInstances = null as any;
export const getVpcClassicLinkInstancesOutput: typeof import("./getVpcClassicLinkInstances").getVpcClassicLinkInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcClassicLinkInstances","getVpcClassicLinkInstancesOutput"], () => require("./getVpcClassicLinkInstances"));

export { GetVpcCvmInstancesArgs, GetVpcCvmInstancesResult, GetVpcCvmInstancesOutputArgs } from "./getVpcCvmInstances";
export const getVpcCvmInstances: typeof import("./getVpcCvmInstances").getVpcCvmInstances = null as any;
export const getVpcCvmInstancesOutput: typeof import("./getVpcCvmInstances").getVpcCvmInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcCvmInstances","getVpcCvmInstancesOutput"], () => require("./getVpcCvmInstances"));

export { GetVpcGatewayFlowMonitorDetailArgs, GetVpcGatewayFlowMonitorDetailResult, GetVpcGatewayFlowMonitorDetailOutputArgs } from "./getVpcGatewayFlowMonitorDetail";
export const getVpcGatewayFlowMonitorDetail: typeof import("./getVpcGatewayFlowMonitorDetail").getVpcGatewayFlowMonitorDetail = null as any;
export const getVpcGatewayFlowMonitorDetailOutput: typeof import("./getVpcGatewayFlowMonitorDetail").getVpcGatewayFlowMonitorDetailOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGatewayFlowMonitorDetail","getVpcGatewayFlowMonitorDetailOutput"], () => require("./getVpcGatewayFlowMonitorDetail"));

export { GetVpcGatewayFlowQosArgs, GetVpcGatewayFlowQosResult, GetVpcGatewayFlowQosOutputArgs } from "./getVpcGatewayFlowQos";
export const getVpcGatewayFlowQos: typeof import("./getVpcGatewayFlowQos").getVpcGatewayFlowQos = null as any;
export const getVpcGatewayFlowQosOutput: typeof import("./getVpcGatewayFlowQos").getVpcGatewayFlowQosOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGatewayFlowQos","getVpcGatewayFlowQosOutput"], () => require("./getVpcGatewayFlowQos"));

export { GetVpcInstancesArgs, GetVpcInstancesResult, GetVpcInstancesOutputArgs } from "./getVpcInstances";
export const getVpcInstances: typeof import("./getVpcInstances").getVpcInstances = null as any;
export const getVpcInstancesOutput: typeof import("./getVpcInstances").getVpcInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcInstances","getVpcInstancesOutput"], () => require("./getVpcInstances"));

export { GetVpcLimitsArgs, GetVpcLimitsResult, GetVpcLimitsOutputArgs } from "./getVpcLimits";
export const getVpcLimits: typeof import("./getVpcLimits").getVpcLimits = null as any;
export const getVpcLimitsOutput: typeof import("./getVpcLimits").getVpcLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcLimits","getVpcLimitsOutput"], () => require("./getVpcLimits"));

export { GetVpcNetDetectStateCheckArgs, GetVpcNetDetectStateCheckResult, GetVpcNetDetectStateCheckOutputArgs } from "./getVpcNetDetectStateCheck";
export const getVpcNetDetectStateCheck: typeof import("./getVpcNetDetectStateCheck").getVpcNetDetectStateCheck = null as any;
export const getVpcNetDetectStateCheckOutput: typeof import("./getVpcNetDetectStateCheck").getVpcNetDetectStateCheckOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNetDetectStateCheck","getVpcNetDetectStateCheckOutput"], () => require("./getVpcNetDetectStateCheck"));

export { GetVpcNetDetectStatesArgs, GetVpcNetDetectStatesResult, GetVpcNetDetectStatesOutputArgs } from "./getVpcNetDetectStates";
export const getVpcNetDetectStates: typeof import("./getVpcNetDetectStates").getVpcNetDetectStates = null as any;
export const getVpcNetDetectStatesOutput: typeof import("./getVpcNetDetectStates").getVpcNetDetectStatesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNetDetectStates","getVpcNetDetectStatesOutput"], () => require("./getVpcNetDetectStates"));

export { GetVpcNetworkInterfaceLimitArgs, GetVpcNetworkInterfaceLimitResult, GetVpcNetworkInterfaceLimitOutputArgs } from "./getVpcNetworkInterfaceLimit";
export const getVpcNetworkInterfaceLimit: typeof import("./getVpcNetworkInterfaceLimit").getVpcNetworkInterfaceLimit = null as any;
export const getVpcNetworkInterfaceLimitOutput: typeof import("./getVpcNetworkInterfaceLimit").getVpcNetworkInterfaceLimitOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNetworkInterfaceLimit","getVpcNetworkInterfaceLimitOutput"], () => require("./getVpcNetworkInterfaceLimit"));

export { GetVpcPrivateIpAddressesArgs, GetVpcPrivateIpAddressesResult, GetVpcPrivateIpAddressesOutputArgs } from "./getVpcPrivateIpAddresses";
export const getVpcPrivateIpAddresses: typeof import("./getVpcPrivateIpAddresses").getVpcPrivateIpAddresses = null as any;
export const getVpcPrivateIpAddressesOutput: typeof import("./getVpcPrivateIpAddresses").getVpcPrivateIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPrivateIpAddresses","getVpcPrivateIpAddressesOutput"], () => require("./getVpcPrivateIpAddresses"));

export { GetVpcProductQuotaArgs, GetVpcProductQuotaResult, GetVpcProductQuotaOutputArgs } from "./getVpcProductQuota";
export const getVpcProductQuota: typeof import("./getVpcProductQuota").getVpcProductQuota = null as any;
export const getVpcProductQuotaOutput: typeof import("./getVpcProductQuota").getVpcProductQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getVpcProductQuota","getVpcProductQuotaOutput"], () => require("./getVpcProductQuota"));

export { GetVpcResourceDashboardArgs, GetVpcResourceDashboardResult, GetVpcResourceDashboardOutputArgs } from "./getVpcResourceDashboard";
export const getVpcResourceDashboard: typeof import("./getVpcResourceDashboard").getVpcResourceDashboard = null as any;
export const getVpcResourceDashboardOutput: typeof import("./getVpcResourceDashboard").getVpcResourceDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getVpcResourceDashboard","getVpcResourceDashboardOutput"], () => require("./getVpcResourceDashboard"));

export { GetVpcRouteConflictsArgs, GetVpcRouteConflictsResult, GetVpcRouteConflictsOutputArgs } from "./getVpcRouteConflicts";
export const getVpcRouteConflicts: typeof import("./getVpcRouteConflicts").getVpcRouteConflicts = null as any;
export const getVpcRouteConflictsOutput: typeof import("./getVpcRouteConflicts").getVpcRouteConflictsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRouteConflicts","getVpcRouteConflictsOutput"], () => require("./getVpcRouteConflicts"));

export { GetVpcRouteTablesArgs, GetVpcRouteTablesResult, GetVpcRouteTablesOutputArgs } from "./getVpcRouteTables";
export const getVpcRouteTables: typeof import("./getVpcRouteTables").getVpcRouteTables = null as any;
export const getVpcRouteTablesOutput: typeof import("./getVpcRouteTables").getVpcRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRouteTables","getVpcRouteTablesOutput"], () => require("./getVpcRouteTables"));

export { GetVpcSecurityGroupLimitsArgs, GetVpcSecurityGroupLimitsResult, GetVpcSecurityGroupLimitsOutputArgs } from "./getVpcSecurityGroupLimits";
export const getVpcSecurityGroupLimits: typeof import("./getVpcSecurityGroupLimits").getVpcSecurityGroupLimits = null as any;
export const getVpcSecurityGroupLimitsOutput: typeof import("./getVpcSecurityGroupLimits").getVpcSecurityGroupLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityGroupLimits","getVpcSecurityGroupLimitsOutput"], () => require("./getVpcSecurityGroupLimits"));

export { GetVpcSecurityGroupReferencesArgs, GetVpcSecurityGroupReferencesResult, GetVpcSecurityGroupReferencesOutputArgs } from "./getVpcSecurityGroupReferences";
export const getVpcSecurityGroupReferences: typeof import("./getVpcSecurityGroupReferences").getVpcSecurityGroupReferences = null as any;
export const getVpcSecurityGroupReferencesOutput: typeof import("./getVpcSecurityGroupReferences").getVpcSecurityGroupReferencesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityGroupReferences","getVpcSecurityGroupReferencesOutput"], () => require("./getVpcSecurityGroupReferences"));

export { GetVpcSgSnapshotFileContentArgs, GetVpcSgSnapshotFileContentResult, GetVpcSgSnapshotFileContentOutputArgs } from "./getVpcSgSnapshotFileContent";
export const getVpcSgSnapshotFileContent: typeof import("./getVpcSgSnapshotFileContent").getVpcSgSnapshotFileContent = null as any;
export const getVpcSgSnapshotFileContentOutput: typeof import("./getVpcSgSnapshotFileContent").getVpcSgSnapshotFileContentOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSgSnapshotFileContent","getVpcSgSnapshotFileContentOutput"], () => require("./getVpcSgSnapshotFileContent"));

export { GetVpcSnapshotFilesArgs, GetVpcSnapshotFilesResult, GetVpcSnapshotFilesOutputArgs } from "./getVpcSnapshotFiles";
export const getVpcSnapshotFiles: typeof import("./getVpcSnapshotFiles").getVpcSnapshotFiles = null as any;
export const getVpcSnapshotFilesOutput: typeof import("./getVpcSnapshotFiles").getVpcSnapshotFilesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSnapshotFiles","getVpcSnapshotFilesOutput"], () => require("./getVpcSnapshotFiles"));

export { GetVpcSubnetResourceDashboardArgs, GetVpcSubnetResourceDashboardResult, GetVpcSubnetResourceDashboardOutputArgs } from "./getVpcSubnetResourceDashboard";
export const getVpcSubnetResourceDashboard: typeof import("./getVpcSubnetResourceDashboard").getVpcSubnetResourceDashboard = null as any;
export const getVpcSubnetResourceDashboardOutput: typeof import("./getVpcSubnetResourceDashboard").getVpcSubnetResourceDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSubnetResourceDashboard","getVpcSubnetResourceDashboardOutput"], () => require("./getVpcSubnetResourceDashboard"));

export { GetVpcSubnetsArgs, GetVpcSubnetsResult, GetVpcSubnetsOutputArgs } from "./getVpcSubnets";
export const getVpcSubnets: typeof import("./getVpcSubnets").getVpcSubnets = null as any;
export const getVpcSubnetsOutput: typeof import("./getVpcSubnets").getVpcSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSubnets","getVpcSubnetsOutput"], () => require("./getVpcSubnets"));

export { GetVpcTemplateLimitsArgs, GetVpcTemplateLimitsResult, GetVpcTemplateLimitsOutputArgs } from "./getVpcTemplateLimits";
export const getVpcTemplateLimits: typeof import("./getVpcTemplateLimits").getVpcTemplateLimits = null as any;
export const getVpcTemplateLimitsOutput: typeof import("./getVpcTemplateLimits").getVpcTemplateLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTemplateLimits","getVpcTemplateLimitsOutput"], () => require("./getVpcTemplateLimits"));

export { GetVpcUsedIpAddressArgs, GetVpcUsedIpAddressResult, GetVpcUsedIpAddressOutputArgs } from "./getVpcUsedIpAddress";
export const getVpcUsedIpAddress: typeof import("./getVpcUsedIpAddress").getVpcUsedIpAddress = null as any;
export const getVpcUsedIpAddressOutput: typeof import("./getVpcUsedIpAddress").getVpcUsedIpAddressOutput = null as any;
utilities.lazyLoad(exports, ["getVpcUsedIpAddress","getVpcUsedIpAddressOutput"], () => require("./getVpcUsedIpAddress"));

export { GetVpnConnectionsArgs, GetVpnConnectionsResult, GetVpnConnectionsOutputArgs } from "./getVpnConnections";
export const getVpnConnections: typeof import("./getVpnConnections").getVpnConnections = null as any;
export const getVpnConnectionsOutput: typeof import("./getVpnConnections").getVpnConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnections","getVpnConnectionsOutput"], () => require("./getVpnConnections"));

export { GetVpnCustomerGatewayVendorsArgs, GetVpnCustomerGatewayVendorsResult, GetVpnCustomerGatewayVendorsOutputArgs } from "./getVpnCustomerGatewayVendors";
export const getVpnCustomerGatewayVendors: typeof import("./getVpnCustomerGatewayVendors").getVpnCustomerGatewayVendors = null as any;
export const getVpnCustomerGatewayVendorsOutput: typeof import("./getVpnCustomerGatewayVendors").getVpnCustomerGatewayVendorsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnCustomerGatewayVendors","getVpnCustomerGatewayVendorsOutput"], () => require("./getVpnCustomerGatewayVendors"));

export { GetVpnCustomerGatewaysArgs, GetVpnCustomerGatewaysResult, GetVpnCustomerGatewaysOutputArgs } from "./getVpnCustomerGateways";
export const getVpnCustomerGateways: typeof import("./getVpnCustomerGateways").getVpnCustomerGateways = null as any;
export const getVpnCustomerGatewaysOutput: typeof import("./getVpnCustomerGateways").getVpnCustomerGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnCustomerGateways","getVpnCustomerGatewaysOutput"], () => require("./getVpnCustomerGateways"));

export { GetVpnDefaultHealthCheckIpArgs, GetVpnDefaultHealthCheckIpResult, GetVpnDefaultHealthCheckIpOutputArgs } from "./getVpnDefaultHealthCheckIp";
export const getVpnDefaultHealthCheckIp: typeof import("./getVpnDefaultHealthCheckIp").getVpnDefaultHealthCheckIp = null as any;
export const getVpnDefaultHealthCheckIpOutput: typeof import("./getVpnDefaultHealthCheckIp").getVpnDefaultHealthCheckIpOutput = null as any;
utilities.lazyLoad(exports, ["getVpnDefaultHealthCheckIp","getVpnDefaultHealthCheckIpOutput"], () => require("./getVpnDefaultHealthCheckIp"));

export { GetVpnGatewayRoutesArgs, GetVpnGatewayRoutesResult, GetVpnGatewayRoutesOutputArgs } from "./getVpnGatewayRoutes";
export const getVpnGatewayRoutes: typeof import("./getVpnGatewayRoutes").getVpnGatewayRoutes = null as any;
export const getVpnGatewayRoutesOutput: typeof import("./getVpnGatewayRoutes").getVpnGatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGatewayRoutes","getVpnGatewayRoutesOutput"], () => require("./getVpnGatewayRoutes"));

export { GetVpnGatewaysArgs, GetVpnGatewaysResult, GetVpnGatewaysOutputArgs } from "./getVpnGateways";
export const getVpnGateways: typeof import("./getVpnGateways").getVpnGateways = null as any;
export const getVpnGatewaysOutput: typeof import("./getVpnGateways").getVpnGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateways","getVpnGatewaysOutput"], () => require("./getVpnGateways"));

export { GetWafAttackLogHistogramArgs, GetWafAttackLogHistogramResult, GetWafAttackLogHistogramOutputArgs } from "./getWafAttackLogHistogram";
export const getWafAttackLogHistogram: typeof import("./getWafAttackLogHistogram").getWafAttackLogHistogram = null as any;
export const getWafAttackLogHistogramOutput: typeof import("./getWafAttackLogHistogram").getWafAttackLogHistogramOutput = null as any;
utilities.lazyLoad(exports, ["getWafAttackLogHistogram","getWafAttackLogHistogramOutput"], () => require("./getWafAttackLogHistogram"));

export { GetWafAttackLogListArgs, GetWafAttackLogListResult, GetWafAttackLogListOutputArgs } from "./getWafAttackLogList";
export const getWafAttackLogList: typeof import("./getWafAttackLogList").getWafAttackLogList = null as any;
export const getWafAttackLogListOutput: typeof import("./getWafAttackLogList").getWafAttackLogListOutput = null as any;
utilities.lazyLoad(exports, ["getWafAttackLogList","getWafAttackLogListOutput"], () => require("./getWafAttackLogList"));

export { GetWafAttackOverviewArgs, GetWafAttackOverviewResult, GetWafAttackOverviewOutputArgs } from "./getWafAttackOverview";
export const getWafAttackOverview: typeof import("./getWafAttackOverview").getWafAttackOverview = null as any;
export const getWafAttackOverviewOutput: typeof import("./getWafAttackOverview").getWafAttackOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getWafAttackOverview","getWafAttackOverviewOutput"], () => require("./getWafAttackOverview"));

export { GetWafAttackTotalCountArgs, GetWafAttackTotalCountResult, GetWafAttackTotalCountOutputArgs } from "./getWafAttackTotalCount";
export const getWafAttackTotalCount: typeof import("./getWafAttackTotalCount").getWafAttackTotalCount = null as any;
export const getWafAttackTotalCountOutput: typeof import("./getWafAttackTotalCount").getWafAttackTotalCountOutput = null as any;
utilities.lazyLoad(exports, ["getWafAttackTotalCount","getWafAttackTotalCountOutput"], () => require("./getWafAttackTotalCount"));

export { GetWafCiphersArgs, GetWafCiphersResult, GetWafCiphersOutputArgs } from "./getWafCiphers";
export const getWafCiphers: typeof import("./getWafCiphers").getWafCiphers = null as any;
export const getWafCiphersOutput: typeof import("./getWafCiphers").getWafCiphersOutput = null as any;
utilities.lazyLoad(exports, ["getWafCiphers","getWafCiphersOutput"], () => require("./getWafCiphers"));

export { GetWafDomainsArgs, GetWafDomainsResult, GetWafDomainsOutputArgs } from "./getWafDomains";
export const getWafDomains: typeof import("./getWafDomains").getWafDomains = null as any;
export const getWafDomainsOutput: typeof import("./getWafDomains").getWafDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getWafDomains","getWafDomainsOutput"], () => require("./getWafDomains"));

export { GetWafFindDomainsArgs, GetWafFindDomainsResult, GetWafFindDomainsOutputArgs } from "./getWafFindDomains";
export const getWafFindDomains: typeof import("./getWafFindDomains").getWafFindDomains = null as any;
export const getWafFindDomainsOutput: typeof import("./getWafFindDomains").getWafFindDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getWafFindDomains","getWafFindDomainsOutput"], () => require("./getWafFindDomains"));

export { GetWafInstanceQpsLimitArgs, GetWafInstanceQpsLimitResult, GetWafInstanceQpsLimitOutputArgs } from "./getWafInstanceQpsLimit";
export const getWafInstanceQpsLimit: typeof import("./getWafInstanceQpsLimit").getWafInstanceQpsLimit = null as any;
export const getWafInstanceQpsLimitOutput: typeof import("./getWafInstanceQpsLimit").getWafInstanceQpsLimitOutput = null as any;
utilities.lazyLoad(exports, ["getWafInstanceQpsLimit","getWafInstanceQpsLimitOutput"], () => require("./getWafInstanceQpsLimit"));

export { GetWafPeakPointsArgs, GetWafPeakPointsResult, GetWafPeakPointsOutputArgs } from "./getWafPeakPoints";
export const getWafPeakPoints: typeof import("./getWafPeakPoints").getWafPeakPoints = null as any;
export const getWafPeakPointsOutput: typeof import("./getWafPeakPoints").getWafPeakPointsOutput = null as any;
utilities.lazyLoad(exports, ["getWafPeakPoints","getWafPeakPointsOutput"], () => require("./getWafPeakPoints"));

export { GetWafPortsArgs, GetWafPortsResult, GetWafPortsOutputArgs } from "./getWafPorts";
export const getWafPorts: typeof import("./getWafPorts").getWafPorts = null as any;
export const getWafPortsOutput: typeof import("./getWafPorts").getWafPortsOutput = null as any;
utilities.lazyLoad(exports, ["getWafPorts","getWafPortsOutput"], () => require("./getWafPorts"));

export { GetWafTlsVersionsArgs, GetWafTlsVersionsResult, GetWafTlsVersionsOutputArgs } from "./getWafTlsVersions";
export const getWafTlsVersions: typeof import("./getWafTlsVersions").getWafTlsVersions = null as any;
export const getWafTlsVersionsOutput: typeof import("./getWafTlsVersions").getWafTlsVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getWafTlsVersions","getWafTlsVersionsOutput"], () => require("./getWafTlsVersions"));

export { GetWafUserClbRegionsArgs, GetWafUserClbRegionsResult, GetWafUserClbRegionsOutputArgs } from "./getWafUserClbRegions";
export const getWafUserClbRegions: typeof import("./getWafUserClbRegions").getWafUserClbRegions = null as any;
export const getWafUserClbRegionsOutput: typeof import("./getWafUserClbRegions").getWafUserClbRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getWafUserClbRegions","getWafUserClbRegionsOutput"], () => require("./getWafUserClbRegions"));

export { GetWafUserDomainsArgs, GetWafUserDomainsResult, GetWafUserDomainsOutputArgs } from "./getWafUserDomains";
export const getWafUserDomains: typeof import("./getWafUserDomains").getWafUserDomains = null as any;
export const getWafUserDomainsOutput: typeof import("./getWafUserDomains").getWafUserDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getWafUserDomains","getWafUserDomainsOutput"], () => require("./getWafUserDomains"));

export { GetWafWafInfosArgs, GetWafWafInfosResult, GetWafWafInfosOutputArgs } from "./getWafWafInfos";
export const getWafWafInfos: typeof import("./getWafWafInfos").getWafWafInfos = null as any;
export const getWafWafInfosOutput: typeof import("./getWafWafInfos").getWafWafInfosOutput = null as any;
utilities.lazyLoad(exports, ["getWafWafInfos","getWafWafInfosOutput"], () => require("./getWafWafInfos"));

export { GetWedataDataSourceListArgs, GetWedataDataSourceListResult, GetWedataDataSourceListOutputArgs } from "./getWedataDataSourceList";
export const getWedataDataSourceList: typeof import("./getWedataDataSourceList").getWedataDataSourceList = null as any;
export const getWedataDataSourceListOutput: typeof import("./getWedataDataSourceList").getWedataDataSourceListOutput = null as any;
utilities.lazyLoad(exports, ["getWedataDataSourceList","getWedataDataSourceListOutput"], () => require("./getWedataDataSourceList"));

export { GetWedataDataSourceWithoutInfoArgs, GetWedataDataSourceWithoutInfoResult, GetWedataDataSourceWithoutInfoOutputArgs } from "./getWedataDataSourceWithoutInfo";
export const getWedataDataSourceWithoutInfo: typeof import("./getWedataDataSourceWithoutInfo").getWedataDataSourceWithoutInfo = null as any;
export const getWedataDataSourceWithoutInfoOutput: typeof import("./getWedataDataSourceWithoutInfo").getWedataDataSourceWithoutInfoOutput = null as any;
utilities.lazyLoad(exports, ["getWedataDataSourceWithoutInfo","getWedataDataSourceWithoutInfoOutput"], () => require("./getWedataDataSourceWithoutInfo"));

export { GetWedataRuleTemplatesArgs, GetWedataRuleTemplatesResult, GetWedataRuleTemplatesOutputArgs } from "./getWedataRuleTemplates";
export const getWedataRuleTemplates: typeof import("./getWedataRuleTemplates").getWedataRuleTemplates = null as any;
export const getWedataRuleTemplatesOutput: typeof import("./getWedataRuleTemplates").getWedataRuleTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getWedataRuleTemplates","getWedataRuleTemplatesOutput"], () => require("./getWedataRuleTemplates"));

export { HaVipArgs, HaVipState } from "./haVip";
export type HaVip = import("./haVip").HaVip;
export const HaVip: typeof import("./haVip").HaVip = null as any;
utilities.lazyLoad(exports, ["HaVip"], () => require("./haVip"));

export { HaVipEipAttachmentArgs, HaVipEipAttachmentState } from "./haVipEipAttachment";
export type HaVipEipAttachment = import("./haVipEipAttachment").HaVipEipAttachment;
export const HaVipEipAttachment: typeof import("./haVipEipAttachment").HaVipEipAttachment = null as any;
utilities.lazyLoad(exports, ["HaVipEipAttachment"], () => require("./haVipEipAttachment"));

export { IdentityCenterExternalSamlIdentityProviderArgs, IdentityCenterExternalSamlIdentityProviderState } from "./identityCenterExternalSamlIdentityProvider";
export type IdentityCenterExternalSamlIdentityProvider = import("./identityCenterExternalSamlIdentityProvider").IdentityCenterExternalSamlIdentityProvider;
export const IdentityCenterExternalSamlIdentityProvider: typeof import("./identityCenterExternalSamlIdentityProvider").IdentityCenterExternalSamlIdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityCenterExternalSamlIdentityProvider"], () => require("./identityCenterExternalSamlIdentityProvider"));

export { IdentityCenterGroupArgs, IdentityCenterGroupState } from "./identityCenterGroup";
export type IdentityCenterGroup = import("./identityCenterGroup").IdentityCenterGroup;
export const IdentityCenterGroup: typeof import("./identityCenterGroup").IdentityCenterGroup = null as any;
utilities.lazyLoad(exports, ["IdentityCenterGroup"], () => require("./identityCenterGroup"));

export { IdentityCenterRoleAssignmentArgs, IdentityCenterRoleAssignmentState } from "./identityCenterRoleAssignment";
export type IdentityCenterRoleAssignment = import("./identityCenterRoleAssignment").IdentityCenterRoleAssignment;
export const IdentityCenterRoleAssignment: typeof import("./identityCenterRoleAssignment").IdentityCenterRoleAssignment = null as any;
utilities.lazyLoad(exports, ["IdentityCenterRoleAssignment"], () => require("./identityCenterRoleAssignment"));

export { IdentityCenterRoleConfigurationArgs, IdentityCenterRoleConfigurationState } from "./identityCenterRoleConfiguration";
export type IdentityCenterRoleConfiguration = import("./identityCenterRoleConfiguration").IdentityCenterRoleConfiguration;
export const IdentityCenterRoleConfiguration: typeof import("./identityCenterRoleConfiguration").IdentityCenterRoleConfiguration = null as any;
utilities.lazyLoad(exports, ["IdentityCenterRoleConfiguration"], () => require("./identityCenterRoleConfiguration"));

export { IdentityCenterRoleConfigurationPermissionPolicyAttachmentArgs, IdentityCenterRoleConfigurationPermissionPolicyAttachmentState } from "./identityCenterRoleConfigurationPermissionPolicyAttachment";
export type IdentityCenterRoleConfigurationPermissionPolicyAttachment = import("./identityCenterRoleConfigurationPermissionPolicyAttachment").IdentityCenterRoleConfigurationPermissionPolicyAttachment;
export const IdentityCenterRoleConfigurationPermissionPolicyAttachment: typeof import("./identityCenterRoleConfigurationPermissionPolicyAttachment").IdentityCenterRoleConfigurationPermissionPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IdentityCenterRoleConfigurationPermissionPolicyAttachment"], () => require("./identityCenterRoleConfigurationPermissionPolicyAttachment"));

export { IdentityCenterUserArgs, IdentityCenterUserState } from "./identityCenterUser";
export type IdentityCenterUser = import("./identityCenterUser").IdentityCenterUser;
export const IdentityCenterUser: typeof import("./identityCenterUser").IdentityCenterUser = null as any;
utilities.lazyLoad(exports, ["IdentityCenterUser"], () => require("./identityCenterUser"));

export { IdentityCenterUserGroupAttachmentArgs, IdentityCenterUserGroupAttachmentState } from "./identityCenterUserGroupAttachment";
export type IdentityCenterUserGroupAttachment = import("./identityCenterUserGroupAttachment").IdentityCenterUserGroupAttachment;
export const IdentityCenterUserGroupAttachment: typeof import("./identityCenterUserGroupAttachment").IdentityCenterUserGroupAttachment = null as any;
utilities.lazyLoad(exports, ["IdentityCenterUserGroupAttachment"], () => require("./identityCenterUserGroupAttachment"));

export { IdentityCenterUserSyncProvisioningArgs, IdentityCenterUserSyncProvisioningState } from "./identityCenterUserSyncProvisioning";
export type IdentityCenterUserSyncProvisioning = import("./identityCenterUserSyncProvisioning").IdentityCenterUserSyncProvisioning;
export const IdentityCenterUserSyncProvisioning: typeof import("./identityCenterUserSyncProvisioning").IdentityCenterUserSyncProvisioning = null as any;
utilities.lazyLoad(exports, ["IdentityCenterUserSyncProvisioning"], () => require("./identityCenterUserSyncProvisioning"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceSetArgs, InstanceSetState } from "./instanceSet";
export type InstanceSet = import("./instanceSet").InstanceSet;
export const InstanceSet: typeof import("./instanceSet").InstanceSet = null as any;
utilities.lazyLoad(exports, ["InstanceSet"], () => require("./instanceSet"));

export { Ipv6AddressBandwidthArgs, Ipv6AddressBandwidthState } from "./ipv6AddressBandwidth";
export type Ipv6AddressBandwidth = import("./ipv6AddressBandwidth").Ipv6AddressBandwidth;
export const Ipv6AddressBandwidth: typeof import("./ipv6AddressBandwidth").Ipv6AddressBandwidth = null as any;
utilities.lazyLoad(exports, ["Ipv6AddressBandwidth"], () => require("./ipv6AddressBandwidth"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { KmsCloudResourceAttachmentArgs, KmsCloudResourceAttachmentState } from "./kmsCloudResourceAttachment";
export type KmsCloudResourceAttachment = import("./kmsCloudResourceAttachment").KmsCloudResourceAttachment;
export const KmsCloudResourceAttachment: typeof import("./kmsCloudResourceAttachment").KmsCloudResourceAttachment = null as any;
utilities.lazyLoad(exports, ["KmsCloudResourceAttachment"], () => require("./kmsCloudResourceAttachment"));

export { KmsExternalKeyArgs, KmsExternalKeyState } from "./kmsExternalKey";
export type KmsExternalKey = import("./kmsExternalKey").KmsExternalKey;
export const KmsExternalKey: typeof import("./kmsExternalKey").KmsExternalKey = null as any;
utilities.lazyLoad(exports, ["KmsExternalKey"], () => require("./kmsExternalKey"));

export { KmsKeyArgs, KmsKeyState } from "./kmsKey";
export type KmsKey = import("./kmsKey").KmsKey;
export const KmsKey: typeof import("./kmsKey").KmsKey = null as any;
utilities.lazyLoad(exports, ["KmsKey"], () => require("./kmsKey"));

export { KmsOverwriteWhiteBoxDeviceFingerprintsArgs, KmsOverwriteWhiteBoxDeviceFingerprintsState } from "./kmsOverwriteWhiteBoxDeviceFingerprints";
export type KmsOverwriteWhiteBoxDeviceFingerprints = import("./kmsOverwriteWhiteBoxDeviceFingerprints").KmsOverwriteWhiteBoxDeviceFingerprints;
export const KmsOverwriteWhiteBoxDeviceFingerprints: typeof import("./kmsOverwriteWhiteBoxDeviceFingerprints").KmsOverwriteWhiteBoxDeviceFingerprints = null as any;
utilities.lazyLoad(exports, ["KmsOverwriteWhiteBoxDeviceFingerprints"], () => require("./kmsOverwriteWhiteBoxDeviceFingerprints"));

export { KmsWhiteBoxKeyArgs, KmsWhiteBoxKeyState } from "./kmsWhiteBoxKey";
export type KmsWhiteBoxKey = import("./kmsWhiteBoxKey").KmsWhiteBoxKey;
export const KmsWhiteBoxKey: typeof import("./kmsWhiteBoxKey").KmsWhiteBoxKey = null as any;
utilities.lazyLoad(exports, ["KmsWhiteBoxKey"], () => require("./kmsWhiteBoxKey"));

export { KubernetesAddonArgs, KubernetesAddonState } from "./kubernetesAddon";
export type KubernetesAddon = import("./kubernetesAddon").KubernetesAddon;
export const KubernetesAddon: typeof import("./kubernetesAddon").KubernetesAddon = null as any;
utilities.lazyLoad(exports, ["KubernetesAddon"], () => require("./kubernetesAddon"));

export { KubernetesAddonAttachmentArgs, KubernetesAddonAttachmentState } from "./kubernetesAddonAttachment";
export type KubernetesAddonAttachment = import("./kubernetesAddonAttachment").KubernetesAddonAttachment;
export const KubernetesAddonAttachment: typeof import("./kubernetesAddonAttachment").KubernetesAddonAttachment = null as any;
utilities.lazyLoad(exports, ["KubernetesAddonAttachment"], () => require("./kubernetesAddonAttachment"));

export { KubernetesAddonConfigArgs, KubernetesAddonConfigState } from "./kubernetesAddonConfig";
export type KubernetesAddonConfig = import("./kubernetesAddonConfig").KubernetesAddonConfig;
export const KubernetesAddonConfig: typeof import("./kubernetesAddonConfig").KubernetesAddonConfig = null as any;
utilities.lazyLoad(exports, ["KubernetesAddonConfig"], () => require("./kubernetesAddonConfig"));

export { KubernetesAsScalingGroupArgs, KubernetesAsScalingGroupState } from "./kubernetesAsScalingGroup";
export type KubernetesAsScalingGroup = import("./kubernetesAsScalingGroup").KubernetesAsScalingGroup;
export const KubernetesAsScalingGroup: typeof import("./kubernetesAsScalingGroup").KubernetesAsScalingGroup = null as any;
utilities.lazyLoad(exports, ["KubernetesAsScalingGroup"], () => require("./kubernetesAsScalingGroup"));

export { KubernetesAuthAttachmentArgs, KubernetesAuthAttachmentState } from "./kubernetesAuthAttachment";
export type KubernetesAuthAttachment = import("./kubernetesAuthAttachment").KubernetesAuthAttachment;
export const KubernetesAuthAttachment: typeof import("./kubernetesAuthAttachment").KubernetesAuthAttachment = null as any;
utilities.lazyLoad(exports, ["KubernetesAuthAttachment"], () => require("./kubernetesAuthAttachment"));

export { KubernetesBackupStorageLocationArgs, KubernetesBackupStorageLocationState } from "./kubernetesBackupStorageLocation";
export type KubernetesBackupStorageLocation = import("./kubernetesBackupStorageLocation").KubernetesBackupStorageLocation;
export const KubernetesBackupStorageLocation: typeof import("./kubernetesBackupStorageLocation").KubernetesBackupStorageLocation = null as any;
utilities.lazyLoad(exports, ["KubernetesBackupStorageLocation"], () => require("./kubernetesBackupStorageLocation"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesClusterAttachmentArgs, KubernetesClusterAttachmentState } from "./kubernetesClusterAttachment";
export type KubernetesClusterAttachment = import("./kubernetesClusterAttachment").KubernetesClusterAttachment;
export const KubernetesClusterAttachment: typeof import("./kubernetesClusterAttachment").KubernetesClusterAttachment = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterAttachment"], () => require("./kubernetesClusterAttachment"));

export { KubernetesClusterEndpointArgs, KubernetesClusterEndpointState } from "./kubernetesClusterEndpoint";
export type KubernetesClusterEndpoint = import("./kubernetesClusterEndpoint").KubernetesClusterEndpoint;
export const KubernetesClusterEndpoint: typeof import("./kubernetesClusterEndpoint").KubernetesClusterEndpoint = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterEndpoint"], () => require("./kubernetesClusterEndpoint"));

export { KubernetesEncryptionProtectionArgs, KubernetesEncryptionProtectionState } from "./kubernetesEncryptionProtection";
export type KubernetesEncryptionProtection = import("./kubernetesEncryptionProtection").KubernetesEncryptionProtection;
export const KubernetesEncryptionProtection: typeof import("./kubernetesEncryptionProtection").KubernetesEncryptionProtection = null as any;
utilities.lazyLoad(exports, ["KubernetesEncryptionProtection"], () => require("./kubernetesEncryptionProtection"));

export { KubernetesNativeNodePoolArgs, KubernetesNativeNodePoolState } from "./kubernetesNativeNodePool";
export type KubernetesNativeNodePool = import("./kubernetesNativeNodePool").KubernetesNativeNodePool;
export const KubernetesNativeNodePool: typeof import("./kubernetesNativeNodePool").KubernetesNativeNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesNativeNodePool"], () => require("./kubernetesNativeNodePool"));

export { KubernetesNodePoolArgs, KubernetesNodePoolState } from "./kubernetesNodePool";
export type KubernetesNodePool = import("./kubernetesNodePool").KubernetesNodePool;
export const KubernetesNodePool: typeof import("./kubernetesNodePool").KubernetesNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesNodePool"], () => require("./kubernetesNodePool"));

export { KubernetesScaleWorkerArgs, KubernetesScaleWorkerState } from "./kubernetesScaleWorker";
export type KubernetesScaleWorker = import("./kubernetesScaleWorker").KubernetesScaleWorker;
export const KubernetesScaleWorker: typeof import("./kubernetesScaleWorker").KubernetesScaleWorker = null as any;
utilities.lazyLoad(exports, ["KubernetesScaleWorker"], () => require("./kubernetesScaleWorker"));

export { KubernetesServerlessNodePoolArgs, KubernetesServerlessNodePoolState } from "./kubernetesServerlessNodePool";
export type KubernetesServerlessNodePool = import("./kubernetesServerlessNodePool").KubernetesServerlessNodePool;
export const KubernetesServerlessNodePool: typeof import("./kubernetesServerlessNodePool").KubernetesServerlessNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesServerlessNodePool"], () => require("./kubernetesServerlessNodePool"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LighthouseApplyDiskBackupArgs, LighthouseApplyDiskBackupState } from "./lighthouseApplyDiskBackup";
export type LighthouseApplyDiskBackup = import("./lighthouseApplyDiskBackup").LighthouseApplyDiskBackup;
export const LighthouseApplyDiskBackup: typeof import("./lighthouseApplyDiskBackup").LighthouseApplyDiskBackup = null as any;
utilities.lazyLoad(exports, ["LighthouseApplyDiskBackup"], () => require("./lighthouseApplyDiskBackup"));

export { LighthouseApplyInstanceSnapshotArgs, LighthouseApplyInstanceSnapshotState } from "./lighthouseApplyInstanceSnapshot";
export type LighthouseApplyInstanceSnapshot = import("./lighthouseApplyInstanceSnapshot").LighthouseApplyInstanceSnapshot;
export const LighthouseApplyInstanceSnapshot: typeof import("./lighthouseApplyInstanceSnapshot").LighthouseApplyInstanceSnapshot = null as any;
utilities.lazyLoad(exports, ["LighthouseApplyInstanceSnapshot"], () => require("./lighthouseApplyInstanceSnapshot"));

export { LighthouseBlueprintArgs, LighthouseBlueprintState } from "./lighthouseBlueprint";
export type LighthouseBlueprint = import("./lighthouseBlueprint").LighthouseBlueprint;
export const LighthouseBlueprint: typeof import("./lighthouseBlueprint").LighthouseBlueprint = null as any;
utilities.lazyLoad(exports, ["LighthouseBlueprint"], () => require("./lighthouseBlueprint"));

export { LighthouseDiskArgs, LighthouseDiskState } from "./lighthouseDisk";
export type LighthouseDisk = import("./lighthouseDisk").LighthouseDisk;
export const LighthouseDisk: typeof import("./lighthouseDisk").LighthouseDisk = null as any;
utilities.lazyLoad(exports, ["LighthouseDisk"], () => require("./lighthouseDisk"));

export { LighthouseDiskAttachmentArgs, LighthouseDiskAttachmentState } from "./lighthouseDiskAttachment";
export type LighthouseDiskAttachment = import("./lighthouseDiskAttachment").LighthouseDiskAttachment;
export const LighthouseDiskAttachment: typeof import("./lighthouseDiskAttachment").LighthouseDiskAttachment = null as any;
utilities.lazyLoad(exports, ["LighthouseDiskAttachment"], () => require("./lighthouseDiskAttachment"));

export { LighthouseDiskBackupArgs, LighthouseDiskBackupState } from "./lighthouseDiskBackup";
export type LighthouseDiskBackup = import("./lighthouseDiskBackup").LighthouseDiskBackup;
export const LighthouseDiskBackup: typeof import("./lighthouseDiskBackup").LighthouseDiskBackup = null as any;
utilities.lazyLoad(exports, ["LighthouseDiskBackup"], () => require("./lighthouseDiskBackup"));

export { LighthouseFirewallRuleArgs, LighthouseFirewallRuleState } from "./lighthouseFirewallRule";
export type LighthouseFirewallRule = import("./lighthouseFirewallRule").LighthouseFirewallRule;
export const LighthouseFirewallRule: typeof import("./lighthouseFirewallRule").LighthouseFirewallRule = null as any;
utilities.lazyLoad(exports, ["LighthouseFirewallRule"], () => require("./lighthouseFirewallRule"));

export { LighthouseFirewallTemplateArgs, LighthouseFirewallTemplateState } from "./lighthouseFirewallTemplate";
export type LighthouseFirewallTemplate = import("./lighthouseFirewallTemplate").LighthouseFirewallTemplate;
export const LighthouseFirewallTemplate: typeof import("./lighthouseFirewallTemplate").LighthouseFirewallTemplate = null as any;
utilities.lazyLoad(exports, ["LighthouseFirewallTemplate"], () => require("./lighthouseFirewallTemplate"));

export { LighthouseInstanceArgs, LighthouseInstanceState } from "./lighthouseInstance";
export type LighthouseInstance = import("./lighthouseInstance").LighthouseInstance;
export const LighthouseInstance: typeof import("./lighthouseInstance").LighthouseInstance = null as any;
utilities.lazyLoad(exports, ["LighthouseInstance"], () => require("./lighthouseInstance"));

export { LighthouseKeyPairArgs, LighthouseKeyPairState } from "./lighthouseKeyPair";
export type LighthouseKeyPair = import("./lighthouseKeyPair").LighthouseKeyPair;
export const LighthouseKeyPair: typeof import("./lighthouseKeyPair").LighthouseKeyPair = null as any;
utilities.lazyLoad(exports, ["LighthouseKeyPair"], () => require("./lighthouseKeyPair"));

export { LighthouseKeyPairAttachmentArgs, LighthouseKeyPairAttachmentState } from "./lighthouseKeyPairAttachment";
export type LighthouseKeyPairAttachment = import("./lighthouseKeyPairAttachment").LighthouseKeyPairAttachment;
export const LighthouseKeyPairAttachment: typeof import("./lighthouseKeyPairAttachment").LighthouseKeyPairAttachment = null as any;
utilities.lazyLoad(exports, ["LighthouseKeyPairAttachment"], () => require("./lighthouseKeyPairAttachment"));

export { LighthouseRebootInstanceArgs, LighthouseRebootInstanceState } from "./lighthouseRebootInstance";
export type LighthouseRebootInstance = import("./lighthouseRebootInstance").LighthouseRebootInstance;
export const LighthouseRebootInstance: typeof import("./lighthouseRebootInstance").LighthouseRebootInstance = null as any;
utilities.lazyLoad(exports, ["LighthouseRebootInstance"], () => require("./lighthouseRebootInstance"));

export { LighthouseRenewDiskArgs, LighthouseRenewDiskState } from "./lighthouseRenewDisk";
export type LighthouseRenewDisk = import("./lighthouseRenewDisk").LighthouseRenewDisk;
export const LighthouseRenewDisk: typeof import("./lighthouseRenewDisk").LighthouseRenewDisk = null as any;
utilities.lazyLoad(exports, ["LighthouseRenewDisk"], () => require("./lighthouseRenewDisk"));

export { LighthouseRenewInstanceArgs, LighthouseRenewInstanceState } from "./lighthouseRenewInstance";
export type LighthouseRenewInstance = import("./lighthouseRenewInstance").LighthouseRenewInstance;
export const LighthouseRenewInstance: typeof import("./lighthouseRenewInstance").LighthouseRenewInstance = null as any;
utilities.lazyLoad(exports, ["LighthouseRenewInstance"], () => require("./lighthouseRenewInstance"));

export { LighthouseSnapshotArgs, LighthouseSnapshotState } from "./lighthouseSnapshot";
export type LighthouseSnapshot = import("./lighthouseSnapshot").LighthouseSnapshot;
export const LighthouseSnapshot: typeof import("./lighthouseSnapshot").LighthouseSnapshot = null as any;
utilities.lazyLoad(exports, ["LighthouseSnapshot"], () => require("./lighthouseSnapshot"));

export { LighthouseStartInstanceArgs, LighthouseStartInstanceState } from "./lighthouseStartInstance";
export type LighthouseStartInstance = import("./lighthouseStartInstance").LighthouseStartInstance;
export const LighthouseStartInstance: typeof import("./lighthouseStartInstance").LighthouseStartInstance = null as any;
utilities.lazyLoad(exports, ["LighthouseStartInstance"], () => require("./lighthouseStartInstance"));

export { LighthouseStopInstanceArgs, LighthouseStopInstanceState } from "./lighthouseStopInstance";
export type LighthouseStopInstance = import("./lighthouseStopInstance").LighthouseStopInstance;
export const LighthouseStopInstance: typeof import("./lighthouseStopInstance").LighthouseStopInstance = null as any;
utilities.lazyLoad(exports, ["LighthouseStopInstance"], () => require("./lighthouseStopInstance"));

export { MariadbAccountArgs, MariadbAccountState } from "./mariadbAccount";
export type MariadbAccount = import("./mariadbAccount").MariadbAccount;
export const MariadbAccount: typeof import("./mariadbAccount").MariadbAccount = null as any;
utilities.lazyLoad(exports, ["MariadbAccount"], () => require("./mariadbAccount"));

export { MariadbAccountPrivilegesArgs, MariadbAccountPrivilegesState } from "./mariadbAccountPrivileges";
export type MariadbAccountPrivileges = import("./mariadbAccountPrivileges").MariadbAccountPrivileges;
export const MariadbAccountPrivileges: typeof import("./mariadbAccountPrivileges").MariadbAccountPrivileges = null as any;
utilities.lazyLoad(exports, ["MariadbAccountPrivileges"], () => require("./mariadbAccountPrivileges"));

export { MariadbBackupTimeArgs, MariadbBackupTimeState } from "./mariadbBackupTime";
export type MariadbBackupTime = import("./mariadbBackupTime").MariadbBackupTime;
export const MariadbBackupTime: typeof import("./mariadbBackupTime").MariadbBackupTime = null as any;
utilities.lazyLoad(exports, ["MariadbBackupTime"], () => require("./mariadbBackupTime"));

export { MariadbCancelDcnJobArgs, MariadbCancelDcnJobState } from "./mariadbCancelDcnJob";
export type MariadbCancelDcnJob = import("./mariadbCancelDcnJob").MariadbCancelDcnJob;
export const MariadbCancelDcnJob: typeof import("./mariadbCancelDcnJob").MariadbCancelDcnJob = null as any;
utilities.lazyLoad(exports, ["MariadbCancelDcnJob"], () => require("./mariadbCancelDcnJob"));

export { MariadbDedicatedclusterDbInstanceArgs, MariadbDedicatedclusterDbInstanceState } from "./mariadbDedicatedclusterDbInstance";
export type MariadbDedicatedclusterDbInstance = import("./mariadbDedicatedclusterDbInstance").MariadbDedicatedclusterDbInstance;
export const MariadbDedicatedclusterDbInstance: typeof import("./mariadbDedicatedclusterDbInstance").MariadbDedicatedclusterDbInstance = null as any;
utilities.lazyLoad(exports, ["MariadbDedicatedclusterDbInstance"], () => require("./mariadbDedicatedclusterDbInstance"));

export { MariadbEncryptAttributesArgs, MariadbEncryptAttributesState } from "./mariadbEncryptAttributes";
export type MariadbEncryptAttributes = import("./mariadbEncryptAttributes").MariadbEncryptAttributes;
export const MariadbEncryptAttributes: typeof import("./mariadbEncryptAttributes").MariadbEncryptAttributes = null as any;
utilities.lazyLoad(exports, ["MariadbEncryptAttributes"], () => require("./mariadbEncryptAttributes"));

export { MariadbFlushBinlogArgs, MariadbFlushBinlogState } from "./mariadbFlushBinlog";
export type MariadbFlushBinlog = import("./mariadbFlushBinlog").MariadbFlushBinlog;
export const MariadbFlushBinlog: typeof import("./mariadbFlushBinlog").MariadbFlushBinlog = null as any;
utilities.lazyLoad(exports, ["MariadbFlushBinlog"], () => require("./mariadbFlushBinlog"));

export { MariadbHourDbInstanceArgs, MariadbHourDbInstanceState } from "./mariadbHourDbInstance";
export type MariadbHourDbInstance = import("./mariadbHourDbInstance").MariadbHourDbInstance;
export const MariadbHourDbInstance: typeof import("./mariadbHourDbInstance").MariadbHourDbInstance = null as any;
utilities.lazyLoad(exports, ["MariadbHourDbInstance"], () => require("./mariadbHourDbInstance"));

export { MariadbInstanceArgs, MariadbInstanceState } from "./mariadbInstance";
export type MariadbInstance = import("./mariadbInstance").MariadbInstance;
export const MariadbInstance: typeof import("./mariadbInstance").MariadbInstance = null as any;
utilities.lazyLoad(exports, ["MariadbInstance"], () => require("./mariadbInstance"));

export { MariadbInstanceConfigArgs, MariadbInstanceConfigState } from "./mariadbInstanceConfig";
export type MariadbInstanceConfig = import("./mariadbInstanceConfig").MariadbInstanceConfig;
export const MariadbInstanceConfig: typeof import("./mariadbInstanceConfig").MariadbInstanceConfig = null as any;
utilities.lazyLoad(exports, ["MariadbInstanceConfig"], () => require("./mariadbInstanceConfig"));

export { MariadbLogFileRetentionPeriodArgs, MariadbLogFileRetentionPeriodState } from "./mariadbLogFileRetentionPeriod";
export type MariadbLogFileRetentionPeriod = import("./mariadbLogFileRetentionPeriod").MariadbLogFileRetentionPeriod;
export const MariadbLogFileRetentionPeriod: typeof import("./mariadbLogFileRetentionPeriod").MariadbLogFileRetentionPeriod = null as any;
utilities.lazyLoad(exports, ["MariadbLogFileRetentionPeriod"], () => require("./mariadbLogFileRetentionPeriod"));

export { MariadbOperateHourDbInstanceArgs, MariadbOperateHourDbInstanceState } from "./mariadbOperateHourDbInstance";
export type MariadbOperateHourDbInstance = import("./mariadbOperateHourDbInstance").MariadbOperateHourDbInstance;
export const MariadbOperateHourDbInstance: typeof import("./mariadbOperateHourDbInstance").MariadbOperateHourDbInstance = null as any;
utilities.lazyLoad(exports, ["MariadbOperateHourDbInstance"], () => require("./mariadbOperateHourDbInstance"));

export { MariadbParametersArgs, MariadbParametersState } from "./mariadbParameters";
export type MariadbParameters = import("./mariadbParameters").MariadbParameters;
export const MariadbParameters: typeof import("./mariadbParameters").MariadbParameters = null as any;
utilities.lazyLoad(exports, ["MariadbParameters"], () => require("./mariadbParameters"));

export { MariadbRenewInstanceArgs, MariadbRenewInstanceState } from "./mariadbRenewInstance";
export type MariadbRenewInstance = import("./mariadbRenewInstance").MariadbRenewInstance;
export const MariadbRenewInstance: typeof import("./mariadbRenewInstance").MariadbRenewInstance = null as any;
utilities.lazyLoad(exports, ["MariadbRenewInstance"], () => require("./mariadbRenewInstance"));

export { MariadbRestartInstanceArgs, MariadbRestartInstanceState } from "./mariadbRestartInstance";
export type MariadbRestartInstance = import("./mariadbRestartInstance").MariadbRestartInstance;
export const MariadbRestartInstance: typeof import("./mariadbRestartInstance").MariadbRestartInstance = null as any;
utilities.lazyLoad(exports, ["MariadbRestartInstance"], () => require("./mariadbRestartInstance"));

export { MariadbSecurityGroupsArgs, MariadbSecurityGroupsState } from "./mariadbSecurityGroups";
export type MariadbSecurityGroups = import("./mariadbSecurityGroups").MariadbSecurityGroups;
export const MariadbSecurityGroups: typeof import("./mariadbSecurityGroups").MariadbSecurityGroups = null as any;
utilities.lazyLoad(exports, ["MariadbSecurityGroups"], () => require("./mariadbSecurityGroups"));

export { MariadbSwitchHaArgs, MariadbSwitchHaState } from "./mariadbSwitchHa";
export type MariadbSwitchHa = import("./mariadbSwitchHa").MariadbSwitchHa;
export const MariadbSwitchHa: typeof import("./mariadbSwitchHa").MariadbSwitchHa = null as any;
utilities.lazyLoad(exports, ["MariadbSwitchHa"], () => require("./mariadbSwitchHa"));

export { MdlStreamLiveInputArgs, MdlStreamLiveInputState } from "./mdlStreamLiveInput";
export type MdlStreamLiveInput = import("./mdlStreamLiveInput").MdlStreamLiveInput;
export const MdlStreamLiveInput: typeof import("./mdlStreamLiveInput").MdlStreamLiveInput = null as any;
utilities.lazyLoad(exports, ["MdlStreamLiveInput"], () => require("./mdlStreamLiveInput"));

export { MongodbInstanceArgs, MongodbInstanceState } from "./mongodbInstance";
export type MongodbInstance = import("./mongodbInstance").MongodbInstance;
export const MongodbInstance: typeof import("./mongodbInstance").MongodbInstance = null as any;
utilities.lazyLoad(exports, ["MongodbInstance"], () => require("./mongodbInstance"));

export { MongodbInstanceAccountArgs, MongodbInstanceAccountState } from "./mongodbInstanceAccount";
export type MongodbInstanceAccount = import("./mongodbInstanceAccount").MongodbInstanceAccount;
export const MongodbInstanceAccount: typeof import("./mongodbInstanceAccount").MongodbInstanceAccount = null as any;
utilities.lazyLoad(exports, ["MongodbInstanceAccount"], () => require("./mongodbInstanceAccount"));

export { MongodbInstanceBackupArgs, MongodbInstanceBackupState } from "./mongodbInstanceBackup";
export type MongodbInstanceBackup = import("./mongodbInstanceBackup").MongodbInstanceBackup;
export const MongodbInstanceBackup: typeof import("./mongodbInstanceBackup").MongodbInstanceBackup = null as any;
utilities.lazyLoad(exports, ["MongodbInstanceBackup"], () => require("./mongodbInstanceBackup"));

export { MongodbInstanceBackupDownloadTaskArgs, MongodbInstanceBackupDownloadTaskState } from "./mongodbInstanceBackupDownloadTask";
export type MongodbInstanceBackupDownloadTask = import("./mongodbInstanceBackupDownloadTask").MongodbInstanceBackupDownloadTask;
export const MongodbInstanceBackupDownloadTask: typeof import("./mongodbInstanceBackupDownloadTask").MongodbInstanceBackupDownloadTask = null as any;
utilities.lazyLoad(exports, ["MongodbInstanceBackupDownloadTask"], () => require("./mongodbInstanceBackupDownloadTask"));

export { MongodbInstanceBackupRuleArgs, MongodbInstanceBackupRuleState } from "./mongodbInstanceBackupRule";
export type MongodbInstanceBackupRule = import("./mongodbInstanceBackupRule").MongodbInstanceBackupRule;
export const MongodbInstanceBackupRule: typeof import("./mongodbInstanceBackupRule").MongodbInstanceBackupRule = null as any;
utilities.lazyLoad(exports, ["MongodbInstanceBackupRule"], () => require("./mongodbInstanceBackupRule"));

export { MongodbInstanceTransparentDataEncryptionArgs, MongodbInstanceTransparentDataEncryptionState } from "./mongodbInstanceTransparentDataEncryption";
export type MongodbInstanceTransparentDataEncryption = import("./mongodbInstanceTransparentDataEncryption").MongodbInstanceTransparentDataEncryption;
export const MongodbInstanceTransparentDataEncryption: typeof import("./mongodbInstanceTransparentDataEncryption").MongodbInstanceTransparentDataEncryption = null as any;
utilities.lazyLoad(exports, ["MongodbInstanceTransparentDataEncryption"], () => require("./mongodbInstanceTransparentDataEncryption"));

export { MongodbShardingInstanceArgs, MongodbShardingInstanceState } from "./mongodbShardingInstance";
export type MongodbShardingInstance = import("./mongodbShardingInstance").MongodbShardingInstance;
export const MongodbShardingInstance: typeof import("./mongodbShardingInstance").MongodbShardingInstance = null as any;
utilities.lazyLoad(exports, ["MongodbShardingInstance"], () => require("./mongodbShardingInstance"));

export { MongodbStandbyInstanceArgs, MongodbStandbyInstanceState } from "./mongodbStandbyInstance";
export type MongodbStandbyInstance = import("./mongodbStandbyInstance").MongodbStandbyInstance;
export const MongodbStandbyInstance: typeof import("./mongodbStandbyInstance").MongodbStandbyInstance = null as any;
utilities.lazyLoad(exports, ["MongodbStandbyInstance"], () => require("./mongodbStandbyInstance"));

export { MonitorAlarmNoticeArgs, MonitorAlarmNoticeState } from "./monitorAlarmNotice";
export type MonitorAlarmNotice = import("./monitorAlarmNotice").MonitorAlarmNotice;
export const MonitorAlarmNotice: typeof import("./monitorAlarmNotice").MonitorAlarmNotice = null as any;
utilities.lazyLoad(exports, ["MonitorAlarmNotice"], () => require("./monitorAlarmNotice"));

export { MonitorAlarmPolicyArgs, MonitorAlarmPolicyState } from "./monitorAlarmPolicy";
export type MonitorAlarmPolicy = import("./monitorAlarmPolicy").MonitorAlarmPolicy;
export const MonitorAlarmPolicy: typeof import("./monitorAlarmPolicy").MonitorAlarmPolicy = null as any;
utilities.lazyLoad(exports, ["MonitorAlarmPolicy"], () => require("./monitorAlarmPolicy"));

export { MonitorAlarmPolicySetDefaultArgs, MonitorAlarmPolicySetDefaultState } from "./monitorAlarmPolicySetDefault";
export type MonitorAlarmPolicySetDefault = import("./monitorAlarmPolicySetDefault").MonitorAlarmPolicySetDefault;
export const MonitorAlarmPolicySetDefault: typeof import("./monitorAlarmPolicySetDefault").MonitorAlarmPolicySetDefault = null as any;
utilities.lazyLoad(exports, ["MonitorAlarmPolicySetDefault"], () => require("./monitorAlarmPolicySetDefault"));

export { MonitorBindingObjectArgs, MonitorBindingObjectState } from "./monitorBindingObject";
export type MonitorBindingObject = import("./monitorBindingObject").MonitorBindingObject;
export const MonitorBindingObject: typeof import("./monitorBindingObject").MonitorBindingObject = null as any;
utilities.lazyLoad(exports, ["MonitorBindingObject"], () => require("./monitorBindingObject"));

export { MonitorBindingReceiverArgs, MonitorBindingReceiverState } from "./monitorBindingReceiver";
export type MonitorBindingReceiver = import("./monitorBindingReceiver").MonitorBindingReceiver;
export const MonitorBindingReceiver: typeof import("./monitorBindingReceiver").MonitorBindingReceiver = null as any;
utilities.lazyLoad(exports, ["MonitorBindingReceiver"], () => require("./monitorBindingReceiver"));

export { MonitorGrafanaDnsConfigArgs, MonitorGrafanaDnsConfigState } from "./monitorGrafanaDnsConfig";
export type MonitorGrafanaDnsConfig = import("./monitorGrafanaDnsConfig").MonitorGrafanaDnsConfig;
export const MonitorGrafanaDnsConfig: typeof import("./monitorGrafanaDnsConfig").MonitorGrafanaDnsConfig = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaDnsConfig"], () => require("./monitorGrafanaDnsConfig"));

export { MonitorGrafanaEnvConfigArgs, MonitorGrafanaEnvConfigState } from "./monitorGrafanaEnvConfig";
export type MonitorGrafanaEnvConfig = import("./monitorGrafanaEnvConfig").MonitorGrafanaEnvConfig;
export const MonitorGrafanaEnvConfig: typeof import("./monitorGrafanaEnvConfig").MonitorGrafanaEnvConfig = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaEnvConfig"], () => require("./monitorGrafanaEnvConfig"));

export { MonitorGrafanaInstanceArgs, MonitorGrafanaInstanceState } from "./monitorGrafanaInstance";
export type MonitorGrafanaInstance = import("./monitorGrafanaInstance").MonitorGrafanaInstance;
export const MonitorGrafanaInstance: typeof import("./monitorGrafanaInstance").MonitorGrafanaInstance = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaInstance"], () => require("./monitorGrafanaInstance"));

export { MonitorGrafanaIntegrationArgs, MonitorGrafanaIntegrationState } from "./monitorGrafanaIntegration";
export type MonitorGrafanaIntegration = import("./monitorGrafanaIntegration").MonitorGrafanaIntegration;
export const MonitorGrafanaIntegration: typeof import("./monitorGrafanaIntegration").MonitorGrafanaIntegration = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaIntegration"], () => require("./monitorGrafanaIntegration"));

export { MonitorGrafanaNotificationChannelArgs, MonitorGrafanaNotificationChannelState } from "./monitorGrafanaNotificationChannel";
export type MonitorGrafanaNotificationChannel = import("./monitorGrafanaNotificationChannel").MonitorGrafanaNotificationChannel;
export const MonitorGrafanaNotificationChannel: typeof import("./monitorGrafanaNotificationChannel").MonitorGrafanaNotificationChannel = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaNotificationChannel"], () => require("./monitorGrafanaNotificationChannel"));

export { MonitorGrafanaPluginArgs, MonitorGrafanaPluginState } from "./monitorGrafanaPlugin";
export type MonitorGrafanaPlugin = import("./monitorGrafanaPlugin").MonitorGrafanaPlugin;
export const MonitorGrafanaPlugin: typeof import("./monitorGrafanaPlugin").MonitorGrafanaPlugin = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaPlugin"], () => require("./monitorGrafanaPlugin"));

export { MonitorGrafanaSsoAccountArgs, MonitorGrafanaSsoAccountState } from "./monitorGrafanaSsoAccount";
export type MonitorGrafanaSsoAccount = import("./monitorGrafanaSsoAccount").MonitorGrafanaSsoAccount;
export const MonitorGrafanaSsoAccount: typeof import("./monitorGrafanaSsoAccount").MonitorGrafanaSsoAccount = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaSsoAccount"], () => require("./monitorGrafanaSsoAccount"));

export { MonitorGrafanaSsoCamConfigArgs, MonitorGrafanaSsoCamConfigState } from "./monitorGrafanaSsoCamConfig";
export type MonitorGrafanaSsoCamConfig = import("./monitorGrafanaSsoCamConfig").MonitorGrafanaSsoCamConfig;
export const MonitorGrafanaSsoCamConfig: typeof import("./monitorGrafanaSsoCamConfig").MonitorGrafanaSsoCamConfig = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaSsoCamConfig"], () => require("./monitorGrafanaSsoCamConfig"));

export { MonitorGrafanaSsoConfigArgs, MonitorGrafanaSsoConfigState } from "./monitorGrafanaSsoConfig";
export type MonitorGrafanaSsoConfig = import("./monitorGrafanaSsoConfig").MonitorGrafanaSsoConfig;
export const MonitorGrafanaSsoConfig: typeof import("./monitorGrafanaSsoConfig").MonitorGrafanaSsoConfig = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaSsoConfig"], () => require("./monitorGrafanaSsoConfig"));

export { MonitorGrafanaVersionUpgradeArgs, MonitorGrafanaVersionUpgradeState } from "./monitorGrafanaVersionUpgrade";
export type MonitorGrafanaVersionUpgrade = import("./monitorGrafanaVersionUpgrade").MonitorGrafanaVersionUpgrade;
export const MonitorGrafanaVersionUpgrade: typeof import("./monitorGrafanaVersionUpgrade").MonitorGrafanaVersionUpgrade = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaVersionUpgrade"], () => require("./monitorGrafanaVersionUpgrade"));

export { MonitorGrafanaWhitelistConfigArgs, MonitorGrafanaWhitelistConfigState } from "./monitorGrafanaWhitelistConfig";
export type MonitorGrafanaWhitelistConfig = import("./monitorGrafanaWhitelistConfig").MonitorGrafanaWhitelistConfig;
export const MonitorGrafanaWhitelistConfig: typeof import("./monitorGrafanaWhitelistConfig").MonitorGrafanaWhitelistConfig = null as any;
utilities.lazyLoad(exports, ["MonitorGrafanaWhitelistConfig"], () => require("./monitorGrafanaWhitelistConfig"));

export { MonitorPolicyBindingObjectArgs, MonitorPolicyBindingObjectState } from "./monitorPolicyBindingObject";
export type MonitorPolicyBindingObject = import("./monitorPolicyBindingObject").MonitorPolicyBindingObject;
export const MonitorPolicyBindingObject: typeof import("./monitorPolicyBindingObject").MonitorPolicyBindingObject = null as any;
utilities.lazyLoad(exports, ["MonitorPolicyBindingObject"], () => require("./monitorPolicyBindingObject"));

export { MonitorPolicyGroupArgs, MonitorPolicyGroupState } from "./monitorPolicyGroup";
export type MonitorPolicyGroup = import("./monitorPolicyGroup").MonitorPolicyGroup;
export const MonitorPolicyGroup: typeof import("./monitorPolicyGroup").MonitorPolicyGroup = null as any;
utilities.lazyLoad(exports, ["MonitorPolicyGroup"], () => require("./monitorPolicyGroup"));

export { MonitorTmpAlertGroupArgs, MonitorTmpAlertGroupState } from "./monitorTmpAlertGroup";
export type MonitorTmpAlertGroup = import("./monitorTmpAlertGroup").MonitorTmpAlertGroup;
export const MonitorTmpAlertGroup: typeof import("./monitorTmpAlertGroup").MonitorTmpAlertGroup = null as any;
utilities.lazyLoad(exports, ["MonitorTmpAlertGroup"], () => require("./monitorTmpAlertGroup"));

export { MonitorTmpAlertRuleArgs, MonitorTmpAlertRuleState } from "./monitorTmpAlertRule";
export type MonitorTmpAlertRule = import("./monitorTmpAlertRule").MonitorTmpAlertRule;
export const MonitorTmpAlertRule: typeof import("./monitorTmpAlertRule").MonitorTmpAlertRule = null as any;
utilities.lazyLoad(exports, ["MonitorTmpAlertRule"], () => require("./monitorTmpAlertRule"));

export { MonitorTmpCvmAgentArgs, MonitorTmpCvmAgentState } from "./monitorTmpCvmAgent";
export type MonitorTmpCvmAgent = import("./monitorTmpCvmAgent").MonitorTmpCvmAgent;
export const MonitorTmpCvmAgent: typeof import("./monitorTmpCvmAgent").MonitorTmpCvmAgent = null as any;
utilities.lazyLoad(exports, ["MonitorTmpCvmAgent"], () => require("./monitorTmpCvmAgent"));

export { MonitorTmpExporterIntegrationArgs, MonitorTmpExporterIntegrationState } from "./monitorTmpExporterIntegration";
export type MonitorTmpExporterIntegration = import("./monitorTmpExporterIntegration").MonitorTmpExporterIntegration;
export const MonitorTmpExporterIntegration: typeof import("./monitorTmpExporterIntegration").MonitorTmpExporterIntegration = null as any;
utilities.lazyLoad(exports, ["MonitorTmpExporterIntegration"], () => require("./monitorTmpExporterIntegration"));

export { MonitorTmpGrafanaConfigArgs, MonitorTmpGrafanaConfigState } from "./monitorTmpGrafanaConfig";
export type MonitorTmpGrafanaConfig = import("./monitorTmpGrafanaConfig").MonitorTmpGrafanaConfig;
export const MonitorTmpGrafanaConfig: typeof import("./monitorTmpGrafanaConfig").MonitorTmpGrafanaConfig = null as any;
utilities.lazyLoad(exports, ["MonitorTmpGrafanaConfig"], () => require("./monitorTmpGrafanaConfig"));

export { MonitorTmpInstanceArgs, MonitorTmpInstanceState } from "./monitorTmpInstance";
export type MonitorTmpInstance = import("./monitorTmpInstance").MonitorTmpInstance;
export const MonitorTmpInstance: typeof import("./monitorTmpInstance").MonitorTmpInstance = null as any;
utilities.lazyLoad(exports, ["MonitorTmpInstance"], () => require("./monitorTmpInstance"));

export { MonitorTmpManageGrafanaAttachmentArgs, MonitorTmpManageGrafanaAttachmentState } from "./monitorTmpManageGrafanaAttachment";
export type MonitorTmpManageGrafanaAttachment = import("./monitorTmpManageGrafanaAttachment").MonitorTmpManageGrafanaAttachment;
export const MonitorTmpManageGrafanaAttachment: typeof import("./monitorTmpManageGrafanaAttachment").MonitorTmpManageGrafanaAttachment = null as any;
utilities.lazyLoad(exports, ["MonitorTmpManageGrafanaAttachment"], () => require("./monitorTmpManageGrafanaAttachment"));

export { MonitorTmpRecordingRuleArgs, MonitorTmpRecordingRuleState } from "./monitorTmpRecordingRule";
export type MonitorTmpRecordingRule = import("./monitorTmpRecordingRule").MonitorTmpRecordingRule;
export const MonitorTmpRecordingRule: typeof import("./monitorTmpRecordingRule").MonitorTmpRecordingRule = null as any;
utilities.lazyLoad(exports, ["MonitorTmpRecordingRule"], () => require("./monitorTmpRecordingRule"));

export { MonitorTmpScrapeJobArgs, MonitorTmpScrapeJobState } from "./monitorTmpScrapeJob";
export type MonitorTmpScrapeJob = import("./monitorTmpScrapeJob").MonitorTmpScrapeJob;
export const MonitorTmpScrapeJob: typeof import("./monitorTmpScrapeJob").MonitorTmpScrapeJob = null as any;
utilities.lazyLoad(exports, ["MonitorTmpScrapeJob"], () => require("./monitorTmpScrapeJob"));

export { MonitorTmpTkeAlertPolicyArgs, MonitorTmpTkeAlertPolicyState } from "./monitorTmpTkeAlertPolicy";
export type MonitorTmpTkeAlertPolicy = import("./monitorTmpTkeAlertPolicy").MonitorTmpTkeAlertPolicy;
export const MonitorTmpTkeAlertPolicy: typeof import("./monitorTmpTkeAlertPolicy").MonitorTmpTkeAlertPolicy = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeAlertPolicy"], () => require("./monitorTmpTkeAlertPolicy"));

export { MonitorTmpTkeBasicConfigArgs, MonitorTmpTkeBasicConfigState } from "./monitorTmpTkeBasicConfig";
export type MonitorTmpTkeBasicConfig = import("./monitorTmpTkeBasicConfig").MonitorTmpTkeBasicConfig;
export const MonitorTmpTkeBasicConfig: typeof import("./monitorTmpTkeBasicConfig").MonitorTmpTkeBasicConfig = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeBasicConfig"], () => require("./monitorTmpTkeBasicConfig"));

export { MonitorTmpTkeClusterAgentArgs, MonitorTmpTkeClusterAgentState } from "./monitorTmpTkeClusterAgent";
export type MonitorTmpTkeClusterAgent = import("./monitorTmpTkeClusterAgent").MonitorTmpTkeClusterAgent;
export const MonitorTmpTkeClusterAgent: typeof import("./monitorTmpTkeClusterAgent").MonitorTmpTkeClusterAgent = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeClusterAgent"], () => require("./monitorTmpTkeClusterAgent"));

export { MonitorTmpTkeConfigArgs, MonitorTmpTkeConfigState } from "./monitorTmpTkeConfig";
export type MonitorTmpTkeConfig = import("./monitorTmpTkeConfig").MonitorTmpTkeConfig;
export const MonitorTmpTkeConfig: typeof import("./monitorTmpTkeConfig").MonitorTmpTkeConfig = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeConfig"], () => require("./monitorTmpTkeConfig"));

export { MonitorTmpTkeGlobalNotificationArgs, MonitorTmpTkeGlobalNotificationState } from "./monitorTmpTkeGlobalNotification";
export type MonitorTmpTkeGlobalNotification = import("./monitorTmpTkeGlobalNotification").MonitorTmpTkeGlobalNotification;
export const MonitorTmpTkeGlobalNotification: typeof import("./monitorTmpTkeGlobalNotification").MonitorTmpTkeGlobalNotification = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeGlobalNotification"], () => require("./monitorTmpTkeGlobalNotification"));

export { MonitorTmpTkeRecordRuleYamlArgs, MonitorTmpTkeRecordRuleYamlState } from "./monitorTmpTkeRecordRuleYaml";
export type MonitorTmpTkeRecordRuleYaml = import("./monitorTmpTkeRecordRuleYaml").MonitorTmpTkeRecordRuleYaml;
export const MonitorTmpTkeRecordRuleYaml: typeof import("./monitorTmpTkeRecordRuleYaml").MonitorTmpTkeRecordRuleYaml = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeRecordRuleYaml"], () => require("./monitorTmpTkeRecordRuleYaml"));

export { MonitorTmpTkeTemplateArgs, MonitorTmpTkeTemplateState } from "./monitorTmpTkeTemplate";
export type MonitorTmpTkeTemplate = import("./monitorTmpTkeTemplate").MonitorTmpTkeTemplate;
export const MonitorTmpTkeTemplate: typeof import("./monitorTmpTkeTemplate").MonitorTmpTkeTemplate = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeTemplate"], () => require("./monitorTmpTkeTemplate"));

export { MonitorTmpTkeTemplateAttachmentArgs, MonitorTmpTkeTemplateAttachmentState } from "./monitorTmpTkeTemplateAttachment";
export type MonitorTmpTkeTemplateAttachment = import("./monitorTmpTkeTemplateAttachment").MonitorTmpTkeTemplateAttachment;
export const MonitorTmpTkeTemplateAttachment: typeof import("./monitorTmpTkeTemplateAttachment").MonitorTmpTkeTemplateAttachment = null as any;
utilities.lazyLoad(exports, ["MonitorTmpTkeTemplateAttachment"], () => require("./monitorTmpTkeTemplateAttachment"));

export { MpsAdaptiveDynamicStreamingTemplateArgs, MpsAdaptiveDynamicStreamingTemplateState } from "./mpsAdaptiveDynamicStreamingTemplate";
export type MpsAdaptiveDynamicStreamingTemplate = import("./mpsAdaptiveDynamicStreamingTemplate").MpsAdaptiveDynamicStreamingTemplate;
export const MpsAdaptiveDynamicStreamingTemplate: typeof import("./mpsAdaptiveDynamicStreamingTemplate").MpsAdaptiveDynamicStreamingTemplate = null as any;
utilities.lazyLoad(exports, ["MpsAdaptiveDynamicStreamingTemplate"], () => require("./mpsAdaptiveDynamicStreamingTemplate"));

export { MpsAiAnalysisTemplateArgs, MpsAiAnalysisTemplateState } from "./mpsAiAnalysisTemplate";
export type MpsAiAnalysisTemplate = import("./mpsAiAnalysisTemplate").MpsAiAnalysisTemplate;
export const MpsAiAnalysisTemplate: typeof import("./mpsAiAnalysisTemplate").MpsAiAnalysisTemplate = null as any;
utilities.lazyLoad(exports, ["MpsAiAnalysisTemplate"], () => require("./mpsAiAnalysisTemplate"));

export { MpsAiRecognitionTemplateArgs, MpsAiRecognitionTemplateState } from "./mpsAiRecognitionTemplate";
export type MpsAiRecognitionTemplate = import("./mpsAiRecognitionTemplate").MpsAiRecognitionTemplate;
export const MpsAiRecognitionTemplate: typeof import("./mpsAiRecognitionTemplate").MpsAiRecognitionTemplate = null as any;
utilities.lazyLoad(exports, ["MpsAiRecognitionTemplate"], () => require("./mpsAiRecognitionTemplate"));

export { MpsAnimatedGraphicsTemplateArgs, MpsAnimatedGraphicsTemplateState } from "./mpsAnimatedGraphicsTemplate";
export type MpsAnimatedGraphicsTemplate = import("./mpsAnimatedGraphicsTemplate").MpsAnimatedGraphicsTemplate;
export const MpsAnimatedGraphicsTemplate: typeof import("./mpsAnimatedGraphicsTemplate").MpsAnimatedGraphicsTemplate = null as any;
utilities.lazyLoad(exports, ["MpsAnimatedGraphicsTemplate"], () => require("./mpsAnimatedGraphicsTemplate"));

export { MpsContentReviewTemplateArgs, MpsContentReviewTemplateState } from "./mpsContentReviewTemplate";
export type MpsContentReviewTemplate = import("./mpsContentReviewTemplate").MpsContentReviewTemplate;
export const MpsContentReviewTemplate: typeof import("./mpsContentReviewTemplate").MpsContentReviewTemplate = null as any;
utilities.lazyLoad(exports, ["MpsContentReviewTemplate"], () => require("./mpsContentReviewTemplate"));

export { MpsEditMediaOperationArgs, MpsEditMediaOperationState } from "./mpsEditMediaOperation";
export type MpsEditMediaOperation = import("./mpsEditMediaOperation").MpsEditMediaOperation;
export const MpsEditMediaOperation: typeof import("./mpsEditMediaOperation").MpsEditMediaOperation = null as any;
utilities.lazyLoad(exports, ["MpsEditMediaOperation"], () => require("./mpsEditMediaOperation"));

export { MpsEnableScheduleConfigArgs, MpsEnableScheduleConfigState } from "./mpsEnableScheduleConfig";
export type MpsEnableScheduleConfig = import("./mpsEnableScheduleConfig").MpsEnableScheduleConfig;
export const MpsEnableScheduleConfig: typeof import("./mpsEnableScheduleConfig").MpsEnableScheduleConfig = null as any;
utilities.lazyLoad(exports, ["MpsEnableScheduleConfig"], () => require("./mpsEnableScheduleConfig"));

export { MpsEnableWorkflowConfigArgs, MpsEnableWorkflowConfigState } from "./mpsEnableWorkflowConfig";
export type MpsEnableWorkflowConfig = import("./mpsEnableWorkflowConfig").MpsEnableWorkflowConfig;
export const MpsEnableWorkflowConfig: typeof import("./mpsEnableWorkflowConfig").MpsEnableWorkflowConfig = null as any;
utilities.lazyLoad(exports, ["MpsEnableWorkflowConfig"], () => require("./mpsEnableWorkflowConfig"));

export { MpsEventArgs, MpsEventState } from "./mpsEvent";
export type MpsEvent = import("./mpsEvent").MpsEvent;
export const MpsEvent: typeof import("./mpsEvent").MpsEvent = null as any;
utilities.lazyLoad(exports, ["MpsEvent"], () => require("./mpsEvent"));

export { MpsExecuteFunctionOperationArgs, MpsExecuteFunctionOperationState } from "./mpsExecuteFunctionOperation";
export type MpsExecuteFunctionOperation = import("./mpsExecuteFunctionOperation").MpsExecuteFunctionOperation;
export const MpsExecuteFunctionOperation: typeof import("./mpsExecuteFunctionOperation").MpsExecuteFunctionOperation = null as any;
utilities.lazyLoad(exports, ["MpsExecuteFunctionOperation"], () => require("./mpsExecuteFunctionOperation"));

export { MpsFlowArgs, MpsFlowState } from "./mpsFlow";
export type MpsFlow = import("./mpsFlow").MpsFlow;
export const MpsFlow: typeof import("./mpsFlow").MpsFlow = null as any;
utilities.lazyLoad(exports, ["MpsFlow"], () => require("./mpsFlow"));

export { MpsImageSpriteTemplateArgs, MpsImageSpriteTemplateState } from "./mpsImageSpriteTemplate";
export type MpsImageSpriteTemplate = import("./mpsImageSpriteTemplate").MpsImageSpriteTemplate;
export const MpsImageSpriteTemplate: typeof import("./mpsImageSpriteTemplate").MpsImageSpriteTemplate = null as any;
utilities.lazyLoad(exports, ["MpsImageSpriteTemplate"], () => require("./mpsImageSpriteTemplate"));

export { MpsInputArgs, MpsInputState } from "./mpsInput";
export type MpsInput = import("./mpsInput").MpsInput;
export const MpsInput: typeof import("./mpsInput").MpsInput = null as any;
utilities.lazyLoad(exports, ["MpsInput"], () => require("./mpsInput"));

export { MpsManageTaskOperationArgs, MpsManageTaskOperationState } from "./mpsManageTaskOperation";
export type MpsManageTaskOperation = import("./mpsManageTaskOperation").MpsManageTaskOperation;
export const MpsManageTaskOperation: typeof import("./mpsManageTaskOperation").MpsManageTaskOperation = null as any;
utilities.lazyLoad(exports, ["MpsManageTaskOperation"], () => require("./mpsManageTaskOperation"));

export { MpsOutputArgs, MpsOutputState } from "./mpsOutput";
export type MpsOutput = import("./mpsOutput").MpsOutput;
export const MpsOutput: typeof import("./mpsOutput").MpsOutput = null as any;
utilities.lazyLoad(exports, ["MpsOutput"], () => require("./mpsOutput"));

export { MpsPersonSampleArgs, MpsPersonSampleState } from "./mpsPersonSample";
export type MpsPersonSample = import("./mpsPersonSample").MpsPersonSample;
export const MpsPersonSample: typeof import("./mpsPersonSample").MpsPersonSample = null as any;
utilities.lazyLoad(exports, ["MpsPersonSample"], () => require("./mpsPersonSample"));

export { MpsProcessLiveStreamOperationArgs, MpsProcessLiveStreamOperationState } from "./mpsProcessLiveStreamOperation";
export type MpsProcessLiveStreamOperation = import("./mpsProcessLiveStreamOperation").MpsProcessLiveStreamOperation;
export const MpsProcessLiveStreamOperation: typeof import("./mpsProcessLiveStreamOperation").MpsProcessLiveStreamOperation = null as any;
utilities.lazyLoad(exports, ["MpsProcessLiveStreamOperation"], () => require("./mpsProcessLiveStreamOperation"));

export { MpsProcessMediaOperationArgs, MpsProcessMediaOperationState } from "./mpsProcessMediaOperation";
export type MpsProcessMediaOperation = import("./mpsProcessMediaOperation").MpsProcessMediaOperation;
export const MpsProcessMediaOperation: typeof import("./mpsProcessMediaOperation").MpsProcessMediaOperation = null as any;
utilities.lazyLoad(exports, ["MpsProcessMediaOperation"], () => require("./mpsProcessMediaOperation"));

export { MpsSampleSnapshotTemplateArgs, MpsSampleSnapshotTemplateState } from "./mpsSampleSnapshotTemplate";
export type MpsSampleSnapshotTemplate = import("./mpsSampleSnapshotTemplate").MpsSampleSnapshotTemplate;
export const MpsSampleSnapshotTemplate: typeof import("./mpsSampleSnapshotTemplate").MpsSampleSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["MpsSampleSnapshotTemplate"], () => require("./mpsSampleSnapshotTemplate"));

export { MpsScheduleArgs, MpsScheduleState } from "./mpsSchedule";
export type MpsSchedule = import("./mpsSchedule").MpsSchedule;
export const MpsSchedule: typeof import("./mpsSchedule").MpsSchedule = null as any;
utilities.lazyLoad(exports, ["MpsSchedule"], () => require("./mpsSchedule"));

export { MpsSnapshotByTimeoffsetTemplateArgs, MpsSnapshotByTimeoffsetTemplateState } from "./mpsSnapshotByTimeoffsetTemplate";
export type MpsSnapshotByTimeoffsetTemplate = import("./mpsSnapshotByTimeoffsetTemplate").MpsSnapshotByTimeoffsetTemplate;
export const MpsSnapshotByTimeoffsetTemplate: typeof import("./mpsSnapshotByTimeoffsetTemplate").MpsSnapshotByTimeoffsetTemplate = null as any;
utilities.lazyLoad(exports, ["MpsSnapshotByTimeoffsetTemplate"], () => require("./mpsSnapshotByTimeoffsetTemplate"));

export { MpsStartFlowOperationArgs, MpsStartFlowOperationState } from "./mpsStartFlowOperation";
export type MpsStartFlowOperation = import("./mpsStartFlowOperation").MpsStartFlowOperation;
export const MpsStartFlowOperation: typeof import("./mpsStartFlowOperation").MpsStartFlowOperation = null as any;
utilities.lazyLoad(exports, ["MpsStartFlowOperation"], () => require("./mpsStartFlowOperation"));

export { MpsTranscodeTemplateArgs, MpsTranscodeTemplateState } from "./mpsTranscodeTemplate";
export type MpsTranscodeTemplate = import("./mpsTranscodeTemplate").MpsTranscodeTemplate;
export const MpsTranscodeTemplate: typeof import("./mpsTranscodeTemplate").MpsTranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["MpsTranscodeTemplate"], () => require("./mpsTranscodeTemplate"));

export { MpsWatermarkTemplateArgs, MpsWatermarkTemplateState } from "./mpsWatermarkTemplate";
export type MpsWatermarkTemplate = import("./mpsWatermarkTemplate").MpsWatermarkTemplate;
export const MpsWatermarkTemplate: typeof import("./mpsWatermarkTemplate").MpsWatermarkTemplate = null as any;
utilities.lazyLoad(exports, ["MpsWatermarkTemplate"], () => require("./mpsWatermarkTemplate"));

export { MpsWithdrawsWatermarkOperationArgs, MpsWithdrawsWatermarkOperationState } from "./mpsWithdrawsWatermarkOperation";
export type MpsWithdrawsWatermarkOperation = import("./mpsWithdrawsWatermarkOperation").MpsWithdrawsWatermarkOperation;
export const MpsWithdrawsWatermarkOperation: typeof import("./mpsWithdrawsWatermarkOperation").MpsWithdrawsWatermarkOperation = null as any;
utilities.lazyLoad(exports, ["MpsWithdrawsWatermarkOperation"], () => require("./mpsWithdrawsWatermarkOperation"));

export { MpsWordSampleArgs, MpsWordSampleState } from "./mpsWordSample";
export type MpsWordSample = import("./mpsWordSample").MpsWordSample;
export const MpsWordSample: typeof import("./mpsWordSample").MpsWordSample = null as any;
utilities.lazyLoad(exports, ["MpsWordSample"], () => require("./mpsWordSample"));

export { MpsWorkflowArgs, MpsWorkflowState } from "./mpsWorkflow";
export type MpsWorkflow = import("./mpsWorkflow").MpsWorkflow;
export const MpsWorkflow: typeof import("./mpsWorkflow").MpsWorkflow = null as any;
utilities.lazyLoad(exports, ["MpsWorkflow"], () => require("./mpsWorkflow"));

export { MysqlAccountArgs, MysqlAccountState } from "./mysqlAccount";
export type MysqlAccount = import("./mysqlAccount").MysqlAccount;
export const MysqlAccount: typeof import("./mysqlAccount").MysqlAccount = null as any;
utilities.lazyLoad(exports, ["MysqlAccount"], () => require("./mysqlAccount"));

export { MysqlAccountPrivilegeArgs, MysqlAccountPrivilegeState } from "./mysqlAccountPrivilege";
export type MysqlAccountPrivilege = import("./mysqlAccountPrivilege").MysqlAccountPrivilege;
export const MysqlAccountPrivilege: typeof import("./mysqlAccountPrivilege").MysqlAccountPrivilege = null as any;
utilities.lazyLoad(exports, ["MysqlAccountPrivilege"], () => require("./mysqlAccountPrivilege"));

export { MysqlAuditLogFileArgs, MysqlAuditLogFileState } from "./mysqlAuditLogFile";
export type MysqlAuditLogFile = import("./mysqlAuditLogFile").MysqlAuditLogFile;
export const MysqlAuditLogFile: typeof import("./mysqlAuditLogFile").MysqlAuditLogFile = null as any;
utilities.lazyLoad(exports, ["MysqlAuditLogFile"], () => require("./mysqlAuditLogFile"));

export { MysqlBackupDownloadRestrictionArgs, MysqlBackupDownloadRestrictionState } from "./mysqlBackupDownloadRestriction";
export type MysqlBackupDownloadRestriction = import("./mysqlBackupDownloadRestriction").MysqlBackupDownloadRestriction;
export const MysqlBackupDownloadRestriction: typeof import("./mysqlBackupDownloadRestriction").MysqlBackupDownloadRestriction = null as any;
utilities.lazyLoad(exports, ["MysqlBackupDownloadRestriction"], () => require("./mysqlBackupDownloadRestriction"));

export { MysqlBackupEncryptionStatusArgs, MysqlBackupEncryptionStatusState } from "./mysqlBackupEncryptionStatus";
export type MysqlBackupEncryptionStatus = import("./mysqlBackupEncryptionStatus").MysqlBackupEncryptionStatus;
export const MysqlBackupEncryptionStatus: typeof import("./mysqlBackupEncryptionStatus").MysqlBackupEncryptionStatus = null as any;
utilities.lazyLoad(exports, ["MysqlBackupEncryptionStatus"], () => require("./mysqlBackupEncryptionStatus"));

export { MysqlBackupPolicyArgs, MysqlBackupPolicyState } from "./mysqlBackupPolicy";
export type MysqlBackupPolicy = import("./mysqlBackupPolicy").MysqlBackupPolicy;
export const MysqlBackupPolicy: typeof import("./mysqlBackupPolicy").MysqlBackupPolicy = null as any;
utilities.lazyLoad(exports, ["MysqlBackupPolicy"], () => require("./mysqlBackupPolicy"));

export { MysqlClsLogAttachmentArgs, MysqlClsLogAttachmentState } from "./mysqlClsLogAttachment";
export type MysqlClsLogAttachment = import("./mysqlClsLogAttachment").MysqlClsLogAttachment;
export const MysqlClsLogAttachment: typeof import("./mysqlClsLogAttachment").MysqlClsLogAttachment = null as any;
utilities.lazyLoad(exports, ["MysqlClsLogAttachment"], () => require("./mysqlClsLogAttachment"));

export { MysqlDatabaseArgs, MysqlDatabaseState } from "./mysqlDatabase";
export type MysqlDatabase = import("./mysqlDatabase").MysqlDatabase;
export const MysqlDatabase: typeof import("./mysqlDatabase").MysqlDatabase = null as any;
utilities.lazyLoad(exports, ["MysqlDatabase"], () => require("./mysqlDatabase"));

export { MysqlDbImportJobOperationArgs, MysqlDbImportJobOperationState } from "./mysqlDbImportJobOperation";
export type MysqlDbImportJobOperation = import("./mysqlDbImportJobOperation").MysqlDbImportJobOperation;
export const MysqlDbImportJobOperation: typeof import("./mysqlDbImportJobOperation").MysqlDbImportJobOperation = null as any;
utilities.lazyLoad(exports, ["MysqlDbImportJobOperation"], () => require("./mysqlDbImportJobOperation"));

export { MysqlDeployGroupArgs, MysqlDeployGroupState } from "./mysqlDeployGroup";
export type MysqlDeployGroup = import("./mysqlDeployGroup").MysqlDeployGroup;
export const MysqlDeployGroup: typeof import("./mysqlDeployGroup").MysqlDeployGroup = null as any;
utilities.lazyLoad(exports, ["MysqlDeployGroup"], () => require("./mysqlDeployGroup"));

export { MysqlDrInstanceArgs, MysqlDrInstanceState } from "./mysqlDrInstance";
export type MysqlDrInstance = import("./mysqlDrInstance").MysqlDrInstance;
export const MysqlDrInstance: typeof import("./mysqlDrInstance").MysqlDrInstance = null as any;
utilities.lazyLoad(exports, ["MysqlDrInstance"], () => require("./mysqlDrInstance"));

export { MysqlDrInstanceToMaterArgs, MysqlDrInstanceToMaterState } from "./mysqlDrInstanceToMater";
export type MysqlDrInstanceToMater = import("./mysqlDrInstanceToMater").MysqlDrInstanceToMater;
export const MysqlDrInstanceToMater: typeof import("./mysqlDrInstanceToMater").MysqlDrInstanceToMater = null as any;
utilities.lazyLoad(exports, ["MysqlDrInstanceToMater"], () => require("./mysqlDrInstanceToMater"));

export { MysqlInstanceArgs, MysqlInstanceState } from "./mysqlInstance";
export type MysqlInstance = import("./mysqlInstance").MysqlInstance;
export const MysqlInstance: typeof import("./mysqlInstance").MysqlInstance = null as any;
utilities.lazyLoad(exports, ["MysqlInstance"], () => require("./mysqlInstance"));

export { MysqlInstanceEncryptionOperationArgs, MysqlInstanceEncryptionOperationState } from "./mysqlInstanceEncryptionOperation";
export type MysqlInstanceEncryptionOperation = import("./mysqlInstanceEncryptionOperation").MysqlInstanceEncryptionOperation;
export const MysqlInstanceEncryptionOperation: typeof import("./mysqlInstanceEncryptionOperation").MysqlInstanceEncryptionOperation = null as any;
utilities.lazyLoad(exports, ["MysqlInstanceEncryptionOperation"], () => require("./mysqlInstanceEncryptionOperation"));

export { MysqlIsolateInstanceArgs, MysqlIsolateInstanceState } from "./mysqlIsolateInstance";
export type MysqlIsolateInstance = import("./mysqlIsolateInstance").MysqlIsolateInstance;
export const MysqlIsolateInstance: typeof import("./mysqlIsolateInstance").MysqlIsolateInstance = null as any;
utilities.lazyLoad(exports, ["MysqlIsolateInstance"], () => require("./mysqlIsolateInstance"));

export { MysqlLocalBinlogConfigArgs, MysqlLocalBinlogConfigState } from "./mysqlLocalBinlogConfig";
export type MysqlLocalBinlogConfig = import("./mysqlLocalBinlogConfig").MysqlLocalBinlogConfig;
export const MysqlLocalBinlogConfig: typeof import("./mysqlLocalBinlogConfig").MysqlLocalBinlogConfig = null as any;
utilities.lazyLoad(exports, ["MysqlLocalBinlogConfig"], () => require("./mysqlLocalBinlogConfig"));

export { MysqlParamTemplateArgs, MysqlParamTemplateState } from "./mysqlParamTemplate";
export type MysqlParamTemplate = import("./mysqlParamTemplate").MysqlParamTemplate;
export const MysqlParamTemplate: typeof import("./mysqlParamTemplate").MysqlParamTemplate = null as any;
utilities.lazyLoad(exports, ["MysqlParamTemplate"], () => require("./mysqlParamTemplate"));

export { MysqlPasswordComplexityArgs, MysqlPasswordComplexityState } from "./mysqlPasswordComplexity";
export type MysqlPasswordComplexity = import("./mysqlPasswordComplexity").MysqlPasswordComplexity;
export const MysqlPasswordComplexity: typeof import("./mysqlPasswordComplexity").MysqlPasswordComplexity = null as any;
utilities.lazyLoad(exports, ["MysqlPasswordComplexity"], () => require("./mysqlPasswordComplexity"));

export { MysqlPrivilegeArgs, MysqlPrivilegeState } from "./mysqlPrivilege";
export type MysqlPrivilege = import("./mysqlPrivilege").MysqlPrivilege;
export const MysqlPrivilege: typeof import("./mysqlPrivilege").MysqlPrivilege = null as any;
utilities.lazyLoad(exports, ["MysqlPrivilege"], () => require("./mysqlPrivilege"));

export { MysqlProxyArgs, MysqlProxyState } from "./mysqlProxy";
export type MysqlProxy = import("./mysqlProxy").MysqlProxy;
export const MysqlProxy: typeof import("./mysqlProxy").MysqlProxy = null as any;
utilities.lazyLoad(exports, ["MysqlProxy"], () => require("./mysqlProxy"));

export { MysqlReadonlyInstanceArgs, MysqlReadonlyInstanceState } from "./mysqlReadonlyInstance";
export type MysqlReadonlyInstance = import("./mysqlReadonlyInstance").MysqlReadonlyInstance;
export const MysqlReadonlyInstance: typeof import("./mysqlReadonlyInstance").MysqlReadonlyInstance = null as any;
utilities.lazyLoad(exports, ["MysqlReadonlyInstance"], () => require("./mysqlReadonlyInstance"));

export { MysqlReloadBalanceProxyNodeArgs, MysqlReloadBalanceProxyNodeState } from "./mysqlReloadBalanceProxyNode";
export type MysqlReloadBalanceProxyNode = import("./mysqlReloadBalanceProxyNode").MysqlReloadBalanceProxyNode;
export const MysqlReloadBalanceProxyNode: typeof import("./mysqlReloadBalanceProxyNode").MysqlReloadBalanceProxyNode = null as any;
utilities.lazyLoad(exports, ["MysqlReloadBalanceProxyNode"], () => require("./mysqlReloadBalanceProxyNode"));

export { MysqlRemoteBackupConfigArgs, MysqlRemoteBackupConfigState } from "./mysqlRemoteBackupConfig";
export type MysqlRemoteBackupConfig = import("./mysqlRemoteBackupConfig").MysqlRemoteBackupConfig;
export const MysqlRemoteBackupConfig: typeof import("./mysqlRemoteBackupConfig").MysqlRemoteBackupConfig = null as any;
utilities.lazyLoad(exports, ["MysqlRemoteBackupConfig"], () => require("./mysqlRemoteBackupConfig"));

export { MysqlRenewDbInstanceOperationArgs, MysqlRenewDbInstanceOperationState } from "./mysqlRenewDbInstanceOperation";
export type MysqlRenewDbInstanceOperation = import("./mysqlRenewDbInstanceOperation").MysqlRenewDbInstanceOperation;
export const MysqlRenewDbInstanceOperation: typeof import("./mysqlRenewDbInstanceOperation").MysqlRenewDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["MysqlRenewDbInstanceOperation"], () => require("./mysqlRenewDbInstanceOperation"));

export { MysqlResetRootAccountArgs, MysqlResetRootAccountState } from "./mysqlResetRootAccount";
export type MysqlResetRootAccount = import("./mysqlResetRootAccount").MysqlResetRootAccount;
export const MysqlResetRootAccount: typeof import("./mysqlResetRootAccount").MysqlResetRootAccount = null as any;
utilities.lazyLoad(exports, ["MysqlResetRootAccount"], () => require("./mysqlResetRootAccount"));

export { MysqlRestartDbInstancesOperationArgs, MysqlRestartDbInstancesOperationState } from "./mysqlRestartDbInstancesOperation";
export type MysqlRestartDbInstancesOperation = import("./mysqlRestartDbInstancesOperation").MysqlRestartDbInstancesOperation;
export const MysqlRestartDbInstancesOperation: typeof import("./mysqlRestartDbInstancesOperation").MysqlRestartDbInstancesOperation = null as any;
utilities.lazyLoad(exports, ["MysqlRestartDbInstancesOperation"], () => require("./mysqlRestartDbInstancesOperation"));

export { MysqlRoGroupArgs, MysqlRoGroupState } from "./mysqlRoGroup";
export type MysqlRoGroup = import("./mysqlRoGroup").MysqlRoGroup;
export const MysqlRoGroup: typeof import("./mysqlRoGroup").MysqlRoGroup = null as any;
utilities.lazyLoad(exports, ["MysqlRoGroup"], () => require("./mysqlRoGroup"));

export { MysqlRoGroupLoadOperationArgs, MysqlRoGroupLoadOperationState } from "./mysqlRoGroupLoadOperation";
export type MysqlRoGroupLoadOperation = import("./mysqlRoGroupLoadOperation").MysqlRoGroupLoadOperation;
export const MysqlRoGroupLoadOperation: typeof import("./mysqlRoGroupLoadOperation").MysqlRoGroupLoadOperation = null as any;
utilities.lazyLoad(exports, ["MysqlRoGroupLoadOperation"], () => require("./mysqlRoGroupLoadOperation"));

export { MysqlRoInstanceIpArgs, MysqlRoInstanceIpState } from "./mysqlRoInstanceIp";
export type MysqlRoInstanceIp = import("./mysqlRoInstanceIp").MysqlRoInstanceIp;
export const MysqlRoInstanceIp: typeof import("./mysqlRoInstanceIp").MysqlRoInstanceIp = null as any;
utilities.lazyLoad(exports, ["MysqlRoInstanceIp"], () => require("./mysqlRoInstanceIp"));

export { MysqlRoStartReplicationArgs, MysqlRoStartReplicationState } from "./mysqlRoStartReplication";
export type MysqlRoStartReplication = import("./mysqlRoStartReplication").MysqlRoStartReplication;
export const MysqlRoStartReplication: typeof import("./mysqlRoStartReplication").MysqlRoStartReplication = null as any;
utilities.lazyLoad(exports, ["MysqlRoStartReplication"], () => require("./mysqlRoStartReplication"));

export { MysqlRoStopReplicationArgs, MysqlRoStopReplicationState } from "./mysqlRoStopReplication";
export type MysqlRoStopReplication = import("./mysqlRoStopReplication").MysqlRoStopReplication;
export const MysqlRoStopReplication: typeof import("./mysqlRoStopReplication").MysqlRoStopReplication = null as any;
utilities.lazyLoad(exports, ["MysqlRoStopReplication"], () => require("./mysqlRoStopReplication"));

export { MysqlRollbackArgs, MysqlRollbackState } from "./mysqlRollback";
export type MysqlRollback = import("./mysqlRollback").MysqlRollback;
export const MysqlRollback: typeof import("./mysqlRollback").MysqlRollback = null as any;
utilities.lazyLoad(exports, ["MysqlRollback"], () => require("./mysqlRollback"));

export { MysqlRollbackStopArgs, MysqlRollbackStopState } from "./mysqlRollbackStop";
export type MysqlRollbackStop = import("./mysqlRollbackStop").MysqlRollbackStop;
export const MysqlRollbackStop: typeof import("./mysqlRollbackStop").MysqlRollbackStop = null as any;
utilities.lazyLoad(exports, ["MysqlRollbackStop"], () => require("./mysqlRollbackStop"));

export { MysqlSecurityGroupsAttachmentArgs, MysqlSecurityGroupsAttachmentState } from "./mysqlSecurityGroupsAttachment";
export type MysqlSecurityGroupsAttachment = import("./mysqlSecurityGroupsAttachment").MysqlSecurityGroupsAttachment;
export const MysqlSecurityGroupsAttachment: typeof import("./mysqlSecurityGroupsAttachment").MysqlSecurityGroupsAttachment = null as any;
utilities.lazyLoad(exports, ["MysqlSecurityGroupsAttachment"], () => require("./mysqlSecurityGroupsAttachment"));

export { MysqlSslArgs, MysqlSslState } from "./mysqlSsl";
export type MysqlSsl = import("./mysqlSsl").MysqlSsl;
export const MysqlSsl: typeof import("./mysqlSsl").MysqlSsl = null as any;
utilities.lazyLoad(exports, ["MysqlSsl"], () => require("./mysqlSsl"));

export { MysqlSwitchForUpgradeArgs, MysqlSwitchForUpgradeState } from "./mysqlSwitchForUpgrade";
export type MysqlSwitchForUpgrade = import("./mysqlSwitchForUpgrade").MysqlSwitchForUpgrade;
export const MysqlSwitchForUpgrade: typeof import("./mysqlSwitchForUpgrade").MysqlSwitchForUpgrade = null as any;
utilities.lazyLoad(exports, ["MysqlSwitchForUpgrade"], () => require("./mysqlSwitchForUpgrade"));

export { MysqlSwitchMasterSlaveOperationArgs, MysqlSwitchMasterSlaveOperationState } from "./mysqlSwitchMasterSlaveOperation";
export type MysqlSwitchMasterSlaveOperation = import("./mysqlSwitchMasterSlaveOperation").MysqlSwitchMasterSlaveOperation;
export const MysqlSwitchMasterSlaveOperation: typeof import("./mysqlSwitchMasterSlaveOperation").MysqlSwitchMasterSlaveOperation = null as any;
utilities.lazyLoad(exports, ["MysqlSwitchMasterSlaveOperation"], () => require("./mysqlSwitchMasterSlaveOperation"));

export { MysqlSwitchProxyArgs, MysqlSwitchProxyState } from "./mysqlSwitchProxy";
export type MysqlSwitchProxy = import("./mysqlSwitchProxy").MysqlSwitchProxy;
export const MysqlSwitchProxy: typeof import("./mysqlSwitchProxy").MysqlSwitchProxy = null as any;
utilities.lazyLoad(exports, ["MysqlSwitchProxy"], () => require("./mysqlSwitchProxy"));

export { MysqlTimeWindowArgs, MysqlTimeWindowState } from "./mysqlTimeWindow";
export type MysqlTimeWindow = import("./mysqlTimeWindow").MysqlTimeWindow;
export const MysqlTimeWindow: typeof import("./mysqlTimeWindow").MysqlTimeWindow = null as any;
utilities.lazyLoad(exports, ["MysqlTimeWindow"], () => require("./mysqlTimeWindow"));

export { MysqlVerifyRootAccountArgs, MysqlVerifyRootAccountState } from "./mysqlVerifyRootAccount";
export type MysqlVerifyRootAccount = import("./mysqlVerifyRootAccount").MysqlVerifyRootAccount;
export const MysqlVerifyRootAccount: typeof import("./mysqlVerifyRootAccount").MysqlVerifyRootAccount = null as any;
utilities.lazyLoad(exports, ["MysqlVerifyRootAccount"], () => require("./mysqlVerifyRootAccount"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NatGatewaySnatArgs, NatGatewaySnatState } from "./natGatewaySnat";
export type NatGatewaySnat = import("./natGatewaySnat").NatGatewaySnat;
export const NatGatewaySnat: typeof import("./natGatewaySnat").NatGatewaySnat = null as any;
utilities.lazyLoad(exports, ["NatGatewaySnat"], () => require("./natGatewaySnat"));

export { NatRefreshNatDcRouteArgs, NatRefreshNatDcRouteState } from "./natRefreshNatDcRoute";
export type NatRefreshNatDcRoute = import("./natRefreshNatDcRoute").NatRefreshNatDcRoute;
export const NatRefreshNatDcRoute: typeof import("./natRefreshNatDcRoute").NatRefreshNatDcRoute = null as any;
utilities.lazyLoad(exports, ["NatRefreshNatDcRoute"], () => require("./natRefreshNatDcRoute"));

export { OceanusFolderArgs, OceanusFolderState } from "./oceanusFolder";
export type OceanusFolder = import("./oceanusFolder").OceanusFolder;
export const OceanusFolder: typeof import("./oceanusFolder").OceanusFolder = null as any;
utilities.lazyLoad(exports, ["OceanusFolder"], () => require("./oceanusFolder"));

export { OceanusJobArgs, OceanusJobState } from "./oceanusJob";
export type OceanusJob = import("./oceanusJob").OceanusJob;
export const OceanusJob: typeof import("./oceanusJob").OceanusJob = null as any;
utilities.lazyLoad(exports, ["OceanusJob"], () => require("./oceanusJob"));

export { OceanusJobConfigArgs, OceanusJobConfigState } from "./oceanusJobConfig";
export type OceanusJobConfig = import("./oceanusJobConfig").OceanusJobConfig;
export const OceanusJobConfig: typeof import("./oceanusJobConfig").OceanusJobConfig = null as any;
utilities.lazyLoad(exports, ["OceanusJobConfig"], () => require("./oceanusJobConfig"));

export { OceanusJobCopyArgs, OceanusJobCopyState } from "./oceanusJobCopy";
export type OceanusJobCopy = import("./oceanusJobCopy").OceanusJobCopy;
export const OceanusJobCopy: typeof import("./oceanusJobCopy").OceanusJobCopy = null as any;
utilities.lazyLoad(exports, ["OceanusJobCopy"], () => require("./oceanusJobCopy"));

export { OceanusResourceArgs, OceanusResourceState } from "./oceanusResource";
export type OceanusResource = import("./oceanusResource").OceanusResource;
export const OceanusResource: typeof import("./oceanusResource").OceanusResource = null as any;
utilities.lazyLoad(exports, ["OceanusResource"], () => require("./oceanusResource"));

export { OceanusResourceConfigArgs, OceanusResourceConfigState } from "./oceanusResourceConfig";
export type OceanusResourceConfig = import("./oceanusResourceConfig").OceanusResourceConfig;
export const OceanusResourceConfig: typeof import("./oceanusResourceConfig").OceanusResourceConfig = null as any;
utilities.lazyLoad(exports, ["OceanusResourceConfig"], () => require("./oceanusResourceConfig"));

export { OceanusRunJobArgs, OceanusRunJobState } from "./oceanusRunJob";
export type OceanusRunJob = import("./oceanusRunJob").OceanusRunJob;
export const OceanusRunJob: typeof import("./oceanusRunJob").OceanusRunJob = null as any;
utilities.lazyLoad(exports, ["OceanusRunJob"], () => require("./oceanusRunJob"));

export { OceanusStopJobArgs, OceanusStopJobState } from "./oceanusStopJob";
export type OceanusStopJob = import("./oceanusStopJob").OceanusStopJob;
export const OceanusStopJob: typeof import("./oceanusStopJob").OceanusStopJob = null as any;
utilities.lazyLoad(exports, ["OceanusStopJob"], () => require("./oceanusStopJob"));

export { OceanusTriggerJobSavepointArgs, OceanusTriggerJobSavepointState } from "./oceanusTriggerJobSavepoint";
export type OceanusTriggerJobSavepoint = import("./oceanusTriggerJobSavepoint").OceanusTriggerJobSavepoint;
export const OceanusTriggerJobSavepoint: typeof import("./oceanusTriggerJobSavepoint").OceanusTriggerJobSavepoint = null as any;
utilities.lazyLoad(exports, ["OceanusTriggerJobSavepoint"], () => require("./oceanusTriggerJobSavepoint"));

export { OceanusWorkSpaceArgs, OceanusWorkSpaceState } from "./oceanusWorkSpace";
export type OceanusWorkSpace = import("./oceanusWorkSpace").OceanusWorkSpace;
export const OceanusWorkSpace: typeof import("./oceanusWorkSpace").OceanusWorkSpace = null as any;
utilities.lazyLoad(exports, ["OceanusWorkSpace"], () => require("./oceanusWorkSpace"));

export { OrganizationInstanceArgs, OrganizationInstanceState } from "./organizationInstance";
export type OrganizationInstance = import("./organizationInstance").OrganizationInstance;
export const OrganizationInstance: typeof import("./organizationInstance").OrganizationInstance = null as any;
utilities.lazyLoad(exports, ["OrganizationInstance"], () => require("./organizationInstance"));

export { OrganizationOrgIdentityArgs, OrganizationOrgIdentityState } from "./organizationOrgIdentity";
export type OrganizationOrgIdentity = import("./organizationOrgIdentity").OrganizationOrgIdentity;
export const OrganizationOrgIdentity: typeof import("./organizationOrgIdentity").OrganizationOrgIdentity = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgIdentity"], () => require("./organizationOrgIdentity"));

export { OrganizationOrgManagePolicyArgs, OrganizationOrgManagePolicyState } from "./organizationOrgManagePolicy";
export type OrganizationOrgManagePolicy = import("./organizationOrgManagePolicy").OrganizationOrgManagePolicy;
export const OrganizationOrgManagePolicy: typeof import("./organizationOrgManagePolicy").OrganizationOrgManagePolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgManagePolicy"], () => require("./organizationOrgManagePolicy"));

export { OrganizationOrgManagePolicyConfigArgs, OrganizationOrgManagePolicyConfigState } from "./organizationOrgManagePolicyConfig";
export type OrganizationOrgManagePolicyConfig = import("./organizationOrgManagePolicyConfig").OrganizationOrgManagePolicyConfig;
export const OrganizationOrgManagePolicyConfig: typeof import("./organizationOrgManagePolicyConfig").OrganizationOrgManagePolicyConfig = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgManagePolicyConfig"], () => require("./organizationOrgManagePolicyConfig"));

export { OrganizationOrgManagePolicyTargetArgs, OrganizationOrgManagePolicyTargetState } from "./organizationOrgManagePolicyTarget";
export type OrganizationOrgManagePolicyTarget = import("./organizationOrgManagePolicyTarget").OrganizationOrgManagePolicyTarget;
export const OrganizationOrgManagePolicyTarget: typeof import("./organizationOrgManagePolicyTarget").OrganizationOrgManagePolicyTarget = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgManagePolicyTarget"], () => require("./organizationOrgManagePolicyTarget"));

export { OrganizationOrgMemberArgs, OrganizationOrgMemberState } from "./organizationOrgMember";
export type OrganizationOrgMember = import("./organizationOrgMember").OrganizationOrgMember;
export const OrganizationOrgMember: typeof import("./organizationOrgMember").OrganizationOrgMember = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgMember"], () => require("./organizationOrgMember"));

export { OrganizationOrgMemberAuthIdentityAttachmentArgs, OrganizationOrgMemberAuthIdentityAttachmentState } from "./organizationOrgMemberAuthIdentityAttachment";
export type OrganizationOrgMemberAuthIdentityAttachment = import("./organizationOrgMemberAuthIdentityAttachment").OrganizationOrgMemberAuthIdentityAttachment;
export const OrganizationOrgMemberAuthIdentityAttachment: typeof import("./organizationOrgMemberAuthIdentityAttachment").OrganizationOrgMemberAuthIdentityAttachment = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgMemberAuthIdentityAttachment"], () => require("./organizationOrgMemberAuthIdentityAttachment"));

export { OrganizationOrgMemberEmailArgs, OrganizationOrgMemberEmailState } from "./organizationOrgMemberEmail";
export type OrganizationOrgMemberEmail = import("./organizationOrgMemberEmail").OrganizationOrgMemberEmail;
export const OrganizationOrgMemberEmail: typeof import("./organizationOrgMemberEmail").OrganizationOrgMemberEmail = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgMemberEmail"], () => require("./organizationOrgMemberEmail"));

export { OrganizationOrgMemberPolicyAttachmentArgs, OrganizationOrgMemberPolicyAttachmentState } from "./organizationOrgMemberPolicyAttachment";
export type OrganizationOrgMemberPolicyAttachment = import("./organizationOrgMemberPolicyAttachment").OrganizationOrgMemberPolicyAttachment;
export const OrganizationOrgMemberPolicyAttachment: typeof import("./organizationOrgMemberPolicyAttachment").OrganizationOrgMemberPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgMemberPolicyAttachment"], () => require("./organizationOrgMemberPolicyAttachment"));

export { OrganizationOrgNodeArgs, OrganizationOrgNodeState } from "./organizationOrgNode";
export type OrganizationOrgNode = import("./organizationOrgNode").OrganizationOrgNode;
export const OrganizationOrgNode: typeof import("./organizationOrgNode").OrganizationOrgNode = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgNode"], () => require("./organizationOrgNode"));

export { OrganizationOrgShareUnitArgs, OrganizationOrgShareUnitState } from "./organizationOrgShareUnit";
export type OrganizationOrgShareUnit = import("./organizationOrgShareUnit").OrganizationOrgShareUnit;
export const OrganizationOrgShareUnit: typeof import("./organizationOrgShareUnit").OrganizationOrgShareUnit = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgShareUnit"], () => require("./organizationOrgShareUnit"));

export { OrganizationOrgShareUnitMemberArgs, OrganizationOrgShareUnitMemberState } from "./organizationOrgShareUnitMember";
export type OrganizationOrgShareUnitMember = import("./organizationOrgShareUnitMember").OrganizationOrgShareUnitMember;
export const OrganizationOrgShareUnitMember: typeof import("./organizationOrgShareUnitMember").OrganizationOrgShareUnitMember = null as any;
utilities.lazyLoad(exports, ["OrganizationOrgShareUnitMember"], () => require("./organizationOrgShareUnitMember"));

export { OrganizationPolicySubAccountAttachmentArgs, OrganizationPolicySubAccountAttachmentState } from "./organizationPolicySubAccountAttachment";
export type OrganizationPolicySubAccountAttachment = import("./organizationPolicySubAccountAttachment").OrganizationPolicySubAccountAttachment;
export const OrganizationPolicySubAccountAttachment: typeof import("./organizationPolicySubAccountAttachment").OrganizationPolicySubAccountAttachment = null as any;
utilities.lazyLoad(exports, ["OrganizationPolicySubAccountAttachment"], () => require("./organizationPolicySubAccountAttachment"));

export { OrganizationQuitOrganizationOperationArgs, OrganizationQuitOrganizationOperationState } from "./organizationQuitOrganizationOperation";
export type OrganizationQuitOrganizationOperation = import("./organizationQuitOrganizationOperation").OrganizationQuitOrganizationOperation;
export const OrganizationQuitOrganizationOperation: typeof import("./organizationQuitOrganizationOperation").OrganizationQuitOrganizationOperation = null as any;
utilities.lazyLoad(exports, ["OrganizationQuitOrganizationOperation"], () => require("./organizationQuitOrganizationOperation"));

export { OrganizationServiceAssignArgs, OrganizationServiceAssignState } from "./organizationServiceAssign";
export type OrganizationServiceAssign = import("./organizationServiceAssign").OrganizationServiceAssign;
export const OrganizationServiceAssign: typeof import("./organizationServiceAssign").OrganizationServiceAssign = null as any;
utilities.lazyLoad(exports, ["OrganizationServiceAssign"], () => require("./organizationServiceAssign"));

export { PlacementGroupArgs, PlacementGroupState } from "./placementGroup";
export type PlacementGroup = import("./placementGroup").PlacementGroup;
export const PlacementGroup: typeof import("./placementGroup").PlacementGroup = null as any;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));

export { PostgresqlBackupDownloadRestrictionConfigArgs, PostgresqlBackupDownloadRestrictionConfigState } from "./postgresqlBackupDownloadRestrictionConfig";
export type PostgresqlBackupDownloadRestrictionConfig = import("./postgresqlBackupDownloadRestrictionConfig").PostgresqlBackupDownloadRestrictionConfig;
export const PostgresqlBackupDownloadRestrictionConfig: typeof import("./postgresqlBackupDownloadRestrictionConfig").PostgresqlBackupDownloadRestrictionConfig = null as any;
utilities.lazyLoad(exports, ["PostgresqlBackupDownloadRestrictionConfig"], () => require("./postgresqlBackupDownloadRestrictionConfig"));

export { PostgresqlBackupPlanConfigArgs, PostgresqlBackupPlanConfigState } from "./postgresqlBackupPlanConfig";
export type PostgresqlBackupPlanConfig = import("./postgresqlBackupPlanConfig").PostgresqlBackupPlanConfig;
export const PostgresqlBackupPlanConfig: typeof import("./postgresqlBackupPlanConfig").PostgresqlBackupPlanConfig = null as any;
utilities.lazyLoad(exports, ["PostgresqlBackupPlanConfig"], () => require("./postgresqlBackupPlanConfig"));

export { PostgresqlBaseBackupArgs, PostgresqlBaseBackupState } from "./postgresqlBaseBackup";
export type PostgresqlBaseBackup = import("./postgresqlBaseBackup").PostgresqlBaseBackup;
export const PostgresqlBaseBackup: typeof import("./postgresqlBaseBackup").PostgresqlBaseBackup = null as any;
utilities.lazyLoad(exports, ["PostgresqlBaseBackup"], () => require("./postgresqlBaseBackup"));

export { PostgresqlDeleteLogBackupOperationArgs, PostgresqlDeleteLogBackupOperationState } from "./postgresqlDeleteLogBackupOperation";
export type PostgresqlDeleteLogBackupOperation = import("./postgresqlDeleteLogBackupOperation").PostgresqlDeleteLogBackupOperation;
export const PostgresqlDeleteLogBackupOperation: typeof import("./postgresqlDeleteLogBackupOperation").PostgresqlDeleteLogBackupOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlDeleteLogBackupOperation"], () => require("./postgresqlDeleteLogBackupOperation"));

export { PostgresqlDisisolateDbInstanceOperationArgs, PostgresqlDisisolateDbInstanceOperationState } from "./postgresqlDisisolateDbInstanceOperation";
export type PostgresqlDisisolateDbInstanceOperation = import("./postgresqlDisisolateDbInstanceOperation").PostgresqlDisisolateDbInstanceOperation;
export const PostgresqlDisisolateDbInstanceOperation: typeof import("./postgresqlDisisolateDbInstanceOperation").PostgresqlDisisolateDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlDisisolateDbInstanceOperation"], () => require("./postgresqlDisisolateDbInstanceOperation"));

export { PostgresqlInstanceArgs, PostgresqlInstanceState } from "./postgresqlInstance";
export type PostgresqlInstance = import("./postgresqlInstance").PostgresqlInstance;
export const PostgresqlInstance: typeof import("./postgresqlInstance").PostgresqlInstance = null as any;
utilities.lazyLoad(exports, ["PostgresqlInstance"], () => require("./postgresqlInstance"));

export { PostgresqlInstanceHaConfigArgs, PostgresqlInstanceHaConfigState } from "./postgresqlInstanceHaConfig";
export type PostgresqlInstanceHaConfig = import("./postgresqlInstanceHaConfig").PostgresqlInstanceHaConfig;
export const PostgresqlInstanceHaConfig: typeof import("./postgresqlInstanceHaConfig").PostgresqlInstanceHaConfig = null as any;
utilities.lazyLoad(exports, ["PostgresqlInstanceHaConfig"], () => require("./postgresqlInstanceHaConfig"));

export { PostgresqlIsolateDbInstanceOperationArgs, PostgresqlIsolateDbInstanceOperationState } from "./postgresqlIsolateDbInstanceOperation";
export type PostgresqlIsolateDbInstanceOperation = import("./postgresqlIsolateDbInstanceOperation").PostgresqlIsolateDbInstanceOperation;
export const PostgresqlIsolateDbInstanceOperation: typeof import("./postgresqlIsolateDbInstanceOperation").PostgresqlIsolateDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlIsolateDbInstanceOperation"], () => require("./postgresqlIsolateDbInstanceOperation"));

export { PostgresqlModifyAccountRemarkOperationArgs, PostgresqlModifyAccountRemarkOperationState } from "./postgresqlModifyAccountRemarkOperation";
export type PostgresqlModifyAccountRemarkOperation = import("./postgresqlModifyAccountRemarkOperation").PostgresqlModifyAccountRemarkOperation;
export const PostgresqlModifyAccountRemarkOperation: typeof import("./postgresqlModifyAccountRemarkOperation").PostgresqlModifyAccountRemarkOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlModifyAccountRemarkOperation"], () => require("./postgresqlModifyAccountRemarkOperation"));

export { PostgresqlModifySwitchTimePeriodOperationArgs, PostgresqlModifySwitchTimePeriodOperationState } from "./postgresqlModifySwitchTimePeriodOperation";
export type PostgresqlModifySwitchTimePeriodOperation = import("./postgresqlModifySwitchTimePeriodOperation").PostgresqlModifySwitchTimePeriodOperation;
export const PostgresqlModifySwitchTimePeriodOperation: typeof import("./postgresqlModifySwitchTimePeriodOperation").PostgresqlModifySwitchTimePeriodOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlModifySwitchTimePeriodOperation"], () => require("./postgresqlModifySwitchTimePeriodOperation"));

export { PostgresqlParameterTemplateArgs, PostgresqlParameterTemplateState } from "./postgresqlParameterTemplate";
export type PostgresqlParameterTemplate = import("./postgresqlParameterTemplate").PostgresqlParameterTemplate;
export const PostgresqlParameterTemplate: typeof import("./postgresqlParameterTemplate").PostgresqlParameterTemplate = null as any;
utilities.lazyLoad(exports, ["PostgresqlParameterTemplate"], () => require("./postgresqlParameterTemplate"));

export { PostgresqlReadonlyAttachmentArgs, PostgresqlReadonlyAttachmentState } from "./postgresqlReadonlyAttachment";
export type PostgresqlReadonlyAttachment = import("./postgresqlReadonlyAttachment").PostgresqlReadonlyAttachment;
export const PostgresqlReadonlyAttachment: typeof import("./postgresqlReadonlyAttachment").PostgresqlReadonlyAttachment = null as any;
utilities.lazyLoad(exports, ["PostgresqlReadonlyAttachment"], () => require("./postgresqlReadonlyAttachment"));

export { PostgresqlReadonlyGroupArgs, PostgresqlReadonlyGroupState } from "./postgresqlReadonlyGroup";
export type PostgresqlReadonlyGroup = import("./postgresqlReadonlyGroup").PostgresqlReadonlyGroup;
export const PostgresqlReadonlyGroup: typeof import("./postgresqlReadonlyGroup").PostgresqlReadonlyGroup = null as any;
utilities.lazyLoad(exports, ["PostgresqlReadonlyGroup"], () => require("./postgresqlReadonlyGroup"));

export { PostgresqlReadonlyInstanceArgs, PostgresqlReadonlyInstanceState } from "./postgresqlReadonlyInstance";
export type PostgresqlReadonlyInstance = import("./postgresqlReadonlyInstance").PostgresqlReadonlyInstance;
export const PostgresqlReadonlyInstance: typeof import("./postgresqlReadonlyInstance").PostgresqlReadonlyInstance = null as any;
utilities.lazyLoad(exports, ["PostgresqlReadonlyInstance"], () => require("./postgresqlReadonlyInstance"));

export { PostgresqlRebalanceReadonlyGroupOperationArgs, PostgresqlRebalanceReadonlyGroupOperationState } from "./postgresqlRebalanceReadonlyGroupOperation";
export type PostgresqlRebalanceReadonlyGroupOperation = import("./postgresqlRebalanceReadonlyGroupOperation").PostgresqlRebalanceReadonlyGroupOperation;
export const PostgresqlRebalanceReadonlyGroupOperation: typeof import("./postgresqlRebalanceReadonlyGroupOperation").PostgresqlRebalanceReadonlyGroupOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlRebalanceReadonlyGroupOperation"], () => require("./postgresqlRebalanceReadonlyGroupOperation"));

export { PostgresqlRenewDbInstanceOperationArgs, PostgresqlRenewDbInstanceOperationState } from "./postgresqlRenewDbInstanceOperation";
export type PostgresqlRenewDbInstanceOperation = import("./postgresqlRenewDbInstanceOperation").PostgresqlRenewDbInstanceOperation;
export const PostgresqlRenewDbInstanceOperation: typeof import("./postgresqlRenewDbInstanceOperation").PostgresqlRenewDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlRenewDbInstanceOperation"], () => require("./postgresqlRenewDbInstanceOperation"));

export { PostgresqlRestartDbInstanceOperationArgs, PostgresqlRestartDbInstanceOperationState } from "./postgresqlRestartDbInstanceOperation";
export type PostgresqlRestartDbInstanceOperation = import("./postgresqlRestartDbInstanceOperation").PostgresqlRestartDbInstanceOperation;
export const PostgresqlRestartDbInstanceOperation: typeof import("./postgresqlRestartDbInstanceOperation").PostgresqlRestartDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["PostgresqlRestartDbInstanceOperation"], () => require("./postgresqlRestartDbInstanceOperation"));

export { PostgresqlSecurityGroupConfigArgs, PostgresqlSecurityGroupConfigState } from "./postgresqlSecurityGroupConfig";
export type PostgresqlSecurityGroupConfig = import("./postgresqlSecurityGroupConfig").PostgresqlSecurityGroupConfig;
export const PostgresqlSecurityGroupConfig: typeof import("./postgresqlSecurityGroupConfig").PostgresqlSecurityGroupConfig = null as any;
utilities.lazyLoad(exports, ["PostgresqlSecurityGroupConfig"], () => require("./postgresqlSecurityGroupConfig"));

export { PrivateDnsRecordArgs, PrivateDnsRecordState } from "./privateDnsRecord";
export type PrivateDnsRecord = import("./privateDnsRecord").PrivateDnsRecord;
export const PrivateDnsRecord: typeof import("./privateDnsRecord").PrivateDnsRecord = null as any;
utilities.lazyLoad(exports, ["PrivateDnsRecord"], () => require("./privateDnsRecord"));

export { PrivateDnsZoneArgs, PrivateDnsZoneState } from "./privateDnsZone";
export type PrivateDnsZone = import("./privateDnsZone").PrivateDnsZone;
export const PrivateDnsZone: typeof import("./privateDnsZone").PrivateDnsZone = null as any;
utilities.lazyLoad(exports, ["PrivateDnsZone"], () => require("./privateDnsZone"));

export { PrivateDnsZoneVpcAttachmentArgs, PrivateDnsZoneVpcAttachmentState } from "./privateDnsZoneVpcAttachment";
export type PrivateDnsZoneVpcAttachment = import("./privateDnsZoneVpcAttachment").PrivateDnsZoneVpcAttachment;
export const PrivateDnsZoneVpcAttachment: typeof import("./privateDnsZoneVpcAttachment").PrivateDnsZoneVpcAttachment = null as any;
utilities.lazyLoad(exports, ["PrivateDnsZoneVpcAttachment"], () => require("./privateDnsZoneVpcAttachment"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProtocolTemplateArgs, ProtocolTemplateState } from "./protocolTemplate";
export type ProtocolTemplate = import("./protocolTemplate").ProtocolTemplate;
export const ProtocolTemplate: typeof import("./protocolTemplate").ProtocolTemplate = null as any;
utilities.lazyLoad(exports, ["ProtocolTemplate"], () => require("./protocolTemplate"));

export { ProtocolTemplateGroupArgs, ProtocolTemplateGroupState } from "./protocolTemplateGroup";
export type ProtocolTemplateGroup = import("./protocolTemplateGroup").ProtocolTemplateGroup;
export const ProtocolTemplateGroup: typeof import("./protocolTemplateGroup").ProtocolTemplateGroup = null as any;
utilities.lazyLoad(exports, ["ProtocolTemplateGroup"], () => require("./protocolTemplateGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PtsAlertChannelArgs, PtsAlertChannelState } from "./ptsAlertChannel";
export type PtsAlertChannel = import("./ptsAlertChannel").PtsAlertChannel;
export const PtsAlertChannel: typeof import("./ptsAlertChannel").PtsAlertChannel = null as any;
utilities.lazyLoad(exports, ["PtsAlertChannel"], () => require("./ptsAlertChannel"));

export { PtsCronJobArgs, PtsCronJobState } from "./ptsCronJob";
export type PtsCronJob = import("./ptsCronJob").PtsCronJob;
export const PtsCronJob: typeof import("./ptsCronJob").PtsCronJob = null as any;
utilities.lazyLoad(exports, ["PtsCronJob"], () => require("./ptsCronJob"));

export { PtsCronJobAbortArgs, PtsCronJobAbortState } from "./ptsCronJobAbort";
export type PtsCronJobAbort = import("./ptsCronJobAbort").PtsCronJobAbort;
export const PtsCronJobAbort: typeof import("./ptsCronJobAbort").PtsCronJobAbort = null as any;
utilities.lazyLoad(exports, ["PtsCronJobAbort"], () => require("./ptsCronJobAbort"));

export { PtsCronJobRestartArgs, PtsCronJobRestartState } from "./ptsCronJobRestart";
export type PtsCronJobRestart = import("./ptsCronJobRestart").PtsCronJobRestart;
export const PtsCronJobRestart: typeof import("./ptsCronJobRestart").PtsCronJobRestart = null as any;
utilities.lazyLoad(exports, ["PtsCronJobRestart"], () => require("./ptsCronJobRestart"));

export { PtsFileArgs, PtsFileState } from "./ptsFile";
export type PtsFile = import("./ptsFile").PtsFile;
export const PtsFile: typeof import("./ptsFile").PtsFile = null as any;
utilities.lazyLoad(exports, ["PtsFile"], () => require("./ptsFile"));

export { PtsJobArgs, PtsJobState } from "./ptsJob";
export type PtsJob = import("./ptsJob").PtsJob;
export const PtsJob: typeof import("./ptsJob").PtsJob = null as any;
utilities.lazyLoad(exports, ["PtsJob"], () => require("./ptsJob"));

export { PtsJobAbortArgs, PtsJobAbortState } from "./ptsJobAbort";
export type PtsJobAbort = import("./ptsJobAbort").PtsJobAbort;
export const PtsJobAbort: typeof import("./ptsJobAbort").PtsJobAbort = null as any;
utilities.lazyLoad(exports, ["PtsJobAbort"], () => require("./ptsJobAbort"));

export { PtsProjectArgs, PtsProjectState } from "./ptsProject";
export type PtsProject = import("./ptsProject").PtsProject;
export const PtsProject: typeof import("./ptsProject").PtsProject = null as any;
utilities.lazyLoad(exports, ["PtsProject"], () => require("./ptsProject"));

export { PtsScenarioArgs, PtsScenarioState } from "./ptsScenario";
export type PtsScenario = import("./ptsScenario").PtsScenario;
export const PtsScenario: typeof import("./ptsScenario").PtsScenario = null as any;
utilities.lazyLoad(exports, ["PtsScenario"], () => require("./ptsScenario"));

export { PtsTmpKeyGenerateArgs, PtsTmpKeyGenerateState } from "./ptsTmpKeyGenerate";
export type PtsTmpKeyGenerate = import("./ptsTmpKeyGenerate").PtsTmpKeyGenerate;
export const PtsTmpKeyGenerate: typeof import("./ptsTmpKeyGenerate").PtsTmpKeyGenerate = null as any;
utilities.lazyLoad(exports, ["PtsTmpKeyGenerate"], () => require("./ptsTmpKeyGenerate"));

export { RedisAccountArgs, RedisAccountState } from "./redisAccount";
export type RedisAccount = import("./redisAccount").RedisAccount;
export const RedisAccount: typeof import("./redisAccount").RedisAccount = null as any;
utilities.lazyLoad(exports, ["RedisAccount"], () => require("./redisAccount"));

export { RedisBackupConfigArgs, RedisBackupConfigState } from "./redisBackupConfig";
export type RedisBackupConfig = import("./redisBackupConfig").RedisBackupConfig;
export const RedisBackupConfig: typeof import("./redisBackupConfig").RedisBackupConfig = null as any;
utilities.lazyLoad(exports, ["RedisBackupConfig"], () => require("./redisBackupConfig"));

export { RedisBackupDownloadRestrictionArgs, RedisBackupDownloadRestrictionState } from "./redisBackupDownloadRestriction";
export type RedisBackupDownloadRestriction = import("./redisBackupDownloadRestriction").RedisBackupDownloadRestriction;
export const RedisBackupDownloadRestriction: typeof import("./redisBackupDownloadRestriction").RedisBackupDownloadRestriction = null as any;
utilities.lazyLoad(exports, ["RedisBackupDownloadRestriction"], () => require("./redisBackupDownloadRestriction"));

export { RedisBackupOperationArgs, RedisBackupOperationState } from "./redisBackupOperation";
export type RedisBackupOperation = import("./redisBackupOperation").RedisBackupOperation;
export const RedisBackupOperation: typeof import("./redisBackupOperation").RedisBackupOperation = null as any;
utilities.lazyLoad(exports, ["RedisBackupOperation"], () => require("./redisBackupOperation"));

export { RedisClearInstanceOperationArgs, RedisClearInstanceOperationState } from "./redisClearInstanceOperation";
export type RedisClearInstanceOperation = import("./redisClearInstanceOperation").RedisClearInstanceOperation;
export const RedisClearInstanceOperation: typeof import("./redisClearInstanceOperation").RedisClearInstanceOperation = null as any;
utilities.lazyLoad(exports, ["RedisClearInstanceOperation"], () => require("./redisClearInstanceOperation"));

export { RedisConnectionConfigArgs, RedisConnectionConfigState } from "./redisConnectionConfig";
export type RedisConnectionConfig = import("./redisConnectionConfig").RedisConnectionConfig;
export const RedisConnectionConfig: typeof import("./redisConnectionConfig").RedisConnectionConfig = null as any;
utilities.lazyLoad(exports, ["RedisConnectionConfig"], () => require("./redisConnectionConfig"));

export { RedisInstanceArgs, RedisInstanceState } from "./redisInstance";
export type RedisInstance = import("./redisInstance").RedisInstance;
export const RedisInstance: typeof import("./redisInstance").RedisInstance = null as any;
utilities.lazyLoad(exports, ["RedisInstance"], () => require("./redisInstance"));

export { RedisMaintenanceWindowArgs, RedisMaintenanceWindowState } from "./redisMaintenanceWindow";
export type RedisMaintenanceWindow = import("./redisMaintenanceWindow").RedisMaintenanceWindow;
export const RedisMaintenanceWindow: typeof import("./redisMaintenanceWindow").RedisMaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["RedisMaintenanceWindow"], () => require("./redisMaintenanceWindow"));

export { RedisParamArgs, RedisParamState } from "./redisParam";
export type RedisParam = import("./redisParam").RedisParam;
export const RedisParam: typeof import("./redisParam").RedisParam = null as any;
utilities.lazyLoad(exports, ["RedisParam"], () => require("./redisParam"));

export { RedisParamTemplateArgs, RedisParamTemplateState } from "./redisParamTemplate";
export type RedisParamTemplate = import("./redisParamTemplate").RedisParamTemplate;
export const RedisParamTemplate: typeof import("./redisParamTemplate").RedisParamTemplate = null as any;
utilities.lazyLoad(exports, ["RedisParamTemplate"], () => require("./redisParamTemplate"));

export { RedisReadOnlyArgs, RedisReadOnlyState } from "./redisReadOnly";
export type RedisReadOnly = import("./redisReadOnly").RedisReadOnly;
export const RedisReadOnly: typeof import("./redisReadOnly").RedisReadOnly = null as any;
utilities.lazyLoad(exports, ["RedisReadOnly"], () => require("./redisReadOnly"));

export { RedisRenewInstanceOperationArgs, RedisRenewInstanceOperationState } from "./redisRenewInstanceOperation";
export type RedisRenewInstanceOperation = import("./redisRenewInstanceOperation").RedisRenewInstanceOperation;
export const RedisRenewInstanceOperation: typeof import("./redisRenewInstanceOperation").RedisRenewInstanceOperation = null as any;
utilities.lazyLoad(exports, ["RedisRenewInstanceOperation"], () => require("./redisRenewInstanceOperation"));

export { RedisReplicaReadonlyArgs, RedisReplicaReadonlyState } from "./redisReplicaReadonly";
export type RedisReplicaReadonly = import("./redisReplicaReadonly").RedisReplicaReadonly;
export const RedisReplicaReadonly: typeof import("./redisReplicaReadonly").RedisReplicaReadonly = null as any;
utilities.lazyLoad(exports, ["RedisReplicaReadonly"], () => require("./redisReplicaReadonly"));

export { RedisReplicateAttachmentArgs, RedisReplicateAttachmentState } from "./redisReplicateAttachment";
export type RedisReplicateAttachment = import("./redisReplicateAttachment").RedisReplicateAttachment;
export const RedisReplicateAttachment: typeof import("./redisReplicateAttachment").RedisReplicateAttachment = null as any;
utilities.lazyLoad(exports, ["RedisReplicateAttachment"], () => require("./redisReplicateAttachment"));

export { RedisSecurityGroupAttachmentArgs, RedisSecurityGroupAttachmentState } from "./redisSecurityGroupAttachment";
export type RedisSecurityGroupAttachment = import("./redisSecurityGroupAttachment").RedisSecurityGroupAttachment;
export const RedisSecurityGroupAttachment: typeof import("./redisSecurityGroupAttachment").RedisSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["RedisSecurityGroupAttachment"], () => require("./redisSecurityGroupAttachment"));

export { RedisSslArgs, RedisSslState } from "./redisSsl";
export type RedisSsl = import("./redisSsl").RedisSsl;
export const RedisSsl: typeof import("./redisSsl").RedisSsl = null as any;
utilities.lazyLoad(exports, ["RedisSsl"], () => require("./redisSsl"));

export { RedisStartupInstanceOperationArgs, RedisStartupInstanceOperationState } from "./redisStartupInstanceOperation";
export type RedisStartupInstanceOperation = import("./redisStartupInstanceOperation").RedisStartupInstanceOperation;
export const RedisStartupInstanceOperation: typeof import("./redisStartupInstanceOperation").RedisStartupInstanceOperation = null as any;
utilities.lazyLoad(exports, ["RedisStartupInstanceOperation"], () => require("./redisStartupInstanceOperation"));

export { RedisSwitchMasterArgs, RedisSwitchMasterState } from "./redisSwitchMaster";
export type RedisSwitchMaster = import("./redisSwitchMaster").RedisSwitchMaster;
export const RedisSwitchMaster: typeof import("./redisSwitchMaster").RedisSwitchMaster = null as any;
utilities.lazyLoad(exports, ["RedisSwitchMaster"], () => require("./redisSwitchMaster"));

export { RedisUpgradeCacheVersionOperationArgs, RedisUpgradeCacheVersionOperationState } from "./redisUpgradeCacheVersionOperation";
export type RedisUpgradeCacheVersionOperation = import("./redisUpgradeCacheVersionOperation").RedisUpgradeCacheVersionOperation;
export const RedisUpgradeCacheVersionOperation: typeof import("./redisUpgradeCacheVersionOperation").RedisUpgradeCacheVersionOperation = null as any;
utilities.lazyLoad(exports, ["RedisUpgradeCacheVersionOperation"], () => require("./redisUpgradeCacheVersionOperation"));

export { RedisUpgradeMultiZoneOperationArgs, RedisUpgradeMultiZoneOperationState } from "./redisUpgradeMultiZoneOperation";
export type RedisUpgradeMultiZoneOperation = import("./redisUpgradeMultiZoneOperation").RedisUpgradeMultiZoneOperation;
export const RedisUpgradeMultiZoneOperation: typeof import("./redisUpgradeMultiZoneOperation").RedisUpgradeMultiZoneOperation = null as any;
utilities.lazyLoad(exports, ["RedisUpgradeMultiZoneOperation"], () => require("./redisUpgradeMultiZoneOperation"));

export { RedisUpgradeProxyVersionOperationArgs, RedisUpgradeProxyVersionOperationState } from "./redisUpgradeProxyVersionOperation";
export type RedisUpgradeProxyVersionOperation = import("./redisUpgradeProxyVersionOperation").RedisUpgradeProxyVersionOperation;
export const RedisUpgradeProxyVersionOperation: typeof import("./redisUpgradeProxyVersionOperation").RedisUpgradeProxyVersionOperation = null as any;
utilities.lazyLoad(exports, ["RedisUpgradeProxyVersionOperation"], () => require("./redisUpgradeProxyVersionOperation"));

export { ReservedInstanceArgs, ReservedInstanceState } from "./reservedInstance";
export type ReservedInstance = import("./reservedInstance").ReservedInstance;
export const ReservedInstance: typeof import("./reservedInstance").ReservedInstance = null as any;
utilities.lazyLoad(exports, ["ReservedInstance"], () => require("./reservedInstance"));

export { RouteEntryArgs, RouteEntryState } from "./routeEntry";
export type RouteEntry = import("./routeEntry").RouteEntry;
export const RouteEntry: typeof import("./routeEntry").RouteEntry = null as any;
utilities.lazyLoad(exports, ["RouteEntry"], () => require("./routeEntry"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociationArgs, RouteTableAssociationState } from "./routeTableAssociation";
export type RouteTableAssociation = import("./routeTableAssociation").RouteTableAssociation;
export const RouteTableAssociation: typeof import("./routeTableAssociation").RouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));

export { RouteTableEntryArgs, RouteTableEntryState } from "./routeTableEntry";
export type RouteTableEntry = import("./routeTableEntry").RouteTableEntry;
export const RouteTableEntry: typeof import("./routeTableEntry").RouteTableEntry = null as any;
utilities.lazyLoad(exports, ["RouteTableEntry"], () => require("./routeTableEntry"));

export { RumInstanceStatusConfigArgs, RumInstanceStatusConfigState } from "./rumInstanceStatusConfig";
export type RumInstanceStatusConfig = import("./rumInstanceStatusConfig").RumInstanceStatusConfig;
export const RumInstanceStatusConfig: typeof import("./rumInstanceStatusConfig").RumInstanceStatusConfig = null as any;
utilities.lazyLoad(exports, ["RumInstanceStatusConfig"], () => require("./rumInstanceStatusConfig"));

export { RumOfflineLogConfigAttachmentArgs, RumOfflineLogConfigAttachmentState } from "./rumOfflineLogConfigAttachment";
export type RumOfflineLogConfigAttachment = import("./rumOfflineLogConfigAttachment").RumOfflineLogConfigAttachment;
export const RumOfflineLogConfigAttachment: typeof import("./rumOfflineLogConfigAttachment").RumOfflineLogConfigAttachment = null as any;
utilities.lazyLoad(exports, ["RumOfflineLogConfigAttachment"], () => require("./rumOfflineLogConfigAttachment"));

export { RumProjectArgs, RumProjectState } from "./rumProject";
export type RumProject = import("./rumProject").RumProject;
export const RumProject: typeof import("./rumProject").RumProject = null as any;
utilities.lazyLoad(exports, ["RumProject"], () => require("./rumProject"));

export { RumProjectStatusConfigArgs, RumProjectStatusConfigState } from "./rumProjectStatusConfig";
export type RumProjectStatusConfig = import("./rumProjectStatusConfig").RumProjectStatusConfig;
export const RumProjectStatusConfig: typeof import("./rumProjectStatusConfig").RumProjectStatusConfig = null as any;
utilities.lazyLoad(exports, ["RumProjectStatusConfig"], () => require("./rumProjectStatusConfig"));

export { RumReleaseFileArgs, RumReleaseFileState } from "./rumReleaseFile";
export type RumReleaseFile = import("./rumReleaseFile").RumReleaseFile;
export const RumReleaseFile: typeof import("./rumReleaseFile").RumReleaseFile = null as any;
utilities.lazyLoad(exports, ["RumReleaseFile"], () => require("./rumReleaseFile"));

export { RumTawInstanceArgs, RumTawInstanceState } from "./rumTawInstance";
export type RumTawInstance = import("./rumTawInstance").RumTawInstance;
export const RumTawInstance: typeof import("./rumTawInstance").RumTawInstance = null as any;
utilities.lazyLoad(exports, ["RumTawInstance"], () => require("./rumTawInstance"));

export { RumWhitelistArgs, RumWhitelistState } from "./rumWhitelist";
export type RumWhitelist = import("./rumWhitelist").RumWhitelist;
export const RumWhitelist: typeof import("./rumWhitelist").RumWhitelist = null as any;
utilities.lazyLoad(exports, ["RumWhitelist"], () => require("./rumWhitelist"));

export { ScfFunctionArgs, ScfFunctionState } from "./scfFunction";
export type ScfFunction = import("./scfFunction").ScfFunction;
export const ScfFunction: typeof import("./scfFunction").ScfFunction = null as any;
utilities.lazyLoad(exports, ["ScfFunction"], () => require("./scfFunction"));

export { ScfFunctionAliasArgs, ScfFunctionAliasState } from "./scfFunctionAlias";
export type ScfFunctionAlias = import("./scfFunctionAlias").ScfFunctionAlias;
export const ScfFunctionAlias: typeof import("./scfFunctionAlias").ScfFunctionAlias = null as any;
utilities.lazyLoad(exports, ["ScfFunctionAlias"], () => require("./scfFunctionAlias"));

export { ScfFunctionEventInvokeConfigArgs, ScfFunctionEventInvokeConfigState } from "./scfFunctionEventInvokeConfig";
export type ScfFunctionEventInvokeConfig = import("./scfFunctionEventInvokeConfig").ScfFunctionEventInvokeConfig;
export const ScfFunctionEventInvokeConfig: typeof import("./scfFunctionEventInvokeConfig").ScfFunctionEventInvokeConfig = null as any;
utilities.lazyLoad(exports, ["ScfFunctionEventInvokeConfig"], () => require("./scfFunctionEventInvokeConfig"));

export { ScfFunctionVersionArgs, ScfFunctionVersionState } from "./scfFunctionVersion";
export type ScfFunctionVersion = import("./scfFunctionVersion").ScfFunctionVersion;
export const ScfFunctionVersion: typeof import("./scfFunctionVersion").ScfFunctionVersion = null as any;
utilities.lazyLoad(exports, ["ScfFunctionVersion"], () => require("./scfFunctionVersion"));

export { ScfInvokeFunctionArgs, ScfInvokeFunctionState } from "./scfInvokeFunction";
export type ScfInvokeFunction = import("./scfInvokeFunction").ScfInvokeFunction;
export const ScfInvokeFunction: typeof import("./scfInvokeFunction").ScfInvokeFunction = null as any;
utilities.lazyLoad(exports, ["ScfInvokeFunction"], () => require("./scfInvokeFunction"));

export { ScfLayerArgs, ScfLayerState } from "./scfLayer";
export type ScfLayer = import("./scfLayer").ScfLayer;
export const ScfLayer: typeof import("./scfLayer").ScfLayer = null as any;
utilities.lazyLoad(exports, ["ScfLayer"], () => require("./scfLayer"));

export { ScfNamespaceArgs, ScfNamespaceState } from "./scfNamespace";
export type ScfNamespace = import("./scfNamespace").ScfNamespace;
export const ScfNamespace: typeof import("./scfNamespace").ScfNamespace = null as any;
utilities.lazyLoad(exports, ["ScfNamespace"], () => require("./scfNamespace"));

export { ScfProvisionedConcurrencyConfigArgs, ScfProvisionedConcurrencyConfigState } from "./scfProvisionedConcurrencyConfig";
export type ScfProvisionedConcurrencyConfig = import("./scfProvisionedConcurrencyConfig").ScfProvisionedConcurrencyConfig;
export const ScfProvisionedConcurrencyConfig: typeof import("./scfProvisionedConcurrencyConfig").ScfProvisionedConcurrencyConfig = null as any;
utilities.lazyLoad(exports, ["ScfProvisionedConcurrencyConfig"], () => require("./scfProvisionedConcurrencyConfig"));

export { ScfReservedConcurrencyConfigArgs, ScfReservedConcurrencyConfigState } from "./scfReservedConcurrencyConfig";
export type ScfReservedConcurrencyConfig = import("./scfReservedConcurrencyConfig").ScfReservedConcurrencyConfig;
export const ScfReservedConcurrencyConfig: typeof import("./scfReservedConcurrencyConfig").ScfReservedConcurrencyConfig = null as any;
utilities.lazyLoad(exports, ["ScfReservedConcurrencyConfig"], () => require("./scfReservedConcurrencyConfig"));

export { ScfSyncInvokeFunctionArgs, ScfSyncInvokeFunctionState } from "./scfSyncInvokeFunction";
export type ScfSyncInvokeFunction = import("./scfSyncInvokeFunction").ScfSyncInvokeFunction;
export const ScfSyncInvokeFunction: typeof import("./scfSyncInvokeFunction").ScfSyncInvokeFunction = null as any;
utilities.lazyLoad(exports, ["ScfSyncInvokeFunction"], () => require("./scfSyncInvokeFunction"));

export { ScfTerminateAsyncEventArgs, ScfTerminateAsyncEventState } from "./scfTerminateAsyncEvent";
export type ScfTerminateAsyncEvent = import("./scfTerminateAsyncEvent").ScfTerminateAsyncEvent;
export const ScfTerminateAsyncEvent: typeof import("./scfTerminateAsyncEvent").ScfTerminateAsyncEvent = null as any;
utilities.lazyLoad(exports, ["ScfTerminateAsyncEvent"], () => require("./scfTerminateAsyncEvent"));

export { ScfTriggerConfigArgs, ScfTriggerConfigState } from "./scfTriggerConfig";
export type ScfTriggerConfig = import("./scfTriggerConfig").ScfTriggerConfig;
export const ScfTriggerConfig: typeof import("./scfTriggerConfig").ScfTriggerConfig = null as any;
utilities.lazyLoad(exports, ["ScfTriggerConfig"], () => require("./scfTriggerConfig"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupLiteRuleArgs, SecurityGroupLiteRuleState } from "./securityGroupLiteRule";
export type SecurityGroupLiteRule = import("./securityGroupLiteRule").SecurityGroupLiteRule;
export const SecurityGroupLiteRule: typeof import("./securityGroupLiteRule").SecurityGroupLiteRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupLiteRule"], () => require("./securityGroupLiteRule"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SecurityGroupRuleSetArgs, SecurityGroupRuleSetState } from "./securityGroupRuleSet";
export type SecurityGroupRuleSet = import("./securityGroupRuleSet").SecurityGroupRuleSet;
export const SecurityGroupRuleSet: typeof import("./securityGroupRuleSet").SecurityGroupRuleSet = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRuleSet"], () => require("./securityGroupRuleSet"));

export { SesBatchSendEmailArgs, SesBatchSendEmailState } from "./sesBatchSendEmail";
export type SesBatchSendEmail = import("./sesBatchSendEmail").SesBatchSendEmail;
export const SesBatchSendEmail: typeof import("./sesBatchSendEmail").SesBatchSendEmail = null as any;
utilities.lazyLoad(exports, ["SesBatchSendEmail"], () => require("./sesBatchSendEmail"));

export { SesBlackListDeleteArgs, SesBlackListDeleteState } from "./sesBlackListDelete";
export type SesBlackListDelete = import("./sesBlackListDelete").SesBlackListDelete;
export const SesBlackListDelete: typeof import("./sesBlackListDelete").SesBlackListDelete = null as any;
utilities.lazyLoad(exports, ["SesBlackListDelete"], () => require("./sesBlackListDelete"));

export { SesDomainArgs, SesDomainState } from "./sesDomain";
export type SesDomain = import("./sesDomain").SesDomain;
export const SesDomain: typeof import("./sesDomain").SesDomain = null as any;
utilities.lazyLoad(exports, ["SesDomain"], () => require("./sesDomain"));

export { SesEmailAddressArgs, SesEmailAddressState } from "./sesEmailAddress";
export type SesEmailAddress = import("./sesEmailAddress").SesEmailAddress;
export const SesEmailAddress: typeof import("./sesEmailAddress").SesEmailAddress = null as any;
utilities.lazyLoad(exports, ["SesEmailAddress"], () => require("./sesEmailAddress"));

export { SesReceiverArgs, SesReceiverState } from "./sesReceiver";
export type SesReceiver = import("./sesReceiver").SesReceiver;
export const SesReceiver: typeof import("./sesReceiver").SesReceiver = null as any;
utilities.lazyLoad(exports, ["SesReceiver"], () => require("./sesReceiver"));

export { SesSendEmailArgs, SesSendEmailState } from "./sesSendEmail";
export type SesSendEmail = import("./sesSendEmail").SesSendEmail;
export const SesSendEmail: typeof import("./sesSendEmail").SesSendEmail = null as any;
utilities.lazyLoad(exports, ["SesSendEmail"], () => require("./sesSendEmail"));

export { SesTemplateArgs, SesTemplateState } from "./sesTemplate";
export type SesTemplate = import("./sesTemplate").SesTemplate;
export const SesTemplate: typeof import("./sesTemplate").SesTemplate = null as any;
utilities.lazyLoad(exports, ["SesTemplate"], () => require("./sesTemplate"));

export { SesVerifyDomainArgs, SesVerifyDomainState } from "./sesVerifyDomain";
export type SesVerifyDomain = import("./sesVerifyDomain").SesVerifyDomain;
export const SesVerifyDomain: typeof import("./sesVerifyDomain").SesVerifyDomain = null as any;
utilities.lazyLoad(exports, ["SesVerifyDomain"], () => require("./sesVerifyDomain"));

export { SmsSignArgs, SmsSignState } from "./smsSign";
export type SmsSign = import("./smsSign").SmsSign;
export const SmsSign: typeof import("./smsSign").SmsSign = null as any;
utilities.lazyLoad(exports, ["SmsSign"], () => require("./smsSign"));

export { SmsTemplateArgs, SmsTemplateState } from "./smsTemplate";
export type SmsTemplate = import("./smsTemplate").SmsTemplate;
export const SmsTemplate: typeof import("./smsTemplate").SmsTemplate = null as any;
utilities.lazyLoad(exports, ["SmsTemplate"], () => require("./smsTemplate"));

export { SqlserverAccountArgs, SqlserverAccountState } from "./sqlserverAccount";
export type SqlserverAccount = import("./sqlserverAccount").SqlserverAccount;
export const SqlserverAccount: typeof import("./sqlserverAccount").SqlserverAccount = null as any;
utilities.lazyLoad(exports, ["SqlserverAccount"], () => require("./sqlserverAccount"));

export { SqlserverAccountDbAttachmentArgs, SqlserverAccountDbAttachmentState } from "./sqlserverAccountDbAttachment";
export type SqlserverAccountDbAttachment = import("./sqlserverAccountDbAttachment").SqlserverAccountDbAttachment;
export const SqlserverAccountDbAttachment: typeof import("./sqlserverAccountDbAttachment").SqlserverAccountDbAttachment = null as any;
utilities.lazyLoad(exports, ["SqlserverAccountDbAttachment"], () => require("./sqlserverAccountDbAttachment"));

export { SqlserverBasicInstanceArgs, SqlserverBasicInstanceState } from "./sqlserverBasicInstance";
export type SqlserverBasicInstance = import("./sqlserverBasicInstance").SqlserverBasicInstance;
export const SqlserverBasicInstance: typeof import("./sqlserverBasicInstance").SqlserverBasicInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverBasicInstance"], () => require("./sqlserverBasicInstance"));

export { SqlserverBusinessIntelligenceFileArgs, SqlserverBusinessIntelligenceFileState } from "./sqlserverBusinessIntelligenceFile";
export type SqlserverBusinessIntelligenceFile = import("./sqlserverBusinessIntelligenceFile").SqlserverBusinessIntelligenceFile;
export const SqlserverBusinessIntelligenceFile: typeof import("./sqlserverBusinessIntelligenceFile").SqlserverBusinessIntelligenceFile = null as any;
utilities.lazyLoad(exports, ["SqlserverBusinessIntelligenceFile"], () => require("./sqlserverBusinessIntelligenceFile"));

export { SqlserverBusinessIntelligenceInstanceArgs, SqlserverBusinessIntelligenceInstanceState } from "./sqlserverBusinessIntelligenceInstance";
export type SqlserverBusinessIntelligenceInstance = import("./sqlserverBusinessIntelligenceInstance").SqlserverBusinessIntelligenceInstance;
export const SqlserverBusinessIntelligenceInstance: typeof import("./sqlserverBusinessIntelligenceInstance").SqlserverBusinessIntelligenceInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverBusinessIntelligenceInstance"], () => require("./sqlserverBusinessIntelligenceInstance"));

export { SqlserverCompleteExpansionArgs, SqlserverCompleteExpansionState } from "./sqlserverCompleteExpansion";
export type SqlserverCompleteExpansion = import("./sqlserverCompleteExpansion").SqlserverCompleteExpansion;
export const SqlserverCompleteExpansion: typeof import("./sqlserverCompleteExpansion").SqlserverCompleteExpansion = null as any;
utilities.lazyLoad(exports, ["SqlserverCompleteExpansion"], () => require("./sqlserverCompleteExpansion"));

export { SqlserverConfigBackupStrategyArgs, SqlserverConfigBackupStrategyState } from "./sqlserverConfigBackupStrategy";
export type SqlserverConfigBackupStrategy = import("./sqlserverConfigBackupStrategy").SqlserverConfigBackupStrategy;
export const SqlserverConfigBackupStrategy: typeof import("./sqlserverConfigBackupStrategy").SqlserverConfigBackupStrategy = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigBackupStrategy"], () => require("./sqlserverConfigBackupStrategy"));

export { SqlserverConfigDatabaseCdcArgs, SqlserverConfigDatabaseCdcState } from "./sqlserverConfigDatabaseCdc";
export type SqlserverConfigDatabaseCdc = import("./sqlserverConfigDatabaseCdc").SqlserverConfigDatabaseCdc;
export const SqlserverConfigDatabaseCdc: typeof import("./sqlserverConfigDatabaseCdc").SqlserverConfigDatabaseCdc = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigDatabaseCdc"], () => require("./sqlserverConfigDatabaseCdc"));

export { SqlserverConfigDatabaseCtArgs, SqlserverConfigDatabaseCtState } from "./sqlserverConfigDatabaseCt";
export type SqlserverConfigDatabaseCt = import("./sqlserverConfigDatabaseCt").SqlserverConfigDatabaseCt;
export const SqlserverConfigDatabaseCt: typeof import("./sqlserverConfigDatabaseCt").SqlserverConfigDatabaseCt = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigDatabaseCt"], () => require("./sqlserverConfigDatabaseCt"));

export { SqlserverConfigDatabaseMdfArgs, SqlserverConfigDatabaseMdfState } from "./sqlserverConfigDatabaseMdf";
export type SqlserverConfigDatabaseMdf = import("./sqlserverConfigDatabaseMdf").SqlserverConfigDatabaseMdf;
export const SqlserverConfigDatabaseMdf: typeof import("./sqlserverConfigDatabaseMdf").SqlserverConfigDatabaseMdf = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigDatabaseMdf"], () => require("./sqlserverConfigDatabaseMdf"));

export { SqlserverConfigInstanceParamArgs, SqlserverConfigInstanceParamState } from "./sqlserverConfigInstanceParam";
export type SqlserverConfigInstanceParam = import("./sqlserverConfigInstanceParam").SqlserverConfigInstanceParam;
export const SqlserverConfigInstanceParam: typeof import("./sqlserverConfigInstanceParam").SqlserverConfigInstanceParam = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigInstanceParam"], () => require("./sqlserverConfigInstanceParam"));

export { SqlserverConfigInstanceRoGroupArgs, SqlserverConfigInstanceRoGroupState } from "./sqlserverConfigInstanceRoGroup";
export type SqlserverConfigInstanceRoGroup = import("./sqlserverConfigInstanceRoGroup").SqlserverConfigInstanceRoGroup;
export const SqlserverConfigInstanceRoGroup: typeof import("./sqlserverConfigInstanceRoGroup").SqlserverConfigInstanceRoGroup = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigInstanceRoGroup"], () => require("./sqlserverConfigInstanceRoGroup"));

export { SqlserverConfigInstanceSecurityGroupsArgs, SqlserverConfigInstanceSecurityGroupsState } from "./sqlserverConfigInstanceSecurityGroups";
export type SqlserverConfigInstanceSecurityGroups = import("./sqlserverConfigInstanceSecurityGroups").SqlserverConfigInstanceSecurityGroups;
export const SqlserverConfigInstanceSecurityGroups: typeof import("./sqlserverConfigInstanceSecurityGroups").SqlserverConfigInstanceSecurityGroups = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigInstanceSecurityGroups"], () => require("./sqlserverConfigInstanceSecurityGroups"));

export { SqlserverConfigTerminateDbInstanceArgs, SqlserverConfigTerminateDbInstanceState } from "./sqlserverConfigTerminateDbInstance";
export type SqlserverConfigTerminateDbInstance = import("./sqlserverConfigTerminateDbInstance").SqlserverConfigTerminateDbInstance;
export const SqlserverConfigTerminateDbInstance: typeof import("./sqlserverConfigTerminateDbInstance").SqlserverConfigTerminateDbInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverConfigTerminateDbInstance"], () => require("./sqlserverConfigTerminateDbInstance"));

export { SqlserverDatabaseTdeArgs, SqlserverDatabaseTdeState } from "./sqlserverDatabaseTde";
export type SqlserverDatabaseTde = import("./sqlserverDatabaseTde").SqlserverDatabaseTde;
export const SqlserverDatabaseTde: typeof import("./sqlserverDatabaseTde").SqlserverDatabaseTde = null as any;
utilities.lazyLoad(exports, ["SqlserverDatabaseTde"], () => require("./sqlserverDatabaseTde"));

export { SqlserverDbArgs, SqlserverDbState } from "./sqlserverDb";
export type SqlserverDb = import("./sqlserverDb").SqlserverDb;
export const SqlserverDb: typeof import("./sqlserverDb").SqlserverDb = null as any;
utilities.lazyLoad(exports, ["SqlserverDb"], () => require("./sqlserverDb"));

export { SqlserverFullBackupMigrationArgs, SqlserverFullBackupMigrationState } from "./sqlserverFullBackupMigration";
export type SqlserverFullBackupMigration = import("./sqlserverFullBackupMigration").SqlserverFullBackupMigration;
export const SqlserverFullBackupMigration: typeof import("./sqlserverFullBackupMigration").SqlserverFullBackupMigration = null as any;
utilities.lazyLoad(exports, ["SqlserverFullBackupMigration"], () => require("./sqlserverFullBackupMigration"));

export { SqlserverGeneralBackupArgs, SqlserverGeneralBackupState } from "./sqlserverGeneralBackup";
export type SqlserverGeneralBackup = import("./sqlserverGeneralBackup").SqlserverGeneralBackup;
export const SqlserverGeneralBackup: typeof import("./sqlserverGeneralBackup").SqlserverGeneralBackup = null as any;
utilities.lazyLoad(exports, ["SqlserverGeneralBackup"], () => require("./sqlserverGeneralBackup"));

export { SqlserverGeneralCloneArgs, SqlserverGeneralCloneState } from "./sqlserverGeneralClone";
export type SqlserverGeneralClone = import("./sqlserverGeneralClone").SqlserverGeneralClone;
export const SqlserverGeneralClone: typeof import("./sqlserverGeneralClone").SqlserverGeneralClone = null as any;
utilities.lazyLoad(exports, ["SqlserverGeneralClone"], () => require("./sqlserverGeneralClone"));

export { SqlserverGeneralCloudInstanceArgs, SqlserverGeneralCloudInstanceState } from "./sqlserverGeneralCloudInstance";
export type SqlserverGeneralCloudInstance = import("./sqlserverGeneralCloudInstance").SqlserverGeneralCloudInstance;
export const SqlserverGeneralCloudInstance: typeof import("./sqlserverGeneralCloudInstance").SqlserverGeneralCloudInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverGeneralCloudInstance"], () => require("./sqlserverGeneralCloudInstance"));

export { SqlserverGeneralCloudRoInstanceArgs, SqlserverGeneralCloudRoInstanceState } from "./sqlserverGeneralCloudRoInstance";
export type SqlserverGeneralCloudRoInstance = import("./sqlserverGeneralCloudRoInstance").SqlserverGeneralCloudRoInstance;
export const SqlserverGeneralCloudRoInstance: typeof import("./sqlserverGeneralCloudRoInstance").SqlserverGeneralCloudRoInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverGeneralCloudRoInstance"], () => require("./sqlserverGeneralCloudRoInstance"));

export { SqlserverGeneralCommunicationArgs, SqlserverGeneralCommunicationState } from "./sqlserverGeneralCommunication";
export type SqlserverGeneralCommunication = import("./sqlserverGeneralCommunication").SqlserverGeneralCommunication;
export const SqlserverGeneralCommunication: typeof import("./sqlserverGeneralCommunication").SqlserverGeneralCommunication = null as any;
utilities.lazyLoad(exports, ["SqlserverGeneralCommunication"], () => require("./sqlserverGeneralCommunication"));

export { SqlserverIncreBackupMigrationArgs, SqlserverIncreBackupMigrationState } from "./sqlserverIncreBackupMigration";
export type SqlserverIncreBackupMigration = import("./sqlserverIncreBackupMigration").SqlserverIncreBackupMigration;
export const SqlserverIncreBackupMigration: typeof import("./sqlserverIncreBackupMigration").SqlserverIncreBackupMigration = null as any;
utilities.lazyLoad(exports, ["SqlserverIncreBackupMigration"], () => require("./sqlserverIncreBackupMigration"));

export { SqlserverInstanceArgs, SqlserverInstanceState } from "./sqlserverInstance";
export type SqlserverInstance = import("./sqlserverInstance").SqlserverInstance;
export const SqlserverInstance: typeof import("./sqlserverInstance").SqlserverInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverInstance"], () => require("./sqlserverInstance"));

export { SqlserverInstanceSslArgs, SqlserverInstanceSslState } from "./sqlserverInstanceSsl";
export type SqlserverInstanceSsl = import("./sqlserverInstanceSsl").SqlserverInstanceSsl;
export const SqlserverInstanceSsl: typeof import("./sqlserverInstanceSsl").SqlserverInstanceSsl = null as any;
utilities.lazyLoad(exports, ["SqlserverInstanceSsl"], () => require("./sqlserverInstanceSsl"));

export { SqlserverInstanceTdeArgs, SqlserverInstanceTdeState } from "./sqlserverInstanceTde";
export type SqlserverInstanceTde = import("./sqlserverInstanceTde").SqlserverInstanceTde;
export const SqlserverInstanceTde: typeof import("./sqlserverInstanceTde").SqlserverInstanceTde = null as any;
utilities.lazyLoad(exports, ["SqlserverInstanceTde"], () => require("./sqlserverInstanceTde"));

export { SqlserverMigrationArgs, SqlserverMigrationState } from "./sqlserverMigration";
export type SqlserverMigration = import("./sqlserverMigration").SqlserverMigration;
export const SqlserverMigration: typeof import("./sqlserverMigration").SqlserverMigration = null as any;
utilities.lazyLoad(exports, ["SqlserverMigration"], () => require("./sqlserverMigration"));

export { SqlserverPublishSubscribeArgs, SqlserverPublishSubscribeState } from "./sqlserverPublishSubscribe";
export type SqlserverPublishSubscribe = import("./sqlserverPublishSubscribe").SqlserverPublishSubscribe;
export const SqlserverPublishSubscribe: typeof import("./sqlserverPublishSubscribe").SqlserverPublishSubscribe = null as any;
utilities.lazyLoad(exports, ["SqlserverPublishSubscribe"], () => require("./sqlserverPublishSubscribe"));

export { SqlserverReadonlyInstanceArgs, SqlserverReadonlyInstanceState } from "./sqlserverReadonlyInstance";
export type SqlserverReadonlyInstance = import("./sqlserverReadonlyInstance").SqlserverReadonlyInstance;
export const SqlserverReadonlyInstance: typeof import("./sqlserverReadonlyInstance").SqlserverReadonlyInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverReadonlyInstance"], () => require("./sqlserverReadonlyInstance"));

export { SqlserverRenewDbInstanceArgs, SqlserverRenewDbInstanceState } from "./sqlserverRenewDbInstance";
export type SqlserverRenewDbInstance = import("./sqlserverRenewDbInstance").SqlserverRenewDbInstance;
export const SqlserverRenewDbInstance: typeof import("./sqlserverRenewDbInstance").SqlserverRenewDbInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverRenewDbInstance"], () => require("./sqlserverRenewDbInstance"));

export { SqlserverRenewPostpaidDbInstanceArgs, SqlserverRenewPostpaidDbInstanceState } from "./sqlserverRenewPostpaidDbInstance";
export type SqlserverRenewPostpaidDbInstance = import("./sqlserverRenewPostpaidDbInstance").SqlserverRenewPostpaidDbInstance;
export const SqlserverRenewPostpaidDbInstance: typeof import("./sqlserverRenewPostpaidDbInstance").SqlserverRenewPostpaidDbInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverRenewPostpaidDbInstance"], () => require("./sqlserverRenewPostpaidDbInstance"));

export { SqlserverRestartDbInstanceArgs, SqlserverRestartDbInstanceState } from "./sqlserverRestartDbInstance";
export type SqlserverRestartDbInstance = import("./sqlserverRestartDbInstance").SqlserverRestartDbInstance;
export const SqlserverRestartDbInstance: typeof import("./sqlserverRestartDbInstance").SqlserverRestartDbInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverRestartDbInstance"], () => require("./sqlserverRestartDbInstance"));

export { SqlserverRestoreInstanceArgs, SqlserverRestoreInstanceState } from "./sqlserverRestoreInstance";
export type SqlserverRestoreInstance = import("./sqlserverRestoreInstance").SqlserverRestoreInstance;
export const SqlserverRestoreInstance: typeof import("./sqlserverRestoreInstance").SqlserverRestoreInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverRestoreInstance"], () => require("./sqlserverRestoreInstance"));

export { SqlserverRollbackInstanceArgs, SqlserverRollbackInstanceState } from "./sqlserverRollbackInstance";
export type SqlserverRollbackInstance = import("./sqlserverRollbackInstance").SqlserverRollbackInstance;
export const SqlserverRollbackInstance: typeof import("./sqlserverRollbackInstance").SqlserverRollbackInstance = null as any;
utilities.lazyLoad(exports, ["SqlserverRollbackInstance"], () => require("./sqlserverRollbackInstance"));

export { SqlserverStartBackupFullMigrationArgs, SqlserverStartBackupFullMigrationState } from "./sqlserverStartBackupFullMigration";
export type SqlserverStartBackupFullMigration = import("./sqlserverStartBackupFullMigration").SqlserverStartBackupFullMigration;
export const SqlserverStartBackupFullMigration: typeof import("./sqlserverStartBackupFullMigration").SqlserverStartBackupFullMigration = null as any;
utilities.lazyLoad(exports, ["SqlserverStartBackupFullMigration"], () => require("./sqlserverStartBackupFullMigration"));

export { SqlserverStartBackupIncrementalMigrationArgs, SqlserverStartBackupIncrementalMigrationState } from "./sqlserverStartBackupIncrementalMigration";
export type SqlserverStartBackupIncrementalMigration = import("./sqlserverStartBackupIncrementalMigration").SqlserverStartBackupIncrementalMigration;
export const SqlserverStartBackupIncrementalMigration: typeof import("./sqlserverStartBackupIncrementalMigration").SqlserverStartBackupIncrementalMigration = null as any;
utilities.lazyLoad(exports, ["SqlserverStartBackupIncrementalMigration"], () => require("./sqlserverStartBackupIncrementalMigration"));

export { SqlserverStartXeventArgs, SqlserverStartXeventState } from "./sqlserverStartXevent";
export type SqlserverStartXevent = import("./sqlserverStartXevent").SqlserverStartXevent;
export const SqlserverStartXevent: typeof import("./sqlserverStartXevent").SqlserverStartXevent = null as any;
utilities.lazyLoad(exports, ["SqlserverStartXevent"], () => require("./sqlserverStartXevent"));

export { SslCertificateArgs, SslCertificateState } from "./sslCertificate";
export type SslCertificate = import("./sslCertificate").SslCertificate;
export const SslCertificate: typeof import("./sslCertificate").SslCertificate = null as any;
utilities.lazyLoad(exports, ["SslCertificate"], () => require("./sslCertificate"));

export { SslCheckCertificateChainOperationArgs, SslCheckCertificateChainOperationState } from "./sslCheckCertificateChainOperation";
export type SslCheckCertificateChainOperation = import("./sslCheckCertificateChainOperation").SslCheckCertificateChainOperation;
export const SslCheckCertificateChainOperation: typeof import("./sslCheckCertificateChainOperation").SslCheckCertificateChainOperation = null as any;
utilities.lazyLoad(exports, ["SslCheckCertificateChainOperation"], () => require("./sslCheckCertificateChainOperation"));

export { SslCompleteCertificateOperationArgs, SslCompleteCertificateOperationState } from "./sslCompleteCertificateOperation";
export type SslCompleteCertificateOperation = import("./sslCompleteCertificateOperation").SslCompleteCertificateOperation;
export const SslCompleteCertificateOperation: typeof import("./sslCompleteCertificateOperation").SslCompleteCertificateOperation = null as any;
utilities.lazyLoad(exports, ["SslCompleteCertificateOperation"], () => require("./sslCompleteCertificateOperation"));

export { SslDeployCertificateInstanceOperationArgs, SslDeployCertificateInstanceOperationState } from "./sslDeployCertificateInstanceOperation";
export type SslDeployCertificateInstanceOperation = import("./sslDeployCertificateInstanceOperation").SslDeployCertificateInstanceOperation;
export const SslDeployCertificateInstanceOperation: typeof import("./sslDeployCertificateInstanceOperation").SslDeployCertificateInstanceOperation = null as any;
utilities.lazyLoad(exports, ["SslDeployCertificateInstanceOperation"], () => require("./sslDeployCertificateInstanceOperation"));

export { SslDeployCertificateRecordRetryOperationArgs, SslDeployCertificateRecordRetryOperationState } from "./sslDeployCertificateRecordRetryOperation";
export type SslDeployCertificateRecordRetryOperation = import("./sslDeployCertificateRecordRetryOperation").SslDeployCertificateRecordRetryOperation;
export const SslDeployCertificateRecordRetryOperation: typeof import("./sslDeployCertificateRecordRetryOperation").SslDeployCertificateRecordRetryOperation = null as any;
utilities.lazyLoad(exports, ["SslDeployCertificateRecordRetryOperation"], () => require("./sslDeployCertificateRecordRetryOperation"));

export { SslDeployCertificateRecordRollbackOperationArgs, SslDeployCertificateRecordRollbackOperationState } from "./sslDeployCertificateRecordRollbackOperation";
export type SslDeployCertificateRecordRollbackOperation = import("./sslDeployCertificateRecordRollbackOperation").SslDeployCertificateRecordRollbackOperation;
export const SslDeployCertificateRecordRollbackOperation: typeof import("./sslDeployCertificateRecordRollbackOperation").SslDeployCertificateRecordRollbackOperation = null as any;
utilities.lazyLoad(exports, ["SslDeployCertificateRecordRollbackOperation"], () => require("./sslDeployCertificateRecordRollbackOperation"));

export { SslDownloadCertificateOperationArgs, SslDownloadCertificateOperationState } from "./sslDownloadCertificateOperation";
export type SslDownloadCertificateOperation = import("./sslDownloadCertificateOperation").SslDownloadCertificateOperation;
export const SslDownloadCertificateOperation: typeof import("./sslDownloadCertificateOperation").SslDownloadCertificateOperation = null as any;
utilities.lazyLoad(exports, ["SslDownloadCertificateOperation"], () => require("./sslDownloadCertificateOperation"));

export { SslFreeCertificateArgs, SslFreeCertificateState } from "./sslFreeCertificate";
export type SslFreeCertificate = import("./sslFreeCertificate").SslFreeCertificate;
export const SslFreeCertificate: typeof import("./sslFreeCertificate").SslFreeCertificate = null as any;
utilities.lazyLoad(exports, ["SslFreeCertificate"], () => require("./sslFreeCertificate"));

export { SslPayCertificateArgs, SslPayCertificateState } from "./sslPayCertificate";
export type SslPayCertificate = import("./sslPayCertificate").SslPayCertificate;
export const SslPayCertificate: typeof import("./sslPayCertificate").SslPayCertificate = null as any;
utilities.lazyLoad(exports, ["SslPayCertificate"], () => require("./sslPayCertificate"));

export { SslReplaceCertificateOperationArgs, SslReplaceCertificateOperationState } from "./sslReplaceCertificateOperation";
export type SslReplaceCertificateOperation = import("./sslReplaceCertificateOperation").SslReplaceCertificateOperation;
export const SslReplaceCertificateOperation: typeof import("./sslReplaceCertificateOperation").SslReplaceCertificateOperation = null as any;
utilities.lazyLoad(exports, ["SslReplaceCertificateOperation"], () => require("./sslReplaceCertificateOperation"));

export { SslRevokeCertificateOperationArgs, SslRevokeCertificateOperationState } from "./sslRevokeCertificateOperation";
export type SslRevokeCertificateOperation = import("./sslRevokeCertificateOperation").SslRevokeCertificateOperation;
export const SslRevokeCertificateOperation: typeof import("./sslRevokeCertificateOperation").SslRevokeCertificateOperation = null as any;
utilities.lazyLoad(exports, ["SslRevokeCertificateOperation"], () => require("./sslRevokeCertificateOperation"));

export { SslUpdateCertificateInstanceOperationArgs, SslUpdateCertificateInstanceOperationState } from "./sslUpdateCertificateInstanceOperation";
export type SslUpdateCertificateInstanceOperation = import("./sslUpdateCertificateInstanceOperation").SslUpdateCertificateInstanceOperation;
export const SslUpdateCertificateInstanceOperation: typeof import("./sslUpdateCertificateInstanceOperation").SslUpdateCertificateInstanceOperation = null as any;
utilities.lazyLoad(exports, ["SslUpdateCertificateInstanceOperation"], () => require("./sslUpdateCertificateInstanceOperation"));

export { SslUpdateCertificateRecordRetryOperationArgs, SslUpdateCertificateRecordRetryOperationState } from "./sslUpdateCertificateRecordRetryOperation";
export type SslUpdateCertificateRecordRetryOperation = import("./sslUpdateCertificateRecordRetryOperation").SslUpdateCertificateRecordRetryOperation;
export const SslUpdateCertificateRecordRetryOperation: typeof import("./sslUpdateCertificateRecordRetryOperation").SslUpdateCertificateRecordRetryOperation = null as any;
utilities.lazyLoad(exports, ["SslUpdateCertificateRecordRetryOperation"], () => require("./sslUpdateCertificateRecordRetryOperation"));

export { SslUpdateCertificateRecordRollbackOperationArgs, SslUpdateCertificateRecordRollbackOperationState } from "./sslUpdateCertificateRecordRollbackOperation";
export type SslUpdateCertificateRecordRollbackOperation = import("./sslUpdateCertificateRecordRollbackOperation").SslUpdateCertificateRecordRollbackOperation;
export const SslUpdateCertificateRecordRollbackOperation: typeof import("./sslUpdateCertificateRecordRollbackOperation").SslUpdateCertificateRecordRollbackOperation = null as any;
utilities.lazyLoad(exports, ["SslUpdateCertificateRecordRollbackOperation"], () => require("./sslUpdateCertificateRecordRollbackOperation"));

export { SslUploadRevokeLetterOperationArgs, SslUploadRevokeLetterOperationState } from "./sslUploadRevokeLetterOperation";
export type SslUploadRevokeLetterOperation = import("./sslUploadRevokeLetterOperation").SslUploadRevokeLetterOperation;
export const SslUploadRevokeLetterOperation: typeof import("./sslUploadRevokeLetterOperation").SslUploadRevokeLetterOperation = null as any;
utilities.lazyLoad(exports, ["SslUploadRevokeLetterOperation"], () => require("./sslUploadRevokeLetterOperation"));

export { SsmProductSecretArgs, SsmProductSecretState } from "./ssmProductSecret";
export type SsmProductSecret = import("./ssmProductSecret").SsmProductSecret;
export const SsmProductSecret: typeof import("./ssmProductSecret").SsmProductSecret = null as any;
utilities.lazyLoad(exports, ["SsmProductSecret"], () => require("./ssmProductSecret"));

export { SsmRotateProductSecretArgs, SsmRotateProductSecretState } from "./ssmRotateProductSecret";
export type SsmRotateProductSecret = import("./ssmRotateProductSecret").SsmRotateProductSecret;
export const SsmRotateProductSecret: typeof import("./ssmRotateProductSecret").SsmRotateProductSecret = null as any;
utilities.lazyLoad(exports, ["SsmRotateProductSecret"], () => require("./ssmRotateProductSecret"));

export { SsmSecretArgs, SsmSecretState } from "./ssmSecret";
export type SsmSecret = import("./ssmSecret").SsmSecret;
export const SsmSecret: typeof import("./ssmSecret").SsmSecret = null as any;
utilities.lazyLoad(exports, ["SsmSecret"], () => require("./ssmSecret"));

export { SsmSecretVersionArgs, SsmSecretVersionState } from "./ssmSecretVersion";
export type SsmSecretVersion = import("./ssmSecretVersion").SsmSecretVersion;
export const SsmSecretVersion: typeof import("./ssmSecretVersion").SsmSecretVersion = null as any;
utilities.lazyLoad(exports, ["SsmSecretVersion"], () => require("./ssmSecretVersion"));

export { SsmSshKeyPairSecretArgs, SsmSshKeyPairSecretState } from "./ssmSshKeyPairSecret";
export type SsmSshKeyPairSecret = import("./ssmSshKeyPairSecret").SsmSshKeyPairSecret;
export const SsmSshKeyPairSecret: typeof import("./ssmSshKeyPairSecret").SsmSshKeyPairSecret = null as any;
utilities.lazyLoad(exports, ["SsmSshKeyPairSecret"], () => require("./ssmSshKeyPairSecret"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagAttachmentArgs, TagAttachmentState } from "./tagAttachment";
export type TagAttachment = import("./tagAttachment").TagAttachment;
export const TagAttachment: typeof import("./tagAttachment").TagAttachment = null as any;
utilities.lazyLoad(exports, ["TagAttachment"], () => require("./tagAttachment"));

export { TatCommandArgs, TatCommandState } from "./tatCommand";
export type TatCommand = import("./tatCommand").TatCommand;
export const TatCommand: typeof import("./tatCommand").TatCommand = null as any;
utilities.lazyLoad(exports, ["TatCommand"], () => require("./tatCommand"));

export { TatInvocationCommandAttachmentArgs, TatInvocationCommandAttachmentState } from "./tatInvocationCommandAttachment";
export type TatInvocationCommandAttachment = import("./tatInvocationCommandAttachment").TatInvocationCommandAttachment;
export const TatInvocationCommandAttachment: typeof import("./tatInvocationCommandAttachment").TatInvocationCommandAttachment = null as any;
utilities.lazyLoad(exports, ["TatInvocationCommandAttachment"], () => require("./tatInvocationCommandAttachment"));

export { TatInvocationInvokeAttachmentArgs, TatInvocationInvokeAttachmentState } from "./tatInvocationInvokeAttachment";
export type TatInvocationInvokeAttachment = import("./tatInvocationInvokeAttachment").TatInvocationInvokeAttachment;
export const TatInvocationInvokeAttachment: typeof import("./tatInvocationInvokeAttachment").TatInvocationInvokeAttachment = null as any;
utilities.lazyLoad(exports, ["TatInvocationInvokeAttachment"], () => require("./tatInvocationInvokeAttachment"));

export { TatInvokerArgs, TatInvokerState } from "./tatInvoker";
export type TatInvoker = import("./tatInvoker").TatInvoker;
export const TatInvoker: typeof import("./tatInvoker").TatInvoker = null as any;
utilities.lazyLoad(exports, ["TatInvoker"], () => require("./tatInvoker"));

export { TatInvokerConfigArgs, TatInvokerConfigState } from "./tatInvokerConfig";
export type TatInvokerConfig = import("./tatInvokerConfig").TatInvokerConfig;
export const TatInvokerConfig: typeof import("./tatInvokerConfig").TatInvokerConfig = null as any;
utilities.lazyLoad(exports, ["TatInvokerConfig"], () => require("./tatInvokerConfig"));

export { TcaplusClusterArgs, TcaplusClusterState } from "./tcaplusCluster";
export type TcaplusCluster = import("./tcaplusCluster").TcaplusCluster;
export const TcaplusCluster: typeof import("./tcaplusCluster").TcaplusCluster = null as any;
utilities.lazyLoad(exports, ["TcaplusCluster"], () => require("./tcaplusCluster"));

export { TcaplusIdlArgs, TcaplusIdlState } from "./tcaplusIdl";
export type TcaplusIdl = import("./tcaplusIdl").TcaplusIdl;
export const TcaplusIdl: typeof import("./tcaplusIdl").TcaplusIdl = null as any;
utilities.lazyLoad(exports, ["TcaplusIdl"], () => require("./tcaplusIdl"));

export { TcaplusTableArgs, TcaplusTableState } from "./tcaplusTable";
export type TcaplusTable = import("./tcaplusTable").TcaplusTable;
export const TcaplusTable: typeof import("./tcaplusTable").TcaplusTable = null as any;
utilities.lazyLoad(exports, ["TcaplusTable"], () => require("./tcaplusTable"));

export { TcaplusTablegroupArgs, TcaplusTablegroupState } from "./tcaplusTablegroup";
export type TcaplusTablegroup = import("./tcaplusTablegroup").TcaplusTablegroup;
export const TcaplusTablegroup: typeof import("./tcaplusTablegroup").TcaplusTablegroup = null as any;
utilities.lazyLoad(exports, ["TcaplusTablegroup"], () => require("./tcaplusTablegroup"));

export { TcmAccessLogConfigArgs, TcmAccessLogConfigState } from "./tcmAccessLogConfig";
export type TcmAccessLogConfig = import("./tcmAccessLogConfig").TcmAccessLogConfig;
export const TcmAccessLogConfig: typeof import("./tcmAccessLogConfig").TcmAccessLogConfig = null as any;
utilities.lazyLoad(exports, ["TcmAccessLogConfig"], () => require("./tcmAccessLogConfig"));

export { TcmClusterAttachmentArgs, TcmClusterAttachmentState } from "./tcmClusterAttachment";
export type TcmClusterAttachment = import("./tcmClusterAttachment").TcmClusterAttachment;
export const TcmClusterAttachment: typeof import("./tcmClusterAttachment").TcmClusterAttachment = null as any;
utilities.lazyLoad(exports, ["TcmClusterAttachment"], () => require("./tcmClusterAttachment"));

export { TcmMeshArgs, TcmMeshState } from "./tcmMesh";
export type TcmMesh = import("./tcmMesh").TcmMesh;
export const TcmMesh: typeof import("./tcmMesh").TcmMesh = null as any;
utilities.lazyLoad(exports, ["TcmMesh"], () => require("./tcmMesh"));

export { TcmPrometheusAttachmentArgs, TcmPrometheusAttachmentState } from "./tcmPrometheusAttachment";
export type TcmPrometheusAttachment = import("./tcmPrometheusAttachment").TcmPrometheusAttachment;
export const TcmPrometheusAttachment: typeof import("./tcmPrometheusAttachment").TcmPrometheusAttachment = null as any;
utilities.lazyLoad(exports, ["TcmPrometheusAttachment"], () => require("./tcmPrometheusAttachment"));

export { TcmTracingConfigArgs, TcmTracingConfigState } from "./tcmTracingConfig";
export type TcmTracingConfig = import("./tcmTracingConfig").TcmTracingConfig;
export const TcmTracingConfig: typeof import("./tcmTracingConfig").TcmTracingConfig = null as any;
utilities.lazyLoad(exports, ["TcmTracingConfig"], () => require("./tcmTracingConfig"));

export { TcmqQueueArgs, TcmqQueueState } from "./tcmqQueue";
export type TcmqQueue = import("./tcmqQueue").TcmqQueue;
export const TcmqQueue: typeof import("./tcmqQueue").TcmqQueue = null as any;
utilities.lazyLoad(exports, ["TcmqQueue"], () => require("./tcmqQueue"));

export { TcmqSubscribeArgs, TcmqSubscribeState } from "./tcmqSubscribe";
export type TcmqSubscribe = import("./tcmqSubscribe").TcmqSubscribe;
export const TcmqSubscribe: typeof import("./tcmqSubscribe").TcmqSubscribe = null as any;
utilities.lazyLoad(exports, ["TcmqSubscribe"], () => require("./tcmqSubscribe"));

export { TcmqTopicArgs, TcmqTopicState } from "./tcmqTopic";
export type TcmqTopic = import("./tcmqTopic").TcmqTopic;
export const TcmqTopic: typeof import("./tcmqTopic").TcmqTopic = null as any;
utilities.lazyLoad(exports, ["TcmqTopic"], () => require("./tcmqTopic"));

export { TcrCreateImageSignatureOperationArgs, TcrCreateImageSignatureOperationState } from "./tcrCreateImageSignatureOperation";
export type TcrCreateImageSignatureOperation = import("./tcrCreateImageSignatureOperation").TcrCreateImageSignatureOperation;
export const TcrCreateImageSignatureOperation: typeof import("./tcrCreateImageSignatureOperation").TcrCreateImageSignatureOperation = null as any;
utilities.lazyLoad(exports, ["TcrCreateImageSignatureOperation"], () => require("./tcrCreateImageSignatureOperation"));

export { TcrCustomizedDomainArgs, TcrCustomizedDomainState } from "./tcrCustomizedDomain";
export type TcrCustomizedDomain = import("./tcrCustomizedDomain").TcrCustomizedDomain;
export const TcrCustomizedDomain: typeof import("./tcrCustomizedDomain").TcrCustomizedDomain = null as any;
utilities.lazyLoad(exports, ["TcrCustomizedDomain"], () => require("./tcrCustomizedDomain"));

export { TcrDeleteImageOperationArgs, TcrDeleteImageOperationState } from "./tcrDeleteImageOperation";
export type TcrDeleteImageOperation = import("./tcrDeleteImageOperation").TcrDeleteImageOperation;
export const TcrDeleteImageOperation: typeof import("./tcrDeleteImageOperation").TcrDeleteImageOperation = null as any;
utilities.lazyLoad(exports, ["TcrDeleteImageOperation"], () => require("./tcrDeleteImageOperation"));

export { TcrImmutableTagRuleArgs, TcrImmutableTagRuleState } from "./tcrImmutableTagRule";
export type TcrImmutableTagRule = import("./tcrImmutableTagRule").TcrImmutableTagRule;
export const TcrImmutableTagRule: typeof import("./tcrImmutableTagRule").TcrImmutableTagRule = null as any;
utilities.lazyLoad(exports, ["TcrImmutableTagRule"], () => require("./tcrImmutableTagRule"));

export { TcrInstanceArgs, TcrInstanceState } from "./tcrInstance";
export type TcrInstance = import("./tcrInstance").TcrInstance;
export const TcrInstance: typeof import("./tcrInstance").TcrInstance = null as any;
utilities.lazyLoad(exports, ["TcrInstance"], () => require("./tcrInstance"));

export { TcrManageReplicationOperationArgs, TcrManageReplicationOperationState } from "./tcrManageReplicationOperation";
export type TcrManageReplicationOperation = import("./tcrManageReplicationOperation").TcrManageReplicationOperation;
export const TcrManageReplicationOperation: typeof import("./tcrManageReplicationOperation").TcrManageReplicationOperation = null as any;
utilities.lazyLoad(exports, ["TcrManageReplicationOperation"], () => require("./tcrManageReplicationOperation"));

export { TcrNamespaceArgs, TcrNamespaceState } from "./tcrNamespace";
export type TcrNamespace = import("./tcrNamespace").TcrNamespace;
export const TcrNamespace: typeof import("./tcrNamespace").TcrNamespace = null as any;
utilities.lazyLoad(exports, ["TcrNamespace"], () => require("./tcrNamespace"));

export { TcrRepositoryArgs, TcrRepositoryState } from "./tcrRepository";
export type TcrRepository = import("./tcrRepository").TcrRepository;
export const TcrRepository: typeof import("./tcrRepository").TcrRepository = null as any;
utilities.lazyLoad(exports, ["TcrRepository"], () => require("./tcrRepository"));

export { TcrServiceAccountArgs, TcrServiceAccountState } from "./tcrServiceAccount";
export type TcrServiceAccount = import("./tcrServiceAccount").TcrServiceAccount;
export const TcrServiceAccount: typeof import("./tcrServiceAccount").TcrServiceAccount = null as any;
utilities.lazyLoad(exports, ["TcrServiceAccount"], () => require("./tcrServiceAccount"));

export { TcrTagRetentionExecutionConfigArgs, TcrTagRetentionExecutionConfigState } from "./tcrTagRetentionExecutionConfig";
export type TcrTagRetentionExecutionConfig = import("./tcrTagRetentionExecutionConfig").TcrTagRetentionExecutionConfig;
export const TcrTagRetentionExecutionConfig: typeof import("./tcrTagRetentionExecutionConfig").TcrTagRetentionExecutionConfig = null as any;
utilities.lazyLoad(exports, ["TcrTagRetentionExecutionConfig"], () => require("./tcrTagRetentionExecutionConfig"));

export { TcrTagRetentionRuleArgs, TcrTagRetentionRuleState } from "./tcrTagRetentionRule";
export type TcrTagRetentionRule = import("./tcrTagRetentionRule").TcrTagRetentionRule;
export const TcrTagRetentionRule: typeof import("./tcrTagRetentionRule").TcrTagRetentionRule = null as any;
utilities.lazyLoad(exports, ["TcrTagRetentionRule"], () => require("./tcrTagRetentionRule"));

export { TcrTokenArgs, TcrTokenState } from "./tcrToken";
export type TcrToken = import("./tcrToken").TcrToken;
export const TcrToken: typeof import("./tcrToken").TcrToken = null as any;
utilities.lazyLoad(exports, ["TcrToken"], () => require("./tcrToken"));

export { TcrVpcAttachmentArgs, TcrVpcAttachmentState } from "./tcrVpcAttachment";
export type TcrVpcAttachment = import("./tcrVpcAttachment").TcrVpcAttachment;
export const TcrVpcAttachment: typeof import("./tcrVpcAttachment").TcrVpcAttachment = null as any;
utilities.lazyLoad(exports, ["TcrVpcAttachment"], () => require("./tcrVpcAttachment"));

export { TcrWebhookTriggerArgs, TcrWebhookTriggerState } from "./tcrWebhookTrigger";
export type TcrWebhookTrigger = import("./tcrWebhookTrigger").TcrWebhookTrigger;
export const TcrWebhookTrigger: typeof import("./tcrWebhookTrigger").TcrWebhookTrigger = null as any;
utilities.lazyLoad(exports, ["TcrWebhookTrigger"], () => require("./tcrWebhookTrigger"));

export { TdcpgClusterArgs, TdcpgClusterState } from "./tdcpgCluster";
export type TdcpgCluster = import("./tdcpgCluster").TdcpgCluster;
export const TdcpgCluster: typeof import("./tdcpgCluster").TdcpgCluster = null as any;
utilities.lazyLoad(exports, ["TdcpgCluster"], () => require("./tdcpgCluster"));

export { TdcpgInstanceArgs, TdcpgInstanceState } from "./tdcpgInstance";
export type TdcpgInstance = import("./tdcpgInstance").TdcpgInstance;
export const TdcpgInstance: typeof import("./tdcpgInstance").TdcpgInstance = null as any;
utilities.lazyLoad(exports, ["TdcpgInstance"], () => require("./tdcpgInstance"));

export { TdmqInstanceArgs, TdmqInstanceState } from "./tdmqInstance";
export type TdmqInstance = import("./tdmqInstance").TdmqInstance;
export const TdmqInstance: typeof import("./tdmqInstance").TdmqInstance = null as any;
utilities.lazyLoad(exports, ["TdmqInstance"], () => require("./tdmqInstance"));

export { TdmqNamespaceArgs, TdmqNamespaceState } from "./tdmqNamespace";
export type TdmqNamespace = import("./tdmqNamespace").TdmqNamespace;
export const TdmqNamespace: typeof import("./tdmqNamespace").TdmqNamespace = null as any;
utilities.lazyLoad(exports, ["TdmqNamespace"], () => require("./tdmqNamespace"));

export { TdmqNamespaceRoleAttachmentArgs, TdmqNamespaceRoleAttachmentState } from "./tdmqNamespaceRoleAttachment";
export type TdmqNamespaceRoleAttachment = import("./tdmqNamespaceRoleAttachment").TdmqNamespaceRoleAttachment;
export const TdmqNamespaceRoleAttachment: typeof import("./tdmqNamespaceRoleAttachment").TdmqNamespaceRoleAttachment = null as any;
utilities.lazyLoad(exports, ["TdmqNamespaceRoleAttachment"], () => require("./tdmqNamespaceRoleAttachment"));

export { TdmqProfessionalClusterArgs, TdmqProfessionalClusterState } from "./tdmqProfessionalCluster";
export type TdmqProfessionalCluster = import("./tdmqProfessionalCluster").TdmqProfessionalCluster;
export const TdmqProfessionalCluster: typeof import("./tdmqProfessionalCluster").TdmqProfessionalCluster = null as any;
utilities.lazyLoad(exports, ["TdmqProfessionalCluster"], () => require("./tdmqProfessionalCluster"));

export { TdmqRabbitmqUserArgs, TdmqRabbitmqUserState } from "./tdmqRabbitmqUser";
export type TdmqRabbitmqUser = import("./tdmqRabbitmqUser").TdmqRabbitmqUser;
export const TdmqRabbitmqUser: typeof import("./tdmqRabbitmqUser").TdmqRabbitmqUser = null as any;
utilities.lazyLoad(exports, ["TdmqRabbitmqUser"], () => require("./tdmqRabbitmqUser"));

export { TdmqRabbitmqVipInstanceArgs, TdmqRabbitmqVipInstanceState } from "./tdmqRabbitmqVipInstance";
export type TdmqRabbitmqVipInstance = import("./tdmqRabbitmqVipInstance").TdmqRabbitmqVipInstance;
export const TdmqRabbitmqVipInstance: typeof import("./tdmqRabbitmqVipInstance").TdmqRabbitmqVipInstance = null as any;
utilities.lazyLoad(exports, ["TdmqRabbitmqVipInstance"], () => require("./tdmqRabbitmqVipInstance"));

export { TdmqRabbitmqVirtualHostArgs, TdmqRabbitmqVirtualHostState } from "./tdmqRabbitmqVirtualHost";
export type TdmqRabbitmqVirtualHost = import("./tdmqRabbitmqVirtualHost").TdmqRabbitmqVirtualHost;
export const TdmqRabbitmqVirtualHost: typeof import("./tdmqRabbitmqVirtualHost").TdmqRabbitmqVirtualHost = null as any;
utilities.lazyLoad(exports, ["TdmqRabbitmqVirtualHost"], () => require("./tdmqRabbitmqVirtualHost"));

export { TdmqRocketmqClusterArgs, TdmqRocketmqClusterState } from "./tdmqRocketmqCluster";
export type TdmqRocketmqCluster = import("./tdmqRocketmqCluster").TdmqRocketmqCluster;
export const TdmqRocketmqCluster: typeof import("./tdmqRocketmqCluster").TdmqRocketmqCluster = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqCluster"], () => require("./tdmqRocketmqCluster"));

export { TdmqRocketmqEnvironmentRoleArgs, TdmqRocketmqEnvironmentRoleState } from "./tdmqRocketmqEnvironmentRole";
export type TdmqRocketmqEnvironmentRole = import("./tdmqRocketmqEnvironmentRole").TdmqRocketmqEnvironmentRole;
export const TdmqRocketmqEnvironmentRole: typeof import("./tdmqRocketmqEnvironmentRole").TdmqRocketmqEnvironmentRole = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqEnvironmentRole"], () => require("./tdmqRocketmqEnvironmentRole"));

export { TdmqRocketmqGroupArgs, TdmqRocketmqGroupState } from "./tdmqRocketmqGroup";
export type TdmqRocketmqGroup = import("./tdmqRocketmqGroup").TdmqRocketmqGroup;
export const TdmqRocketmqGroup: typeof import("./tdmqRocketmqGroup").TdmqRocketmqGroup = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqGroup"], () => require("./tdmqRocketmqGroup"));

export { TdmqRocketmqNamespaceArgs, TdmqRocketmqNamespaceState } from "./tdmqRocketmqNamespace";
export type TdmqRocketmqNamespace = import("./tdmqRocketmqNamespace").TdmqRocketmqNamespace;
export const TdmqRocketmqNamespace: typeof import("./tdmqRocketmqNamespace").TdmqRocketmqNamespace = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqNamespace"], () => require("./tdmqRocketmqNamespace"));

export { TdmqRocketmqRoleArgs, TdmqRocketmqRoleState } from "./tdmqRocketmqRole";
export type TdmqRocketmqRole = import("./tdmqRocketmqRole").TdmqRocketmqRole;
export const TdmqRocketmqRole: typeof import("./tdmqRocketmqRole").TdmqRocketmqRole = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqRole"], () => require("./tdmqRocketmqRole"));

export { TdmqRocketmqTopicArgs, TdmqRocketmqTopicState } from "./tdmqRocketmqTopic";
export type TdmqRocketmqTopic = import("./tdmqRocketmqTopic").TdmqRocketmqTopic;
export const TdmqRocketmqTopic: typeof import("./tdmqRocketmqTopic").TdmqRocketmqTopic = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqTopic"], () => require("./tdmqRocketmqTopic"));

export { TdmqRocketmqVipInstanceArgs, TdmqRocketmqVipInstanceState } from "./tdmqRocketmqVipInstance";
export type TdmqRocketmqVipInstance = import("./tdmqRocketmqVipInstance").TdmqRocketmqVipInstance;
export const TdmqRocketmqVipInstance: typeof import("./tdmqRocketmqVipInstance").TdmqRocketmqVipInstance = null as any;
utilities.lazyLoad(exports, ["TdmqRocketmqVipInstance"], () => require("./tdmqRocketmqVipInstance"));

export { TdmqRoleArgs, TdmqRoleState } from "./tdmqRole";
export type TdmqRole = import("./tdmqRole").TdmqRole;
export const TdmqRole: typeof import("./tdmqRole").TdmqRole = null as any;
utilities.lazyLoad(exports, ["TdmqRole"], () => require("./tdmqRole"));

export { TdmqSendRocketmqMessageArgs, TdmqSendRocketmqMessageState } from "./tdmqSendRocketmqMessage";
export type TdmqSendRocketmqMessage = import("./tdmqSendRocketmqMessage").TdmqSendRocketmqMessage;
export const TdmqSendRocketmqMessage: typeof import("./tdmqSendRocketmqMessage").TdmqSendRocketmqMessage = null as any;
utilities.lazyLoad(exports, ["TdmqSendRocketmqMessage"], () => require("./tdmqSendRocketmqMessage"));

export { TdmqSubscriptionArgs, TdmqSubscriptionState } from "./tdmqSubscription";
export type TdmqSubscription = import("./tdmqSubscription").TdmqSubscription;
export const TdmqSubscription: typeof import("./tdmqSubscription").TdmqSubscription = null as any;
utilities.lazyLoad(exports, ["TdmqSubscription"], () => require("./tdmqSubscription"));

export { TdmqTopicArgs, TdmqTopicState } from "./tdmqTopic";
export type TdmqTopic = import("./tdmqTopic").TdmqTopic;
export const TdmqTopic: typeof import("./tdmqTopic").TdmqTopic = null as any;
utilities.lazyLoad(exports, ["TdmqTopic"], () => require("./tdmqTopic"));

export { TdmqTopicWithFullIdArgs, TdmqTopicWithFullIdState } from "./tdmqTopicWithFullId";
export type TdmqTopicWithFullId = import("./tdmqTopicWithFullId").TdmqTopicWithFullId;
export const TdmqTopicWithFullId: typeof import("./tdmqTopicWithFullId").TdmqTopicWithFullId = null as any;
utilities.lazyLoad(exports, ["TdmqTopicWithFullId"], () => require("./tdmqTopicWithFullId"));

export { TemAppConfigArgs, TemAppConfigState } from "./temAppConfig";
export type TemAppConfig = import("./temAppConfig").TemAppConfig;
export const TemAppConfig: typeof import("./temAppConfig").TemAppConfig = null as any;
utilities.lazyLoad(exports, ["TemAppConfig"], () => require("./temAppConfig"));

export { TemApplicationArgs, TemApplicationState } from "./temApplication";
export type TemApplication = import("./temApplication").TemApplication;
export const TemApplication: typeof import("./temApplication").TemApplication = null as any;
utilities.lazyLoad(exports, ["TemApplication"], () => require("./temApplication"));

export { TemApplicationServiceArgs, TemApplicationServiceState } from "./temApplicationService";
export type TemApplicationService = import("./temApplicationService").TemApplicationService;
export const TemApplicationService: typeof import("./temApplicationService").TemApplicationService = null as any;
utilities.lazyLoad(exports, ["TemApplicationService"], () => require("./temApplicationService"));

export { TemEnvironmentArgs, TemEnvironmentState } from "./temEnvironment";
export type TemEnvironment = import("./temEnvironment").TemEnvironment;
export const TemEnvironment: typeof import("./temEnvironment").TemEnvironment = null as any;
utilities.lazyLoad(exports, ["TemEnvironment"], () => require("./temEnvironment"));

export { TemGatewayArgs, TemGatewayState } from "./temGateway";
export type TemGateway = import("./temGateway").TemGateway;
export const TemGateway: typeof import("./temGateway").TemGateway = null as any;
utilities.lazyLoad(exports, ["TemGateway"], () => require("./temGateway"));

export { TemLogConfigArgs, TemLogConfigState } from "./temLogConfig";
export type TemLogConfig = import("./temLogConfig").TemLogConfig;
export const TemLogConfig: typeof import("./temLogConfig").TemLogConfig = null as any;
utilities.lazyLoad(exports, ["TemLogConfig"], () => require("./temLogConfig"));

export { TemScaleRuleArgs, TemScaleRuleState } from "./temScaleRule";
export type TemScaleRule = import("./temScaleRule").TemScaleRule;
export const TemScaleRule: typeof import("./temScaleRule").TemScaleRule = null as any;
utilities.lazyLoad(exports, ["TemScaleRule"], () => require("./temScaleRule"));

export { TemWorkloadArgs, TemWorkloadState } from "./temWorkload";
export type TemWorkload = import("./temWorkload").TemWorkload;
export const TemWorkload: typeof import("./temWorkload").TemWorkload = null as any;
utilities.lazyLoad(exports, ["TemWorkload"], () => require("./temWorkload"));

export { TeoAccelerationDomainArgs, TeoAccelerationDomainState } from "./teoAccelerationDomain";
export type TeoAccelerationDomain = import("./teoAccelerationDomain").TeoAccelerationDomain;
export const TeoAccelerationDomain: typeof import("./teoAccelerationDomain").TeoAccelerationDomain = null as any;
utilities.lazyLoad(exports, ["TeoAccelerationDomain"], () => require("./teoAccelerationDomain"));

export { TeoApplicationProxyArgs, TeoApplicationProxyState } from "./teoApplicationProxy";
export type TeoApplicationProxy = import("./teoApplicationProxy").TeoApplicationProxy;
export const TeoApplicationProxy: typeof import("./teoApplicationProxy").TeoApplicationProxy = null as any;
utilities.lazyLoad(exports, ["TeoApplicationProxy"], () => require("./teoApplicationProxy"));

export { TeoApplicationProxyRuleArgs, TeoApplicationProxyRuleState } from "./teoApplicationProxyRule";
export type TeoApplicationProxyRule = import("./teoApplicationProxyRule").TeoApplicationProxyRule;
export const TeoApplicationProxyRule: typeof import("./teoApplicationProxyRule").TeoApplicationProxyRule = null as any;
utilities.lazyLoad(exports, ["TeoApplicationProxyRule"], () => require("./teoApplicationProxyRule"));

export { TeoCertificateConfigArgs, TeoCertificateConfigState } from "./teoCertificateConfig";
export type TeoCertificateConfig = import("./teoCertificateConfig").TeoCertificateConfig;
export const TeoCertificateConfig: typeof import("./teoCertificateConfig").TeoCertificateConfig = null as any;
utilities.lazyLoad(exports, ["TeoCertificateConfig"], () => require("./teoCertificateConfig"));

export { TeoL4ProxyArgs, TeoL4ProxyState } from "./teoL4Proxy";
export type TeoL4Proxy = import("./teoL4Proxy").TeoL4Proxy;
export const TeoL4Proxy: typeof import("./teoL4Proxy").TeoL4Proxy = null as any;
utilities.lazyLoad(exports, ["TeoL4Proxy"], () => require("./teoL4Proxy"));

export { TeoOriginGroupArgs, TeoOriginGroupState } from "./teoOriginGroup";
export type TeoOriginGroup = import("./teoOriginGroup").TeoOriginGroup;
export const TeoOriginGroup: typeof import("./teoOriginGroup").TeoOriginGroup = null as any;
utilities.lazyLoad(exports, ["TeoOriginGroup"], () => require("./teoOriginGroup"));

export { TeoOwnershipVerifyArgs, TeoOwnershipVerifyState } from "./teoOwnershipVerify";
export type TeoOwnershipVerify = import("./teoOwnershipVerify").TeoOwnershipVerify;
export const TeoOwnershipVerify: typeof import("./teoOwnershipVerify").TeoOwnershipVerify = null as any;
utilities.lazyLoad(exports, ["TeoOwnershipVerify"], () => require("./teoOwnershipVerify"));

export { TeoRealtimeLogDeliveryArgs, TeoRealtimeLogDeliveryState } from "./teoRealtimeLogDelivery";
export type TeoRealtimeLogDelivery = import("./teoRealtimeLogDelivery").TeoRealtimeLogDelivery;
export const TeoRealtimeLogDelivery: typeof import("./teoRealtimeLogDelivery").TeoRealtimeLogDelivery = null as any;
utilities.lazyLoad(exports, ["TeoRealtimeLogDelivery"], () => require("./teoRealtimeLogDelivery"));

export { TeoRuleEngineArgs, TeoRuleEngineState } from "./teoRuleEngine";
export type TeoRuleEngine = import("./teoRuleEngine").TeoRuleEngine;
export const TeoRuleEngine: typeof import("./teoRuleEngine").TeoRuleEngine = null as any;
utilities.lazyLoad(exports, ["TeoRuleEngine"], () => require("./teoRuleEngine"));

export { TeoZoneArgs, TeoZoneState } from "./teoZone";
export type TeoZone = import("./teoZone").TeoZone;
export const TeoZone: typeof import("./teoZone").TeoZone = null as any;
utilities.lazyLoad(exports, ["TeoZone"], () => require("./teoZone"));

export { TeoZoneSettingArgs, TeoZoneSettingState } from "./teoZoneSetting";
export type TeoZoneSetting = import("./teoZoneSetting").TeoZoneSetting;
export const TeoZoneSetting: typeof import("./teoZoneSetting").TeoZoneSetting = null as any;
utilities.lazyLoad(exports, ["TeoZoneSetting"], () => require("./teoZoneSetting"));

export { TrocketRocketmqConsumerGroupArgs, TrocketRocketmqConsumerGroupState } from "./trocketRocketmqConsumerGroup";
export type TrocketRocketmqConsumerGroup = import("./trocketRocketmqConsumerGroup").TrocketRocketmqConsumerGroup;
export const TrocketRocketmqConsumerGroup: typeof import("./trocketRocketmqConsumerGroup").TrocketRocketmqConsumerGroup = null as any;
utilities.lazyLoad(exports, ["TrocketRocketmqConsumerGroup"], () => require("./trocketRocketmqConsumerGroup"));

export { TrocketRocketmqInstanceArgs, TrocketRocketmqInstanceState } from "./trocketRocketmqInstance";
export type TrocketRocketmqInstance = import("./trocketRocketmqInstance").TrocketRocketmqInstance;
export const TrocketRocketmqInstance: typeof import("./trocketRocketmqInstance").TrocketRocketmqInstance = null as any;
utilities.lazyLoad(exports, ["TrocketRocketmqInstance"], () => require("./trocketRocketmqInstance"));

export { TrocketRocketmqRoleArgs, TrocketRocketmqRoleState } from "./trocketRocketmqRole";
export type TrocketRocketmqRole = import("./trocketRocketmqRole").TrocketRocketmqRole;
export const TrocketRocketmqRole: typeof import("./trocketRocketmqRole").TrocketRocketmqRole = null as any;
utilities.lazyLoad(exports, ["TrocketRocketmqRole"], () => require("./trocketRocketmqRole"));

export { TrocketRocketmqTopicArgs, TrocketRocketmqTopicState } from "./trocketRocketmqTopic";
export type TrocketRocketmqTopic = import("./trocketRocketmqTopic").TrocketRocketmqTopic;
export const TrocketRocketmqTopic: typeof import("./trocketRocketmqTopic").TrocketRocketmqTopic = null as any;
utilities.lazyLoad(exports, ["TrocketRocketmqTopic"], () => require("./trocketRocketmqTopic"));

export { TseCngwCanaryRuleArgs, TseCngwCanaryRuleState } from "./tseCngwCanaryRule";
export type TseCngwCanaryRule = import("./tseCngwCanaryRule").TseCngwCanaryRule;
export const TseCngwCanaryRule: typeof import("./tseCngwCanaryRule").TseCngwCanaryRule = null as any;
utilities.lazyLoad(exports, ["TseCngwCanaryRule"], () => require("./tseCngwCanaryRule"));

export { TseCngwCertificateArgs, TseCngwCertificateState } from "./tseCngwCertificate";
export type TseCngwCertificate = import("./tseCngwCertificate").TseCngwCertificate;
export const TseCngwCertificate: typeof import("./tseCngwCertificate").TseCngwCertificate = null as any;
utilities.lazyLoad(exports, ["TseCngwCertificate"], () => require("./tseCngwCertificate"));

export { TseCngwGatewayArgs, TseCngwGatewayState } from "./tseCngwGateway";
export type TseCngwGateway = import("./tseCngwGateway").TseCngwGateway;
export const TseCngwGateway: typeof import("./tseCngwGateway").TseCngwGateway = null as any;
utilities.lazyLoad(exports, ["TseCngwGateway"], () => require("./tseCngwGateway"));

export { TseCngwGroupArgs, TseCngwGroupState } from "./tseCngwGroup";
export type TseCngwGroup = import("./tseCngwGroup").TseCngwGroup;
export const TseCngwGroup: typeof import("./tseCngwGroup").TseCngwGroup = null as any;
utilities.lazyLoad(exports, ["TseCngwGroup"], () => require("./tseCngwGroup"));

export { TseCngwNetworkArgs, TseCngwNetworkState } from "./tseCngwNetwork";
export type TseCngwNetwork = import("./tseCngwNetwork").TseCngwNetwork;
export const TseCngwNetwork: typeof import("./tseCngwNetwork").TseCngwNetwork = null as any;
utilities.lazyLoad(exports, ["TseCngwNetwork"], () => require("./tseCngwNetwork"));

export { TseCngwNetworkAccessControlArgs, TseCngwNetworkAccessControlState } from "./tseCngwNetworkAccessControl";
export type TseCngwNetworkAccessControl = import("./tseCngwNetworkAccessControl").TseCngwNetworkAccessControl;
export const TseCngwNetworkAccessControl: typeof import("./tseCngwNetworkAccessControl").TseCngwNetworkAccessControl = null as any;
utilities.lazyLoad(exports, ["TseCngwNetworkAccessControl"], () => require("./tseCngwNetworkAccessControl"));

export { TseCngwRouteArgs, TseCngwRouteState } from "./tseCngwRoute";
export type TseCngwRoute = import("./tseCngwRoute").TseCngwRoute;
export const TseCngwRoute: typeof import("./tseCngwRoute").TseCngwRoute = null as any;
utilities.lazyLoad(exports, ["TseCngwRoute"], () => require("./tseCngwRoute"));

export { TseCngwRouteRateLimitArgs, TseCngwRouteRateLimitState } from "./tseCngwRouteRateLimit";
export type TseCngwRouteRateLimit = import("./tseCngwRouteRateLimit").TseCngwRouteRateLimit;
export const TseCngwRouteRateLimit: typeof import("./tseCngwRouteRateLimit").TseCngwRouteRateLimit = null as any;
utilities.lazyLoad(exports, ["TseCngwRouteRateLimit"], () => require("./tseCngwRouteRateLimit"));

export { TseCngwServiceArgs, TseCngwServiceState } from "./tseCngwService";
export type TseCngwService = import("./tseCngwService").TseCngwService;
export const TseCngwService: typeof import("./tseCngwService").TseCngwService = null as any;
utilities.lazyLoad(exports, ["TseCngwService"], () => require("./tseCngwService"));

export { TseCngwServiceRateLimitArgs, TseCngwServiceRateLimitState } from "./tseCngwServiceRateLimit";
export type TseCngwServiceRateLimit = import("./tseCngwServiceRateLimit").TseCngwServiceRateLimit;
export const TseCngwServiceRateLimit: typeof import("./tseCngwServiceRateLimit").TseCngwServiceRateLimit = null as any;
utilities.lazyLoad(exports, ["TseCngwServiceRateLimit"], () => require("./tseCngwServiceRateLimit"));

export { TseCngwStrategyArgs, TseCngwStrategyState } from "./tseCngwStrategy";
export type TseCngwStrategy = import("./tseCngwStrategy").TseCngwStrategy;
export const TseCngwStrategy: typeof import("./tseCngwStrategy").TseCngwStrategy = null as any;
utilities.lazyLoad(exports, ["TseCngwStrategy"], () => require("./tseCngwStrategy"));

export { TseCngwStrategyBindGroupArgs, TseCngwStrategyBindGroupState } from "./tseCngwStrategyBindGroup";
export type TseCngwStrategyBindGroup = import("./tseCngwStrategyBindGroup").TseCngwStrategyBindGroup;
export const TseCngwStrategyBindGroup: typeof import("./tseCngwStrategyBindGroup").TseCngwStrategyBindGroup = null as any;
utilities.lazyLoad(exports, ["TseCngwStrategyBindGroup"], () => require("./tseCngwStrategyBindGroup"));

export { TseInstanceArgs, TseInstanceState } from "./tseInstance";
export type TseInstance = import("./tseInstance").TseInstance;
export const TseInstance: typeof import("./tseInstance").TseInstance = null as any;
utilities.lazyLoad(exports, ["TseInstance"], () => require("./tseInstance"));

export { TseWafDomainsArgs, TseWafDomainsState } from "./tseWafDomains";
export type TseWafDomains = import("./tseWafDomains").TseWafDomains;
export const TseWafDomains: typeof import("./tseWafDomains").TseWafDomains = null as any;
utilities.lazyLoad(exports, ["TseWafDomains"], () => require("./tseWafDomains"));

export { TseWafProtectionArgs, TseWafProtectionState } from "./tseWafProtection";
export type TseWafProtection = import("./tseWafProtection").TseWafProtection;
export const TseWafProtection: typeof import("./tseWafProtection").TseWafProtection = null as any;
utilities.lazyLoad(exports, ["TseWafProtection"], () => require("./tseWafProtection"));

export { TsfApiGroupArgs, TsfApiGroupState } from "./tsfApiGroup";
export type TsfApiGroup = import("./tsfApiGroup").TsfApiGroup;
export const TsfApiGroup: typeof import("./tsfApiGroup").TsfApiGroup = null as any;
utilities.lazyLoad(exports, ["TsfApiGroup"], () => require("./tsfApiGroup"));

export { TsfApiRateLimitRuleArgs, TsfApiRateLimitRuleState } from "./tsfApiRateLimitRule";
export type TsfApiRateLimitRule = import("./tsfApiRateLimitRule").TsfApiRateLimitRule;
export const TsfApiRateLimitRule: typeof import("./tsfApiRateLimitRule").TsfApiRateLimitRule = null as any;
utilities.lazyLoad(exports, ["TsfApiRateLimitRule"], () => require("./tsfApiRateLimitRule"));

export { TsfApplicationArgs, TsfApplicationState } from "./tsfApplication";
export type TsfApplication = import("./tsfApplication").TsfApplication;
export const TsfApplication: typeof import("./tsfApplication").TsfApplication = null as any;
utilities.lazyLoad(exports, ["TsfApplication"], () => require("./tsfApplication"));

export { TsfApplicationConfigArgs, TsfApplicationConfigState } from "./tsfApplicationConfig";
export type TsfApplicationConfig = import("./tsfApplicationConfig").TsfApplicationConfig;
export const TsfApplicationConfig: typeof import("./tsfApplicationConfig").TsfApplicationConfig = null as any;
utilities.lazyLoad(exports, ["TsfApplicationConfig"], () => require("./tsfApplicationConfig"));

export { TsfApplicationFileConfigArgs, TsfApplicationFileConfigState } from "./tsfApplicationFileConfig";
export type TsfApplicationFileConfig = import("./tsfApplicationFileConfig").TsfApplicationFileConfig;
export const TsfApplicationFileConfig: typeof import("./tsfApplicationFileConfig").TsfApplicationFileConfig = null as any;
utilities.lazyLoad(exports, ["TsfApplicationFileConfig"], () => require("./tsfApplicationFileConfig"));

export { TsfApplicationFileConfigReleaseArgs, TsfApplicationFileConfigReleaseState } from "./tsfApplicationFileConfigRelease";
export type TsfApplicationFileConfigRelease = import("./tsfApplicationFileConfigRelease").TsfApplicationFileConfigRelease;
export const TsfApplicationFileConfigRelease: typeof import("./tsfApplicationFileConfigRelease").TsfApplicationFileConfigRelease = null as any;
utilities.lazyLoad(exports, ["TsfApplicationFileConfigRelease"], () => require("./tsfApplicationFileConfigRelease"));

export { TsfApplicationPublicConfigArgs, TsfApplicationPublicConfigState } from "./tsfApplicationPublicConfig";
export type TsfApplicationPublicConfig = import("./tsfApplicationPublicConfig").TsfApplicationPublicConfig;
export const TsfApplicationPublicConfig: typeof import("./tsfApplicationPublicConfig").TsfApplicationPublicConfig = null as any;
utilities.lazyLoad(exports, ["TsfApplicationPublicConfig"], () => require("./tsfApplicationPublicConfig"));

export { TsfApplicationPublicConfigReleaseArgs, TsfApplicationPublicConfigReleaseState } from "./tsfApplicationPublicConfigRelease";
export type TsfApplicationPublicConfigRelease = import("./tsfApplicationPublicConfigRelease").TsfApplicationPublicConfigRelease;
export const TsfApplicationPublicConfigRelease: typeof import("./tsfApplicationPublicConfigRelease").TsfApplicationPublicConfigRelease = null as any;
utilities.lazyLoad(exports, ["TsfApplicationPublicConfigRelease"], () => require("./tsfApplicationPublicConfigRelease"));

export { TsfApplicationReleaseConfigArgs, TsfApplicationReleaseConfigState } from "./tsfApplicationReleaseConfig";
export type TsfApplicationReleaseConfig = import("./tsfApplicationReleaseConfig").TsfApplicationReleaseConfig;
export const TsfApplicationReleaseConfig: typeof import("./tsfApplicationReleaseConfig").TsfApplicationReleaseConfig = null as any;
utilities.lazyLoad(exports, ["TsfApplicationReleaseConfig"], () => require("./tsfApplicationReleaseConfig"));

export { TsfBindApiGroupArgs, TsfBindApiGroupState } from "./tsfBindApiGroup";
export type TsfBindApiGroup = import("./tsfBindApiGroup").TsfBindApiGroup;
export const TsfBindApiGroup: typeof import("./tsfBindApiGroup").TsfBindApiGroup = null as any;
utilities.lazyLoad(exports, ["TsfBindApiGroup"], () => require("./tsfBindApiGroup"));

export { TsfClusterArgs, TsfClusterState } from "./tsfCluster";
export type TsfCluster = import("./tsfCluster").TsfCluster;
export const TsfCluster: typeof import("./tsfCluster").TsfCluster = null as any;
utilities.lazyLoad(exports, ["TsfCluster"], () => require("./tsfCluster"));

export { TsfConfigTemplateArgs, TsfConfigTemplateState } from "./tsfConfigTemplate";
export type TsfConfigTemplate = import("./tsfConfigTemplate").TsfConfigTemplate;
export const TsfConfigTemplate: typeof import("./tsfConfigTemplate").TsfConfigTemplate = null as any;
utilities.lazyLoad(exports, ["TsfConfigTemplate"], () => require("./tsfConfigTemplate"));

export { TsfDeployContainerGroupArgs, TsfDeployContainerGroupState } from "./tsfDeployContainerGroup";
export type TsfDeployContainerGroup = import("./tsfDeployContainerGroup").TsfDeployContainerGroup;
export const TsfDeployContainerGroup: typeof import("./tsfDeployContainerGroup").TsfDeployContainerGroup = null as any;
utilities.lazyLoad(exports, ["TsfDeployContainerGroup"], () => require("./tsfDeployContainerGroup"));

export { TsfDeployVmGroupArgs, TsfDeployVmGroupState } from "./tsfDeployVmGroup";
export type TsfDeployVmGroup = import("./tsfDeployVmGroup").TsfDeployVmGroup;
export const TsfDeployVmGroup: typeof import("./tsfDeployVmGroup").TsfDeployVmGroup = null as any;
utilities.lazyLoad(exports, ["TsfDeployVmGroup"], () => require("./tsfDeployVmGroup"));

export { TsfEnableUnitRuleArgs, TsfEnableUnitRuleState } from "./tsfEnableUnitRule";
export type TsfEnableUnitRule = import("./tsfEnableUnitRule").TsfEnableUnitRule;
export const TsfEnableUnitRule: typeof import("./tsfEnableUnitRule").TsfEnableUnitRule = null as any;
utilities.lazyLoad(exports, ["TsfEnableUnitRule"], () => require("./tsfEnableUnitRule"));

export { TsfGroupArgs, TsfGroupState } from "./tsfGroup";
export type TsfGroup = import("./tsfGroup").TsfGroup;
export const TsfGroup: typeof import("./tsfGroup").TsfGroup = null as any;
utilities.lazyLoad(exports, ["TsfGroup"], () => require("./tsfGroup"));

export { TsfInstancesAttachmentArgs, TsfInstancesAttachmentState } from "./tsfInstancesAttachment";
export type TsfInstancesAttachment = import("./tsfInstancesAttachment").TsfInstancesAttachment;
export const TsfInstancesAttachment: typeof import("./tsfInstancesAttachment").TsfInstancesAttachment = null as any;
utilities.lazyLoad(exports, ["TsfInstancesAttachment"], () => require("./tsfInstancesAttachment"));

export { TsfLaneArgs, TsfLaneState } from "./tsfLane";
export type TsfLane = import("./tsfLane").TsfLane;
export const TsfLane: typeof import("./tsfLane").TsfLane = null as any;
utilities.lazyLoad(exports, ["TsfLane"], () => require("./tsfLane"));

export { TsfLaneRuleArgs, TsfLaneRuleState } from "./tsfLaneRule";
export type TsfLaneRule = import("./tsfLaneRule").TsfLaneRule;
export const TsfLaneRule: typeof import("./tsfLaneRule").TsfLaneRule = null as any;
utilities.lazyLoad(exports, ["TsfLaneRule"], () => require("./tsfLaneRule"));

export { TsfMicroserviceArgs, TsfMicroserviceState } from "./tsfMicroservice";
export type TsfMicroservice = import("./tsfMicroservice").TsfMicroservice;
export const TsfMicroservice: typeof import("./tsfMicroservice").TsfMicroservice = null as any;
utilities.lazyLoad(exports, ["TsfMicroservice"], () => require("./tsfMicroservice"));

export { TsfNamespaceArgs, TsfNamespaceState } from "./tsfNamespace";
export type TsfNamespace = import("./tsfNamespace").TsfNamespace;
export const TsfNamespace: typeof import("./tsfNamespace").TsfNamespace = null as any;
utilities.lazyLoad(exports, ["TsfNamespace"], () => require("./tsfNamespace"));

export { TsfOperateContainerGroupArgs, TsfOperateContainerGroupState } from "./tsfOperateContainerGroup";
export type TsfOperateContainerGroup = import("./tsfOperateContainerGroup").TsfOperateContainerGroup;
export const TsfOperateContainerGroup: typeof import("./tsfOperateContainerGroup").TsfOperateContainerGroup = null as any;
utilities.lazyLoad(exports, ["TsfOperateContainerGroup"], () => require("./tsfOperateContainerGroup"));

export { TsfOperateGroupArgs, TsfOperateGroupState } from "./tsfOperateGroup";
export type TsfOperateGroup = import("./tsfOperateGroup").TsfOperateGroup;
export const TsfOperateGroup: typeof import("./tsfOperateGroup").TsfOperateGroup = null as any;
utilities.lazyLoad(exports, ["TsfOperateGroup"], () => require("./tsfOperateGroup"));

export { TsfPathRewriteArgs, TsfPathRewriteState } from "./tsfPathRewrite";
export type TsfPathRewrite = import("./tsfPathRewrite").TsfPathRewrite;
export const TsfPathRewrite: typeof import("./tsfPathRewrite").TsfPathRewrite = null as any;
utilities.lazyLoad(exports, ["TsfPathRewrite"], () => require("./tsfPathRewrite"));

export { TsfReleaseApiGroupArgs, TsfReleaseApiGroupState } from "./tsfReleaseApiGroup";
export type TsfReleaseApiGroup = import("./tsfReleaseApiGroup").TsfReleaseApiGroup;
export const TsfReleaseApiGroup: typeof import("./tsfReleaseApiGroup").TsfReleaseApiGroup = null as any;
utilities.lazyLoad(exports, ["TsfReleaseApiGroup"], () => require("./tsfReleaseApiGroup"));

export { TsfRepositoryArgs, TsfRepositoryState } from "./tsfRepository";
export type TsfRepository = import("./tsfRepository").TsfRepository;
export const TsfRepository: typeof import("./tsfRepository").TsfRepository = null as any;
utilities.lazyLoad(exports, ["TsfRepository"], () => require("./tsfRepository"));

export { TsfTaskArgs, TsfTaskState } from "./tsfTask";
export type TsfTask = import("./tsfTask").TsfTask;
export const TsfTask: typeof import("./tsfTask").TsfTask = null as any;
utilities.lazyLoad(exports, ["TsfTask"], () => require("./tsfTask"));

export { TsfUnitNamespaceArgs, TsfUnitNamespaceState } from "./tsfUnitNamespace";
export type TsfUnitNamespace = import("./tsfUnitNamespace").TsfUnitNamespace;
export const TsfUnitNamespace: typeof import("./tsfUnitNamespace").TsfUnitNamespace = null as any;
utilities.lazyLoad(exports, ["TsfUnitNamespace"], () => require("./tsfUnitNamespace"));

export { TsfUnitRuleArgs, TsfUnitRuleState } from "./tsfUnitRule";
export type TsfUnitRule = import("./tsfUnitRule").TsfUnitRule;
export const TsfUnitRule: typeof import("./tsfUnitRule").TsfUnitRule = null as any;
utilities.lazyLoad(exports, ["TsfUnitRule"], () => require("./tsfUnitRule"));

export { VodAdaptiveDynamicStreamingTemplateArgs, VodAdaptiveDynamicStreamingTemplateState } from "./vodAdaptiveDynamicStreamingTemplate";
export type VodAdaptiveDynamicStreamingTemplate = import("./vodAdaptiveDynamicStreamingTemplate").VodAdaptiveDynamicStreamingTemplate;
export const VodAdaptiveDynamicStreamingTemplate: typeof import("./vodAdaptiveDynamicStreamingTemplate").VodAdaptiveDynamicStreamingTemplate = null as any;
utilities.lazyLoad(exports, ["VodAdaptiveDynamicStreamingTemplate"], () => require("./vodAdaptiveDynamicStreamingTemplate"));

export { VodEventConfigArgs, VodEventConfigState } from "./vodEventConfig";
export type VodEventConfig = import("./vodEventConfig").VodEventConfig;
export const VodEventConfig: typeof import("./vodEventConfig").VodEventConfig = null as any;
utilities.lazyLoad(exports, ["VodEventConfig"], () => require("./vodEventConfig"));

export { VodImageSpriteTemplateArgs, VodImageSpriteTemplateState } from "./vodImageSpriteTemplate";
export type VodImageSpriteTemplate = import("./vodImageSpriteTemplate").VodImageSpriteTemplate;
export const VodImageSpriteTemplate: typeof import("./vodImageSpriteTemplate").VodImageSpriteTemplate = null as any;
utilities.lazyLoad(exports, ["VodImageSpriteTemplate"], () => require("./vodImageSpriteTemplate"));

export { VodProcedureTemplateArgs, VodProcedureTemplateState } from "./vodProcedureTemplate";
export type VodProcedureTemplate = import("./vodProcedureTemplate").VodProcedureTemplate;
export const VodProcedureTemplate: typeof import("./vodProcedureTemplate").VodProcedureTemplate = null as any;
utilities.lazyLoad(exports, ["VodProcedureTemplate"], () => require("./vodProcedureTemplate"));

export { VodSampleSnapshotTemplateArgs, VodSampleSnapshotTemplateState } from "./vodSampleSnapshotTemplate";
export type VodSampleSnapshotTemplate = import("./vodSampleSnapshotTemplate").VodSampleSnapshotTemplate;
export const VodSampleSnapshotTemplate: typeof import("./vodSampleSnapshotTemplate").VodSampleSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["VodSampleSnapshotTemplate"], () => require("./vodSampleSnapshotTemplate"));

export { VodSnapshotByTimeOffsetTemplateArgs, VodSnapshotByTimeOffsetTemplateState } from "./vodSnapshotByTimeOffsetTemplate";
export type VodSnapshotByTimeOffsetTemplate = import("./vodSnapshotByTimeOffsetTemplate").VodSnapshotByTimeOffsetTemplate;
export const VodSnapshotByTimeOffsetTemplate: typeof import("./vodSnapshotByTimeOffsetTemplate").VodSnapshotByTimeOffsetTemplate = null as any;
utilities.lazyLoad(exports, ["VodSnapshotByTimeOffsetTemplate"], () => require("./vodSnapshotByTimeOffsetTemplate"));

export { VodSubApplicationArgs, VodSubApplicationState } from "./vodSubApplication";
export type VodSubApplication = import("./vodSubApplication").VodSubApplication;
export const VodSubApplication: typeof import("./vodSubApplication").VodSubApplication = null as any;
utilities.lazyLoad(exports, ["VodSubApplication"], () => require("./vodSubApplication"));

export { VodSuperPlayerConfigArgs, VodSuperPlayerConfigState } from "./vodSuperPlayerConfig";
export type VodSuperPlayerConfig = import("./vodSuperPlayerConfig").VodSuperPlayerConfig;
export const VodSuperPlayerConfig: typeof import("./vodSuperPlayerConfig").VodSuperPlayerConfig = null as any;
utilities.lazyLoad(exports, ["VodSuperPlayerConfig"], () => require("./vodSuperPlayerConfig"));

export { VodTranscodeTemplateArgs, VodTranscodeTemplateState } from "./vodTranscodeTemplate";
export type VodTranscodeTemplate = import("./vodTranscodeTemplate").VodTranscodeTemplate;
export const VodTranscodeTemplate: typeof import("./vodTranscodeTemplate").VodTranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["VodTranscodeTemplate"], () => require("./vodTranscodeTemplate"));

export { VodWatermarkTemplateArgs, VodWatermarkTemplateState } from "./vodWatermarkTemplate";
export type VodWatermarkTemplate = import("./vodWatermarkTemplate").VodWatermarkTemplate;
export const VodWatermarkTemplate: typeof import("./vodWatermarkTemplate").VodWatermarkTemplate = null as any;
utilities.lazyLoad(exports, ["VodWatermarkTemplate"], () => require("./vodWatermarkTemplate"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcAclArgs, VpcAclState } from "./vpcAcl";
export type VpcAcl = import("./vpcAcl").VpcAcl;
export const VpcAcl: typeof import("./vpcAcl").VpcAcl = null as any;
utilities.lazyLoad(exports, ["VpcAcl"], () => require("./vpcAcl"));

export { VpcAclAttachmentArgs, VpcAclAttachmentState } from "./vpcAclAttachment";
export type VpcAclAttachment = import("./vpcAclAttachment").VpcAclAttachment;
export const VpcAclAttachment: typeof import("./vpcAclAttachment").VpcAclAttachment = null as any;
utilities.lazyLoad(exports, ["VpcAclAttachment"], () => require("./vpcAclAttachment"));

export { VpcBandwidthPackageArgs, VpcBandwidthPackageState } from "./vpcBandwidthPackage";
export type VpcBandwidthPackage = import("./vpcBandwidthPackage").VpcBandwidthPackage;
export const VpcBandwidthPackage: typeof import("./vpcBandwidthPackage").VpcBandwidthPackage = null as any;
utilities.lazyLoad(exports, ["VpcBandwidthPackage"], () => require("./vpcBandwidthPackage"));

export { VpcBandwidthPackageAttachmentArgs, VpcBandwidthPackageAttachmentState } from "./vpcBandwidthPackageAttachment";
export type VpcBandwidthPackageAttachment = import("./vpcBandwidthPackageAttachment").VpcBandwidthPackageAttachment;
export const VpcBandwidthPackageAttachment: typeof import("./vpcBandwidthPackageAttachment").VpcBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["VpcBandwidthPackageAttachment"], () => require("./vpcBandwidthPackageAttachment"));

export { VpcClassicLinkAttachmentArgs, VpcClassicLinkAttachmentState } from "./vpcClassicLinkAttachment";
export type VpcClassicLinkAttachment = import("./vpcClassicLinkAttachment").VpcClassicLinkAttachment;
export const VpcClassicLinkAttachment: typeof import("./vpcClassicLinkAttachment").VpcClassicLinkAttachment = null as any;
utilities.lazyLoad(exports, ["VpcClassicLinkAttachment"], () => require("./vpcClassicLinkAttachment"));

export { VpcDhcpAssociateAddressArgs, VpcDhcpAssociateAddressState } from "./vpcDhcpAssociateAddress";
export type VpcDhcpAssociateAddress = import("./vpcDhcpAssociateAddress").VpcDhcpAssociateAddress;
export const VpcDhcpAssociateAddress: typeof import("./vpcDhcpAssociateAddress").VpcDhcpAssociateAddress = null as any;
utilities.lazyLoad(exports, ["VpcDhcpAssociateAddress"], () => require("./vpcDhcpAssociateAddress"));

export { VpcDhcpIpArgs, VpcDhcpIpState } from "./vpcDhcpIp";
export type VpcDhcpIp = import("./vpcDhcpIp").VpcDhcpIp;
export const VpcDhcpIp: typeof import("./vpcDhcpIp").VpcDhcpIp = null as any;
utilities.lazyLoad(exports, ["VpcDhcpIp"], () => require("./vpcDhcpIp"));

export { VpcEnableEndPointConnectArgs, VpcEnableEndPointConnectState } from "./vpcEnableEndPointConnect";
export type VpcEnableEndPointConnect = import("./vpcEnableEndPointConnect").VpcEnableEndPointConnect;
export const VpcEnableEndPointConnect: typeof import("./vpcEnableEndPointConnect").VpcEnableEndPointConnect = null as any;
utilities.lazyLoad(exports, ["VpcEnableEndPointConnect"], () => require("./vpcEnableEndPointConnect"));

export { VpcEndPointArgs, VpcEndPointState } from "./vpcEndPoint";
export type VpcEndPoint = import("./vpcEndPoint").VpcEndPoint;
export const VpcEndPoint: typeof import("./vpcEndPoint").VpcEndPoint = null as any;
utilities.lazyLoad(exports, ["VpcEndPoint"], () => require("./vpcEndPoint"));

export { VpcEndPointServiceArgs, VpcEndPointServiceState } from "./vpcEndPointService";
export type VpcEndPointService = import("./vpcEndPointService").VpcEndPointService;
export const VpcEndPointService: typeof import("./vpcEndPointService").VpcEndPointService = null as any;
utilities.lazyLoad(exports, ["VpcEndPointService"], () => require("./vpcEndPointService"));

export { VpcEndPointServiceWhiteListArgs, VpcEndPointServiceWhiteListState } from "./vpcEndPointServiceWhiteList";
export type VpcEndPointServiceWhiteList = import("./vpcEndPointServiceWhiteList").VpcEndPointServiceWhiteList;
export const VpcEndPointServiceWhiteList: typeof import("./vpcEndPointServiceWhiteList").VpcEndPointServiceWhiteList = null as any;
utilities.lazyLoad(exports, ["VpcEndPointServiceWhiteList"], () => require("./vpcEndPointServiceWhiteList"));

export { VpcFlowLogArgs, VpcFlowLogState } from "./vpcFlowLog";
export type VpcFlowLog = import("./vpcFlowLog").VpcFlowLog;
export const VpcFlowLog: typeof import("./vpcFlowLog").VpcFlowLog = null as any;
utilities.lazyLoad(exports, ["VpcFlowLog"], () => require("./vpcFlowLog"));

export { VpcFlowLogConfigArgs, VpcFlowLogConfigState } from "./vpcFlowLogConfig";
export type VpcFlowLogConfig = import("./vpcFlowLogConfig").VpcFlowLogConfig;
export const VpcFlowLogConfig: typeof import("./vpcFlowLogConfig").VpcFlowLogConfig = null as any;
utilities.lazyLoad(exports, ["VpcFlowLogConfig"], () => require("./vpcFlowLogConfig"));

export { VpcIpv6CidrBlockArgs, VpcIpv6CidrBlockState } from "./vpcIpv6CidrBlock";
export type VpcIpv6CidrBlock = import("./vpcIpv6CidrBlock").VpcIpv6CidrBlock;
export const VpcIpv6CidrBlock: typeof import("./vpcIpv6CidrBlock").VpcIpv6CidrBlock = null as any;
utilities.lazyLoad(exports, ["VpcIpv6CidrBlock"], () => require("./vpcIpv6CidrBlock"));

export { VpcIpv6EniAddressArgs, VpcIpv6EniAddressState } from "./vpcIpv6EniAddress";
export type VpcIpv6EniAddress = import("./vpcIpv6EniAddress").VpcIpv6EniAddress;
export const VpcIpv6EniAddress: typeof import("./vpcIpv6EniAddress").VpcIpv6EniAddress = null as any;
utilities.lazyLoad(exports, ["VpcIpv6EniAddress"], () => require("./vpcIpv6EniAddress"));

export { VpcIpv6SubnetCidrBlockArgs, VpcIpv6SubnetCidrBlockState } from "./vpcIpv6SubnetCidrBlock";
export type VpcIpv6SubnetCidrBlock = import("./vpcIpv6SubnetCidrBlock").VpcIpv6SubnetCidrBlock;
export const VpcIpv6SubnetCidrBlock: typeof import("./vpcIpv6SubnetCidrBlock").VpcIpv6SubnetCidrBlock = null as any;
utilities.lazyLoad(exports, ["VpcIpv6SubnetCidrBlock"], () => require("./vpcIpv6SubnetCidrBlock"));

export { VpcLocalGatewayArgs, VpcLocalGatewayState } from "./vpcLocalGateway";
export type VpcLocalGateway = import("./vpcLocalGateway").VpcLocalGateway;
export const VpcLocalGateway: typeof import("./vpcLocalGateway").VpcLocalGateway = null as any;
utilities.lazyLoad(exports, ["VpcLocalGateway"], () => require("./vpcLocalGateway"));

export { VpcNetDetectArgs, VpcNetDetectState } from "./vpcNetDetect";
export type VpcNetDetect = import("./vpcNetDetect").VpcNetDetect;
export const VpcNetDetect: typeof import("./vpcNetDetect").VpcNetDetect = null as any;
utilities.lazyLoad(exports, ["VpcNetDetect"], () => require("./vpcNetDetect"));

export { VpcNetworkAclQuintupleArgs, VpcNetworkAclQuintupleState } from "./vpcNetworkAclQuintuple";
export type VpcNetworkAclQuintuple = import("./vpcNetworkAclQuintuple").VpcNetworkAclQuintuple;
export const VpcNetworkAclQuintuple: typeof import("./vpcNetworkAclQuintuple").VpcNetworkAclQuintuple = null as any;
utilities.lazyLoad(exports, ["VpcNetworkAclQuintuple"], () => require("./vpcNetworkAclQuintuple"));

export { VpcNotifyRoutesArgs, VpcNotifyRoutesState } from "./vpcNotifyRoutes";
export type VpcNotifyRoutes = import("./vpcNotifyRoutes").VpcNotifyRoutes;
export const VpcNotifyRoutes: typeof import("./vpcNotifyRoutes").VpcNotifyRoutes = null as any;
utilities.lazyLoad(exports, ["VpcNotifyRoutes"], () => require("./vpcNotifyRoutes"));

export { VpcPeerConnectAcceptOperationArgs, VpcPeerConnectAcceptOperationState } from "./vpcPeerConnectAcceptOperation";
export type VpcPeerConnectAcceptOperation = import("./vpcPeerConnectAcceptOperation").VpcPeerConnectAcceptOperation;
export const VpcPeerConnectAcceptOperation: typeof import("./vpcPeerConnectAcceptOperation").VpcPeerConnectAcceptOperation = null as any;
utilities.lazyLoad(exports, ["VpcPeerConnectAcceptOperation"], () => require("./vpcPeerConnectAcceptOperation"));

export { VpcPeerConnectManagerArgs, VpcPeerConnectManagerState } from "./vpcPeerConnectManager";
export type VpcPeerConnectManager = import("./vpcPeerConnectManager").VpcPeerConnectManager;
export const VpcPeerConnectManager: typeof import("./vpcPeerConnectManager").VpcPeerConnectManager = null as any;
utilities.lazyLoad(exports, ["VpcPeerConnectManager"], () => require("./vpcPeerConnectManager"));

export { VpcPeerConnectRejectOperationArgs, VpcPeerConnectRejectOperationState } from "./vpcPeerConnectRejectOperation";
export type VpcPeerConnectRejectOperation = import("./vpcPeerConnectRejectOperation").VpcPeerConnectRejectOperation;
export const VpcPeerConnectRejectOperation: typeof import("./vpcPeerConnectRejectOperation").VpcPeerConnectRejectOperation = null as any;
utilities.lazyLoad(exports, ["VpcPeerConnectRejectOperation"], () => require("./vpcPeerConnectRejectOperation"));

export { VpcPrivateNatGatewayArgs, VpcPrivateNatGatewayState } from "./vpcPrivateNatGateway";
export type VpcPrivateNatGateway = import("./vpcPrivateNatGateway").VpcPrivateNatGateway;
export const VpcPrivateNatGateway: typeof import("./vpcPrivateNatGateway").VpcPrivateNatGateway = null as any;
utilities.lazyLoad(exports, ["VpcPrivateNatGateway"], () => require("./vpcPrivateNatGateway"));

export { VpcResumeSnapshotInstanceArgs, VpcResumeSnapshotInstanceState } from "./vpcResumeSnapshotInstance";
export type VpcResumeSnapshotInstance = import("./vpcResumeSnapshotInstance").VpcResumeSnapshotInstance;
export const VpcResumeSnapshotInstance: typeof import("./vpcResumeSnapshotInstance").VpcResumeSnapshotInstance = null as any;
utilities.lazyLoad(exports, ["VpcResumeSnapshotInstance"], () => require("./vpcResumeSnapshotInstance"));

export { VpcSnapshotPolicyArgs, VpcSnapshotPolicyState } from "./vpcSnapshotPolicy";
export type VpcSnapshotPolicy = import("./vpcSnapshotPolicy").VpcSnapshotPolicy;
export const VpcSnapshotPolicy: typeof import("./vpcSnapshotPolicy").VpcSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["VpcSnapshotPolicy"], () => require("./vpcSnapshotPolicy"));

export { VpcSnapshotPolicyAttachmentArgs, VpcSnapshotPolicyAttachmentState } from "./vpcSnapshotPolicyAttachment";
export type VpcSnapshotPolicyAttachment = import("./vpcSnapshotPolicyAttachment").VpcSnapshotPolicyAttachment;
export const VpcSnapshotPolicyAttachment: typeof import("./vpcSnapshotPolicyAttachment").VpcSnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["VpcSnapshotPolicyAttachment"], () => require("./vpcSnapshotPolicyAttachment"));

export { VpcSnapshotPolicyConfigArgs, VpcSnapshotPolicyConfigState } from "./vpcSnapshotPolicyConfig";
export type VpcSnapshotPolicyConfig = import("./vpcSnapshotPolicyConfig").VpcSnapshotPolicyConfig;
export const VpcSnapshotPolicyConfig: typeof import("./vpcSnapshotPolicyConfig").VpcSnapshotPolicyConfig = null as any;
utilities.lazyLoad(exports, ["VpcSnapshotPolicyConfig"], () => require("./vpcSnapshotPolicyConfig"));

export { VpcTrafficPackageArgs, VpcTrafficPackageState } from "./vpcTrafficPackage";
export type VpcTrafficPackage = import("./vpcTrafficPackage").VpcTrafficPackage;
export const VpcTrafficPackage: typeof import("./vpcTrafficPackage").VpcTrafficPackage = null as any;
utilities.lazyLoad(exports, ["VpcTrafficPackage"], () => require("./vpcTrafficPackage"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnConnectionResetArgs, VpnConnectionResetState } from "./vpnConnectionReset";
export type VpnConnectionReset = import("./vpnConnectionReset").VpnConnectionReset;
export const VpnConnectionReset: typeof import("./vpnConnectionReset").VpnConnectionReset = null as any;
utilities.lazyLoad(exports, ["VpnConnectionReset"], () => require("./vpnConnectionReset"));

export { VpnCustomerGatewayArgs, VpnCustomerGatewayState } from "./vpnCustomerGateway";
export type VpnCustomerGateway = import("./vpnCustomerGateway").VpnCustomerGateway;
export const VpnCustomerGateway: typeof import("./vpnCustomerGateway").VpnCustomerGateway = null as any;
utilities.lazyLoad(exports, ["VpnCustomerGateway"], () => require("./vpnCustomerGateway"));

export { VpnCustomerGatewayConfigurationDownloadArgs, VpnCustomerGatewayConfigurationDownloadState } from "./vpnCustomerGatewayConfigurationDownload";
export type VpnCustomerGatewayConfigurationDownload = import("./vpnCustomerGatewayConfigurationDownload").VpnCustomerGatewayConfigurationDownload;
export const VpnCustomerGatewayConfigurationDownload: typeof import("./vpnCustomerGatewayConfigurationDownload").VpnCustomerGatewayConfigurationDownload = null as any;
utilities.lazyLoad(exports, ["VpnCustomerGatewayConfigurationDownload"], () => require("./vpnCustomerGatewayConfigurationDownload"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayCcnRoutesArgs, VpnGatewayCcnRoutesState } from "./vpnGatewayCcnRoutes";
export type VpnGatewayCcnRoutes = import("./vpnGatewayCcnRoutes").VpnGatewayCcnRoutes;
export const VpnGatewayCcnRoutes: typeof import("./vpnGatewayCcnRoutes").VpnGatewayCcnRoutes = null as any;
utilities.lazyLoad(exports, ["VpnGatewayCcnRoutes"], () => require("./vpnGatewayCcnRoutes"));

export { VpnGatewayRouteArgs, VpnGatewayRouteState } from "./vpnGatewayRoute";
export type VpnGatewayRoute = import("./vpnGatewayRoute").VpnGatewayRoute;
export const VpnGatewayRoute: typeof import("./vpnGatewayRoute").VpnGatewayRoute = null as any;
utilities.lazyLoad(exports, ["VpnGatewayRoute"], () => require("./vpnGatewayRoute"));

export { VpnGatewaySslClientCertArgs, VpnGatewaySslClientCertState } from "./vpnGatewaySslClientCert";
export type VpnGatewaySslClientCert = import("./vpnGatewaySslClientCert").VpnGatewaySslClientCert;
export const VpnGatewaySslClientCert: typeof import("./vpnGatewaySslClientCert").VpnGatewaySslClientCert = null as any;
utilities.lazyLoad(exports, ["VpnGatewaySslClientCert"], () => require("./vpnGatewaySslClientCert"));

export { VpnSslClientArgs, VpnSslClientState } from "./vpnSslClient";
export type VpnSslClient = import("./vpnSslClient").VpnSslClient;
export const VpnSslClient: typeof import("./vpnSslClient").VpnSslClient = null as any;
utilities.lazyLoad(exports, ["VpnSslClient"], () => require("./vpnSslClient"));

export { VpnSslServerArgs, VpnSslServerState } from "./vpnSslServer";
export type VpnSslServer = import("./vpnSslServer").VpnSslServer;
export const VpnSslServer: typeof import("./vpnSslServer").VpnSslServer = null as any;
utilities.lazyLoad(exports, ["VpnSslServer"], () => require("./vpnSslServer"));

export { WafAntiFakeArgs, WafAntiFakeState } from "./wafAntiFake";
export type WafAntiFake = import("./wafAntiFake").WafAntiFake;
export const WafAntiFake: typeof import("./wafAntiFake").WafAntiFake = null as any;
utilities.lazyLoad(exports, ["WafAntiFake"], () => require("./wafAntiFake"));

export { WafAntiInfoLeakArgs, WafAntiInfoLeakState } from "./wafAntiInfoLeak";
export type WafAntiInfoLeak = import("./wafAntiInfoLeak").WafAntiInfoLeak;
export const WafAntiInfoLeak: typeof import("./wafAntiInfoLeak").WafAntiInfoLeak = null as any;
utilities.lazyLoad(exports, ["WafAntiInfoLeak"], () => require("./wafAntiInfoLeak"));

export { WafAutoDenyRulesArgs, WafAutoDenyRulesState } from "./wafAutoDenyRules";
export type WafAutoDenyRules = import("./wafAutoDenyRules").WafAutoDenyRules;
export const WafAutoDenyRules: typeof import("./wafAutoDenyRules").WafAutoDenyRules = null as any;
utilities.lazyLoad(exports, ["WafAutoDenyRules"], () => require("./wafAutoDenyRules"));

export { WafCcArgs, WafCcState } from "./wafCc";
export type WafCc = import("./wafCc").WafCc;
export const WafCc: typeof import("./wafCc").WafCc = null as any;
utilities.lazyLoad(exports, ["WafCc"], () => require("./wafCc"));

export { WafCcAutoStatusArgs, WafCcAutoStatusState } from "./wafCcAutoStatus";
export type WafCcAutoStatus = import("./wafCcAutoStatus").WafCcAutoStatus;
export const WafCcAutoStatus: typeof import("./wafCcAutoStatus").WafCcAutoStatus = null as any;
utilities.lazyLoad(exports, ["WafCcAutoStatus"], () => require("./wafCcAutoStatus"));

export { WafCcSessionArgs, WafCcSessionState } from "./wafCcSession";
export type WafCcSession = import("./wafCcSession").WafCcSession;
export const WafCcSession: typeof import("./wafCcSession").WafCcSession = null as any;
utilities.lazyLoad(exports, ["WafCcSession"], () => require("./wafCcSession"));

export { WafClbDomainArgs, WafClbDomainState } from "./wafClbDomain";
export type WafClbDomain = import("./wafClbDomain").WafClbDomain;
export const WafClbDomain: typeof import("./wafClbDomain").WafClbDomain = null as any;
utilities.lazyLoad(exports, ["WafClbDomain"], () => require("./wafClbDomain"));

export { WafClbInstanceArgs, WafClbInstanceState } from "./wafClbInstance";
export type WafClbInstance = import("./wafClbInstance").WafClbInstance;
export const WafClbInstance: typeof import("./wafClbInstance").WafClbInstance = null as any;
utilities.lazyLoad(exports, ["WafClbInstance"], () => require("./wafClbInstance"));

export { WafCustomRuleArgs, WafCustomRuleState } from "./wafCustomRule";
export type WafCustomRule = import("./wafCustomRule").WafCustomRule;
export const WafCustomRule: typeof import("./wafCustomRule").WafCustomRule = null as any;
utilities.lazyLoad(exports, ["WafCustomRule"], () => require("./wafCustomRule"));

export { WafCustomWhiteRuleArgs, WafCustomWhiteRuleState } from "./wafCustomWhiteRule";
export type WafCustomWhiteRule = import("./wafCustomWhiteRule").WafCustomWhiteRule;
export const WafCustomWhiteRule: typeof import("./wafCustomWhiteRule").WafCustomWhiteRule = null as any;
utilities.lazyLoad(exports, ["WafCustomWhiteRule"], () => require("./wafCustomWhiteRule"));

export { WafIpAccessControlArgs, WafIpAccessControlState } from "./wafIpAccessControl";
export type WafIpAccessControl = import("./wafIpAccessControl").WafIpAccessControl;
export const WafIpAccessControl: typeof import("./wafIpAccessControl").WafIpAccessControl = null as any;
utilities.lazyLoad(exports, ["WafIpAccessControl"], () => require("./wafIpAccessControl"));

export { WafModifyAccessPeriodArgs, WafModifyAccessPeriodState } from "./wafModifyAccessPeriod";
export type WafModifyAccessPeriod = import("./wafModifyAccessPeriod").WafModifyAccessPeriod;
export const WafModifyAccessPeriod: typeof import("./wafModifyAccessPeriod").WafModifyAccessPeriod = null as any;
utilities.lazyLoad(exports, ["WafModifyAccessPeriod"], () => require("./wafModifyAccessPeriod"));

export { WafModuleStatusArgs, WafModuleStatusState } from "./wafModuleStatus";
export type WafModuleStatus = import("./wafModuleStatus").WafModuleStatus;
export const WafModuleStatus: typeof import("./wafModuleStatus").WafModuleStatus = null as any;
utilities.lazyLoad(exports, ["WafModuleStatus"], () => require("./wafModuleStatus"));

export { WafProtectionModeArgs, WafProtectionModeState } from "./wafProtectionMode";
export type WafProtectionMode = import("./wafProtectionMode").WafProtectionMode;
export const WafProtectionMode: typeof import("./wafProtectionMode").WafProtectionMode = null as any;
utilities.lazyLoad(exports, ["WafProtectionMode"], () => require("./wafProtectionMode"));

export { WafSaasDomainArgs, WafSaasDomainState } from "./wafSaasDomain";
export type WafSaasDomain = import("./wafSaasDomain").WafSaasDomain;
export const WafSaasDomain: typeof import("./wafSaasDomain").WafSaasDomain = null as any;
utilities.lazyLoad(exports, ["WafSaasDomain"], () => require("./wafSaasDomain"));

export { WafSaasInstanceArgs, WafSaasInstanceState } from "./wafSaasInstance";
export type WafSaasInstance = import("./wafSaasInstance").WafSaasInstance;
export const WafSaasInstance: typeof import("./wafSaasInstance").WafSaasInstance = null as any;
utilities.lazyLoad(exports, ["WafSaasInstance"], () => require("./wafSaasInstance"));

export { WafWebShellArgs, WafWebShellState } from "./wafWebShell";
export type WafWebShell = import("./wafWebShell").WafWebShell;
export const WafWebShell: typeof import("./wafWebShell").WafWebShell = null as any;
utilities.lazyLoad(exports, ["WafWebShell"], () => require("./wafWebShell"));

export { WedataBaselineArgs, WedataBaselineState } from "./wedataBaseline";
export type WedataBaseline = import("./wedataBaseline").WedataBaseline;
export const WedataBaseline: typeof import("./wedataBaseline").WedataBaseline = null as any;
utilities.lazyLoad(exports, ["WedataBaseline"], () => require("./wedataBaseline"));

export { WedataDatasourceArgs, WedataDatasourceState } from "./wedataDatasource";
export type WedataDatasource = import("./wedataDatasource").WedataDatasource;
export const WedataDatasource: typeof import("./wedataDatasource").WedataDatasource = null as any;
utilities.lazyLoad(exports, ["WedataDatasource"], () => require("./wedataDatasource"));

export { WedataDqRuleArgs, WedataDqRuleState } from "./wedataDqRule";
export type WedataDqRule = import("./wedataDqRule").WedataDqRule;
export const WedataDqRule: typeof import("./wedataDqRule").WedataDqRule = null as any;
utilities.lazyLoad(exports, ["WedataDqRule"], () => require("./wedataDqRule"));

export { WedataFunctionArgs, WedataFunctionState } from "./wedataFunction";
export type WedataFunction = import("./wedataFunction").WedataFunction;
export const WedataFunction: typeof import("./wedataFunction").WedataFunction = null as any;
utilities.lazyLoad(exports, ["WedataFunction"], () => require("./wedataFunction"));

export { WedataIntegrationOfflineTaskArgs, WedataIntegrationOfflineTaskState } from "./wedataIntegrationOfflineTask";
export type WedataIntegrationOfflineTask = import("./wedataIntegrationOfflineTask").WedataIntegrationOfflineTask;
export const WedataIntegrationOfflineTask: typeof import("./wedataIntegrationOfflineTask").WedataIntegrationOfflineTask = null as any;
utilities.lazyLoad(exports, ["WedataIntegrationOfflineTask"], () => require("./wedataIntegrationOfflineTask"));

export { WedataIntegrationRealtimeTaskArgs, WedataIntegrationRealtimeTaskState } from "./wedataIntegrationRealtimeTask";
export type WedataIntegrationRealtimeTask = import("./wedataIntegrationRealtimeTask").WedataIntegrationRealtimeTask;
export const WedataIntegrationRealtimeTask: typeof import("./wedataIntegrationRealtimeTask").WedataIntegrationRealtimeTask = null as any;
utilities.lazyLoad(exports, ["WedataIntegrationRealtimeTask"], () => require("./wedataIntegrationRealtimeTask"));

export { WedataIntegrationTaskNodeArgs, WedataIntegrationTaskNodeState } from "./wedataIntegrationTaskNode";
export type WedataIntegrationTaskNode = import("./wedataIntegrationTaskNode").WedataIntegrationTaskNode;
export const WedataIntegrationTaskNode: typeof import("./wedataIntegrationTaskNode").WedataIntegrationTaskNode = null as any;
utilities.lazyLoad(exports, ["WedataIntegrationTaskNode"], () => require("./wedataIntegrationTaskNode"));

export { WedataResourceArgs, WedataResourceState } from "./wedataResource";
export type WedataResource = import("./wedataResource").WedataResource;
export const WedataResource: typeof import("./wedataResource").WedataResource = null as any;
utilities.lazyLoad(exports, ["WedataResource"], () => require("./wedataResource"));

export { WedataRuleTemplateArgs, WedataRuleTemplateState } from "./wedataRuleTemplate";
export type WedataRuleTemplate = import("./wedataRuleTemplate").WedataRuleTemplate;
export const WedataRuleTemplate: typeof import("./wedataRuleTemplate").WedataRuleTemplate = null as any;
utilities.lazyLoad(exports, ["WedataRuleTemplate"], () => require("./wedataRuleTemplate"));

export { WedataScriptArgs, WedataScriptState } from "./wedataScript";
export type WedataScript = import("./wedataScript").WedataScript;
export const WedataScript: typeof import("./wedataScript").WedataScript = null as any;
utilities.lazyLoad(exports, ["WedataScript"], () => require("./wedataScript"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:index/addressTemplate:AddressTemplate":
                return new AddressTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/addressTemplateGroup:AddressTemplateGroup":
                return new AddressTemplateGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/albServerAttachment:AlbServerAttachment":
                return new AlbServerAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosCcBlackWhiteIp:AntiddosCcBlackWhiteIp":
                return new AntiddosCcBlackWhiteIp(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosCcPrecisionPolicy:AntiddosCcPrecisionPolicy":
                return new AntiddosCcPrecisionPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosDdosBlackWhiteIp:AntiddosDdosBlackWhiteIp":
                return new AntiddosDdosBlackWhiteIp(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosDdosGeoIpBlockConfig:AntiddosDdosGeoIpBlockConfig":
                return new AntiddosDdosGeoIpBlockConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosDdosSpeedLimitConfig:AntiddosDdosSpeedLimitConfig":
                return new AntiddosDdosSpeedLimitConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosDefaultAlarmThreshold:AntiddosDefaultAlarmThreshold":
                return new AntiddosDefaultAlarmThreshold(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosIpAlarmThresholdConfig:AntiddosIpAlarmThresholdConfig":
                return new AntiddosIpAlarmThresholdConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosPacketFilterConfig:AntiddosPacketFilterConfig":
                return new AntiddosPacketFilterConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosPortAclConfig:AntiddosPortAclConfig":
                return new AntiddosPortAclConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/antiddosSchedulingDomainUserName:AntiddosSchedulingDomainUserName":
                return new AntiddosSchedulingDomainUserName(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayApi:ApiGatewayApi":
                return new ApiGatewayApi(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayApiApp:ApiGatewayApiApp":
                return new ApiGatewayApiApp(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayApiAppAttachment:ApiGatewayApiAppAttachment":
                return new ApiGatewayApiAppAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayApiDoc:ApiGatewayApiDoc":
                return new ApiGatewayApiDoc(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayApiKey:ApiGatewayApiKey":
                return new ApiGatewayApiKey(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayApiKeyAttachment:ApiGatewayApiKeyAttachment":
                return new ApiGatewayApiKeyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayCustomDomain:ApiGatewayCustomDomain":
                return new ApiGatewayCustomDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayImportOpenApi:ApiGatewayImportOpenApi":
                return new ApiGatewayImportOpenApi(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayIpStrategy:ApiGatewayIpStrategy":
                return new ApiGatewayIpStrategy(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayPlugin:ApiGatewayPlugin":
                return new ApiGatewayPlugin(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayPluginAttachment:ApiGatewayPluginAttachment":
                return new ApiGatewayPluginAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayService:ApiGatewayService":
                return new ApiGatewayService(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayServiceRelease:ApiGatewayServiceRelease":
                return new ApiGatewayServiceRelease(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayStrategyAttachment:ApiGatewayStrategyAttachment":
                return new ApiGatewayStrategyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayUpdateApiAppKey:ApiGatewayUpdateApiAppKey":
                return new ApiGatewayUpdateApiAppKey(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayUpdateService:ApiGatewayUpdateService":
                return new ApiGatewayUpdateService(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayUpstream:ApiGatewayUpstream":
                return new ApiGatewayUpstream(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayUsagePlan:ApiGatewayUsagePlan":
                return new ApiGatewayUsagePlan(name, <any>undefined, { urn })
            case "tencentcloud:index/apiGatewayUsagePlanAttachment:ApiGatewayUsagePlanAttachment":
                return new ApiGatewayUsagePlanAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/apmInstance:ApmInstance":
                return new ApmInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/asAttachment:AsAttachment":
                return new AsAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/asCompleteLifecycle:AsCompleteLifecycle":
                return new AsCompleteLifecycle(name, <any>undefined, { urn })
            case "tencentcloud:index/asExecuteScalingPolicy:AsExecuteScalingPolicy":
                return new AsExecuteScalingPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/asLifecycleHook:AsLifecycleHook":
                return new AsLifecycleHook(name, <any>undefined, { urn })
            case "tencentcloud:index/asLoadBalancer:AsLoadBalancer":
                return new AsLoadBalancer(name, <any>undefined, { urn })
            case "tencentcloud:index/asNotification:AsNotification":
                return new AsNotification(name, <any>undefined, { urn })
            case "tencentcloud:index/asProtectInstances:AsProtectInstances":
                return new AsProtectInstances(name, <any>undefined, { urn })
            case "tencentcloud:index/asRemoveInstances:AsRemoveInstances":
                return new AsRemoveInstances(name, <any>undefined, { urn })
            case "tencentcloud:index/asScaleInInstances:AsScaleInInstances":
                return new AsScaleInInstances(name, <any>undefined, { urn })
            case "tencentcloud:index/asScaleOutInstances:AsScaleOutInstances":
                return new AsScaleOutInstances(name, <any>undefined, { urn })
            case "tencentcloud:index/asScalingConfig:AsScalingConfig":
                return new AsScalingConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/asScalingGroup:AsScalingGroup":
                return new AsScalingGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/asScalingGroupStatus:AsScalingGroupStatus":
                return new AsScalingGroupStatus(name, <any>undefined, { urn })
            case "tencentcloud:index/asScalingPolicy:AsScalingPolicy":
                return new AsScalingPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/asSchedule:AsSchedule":
                return new AsSchedule(name, <any>undefined, { urn })
            case "tencentcloud:index/asStartInstances:AsStartInstances":
                return new AsStartInstances(name, <any>undefined, { urn })
            case "tencentcloud:index/asStopInstances:AsStopInstances":
                return new AsStopInstances(name, <any>undefined, { urn })
            case "tencentcloud:index/audit:Audit":
                return new Audit(name, <any>undefined, { urn })
            case "tencentcloud:index/auditTrack:AuditTrack":
                return new AuditTrack(name, <any>undefined, { urn })
            case "tencentcloud:index/biDatasource:BiDatasource":
                return new BiDatasource(name, <any>undefined, { urn })
            case "tencentcloud:index/biDatasourceCloud:BiDatasourceCloud":
                return new BiDatasourceCloud(name, <any>undefined, { urn })
            case "tencentcloud:index/biEmbedIntervalApply:BiEmbedIntervalApply":
                return new BiEmbedIntervalApply(name, <any>undefined, { urn })
            case "tencentcloud:index/biEmbedTokenApply:BiEmbedTokenApply":
                return new BiEmbedTokenApply(name, <any>undefined, { urn })
            case "tencentcloud:index/biProject:BiProject":
                return new BiProject(name, <any>undefined, { urn })
            case "tencentcloud:index/biProjectUserRole:BiProjectUserRole":
                return new BiProjectUserRole(name, <any>undefined, { urn })
            case "tencentcloud:index/biUserRole:BiUserRole":
                return new BiUserRole(name, <any>undefined, { urn })
            case "tencentcloud:index/camAccessKey:CamAccessKey":
                return new CamAccessKey(name, <any>undefined, { urn })
            case "tencentcloud:index/camGroup:CamGroup":
                return new CamGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/camGroupMembership:CamGroupMembership":
                return new CamGroupMembership(name, <any>undefined, { urn })
            case "tencentcloud:index/camGroupPolicyAttachment:CamGroupPolicyAttachment":
                return new CamGroupPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/camMfaFlag:CamMfaFlag":
                return new CamMfaFlag(name, <any>undefined, { urn })
            case "tencentcloud:index/camOidcSso:CamOidcSso":
                return new CamOidcSso(name, <any>undefined, { urn })
            case "tencentcloud:index/camPolicy:CamPolicy":
                return new CamPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/camPolicyByName:CamPolicyByName":
                return new CamPolicyByName(name, <any>undefined, { urn })
            case "tencentcloud:index/camPolicyVersion:CamPolicyVersion":
                return new CamPolicyVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/camRole:CamRole":
                return new CamRole(name, <any>undefined, { urn })
            case "tencentcloud:index/camRoleByName:CamRoleByName":
                return new CamRoleByName(name, <any>undefined, { urn })
            case "tencentcloud:index/camRolePermissionBoundaryAttachment:CamRolePermissionBoundaryAttachment":
                return new CamRolePermissionBoundaryAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/camRolePolicyAttachment:CamRolePolicyAttachment":
                return new CamRolePolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/camRolePolicyAttachmentByName:CamRolePolicyAttachmentByName":
                return new CamRolePolicyAttachmentByName(name, <any>undefined, { urn })
            case "tencentcloud:index/camRoleSso:CamRoleSso":
                return new CamRoleSso(name, <any>undefined, { urn })
            case "tencentcloud:index/camSamlProvider:CamSamlProvider":
                return new CamSamlProvider(name, <any>undefined, { urn })
            case "tencentcloud:index/camServiceLinkedRole:CamServiceLinkedRole":
                return new CamServiceLinkedRole(name, <any>undefined, { urn })
            case "tencentcloud:index/camSetPolicyVersionConfig:CamSetPolicyVersionConfig":
                return new CamSetPolicyVersionConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/camTagRoleAttachment:CamTagRoleAttachment":
                return new CamTagRoleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/camUser:CamUser":
                return new CamUser(name, <any>undefined, { urn })
            case "tencentcloud:index/camUserPermissionBoundaryAttachment:CamUserPermissionBoundaryAttachment":
                return new CamUserPermissionBoundaryAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/camUserPolicyAttachment:CamUserPolicyAttachment":
                return new CamUserPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/camUserSamlConfig:CamUserSamlConfig":
                return new CamUserSamlConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/catTaskSet:CatTaskSet":
                return new CatTaskSet(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsDiskBackup:CbsDiskBackup":
                return new CbsDiskBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsDiskBackupRollbackOperation:CbsDiskBackupRollbackOperation":
                return new CbsDiskBackupRollbackOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsSnapshot:CbsSnapshot":
                return new CbsSnapshot(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsSnapshotPolicy:CbsSnapshotPolicy":
                return new CbsSnapshotPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsSnapshotPolicyAttachment:CbsSnapshotPolicyAttachment":
                return new CbsSnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsSnapshotSharePermission:CbsSnapshotSharePermission":
                return new CbsSnapshotSharePermission(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsStorage:CbsStorage":
                return new CbsStorage(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsStorageAttachment:CbsStorageAttachment":
                return new CbsStorageAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsStorageSet:CbsStorageSet":
                return new CbsStorageSet(name, <any>undefined, { urn })
            case "tencentcloud:index/cbsStorageSetAttachment:CbsStorageSetAttachment":
                return new CbsStorageSetAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/ccn:Ccn":
                return new Ccn(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnAttachment:CcnAttachment":
                return new CcnAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnBandwidthLimit:CcnBandwidthLimit":
                return new CcnBandwidthLimit(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnInstancesAcceptAttach:CcnInstancesAcceptAttach":
                return new CcnInstancesAcceptAttach(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnInstancesRejectAttach:CcnInstancesRejectAttach":
                return new CcnInstancesRejectAttach(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnInstancesResetAttach:CcnInstancesResetAttach":
                return new CcnInstancesResetAttach(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnRouteTable:CcnRouteTable":
                return new CcnRouteTable(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnRouteTableAssociateInstanceConfig:CcnRouteTableAssociateInstanceConfig":
                return new CcnRouteTableAssociateInstanceConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnRouteTableBroadcastPolicies:CcnRouteTableBroadcastPolicies":
                return new CcnRouteTableBroadcastPolicies(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnRouteTableInputPolicies:CcnRouteTableInputPolicies":
                return new CcnRouteTableInputPolicies(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnRouteTableSelectionPolicies:CcnRouteTableSelectionPolicies":
                return new CcnRouteTableSelectionPolicies(name, <any>undefined, { urn })
            case "tencentcloud:index/ccnRoutes:CcnRoutes":
                return new CcnRoutes(name, <any>undefined, { urn })
            case "tencentcloud:index/cdcDedicatedCluster:CdcDedicatedCluster":
                return new CdcDedicatedCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/cdcSite:CdcSite":
                return new CdcSite(name, <any>undefined, { urn })
            case "tencentcloud:index/cdhInstance:CdhInstance":
                return new CdhInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cdnDomain:CdnDomain":
                return new CdnDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/cdnUrlPurge:CdnUrlPurge":
                return new CdnUrlPurge(name, <any>undefined, { urn })
            case "tencentcloud:index/cdnUrlPush:CdnUrlPush":
                return new CdnUrlPush(name, <any>undefined, { urn })
            case "tencentcloud:index/cdwdorisInstance:CdwdorisInstance":
                return new CdwdorisInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cdwdorisWorkloadGroup:CdwdorisWorkloadGroup":
                return new CdwdorisWorkloadGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/cdwpgInstance:CdwpgInstance":
                return new CdwpgInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsAccessGroup:CfsAccessGroup":
                return new CfsAccessGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsAccessRule:CfsAccessRule":
                return new CfsAccessRule(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsAutoSnapshotPolicy:CfsAutoSnapshotPolicy":
                return new CfsAutoSnapshotPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsAutoSnapshotPolicyAttachment:CfsAutoSnapshotPolicyAttachment":
                return new CfsAutoSnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsFileSystem:CfsFileSystem":
                return new CfsFileSystem(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsSignUpCfsService:CfsSignUpCfsService":
                return new CfsSignUpCfsService(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsSnapshot:CfsSnapshot":
                return new CfsSnapshot(name, <any>undefined, { urn })
            case "tencentcloud:index/cfsUserQuota:CfsUserQuota":
                return new CfsUserQuota(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwAddressTemplate:CfwAddressTemplate":
                return new CfwAddressTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwBlockIgnore:CfwBlockIgnore":
                return new CfwBlockIgnore(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwEdgeFirewallSwitch:CfwEdgeFirewallSwitch":
                return new CfwEdgeFirewallSwitch(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwEdgePolicy:CfwEdgePolicy":
                return new CfwEdgePolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwNatFirewallSwitch:CfwNatFirewallSwitch":
                return new CfwNatFirewallSwitch(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwNatInstance:CfwNatInstance":
                return new CfwNatInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwNatPolicy:CfwNatPolicy":
                return new CfwNatPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwSyncAsset:CfwSyncAsset":
                return new CfwSyncAsset(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwSyncRoute:CfwSyncRoute":
                return new CfwSyncRoute(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwVpcFirewallSwitch:CfwVpcFirewallSwitch":
                return new CfwVpcFirewallSwitch(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwVpcInstance:CfwVpcInstance":
                return new CfwVpcInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cfwVpcPolicy:CfwVpcPolicy":
                return new CfwVpcPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/chdfsAccessGroup:ChdfsAccessGroup":
                return new ChdfsAccessGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/chdfsAccessRule:ChdfsAccessRule":
                return new ChdfsAccessRule(name, <any>undefined, { urn })
            case "tencentcloud:index/chdfsFileSystem:ChdfsFileSystem":
                return new ChdfsFileSystem(name, <any>undefined, { urn })
            case "tencentcloud:index/chdfsLifeCycleRule:ChdfsLifeCycleRule":
                return new ChdfsLifeCycleRule(name, <any>undefined, { urn })
            case "tencentcloud:index/chdfsMountPoint:ChdfsMountPoint":
                return new ChdfsMountPoint(name, <any>undefined, { urn })
            case "tencentcloud:index/chdfsMountPointAttachment:ChdfsMountPointAttachment":
                return new ChdfsMountPointAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/ciBucketAttachment:CiBucketAttachment":
                return new CiBucketAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/ciBucketPicStyle:CiBucketPicStyle":
                return new CiBucketPicStyle(name, <any>undefined, { urn })
            case "tencentcloud:index/ciGuetzli:CiGuetzli":
                return new CiGuetzli(name, <any>undefined, { urn })
            case "tencentcloud:index/ciHotLink:CiHotLink":
                return new CiHotLink(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaAnimationTemplate:CiMediaAnimationTemplate":
                return new CiMediaAnimationTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaConcatTemplate:CiMediaConcatTemplate":
                return new CiMediaConcatTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaPicProcessTemplate:CiMediaPicProcessTemplate":
                return new CiMediaPicProcessTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaSmartCoverTemplate:CiMediaSmartCoverTemplate":
                return new CiMediaSmartCoverTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaSnapshotTemplate:CiMediaSnapshotTemplate":
                return new CiMediaSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaSpeechRecognitionTemplate:CiMediaSpeechRecognitionTemplate":
                return new CiMediaSpeechRecognitionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaSuperResolutionTemplate:CiMediaSuperResolutionTemplate":
                return new CiMediaSuperResolutionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaTranscodeProTemplate:CiMediaTranscodeProTemplate":
                return new CiMediaTranscodeProTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaTranscodeTemplate:CiMediaTranscodeTemplate":
                return new CiMediaTranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaTtsTemplate:CiMediaTtsTemplate":
                return new CiMediaTtsTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaVideoMontageTemplate:CiMediaVideoMontageTemplate":
                return new CiMediaVideoMontageTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaVideoProcessTemplate:CiMediaVideoProcessTemplate":
                return new CiMediaVideoProcessTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaVoiceSeparateTemplate:CiMediaVoiceSeparateTemplate":
                return new CiMediaVoiceSeparateTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciMediaWatermarkTemplate:CiMediaWatermarkTemplate":
                return new CiMediaWatermarkTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/ciOriginalImageProtection:CiOriginalImageProtection":
                return new CiOriginalImageProtection(name, <any>undefined, { urn })
            case "tencentcloud:index/ciamUserGroup:CiamUserGroup":
                return new CiamUserGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/ciamUserStore:CiamUserStore":
                return new CiamUserStore(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaAcl:CkafkaAcl":
                return new CkafkaAcl(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaAclRule:CkafkaAclRule":
                return new CkafkaAclRule(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaConnectResource:CkafkaConnectResource":
                return new CkafkaConnectResource(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaConsumerGroup:CkafkaConsumerGroup":
                return new CkafkaConsumerGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaConsumerGroupModifyOffset:CkafkaConsumerGroupModifyOffset":
                return new CkafkaConsumerGroupModifyOffset(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaDatahubTask:CkafkaDatahubTask":
                return new CkafkaDatahubTask(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaDatahubTopic:CkafkaDatahubTopic":
                return new CkafkaDatahubTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaInstance:CkafkaInstance":
                return new CkafkaInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaRenewInstance:CkafkaRenewInstance":
                return new CkafkaRenewInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaRoute:CkafkaRoute":
                return new CkafkaRoute(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaTopic:CkafkaTopic":
                return new CkafkaTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/ckafkaUser:CkafkaUser":
                return new CkafkaUser(name, <any>undefined, { urn })
            case "tencentcloud:index/clbAttachment:ClbAttachment":
                return new ClbAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/clbCustomizedConfig:ClbCustomizedConfig":
                return new ClbCustomizedConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/clbFunctionTargetsAttachment:ClbFunctionTargetsAttachment":
                return new ClbFunctionTargetsAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/clbInstance:ClbInstance":
                return new ClbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/clbInstanceMixIpTargetConfig:ClbInstanceMixIpTargetConfig":
                return new ClbInstanceMixIpTargetConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/clbInstanceSlaConfig:ClbInstanceSlaConfig":
                return new ClbInstanceSlaConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/clbListener:ClbListener":
                return new ClbListener(name, <any>undefined, { urn })
            case "tencentcloud:index/clbListenerRule:ClbListenerRule":
                return new ClbListenerRule(name, <any>undefined, { urn })
            case "tencentcloud:index/clbLogSet:ClbLogSet":
                return new ClbLogSet(name, <any>undefined, { urn })
            case "tencentcloud:index/clbLogTopic:ClbLogTopic":
                return new ClbLogTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/clbRedirection:ClbRedirection":
                return new ClbRedirection(name, <any>undefined, { urn })
            case "tencentcloud:index/clbReplaceCertForLbs:ClbReplaceCertForLbs":
                return new ClbReplaceCertForLbs(name, <any>undefined, { urn })
            case "tencentcloud:index/clbSecurityGroupAttachment:ClbSecurityGroupAttachment":
                return new ClbSecurityGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/clbSnatIp:ClbSnatIp":
                return new ClbSnatIp(name, <any>undefined, { urn })
            case "tencentcloud:index/clbTargetGroup:ClbTargetGroup":
                return new ClbTargetGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/clbTargetGroupAttachment:ClbTargetGroupAttachment":
                return new ClbTargetGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/clbTargetGroupAttachments:ClbTargetGroupAttachments":
                return new ClbTargetGroupAttachments(name, <any>undefined, { urn })
            case "tencentcloud:index/clbTargetGroupInstanceAttachment:ClbTargetGroupInstanceAttachment":
                return new ClbTargetGroupInstanceAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseAccount:ClickhouseAccount":
                return new ClickhouseAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseAccountPermission:ClickhouseAccountPermission":
                return new ClickhouseAccountPermission(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseBackup:ClickhouseBackup":
                return new ClickhouseBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseBackupStrategy:ClickhouseBackupStrategy":
                return new ClickhouseBackupStrategy(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseDeleteBackupData:ClickhouseDeleteBackupData":
                return new ClickhouseDeleteBackupData(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseInstance:ClickhouseInstance":
                return new ClickhouseInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseKeyvalConfig:ClickhouseKeyvalConfig":
                return new ClickhouseKeyvalConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseRecoverBackupJob:ClickhouseRecoverBackupJob":
                return new ClickhouseRecoverBackupJob(name, <any>undefined, { urn })
            case "tencentcloud:index/clickhouseXmlConfig:ClickhouseXmlConfig":
                return new ClickhouseXmlConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/clsAlarm:ClsAlarm":
                return new ClsAlarm(name, <any>undefined, { urn })
            case "tencentcloud:index/clsAlarmNotice:ClsAlarmNotice":
                return new ClsAlarmNotice(name, <any>undefined, { urn })
            case "tencentcloud:index/clsCkafkaConsumer:ClsCkafkaConsumer":
                return new ClsCkafkaConsumer(name, <any>undefined, { urn })
            case "tencentcloud:index/clsConfig:ClsConfig":
                return new ClsConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/clsConfigAttachment:ClsConfigAttachment":
                return new ClsConfigAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/clsConfigExtra:ClsConfigExtra":
                return new ClsConfigExtra(name, <any>undefined, { urn })
            case "tencentcloud:index/clsCosRecharge:ClsCosRecharge":
                return new ClsCosRecharge(name, <any>undefined, { urn })
            case "tencentcloud:index/clsCosShipper:ClsCosShipper":
                return new ClsCosShipper(name, <any>undefined, { urn })
            case "tencentcloud:index/clsDataTransform:ClsDataTransform":
                return new ClsDataTransform(name, <any>undefined, { urn })
            case "tencentcloud:index/clsExport:ClsExport":
                return new ClsExport(name, <any>undefined, { urn })
            case "tencentcloud:index/clsIndex:ClsIndex":
                return new ClsIndex(name, <any>undefined, { urn })
            case "tencentcloud:index/clsKafkaRecharge:ClsKafkaRecharge":
                return new ClsKafkaRecharge(name, <any>undefined, { urn })
            case "tencentcloud:index/clsLogset:ClsLogset":
                return new ClsLogset(name, <any>undefined, { urn })
            case "tencentcloud:index/clsMachineGroup:ClsMachineGroup":
                return new ClsMachineGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/clsScheduledSql:ClsScheduledSql":
                return new ClsScheduledSql(name, <any>undefined, { urn })
            case "tencentcloud:index/clsTopic:ClsTopic":
                return new ClsTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/containerCluster:ContainerCluster":
                return new ContainerCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/containerClusterInstance:ContainerClusterInstance":
                return new ContainerClusterInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBatch:CosBatch":
                return new CosBatch(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucket:CosBucket":
                return new CosBucket(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketDomainCertificateAttachment:CosBucketDomainCertificateAttachment":
                return new CosBucketDomainCertificateAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketGenerateInventoryImmediatelyOperation:CosBucketGenerateInventoryImmediatelyOperation":
                return new CosBucketGenerateInventoryImmediatelyOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketInventory:CosBucketInventory":
                return new CosBucketInventory(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketObject:CosBucketObject":
                return new CosBucketObject(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketPolicy:CosBucketPolicy":
                return new CosBucketPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketReferer:CosBucketReferer":
                return new CosBucketReferer(name, <any>undefined, { urn })
            case "tencentcloud:index/cosBucketVersion:CosBucketVersion":
                return new CosBucketVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/cosObjectAbortMultipartUploadOperation:CosObjectAbortMultipartUploadOperation":
                return new CosObjectAbortMultipartUploadOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/cosObjectCopyOperation:CosObjectCopyOperation":
                return new CosObjectCopyOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/cosObjectDownloadOperation:CosObjectDownloadOperation":
                return new CosObjectDownloadOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/cosObjectRestoreOperation:CosObjectRestoreOperation":
                return new CosObjectRestoreOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/csipRiskCenter:CsipRiskCenter":
                return new CsipRiskCenter(name, <any>undefined, { urn })
            case "tencentcloud:index/cssAuthenticateDomainOwnerOperation:CssAuthenticateDomainOwnerOperation":
                return new CssAuthenticateDomainOwnerOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/cssBackupStream:CssBackupStream":
                return new CssBackupStream(name, <any>undefined, { urn })
            case "tencentcloud:index/cssCallbackRuleAttachment:CssCallbackRuleAttachment":
                return new CssCallbackRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssCallbackTemplate:CssCallbackTemplate":
                return new CssCallbackTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cssDomain:CssDomain":
                return new CssDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/cssDomainReferer:CssDomainReferer":
                return new CssDomainReferer(name, <any>undefined, { urn })
            case "tencentcloud:index/cssEnableOptimalSwitching:CssEnableOptimalSwitching":
                return new CssEnableOptimalSwitching(name, <any>undefined, { urn })
            case "tencentcloud:index/cssLiveTranscodeRuleAttachment:CssLiveTranscodeRuleAttachment":
                return new CssLiveTranscodeRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssLiveTranscodeTemplate:CssLiveTranscodeTemplate":
                return new CssLiveTranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPadRuleAttachment:CssPadRuleAttachment":
                return new CssPadRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPadTemplate:CssPadTemplate":
                return new CssPadTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPlayAuthKeyConfig:CssPlayAuthKeyConfig":
                return new CssPlayAuthKeyConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPlayDomainCertAttachment:CssPlayDomainCertAttachment":
                return new CssPlayDomainCertAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPullStreamTask:CssPullStreamTask":
                return new CssPullStreamTask(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPullStreamTaskRestart:CssPullStreamTaskRestart":
                return new CssPullStreamTaskRestart(name, <any>undefined, { urn })
            case "tencentcloud:index/cssPushAuthKeyConfig:CssPushAuthKeyConfig":
                return new CssPushAuthKeyConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/cssRecordRuleAttachment:CssRecordRuleAttachment":
                return new CssRecordRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssRecordTemplate:CssRecordTemplate":
                return new CssRecordTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cssSnapshotRuleAttachment:CssSnapshotRuleAttachment":
                return new CssSnapshotRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssSnapshotTemplate:CssSnapshotTemplate":
                return new CssSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cssStartStreamMonitor:CssStartStreamMonitor":
                return new CssStartStreamMonitor(name, <any>undefined, { urn })
            case "tencentcloud:index/cssStreamMonitor:CssStreamMonitor":
                return new CssStreamMonitor(name, <any>undefined, { urn })
            case "tencentcloud:index/cssTimeshiftRuleAttachment:CssTimeshiftRuleAttachment":
                return new CssTimeshiftRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cssTimeshiftTemplate:CssTimeshiftTemplate":
                return new CssTimeshiftTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cssWatermark:CssWatermark":
                return new CssWatermark(name, <any>undefined, { urn })
            case "tencentcloud:index/cssWatermarkRuleAttachment:CssWatermarkRuleAttachment":
                return new CssWatermarkRuleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmChcConfig:CvmChcConfig":
                return new CvmChcConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmExportImages:CvmExportImages":
                return new CvmExportImages(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmHpcCluster:CvmHpcCluster":
                return new CvmHpcCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmImageSharePermission:CvmImageSharePermission":
                return new CvmImageSharePermission(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmImportImage:CvmImportImage":
                return new CvmImportImage(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmLaunchTemplate:CvmLaunchTemplate":
                return new CvmLaunchTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmLaunchTemplateDefaultVersion:CvmLaunchTemplateDefaultVersion":
                return new CvmLaunchTemplateDefaultVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmLaunchTemplateVersion:CvmLaunchTemplateVersion":
                return new CvmLaunchTemplateVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmModifyInstanceDiskType:CvmModifyInstanceDiskType":
                return new CvmModifyInstanceDiskType(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmProgramFpgaImage:CvmProgramFpgaImage":
                return new CvmProgramFpgaImage(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmRebootInstance:CvmRebootInstance":
                return new CvmRebootInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmRenewHost:CvmRenewHost":
                return new CvmRenewHost(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmRenewInstance:CvmRenewInstance":
                return new CvmRenewInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmSecurityGroupAttachment:CvmSecurityGroupAttachment":
                return new CvmSecurityGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cvmSyncImage:CvmSyncImage":
                return new CvmSyncImage(name, <any>undefined, { urn })
            case "tencentcloud:index/cwpLicenseBindAttachment:CwpLicenseBindAttachment":
                return new CwpLicenseBindAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cwpLicenseOrder:CwpLicenseOrder":
                return new CwpLicenseOrder(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbAccount:CynosdbAccount":
                return new CynosdbAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbAccountPrivileges:CynosdbAccountPrivileges":
                return new CynosdbAccountPrivileges(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbAuditLogFile:CynosdbAuditLogFile":
                return new CynosdbAuditLogFile(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbBinlogSaveDays:CynosdbBinlogSaveDays":
                return new CynosdbBinlogSaveDays(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbCluster:CynosdbCluster":
                return new CynosdbCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbClusterDatabases:CynosdbClusterDatabases":
                return new CynosdbClusterDatabases(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbClusterPasswordComplexity:CynosdbClusterPasswordComplexity":
                return new CynosdbClusterPasswordComplexity(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbClusterResourcePackagesAttachment:CynosdbClusterResourcePackagesAttachment":
                return new CynosdbClusterResourcePackagesAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbClusterSlaveZone:CynosdbClusterSlaveZone":
                return new CynosdbClusterSlaveZone(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbExportInstanceErrorLogs:CynosdbExportInstanceErrorLogs":
                return new CynosdbExportInstanceErrorLogs(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbExportInstanceSlowQueries:CynosdbExportInstanceSlowQueries":
                return new CynosdbExportInstanceSlowQueries(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbInstanceParam:CynosdbInstanceParam":
                return new CynosdbInstanceParam(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbIsolateInstance:CynosdbIsolateInstance":
                return new CynosdbIsolateInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbParamTemplate:CynosdbParamTemplate":
                return new CynosdbParamTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbProxy:CynosdbProxy":
                return new CynosdbProxy(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbProxyEndPoint:CynosdbProxyEndPoint":
                return new CynosdbProxyEndPoint(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbReadOnlyInstanceExclusiveAccess:CynosdbReadOnlyInstanceExclusiveAccess":
                return new CynosdbReadOnlyInstanceExclusiveAccess(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbReadonlyInstance:CynosdbReadonlyInstance":
                return new CynosdbReadonlyInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbReloadProxyNode:CynosdbReloadProxyNode":
                return new CynosdbReloadProxyNode(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbResourcePackage:CynosdbResourcePackage":
                return new CynosdbResourcePackage(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbRestartInstance:CynosdbRestartInstance":
                return new CynosdbRestartInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbRollBackCluster:CynosdbRollBackCluster":
                return new CynosdbRollBackCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbSecurityGroup:CynosdbSecurityGroup":
                return new CynosdbSecurityGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbUpgradeProxyVersion:CynosdbUpgradeProxyVersion":
                return new CynosdbUpgradeProxyVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/cynosdbWan:CynosdbWan":
                return new CynosdbWan(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbAcl:DasbAcl":
                return new DasbAcl(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbBindDeviceAccountPassword:DasbBindDeviceAccountPassword":
                return new DasbBindDeviceAccountPassword(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbBindDeviceAccountPrivateKey:DasbBindDeviceAccountPrivateKey":
                return new DasbBindDeviceAccountPrivateKey(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbBindDeviceResource:DasbBindDeviceResource":
                return new DasbBindDeviceResource(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbCmdTemplate:DasbCmdTemplate":
                return new DasbCmdTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbDevice:DasbDevice":
                return new DasbDevice(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbDeviceAccount:DasbDeviceAccount":
                return new DasbDeviceAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbDeviceGroup:DasbDeviceGroup":
                return new DasbDeviceGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbDeviceGroupMembers:DasbDeviceGroupMembers":
                return new DasbDeviceGroupMembers(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbResetUser:DasbResetUser":
                return new DasbResetUser(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbResource:DasbResource":
                return new DasbResource(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbUser:DasbUser":
                return new DasbUser(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbUserGroup:DasbUserGroup":
                return new DasbUserGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/dasbUserGroupMembers:DasbUserGroupMembers":
                return new DasbUserGroupMembers(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuCcHttpPolicy:DayuCcHttpPolicy":
                return new DayuCcHttpPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuCcHttpsPolicy:DayuCcHttpsPolicy":
                return new DayuCcHttpsPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuCcPolicyV2:DayuCcPolicyV2":
                return new DayuCcPolicyV2(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuDdosIpAttachmentV2:DayuDdosIpAttachmentV2":
                return new DayuDdosIpAttachmentV2(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuDdosPolicy:DayuDdosPolicy":
                return new DayuDdosPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuDdosPolicyAttachment:DayuDdosPolicyAttachment":
                return new DayuDdosPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuDdosPolicyCase:DayuDdosPolicyCase":
                return new DayuDdosPolicyCase(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuDdosPolicyV2:DayuDdosPolicyV2":
                return new DayuDdosPolicyV2(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuEip:DayuEip":
                return new DayuEip(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuL4Rule:DayuL4Rule":
                return new DayuL4Rule(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuL4RuleV2:DayuL4RuleV2":
                return new DayuL4RuleV2(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuL7Rule:DayuL7Rule":
                return new DayuL7Rule(name, <any>undefined, { urn })
            case "tencentcloud:index/dayuL7RuleV2:DayuL7RuleV2":
                return new DayuL7RuleV2(name, <any>undefined, { urn })
            case "tencentcloud:index/dbbrainDbDiagReportTask:DbbrainDbDiagReportTask":
                return new DbbrainDbDiagReportTask(name, <any>undefined, { urn })
            case "tencentcloud:index/dbbrainModifyDiagDbInstanceOperation:DbbrainModifyDiagDbInstanceOperation":
                return new DbbrainModifyDiagDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dbbrainSecurityAuditLogExportTask:DbbrainSecurityAuditLogExportTask":
                return new DbbrainSecurityAuditLogExportTask(name, <any>undefined, { urn })
            case "tencentcloud:index/dbbrainSqlFilter:DbbrainSqlFilter":
                return new DbbrainSqlFilter(name, <any>undefined, { urn })
            case "tencentcloud:index/dbbrainTdsqlAuditLog:DbbrainTdsqlAuditLog":
                return new DbbrainTdsqlAuditLog(name, <any>undefined, { urn })
            case "tencentcloud:index/dcGateway:DcGateway":
                return new DcGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/dcGatewayAttachment:DcGatewayAttachment":
                return new DcGatewayAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/dcGatewayCcnRoute:DcGatewayCcnRoute":
                return new DcGatewayCcnRoute(name, <any>undefined, { urn })
            case "tencentcloud:index/dcInstance:DcInstance":
                return new DcInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/dcInternetAddress:DcInternetAddress":
                return new DcInternetAddress(name, <any>undefined, { urn })
            case "tencentcloud:index/dcInternetAddressConfig:DcInternetAddressConfig":
                return new DcInternetAddressConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dcShareDcxConfig:DcShareDcxConfig":
                return new DcShareDcxConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbAccount:DcdbAccount":
                return new DcdbAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbAccountPrivileges:DcdbAccountPrivileges":
                return new DcdbAccountPrivileges(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbActivateHourInstanceOperation:DcdbActivateHourInstanceOperation":
                return new DcdbActivateHourInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbCancelDcnJobOperation:DcdbCancelDcnJobOperation":
                return new DcdbCancelDcnJobOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbDbInstance:DcdbDbInstance":
                return new DcdbDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbDbParameters:DcdbDbParameters":
                return new DcdbDbParameters(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbDbSyncModeConfig:DcdbDbSyncModeConfig":
                return new DcdbDbSyncModeConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbEncryptAttributesConfig:DcdbEncryptAttributesConfig":
                return new DcdbEncryptAttributesConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbFlushBinlogOperation:DcdbFlushBinlogOperation":
                return new DcdbFlushBinlogOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbHourdbInstance:DcdbHourdbInstance":
                return new DcdbHourdbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbInstanceConfig:DcdbInstanceConfig":
                return new DcdbInstanceConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbIsolateHourInstanceOperation:DcdbIsolateHourInstanceOperation":
                return new DcdbIsolateHourInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbSecurityGroupAttachment:DcdbSecurityGroupAttachment":
                return new DcdbSecurityGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/dcdbSwitchDbInstanceHaOperation:DcdbSwitchDbInstanceHaOperation":
                return new DcdbSwitchDbInstanceHaOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dcx:Dcx":
                return new Dcx(name, <any>undefined, { urn })
            case "tencentcloud:index/dcxExtraConfig:DcxExtraConfig":
                return new DcxExtraConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcAddUsersToWorkGroupAttachment:DlcAddUsersToWorkGroupAttachment":
                return new DlcAddUsersToWorkGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcAttachUserPolicyOperation:DlcAttachUserPolicyOperation":
                return new DlcAttachUserPolicyOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcAttachWorkGroupPolicyOperation:DlcAttachWorkGroupPolicyOperation":
                return new DlcAttachWorkGroupPolicyOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcBindWorkGroupsToUserAttachment:DlcBindWorkGroupsToUserAttachment":
                return new DlcBindWorkGroupsToUserAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcDataEngine:DlcDataEngine":
                return new DlcDataEngine(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcDetachUserPolicyOperation:DlcDetachUserPolicyOperation":
                return new DlcDetachUserPolicyOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcDetachWorkGroupPolicyOperation:DlcDetachWorkGroupPolicyOperation":
                return new DlcDetachWorkGroupPolicyOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcModifyDataEngineDescriptionOperation:DlcModifyDataEngineDescriptionOperation":
                return new DlcModifyDataEngineDescriptionOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcModifyUserTypOperation:DlcModifyUserTypOperation":
                return new DlcModifyUserTypOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcRenewDataEngineOperation:DlcRenewDataEngineOperation":
                return new DlcRenewDataEngineOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcRestartDataEngineOperation:DlcRestartDataEngineOperation":
                return new DlcRestartDataEngineOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcRollbackDataEngineImageOperation:DlcRollbackDataEngineImageOperation":
                return new DlcRollbackDataEngineImageOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcStoreLocationConfig:DlcStoreLocationConfig":
                return new DlcStoreLocationConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcSuspendResumeDataEngine:DlcSuspendResumeDataEngine":
                return new DlcSuspendResumeDataEngine(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcSwitchDataEngineImageOperation:DlcSwitchDataEngineImageOperation":
                return new DlcSwitchDataEngineImageOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcUpdateDataEngineConfigOperation:DlcUpdateDataEngineConfigOperation":
                return new DlcUpdateDataEngineConfigOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcUpdateRowFilterOperation:DlcUpdateRowFilterOperation":
                return new DlcUpdateRowFilterOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcUpgradeDataEngineImageOperation:DlcUpgradeDataEngineImageOperation":
                return new DlcUpgradeDataEngineImageOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcUser:DlcUser":
                return new DlcUser(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcUserDataEngineConfig:DlcUserDataEngineConfig":
                return new DlcUserDataEngineConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dlcWorkGroup:DlcWorkGroup":
                return new DlcWorkGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/dnat:Dnat":
                return new Dnat(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodCustomLine:DnspodCustomLine":
                return new DnspodCustomLine(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodDomainAlias:DnspodDomainAlias":
                return new DnspodDomainAlias(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodDomainInstance:DnspodDomainInstance":
                return new DnspodDomainInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodDomainLock:DnspodDomainLock":
                return new DnspodDomainLock(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodDownloadSnapshotOperation:DnspodDownloadSnapshotOperation":
                return new DnspodDownloadSnapshotOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodModifyDomainOwnerOperation:DnspodModifyDomainOwnerOperation":
                return new DnspodModifyDomainOwnerOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodModifyRecordGroupOperation:DnspodModifyRecordGroupOperation":
                return new DnspodModifyRecordGroupOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodRecord:DnspodRecord":
                return new DnspodRecord(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodRecordGroup:DnspodRecordGroup":
                return new DnspodRecordGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/dnspodSnapshotConfig:DnspodSnapshotConfig":
                return new DnspodSnapshotConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsCompareTask:DtsCompareTask":
                return new DtsCompareTask(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsCompareTaskStopOperation:DtsCompareTaskStopOperation":
                return new DtsCompareTaskStopOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsMigrateJob:DtsMigrateJob":
                return new DtsMigrateJob(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsMigrateJobConfig:DtsMigrateJobConfig":
                return new DtsMigrateJobConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsMigrateJobResumeOperation:DtsMigrateJobResumeOperation":
                return new DtsMigrateJobResumeOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsMigrateJobStartOperation:DtsMigrateJobStartOperation":
                return new DtsMigrateJobStartOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsMigrateService:DtsMigrateService":
                return new DtsMigrateService(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncCheckJobOperation:DtsSyncCheckJobOperation":
                return new DtsSyncCheckJobOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncConfig:DtsSyncConfig":
                return new DtsSyncConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJob:DtsSyncJob":
                return new DtsSyncJob(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobContinueOperation:DtsSyncJobContinueOperation":
                return new DtsSyncJobContinueOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobIsolateOperation:DtsSyncJobIsolateOperation":
                return new DtsSyncJobIsolateOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobPauseOperation:DtsSyncJobPauseOperation":
                return new DtsSyncJobPauseOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobRecoverOperation:DtsSyncJobRecoverOperation":
                return new DtsSyncJobRecoverOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobResizeOperation:DtsSyncJobResizeOperation":
                return new DtsSyncJobResizeOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobResumeOperation:DtsSyncJobResumeOperation":
                return new DtsSyncJobResumeOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobStartOperation:DtsSyncJobStartOperation":
                return new DtsSyncJobStartOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/dtsSyncJobStopOperation:DtsSyncJobStopOperation":
                return new DtsSyncJobStopOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/ebEventBus:EbEventBus":
                return new EbEventBus(name, <any>undefined, { urn })
            case "tencentcloud:index/ebEventConnector:EbEventConnector":
                return new EbEventConnector(name, <any>undefined, { urn })
            case "tencentcloud:index/ebEventRule:EbEventRule":
                return new EbEventRule(name, <any>undefined, { urn })
            case "tencentcloud:index/ebEventTarget:EbEventTarget":
                return new EbEventTarget(name, <any>undefined, { urn })
            case "tencentcloud:index/ebEventTransform:EbEventTransform":
                return new EbEventTransform(name, <any>undefined, { urn })
            case "tencentcloud:index/ebPutEvents:EbPutEvents":
                return new EbPutEvents(name, <any>undefined, { urn })
            case "tencentcloud:index/eip:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "tencentcloud:index/eipAddressTransform:EipAddressTransform":
                return new EipAddressTransform(name, <any>undefined, { urn })
            case "tencentcloud:index/eipAssociation:EipAssociation":
                return new EipAssociation(name, <any>undefined, { urn })
            case "tencentcloud:index/eipNormalAddressReturn:EipNormalAddressReturn":
                return new EipNormalAddressReturn(name, <any>undefined, { urn })
            case "tencentcloud:index/eipPublicAddressAdjust:EipPublicAddressAdjust":
                return new EipPublicAddressAdjust(name, <any>undefined, { urn })
            case "tencentcloud:index/eksCluster:EksCluster":
                return new EksCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/eksContainerInstance:EksContainerInstance":
                return new EksContainerInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchDiagnose:ElasticsearchDiagnose":
                return new ElasticsearchDiagnose(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchDiagnoseInstance:ElasticsearchDiagnoseInstance":
                return new ElasticsearchDiagnoseInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchIndex:ElasticsearchIndex":
                return new ElasticsearchIndex(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchInstance:ElasticsearchInstance":
                return new ElasticsearchInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchLogstash:ElasticsearchLogstash":
                return new ElasticsearchLogstash(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchLogstashPipeline:ElasticsearchLogstashPipeline":
                return new ElasticsearchLogstashPipeline(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchRestartInstanceOperation:ElasticsearchRestartInstanceOperation":
                return new ElasticsearchRestartInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchRestartKibanaOperation:ElasticsearchRestartKibanaOperation":
                return new ElasticsearchRestartKibanaOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchRestartLogstashInstanceOperation:ElasticsearchRestartLogstashInstanceOperation":
                return new ElasticsearchRestartLogstashInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchRestartNodesOperation:ElasticsearchRestartNodesOperation":
                return new ElasticsearchRestartNodesOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchSecurityGroup:ElasticsearchSecurityGroup":
                return new ElasticsearchSecurityGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchStartLogstashPipelineOperation:ElasticsearchStartLogstashPipelineOperation":
                return new ElasticsearchStartLogstashPipelineOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchStopLogstashPipelineOperation:ElasticsearchStopLogstashPipelineOperation":
                return new ElasticsearchStopLogstashPipelineOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/elasticsearchUpdatePluginsOperation:ElasticsearchUpdatePluginsOperation":
                return new ElasticsearchUpdatePluginsOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/emrCluster:EmrCluster":
                return new EmrCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/emrUserManager:EmrUserManager":
                return new EmrUserManager(name, <any>undefined, { urn })
            case "tencentcloud:index/eni:Eni":
                return new Eni(name, <any>undefined, { urn })
            case "tencentcloud:index/eniAttachment:EniAttachment":
                return new EniAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/eniIpv4Address:EniIpv4Address":
                return new EniIpv4Address(name, <any>undefined, { urn })
            case "tencentcloud:index/eniIpv6Address:EniIpv6Address":
                return new EniIpv6Address(name, <any>undefined, { urn })
            case "tencentcloud:index/eniSgAttachment:EniSgAttachment":
                return new EniSgAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapCertificate:GaapCertificate":
                return new GaapCertificate(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapCustomHeader:GaapCustomHeader":
                return new GaapCustomHeader(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapDomainErrorPage:GaapDomainErrorPage":
                return new GaapDomainErrorPage(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapGlobalDomain:GaapGlobalDomain":
                return new GaapGlobalDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapGlobalDomainDns:GaapGlobalDomainDns":
                return new GaapGlobalDomainDns(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapHttpDomain:GaapHttpDomain":
                return new GaapHttpDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapHttpRule:GaapHttpRule":
                return new GaapHttpRule(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapLayer4Listener:GaapLayer4Listener":
                return new GaapLayer4Listener(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapLayer7Listener:GaapLayer7Listener":
                return new GaapLayer7Listener(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapProxy:GaapProxy":
                return new GaapProxy(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapProxyGroup:GaapProxyGroup":
                return new GaapProxyGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapRealserver:GaapRealserver":
                return new GaapRealserver(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapSecurityPolicy:GaapSecurityPolicy":
                return new GaapSecurityPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/gaapSecurityRule:GaapSecurityRule":
                return new GaapSecurityRule(name, <any>undefined, { urn })
            case "tencentcloud:index/haVip:HaVip":
                return new HaVip(name, <any>undefined, { urn })
            case "tencentcloud:index/haVipEipAttachment:HaVipEipAttachment":
                return new HaVipEipAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterExternalSamlIdentityProvider:IdentityCenterExternalSamlIdentityProvider":
                return new IdentityCenterExternalSamlIdentityProvider(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterGroup:IdentityCenterGroup":
                return new IdentityCenterGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterRoleAssignment:IdentityCenterRoleAssignment":
                return new IdentityCenterRoleAssignment(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterRoleConfiguration:IdentityCenterRoleConfiguration":
                return new IdentityCenterRoleConfiguration(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterRoleConfigurationPermissionPolicyAttachment:IdentityCenterRoleConfigurationPermissionPolicyAttachment":
                return new IdentityCenterRoleConfigurationPermissionPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterUser:IdentityCenterUser":
                return new IdentityCenterUser(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterUserGroupAttachment:IdentityCenterUserGroupAttachment":
                return new IdentityCenterUserGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/identityCenterUserSyncProvisioning:IdentityCenterUserSyncProvisioning":
                return new IdentityCenterUserSyncProvisioning(name, <any>undefined, { urn })
            case "tencentcloud:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "tencentcloud:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:index/instanceSet:InstanceSet":
                return new InstanceSet(name, <any>undefined, { urn })
            case "tencentcloud:index/ipv6AddressBandwidth:Ipv6AddressBandwidth":
                return new Ipv6AddressBandwidth(name, <any>undefined, { urn })
            case "tencentcloud:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "tencentcloud:index/kmsCloudResourceAttachment:KmsCloudResourceAttachment":
                return new KmsCloudResourceAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/kmsExternalKey:KmsExternalKey":
                return new KmsExternalKey(name, <any>undefined, { urn })
            case "tencentcloud:index/kmsKey:KmsKey":
                return new KmsKey(name, <any>undefined, { urn })
            case "tencentcloud:index/kmsOverwriteWhiteBoxDeviceFingerprints:KmsOverwriteWhiteBoxDeviceFingerprints":
                return new KmsOverwriteWhiteBoxDeviceFingerprints(name, <any>undefined, { urn })
            case "tencentcloud:index/kmsWhiteBoxKey:KmsWhiteBoxKey":
                return new KmsWhiteBoxKey(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesAddon:KubernetesAddon":
                return new KubernetesAddon(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesAddonAttachment:KubernetesAddonAttachment":
                return new KubernetesAddonAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesAddonConfig:KubernetesAddonConfig":
                return new KubernetesAddonConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesAsScalingGroup:KubernetesAsScalingGroup":
                return new KubernetesAsScalingGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesAuthAttachment:KubernetesAuthAttachment":
                return new KubernetesAuthAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesBackupStorageLocation:KubernetesBackupStorageLocation":
                return new KubernetesBackupStorageLocation(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesClusterAttachment:KubernetesClusterAttachment":
                return new KubernetesClusterAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesClusterEndpoint:KubernetesClusterEndpoint":
                return new KubernetesClusterEndpoint(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesEncryptionProtection:KubernetesEncryptionProtection":
                return new KubernetesEncryptionProtection(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesNativeNodePool:KubernetesNativeNodePool":
                return new KubernetesNativeNodePool(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesScaleWorker:KubernetesScaleWorker":
                return new KubernetesScaleWorker(name, <any>undefined, { urn })
            case "tencentcloud:index/kubernetesServerlessNodePool:KubernetesServerlessNodePool":
                return new KubernetesServerlessNodePool(name, <any>undefined, { urn })
            case "tencentcloud:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseApplyDiskBackup:LighthouseApplyDiskBackup":
                return new LighthouseApplyDiskBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseApplyInstanceSnapshot:LighthouseApplyInstanceSnapshot":
                return new LighthouseApplyInstanceSnapshot(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseBlueprint:LighthouseBlueprint":
                return new LighthouseBlueprint(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseDisk:LighthouseDisk":
                return new LighthouseDisk(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseDiskAttachment:LighthouseDiskAttachment":
                return new LighthouseDiskAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseDiskBackup:LighthouseDiskBackup":
                return new LighthouseDiskBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseFirewallRule:LighthouseFirewallRule":
                return new LighthouseFirewallRule(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseFirewallTemplate:LighthouseFirewallTemplate":
                return new LighthouseFirewallTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseInstance:LighthouseInstance":
                return new LighthouseInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseKeyPair:LighthouseKeyPair":
                return new LighthouseKeyPair(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseKeyPairAttachment:LighthouseKeyPairAttachment":
                return new LighthouseKeyPairAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseRebootInstance:LighthouseRebootInstance":
                return new LighthouseRebootInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseRenewDisk:LighthouseRenewDisk":
                return new LighthouseRenewDisk(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseRenewInstance:LighthouseRenewInstance":
                return new LighthouseRenewInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseSnapshot:LighthouseSnapshot":
                return new LighthouseSnapshot(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseStartInstance:LighthouseStartInstance":
                return new LighthouseStartInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/lighthouseStopInstance:LighthouseStopInstance":
                return new LighthouseStopInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbAccount:MariadbAccount":
                return new MariadbAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbAccountPrivileges:MariadbAccountPrivileges":
                return new MariadbAccountPrivileges(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbBackupTime:MariadbBackupTime":
                return new MariadbBackupTime(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbCancelDcnJob:MariadbCancelDcnJob":
                return new MariadbCancelDcnJob(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbDedicatedclusterDbInstance:MariadbDedicatedclusterDbInstance":
                return new MariadbDedicatedclusterDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbEncryptAttributes:MariadbEncryptAttributes":
                return new MariadbEncryptAttributes(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbFlushBinlog:MariadbFlushBinlog":
                return new MariadbFlushBinlog(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbHourDbInstance:MariadbHourDbInstance":
                return new MariadbHourDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbInstance:MariadbInstance":
                return new MariadbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbInstanceConfig:MariadbInstanceConfig":
                return new MariadbInstanceConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbLogFileRetentionPeriod:MariadbLogFileRetentionPeriod":
                return new MariadbLogFileRetentionPeriod(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbOperateHourDbInstance:MariadbOperateHourDbInstance":
                return new MariadbOperateHourDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbParameters:MariadbParameters":
                return new MariadbParameters(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbRenewInstance:MariadbRenewInstance":
                return new MariadbRenewInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbRestartInstance:MariadbRestartInstance":
                return new MariadbRestartInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbSecurityGroups:MariadbSecurityGroups":
                return new MariadbSecurityGroups(name, <any>undefined, { urn })
            case "tencentcloud:index/mariadbSwitchHa:MariadbSwitchHa":
                return new MariadbSwitchHa(name, <any>undefined, { urn })
            case "tencentcloud:index/mdlStreamLiveInput:MdlStreamLiveInput":
                return new MdlStreamLiveInput(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbInstance:MongodbInstance":
                return new MongodbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbInstanceAccount:MongodbInstanceAccount":
                return new MongodbInstanceAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbInstanceBackup:MongodbInstanceBackup":
                return new MongodbInstanceBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbInstanceBackupDownloadTask:MongodbInstanceBackupDownloadTask":
                return new MongodbInstanceBackupDownloadTask(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbInstanceBackupRule:MongodbInstanceBackupRule":
                return new MongodbInstanceBackupRule(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbInstanceTransparentDataEncryption:MongodbInstanceTransparentDataEncryption":
                return new MongodbInstanceTransparentDataEncryption(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbShardingInstance:MongodbShardingInstance":
                return new MongodbShardingInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mongodbStandbyInstance:MongodbStandbyInstance":
                return new MongodbStandbyInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorAlarmNotice:MonitorAlarmNotice":
                return new MonitorAlarmNotice(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorAlarmPolicy:MonitorAlarmPolicy":
                return new MonitorAlarmPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorAlarmPolicySetDefault:MonitorAlarmPolicySetDefault":
                return new MonitorAlarmPolicySetDefault(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorBindingObject:MonitorBindingObject":
                return new MonitorBindingObject(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorBindingReceiver:MonitorBindingReceiver":
                return new MonitorBindingReceiver(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaDnsConfig:MonitorGrafanaDnsConfig":
                return new MonitorGrafanaDnsConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaEnvConfig:MonitorGrafanaEnvConfig":
                return new MonitorGrafanaEnvConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaInstance:MonitorGrafanaInstance":
                return new MonitorGrafanaInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaIntegration:MonitorGrafanaIntegration":
                return new MonitorGrafanaIntegration(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaNotificationChannel:MonitorGrafanaNotificationChannel":
                return new MonitorGrafanaNotificationChannel(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaPlugin:MonitorGrafanaPlugin":
                return new MonitorGrafanaPlugin(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaSsoAccount:MonitorGrafanaSsoAccount":
                return new MonitorGrafanaSsoAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaSsoCamConfig:MonitorGrafanaSsoCamConfig":
                return new MonitorGrafanaSsoCamConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaSsoConfig:MonitorGrafanaSsoConfig":
                return new MonitorGrafanaSsoConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaVersionUpgrade:MonitorGrafanaVersionUpgrade":
                return new MonitorGrafanaVersionUpgrade(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorGrafanaWhitelistConfig:MonitorGrafanaWhitelistConfig":
                return new MonitorGrafanaWhitelistConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorPolicyBindingObject:MonitorPolicyBindingObject":
                return new MonitorPolicyBindingObject(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorPolicyGroup:MonitorPolicyGroup":
                return new MonitorPolicyGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpAlertGroup:MonitorTmpAlertGroup":
                return new MonitorTmpAlertGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpAlertRule:MonitorTmpAlertRule":
                return new MonitorTmpAlertRule(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpCvmAgent:MonitorTmpCvmAgent":
                return new MonitorTmpCvmAgent(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpExporterIntegration:MonitorTmpExporterIntegration":
                return new MonitorTmpExporterIntegration(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpGrafanaConfig:MonitorTmpGrafanaConfig":
                return new MonitorTmpGrafanaConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpInstance:MonitorTmpInstance":
                return new MonitorTmpInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpManageGrafanaAttachment:MonitorTmpManageGrafanaAttachment":
                return new MonitorTmpManageGrafanaAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpRecordingRule:MonitorTmpRecordingRule":
                return new MonitorTmpRecordingRule(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpScrapeJob:MonitorTmpScrapeJob":
                return new MonitorTmpScrapeJob(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeAlertPolicy:MonitorTmpTkeAlertPolicy":
                return new MonitorTmpTkeAlertPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeBasicConfig:MonitorTmpTkeBasicConfig":
                return new MonitorTmpTkeBasicConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeClusterAgent:MonitorTmpTkeClusterAgent":
                return new MonitorTmpTkeClusterAgent(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeConfig:MonitorTmpTkeConfig":
                return new MonitorTmpTkeConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeGlobalNotification:MonitorTmpTkeGlobalNotification":
                return new MonitorTmpTkeGlobalNotification(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeRecordRuleYaml:MonitorTmpTkeRecordRuleYaml":
                return new MonitorTmpTkeRecordRuleYaml(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeTemplate:MonitorTmpTkeTemplate":
                return new MonitorTmpTkeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/monitorTmpTkeTemplateAttachment:MonitorTmpTkeTemplateAttachment":
                return new MonitorTmpTkeTemplateAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsAdaptiveDynamicStreamingTemplate:MpsAdaptiveDynamicStreamingTemplate":
                return new MpsAdaptiveDynamicStreamingTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsAiAnalysisTemplate:MpsAiAnalysisTemplate":
                return new MpsAiAnalysisTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsAiRecognitionTemplate:MpsAiRecognitionTemplate":
                return new MpsAiRecognitionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsAnimatedGraphicsTemplate:MpsAnimatedGraphicsTemplate":
                return new MpsAnimatedGraphicsTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsContentReviewTemplate:MpsContentReviewTemplate":
                return new MpsContentReviewTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsEditMediaOperation:MpsEditMediaOperation":
                return new MpsEditMediaOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsEnableScheduleConfig:MpsEnableScheduleConfig":
                return new MpsEnableScheduleConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsEnableWorkflowConfig:MpsEnableWorkflowConfig":
                return new MpsEnableWorkflowConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsEvent:MpsEvent":
                return new MpsEvent(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsExecuteFunctionOperation:MpsExecuteFunctionOperation":
                return new MpsExecuteFunctionOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsFlow:MpsFlow":
                return new MpsFlow(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsImageSpriteTemplate:MpsImageSpriteTemplate":
                return new MpsImageSpriteTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsInput:MpsInput":
                return new MpsInput(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsManageTaskOperation:MpsManageTaskOperation":
                return new MpsManageTaskOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsOutput:MpsOutput":
                return new MpsOutput(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsPersonSample:MpsPersonSample":
                return new MpsPersonSample(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsProcessLiveStreamOperation:MpsProcessLiveStreamOperation":
                return new MpsProcessLiveStreamOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsProcessMediaOperation:MpsProcessMediaOperation":
                return new MpsProcessMediaOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsSampleSnapshotTemplate:MpsSampleSnapshotTemplate":
                return new MpsSampleSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsSchedule:MpsSchedule":
                return new MpsSchedule(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsSnapshotByTimeoffsetTemplate:MpsSnapshotByTimeoffsetTemplate":
                return new MpsSnapshotByTimeoffsetTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsStartFlowOperation:MpsStartFlowOperation":
                return new MpsStartFlowOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsTranscodeTemplate:MpsTranscodeTemplate":
                return new MpsTranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsWatermarkTemplate:MpsWatermarkTemplate":
                return new MpsWatermarkTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsWithdrawsWatermarkOperation:MpsWithdrawsWatermarkOperation":
                return new MpsWithdrawsWatermarkOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsWordSample:MpsWordSample":
                return new MpsWordSample(name, <any>undefined, { urn })
            case "tencentcloud:index/mpsWorkflow:MpsWorkflow":
                return new MpsWorkflow(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlAccount:MysqlAccount":
                return new MysqlAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlAccountPrivilege:MysqlAccountPrivilege":
                return new MysqlAccountPrivilege(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlAuditLogFile:MysqlAuditLogFile":
                return new MysqlAuditLogFile(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlBackupDownloadRestriction:MysqlBackupDownloadRestriction":
                return new MysqlBackupDownloadRestriction(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlBackupEncryptionStatus:MysqlBackupEncryptionStatus":
                return new MysqlBackupEncryptionStatus(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlBackupPolicy:MysqlBackupPolicy":
                return new MysqlBackupPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlClsLogAttachment:MysqlClsLogAttachment":
                return new MysqlClsLogAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlDatabase:MysqlDatabase":
                return new MysqlDatabase(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlDbImportJobOperation:MysqlDbImportJobOperation":
                return new MysqlDbImportJobOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlDeployGroup:MysqlDeployGroup":
                return new MysqlDeployGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlDrInstance:MysqlDrInstance":
                return new MysqlDrInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlDrInstanceToMater:MysqlDrInstanceToMater":
                return new MysqlDrInstanceToMater(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlInstance:MysqlInstance":
                return new MysqlInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlInstanceEncryptionOperation:MysqlInstanceEncryptionOperation":
                return new MysqlInstanceEncryptionOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlIsolateInstance:MysqlIsolateInstance":
                return new MysqlIsolateInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlLocalBinlogConfig:MysqlLocalBinlogConfig":
                return new MysqlLocalBinlogConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlParamTemplate:MysqlParamTemplate":
                return new MysqlParamTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlPasswordComplexity:MysqlPasswordComplexity":
                return new MysqlPasswordComplexity(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlPrivilege:MysqlPrivilege":
                return new MysqlPrivilege(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlProxy:MysqlProxy":
                return new MysqlProxy(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlReadonlyInstance:MysqlReadonlyInstance":
                return new MysqlReadonlyInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlReloadBalanceProxyNode:MysqlReloadBalanceProxyNode":
                return new MysqlReloadBalanceProxyNode(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRemoteBackupConfig:MysqlRemoteBackupConfig":
                return new MysqlRemoteBackupConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRenewDbInstanceOperation:MysqlRenewDbInstanceOperation":
                return new MysqlRenewDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlResetRootAccount:MysqlResetRootAccount":
                return new MysqlResetRootAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRestartDbInstancesOperation:MysqlRestartDbInstancesOperation":
                return new MysqlRestartDbInstancesOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRoGroup:MysqlRoGroup":
                return new MysqlRoGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRoGroupLoadOperation:MysqlRoGroupLoadOperation":
                return new MysqlRoGroupLoadOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRoInstanceIp:MysqlRoInstanceIp":
                return new MysqlRoInstanceIp(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRoStartReplication:MysqlRoStartReplication":
                return new MysqlRoStartReplication(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRoStopReplication:MysqlRoStopReplication":
                return new MysqlRoStopReplication(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRollback:MysqlRollback":
                return new MysqlRollback(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlRollbackStop:MysqlRollbackStop":
                return new MysqlRollbackStop(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlSecurityGroupsAttachment:MysqlSecurityGroupsAttachment":
                return new MysqlSecurityGroupsAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlSsl:MysqlSsl":
                return new MysqlSsl(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlSwitchForUpgrade:MysqlSwitchForUpgrade":
                return new MysqlSwitchForUpgrade(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlSwitchMasterSlaveOperation:MysqlSwitchMasterSlaveOperation":
                return new MysqlSwitchMasterSlaveOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlSwitchProxy:MysqlSwitchProxy":
                return new MysqlSwitchProxy(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlTimeWindow:MysqlTimeWindow":
                return new MysqlTimeWindow(name, <any>undefined, { urn })
            case "tencentcloud:index/mysqlVerifyRootAccount:MysqlVerifyRootAccount":
                return new MysqlVerifyRootAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/natGatewaySnat:NatGatewaySnat":
                return new NatGatewaySnat(name, <any>undefined, { urn })
            case "tencentcloud:index/natRefreshNatDcRoute:NatRefreshNatDcRoute":
                return new NatRefreshNatDcRoute(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusFolder:OceanusFolder":
                return new OceanusFolder(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusJob:OceanusJob":
                return new OceanusJob(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusJobConfig:OceanusJobConfig":
                return new OceanusJobConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusJobCopy:OceanusJobCopy":
                return new OceanusJobCopy(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusResource:OceanusResource":
                return new OceanusResource(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusResourceConfig:OceanusResourceConfig":
                return new OceanusResourceConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusRunJob:OceanusRunJob":
                return new OceanusRunJob(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusStopJob:OceanusStopJob":
                return new OceanusStopJob(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusTriggerJobSavepoint:OceanusTriggerJobSavepoint":
                return new OceanusTriggerJobSavepoint(name, <any>undefined, { urn })
            case "tencentcloud:index/oceanusWorkSpace:OceanusWorkSpace":
                return new OceanusWorkSpace(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationInstance:OrganizationInstance":
                return new OrganizationInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgIdentity:OrganizationOrgIdentity":
                return new OrganizationOrgIdentity(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgManagePolicy:OrganizationOrgManagePolicy":
                return new OrganizationOrgManagePolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgManagePolicyConfig:OrganizationOrgManagePolicyConfig":
                return new OrganizationOrgManagePolicyConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgManagePolicyTarget:OrganizationOrgManagePolicyTarget":
                return new OrganizationOrgManagePolicyTarget(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgMember:OrganizationOrgMember":
                return new OrganizationOrgMember(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgMemberAuthIdentityAttachment:OrganizationOrgMemberAuthIdentityAttachment":
                return new OrganizationOrgMemberAuthIdentityAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgMemberEmail:OrganizationOrgMemberEmail":
                return new OrganizationOrgMemberEmail(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgMemberPolicyAttachment:OrganizationOrgMemberPolicyAttachment":
                return new OrganizationOrgMemberPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgNode:OrganizationOrgNode":
                return new OrganizationOrgNode(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgShareUnit:OrganizationOrgShareUnit":
                return new OrganizationOrgShareUnit(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationOrgShareUnitMember:OrganizationOrgShareUnitMember":
                return new OrganizationOrgShareUnitMember(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationPolicySubAccountAttachment:OrganizationPolicySubAccountAttachment":
                return new OrganizationPolicySubAccountAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationQuitOrganizationOperation:OrganizationQuitOrganizationOperation":
                return new OrganizationQuitOrganizationOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/organizationServiceAssign:OrganizationServiceAssign":
                return new OrganizationServiceAssign(name, <any>undefined, { urn })
            case "tencentcloud:index/placementGroup:PlacementGroup":
                return new PlacementGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlBackupDownloadRestrictionConfig:PostgresqlBackupDownloadRestrictionConfig":
                return new PostgresqlBackupDownloadRestrictionConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlBackupPlanConfig:PostgresqlBackupPlanConfig":
                return new PostgresqlBackupPlanConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlBaseBackup:PostgresqlBaseBackup":
                return new PostgresqlBaseBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlDeleteLogBackupOperation:PostgresqlDeleteLogBackupOperation":
                return new PostgresqlDeleteLogBackupOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlDisisolateDbInstanceOperation:PostgresqlDisisolateDbInstanceOperation":
                return new PostgresqlDisisolateDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlInstance:PostgresqlInstance":
                return new PostgresqlInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlInstanceHaConfig:PostgresqlInstanceHaConfig":
                return new PostgresqlInstanceHaConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlIsolateDbInstanceOperation:PostgresqlIsolateDbInstanceOperation":
                return new PostgresqlIsolateDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlModifyAccountRemarkOperation:PostgresqlModifyAccountRemarkOperation":
                return new PostgresqlModifyAccountRemarkOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlModifySwitchTimePeriodOperation:PostgresqlModifySwitchTimePeriodOperation":
                return new PostgresqlModifySwitchTimePeriodOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlParameterTemplate:PostgresqlParameterTemplate":
                return new PostgresqlParameterTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlReadonlyAttachment:PostgresqlReadonlyAttachment":
                return new PostgresqlReadonlyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlReadonlyGroup:PostgresqlReadonlyGroup":
                return new PostgresqlReadonlyGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlReadonlyInstance:PostgresqlReadonlyInstance":
                return new PostgresqlReadonlyInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlRebalanceReadonlyGroupOperation:PostgresqlRebalanceReadonlyGroupOperation":
                return new PostgresqlRebalanceReadonlyGroupOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlRenewDbInstanceOperation:PostgresqlRenewDbInstanceOperation":
                return new PostgresqlRenewDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlRestartDbInstanceOperation:PostgresqlRestartDbInstanceOperation":
                return new PostgresqlRestartDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/postgresqlSecurityGroupConfig:PostgresqlSecurityGroupConfig":
                return new PostgresqlSecurityGroupConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/privateDnsRecord:PrivateDnsRecord":
                return new PrivateDnsRecord(name, <any>undefined, { urn })
            case "tencentcloud:index/privateDnsZone:PrivateDnsZone":
                return new PrivateDnsZone(name, <any>undefined, { urn })
            case "tencentcloud:index/privateDnsZoneVpcAttachment:PrivateDnsZoneVpcAttachment":
                return new PrivateDnsZoneVpcAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "tencentcloud:index/protocolTemplate:ProtocolTemplate":
                return new ProtocolTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/protocolTemplateGroup:ProtocolTemplateGroup":
                return new ProtocolTemplateGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsAlertChannel:PtsAlertChannel":
                return new PtsAlertChannel(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsCronJob:PtsCronJob":
                return new PtsCronJob(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsCronJobAbort:PtsCronJobAbort":
                return new PtsCronJobAbort(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsCronJobRestart:PtsCronJobRestart":
                return new PtsCronJobRestart(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsFile:PtsFile":
                return new PtsFile(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsJob:PtsJob":
                return new PtsJob(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsJobAbort:PtsJobAbort":
                return new PtsJobAbort(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsProject:PtsProject":
                return new PtsProject(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsScenario:PtsScenario":
                return new PtsScenario(name, <any>undefined, { urn })
            case "tencentcloud:index/ptsTmpKeyGenerate:PtsTmpKeyGenerate":
                return new PtsTmpKeyGenerate(name, <any>undefined, { urn })
            case "tencentcloud:index/redisAccount:RedisAccount":
                return new RedisAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/redisBackupConfig:RedisBackupConfig":
                return new RedisBackupConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/redisBackupDownloadRestriction:RedisBackupDownloadRestriction":
                return new RedisBackupDownloadRestriction(name, <any>undefined, { urn })
            case "tencentcloud:index/redisBackupOperation:RedisBackupOperation":
                return new RedisBackupOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/redisClearInstanceOperation:RedisClearInstanceOperation":
                return new RedisClearInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/redisConnectionConfig:RedisConnectionConfig":
                return new RedisConnectionConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/redisInstance:RedisInstance":
                return new RedisInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/redisMaintenanceWindow:RedisMaintenanceWindow":
                return new RedisMaintenanceWindow(name, <any>undefined, { urn })
            case "tencentcloud:index/redisParam:RedisParam":
                return new RedisParam(name, <any>undefined, { urn })
            case "tencentcloud:index/redisParamTemplate:RedisParamTemplate":
                return new RedisParamTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/redisReadOnly:RedisReadOnly":
                return new RedisReadOnly(name, <any>undefined, { urn })
            case "tencentcloud:index/redisRenewInstanceOperation:RedisRenewInstanceOperation":
                return new RedisRenewInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/redisReplicaReadonly:RedisReplicaReadonly":
                return new RedisReplicaReadonly(name, <any>undefined, { urn })
            case "tencentcloud:index/redisReplicateAttachment:RedisReplicateAttachment":
                return new RedisReplicateAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/redisSecurityGroupAttachment:RedisSecurityGroupAttachment":
                return new RedisSecurityGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/redisSsl:RedisSsl":
                return new RedisSsl(name, <any>undefined, { urn })
            case "tencentcloud:index/redisStartupInstanceOperation:RedisStartupInstanceOperation":
                return new RedisStartupInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/redisSwitchMaster:RedisSwitchMaster":
                return new RedisSwitchMaster(name, <any>undefined, { urn })
            case "tencentcloud:index/redisUpgradeCacheVersionOperation:RedisUpgradeCacheVersionOperation":
                return new RedisUpgradeCacheVersionOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/redisUpgradeMultiZoneOperation:RedisUpgradeMultiZoneOperation":
                return new RedisUpgradeMultiZoneOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/redisUpgradeProxyVersionOperation:RedisUpgradeProxyVersionOperation":
                return new RedisUpgradeProxyVersionOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/reservedInstance:ReservedInstance":
                return new ReservedInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/routeEntry:RouteEntry":
                return new RouteEntry(name, <any>undefined, { urn })
            case "tencentcloud:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "tencentcloud:index/routeTableAssociation:RouteTableAssociation":
                return new RouteTableAssociation(name, <any>undefined, { urn })
            case "tencentcloud:index/routeTableEntry:RouteTableEntry":
                return new RouteTableEntry(name, <any>undefined, { urn })
            case "tencentcloud:index/rumInstanceStatusConfig:RumInstanceStatusConfig":
                return new RumInstanceStatusConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/rumOfflineLogConfigAttachment:RumOfflineLogConfigAttachment":
                return new RumOfflineLogConfigAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/rumProject:RumProject":
                return new RumProject(name, <any>undefined, { urn })
            case "tencentcloud:index/rumProjectStatusConfig:RumProjectStatusConfig":
                return new RumProjectStatusConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/rumReleaseFile:RumReleaseFile":
                return new RumReleaseFile(name, <any>undefined, { urn })
            case "tencentcloud:index/rumTawInstance:RumTawInstance":
                return new RumTawInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/rumWhitelist:RumWhitelist":
                return new RumWhitelist(name, <any>undefined, { urn })
            case "tencentcloud:index/scfFunction:ScfFunction":
                return new ScfFunction(name, <any>undefined, { urn })
            case "tencentcloud:index/scfFunctionAlias:ScfFunctionAlias":
                return new ScfFunctionAlias(name, <any>undefined, { urn })
            case "tencentcloud:index/scfFunctionEventInvokeConfig:ScfFunctionEventInvokeConfig":
                return new ScfFunctionEventInvokeConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/scfFunctionVersion:ScfFunctionVersion":
                return new ScfFunctionVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/scfInvokeFunction:ScfInvokeFunction":
                return new ScfInvokeFunction(name, <any>undefined, { urn })
            case "tencentcloud:index/scfLayer:ScfLayer":
                return new ScfLayer(name, <any>undefined, { urn })
            case "tencentcloud:index/scfNamespace:ScfNamespace":
                return new ScfNamespace(name, <any>undefined, { urn })
            case "tencentcloud:index/scfProvisionedConcurrencyConfig:ScfProvisionedConcurrencyConfig":
                return new ScfProvisionedConcurrencyConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/scfReservedConcurrencyConfig:ScfReservedConcurrencyConfig":
                return new ScfReservedConcurrencyConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/scfSyncInvokeFunction:ScfSyncInvokeFunction":
                return new ScfSyncInvokeFunction(name, <any>undefined, { urn })
            case "tencentcloud:index/scfTerminateAsyncEvent:ScfTerminateAsyncEvent":
                return new ScfTerminateAsyncEvent(name, <any>undefined, { urn })
            case "tencentcloud:index/scfTriggerConfig:ScfTriggerConfig":
                return new ScfTriggerConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/securityGroupLiteRule:SecurityGroupLiteRule":
                return new SecurityGroupLiteRule(name, <any>undefined, { urn })
            case "tencentcloud:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "tencentcloud:index/securityGroupRuleSet:SecurityGroupRuleSet":
                return new SecurityGroupRuleSet(name, <any>undefined, { urn })
            case "tencentcloud:index/sesBatchSendEmail:SesBatchSendEmail":
                return new SesBatchSendEmail(name, <any>undefined, { urn })
            case "tencentcloud:index/sesBlackListDelete:SesBlackListDelete":
                return new SesBlackListDelete(name, <any>undefined, { urn })
            case "tencentcloud:index/sesDomain:SesDomain":
                return new SesDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/sesEmailAddress:SesEmailAddress":
                return new SesEmailAddress(name, <any>undefined, { urn })
            case "tencentcloud:index/sesReceiver:SesReceiver":
                return new SesReceiver(name, <any>undefined, { urn })
            case "tencentcloud:index/sesSendEmail:SesSendEmail":
                return new SesSendEmail(name, <any>undefined, { urn })
            case "tencentcloud:index/sesTemplate:SesTemplate":
                return new SesTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/sesVerifyDomain:SesVerifyDomain":
                return new SesVerifyDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/smsSign:SmsSign":
                return new SmsSign(name, <any>undefined, { urn })
            case "tencentcloud:index/smsTemplate:SmsTemplate":
                return new SmsTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverAccount:SqlserverAccount":
                return new SqlserverAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverAccountDbAttachment:SqlserverAccountDbAttachment":
                return new SqlserverAccountDbAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverBasicInstance:SqlserverBasicInstance":
                return new SqlserverBasicInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverBusinessIntelligenceFile:SqlserverBusinessIntelligenceFile":
                return new SqlserverBusinessIntelligenceFile(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverBusinessIntelligenceInstance:SqlserverBusinessIntelligenceInstance":
                return new SqlserverBusinessIntelligenceInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverCompleteExpansion:SqlserverCompleteExpansion":
                return new SqlserverCompleteExpansion(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigBackupStrategy:SqlserverConfigBackupStrategy":
                return new SqlserverConfigBackupStrategy(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigDatabaseCdc:SqlserverConfigDatabaseCdc":
                return new SqlserverConfigDatabaseCdc(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigDatabaseCt:SqlserverConfigDatabaseCt":
                return new SqlserverConfigDatabaseCt(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigDatabaseMdf:SqlserverConfigDatabaseMdf":
                return new SqlserverConfigDatabaseMdf(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigInstanceParam:SqlserverConfigInstanceParam":
                return new SqlserverConfigInstanceParam(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigInstanceRoGroup:SqlserverConfigInstanceRoGroup":
                return new SqlserverConfigInstanceRoGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigInstanceSecurityGroups:SqlserverConfigInstanceSecurityGroups":
                return new SqlserverConfigInstanceSecurityGroups(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverConfigTerminateDbInstance:SqlserverConfigTerminateDbInstance":
                return new SqlserverConfigTerminateDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverDatabaseTde:SqlserverDatabaseTde":
                return new SqlserverDatabaseTde(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverDb:SqlserverDb":
                return new SqlserverDb(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverFullBackupMigration:SqlserverFullBackupMigration":
                return new SqlserverFullBackupMigration(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverGeneralBackup:SqlserverGeneralBackup":
                return new SqlserverGeneralBackup(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverGeneralClone:SqlserverGeneralClone":
                return new SqlserverGeneralClone(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverGeneralCloudInstance:SqlserverGeneralCloudInstance":
                return new SqlserverGeneralCloudInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverGeneralCloudRoInstance:SqlserverGeneralCloudRoInstance":
                return new SqlserverGeneralCloudRoInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverGeneralCommunication:SqlserverGeneralCommunication":
                return new SqlserverGeneralCommunication(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverIncreBackupMigration:SqlserverIncreBackupMigration":
                return new SqlserverIncreBackupMigration(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverInstance:SqlserverInstance":
                return new SqlserverInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverInstanceSsl:SqlserverInstanceSsl":
                return new SqlserverInstanceSsl(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverInstanceTde:SqlserverInstanceTde":
                return new SqlserverInstanceTde(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverMigration:SqlserverMigration":
                return new SqlserverMigration(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverPublishSubscribe:SqlserverPublishSubscribe":
                return new SqlserverPublishSubscribe(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverReadonlyInstance:SqlserverReadonlyInstance":
                return new SqlserverReadonlyInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverRenewDbInstance:SqlserverRenewDbInstance":
                return new SqlserverRenewDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverRenewPostpaidDbInstance:SqlserverRenewPostpaidDbInstance":
                return new SqlserverRenewPostpaidDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverRestartDbInstance:SqlserverRestartDbInstance":
                return new SqlserverRestartDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverRestoreInstance:SqlserverRestoreInstance":
                return new SqlserverRestoreInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverRollbackInstance:SqlserverRollbackInstance":
                return new SqlserverRollbackInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverStartBackupFullMigration:SqlserverStartBackupFullMigration":
                return new SqlserverStartBackupFullMigration(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverStartBackupIncrementalMigration:SqlserverStartBackupIncrementalMigration":
                return new SqlserverStartBackupIncrementalMigration(name, <any>undefined, { urn })
            case "tencentcloud:index/sqlserverStartXevent:SqlserverStartXevent":
                return new SqlserverStartXevent(name, <any>undefined, { urn })
            case "tencentcloud:index/sslCertificate:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            case "tencentcloud:index/sslCheckCertificateChainOperation:SslCheckCertificateChainOperation":
                return new SslCheckCertificateChainOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslCompleteCertificateOperation:SslCompleteCertificateOperation":
                return new SslCompleteCertificateOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslDeployCertificateInstanceOperation:SslDeployCertificateInstanceOperation":
                return new SslDeployCertificateInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslDeployCertificateRecordRetryOperation:SslDeployCertificateRecordRetryOperation":
                return new SslDeployCertificateRecordRetryOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslDeployCertificateRecordRollbackOperation:SslDeployCertificateRecordRollbackOperation":
                return new SslDeployCertificateRecordRollbackOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslDownloadCertificateOperation:SslDownloadCertificateOperation":
                return new SslDownloadCertificateOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslFreeCertificate:SslFreeCertificate":
                return new SslFreeCertificate(name, <any>undefined, { urn })
            case "tencentcloud:index/sslPayCertificate:SslPayCertificate":
                return new SslPayCertificate(name, <any>undefined, { urn })
            case "tencentcloud:index/sslReplaceCertificateOperation:SslReplaceCertificateOperation":
                return new SslReplaceCertificateOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslRevokeCertificateOperation:SslRevokeCertificateOperation":
                return new SslRevokeCertificateOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslUpdateCertificateInstanceOperation:SslUpdateCertificateInstanceOperation":
                return new SslUpdateCertificateInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslUpdateCertificateRecordRetryOperation:SslUpdateCertificateRecordRetryOperation":
                return new SslUpdateCertificateRecordRetryOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslUpdateCertificateRecordRollbackOperation:SslUpdateCertificateRecordRollbackOperation":
                return new SslUpdateCertificateRecordRollbackOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/sslUploadRevokeLetterOperation:SslUploadRevokeLetterOperation":
                return new SslUploadRevokeLetterOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/ssmProductSecret:SsmProductSecret":
                return new SsmProductSecret(name, <any>undefined, { urn })
            case "tencentcloud:index/ssmRotateProductSecret:SsmRotateProductSecret":
                return new SsmRotateProductSecret(name, <any>undefined, { urn })
            case "tencentcloud:index/ssmSecret:SsmSecret":
                return new SsmSecret(name, <any>undefined, { urn })
            case "tencentcloud:index/ssmSecretVersion:SsmSecretVersion":
                return new SsmSecretVersion(name, <any>undefined, { urn })
            case "tencentcloud:index/ssmSshKeyPairSecret:SsmSshKeyPairSecret":
                return new SsmSshKeyPairSecret(name, <any>undefined, { urn })
            case "tencentcloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "tencentcloud:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "tencentcloud:index/tagAttachment:TagAttachment":
                return new TagAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tatCommand:TatCommand":
                return new TatCommand(name, <any>undefined, { urn })
            case "tencentcloud:index/tatInvocationCommandAttachment:TatInvocationCommandAttachment":
                return new TatInvocationCommandAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tatInvocationInvokeAttachment:TatInvocationInvokeAttachment":
                return new TatInvocationInvokeAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tatInvoker:TatInvoker":
                return new TatInvoker(name, <any>undefined, { urn })
            case "tencentcloud:index/tatInvokerConfig:TatInvokerConfig":
                return new TatInvokerConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tcaplusCluster:TcaplusCluster":
                return new TcaplusCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/tcaplusIdl:TcaplusIdl":
                return new TcaplusIdl(name, <any>undefined, { urn })
            case "tencentcloud:index/tcaplusTable:TcaplusTable":
                return new TcaplusTable(name, <any>undefined, { urn })
            case "tencentcloud:index/tcaplusTablegroup:TcaplusTablegroup":
                return new TcaplusTablegroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmAccessLogConfig:TcmAccessLogConfig":
                return new TcmAccessLogConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmClusterAttachment:TcmClusterAttachment":
                return new TcmClusterAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmMesh:TcmMesh":
                return new TcmMesh(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmPrometheusAttachment:TcmPrometheusAttachment":
                return new TcmPrometheusAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmTracingConfig:TcmTracingConfig":
                return new TcmTracingConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmqQueue:TcmqQueue":
                return new TcmqQueue(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmqSubscribe:TcmqSubscribe":
                return new TcmqSubscribe(name, <any>undefined, { urn })
            case "tencentcloud:index/tcmqTopic:TcmqTopic":
                return new TcmqTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrCreateImageSignatureOperation:TcrCreateImageSignatureOperation":
                return new TcrCreateImageSignatureOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrCustomizedDomain:TcrCustomizedDomain":
                return new TcrCustomizedDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrDeleteImageOperation:TcrDeleteImageOperation":
                return new TcrDeleteImageOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrImmutableTagRule:TcrImmutableTagRule":
                return new TcrImmutableTagRule(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrInstance:TcrInstance":
                return new TcrInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrManageReplicationOperation:TcrManageReplicationOperation":
                return new TcrManageReplicationOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrNamespace:TcrNamespace":
                return new TcrNamespace(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrRepository:TcrRepository":
                return new TcrRepository(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrServiceAccount:TcrServiceAccount":
                return new TcrServiceAccount(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrTagRetentionExecutionConfig:TcrTagRetentionExecutionConfig":
                return new TcrTagRetentionExecutionConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrTagRetentionRule:TcrTagRetentionRule":
                return new TcrTagRetentionRule(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrToken:TcrToken":
                return new TcrToken(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrVpcAttachment:TcrVpcAttachment":
                return new TcrVpcAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tcrWebhookTrigger:TcrWebhookTrigger":
                return new TcrWebhookTrigger(name, <any>undefined, { urn })
            case "tencentcloud:index/tdcpgCluster:TdcpgCluster":
                return new TdcpgCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/tdcpgInstance:TdcpgInstance":
                return new TdcpgInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqInstance:TdmqInstance":
                return new TdmqInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqNamespace:TdmqNamespace":
                return new TdmqNamespace(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqNamespaceRoleAttachment:TdmqNamespaceRoleAttachment":
                return new TdmqNamespaceRoleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqProfessionalCluster:TdmqProfessionalCluster":
                return new TdmqProfessionalCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRabbitmqUser:TdmqRabbitmqUser":
                return new TdmqRabbitmqUser(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRabbitmqVipInstance:TdmqRabbitmqVipInstance":
                return new TdmqRabbitmqVipInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRabbitmqVirtualHost:TdmqRabbitmqVirtualHost":
                return new TdmqRabbitmqVirtualHost(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqCluster:TdmqRocketmqCluster":
                return new TdmqRocketmqCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqEnvironmentRole:TdmqRocketmqEnvironmentRole":
                return new TdmqRocketmqEnvironmentRole(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqGroup:TdmqRocketmqGroup":
                return new TdmqRocketmqGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqNamespace:TdmqRocketmqNamespace":
                return new TdmqRocketmqNamespace(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqRole:TdmqRocketmqRole":
                return new TdmqRocketmqRole(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqTopic:TdmqRocketmqTopic":
                return new TdmqRocketmqTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRocketmqVipInstance:TdmqRocketmqVipInstance":
                return new TdmqRocketmqVipInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqRole:TdmqRole":
                return new TdmqRole(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqSendRocketmqMessage:TdmqSendRocketmqMessage":
                return new TdmqSendRocketmqMessage(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqSubscription:TdmqSubscription":
                return new TdmqSubscription(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqTopic:TdmqTopic":
                return new TdmqTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/tdmqTopicWithFullId:TdmqTopicWithFullId":
                return new TdmqTopicWithFullId(name, <any>undefined, { urn })
            case "tencentcloud:index/temAppConfig:TemAppConfig":
                return new TemAppConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/temApplication:TemApplication":
                return new TemApplication(name, <any>undefined, { urn })
            case "tencentcloud:index/temApplicationService:TemApplicationService":
                return new TemApplicationService(name, <any>undefined, { urn })
            case "tencentcloud:index/temEnvironment:TemEnvironment":
                return new TemEnvironment(name, <any>undefined, { urn })
            case "tencentcloud:index/temGateway:TemGateway":
                return new TemGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/temLogConfig:TemLogConfig":
                return new TemLogConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/temScaleRule:TemScaleRule":
                return new TemScaleRule(name, <any>undefined, { urn })
            case "tencentcloud:index/temWorkload:TemWorkload":
                return new TemWorkload(name, <any>undefined, { urn })
            case "tencentcloud:index/teoAccelerationDomain:TeoAccelerationDomain":
                return new TeoAccelerationDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/teoApplicationProxy:TeoApplicationProxy":
                return new TeoApplicationProxy(name, <any>undefined, { urn })
            case "tencentcloud:index/teoApplicationProxyRule:TeoApplicationProxyRule":
                return new TeoApplicationProxyRule(name, <any>undefined, { urn })
            case "tencentcloud:index/teoCertificateConfig:TeoCertificateConfig":
                return new TeoCertificateConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/teoL4Proxy:TeoL4Proxy":
                return new TeoL4Proxy(name, <any>undefined, { urn })
            case "tencentcloud:index/teoOriginGroup:TeoOriginGroup":
                return new TeoOriginGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/teoOwnershipVerify:TeoOwnershipVerify":
                return new TeoOwnershipVerify(name, <any>undefined, { urn })
            case "tencentcloud:index/teoRealtimeLogDelivery:TeoRealtimeLogDelivery":
                return new TeoRealtimeLogDelivery(name, <any>undefined, { urn })
            case "tencentcloud:index/teoRuleEngine:TeoRuleEngine":
                return new TeoRuleEngine(name, <any>undefined, { urn })
            case "tencentcloud:index/teoZone:TeoZone":
                return new TeoZone(name, <any>undefined, { urn })
            case "tencentcloud:index/teoZoneSetting:TeoZoneSetting":
                return new TeoZoneSetting(name, <any>undefined, { urn })
            case "tencentcloud:index/trocketRocketmqConsumerGroup:TrocketRocketmqConsumerGroup":
                return new TrocketRocketmqConsumerGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/trocketRocketmqInstance:TrocketRocketmqInstance":
                return new TrocketRocketmqInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/trocketRocketmqRole:TrocketRocketmqRole":
                return new TrocketRocketmqRole(name, <any>undefined, { urn })
            case "tencentcloud:index/trocketRocketmqTopic:TrocketRocketmqTopic":
                return new TrocketRocketmqTopic(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwCanaryRule:TseCngwCanaryRule":
                return new TseCngwCanaryRule(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwCertificate:TseCngwCertificate":
                return new TseCngwCertificate(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwGateway:TseCngwGateway":
                return new TseCngwGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwGroup:TseCngwGroup":
                return new TseCngwGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwNetwork:TseCngwNetwork":
                return new TseCngwNetwork(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwNetworkAccessControl:TseCngwNetworkAccessControl":
                return new TseCngwNetworkAccessControl(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwRoute:TseCngwRoute":
                return new TseCngwRoute(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwRouteRateLimit:TseCngwRouteRateLimit":
                return new TseCngwRouteRateLimit(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwService:TseCngwService":
                return new TseCngwService(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwServiceRateLimit:TseCngwServiceRateLimit":
                return new TseCngwServiceRateLimit(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwStrategy:TseCngwStrategy":
                return new TseCngwStrategy(name, <any>undefined, { urn })
            case "tencentcloud:index/tseCngwStrategyBindGroup:TseCngwStrategyBindGroup":
                return new TseCngwStrategyBindGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tseInstance:TseInstance":
                return new TseInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/tseWafDomains:TseWafDomains":
                return new TseWafDomains(name, <any>undefined, { urn })
            case "tencentcloud:index/tseWafProtection:TseWafProtection":
                return new TseWafProtection(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApiGroup:TsfApiGroup":
                return new TsfApiGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApiRateLimitRule:TsfApiRateLimitRule":
                return new TsfApiRateLimitRule(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplication:TsfApplication":
                return new TsfApplication(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplicationConfig:TsfApplicationConfig":
                return new TsfApplicationConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplicationFileConfig:TsfApplicationFileConfig":
                return new TsfApplicationFileConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplicationFileConfigRelease:TsfApplicationFileConfigRelease":
                return new TsfApplicationFileConfigRelease(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplicationPublicConfig:TsfApplicationPublicConfig":
                return new TsfApplicationPublicConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplicationPublicConfigRelease:TsfApplicationPublicConfigRelease":
                return new TsfApplicationPublicConfigRelease(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfApplicationReleaseConfig:TsfApplicationReleaseConfig":
                return new TsfApplicationReleaseConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfBindApiGroup:TsfBindApiGroup":
                return new TsfBindApiGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfCluster:TsfCluster":
                return new TsfCluster(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfConfigTemplate:TsfConfigTemplate":
                return new TsfConfigTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfDeployContainerGroup:TsfDeployContainerGroup":
                return new TsfDeployContainerGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfDeployVmGroup:TsfDeployVmGroup":
                return new TsfDeployVmGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfEnableUnitRule:TsfEnableUnitRule":
                return new TsfEnableUnitRule(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfGroup:TsfGroup":
                return new TsfGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfInstancesAttachment:TsfInstancesAttachment":
                return new TsfInstancesAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfLane:TsfLane":
                return new TsfLane(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfLaneRule:TsfLaneRule":
                return new TsfLaneRule(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfMicroservice:TsfMicroservice":
                return new TsfMicroservice(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfNamespace:TsfNamespace":
                return new TsfNamespace(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfOperateContainerGroup:TsfOperateContainerGroup":
                return new TsfOperateContainerGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfOperateGroup:TsfOperateGroup":
                return new TsfOperateGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfPathRewrite:TsfPathRewrite":
                return new TsfPathRewrite(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfReleaseApiGroup:TsfReleaseApiGroup":
                return new TsfReleaseApiGroup(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfRepository:TsfRepository":
                return new TsfRepository(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfTask:TsfTask":
                return new TsfTask(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfUnitNamespace:TsfUnitNamespace":
                return new TsfUnitNamespace(name, <any>undefined, { urn })
            case "tencentcloud:index/tsfUnitRule:TsfUnitRule":
                return new TsfUnitRule(name, <any>undefined, { urn })
            case "tencentcloud:index/vodAdaptiveDynamicStreamingTemplate:VodAdaptiveDynamicStreamingTemplate":
                return new VodAdaptiveDynamicStreamingTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vodEventConfig:VodEventConfig":
                return new VodEventConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/vodImageSpriteTemplate:VodImageSpriteTemplate":
                return new VodImageSpriteTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vodProcedureTemplate:VodProcedureTemplate":
                return new VodProcedureTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vodSampleSnapshotTemplate:VodSampleSnapshotTemplate":
                return new VodSampleSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vodSnapshotByTimeOffsetTemplate:VodSnapshotByTimeOffsetTemplate":
                return new VodSnapshotByTimeOffsetTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vodSubApplication:VodSubApplication":
                return new VodSubApplication(name, <any>undefined, { urn })
            case "tencentcloud:index/vodSuperPlayerConfig:VodSuperPlayerConfig":
                return new VodSuperPlayerConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/vodTranscodeTemplate:VodTranscodeTemplate":
                return new VodTranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vodWatermarkTemplate:VodWatermarkTemplate":
                return new VodWatermarkTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcAcl:VpcAcl":
                return new VpcAcl(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcAclAttachment:VpcAclAttachment":
                return new VpcAclAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcBandwidthPackage:VpcBandwidthPackage":
                return new VpcBandwidthPackage(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcBandwidthPackageAttachment:VpcBandwidthPackageAttachment":
                return new VpcBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcClassicLinkAttachment:VpcClassicLinkAttachment":
                return new VpcClassicLinkAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcDhcpAssociateAddress:VpcDhcpAssociateAddress":
                return new VpcDhcpAssociateAddress(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcDhcpIp:VpcDhcpIp":
                return new VpcDhcpIp(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcEnableEndPointConnect:VpcEnableEndPointConnect":
                return new VpcEnableEndPointConnect(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcEndPoint:VpcEndPoint":
                return new VpcEndPoint(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcEndPointService:VpcEndPointService":
                return new VpcEndPointService(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcEndPointServiceWhiteList:VpcEndPointServiceWhiteList":
                return new VpcEndPointServiceWhiteList(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcFlowLog:VpcFlowLog":
                return new VpcFlowLog(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcFlowLogConfig:VpcFlowLogConfig":
                return new VpcFlowLogConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcIpv6CidrBlock:VpcIpv6CidrBlock":
                return new VpcIpv6CidrBlock(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcIpv6EniAddress:VpcIpv6EniAddress":
                return new VpcIpv6EniAddress(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcIpv6SubnetCidrBlock:VpcIpv6SubnetCidrBlock":
                return new VpcIpv6SubnetCidrBlock(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcLocalGateway:VpcLocalGateway":
                return new VpcLocalGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcNetDetect:VpcNetDetect":
                return new VpcNetDetect(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcNetworkAclQuintuple:VpcNetworkAclQuintuple":
                return new VpcNetworkAclQuintuple(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcNotifyRoutes:VpcNotifyRoutes":
                return new VpcNotifyRoutes(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcPeerConnectAcceptOperation:VpcPeerConnectAcceptOperation":
                return new VpcPeerConnectAcceptOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcPeerConnectManager:VpcPeerConnectManager":
                return new VpcPeerConnectManager(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcPeerConnectRejectOperation:VpcPeerConnectRejectOperation":
                return new VpcPeerConnectRejectOperation(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcPrivateNatGateway:VpcPrivateNatGateway":
                return new VpcPrivateNatGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcResumeSnapshotInstance:VpcResumeSnapshotInstance":
                return new VpcResumeSnapshotInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcSnapshotPolicy:VpcSnapshotPolicy":
                return new VpcSnapshotPolicy(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcSnapshotPolicyAttachment:VpcSnapshotPolicyAttachment":
                return new VpcSnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcSnapshotPolicyConfig:VpcSnapshotPolicyConfig":
                return new VpcSnapshotPolicyConfig(name, <any>undefined, { urn })
            case "tencentcloud:index/vpcTrafficPackage:VpcTrafficPackage":
                return new VpcTrafficPackage(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnConnectionReset:VpnConnectionReset":
                return new VpnConnectionReset(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnCustomerGateway:VpnCustomerGateway":
                return new VpnCustomerGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnCustomerGatewayConfigurationDownload:VpnCustomerGatewayConfigurationDownload":
                return new VpnCustomerGatewayConfigurationDownload(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnGatewayCcnRoutes:VpnGatewayCcnRoutes":
                return new VpnGatewayCcnRoutes(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnGatewayRoute:VpnGatewayRoute":
                return new VpnGatewayRoute(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnGatewaySslClientCert:VpnGatewaySslClientCert":
                return new VpnGatewaySslClientCert(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnSslClient:VpnSslClient":
                return new VpnSslClient(name, <any>undefined, { urn })
            case "tencentcloud:index/vpnSslServer:VpnSslServer":
                return new VpnSslServer(name, <any>undefined, { urn })
            case "tencentcloud:index/wafAntiFake:WafAntiFake":
                return new WafAntiFake(name, <any>undefined, { urn })
            case "tencentcloud:index/wafAntiInfoLeak:WafAntiInfoLeak":
                return new WafAntiInfoLeak(name, <any>undefined, { urn })
            case "tencentcloud:index/wafAutoDenyRules:WafAutoDenyRules":
                return new WafAutoDenyRules(name, <any>undefined, { urn })
            case "tencentcloud:index/wafCc:WafCc":
                return new WafCc(name, <any>undefined, { urn })
            case "tencentcloud:index/wafCcAutoStatus:WafCcAutoStatus":
                return new WafCcAutoStatus(name, <any>undefined, { urn })
            case "tencentcloud:index/wafCcSession:WafCcSession":
                return new WafCcSession(name, <any>undefined, { urn })
            case "tencentcloud:index/wafClbDomain:WafClbDomain":
                return new WafClbDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/wafClbInstance:WafClbInstance":
                return new WafClbInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/wafCustomRule:WafCustomRule":
                return new WafCustomRule(name, <any>undefined, { urn })
            case "tencentcloud:index/wafCustomWhiteRule:WafCustomWhiteRule":
                return new WafCustomWhiteRule(name, <any>undefined, { urn })
            case "tencentcloud:index/wafIpAccessControl:WafIpAccessControl":
                return new WafIpAccessControl(name, <any>undefined, { urn })
            case "tencentcloud:index/wafModifyAccessPeriod:WafModifyAccessPeriod":
                return new WafModifyAccessPeriod(name, <any>undefined, { urn })
            case "tencentcloud:index/wafModuleStatus:WafModuleStatus":
                return new WafModuleStatus(name, <any>undefined, { urn })
            case "tencentcloud:index/wafProtectionMode:WafProtectionMode":
                return new WafProtectionMode(name, <any>undefined, { urn })
            case "tencentcloud:index/wafSaasDomain:WafSaasDomain":
                return new WafSaasDomain(name, <any>undefined, { urn })
            case "tencentcloud:index/wafSaasInstance:WafSaasInstance":
                return new WafSaasInstance(name, <any>undefined, { urn })
            case "tencentcloud:index/wafWebShell:WafWebShell":
                return new WafWebShell(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataBaseline:WedataBaseline":
                return new WedataBaseline(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataDatasource:WedataDatasource":
                return new WedataDatasource(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataDqRule:WedataDqRule":
                return new WedataDqRule(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataFunction:WedataFunction":
                return new WedataFunction(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataIntegrationOfflineTask:WedataIntegrationOfflineTask":
                return new WedataIntegrationOfflineTask(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataIntegrationRealtimeTask:WedataIntegrationRealtimeTask":
                return new WedataIntegrationRealtimeTask(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataIntegrationTaskNode:WedataIntegrationTaskNode":
                return new WedataIntegrationTaskNode(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataResource:WedataResource":
                return new WedataResource(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataRuleTemplate:WedataRuleTemplate":
                return new WedataRuleTemplate(name, <any>undefined, { urn })
            case "tencentcloud:index/wedataScript:WedataScript":
                return new WedataScript(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "index/addressTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/addressTemplateGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/albServerAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosCcBlackWhiteIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosCcPrecisionPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosDdosBlackWhiteIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosDdosGeoIpBlockConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosDdosSpeedLimitConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosDefaultAlarmThreshold", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosIpAlarmThresholdConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosPacketFilterConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosPortAclConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/antiddosSchedulingDomainUserName", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayApi", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayApiApp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayApiAppAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayApiDoc", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayApiKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayApiKeyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayCustomDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayImportOpenApi", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayIpStrategy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayPlugin", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayPluginAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayServiceRelease", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayStrategyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayUpdateApiAppKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayUpdateService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayUpstream", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayUsagePlan", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apiGatewayUsagePlanAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/apmInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asCompleteLifecycle", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asExecuteScalingPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asLifecycleHook", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asLoadBalancer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asNotification", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asProtectInstances", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asRemoveInstances", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asScaleInInstances", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asScaleOutInstances", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asScalingConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asScalingGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asScalingGroupStatus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asScalingPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asSchedule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asStartInstances", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/asStopInstances", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/audit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/auditTrack", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biDatasource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biDatasourceCloud", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biEmbedIntervalApply", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biEmbedTokenApply", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biProject", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biProjectUserRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/biUserRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camAccessKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camGroupMembership", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camGroupPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camMfaFlag", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camOidcSso", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camPolicyByName", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camPolicyVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camRoleByName", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camRolePermissionBoundaryAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camRolePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camRolePolicyAttachmentByName", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camRoleSso", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camSamlProvider", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camSetPolicyVersionConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camTagRoleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camUserPermissionBoundaryAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camUserPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/camUserSamlConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/catTaskSet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsDiskBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsDiskBackupRollbackOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsSnapshot", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsSnapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsSnapshotSharePermission", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsStorage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsStorageAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsStorageSet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cbsStorageSetAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccn", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnBandwidthLimit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnInstancesAcceptAttach", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnInstancesRejectAttach", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnInstancesResetAttach", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnRouteTable", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnRouteTableAssociateInstanceConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnRouteTableBroadcastPolicies", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnRouteTableInputPolicies", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnRouteTableSelectionPolicies", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ccnRoutes", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdcDedicatedCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdcSite", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdhInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdnDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdnUrlPurge", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdnUrlPush", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdwdorisInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdwdorisWorkloadGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cdwpgInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsAccessGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsAccessRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsAutoSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsAutoSnapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsFileSystem", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsSignUpCfsService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsSnapshot", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfsUserQuota", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwAddressTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwBlockIgnore", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwEdgeFirewallSwitch", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwEdgePolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwNatFirewallSwitch", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwNatInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwNatPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwSyncAsset", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwSyncRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwVpcFirewallSwitch", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwVpcInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cfwVpcPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/chdfsAccessGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/chdfsAccessRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/chdfsFileSystem", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/chdfsLifeCycleRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/chdfsMountPoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/chdfsMountPointAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciBucketAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciBucketPicStyle", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciGuetzli", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciHotLink", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaAnimationTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaConcatTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaPicProcessTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaSmartCoverTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaSpeechRecognitionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaSuperResolutionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaTranscodeProTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaTranscodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaTtsTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaVideoMontageTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaVideoProcessTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaVoiceSeparateTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciMediaWatermarkTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciOriginalImageProtection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciamUserGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ciamUserStore", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaAcl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaAclRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaConnectResource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaConsumerGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaConsumerGroupModifyOffset", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaDatahubTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaDatahubTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaRenewInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ckafkaUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbCustomizedConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbFunctionTargetsAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbInstanceMixIpTargetConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbInstanceSlaConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbListener", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbListenerRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbLogSet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbLogTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbRedirection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbReplaceCertForLbs", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbSnatIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbTargetGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbTargetGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbTargetGroupAttachments", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clbTargetGroupInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseAccountPermission", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseBackupStrategy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseDeleteBackupData", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseKeyvalConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseRecoverBackupJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clickhouseXmlConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsAlarm", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsAlarmNotice", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsCkafkaConsumer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsConfigAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsConfigExtra", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsCosRecharge", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsCosShipper", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsDataTransform", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsExport", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsIndex", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsKafkaRecharge", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsLogset", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsMachineGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsScheduledSql", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/clsTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/containerCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/containerClusterInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBatch", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucket", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketDomainCertificateAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketGenerateInventoryImmediatelyOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketInventory", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketObject", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketReferer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosBucketVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosObjectAbortMultipartUploadOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosObjectCopyOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosObjectDownloadOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cosObjectRestoreOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/csipRiskCenter", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssAuthenticateDomainOwnerOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssBackupStream", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssCallbackRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssCallbackTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssDomainReferer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssEnableOptimalSwitching", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssLiveTranscodeRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssLiveTranscodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPadRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPadTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPlayAuthKeyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPlayDomainCertAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPullStreamTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPullStreamTaskRestart", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssPushAuthKeyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssRecordRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssRecordTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssSnapshotRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssStartStreamMonitor", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssStreamMonitor", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssTimeshiftRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssTimeshiftTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssWatermark", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cssWatermarkRuleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmChcConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmExportImages", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmHpcCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmImageSharePermission", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmImportImage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmLaunchTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmLaunchTemplateDefaultVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmLaunchTemplateVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmModifyInstanceDiskType", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmProgramFpgaImage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmRebootInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmRenewHost", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmRenewInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cvmSyncImage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cwpLicenseBindAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cwpLicenseOrder", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbAccountPrivileges", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbAuditLogFile", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbBinlogSaveDays", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbClusterDatabases", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbClusterPasswordComplexity", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbClusterResourcePackagesAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbClusterSlaveZone", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbExportInstanceErrorLogs", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbExportInstanceSlowQueries", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbInstanceParam", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbIsolateInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbParamTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbProxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbProxyEndPoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbReadOnlyInstanceExclusiveAccess", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbReadonlyInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbReloadProxyNode", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbResourcePackage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbRestartInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbRollBackCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbSecurityGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbUpgradeProxyVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/cynosdbWan", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbAcl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbBindDeviceAccountPassword", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbBindDeviceAccountPrivateKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbBindDeviceResource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbCmdTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbDevice", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbDeviceAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbDeviceGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbDeviceGroupMembers", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbResetUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbResource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbUserGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dasbUserGroupMembers", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuCcHttpPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuCcHttpsPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuCcPolicyV2", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuDdosIpAttachmentV2", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuDdosPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuDdosPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuDdosPolicyCase", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuDdosPolicyV2", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuEip", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuL4Rule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuL4RuleV2", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuL7Rule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dayuL7RuleV2", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dbbrainDbDiagReportTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dbbrainModifyDiagDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dbbrainSecurityAuditLogExportTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dbbrainSqlFilter", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dbbrainTdsqlAuditLog", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcGatewayCcnRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcInternetAddress", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcInternetAddressConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcShareDcxConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbAccountPrivileges", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbActivateHourInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbCancelDcnJobOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbDbParameters", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbDbSyncModeConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbEncryptAttributesConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbFlushBinlogOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbHourdbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbInstanceConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbIsolateHourInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcdbSwitchDbInstanceHaOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcx", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dcxExtraConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcAddUsersToWorkGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcAttachUserPolicyOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcAttachWorkGroupPolicyOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcBindWorkGroupsToUserAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcDataEngine", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcDetachUserPolicyOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcDetachWorkGroupPolicyOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcModifyDataEngineDescriptionOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcModifyUserTypOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcRenewDataEngineOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcRestartDataEngineOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcRollbackDataEngineImageOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcStoreLocationConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcSuspendResumeDataEngine", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcSwitchDataEngineImageOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcUpdateDataEngineConfigOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcUpdateRowFilterOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcUpgradeDataEngineImageOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcUserDataEngineConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dlcWorkGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnat", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodCustomLine", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodDomainAlias", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodDomainInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodDomainLock", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodDownloadSnapshotOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodModifyDomainOwnerOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodModifyRecordGroupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodRecord", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodRecordGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dnspodSnapshotConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsCompareTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsCompareTaskStopOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsMigrateJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsMigrateJobConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsMigrateJobResumeOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsMigrateJobStartOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsMigrateService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncCheckJobOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobContinueOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobIsolateOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobPauseOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobRecoverOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobResizeOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobResumeOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobStartOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/dtsSyncJobStopOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ebEventBus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ebEventConnector", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ebEventRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ebEventTarget", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ebEventTransform", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ebPutEvents", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eip", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eipAddressTransform", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eipAssociation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eipNormalAddressReturn", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eipPublicAddressAdjust", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eksCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eksContainerInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchDiagnose", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchDiagnoseInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchIndex", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchLogstash", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchLogstashPipeline", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchRestartInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchRestartKibanaOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchRestartLogstashInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchRestartNodesOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchSecurityGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchStartLogstashPipelineOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchStopLogstashPipelineOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/elasticsearchUpdatePluginsOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/emrCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/emrUserManager", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eni", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eniAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eniIpv4Address", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eniIpv6Address", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/eniSgAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapCertificate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapCustomHeader", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapDomainErrorPage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapGlobalDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapGlobalDomainDns", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapHttpDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapHttpRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapLayer4Listener", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapLayer7Listener", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapProxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapProxyGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapRealserver", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/gaapSecurityRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/haVip", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/haVipEipAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterExternalSamlIdentityProvider", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterRoleAssignment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterRoleConfiguration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterRoleConfigurationPermissionPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterUserGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/identityCenterUserSyncProvisioning", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/image", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/instanceSet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ipv6AddressBandwidth", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kmsCloudResourceAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kmsExternalKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kmsKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kmsOverwriteWhiteBoxDeviceFingerprints", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kmsWhiteBoxKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesAddon", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesAddonAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesAddonConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesAsScalingGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesAuthAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesBackupStorageLocation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesClusterAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesClusterEndpoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesEncryptionProtection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesNativeNodePool", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesScaleWorker", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/kubernetesServerlessNodePool", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lb", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseApplyDiskBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseApplyInstanceSnapshot", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseBlueprint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseDisk", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseDiskAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseDiskBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseFirewallRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseFirewallTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseKeyPair", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseKeyPairAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseRebootInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseRenewDisk", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseRenewInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseSnapshot", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseStartInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/lighthouseStopInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbAccountPrivileges", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbBackupTime", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbCancelDcnJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbDedicatedclusterDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbEncryptAttributes", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbFlushBinlog", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbHourDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbInstanceConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbLogFileRetentionPeriod", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbOperateHourDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbParameters", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbRenewInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbRestartInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbSecurityGroups", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mariadbSwitchHa", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mdlStreamLiveInput", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbInstanceAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbInstanceBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbInstanceBackupDownloadTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbInstanceBackupRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbInstanceTransparentDataEncryption", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbShardingInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mongodbStandbyInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorAlarmNotice", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorAlarmPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorAlarmPolicySetDefault", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorBindingObject", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorBindingReceiver", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaDnsConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaEnvConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaIntegration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaNotificationChannel", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaPlugin", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaSsoAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaSsoCamConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaSsoConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaVersionUpgrade", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorGrafanaWhitelistConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorPolicyBindingObject", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorPolicyGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpAlertGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpAlertRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpCvmAgent", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpExporterIntegration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpGrafanaConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpManageGrafanaAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpRecordingRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpScrapeJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeAlertPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeBasicConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeClusterAgent", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeGlobalNotification", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeRecordRuleYaml", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/monitorTmpTkeTemplateAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsAdaptiveDynamicStreamingTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsAiAnalysisTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsAiRecognitionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsAnimatedGraphicsTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsContentReviewTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsEditMediaOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsEnableScheduleConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsEnableWorkflowConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsEvent", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsExecuteFunctionOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsFlow", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsImageSpriteTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsInput", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsManageTaskOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsOutput", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsPersonSample", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsProcessLiveStreamOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsProcessMediaOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsSampleSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsSchedule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsSnapshotByTimeoffsetTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsStartFlowOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsTranscodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsWatermarkTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsWithdrawsWatermarkOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsWordSample", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mpsWorkflow", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlAccountPrivilege", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlAuditLogFile", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlBackupDownloadRestriction", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlBackupEncryptionStatus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlBackupPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlClsLogAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlDatabase", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlDbImportJobOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlDeployGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlDrInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlDrInstanceToMater", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlInstanceEncryptionOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlIsolateInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlLocalBinlogConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlParamTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlPasswordComplexity", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlPrivilege", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlProxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlReadonlyInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlReloadBalanceProxyNode", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRemoteBackupConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRenewDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlResetRootAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRestartDbInstancesOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRoGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRoGroupLoadOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRoInstanceIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRoStartReplication", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRoStopReplication", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRollback", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlRollbackStop", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlSecurityGroupsAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlSsl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlSwitchForUpgrade", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlSwitchMasterSlaveOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlSwitchProxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlTimeWindow", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/mysqlVerifyRootAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/natGatewaySnat", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/natRefreshNatDcRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusFolder", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusJobConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusJobCopy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusResource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusResourceConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusRunJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusStopJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusTriggerJobSavepoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/oceanusWorkSpace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgIdentity", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgManagePolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgManagePolicyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgManagePolicyTarget", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgMember", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgMemberAuthIdentityAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgMemberEmail", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgMemberPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgNode", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgShareUnit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationOrgShareUnitMember", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationPolicySubAccountAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationQuitOrganizationOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/organizationServiceAssign", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/placementGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlBackupDownloadRestrictionConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlBackupPlanConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlBaseBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlDeleteLogBackupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlDisisolateDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlInstanceHaConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlIsolateDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlModifyAccountRemarkOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlModifySwitchTimePeriodOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlParameterTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlReadonlyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlReadonlyGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlReadonlyInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlRebalanceReadonlyGroupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlRenewDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlRestartDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/postgresqlSecurityGroupConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/privateDnsRecord", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/privateDnsZone", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/privateDnsZoneVpcAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/project", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/protocolTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/protocolTemplateGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsAlertChannel", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsCronJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsCronJobAbort", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsCronJobRestart", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsFile", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsJob", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsJobAbort", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsProject", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsScenario", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ptsTmpKeyGenerate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisBackupConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisBackupDownloadRestriction", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisBackupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisClearInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisConnectionConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisMaintenanceWindow", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisParam", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisParamTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisReadOnly", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisRenewInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisReplicaReadonly", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisReplicateAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisSsl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisStartupInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisSwitchMaster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisUpgradeCacheVersionOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisUpgradeMultiZoneOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/redisUpgradeProxyVersionOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/reservedInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/routeEntry", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/routeTableAssociation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/routeTableEntry", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumInstanceStatusConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumOfflineLogConfigAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumProject", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumProjectStatusConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumReleaseFile", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumTawInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/rumWhitelist", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfFunction", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfFunctionAlias", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfFunctionEventInvokeConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfFunctionVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfInvokeFunction", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfLayer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfProvisionedConcurrencyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfReservedConcurrencyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfSyncInvokeFunction", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfTerminateAsyncEvent", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/scfTriggerConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/securityGroupLiteRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/securityGroupRuleSet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesBatchSendEmail", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesBlackListDelete", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesEmailAddress", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesReceiver", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesSendEmail", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sesVerifyDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/smsSign", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/smsTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverAccountDbAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverBasicInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverBusinessIntelligenceFile", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverBusinessIntelligenceInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverCompleteExpansion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigBackupStrategy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigDatabaseCdc", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigDatabaseCt", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigDatabaseMdf", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigInstanceParam", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigInstanceRoGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigInstanceSecurityGroups", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverConfigTerminateDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverDatabaseTde", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverDb", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverFullBackupMigration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverGeneralBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverGeneralClone", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverGeneralCloudInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverGeneralCloudRoInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverGeneralCommunication", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverIncreBackupMigration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverInstanceSsl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverInstanceTde", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverMigration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverPublishSubscribe", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverReadonlyInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverRenewDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverRenewPostpaidDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverRestartDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverRestoreInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverRollbackInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverStartBackupFullMigration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverStartBackupIncrementalMigration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sqlserverStartXevent", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslCertificate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslCheckCertificateChainOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslCompleteCertificateOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslDeployCertificateInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslDeployCertificateRecordRetryOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslDeployCertificateRecordRollbackOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslDownloadCertificateOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslFreeCertificate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslPayCertificate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslReplaceCertificateOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslRevokeCertificateOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslUpdateCertificateInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslUpdateCertificateRecordRetryOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslUpdateCertificateRecordRollbackOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/sslUploadRevokeLetterOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ssmProductSecret", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ssmRotateProductSecret", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ssmSecret", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ssmSecretVersion", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/ssmSshKeyPairSecret", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tag", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tagAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tatCommand", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tatInvocationCommandAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tatInvocationInvokeAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tatInvoker", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tatInvokerConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcaplusCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcaplusIdl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcaplusTable", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcaplusTablegroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmAccessLogConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmClusterAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmMesh", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmPrometheusAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmTracingConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmqQueue", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmqSubscribe", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcmqTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrCreateImageSignatureOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrCustomizedDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrDeleteImageOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrImmutableTagRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrManageReplicationOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrRepository", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrServiceAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrTagRetentionExecutionConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrTagRetentionRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrToken", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrVpcAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tcrWebhookTrigger", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdcpgCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdcpgInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqNamespaceRoleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqProfessionalCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRabbitmqUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRabbitmqVipInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRabbitmqVirtualHost", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqEnvironmentRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRocketmqVipInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqSendRocketmqMessage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqSubscription", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tdmqTopicWithFullId", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temAppConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temApplication", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temApplicationService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temEnvironment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temLogConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temScaleRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/temWorkload", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoAccelerationDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoApplicationProxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoApplicationProxyRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoCertificateConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoL4Proxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoOriginGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoOwnershipVerify", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoRealtimeLogDelivery", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoRuleEngine", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoZone", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/teoZoneSetting", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/trocketRocketmqConsumerGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/trocketRocketmqInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/trocketRocketmqRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/trocketRocketmqTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwCanaryRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwCertificate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwNetwork", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwNetworkAccessControl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwRouteRateLimit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwServiceRateLimit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwStrategy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseCngwStrategyBindGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseWafDomains", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tseWafProtection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApiGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApiRateLimitRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplication", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplicationConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplicationFileConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplicationFileConfigRelease", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplicationPublicConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplicationPublicConfigRelease", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfApplicationReleaseConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfBindApiGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfConfigTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfDeployContainerGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfDeployVmGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfEnableUnitRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfInstancesAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfLane", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfLaneRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfMicroservice", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfOperateContainerGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfOperateGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfPathRewrite", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfReleaseApiGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfRepository", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfUnitNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/tsfUnitRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodAdaptiveDynamicStreamingTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodEventConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodImageSpriteTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodProcedureTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodSampleSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodSnapshotByTimeOffsetTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodSubApplication", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodSuperPlayerConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodTranscodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vodWatermarkTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpc", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcAcl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcAclAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcBandwidthPackage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcClassicLinkAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcDhcpAssociateAddress", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcDhcpIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcEnableEndPointConnect", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcEndPoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcEndPointService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcEndPointServiceWhiteList", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcFlowLog", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcFlowLogConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcIpv6CidrBlock", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcIpv6EniAddress", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcIpv6SubnetCidrBlock", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcLocalGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcNetDetect", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcNetworkAclQuintuple", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcNotifyRoutes", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcPeerConnectAcceptOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcPeerConnectManager", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcPeerConnectRejectOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcPrivateNatGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcResumeSnapshotInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcSnapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcSnapshotPolicyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpcTrafficPackage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnConnection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnConnectionReset", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnCustomerGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnCustomerGatewayConfigurationDownload", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnGatewayCcnRoutes", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnGatewayRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnGatewaySslClientCert", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnSslClient", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/vpnSslServer", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafAntiFake", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafAntiInfoLeak", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafAutoDenyRules", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafCc", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafCcAutoStatus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafCcSession", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafClbDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafClbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafCustomRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafCustomWhiteRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafIpAccessControl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafModifyAccessPeriod", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafModuleStatus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafProtectionMode", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafSaasDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafSaasInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wafWebShell", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataBaseline", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataDatasource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataDqRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataFunction", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataIntegrationOfflineTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataIntegrationRealtimeTask", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataIntegrationTaskNode", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataResource", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataRuleTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "index/wedataScript", _module)
pulumi.runtime.registerResourcePackage("tencentcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tencentcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
