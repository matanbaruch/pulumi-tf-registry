// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCatMetricData(args: GetCatMetricDataArgs, opts?: pulumi.InvokeOptions): Promise<GetCatMetricDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getCatMetricData:getCatMetricData", {
        "analyzeTaskType": args.analyzeTaskType,
        "field": args.field,
        "filter": args.filter,
        "filters": args.filters,
        "groupBy": args.groupBy,
        "id": args.id,
        "metricType": args.metricType,
        "resultOutputFile": args.resultOutputFile,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCatMetricData.
 */
export interface GetCatMetricDataArgs {
    analyzeTaskType: string;
    field: string;
    filter?: string;
    filters: string[];
    groupBy?: string;
    id?: string;
    metricType: string;
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getCatMetricData.
 */
export interface GetCatMetricDataResult {
    readonly analyzeTaskType: string;
    readonly field: string;
    readonly filter?: string;
    readonly filters: string[];
    readonly groupBy?: string;
    readonly id: string;
    readonly metricSet: string;
    readonly metricType: string;
    readonly resultOutputFile?: string;
}
export function getCatMetricDataOutput(args: GetCatMetricDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCatMetricDataResult> {
    return pulumi.output(args).apply((a: any) => getCatMetricData(a, opts))
}

/**
 * A collection of arguments for invoking getCatMetricData.
 */
export interface GetCatMetricDataOutputArgs {
    analyzeTaskType: pulumi.Input<string>;
    field: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filters: pulumi.Input<pulumi.Input<string>[]>;
    groupBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
}
