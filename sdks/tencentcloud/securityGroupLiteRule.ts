// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityGroupLiteRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupLiteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupLiteRuleState, opts?: pulumi.CustomResourceOptions): SecurityGroupLiteRule {
        return new SecurityGroupLiteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/securityGroupLiteRule:SecurityGroupLiteRule';

    /**
     * Returns true if the given object is an instance of SecurityGroupLiteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroupLiteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupLiteRule.__pulumiType;
    }

    /**
     * Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of
     * 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address
     * Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`,
     * `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    public readonly egresses!: pulumi.Output<string[] | undefined>;
    /**
     * Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of
     * 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address
     * Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`,
     * `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    public readonly ingresses!: pulumi.Output<string[] | undefined>;
    /**
     * ID of the security group.
     */
    public readonly securityGroupId!: pulumi.Output<string>;

    /**
     * Create a SecurityGroupLiteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupLiteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupLiteRuleArgs | SecurityGroupLiteRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupLiteRuleState | undefined;
            resourceInputs["egresses"] = state ? state.egresses : undefined;
            resourceInputs["ingresses"] = state ? state.ingresses : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
        } else {
            const args = argsOrState as SecurityGroupLiteRuleArgs | undefined;
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["egresses"] = args ? args.egresses : undefined;
            resourceInputs["ingresses"] = args ? args.ingresses : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGroupLiteRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroupLiteRule resources.
 */
export interface SecurityGroupLiteRuleState {
    /**
     * Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of
     * 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address
     * Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`,
     * `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    egresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of
     * 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address
     * Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`,
     * `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    ingresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the security group.
     */
    securityGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityGroupLiteRule resource.
 */
export interface SecurityGroupLiteRuleArgs {
    /**
     * Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of
     * 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address
     * Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`,
     * `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    egresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of
     * 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address
     * Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`,
     * `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    ingresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the security group.
     */
    securityGroupId: pulumi.Input<string>;
}
