// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MpsFlow extends pulumi.CustomResource {
    /**
     * Get an existing MpsFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MpsFlowState, opts?: pulumi.CustomResourceOptions): MpsFlow {
        return new MpsFlow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/mpsFlow:MpsFlow';

    /**
     * Returns true if the given object is an instance of MpsFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MpsFlow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MpsFlow.__pulumiType;
    }

    /**
     * The event ID associated with this Flow. Each flow can only be associated with one Event.
     */
    public readonly eventId!: pulumi.Output<string | undefined>;
    /**
     * Flow name.
     */
    public readonly flowName!: pulumi.Output<string>;
    /**
     * The input group for the flow.
     */
    public readonly inputGroups!: pulumi.Output<outputs.MpsFlowInputGroup[] | undefined>;
    /**
     * Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
     */
    public readonly maxBandwidth!: pulumi.Output<number>;

    /**
     * Create a MpsFlow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MpsFlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MpsFlowArgs | MpsFlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MpsFlowState | undefined;
            resourceInputs["eventId"] = state ? state.eventId : undefined;
            resourceInputs["flowName"] = state ? state.flowName : undefined;
            resourceInputs["inputGroups"] = state ? state.inputGroups : undefined;
            resourceInputs["maxBandwidth"] = state ? state.maxBandwidth : undefined;
        } else {
            const args = argsOrState as MpsFlowArgs | undefined;
            if ((!args || args.flowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowName'");
            }
            if ((!args || args.maxBandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxBandwidth'");
            }
            resourceInputs["eventId"] = args ? args.eventId : undefined;
            resourceInputs["flowName"] = args ? args.flowName : undefined;
            resourceInputs["inputGroups"] = args ? args.inputGroups : undefined;
            resourceInputs["maxBandwidth"] = args ? args.maxBandwidth : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MpsFlow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MpsFlow resources.
 */
export interface MpsFlowState {
    /**
     * The event ID associated with this Flow. Each flow can only be associated with one Event.
     */
    eventId?: pulumi.Input<string>;
    /**
     * Flow name.
     */
    flowName?: pulumi.Input<string>;
    /**
     * The input group for the flow.
     */
    inputGroups?: pulumi.Input<pulumi.Input<inputs.MpsFlowInputGroup>[]>;
    /**
     * Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
     */
    maxBandwidth?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MpsFlow resource.
 */
export interface MpsFlowArgs {
    /**
     * The event ID associated with this Flow. Each flow can only be associated with one Event.
     */
    eventId?: pulumi.Input<string>;
    /**
     * Flow name.
     */
    flowName: pulumi.Input<string>;
    /**
     * The input group for the flow.
     */
    inputGroups?: pulumi.Input<pulumi.Input<inputs.MpsFlowInputGroup>[]>;
    /**
     * Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
     */
    maxBandwidth: pulumi.Input<number>;
}
