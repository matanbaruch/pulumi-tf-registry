// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CiMediaSuperResolutionTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiMediaSuperResolutionTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiMediaSuperResolutionTemplateState, opts?: pulumi.CustomResourceOptions): CiMediaSuperResolutionTemplate {
        return new CiMediaSuperResolutionTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/ciMediaSuperResolutionTemplate:CiMediaSuperResolutionTemplate';

    /**
     * Returns true if the given object is an instance of CiMediaSuperResolutionTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiMediaSuperResolutionTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiMediaSuperResolutionTemplate.__pulumiType;
    }

    /**
     * bucket name.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Auto scaling switch, off by default.
     */
    public readonly enableScaleUp!: pulumi.Output<string | undefined>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
     */
    public readonly resolution!: pulumi.Output<string>;
    /**
     * version, default value Base, Base: basic version, Enhance: enhanced version.
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a CiMediaSuperResolutionTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiMediaSuperResolutionTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiMediaSuperResolutionTemplateArgs | CiMediaSuperResolutionTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiMediaSuperResolutionTemplateState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["enableScaleUp"] = state ? state.enableScaleUp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resolution"] = state ? state.resolution : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CiMediaSuperResolutionTemplateArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.resolution === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolution'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["enableScaleUp"] = args ? args.enableScaleUp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resolution"] = args ? args.resolution : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiMediaSuperResolutionTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CiMediaSuperResolutionTemplate resources.
 */
export interface CiMediaSuperResolutionTemplateState {
    /**
     * bucket name.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Auto scaling switch, off by default.
     */
    enableScaleUp?: pulumi.Input<string>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    name?: pulumi.Input<string>;
    /**
     * Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
     */
    resolution?: pulumi.Input<string>;
    /**
     * version, default value Base, Base: basic version, Enhance: enhanced version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CiMediaSuperResolutionTemplate resource.
 */
export interface CiMediaSuperResolutionTemplateArgs {
    /**
     * bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * Auto scaling switch, off by default.
     */
    enableScaleUp?: pulumi.Input<string>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    name?: pulumi.Input<string>;
    /**
     * Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
     */
    resolution: pulumi.Input<string>;
    /**
     * version, default value Base, Base: basic version, Enhance: enhanced version.
     */
    version?: pulumi.Input<string>;
}
