// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PtsScenario extends pulumi.CustomResource {
    /**
     * Get an existing PtsScenario resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PtsScenarioState, opts?: pulumi.CustomResourceOptions): PtsScenario {
        return new PtsScenario(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/ptsScenario:PtsScenario';

    /**
     * Returns true if the given object is an instance of PtsScenario.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PtsScenario {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PtsScenario.__pulumiType;
    }

    /**
     * App ID Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    public /*out*/ readonly appId!: pulumi.Output<number>;
    /**
     * Scene creation time.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * cron job ID.
     */
    public readonly cronId!: pulumi.Output<string | undefined>;
    /**
     * Test data set.
     */
    public readonly datasets!: pulumi.Output<outputs.PtsScenarioDataset[] | undefined>;
    /**
     * Pts Scenario Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Domain name resolution configuration.
     */
    public readonly domainNameConfig!: pulumi.Output<outputs.PtsScenarioDomainNameConfig | undefined>;
    /**
     * deprecated.
     */
    public readonly extensions!: pulumi.Output<string[] | undefined>;
    /**
     * Pressure allocation.
     */
    public readonly load!: pulumi.Output<outputs.PtsScenarioLoad | undefined>;
    /**
     * Pts Scenario name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SLA strategy.
     */
    public readonly plugins!: pulumi.Output<outputs.PtsScenarioPlugin[] | undefined>;
    /**
     * Project id.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Protocol file path.
     */
    public readonly protocols!: pulumi.Output<outputs.PtsScenarioProtocol[] | undefined>;
    /**
     * Request file path.
     */
    public readonly requestFiles!: pulumi.Output<outputs.PtsScenarioRequestFile[] | undefined>;
    /**
     * SLA strategy.
     */
    public readonly slaPolicy!: pulumi.Output<outputs.PtsScenarioSlaPolicy | undefined>;
    /**
     * Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    public /*out*/ readonly subAccountUin!: pulumi.Output<string>;
    /**
     * Test script file information.
     */
    public readonly testScripts!: pulumi.Output<outputs.PtsScenarioTestScript[] | undefined>;
    /**
     * Pressure test engine type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * User ID Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    public /*out*/ readonly uin!: pulumi.Output<string>;
    /**
     * Scene modification time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a PtsScenario resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PtsScenarioArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PtsScenarioArgs | PtsScenarioState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PtsScenarioState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["cronId"] = state ? state.cronId : undefined;
            resourceInputs["datasets"] = state ? state.datasets : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainNameConfig"] = state ? state.domainNameConfig : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["load"] = state ? state.load : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plugins"] = state ? state.plugins : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["requestFiles"] = state ? state.requestFiles : undefined;
            resourceInputs["slaPolicy"] = state ? state.slaPolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subAccountUin"] = state ? state.subAccountUin : undefined;
            resourceInputs["testScripts"] = state ? state.testScripts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uin"] = state ? state.uin : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as PtsScenarioArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cronId"] = args ? args.cronId : undefined;
            resourceInputs["datasets"] = args ? args.datasets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainNameConfig"] = args ? args.domainNameConfig : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["load"] = args ? args.load : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plugins"] = args ? args.plugins : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["requestFiles"] = args ? args.requestFiles : undefined;
            resourceInputs["slaPolicy"] = args ? args.slaPolicy : undefined;
            resourceInputs["testScripts"] = args ? args.testScripts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["appId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subAccountUin"] = undefined /*out*/;
            resourceInputs["uin"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PtsScenario.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PtsScenario resources.
 */
export interface PtsScenarioState {
    /**
     * App ID Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    appId?: pulumi.Input<number>;
    /**
     * Scene creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * cron job ID.
     */
    cronId?: pulumi.Input<string>;
    /**
     * Test data set.
     */
    datasets?: pulumi.Input<pulumi.Input<inputs.PtsScenarioDataset>[]>;
    /**
     * Pts Scenario Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain name resolution configuration.
     */
    domainNameConfig?: pulumi.Input<inputs.PtsScenarioDomainNameConfig>;
    /**
     * deprecated.
     */
    extensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Pressure allocation.
     */
    load?: pulumi.Input<inputs.PtsScenarioLoad>;
    /**
     * Pts Scenario name.
     */
    name?: pulumi.Input<string>;
    /**
     * SLA strategy.
     */
    plugins?: pulumi.Input<pulumi.Input<inputs.PtsScenarioPlugin>[]>;
    /**
     * Project id.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Protocol file path.
     */
    protocols?: pulumi.Input<pulumi.Input<inputs.PtsScenarioProtocol>[]>;
    /**
     * Request file path.
     */
    requestFiles?: pulumi.Input<pulumi.Input<inputs.PtsScenarioRequestFile>[]>;
    /**
     * SLA strategy.
     */
    slaPolicy?: pulumi.Input<inputs.PtsScenarioSlaPolicy>;
    /**
     * Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    status?: pulumi.Input<number>;
    /**
     * Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    subAccountUin?: pulumi.Input<string>;
    /**
     * Test script file information.
     */
    testScripts?: pulumi.Input<pulumi.Input<inputs.PtsScenarioTestScript>[]>;
    /**
     * Pressure test engine type.
     */
    type?: pulumi.Input<string>;
    /**
     * User ID Note: this field may return null, indicating that a valid value cannot be obtained.
     */
    uin?: pulumi.Input<string>;
    /**
     * Scene modification time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PtsScenario resource.
 */
export interface PtsScenarioArgs {
    /**
     * cron job ID.
     */
    cronId?: pulumi.Input<string>;
    /**
     * Test data set.
     */
    datasets?: pulumi.Input<pulumi.Input<inputs.PtsScenarioDataset>[]>;
    /**
     * Pts Scenario Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain name resolution configuration.
     */
    domainNameConfig?: pulumi.Input<inputs.PtsScenarioDomainNameConfig>;
    /**
     * deprecated.
     */
    extensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Pressure allocation.
     */
    load?: pulumi.Input<inputs.PtsScenarioLoad>;
    /**
     * Pts Scenario name.
     */
    name?: pulumi.Input<string>;
    /**
     * SLA strategy.
     */
    plugins?: pulumi.Input<pulumi.Input<inputs.PtsScenarioPlugin>[]>;
    /**
     * Project id.
     */
    projectId: pulumi.Input<string>;
    /**
     * Protocol file path.
     */
    protocols?: pulumi.Input<pulumi.Input<inputs.PtsScenarioProtocol>[]>;
    /**
     * Request file path.
     */
    requestFiles?: pulumi.Input<pulumi.Input<inputs.PtsScenarioRequestFile>[]>;
    /**
     * SLA strategy.
     */
    slaPolicy?: pulumi.Input<inputs.PtsScenarioSlaPolicy>;
    /**
     * Test script file information.
     */
    testScripts?: pulumi.Input<pulumi.Input<inputs.PtsScenarioTestScript>[]>;
    /**
     * Pressure test engine type.
     */
    type: pulumi.Input<string>;
}
