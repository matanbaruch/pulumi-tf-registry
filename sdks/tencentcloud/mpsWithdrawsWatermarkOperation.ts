// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MpsWithdrawsWatermarkOperation extends pulumi.CustomResource {
    /**
     * Get an existing MpsWithdrawsWatermarkOperation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MpsWithdrawsWatermarkOperationState, opts?: pulumi.CustomResourceOptions): MpsWithdrawsWatermarkOperation {
        return new MpsWithdrawsWatermarkOperation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/mpsWithdrawsWatermarkOperation:MpsWithdrawsWatermarkOperation';

    /**
     * Returns true if the given object is an instance of MpsWithdrawsWatermarkOperation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MpsWithdrawsWatermarkOperation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MpsWithdrawsWatermarkOperation.__pulumiType;
    }

    /**
     * Input information of file for metadata getting.
     */
    public readonly inputInfo!: pulumi.Output<outputs.MpsWithdrawsWatermarkOperationInputInfo>;
    /**
     * The source context which is used to pass through the user request information. The task flow status change callback will
     * return the value of this field.
     */
    public readonly sessionContext!: pulumi.Output<string | undefined>;
    /**
     * Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
     */
    public readonly taskNotifyConfig!: pulumi.Output<outputs.MpsWithdrawsWatermarkOperationTaskNotifyConfig | undefined>;

    /**
     * Create a MpsWithdrawsWatermarkOperation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MpsWithdrawsWatermarkOperationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MpsWithdrawsWatermarkOperationArgs | MpsWithdrawsWatermarkOperationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MpsWithdrawsWatermarkOperationState | undefined;
            resourceInputs["inputInfo"] = state ? state.inputInfo : undefined;
            resourceInputs["sessionContext"] = state ? state.sessionContext : undefined;
            resourceInputs["taskNotifyConfig"] = state ? state.taskNotifyConfig : undefined;
        } else {
            const args = argsOrState as MpsWithdrawsWatermarkOperationArgs | undefined;
            if ((!args || args.inputInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputInfo'");
            }
            resourceInputs["inputInfo"] = args ? args.inputInfo : undefined;
            resourceInputs["sessionContext"] = args ? args.sessionContext : undefined;
            resourceInputs["taskNotifyConfig"] = args ? args.taskNotifyConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MpsWithdrawsWatermarkOperation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MpsWithdrawsWatermarkOperation resources.
 */
export interface MpsWithdrawsWatermarkOperationState {
    /**
     * Input information of file for metadata getting.
     */
    inputInfo?: pulumi.Input<inputs.MpsWithdrawsWatermarkOperationInputInfo>;
    /**
     * The source context which is used to pass through the user request information. The task flow status change callback will
     * return the value of this field.
     */
    sessionContext?: pulumi.Input<string>;
    /**
     * Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
     */
    taskNotifyConfig?: pulumi.Input<inputs.MpsWithdrawsWatermarkOperationTaskNotifyConfig>;
}

/**
 * The set of arguments for constructing a MpsWithdrawsWatermarkOperation resource.
 */
export interface MpsWithdrawsWatermarkOperationArgs {
    /**
     * Input information of file for metadata getting.
     */
    inputInfo: pulumi.Input<inputs.MpsWithdrawsWatermarkOperationInputInfo>;
    /**
     * The source context which is used to pass through the user request information. The task flow status change callback will
     * return the value of this field.
     */
    sessionContext?: pulumi.Input<string>;
    /**
     * Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
     */
    taskNotifyConfig?: pulumi.Input<inputs.MpsWithdrawsWatermarkOperationTaskNotifyConfig>;
}
