// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DlcUser extends pulumi.CustomResource {
    /**
     * Get an existing DlcUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DlcUserState, opts?: pulumi.CustomResourceOptions): DlcUser {
        return new DlcUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/dlcUser:DlcUser';

    /**
     * Returns true if the given object is an instance of DlcUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DlcUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DlcUser.__pulumiType;
    }

    /**
     * User alias, the character length is less than 50.
     */
    public readonly userAlias!: pulumi.Output<string | undefined>;
    /**
     * User description information, easy to distinguish between different users.
     */
    public readonly userDescription!: pulumi.Output<string | undefined>;
    /**
     * The sub-user uin that needs to be authorized.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * User Type. `ADMIN` or `COMMONN`.
     */
    public readonly userType!: pulumi.Output<string | undefined>;
    /**
     * A collection of workgroup IDs bound to the user.
     */
    public /*out*/ readonly workGroupIds!: pulumi.Output<number[]>;

    /**
     * Create a DlcUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DlcUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DlcUserArgs | DlcUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DlcUserState | undefined;
            resourceInputs["userAlias"] = state ? state.userAlias : undefined;
            resourceInputs["userDescription"] = state ? state.userDescription : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
            resourceInputs["workGroupIds"] = state ? state.workGroupIds : undefined;
        } else {
            const args = argsOrState as DlcUserArgs | undefined;
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["userAlias"] = args ? args.userAlias : undefined;
            resourceInputs["userDescription"] = args ? args.userDescription : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
            resourceInputs["workGroupIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DlcUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DlcUser resources.
 */
export interface DlcUserState {
    /**
     * User alias, the character length is less than 50.
     */
    userAlias?: pulumi.Input<string>;
    /**
     * User description information, easy to distinguish between different users.
     */
    userDescription?: pulumi.Input<string>;
    /**
     * The sub-user uin that needs to be authorized.
     */
    userId?: pulumi.Input<string>;
    /**
     * User Type. `ADMIN` or `COMMONN`.
     */
    userType?: pulumi.Input<string>;
    /**
     * A collection of workgroup IDs bound to the user.
     */
    workGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a DlcUser resource.
 */
export interface DlcUserArgs {
    /**
     * User alias, the character length is less than 50.
     */
    userAlias?: pulumi.Input<string>;
    /**
     * User description information, easy to distinguish between different users.
     */
    userDescription?: pulumi.Input<string>;
    /**
     * The sub-user uin that needs to be authorized.
     */
    userId: pulumi.Input<string>;
    /**
     * User Type. `ADMIN` or `COMMONN`.
     */
    userType?: pulumi.Input<string>;
}
