// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EbEventTarget extends pulumi.CustomResource {
    /**
     * Get an existing EbEventTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EbEventTargetState, opts?: pulumi.CustomResourceOptions): EbEventTarget {
        return new EbEventTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/ebEventTarget:EbEventTarget';

    /**
     * Returns true if the given object is an instance of EbEventTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EbEventTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EbEventTarget.__pulumiType;
    }

    /**
     * event bus id.
     */
    public readonly eventBusId!: pulumi.Output<string>;
    /**
     * event rule id.
     */
    public readonly ruleId!: pulumi.Output<string>;
    /**
     * target description.
     */
    public readonly targetDescription!: pulumi.Output<outputs.EbEventTargetTargetDescription>;
    /**
     * target type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a EbEventTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EbEventTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EbEventTargetArgs | EbEventTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EbEventTargetState | undefined;
            resourceInputs["eventBusId"] = state ? state.eventBusId : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["targetDescription"] = state ? state.targetDescription : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EbEventTargetArgs | undefined;
            if ((!args || args.eventBusId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventBusId'");
            }
            if ((!args || args.ruleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleId'");
            }
            if ((!args || args.targetDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDescription'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["eventBusId"] = args ? args.eventBusId : undefined;
            resourceInputs["ruleId"] = args ? args.ruleId : undefined;
            resourceInputs["targetDescription"] = args ? args.targetDescription : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EbEventTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EbEventTarget resources.
 */
export interface EbEventTargetState {
    /**
     * event bus id.
     */
    eventBusId?: pulumi.Input<string>;
    /**
     * event rule id.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * target description.
     */
    targetDescription?: pulumi.Input<inputs.EbEventTargetTargetDescription>;
    /**
     * target type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EbEventTarget resource.
 */
export interface EbEventTargetArgs {
    /**
     * event bus id.
     */
    eventBusId: pulumi.Input<string>;
    /**
     * event rule id.
     */
    ruleId: pulumi.Input<string>;
    /**
     * target description.
     */
    targetDescription: pulumi.Input<inputs.EbEventTargetTargetDescription>;
    /**
     * target type.
     */
    type: pulumi.Input<string>;
}
