// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WedataResource extends pulumi.CustomResource {
    /**
     * Get an existing WedataResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WedataResourceState, opts?: pulumi.CustomResourceOptions): WedataResource {
        return new WedataResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/wedataResource:WedataResource';

    /**
     * Returns true if the given object is an instance of WedataResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WedataResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WedataResource.__pulumiType;
    }

    /**
     * Cos bucket name.
     */
    public readonly cosBucketName!: pulumi.Output<string>;
    /**
     * Cos bucket region.
     */
    public readonly cosRegion!: pulumi.Output<string>;
    /**
     * File name.
     */
    public readonly fileName!: pulumi.Output<string>;
    /**
     * For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
     */
    public readonly filePath!: pulumi.Output<string>;
    /**
     * File size.
     */
    public readonly filesSize!: pulumi.Output<string>;
    /**
     * Project ID.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Resource ID.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;

    /**
     * Create a WedataResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WedataResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WedataResourceArgs | WedataResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WedataResourceState | undefined;
            resourceInputs["cosBucketName"] = state ? state.cosBucketName : undefined;
            resourceInputs["cosRegion"] = state ? state.cosRegion : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["filePath"] = state ? state.filePath : undefined;
            resourceInputs["filesSize"] = state ? state.filesSize : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
        } else {
            const args = argsOrState as WedataResourceArgs | undefined;
            if ((!args || args.cosBucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosBucketName'");
            }
            if ((!args || args.cosRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosRegion'");
            }
            if ((!args || args.fileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if ((!args || args.filePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            if ((!args || args.filesSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filesSize'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["cosBucketName"] = args ? args.cosBucketName : undefined;
            resourceInputs["cosRegion"] = args ? args.cosRegion : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["filePath"] = args ? args.filePath : undefined;
            resourceInputs["filesSize"] = args ? args.filesSize : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WedataResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WedataResource resources.
 */
export interface WedataResourceState {
    /**
     * Cos bucket name.
     */
    cosBucketName?: pulumi.Input<string>;
    /**
     * Cos bucket region.
     */
    cosRegion?: pulumi.Input<string>;
    /**
     * File name.
     */
    fileName?: pulumi.Input<string>;
    /**
     * For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
     */
    filePath?: pulumi.Input<string>;
    /**
     * File size.
     */
    filesSize?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Resource ID.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WedataResource resource.
 */
export interface WedataResourceArgs {
    /**
     * Cos bucket name.
     */
    cosBucketName: pulumi.Input<string>;
    /**
     * Cos bucket region.
     */
    cosRegion: pulumi.Input<string>;
    /**
     * File name.
     */
    fileName: pulumi.Input<string>;
    /**
     * For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
     */
    filePath: pulumi.Input<string>;
    /**
     * File size.
     */
    filesSize: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId: pulumi.Input<string>;
}
