// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MpsInput extends pulumi.CustomResource {
    /**
     * Get an existing MpsInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MpsInputState, opts?: pulumi.CustomResourceOptions): MpsInput {
        return new MpsInput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/mpsInput:MpsInput';

    /**
     * Returns true if the given object is an instance of MpsInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MpsInput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MpsInput.__pulumiType;
    }

    /**
     * Flow ID.
     */
    public readonly flowId!: pulumi.Output<string>;
    /**
     * The input group for the input. Only support one group for one `tencentcloud.MpsInput`. Use `for_each` to create multiple
     * inputs Scenario.
     */
    public readonly inputGroup!: pulumi.Output<outputs.MpsInputInputGroup | undefined>;

    /**
     * Create a MpsInput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MpsInputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MpsInputArgs | MpsInputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MpsInputState | undefined;
            resourceInputs["flowId"] = state ? state.flowId : undefined;
            resourceInputs["inputGroup"] = state ? state.inputGroup : undefined;
        } else {
            const args = argsOrState as MpsInputArgs | undefined;
            if ((!args || args.flowId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowId'");
            }
            resourceInputs["flowId"] = args ? args.flowId : undefined;
            resourceInputs["inputGroup"] = args ? args.inputGroup : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MpsInput.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MpsInput resources.
 */
export interface MpsInputState {
    /**
     * Flow ID.
     */
    flowId?: pulumi.Input<string>;
    /**
     * The input group for the input. Only support one group for one `tencentcloud.MpsInput`. Use `for_each` to create multiple
     * inputs Scenario.
     */
    inputGroup?: pulumi.Input<inputs.MpsInputInputGroup>;
}

/**
 * The set of arguments for constructing a MpsInput resource.
 */
export interface MpsInputArgs {
    /**
     * Flow ID.
     */
    flowId: pulumi.Input<string>;
    /**
     * The input group for the input. Only support one group for one `tencentcloud.MpsInput`. Use `for_each` to create multiple
     * inputs Scenario.
     */
    inputGroup?: pulumi.Input<inputs.MpsInputInputGroup>;
}
