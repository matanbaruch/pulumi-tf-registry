// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnspodRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnspodRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnspodRecordState, opts?: pulumi.CustomResourceOptions): DnspodRecord {
        return new DnspodRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/dnspodRecord:DnspodRecord';

    /**
     * Returns true if the given object is an instance of DnspodRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnspodRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnspodRecord.__pulumiType;
    }

    /**
     * The Domain.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The monitoring status of the record.
     */
    public /*out*/ readonly monitorStatus!: pulumi.Output<string>;
    /**
     * MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
     */
    public readonly mx!: pulumi.Output<number | undefined>;
    /**
     * The record line.
     */
    public readonly recordLine!: pulumi.Output<string>;
    /**
     * The record type.
     */
    public readonly recordType!: pulumi.Output<string>;
    /**
     * The Remark of record.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed
     * in, resolution will not take effect and the limits of load balancing will not be verified.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * The host records, default value is `@`.
     */
    public readonly subDomain!: pulumi.Output<string | undefined>;
    /**
     * TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * The record value.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass
     * this parameter, means that the weight information is not set. Default is 0.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a DnspodRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnspodRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnspodRecordArgs | DnspodRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnspodRecordState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["monitorStatus"] = state ? state.monitorStatus : undefined;
            resourceInputs["mx"] = state ? state.mx : undefined;
            resourceInputs["recordLine"] = state ? state.recordLine : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subDomain"] = state ? state.subDomain : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as DnspodRecordArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.recordLine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordLine'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["mx"] = args ? args.mx : undefined;
            resourceInputs["recordLine"] = args ? args.recordLine : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subDomain"] = args ? args.subDomain : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["monitorStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnspodRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnspodRecord resources.
 */
export interface DnspodRecordState {
    /**
     * The Domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * The monitoring status of the record.
     */
    monitorStatus?: pulumi.Input<string>;
    /**
     * MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
     */
    mx?: pulumi.Input<number>;
    /**
     * The record line.
     */
    recordLine?: pulumi.Input<string>;
    /**
     * The record type.
     */
    recordType?: pulumi.Input<string>;
    /**
     * The Remark of record.
     */
    remark?: pulumi.Input<string>;
    /**
     * Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed
     * in, resolution will not take effect and the limits of load balancing will not be verified.
     */
    status?: pulumi.Input<string>;
    /**
     * The host records, default value is `@`.
     */
    subDomain?: pulumi.Input<string>;
    /**
     * TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record value.
     */
    value?: pulumi.Input<string>;
    /**
     * Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass
     * this parameter, means that the weight information is not set. Default is 0.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DnspodRecord resource.
 */
export interface DnspodRecordArgs {
    /**
     * The Domain.
     */
    domain: pulumi.Input<string>;
    /**
     * MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
     */
    mx?: pulumi.Input<number>;
    /**
     * The record line.
     */
    recordLine: pulumi.Input<string>;
    /**
     * The record type.
     */
    recordType: pulumi.Input<string>;
    /**
     * The Remark of record.
     */
    remark?: pulumi.Input<string>;
    /**
     * Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed
     * in, resolution will not take effect and the limits of load balancing will not be verified.
     */
    status?: pulumi.Input<string>;
    /**
     * The host records, default value is `@`.
     */
    subDomain?: pulumi.Input<string>;
    /**
     * TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record value.
     */
    value: pulumi.Input<string>;
    /**
     * Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass
     * this parameter, means that the weight information is not set. Default is 0.
     */
    weight?: pulumi.Input<number>;
}
