// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GaapRealserver extends pulumi.CustomResource {
    /**
     * Get an existing GaapRealserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaapRealserverState, opts?: pulumi.CustomResourceOptions): GaapRealserver {
        return new GaapRealserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/gaapRealserver:GaapRealserver';

    /**
     * Returns true if the given object is an instance of GaapRealserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GaapRealserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GaapRealserver.__pulumiType;
    }

    /**
     * Domain of the GAAP realserver, conflict with `ip`.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * IP of the GAAP realserver, conflict with `domain`.
     */
    public readonly ip!: pulumi.Output<string | undefined>;
    /**
     * Name of the GAAP realserver, the maximum length is 30.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the project within the GAAP realserver, '0' means is default project.
     */
    public readonly projectId!: pulumi.Output<number | undefined>;
    /**
     * Tags of the GAAP realserver.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a GaapRealserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GaapRealserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaapRealserverArgs | GaapRealserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaapRealserverState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as GaapRealserverArgs | undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GaapRealserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GaapRealserver resources.
 */
export interface GaapRealserverState {
    /**
     * Domain of the GAAP realserver, conflict with `ip`.
     */
    domain?: pulumi.Input<string>;
    /**
     * IP of the GAAP realserver, conflict with `domain`.
     */
    ip?: pulumi.Input<string>;
    /**
     * Name of the GAAP realserver, the maximum length is 30.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the project within the GAAP realserver, '0' means is default project.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Tags of the GAAP realserver.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a GaapRealserver resource.
 */
export interface GaapRealserverArgs {
    /**
     * Domain of the GAAP realserver, conflict with `ip`.
     */
    domain?: pulumi.Input<string>;
    /**
     * IP of the GAAP realserver, conflict with `domain`.
     */
    ip?: pulumi.Input<string>;
    /**
     * Name of the GAAP realserver, the maximum length is 30.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the project within the GAAP realserver, '0' means is default project.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Tags of the GAAP realserver.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
