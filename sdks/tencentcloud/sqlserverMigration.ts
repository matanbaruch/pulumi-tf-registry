// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SqlserverMigration extends pulumi.CustomResource {
    /**
     * Get an existing SqlserverMigration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlserverMigrationState, opts?: pulumi.CustomResourceOptions): SqlserverMigration {
        return new SqlserverMigration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/sqlserverMigration:SqlserverMigration';

    /**
     * Returns true if the given object is an instance of SqlserverMigration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlserverMigration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlserverMigration.__pulumiType;
    }

    /**
     * Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
     */
    public readonly migrateDbSets!: pulumi.Output<outputs.SqlserverMigrationMigrateDbSet[] | undefined>;
    /**
     * Name of the migration task.
     */
    public readonly migrateName!: pulumi.Output<string>;
    /**
     * Migration type (1 structure migration 2 data migration 3 incremental synchronization).
     */
    public readonly migrateType!: pulumi.Output<number>;
    /**
     * Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by
     * default and all databases will be restored. Valid if SourceType=5.
     */
    public readonly renameRestores!: pulumi.Output<outputs.SqlserverMigrationRenameRestore[] | undefined>;
    /**
     * Migration source.
     */
    public readonly source!: pulumi.Output<outputs.SqlserverMigrationSource>;
    /**
     * Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and
     * restore 5 SQLServer backup and restore (COS mode).
     */
    public readonly sourceType!: pulumi.Output<number>;
    /**
     * Migration target.
     */
    public readonly target!: pulumi.Output<outputs.SqlserverMigrationTarget>;

    /**
     * Create a SqlserverMigration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlserverMigrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlserverMigrationArgs | SqlserverMigrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlserverMigrationState | undefined;
            resourceInputs["migrateDbSets"] = state ? state.migrateDbSets : undefined;
            resourceInputs["migrateName"] = state ? state.migrateName : undefined;
            resourceInputs["migrateType"] = state ? state.migrateType : undefined;
            resourceInputs["renameRestores"] = state ? state.renameRestores : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as SqlserverMigrationArgs | undefined;
            if ((!args || args.migrateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'migrateName'");
            }
            if ((!args || args.migrateType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'migrateType'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["migrateDbSets"] = args ? args.migrateDbSets : undefined;
            resourceInputs["migrateName"] = args ? args.migrateName : undefined;
            resourceInputs["migrateType"] = args ? args.migrateType : undefined;
            resourceInputs["renameRestores"] = args ? args.renameRestores : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlserverMigration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlserverMigration resources.
 */
export interface SqlserverMigrationState {
    /**
     * Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
     */
    migrateDbSets?: pulumi.Input<pulumi.Input<inputs.SqlserverMigrationMigrateDbSet>[]>;
    /**
     * Name of the migration task.
     */
    migrateName?: pulumi.Input<string>;
    /**
     * Migration type (1 structure migration 2 data migration 3 incremental synchronization).
     */
    migrateType?: pulumi.Input<number>;
    /**
     * Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by
     * default and all databases will be restored. Valid if SourceType=5.
     */
    renameRestores?: pulumi.Input<pulumi.Input<inputs.SqlserverMigrationRenameRestore>[]>;
    /**
     * Migration source.
     */
    source?: pulumi.Input<inputs.SqlserverMigrationSource>;
    /**
     * Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and
     * restore 5 SQLServer backup and restore (COS mode).
     */
    sourceType?: pulumi.Input<number>;
    /**
     * Migration target.
     */
    target?: pulumi.Input<inputs.SqlserverMigrationTarget>;
}

/**
 * The set of arguments for constructing a SqlserverMigration resource.
 */
export interface SqlserverMigrationArgs {
    /**
     * Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
     */
    migrateDbSets?: pulumi.Input<pulumi.Input<inputs.SqlserverMigrationMigrateDbSet>[]>;
    /**
     * Name of the migration task.
     */
    migrateName: pulumi.Input<string>;
    /**
     * Migration type (1 structure migration 2 data migration 3 incremental synchronization).
     */
    migrateType: pulumi.Input<number>;
    /**
     * Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by
     * default and all databases will be restored. Valid if SourceType=5.
     */
    renameRestores?: pulumi.Input<pulumi.Input<inputs.SqlserverMigrationRenameRestore>[]>;
    /**
     * Migration source.
     */
    source: pulumi.Input<inputs.SqlserverMigrationSource>;
    /**
     * Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and
     * restore 5 SQLServer backup and restore (COS mode).
     */
    sourceType: pulumi.Input<number>;
    /**
     * Migration target.
     */
    target: pulumi.Input<inputs.SqlserverMigrationTarget>;
}
