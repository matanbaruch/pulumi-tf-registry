// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CamPolicyVersion extends pulumi.CustomResource {
    /**
     * Get an existing CamPolicyVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CamPolicyVersionState, opts?: pulumi.CustomResourceOptions): CamPolicyVersion {
        return new CamPolicyVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/camPolicyVersion:CamPolicyVersion';

    /**
     * Returns true if the given object is an instance of CamPolicyVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CamPolicyVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CamPolicyVersion.__pulumiType;
    }

    /**
     * Strategic text information.
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * Strategy ID.
     */
    public readonly policyId!: pulumi.Output<number>;
    /**
     * Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    public readonly policyVersions!: pulumi.Output<outputs.CamPolicyVersionPolicyVersion[] | undefined>;
    /**
     * Whether to set as a version of the current strategy.
     */
    public readonly setAsDefault!: pulumi.Output<boolean>;

    /**
     * Create a CamPolicyVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CamPolicyVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CamPolicyVersionArgs | CamPolicyVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CamPolicyVersionState | undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyVersions"] = state ? state.policyVersions : undefined;
            resourceInputs["setAsDefault"] = state ? state.setAsDefault : undefined;
        } else {
            const args = argsOrState as CamPolicyVersionArgs | undefined;
            if ((!args || args.policyDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.setAsDefault === undefined) && !opts.urn) {
                throw new Error("Missing required property 'setAsDefault'");
            }
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["policyVersions"] = args ? args.policyVersions : undefined;
            resourceInputs["setAsDefault"] = args ? args.setAsDefault : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CamPolicyVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CamPolicyVersion resources.
 */
export interface CamPolicyVersionState {
    /**
     * Strategic text information.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * Strategy ID.
     */
    policyId?: pulumi.Input<number>;
    /**
     * Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    policyVersions?: pulumi.Input<pulumi.Input<inputs.CamPolicyVersionPolicyVersion>[]>;
    /**
     * Whether to set as a version of the current strategy.
     */
    setAsDefault?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CamPolicyVersion resource.
 */
export interface CamPolicyVersionArgs {
    /**
     * Strategic text information.
     */
    policyDocument: pulumi.Input<string>;
    /**
     * Strategy ID.
     */
    policyId: pulumi.Input<number>;
    /**
     * Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    policyVersions?: pulumi.Input<pulumi.Input<inputs.CamPolicyVersionPolicyVersion>[]>;
    /**
     * Whether to set as a version of the current strategy.
     */
    setAsDefault: pulumi.Input<boolean>;
}
