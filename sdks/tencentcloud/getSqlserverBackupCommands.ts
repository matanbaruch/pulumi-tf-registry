// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSqlserverBackupCommands(args: GetSqlserverBackupCommandsArgs, opts?: pulumi.InvokeOptions): Promise<GetSqlserverBackupCommandsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getSqlserverBackupCommands:getSqlserverBackupCommands", {
        "backupFileType": args.backupFileType,
        "dataBaseName": args.dataBaseName,
        "id": args.id,
        "isRecovery": args.isRecovery,
        "localPath": args.localPath,
        "resultOutputFile": args.resultOutputFile,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSqlserverBackupCommands.
 */
export interface GetSqlserverBackupCommandsArgs {
    backupFileType: string;
    dataBaseName: string;
    id?: string;
    isRecovery: string;
    localPath?: string;
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getSqlserverBackupCommands.
 */
export interface GetSqlserverBackupCommandsResult {
    readonly backupFileType: string;
    readonly dataBaseName: string;
    readonly id: string;
    readonly isRecovery: string;
    readonly lists: outputs.GetSqlserverBackupCommandsList[];
    readonly localPath?: string;
    readonly resultOutputFile?: string;
}
export function getSqlserverBackupCommandsOutput(args: GetSqlserverBackupCommandsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSqlserverBackupCommandsResult> {
    return pulumi.output(args).apply((a: any) => getSqlserverBackupCommands(a, opts))
}

/**
 * A collection of arguments for invoking getSqlserverBackupCommands.
 */
export interface GetSqlserverBackupCommandsOutputArgs {
    backupFileType: pulumi.Input<string>;
    dataBaseName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isRecovery: pulumi.Input<string>;
    localPath?: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
}
