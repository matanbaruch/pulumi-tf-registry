// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCssXp2pDetailInfoList(args?: GetCssXp2pDetailInfoListArgs, opts?: pulumi.InvokeOptions): Promise<GetCssXp2pDetailInfoListResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getCssXp2pDetailInfoList:getCssXp2pDetailInfoList", {
        "dimensions": args.dimensions,
        "id": args.id,
        "queryTime": args.queryTime,
        "resultOutputFile": args.resultOutputFile,
        "streamNames": args.streamNames,
        "types": args.types,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCssXp2pDetailInfoList.
 */
export interface GetCssXp2pDetailInfoListArgs {
    dimensions?: string[];
    id?: string;
    queryTime?: string;
    resultOutputFile?: string;
    streamNames?: string[];
    types?: string[];
}

/**
 * A collection of values returned by getCssXp2pDetailInfoList.
 */
export interface GetCssXp2pDetailInfoListResult {
    readonly dataInfoLists: outputs.GetCssXp2pDetailInfoListDataInfoList[];
    readonly dimensions?: string[];
    readonly id: string;
    readonly queryTime?: string;
    readonly resultOutputFile?: string;
    readonly streamNames?: string[];
    readonly types?: string[];
}
export function getCssXp2pDetailInfoListOutput(args?: GetCssXp2pDetailInfoListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCssXp2pDetailInfoListResult> {
    return pulumi.output(args).apply((a: any) => getCssXp2pDetailInfoList(a, opts))
}

/**
 * A collection of arguments for invoking getCssXp2pDetailInfoList.
 */
export interface GetCssXp2pDetailInfoListOutputArgs {
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    queryTime?: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
    streamNames?: pulumi.Input<pulumi.Input<string>[]>;
    types?: pulumi.Input<pulumi.Input<string>[]>;
}
