// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AsExecuteScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AsExecuteScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AsExecuteScalingPolicyState, opts?: pulumi.CustomResourceOptions): AsExecuteScalingPolicy {
        return new AsExecuteScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/asExecuteScalingPolicy:AsExecuteScalingPolicy';

    /**
     * Returns true if the given object is an instance of AsExecuteScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AsExecuteScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AsExecuteScalingPolicy.__pulumiType;
    }

    /**
     * Auto-scaling policy ID. This parameter is not available to a target tracking policy.
     */
    public readonly autoScalingPolicyId!: pulumi.Output<string>;
    /**
     * Whether to check if the auto scaling group is in the cooldown period. Default value: false.
     */
    public readonly honorCooldown!: pulumi.Output<boolean | undefined>;
    /**
     * Source that triggers the scaling policy. Valid values: API and CLOUD_MONITOR. Default value: API. The value
     * CLOUD_MONITOR is specific to the Cloud Monitor service.
     */
    public readonly triggerSource!: pulumi.Output<string | undefined>;

    /**
     * Create a AsExecuteScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AsExecuteScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AsExecuteScalingPolicyArgs | AsExecuteScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AsExecuteScalingPolicyState | undefined;
            resourceInputs["autoScalingPolicyId"] = state ? state.autoScalingPolicyId : undefined;
            resourceInputs["honorCooldown"] = state ? state.honorCooldown : undefined;
            resourceInputs["triggerSource"] = state ? state.triggerSource : undefined;
        } else {
            const args = argsOrState as AsExecuteScalingPolicyArgs | undefined;
            if ((!args || args.autoScalingPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingPolicyId'");
            }
            resourceInputs["autoScalingPolicyId"] = args ? args.autoScalingPolicyId : undefined;
            resourceInputs["honorCooldown"] = args ? args.honorCooldown : undefined;
            resourceInputs["triggerSource"] = args ? args.triggerSource : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AsExecuteScalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AsExecuteScalingPolicy resources.
 */
export interface AsExecuteScalingPolicyState {
    /**
     * Auto-scaling policy ID. This parameter is not available to a target tracking policy.
     */
    autoScalingPolicyId?: pulumi.Input<string>;
    /**
     * Whether to check if the auto scaling group is in the cooldown period. Default value: false.
     */
    honorCooldown?: pulumi.Input<boolean>;
    /**
     * Source that triggers the scaling policy. Valid values: API and CLOUD_MONITOR. Default value: API. The value
     * CLOUD_MONITOR is specific to the Cloud Monitor service.
     */
    triggerSource?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AsExecuteScalingPolicy resource.
 */
export interface AsExecuteScalingPolicyArgs {
    /**
     * Auto-scaling policy ID. This parameter is not available to a target tracking policy.
     */
    autoScalingPolicyId: pulumi.Input<string>;
    /**
     * Whether to check if the auto scaling group is in the cooldown period. Default value: false.
     */
    honorCooldown?: pulumi.Input<boolean>;
    /**
     * Source that triggers the scaling policy. Valid values: API and CLOUD_MONITOR. Default value: API. The value
     * CLOUD_MONITOR is specific to the Cloud Monitor service.
     */
    triggerSource?: pulumi.Input<string>;
}
