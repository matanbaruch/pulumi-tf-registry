// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CamUserPolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing CamUserPolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CamUserPolicyAttachmentState, opts?: pulumi.CustomResourceOptions): CamUserPolicyAttachment {
        return new CamUserPolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/camUserPolicyAttachment:CamUserPolicyAttachment';

    /**
     * Returns true if the given object is an instance of CamUserPolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CamUserPolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CamUserPolicyAttachment.__pulumiType;
    }

    /**
     * Mode of Creation of the CAM user policy attachment. `1` means the CAM policy attachment is created by production, and
     * the others indicate syntax strategy ways.
     */
    public /*out*/ readonly createMode!: pulumi.Output<number>;
    /**
     * Create time of the CAM user policy attachment.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * ID of the policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Name of the policy.
     */
    public /*out*/ readonly policyName!: pulumi.Output<string>;
    /**
     * Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
     */
    public /*out*/ readonly policyType!: pulumi.Output<string>;
    /**
     * ID of the attached CAM user.
     *
     * @deprecated Deprecated
     */
    public readonly userId!: pulumi.Output<string | undefined>;
    /**
     * Name of the attached CAM user as uniq key.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a CamUserPolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CamUserPolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CamUserPolicyAttachmentArgs | CamUserPolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CamUserPolicyAttachmentState | undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as CamUserPolicyAttachmentArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["createMode"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
            resourceInputs["policyType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CamUserPolicyAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CamUserPolicyAttachment resources.
 */
export interface CamUserPolicyAttachmentState {
    /**
     * Mode of Creation of the CAM user policy attachment. `1` means the CAM policy attachment is created by production, and
     * the others indicate syntax strategy ways.
     */
    createMode?: pulumi.Input<number>;
    /**
     * Create time of the CAM user policy attachment.
     */
    createTime?: pulumi.Input<string>;
    /**
     * ID of the policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Name of the policy.
     */
    policyName?: pulumi.Input<string>;
    /**
     * Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
     */
    policyType?: pulumi.Input<string>;
    /**
     * ID of the attached CAM user.
     *
     * @deprecated Deprecated
     */
    userId?: pulumi.Input<string>;
    /**
     * Name of the attached CAM user as uniq key.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CamUserPolicyAttachment resource.
 */
export interface CamUserPolicyAttachmentArgs {
    /**
     * ID of the policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * ID of the attached CAM user.
     *
     * @deprecated Deprecated
     */
    userId?: pulumi.Input<string>;
    /**
     * Name of the attached CAM user as uniq key.
     */
    userName?: pulumi.Input<string>;
}
