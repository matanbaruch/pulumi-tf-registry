// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SqlserverDatabaseTde extends pulumi.CustomResource {
    /**
     * Get an existing SqlserverDatabaseTde resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SqlserverDatabaseTdeState, opts?: pulumi.CustomResourceOptions): SqlserverDatabaseTde {
        return new SqlserverDatabaseTde(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/sqlserverDatabaseTde:SqlserverDatabaseTde';

    /**
     * Returns true if the given object is an instance of SqlserverDatabaseTde.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SqlserverDatabaseTde {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlserverDatabaseTde.__pulumiType;
    }

    /**
     * Database name list.
     */
    public readonly dbNames!: pulumi.Output<string[]>;
    /**
     * `enable` - enable encryption, `disable` - disable encryption.
     */
    public readonly encryption!: pulumi.Output<string>;
    /**
     * Instance ID.
     */
    public readonly instanceId!: pulumi.Output<string>;

    /**
     * Create a SqlserverDatabaseTde resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SqlserverDatabaseTdeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SqlserverDatabaseTdeArgs | SqlserverDatabaseTdeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SqlserverDatabaseTdeState | undefined;
            resourceInputs["dbNames"] = state ? state.dbNames : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
        } else {
            const args = argsOrState as SqlserverDatabaseTdeArgs | undefined;
            if ((!args || args.dbNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNames'");
            }
            if ((!args || args.encryption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryption'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["dbNames"] = args ? args.dbNames : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlserverDatabaseTde.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SqlserverDatabaseTde resources.
 */
export interface SqlserverDatabaseTdeState {
    /**
     * Database name list.
     */
    dbNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `enable` - enable encryption, `disable` - disable encryption.
     */
    encryption?: pulumi.Input<string>;
    /**
     * Instance ID.
     */
    instanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SqlserverDatabaseTde resource.
 */
export interface SqlserverDatabaseTdeArgs {
    /**
     * Database name list.
     */
    dbNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `enable` - enable encryption, `disable` - disable encryption.
     */
    encryption: pulumi.Input<string>;
    /**
     * Instance ID.
     */
    instanceId: pulumi.Input<string>;
}
