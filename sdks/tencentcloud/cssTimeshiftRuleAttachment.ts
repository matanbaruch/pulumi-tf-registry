// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CssTimeshiftRuleAttachment extends pulumi.CustomResource {
    /**
     * Get an existing CssTimeshiftRuleAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CssTimeshiftRuleAttachmentState, opts?: pulumi.CustomResourceOptions): CssTimeshiftRuleAttachment {
        return new CssTimeshiftRuleAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/cssTimeshiftRuleAttachment:CssTimeshiftRuleAttachment';

    /**
     * Returns true if the given object is an instance of CssTimeshiftRuleAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CssTimeshiftRuleAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CssTimeshiftRuleAttachment.__pulumiType;
    }

    /**
     * The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * The push domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
     */
    public readonly streamName!: pulumi.Output<string>;
    /**
     * The template ID.
     */
    public readonly templateId!: pulumi.Output<number>;

    /**
     * Create a CssTimeshiftRuleAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CssTimeshiftRuleAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CssTimeshiftRuleAttachmentArgs | CssTimeshiftRuleAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CssTimeshiftRuleAttachmentState | undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["streamName"] = state ? state.streamName : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as CssTimeshiftRuleAttachmentArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.streamName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamName'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["streamName"] = args ? args.streamName : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CssTimeshiftRuleAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CssTimeshiftRuleAttachment resources.
 */
export interface CssTimeshiftRuleAttachmentState {
    /**
     * The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
     */
    appName?: pulumi.Input<string>;
    /**
     * The push domain.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
     */
    streamName?: pulumi.Input<string>;
    /**
     * The template ID.
     */
    templateId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CssTimeshiftRuleAttachment resource.
 */
export interface CssTimeshiftRuleAttachmentArgs {
    /**
     * The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
     */
    appName: pulumi.Input<string>;
    /**
     * The push domain.
     */
    domainName: pulumi.Input<string>;
    /**
     * The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
     */
    streamName: pulumi.Input<string>;
    /**
     * The template ID.
     */
    templateId: pulumi.Input<number>;
}
