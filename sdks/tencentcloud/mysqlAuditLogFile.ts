// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MysqlAuditLogFile extends pulumi.CustomResource {
    /**
     * Get an existing MysqlAuditLogFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlAuditLogFileState, opts?: pulumi.CustomResourceOptions): MysqlAuditLogFile {
        return new MysqlAuditLogFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/mysqlAuditLogFile:MysqlAuditLogFile';

    /**
     * Returns true if the given object is an instance of MysqlAuditLogFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlAuditLogFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlAuditLogFile.__pulumiType;
    }

    /**
     * download url.
     */
    public /*out*/ readonly downloadUrl!: pulumi.Output<string>;
    /**
     * end time.
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * size of file(KB).
     */
    public /*out*/ readonly fileSize!: pulumi.Output<number>;
    /**
     * Filter condition. Logs can be filtered according to the filter conditions set.
     */
    public readonly filter!: pulumi.Output<outputs.MysqlAuditLogFileFilter | undefined>;
    /**
     * The ID of instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
     */
    public readonly order!: pulumi.Output<string | undefined>;
    /**
     * Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
     */
    public readonly orderBy!: pulumi.Output<string | undefined>;
    /**
     * start time.
     */
    public readonly startTime!: pulumi.Output<string>;

    /**
     * Create a MysqlAuditLogFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlAuditLogFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlAuditLogFileArgs | MysqlAuditLogFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlAuditLogFileState | undefined;
            resourceInputs["downloadUrl"] = state ? state.downloadUrl : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["fileSize"] = state ? state.fileSize : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["orderBy"] = state ? state.orderBy : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
        } else {
            const args = argsOrState as MysqlAuditLogFileArgs | undefined;
            if ((!args || args.endTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endTime'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.startTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startTime'");
            }
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["orderBy"] = args ? args.orderBy : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["downloadUrl"] = undefined /*out*/;
            resourceInputs["fileSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MysqlAuditLogFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MysqlAuditLogFile resources.
 */
export interface MysqlAuditLogFileState {
    /**
     * download url.
     */
    downloadUrl?: pulumi.Input<string>;
    /**
     * end time.
     */
    endTime?: pulumi.Input<string>;
    /**
     * size of file(KB).
     */
    fileSize?: pulumi.Input<number>;
    /**
     * Filter condition. Logs can be filtered according to the filter conditions set.
     */
    filter?: pulumi.Input<inputs.MysqlAuditLogFileFilter>;
    /**
     * The ID of instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
     */
    order?: pulumi.Input<string>;
    /**
     * Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
     */
    orderBy?: pulumi.Input<string>;
    /**
     * start time.
     */
    startTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MysqlAuditLogFile resource.
 */
export interface MysqlAuditLogFileArgs {
    /**
     * end time.
     */
    endTime: pulumi.Input<string>;
    /**
     * Filter condition. Logs can be filtered according to the filter conditions set.
     */
    filter?: pulumi.Input<inputs.MysqlAuditLogFileFilter>;
    /**
     * The ID of instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
     */
    order?: pulumi.Input<string>;
    /**
     * Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
     */
    orderBy?: pulumi.Input<string>;
    /**
     * start time.
     */
    startTime: pulumi.Input<string>;
}
