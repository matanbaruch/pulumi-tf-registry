// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlbServerAttachmentBackend {
    /**
     * A list backend instance ID (CVM instance ID).
     */
    instanceId: string;
    /**
     * The port used by the backend server. Valid value range: [1-65535].
     */
    port: number;
    /**
     * Weight of the backend server. Valid value range: [0-100]. Default to 10.
     */
    weight: number;
}

export interface AntiddosCcBlackWhiteIpBlackWhiteIp {
    /**
     * ip address.
     */
    ip: string;
    /**
     * ip mask.
     */
    mask: number;
}

export interface AntiddosCcPrecisionPolicyPolicyList {
    /**
     * Configuration fields can take values of cgi, ua, cookie, referer, accept, srcip.
     */
    fieldName: string;
    /**
     * field type.
     */
    fieldType: string;
    /**
     * value.
     */
    value: string;
    /**
     * Configuration item value comparison method, can take values of equal, not_ Equal, include.
     */
    valueOperator: string;
}

export interface AntiddosDdosGeoIpBlockConfigDdosGeoIpBlockConfig {
    /**
     * Blocking action, value [drop (intercept) trans (release)].
     */
    action: string;
    /**
     * When RegionType is customized, an AreaList must be filled in, with a maximum of 128 entries;.
     */
    areaLists?: number[];
    /**
     * Region type, value [oversea (overseas) China (domestic) customized (custom region)].
     */
    regionType: string;
}

export interface AntiddosDdosSpeedLimitConfigDdosSpeedLimitConfig {
    /**
     * List of port ranges, up to 8, multiple; Separate and indicate the range with -; This port range must be filled in; Fill in style 1:0-65535, style 2: 80; 443; 1000-2000.
     */
    dstPortList?: string;
    /**
     * This field has been deprecated. Please fill in the new field DstPortList.
     */
    dstPortScopes?: outputs.AntiddosDdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope[];
    /**
     * Speed limit mode, value [1 (based on source IP speed limit) 2 (based on destination port speed limit)].
     */
    mode: number;
    /**
     * IP protocol numbers, values [ALL (all protocols) TCP (tcp protocol) UDP (udp protocol) SMP (smp protocol) 1; 2-100 (custom protocol number range, up to 8)] Note: When customizing the protocol number range, only the protocol number can be filled in, multiple ranges; Separation; When filling in ALL, no other agreements or agreements can be filled inNumber.
     */
    protocolList?: string;
    /**
     * Speed limit values, each type of speed limit value can support up to 1; This field array has at least one speed limit value.
     */
    speedValues: outputs.AntiddosDdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue[];
}

export interface AntiddosDdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope {
    /**
     * Starting port, ranging from 1 to 65535.
     */
    beginPort: number;
    /**
     * end  port, ranging from 1 to 65535.
     */
    endPort: number;
}

export interface AntiddosDdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue {
    /**
     * Speed limit value type, value [1 (packet rate pps) 2 (bandwidth bps)].
     */
    type: number;
    /**
     * value.
     */
    value: number;
}

export interface AntiddosDefaultAlarmThresholdDefaultAlarmConfig {
    /**
     * Alarm threshold, in Mbps, with a value of&gt;=0; When used as an input parameter, setting 0 will delete the alarm threshold configuration;.
     */
    alarmThreshold?: number;
    /**
     * Alarm threshold type, value [1 (incoming traffic alarm threshold) 2 (attack cleaning traffic alarm threshold)].
     */
    alarmType?: number;
}

export interface AntiddosPacketFilterConfigPacketFilterConfig {
    /**
     * Action, value [drop (discard) transmit (release) drop_black (discard and pull black) drop_rst (intercept) drop_black_rst (intercept and pull black) forward (continue protection)].
     */
    action: string;
    /**
     * The detection depth starting from the detection position, with a value of [0-1500].
     */
    depth?: number;
    /**
     * The second detection depth starting from the second detection position, with a value of [01500].
     */
    depth2?: number;
    /**
     * end destination port, ranging from 0 to 65535.
     */
    dportEnd: number;
    /**
     * Starting destination port, ranging from 0 to 65535.
     */
    dportStart: number;
    /**
     * Whether to include detection values, with a value of [0 (inclusive) and 1 (exclusive)].
     */
    isNot?: number;
    /**
     * Whether the second detection includes detection values, with a value of [0 (inclusive) and 1 (exclusive)].
     */
    isNot2?: number;
    /**
     * Detection position, value [begin_l3 (IP header) begin_l4 (TCP/UDP header) begin_l5 (T payload) no_match (mismatch)].
     */
    matchBegin?: string;
    /**
     * Second detection position, value [begin_l5 (load) no_match (mismatch)].
     */
    matchBegin2: string;
    /**
     * When there is a second detection condition, the AND or relationship with the first detection condition, with the value [and (and relationship) none (fill in this value when there is no second detection condition)].
     */
    matchLogic: string;
    /**
     * Detection type, value [Sunday (keyword) pcre (regular expression)].
     */
    matchType?: string;
    /**
     * The second detection type, with a value of [Sunday (keyword) pcre (regular expression)].
     */
    matchType2?: string;
    /**
     * The offset from the detection position, with a value range of [0, Depth].
     */
    offset?: number;
    /**
     * The offset from the second detection position, with a value range of [0, Depth2].
     */
    offset2?: number;
    /**
     * Greater than message length, value 1+.
     */
    pktLenGt?: number;
    /**
     * The maximum message length, ranging from 1 to 1500, must be greater than or equal to the minimum message length.
     */
    pktlenMax: number;
    /**
     * Minimum message length, ranging from 1 to 1500.
     */
    pktlenMin: number;
    /**
     * Protocol, value [TCP udp icmp all].
     */
    protocol: string;
    /**
     * End source port, values range from 1 to 65535, must be greater than or equal to the start source port.
     */
    sportEnd: number;
    /**
     * Starting source port, ranging from 0 to 65535.
     */
    sportStart: number;
    /**
     * Detection value, key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&gt;section code of the string &#39;123&#39;; when the detection type is pcre, please fill in the regular expression character string;].
     */
    str?: string;
    /**
     * key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&gt;section code of the string &#39;123&#39;; when the detection type is pcre, please fill in the regular expression character string;].
     */
    str2?: string;
}

export interface AntiddosPortAclConfigAclConfig {
    /**
     * Action, can take values: drop, transmit, forward.
     */
    action: string;
    /**
     * end from port, with a range of 0~65535 values.
     */
    dPortEnd: number;
    /**
     * Starting from port, with a range of 0~65535 values.
     */
    dPortStart: number;
    /**
     * Protocol type, can take TCP, udp, all values.
     */
    forwardProtocol: string;
    /**
     * The policy priority, the smaller the number, the higher the level, and the higher the matching of the rule, with values ranging from 1 to 1000. Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    priority?: number;
    /**
     * end from the source port, with a value range of 0~65535.
     */
    sPortEnd: number;
    /**
     * Starting from the source port, with a value range of 0~65535.
     */
    sPortStart: number;
}

export interface ApiGatewayApiConstantParameter {
    /**
     * Default value for constant parameters. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    defaultValue?: string;
    /**
     * Constant parameter description. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    desc?: string;
    /**
     * Constant parameter name. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    name?: string;
    /**
     * Constant parameter position. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    position?: string;
}

export interface ApiGatewayApiMicroService {
    /**
     * Micro service cluster.
     */
    clusterId: string;
    /**
     * Microservice name.
     */
    microServiceName: string;
    /**
     * Microservice namespace.
     */
    namespaceId: string;
}

export interface ApiGatewayApiOauthConfig {
    /**
     * Redirect address, used to guide users in login operations.
     */
    loginRedirectUrl?: string;
    /**
     * Public key, used to verify user tokens.
     */
    publicKey: string;
    /**
     * Token passes the position.
     */
    tokenLocation: string;
}

export interface ApiGatewayApiRequestParameter {
    /**
     * Parameter default value.
     */
    defaultValue?: string;
    /**
     * Parameter description.
     */
    desc?: string;
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter location.
     */
    position: string;
    /**
     * If this parameter required. Default value: `false`.
     */
    required?: boolean;
    /**
     * Parameter type.
     */
    type: string;
}

export interface ApiGatewayApiResponseErrorCode {
    /**
     * Custom response configuration error code.
     */
    code: number;
    /**
     * Custom error code conversion.
     */
    convertedCode?: number;
    /**
     * Parameter description.
     */
    desc?: string;
    /**
     * Custom response configuration error message.
     */
    msg: string;
    /**
     * Whether to enable error code conversion. Default value: `false`.
     */
    needConvert?: boolean;
}

export interface ApiGatewayApiServiceConfigCosConfig {
    /**
     * The API calls the backend COS method, and the optional values for the front-end request method and Action are:GET: GetObjectPUT: PutObjectPOST: PostObject, AppendObjectHEAD: HeadObjectDELETE: DeleteObject.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    action: string;
    /**
     * The API calls the signature switch of the backend COS, which defaults to false.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    authorization?: boolean;
    /**
     * The bucket name of the API backend COS.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    bucketName: string;
    /**
     * Path matching mode for API backend COS, optional values:BackEndPath: Backend path matchingFullPath: Full Path MatchingThe default value is: BackEndPathNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    pathMatchMode?: string;
}

export interface ApiGatewayApiServiceParameter {
    /**
     * The default value for the backend service parameters of the API. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    defaultValue?: string;
    /**
     * The backend service parameter name of the API. This parameter is only used when ServiceType is HTTP. The front and rear parameter names can be different.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    name?: string;
    /**
     * The backend service parameter location of the API, such as head. This parameter is only used when ServiceType is HTTP. The parameter positions at the front and rear ends can be configured differently.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    position?: string;
    /**
     * Remarks on the backend service parameters of the API. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    relevantRequestParameterDesc?: string;
    /**
     * The name of the front-end parameter corresponding to the backend service parameter of the API. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    relevantRequestParameterName?: string;
    /**
     * The location of the front-end parameters corresponding to the backend service parameters of the API, such as head. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    relevantRequestParameterPosition?: string;
    /**
     * The backend service parameter type of the API. This parameter is only used when ServiceType is HTTP.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    relevantRequestParameterType?: string;
}

export interface ApiGatewayApiServiceTsfHealthCheckConf {
    /**
     * Threshold percentage.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    errorThresholdPercentage?: number;
    /**
     * Whether to initiate a health check.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    isHealthCheck?: boolean;
    /**
     * Health check threshold.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    requestVolumeThreshold?: number;
    /**
     * Window size.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    sleepWindowInMilliseconds?: number;
}

export interface ApiGatewayApiServiceTsfLoadBalanceConf {
    /**
     * Is load balancing enabled.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    isLoadBalance?: boolean;
    /**
     * Load balancing method.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    method?: string;
    /**
     * Whether to enable session persistence.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    sessionStickRequired?: boolean;
    /**
     * Session hold timeout.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    sessionStickTimeout?: number;
}

export interface ApiGatewayApiTargetService {
    /**
     * docker ip.
     */
    dockerIp?: string;
    /**
     * Host IP of the CVM.
     */
    hostIp: string;
    /**
     * vm ip.
     */
    vmIp: string;
    /**
     * vm port.
     */
    vmPort: number;
    /**
     * vpc id.
     */
    vpcId: string;
}

export interface ApiGatewayApiTargetServicesHealthCheckConf {
    /**
     * Threshold percentage.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    errorThresholdPercentage?: number;
    /**
     * Whether to initiate a health check.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    isHealthCheck?: boolean;
    /**
     * Health check threshold.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    requestVolumeThreshold?: number;
    /**
     * Window size.Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    sleepWindowInMilliseconds?: number;
}

export interface ApiGatewayImportOpenApiConstantParameter {
    defaultValue: string;
    desc: string;
    name: string;
    position: string;
}

export interface ApiGatewayImportOpenApiMicroService {
    clusterId: string;
    microServiceName: string;
    namespaceId: string;
}

export interface ApiGatewayImportOpenApiOauthConfig {
    loginRedirectUrl: string;
    publicKey: string;
    tokenLocation: string;
}

export interface ApiGatewayImportOpenApiRequestParameter {
    defaultValue: string;
    desc: string;
    name: string;
    position: string;
    required: boolean;
    type: string;
}

export interface ApiGatewayImportOpenApiResponseErrorCode {
    code: number;
    convertedCode: number;
    desc: string;
    msg: string;
    needConvert: boolean;
}

export interface ApiGatewayImportOpenApiServiceConfigCosConfig {
    action: string;
    authorization: boolean;
    bucketName: string;
    pathMatchMode: string;
}

export interface ApiGatewayImportOpenApiServiceParameter {
    defaultValue: string;
    name: string;
    position: string;
    relevantRequestParameterDesc: string;
    relevantRequestParameterName: string;
    relevantRequestParameterPosition: string;
    relevantRequestParameterType: string;
}

export interface ApiGatewayImportOpenApiServiceTsfHealthCheckConf {
    errorThresholdPercentage: number;
    isHealthCheck: boolean;
    requestVolumeThreshold: number;
    sleepWindowInMilliseconds: number;
}

export interface ApiGatewayImportOpenApiServiceTsfLoadBalanceConf {
    isLoadBalance: boolean;
    method: string;
    sessionStickRequired: boolean;
    sessionStickTimeout: number;
}

export interface ApiGatewayServiceApiList {
    apiDesc: string;
    apiId: string;
    apiName: string;
    method: string;
    path: string;
}

export interface ApiGatewayServiceUsagePlanList {
    apiId: string;
    bindType: string;
    usagePlanId: string;
    usagePlanName: string;
}

export interface ApiGatewayUpstreamHealthChecker {
    /**
     * Detect the requested path during active health checks. The default is&#39;/&#39;.
     */
    activeCheckHttpPath?: string;
    /**
     * The time interval for active health checks is 5 seconds by default.
     */
    activeCheckInterval?: number;
    /**
     * The detection request for active health check timed out in seconds. The default is 5 seconds.
     */
    activeCheckTimeout?: number;
    /**
     * Identify whether active health checks are enabled.
     */
    enableActiveCheck: boolean;
    /**
     * Identify whether passive health checks are enabled.
     */
    enablePassiveCheck: boolean;
    /**
     * The HTTP status code that determines a successful request during a health check.
     */
    healthyHttpStatus: string;
    /**
     * HTTP continuous error threshold. 0 means HTTP checking is disabled. Value range: [0, 254].
     */
    httpFailureThreshold: number;
    /**
     * TCP continuous error threshold. 0 indicates disabling TCP checking. Value range: [0, 254].
     */
    tcpFailureThreshold: number;
    /**
     * Continuous timeout threshold. 0 indicates disabling timeout checking. Value range: [0, 254].
     */
    timeoutThreshold: number;
    /**
     * The HTTP status code that determines a failed request during a health check.
     */
    unhealthyHttpStatus: string;
    /**
     * The automatic recovery time of abnormal node status, in seconds. When only passive checking is enabled, it must be set to a value&gt;0, otherwise the passive exception node will not be able to recover. The default is 30 seconds.
     */
    unhealthyTimeout?: number;
}

export interface ApiGatewayUpstreamK8sService {
    /**
     * K8s cluster ID.
     */
    clusterId: string;
    /**
     * Additional Selected Pod Label.
     */
    extraLabels: outputs.ApiGatewayUpstreamK8sServiceExtraLabel[];
    /**
     * Customized service name, optional.
     */
    name?: string;
    /**
     * Container namespace.
     */
    namespace: string;
    /**
     * Port of service.
     */
    port: number;
    /**
     * The name of the container service.
     */
    serviceName: string;
    /**
     * weight.
     */
    weight: number;
}

export interface ApiGatewayUpstreamK8sServiceExtraLabel {
    /**
     * Key of Label.
     */
    key: string;
    /**
     * Value of Label.
     */
    value: string;
}

export interface ApiGatewayUpstreamNode {
    /**
     * The ID of the TKE clusterNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    clusterId?: string;
    /**
     * IP or domain name.
     */
    host: string;
    /**
     * K8S namespaceNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    nameSpace?: string;
    /**
     * Port [0, 65535].
     */
    port: number;
    /**
     * K8S container service nameNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    serviceName?: string;
    /**
     * Source of Node, value range: K8SNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    source?: string;
    /**
     * Dye labelNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    tags?: string[];
    /**
     * Unique service name recorded internally by API gatewayNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    uniqueServiceName?: string;
    /**
     * CVM instance IDNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    vmInstanceId?: string;
    /**
     * Weight [0, 100], 0 is disabled.
     */
    weight: number;
}

export interface ApiGatewayUsagePlanAttachList {
    apiId: string;
    apiName: string;
    createTime: string;
    environment: string;
    method: string;
    modifyTime: string;
    path: string;
    serviceId: string;
    serviceName: string;
}

export interface AsLifecycleHookLifecycleCommand {
    /**
     * Remote command ID. It is required to execute a command.
     */
    commandId: string;
    /**
     * Custom parameter. The field type is JSON encoded string. For example, {"varA": "222"}.
     */
    parameters?: string;
}

export interface AsLoadBalancerForwardLoadBalancer {
    /**
     * Application load balancer listener ID.
     */
    listenerId: string;
    /**
     * Application load balancer instance ID.
     */
    loadBalancerId: string;
    /**
     * Application load balancer location ID.
     */
    locationId?: string;
    /**
     * Load balancer instance region. Default value is the region of current auto scaling group. The format is the same as the public parameter Region, for example: ap-guangzhou.
     */
    region?: string;
    /**
     * List of TargetAttribute.
     */
    targetAttributes: outputs.AsLoadBalancerForwardLoadBalancerTargetAttribute[];
}

export interface AsLoadBalancerForwardLoadBalancerTargetAttribute {
    /**
     * Target port.
     */
    port: number;
    /**
     * Target weight.
     */
    weight: number;
}

export interface AsScalingConfigDataDisk {
    /**
     * Indicates whether the disk remove after instance terminated. Default is `false`.
     */
    deleteWithInstance?: boolean;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. valid when disk_type_policy is ORIGINAL.
     */
    diskType?: string;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
}

export interface AsScalingConfigHostNameSettings {
    /**
     * The host name of the cloud server; dots (.) and dashes (-) cannot be used as the first and last characters of HostName, and cannot be used consecutively; Windows instances are not supported; other types (Linux, etc.) instances: the character length is [2, 40], it is allowed to support multiple dots, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (no uppercase and lowercase restrictions), numbers and dashes (-). Pure numbers are not allowed.
     */
    hostName: string;
    /**
     * The style of the host name of the cloud server, the value range includes `ORIGINAL` and `UNIQUE`, the default is `ORIGINAL`; `ORIGINAL`, the AS directly passes the HostName filled in the input parameter to the CVM, and the CVM may append a sequence to the HostName number, the HostName of the instance in the scaling group will conflict; `UNIQUE`, the HostName filled in as a parameter is equivalent to the host name prefix, AS and CVM will expand it, and the HostName of the instance in the scaling group can be guaranteed to be unique.
     */
    hostNameStyle?: string;
}

export interface AsScalingConfigInstanceNameSettings {
    /**
     * CVM instance name.
     */
    instanceName: string;
    /**
     * Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default is `ORIGINAL`.
     */
    instanceNameStyle?: string;
}

export interface AsScalingGroupForwardBalancerId {
    /**
     * Listener ID for application load balancers.
     */
    listenerId: string;
    /**
     * ID of available load balancers.
     */
    loadBalancerId: string;
    /**
     * ID of forwarding rules.
     */
    ruleId?: string;
    /**
     * Attribute list of target rules.
     */
    targetAttributes: outputs.AsScalingGroupForwardBalancerIdTargetAttribute[];
}

export interface AsScalingGroupForwardBalancerIdTargetAttribute {
    /**
     * Port number.
     */
    port: number;
    /**
     * Weight.
     */
    weight: number;
}

export interface AuditTrackStorage {
    /**
     * Track Storage name:- when StorageType is `cls`, StorageName is cls topicId- when StorageType is `cos`, StorageName is cos bucket name that does not contain `-APPID`.
     */
    storageName: string;
    /**
     * Storage path prefix.
     */
    storagePrefix: string;
    /**
     * Storage region.
     */
    storageRegion: string;
    /**
     * Track Storage type, optional:- `cos`- `cls`.
     */
    storageType: string;
}

export interface BiDatasourceCloudServiceType {
    /**
     * Instance Id.
     */
    instanceId: string;
    /**
     * Region.
     */
    region: string;
    /**
     * Service type, Cloud.
     */
    type: string;
}

export interface CamMfaFlagActionFlag {
    /**
     * Phone.
     */
    phone?: number;
    /**
     * Soft token.
     */
    stoken?: number;
    /**
     * Wechat.
     */
    wechat?: number;
}

export interface CamMfaFlagLoginFlag {
    /**
     * Phone.
     */
    phone?: number;
    /**
     * Soft token.
     */
    stoken?: number;
    /**
     * Wechat.
     */
    wechat?: number;
}

export interface CamPolicyVersionPolicyVersion {
    /**
     * Strategic version creation timeNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    createDate: string;
    /**
     * Strategic grammar textNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    document: string;
    /**
     * Whether it is an effective version.0 means not, 1 means yesNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    isDefaultVersion: number;
    /**
     * Strategic version numberNote: This field may return NULL, indicating that the valid value cannot be obtained.
     */
    versionId: number;
}

export interface CamTagRoleAttachmentTag {
    /**
     * Label.
     */
    key: string;
    /**
     * Label.
     */
    value: string;
}

export interface CatTaskSetBatchTasks {
    /**
     * Task name.
     */
    name: string;
    /**
     * Target address.
     */
    targetAddress: string;
}

export interface CcnInstancesAcceptAttachInstance {
    /**
     * Description.
     */
    description?: string;
    /**
     * Attachment Instance ID.
     */
    instanceId: string;
    /**
     * Instance Region.
     */
    instanceRegion: string;
    /**
     * InstanceType: `VPC`, `DIRECTCONNECT`, `BMVPC`, `VPNGW`.
     */
    instanceType?: string;
    /**
     * ID of the routing table associated with the instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    routeTableId?: string;
}

export interface CcnInstancesRejectAttachInstance {
    /**
     * Description.
     */
    description?: string;
    /**
     * Attachment Instance ID.
     */
    instanceId: string;
    /**
     * Instance Region.
     */
    instanceRegion: string;
    /**
     * InstanceType: `VPC`, `DIRECTCONNECT`, `BMVPC`, `VPNGW`.
     */
    instanceType?: string;
    /**
     * ID of the routing table associated with the instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    routeTableId?: string;
}

export interface CcnInstancesResetAttachInstance {
    /**
     * Description.
     */
    description?: string;
    /**
     * Attachment Instance ID.
     */
    instanceId: string;
    /**
     * Instance Region.
     */
    instanceRegion: string;
    /**
     * InstanceType: `VPC`, `DIRECTCONNECT`, `BMVPC`, `VPNGW`.
     */
    instanceType?: string;
    /**
     * ID of the routing table associated with the instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    routeTableId?: string;
}

export interface CcnRouteTableAssociateInstanceConfigInstance {
    /**
     * Instances ID.
     */
    instanceId: string;
    /**
     * Cloud networking supports instance types: VPC, DIRECTCONNECT, BMVPC, EDGE, EDGE_TUNNEL, EDGE_VPNGW, VPNGW.
     */
    instanceType: string;
}

export interface CcnRouteTableBroadcastPoliciesPolicy {
    /**
     * Routing behavior, `accept` allows, `drop` rejects.
     */
    action: string;
    /**
     * propagation conditions.
     */
    broadcastConditions: outputs.CcnRouteTableBroadcastPoliciesPolicyBroadcastCondition[];
    /**
     * Policy description.
     */
    description: string;
    /**
     * Routing conditions.
     */
    routeConditions: outputs.CcnRouteTableBroadcastPoliciesPolicyRouteCondition[];
}

export interface CcnRouteTableBroadcastPoliciesPolicyBroadcastCondition {
    /**
     * Matching mode, `1` precise matching, `0` fuzzy matching.
     */
    matchPattern: number;
    /**
     * condition type.
     */
    name: string;
    /**
     * List of conditional values.
     */
    values: string[];
}

export interface CcnRouteTableBroadcastPoliciesPolicyRouteCondition {
    /**
     * Matching mode, `1` precise matching, `0` fuzzy matching.
     */
    matchPattern: number;
    /**
     * condition type.
     */
    name: string;
    /**
     * List of conditional values.
     */
    values: string[];
}

export interface CcnRouteTableInputPoliciesPolicy {
    /**
     * Routing behavior, `accept` allows, `drop` rejects.
     */
    action: string;
    /**
     * Policy description.
     */
    description: string;
    /**
     * Routing conditions.
     */
    routeConditions: outputs.CcnRouteTableInputPoliciesPolicyRouteCondition[];
}

export interface CcnRouteTableInputPoliciesPolicyRouteCondition {
    /**
     * Matching mode, `1` precise matching, `0` fuzzy matching.
     */
    matchPattern: number;
    /**
     * condition type.
     */
    name: string;
    /**
     * List of conditional values.
     */
    values: string[];
}

export interface CcnRouteTableSelectionPoliciesSelectionPolicy {
    /**
     * description.
     */
    description: string;
    /**
     * Instance ID.
     */
    instanceId: string;
    /**
     * Instance Type: Private Network: VPC, Dedicated Gateway: DIRECTCONNECT, Blackstone Private Network: BMVPC, EDGE Device: EDGE, EDGE Tunnel: EDGE_TUNNEL, EDGE Gateway: EDGE_VPNGW, VPN Gateway: VPNGW.
     */
    instanceType: string;
    /**
     * route table ID.
     */
    routeTableId: string;
    /**
     * Source CIDR.
     */
    sourceCidrBlock: string;
}

export interface CdhInstanceHostResource {
    cpuAvailableNum: number;
    cpuTotalNum: number;
    diskAvailableSize: number;
    diskTotalSize: number;
    diskType: string;
    memoryAvailableSize: number;
    memoryTotalSize: number;
}

export interface CdnDomainAuthentication {
    /**
     * Authentication switching, available values: `on`, `off`.
     */
    switch?: string;
    /**
     * Timestamp hotlink protection mode A configuration.
     */
    typeA?: outputs.CdnDomainAuthenticationTypeA;
    /**
     * Timestamp hotlink protection mode B configuration. NOTE: according to upgrading of TencentCloud Platform, TypeB is unavailable for now.
     */
    typeB?: outputs.CdnDomainAuthenticationTypeB;
    /**
     * Timestamp hotlink protection mode C configuration.
     */
    typeC?: outputs.CdnDomainAuthenticationTypeC;
    /**
     * Timestamp hotlink protection mode D configuration.
     */
    typeD?: outputs.CdnDomainAuthenticationTypeD;
}

export interface CdnDomainAuthenticationTypeA {
    /**
     * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
     */
    backupSecretKey?: string;
    /**
     * Signature expiration time in second. The maximum value is 630720000.
     */
    expireTime: number;
    /**
     * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
     */
    fileExtensions: string[];
    /**
     * Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
     */
    filterType: string;
    /**
     * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
     */
    secretKey: string;
    /**
     * Signature parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
     */
    signParam: string;
}

export interface CdnDomainAuthenticationTypeB {
    /**
     * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
     */
    backupSecretKey?: string;
    /**
     * Signature expiration time in second. The maximum value is 630720000.
     */
    expireTime: number;
    /**
     * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
     */
    fileExtensions: string[];
    /**
     * Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
     */
    filterType: string;
    /**
     * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
     */
    secretKey: string;
}

export interface CdnDomainAuthenticationTypeC {
    /**
     * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
     */
    backupSecretKey?: string;
    /**
     * Signature expiration time in second. The maximum value is 630720000.
     */
    expireTime: number;
    /**
     * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
     */
    fileExtensions: string[];
    /**
     * Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
     */
    filterType: string;
    /**
     * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
     */
    secretKey: string;
    /**
     * Timestamp formation, available values: `dec`, `hex`.
     */
    timeFormat?: string;
}

export interface CdnDomainAuthenticationTypeD {
    /**
     * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
     */
    backupSecretKey?: string;
    /**
     * Signature expiration time in second. The maximum value is 630720000.
     */
    expireTime: number;
    /**
     * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
     */
    fileExtensions: string[];
    /**
     * Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
     */
    filterType: string;
    /**
     * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
     */
    secretKey: string;
    /**
     * Timestamp formation, available values: `dec`, `hex`.
     */
    timeFormat?: string;
    /**
     * Timestamp parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
     */
    timeParam?: string;
}

export interface CdnDomainAwsPrivateAccess {
    /**
     * Access ID.
     */
    accessKey?: string;
    /**
     * Bucket.
     */
    bucket?: string;
    /**
     * Region.
     */
    region?: string;
    /**
     * Key.
     */
    secretKey?: string;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainBandWidthAlert {
    /**
     * Alert percentage.
     */
    alertPercentage?: number;
    /**
     * Switch alert.
     */
    alertSwitch?: string;
    /**
     * threshold of bps.
     */
    bpsThreshold?: number;
    /**
     * Counter measure.
     */
    counterMeasure?: string;
    /**
     * Last trigger time.
     */
    lastTriggerTime: string;
    /**
     * Last trigger time of overseas.
     */
    lastTriggerTimeOverseas: string;
    /**
     * Metric.
     */
    metric?: string;
    /**
     * Specify statistic item configuration.
     */
    statisticItem?: outputs.CdnDomainBandWidthAlertStatisticItem;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainBandWidthAlertStatisticItem {
    /**
     * Alert percentage.
     */
    alertPercentage?: number;
    /**
     * Switch alert.
     */
    alertSwitch?: string;
    /**
     * threshold of bps.
     */
    bpsThreshold?: number;
    /**
     * Counter measure, values: `RETURN_404`, `RESOLVE_DNS_TO_ORIGIN`.
     */
    counterMeasure?: string;
    /**
     * Cycle of checking in minutes, values `60`, `1440`.
     */
    cycle?: number;
    /**
     * Metric.
     */
    metric?: string;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
    /**
     * Type of statistic item.
     */
    type?: string;
    /**
     * Time of auto unblock.
     */
    unblockTime?: number;
}

export interface CdnDomainCacheKey {
    /**
     * Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
     */
    fullUrlCache?: string;
    /**
     * Specifies whether the cache key is case sensitive.
     */
    ignoreCase?: string;
    /**
     * Path-specific cache key configuration.
     */
    keyRules?: outputs.CdnDomainCacheKeyKeyRule[];
    /**
     * Request parameter contained in CacheKey.
     */
    queryString?: outputs.CdnDomainCacheKeyQueryString;
}

export interface CdnDomainCacheKeyKeyRule {
    /**
     * Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
     */
    fullUrlCache?: string;
    /**
     * Whether caches are case insensitive.
     */
    ignoreCase?: string;
    /**
     * Request parameter contained in CacheKey.
     */
    queryString: outputs.CdnDomainCacheKeyKeyRuleQueryString;
    /**
     * List of rule paths for each `key_rules`: `/` for `index`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
     */
    rulePaths: string[];
    /**
     * Specify rule tag, default value is `user`.
     */
    ruleTag?: string;
    /**
     * Rule type, available: `file`, `directory`, `path`, `index`.
     */
    ruleType: string;
}

export interface CdnDomainCacheKeyKeyRuleQueryString {
    /**
     * Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
     */
    action?: string;
    /**
     * Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
     */
    switch?: string;
    /**
     * Array of included/excluded query strings (separated by `;`).
     */
    value?: string;
}

export interface CdnDomainCacheKeyQueryString {
    /**
     * Include/exclude query parameters. Values: `includeAll` (Default), `excludeAll`, `includeCustom`, `excludeCustom`.
     */
    action: string;
    /**
     * Whether to sort again, values `on`, `off` (Default).
     */
    reorder?: string;
    /**
     * Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
     */
    switch?: string;
    /**
     * Array of included/excluded query strings (separated by `;`).
     */
    value?: string;
}

export interface CdnDomainCompression {
    /**
     * List of compression rules.
     */
    compressionRules?: outputs.CdnDomainCompressionCompressionRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainCompressionCompressionRule {
    /**
     * List of algorithms, available: `gzip` and `brotli`.
     */
    algorithms: string[];
    /**
     * Must be set as true, enables compression.
     */
    compress: boolean;
    /**
     * List of file extensions like `jpg`, `txt`.
     */
    fileExtensions?: string[];
    /**
     * The maximum file size to trigger compression (in bytes).
     */
    maxLength: number;
    /**
     * The minimum file size to trigger compression (in bytes).
     */
    minLength: number;
    /**
     * List of rule paths for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
     */
    rulePaths?: string[];
    /**
     * Rule type, available: `all`, `file`, `directory`, `path`, `contentType`.
     */
    ruleType?: string;
}

export interface CdnDomainDownstreamCapping {
    /**
     * List of capping rule.
     */
    cappingRules?: outputs.CdnDomainDownstreamCappingCappingRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainDownstreamCappingCappingRule {
    /**
     * Capping rule kbps threshold.
     */
    kbpsThreshold: number;
    /**
     * List of capping rule path.
     */
    rulePaths: string[];
    /**
     * Capping rule type.
     */
    ruleType: string;
}

export interface CdnDomainErrorPage {
    /**
     * List of error page rule.
     */
    pageRules?: outputs.CdnDomainErrorPagePageRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainErrorPagePageRule {
    /**
     * Redirect code of error page rules.
     */
    redirectCode: number;
    /**
     * Redirect url of error page rules.
     */
    redirectUrl: string;
    /**
     * Status code of error page rules.
     */
    statusCode: number;
}

export interface CdnDomainHttpsConfig {
    /**
     * Client certificate configuration information.
     */
    clientCertificateConfig?: outputs.CdnDomainHttpsConfigClientCertificateConfig;
    /**
     * Configuration of forced HTTP or HTTPS redirects.
     */
    forceRedirect?: outputs.CdnDomainHttpsConfigForceRedirect;
    /**
     * HTTP2 configuration switch. Valid values are `on` and `off`. and default value is `off`.
     */
    http2Switch?: string;
    /**
     * HTTPS configuration switch. Valid values are `on` and `off`.
     */
    httpsSwitch: string;
    /**
     * OCSP configuration switch. Valid values are `on` and `off`. and default value is `off`.
     */
    ocspStaplingSwitch?: string;
    /**
     * Server certificate configuration information.
     */
    serverCertificateConfig?: outputs.CdnDomainHttpsConfigServerCertificateConfig;
    /**
     * Spdy configuration switch. Valid values are `on` and `off`. and default value is `off`. This parameter is for white-list customer.
     */
    spdySwitch?: string;
    /**
     * Tls version settings, only support some Advanced domain names, support settings TLSv1, TLSV1.1, TLSV1.2, TLSv1.3, when modifying must open consecutive versions.
     */
    tlsVersions: string[];
    /**
     * Client certificate authentication feature. Valid values are `on` and `off`. and default value is `off`.
     */
    verifyClient?: string;
}

export interface CdnDomainHttpsConfigClientCertificateConfig {
    /**
     * Client Certificate PEM format, requires Base64 encoding.
     */
    certificateContent: string;
    /**
     * Client certificate name.
     */
    certificateName: string;
    /**
     * Deploy time of client certificate.
     */
    deployTime: string;
    /**
     * Expire time of client certificate.
     */
    expireTime: string;
}

export interface CdnDomainHttpsConfigForceRedirect {
    /**
     * Whether to return the newly added header during force redirection. Values: `on`, `off`.
     */
    carryHeaders?: string;
    /**
     * Forced redirect status code. Valid values are `301` and `302`. When `switch` setting `off`, this property does not need to be set or set to `302`. Default value is `302`.
     */
    redirectStatusCode?: number;
    /**
     * Forced redirect type. Valid values are `http` and `https`. `http` means a forced redirect from HTTPS to HTTP, `https` means a forced redirect from HTTP to HTTPS. When `switch` setting `off`, this property does not need to be set or set to `http`. Default value is `http`.
     */
    redirectType?: string;
    /**
     * Forced redirect configuration switch. Valid values are `on` and `off`. Default value is `off`.
     */
    switch?: string;
}

export interface CdnDomainHttpsConfigServerCertificateConfig {
    /**
     * Server certificate information. This is required when uploading an external certificate, which should contain the complete certificate chain.
     */
    certificateContent?: string;
    /**
     * Server certificate ID.
     */
    certificateId?: string;
    /**
     * Server certificate name.
     */
    certificateName: string;
    /**
     * Deploy time of server certificate.
     */
    deployTime: string;
    /**
     * Expire time of server certificate.
     */
    expireTime: string;
    /**
     * Certificate remarks.
     */
    message?: string;
    /**
     * Server key information. This is required when uploading an external certificate.
     */
    privateKey?: string;
}

export interface CdnDomainHwPrivateAccess {
    /**
     * Access ID.
     */
    accessKey?: string;
    /**
     * Bucket.
     */
    bucket?: string;
    /**
     * Key.
     */
    secretKey?: string;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainIpFilter {
    /**
     * Ip filter rules, This feature is only available to selected beta customers.
     */
    filterRules?: outputs.CdnDomainIpFilterFilterRule[];
    /**
     * IP `blacklist`/`whitelist` type.
     */
    filterType?: string;
    /**
     * Ip filter list, Supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
     */
    filters?: string[];
    /**
     * Return code, available values: 400-499.
     */
    returnCode?: number;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainIpFilterFilterRule {
    /**
     * Ip filter `blacklist`/`whitelist` type of filter rules.
     */
    filterType: string;
    /**
     * Ip filter rule list, supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
     */
    filters: string[];
    /**
     * Content list for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
     */
    rulePaths: string[];
    /**
     * Ip filter rule type of filter rules, available: `all`, `file`, `directory`, `path`.
     */
    ruleType: string;
}

export interface CdnDomainIpFreqLimit {
    /**
     * Sets the limited number of requests per second, 514 will be returned for requests that exceed the limit.
     */
    qps?: number;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainMaxAge {
    /**
     * List of Max Age rule configuration.
     */
    maxAgeRules?: outputs.CdnDomainMaxAgeMaxAgeRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainMaxAgeMaxAgeRule {
    /**
     * Whether to follow origin, values: `on`/`off`, if set to `on`, the `max_age_time` will be ignored.
     */
    followOrigin?: string;
    /**
     * List of rule paths for each `max_age_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
     */
    maxAgeContents: string[];
    /**
     * Max Age time in seconds, this can set to `0` that stands for no cache.
     */
    maxAgeTime: number;
    /**
     * The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
     */
    maxAgeType: string;
}

export interface CdnDomainOrigin {
    /**
     * Backup origin server list. Valid values can be ip or domain name. When modifying the backup origin server, you need to enter the corresponding `backup_origin_type`.
     */
    backupOriginLists?: string[];
    /**
     * Backup origin server type, which supports the following types: `domain`: domain name type, `ip`: IP list used as origin server.
     */
    backupOriginType?: string;
    /**
     * Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
     */
    backupServerName?: string;
    /**
     * When OriginType is COS, you can specify if access to private buckets is allowed. Valid values are `on` and `off`. and default value is `off`.
     */
    cosPrivateAccess?: string;
    /**
     * Master origin server list. Valid values can be ip or domain name. When modifying the origin server, you need to enter the corresponding `origin_type`.
     */
    originLists: string[];
    /**
     * Origin-pull protocol configuration. `http`: forced HTTP origin-pull, `follow`: protocol follow origin-pull, `https`: forced HTTPS origin-pull. This only supports origin server port 443 for origin-pull.
     */
    originPullProtocol?: string;
    /**
     * Master origin server type. The following types are supported: `domain`: domain name type, `cos`: COS origin, `ip`: IP list used as origin server, `ipv6`: origin server list is a single IPv6 address, `ip_ipv6`: origin server list is multiple IPv4 addresses and an IPv6 address.
     */
    originType: string;
    /**
     * Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
     */
    serverName: string;
}

export interface CdnDomainOriginPullOptimization {
    /**
     * Optimization type, values: `OVToCN` - Overseas to CN, `CNToOV` CN to Overseas.
     */
    optimizationType?: string;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainOriginPullTimeout {
    /**
     * The origin-pull connection timeout (in seconds). Valid range: 5-60.
     */
    connectTimeout: number;
    /**
     * The origin-pull receipt timeout (in seconds). Valid range: 10-60.
     */
    receiveTimeout: number;
}

export interface CdnDomainOssPrivateAccess {
    /**
     * Access ID.
     */
    accessKey?: string;
    /**
     * Bucket.
     */
    bucket?: string;
    /**
     * Region.
     */
    region?: string;
    /**
     * Key.
     */
    secretKey?: string;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainPostMaxSize {
    /**
     * Maximum size in MB, value range is `[1, 200]`.
     */
    maxSize?: number;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainQnPrivateAccess {
    /**
     * Access ID.
     */
    accessKey?: string;
    /**
     * Key.
     */
    secretKey?: string;
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainReferer {
    /**
     * List of referer rules.
     */
    refererRules?: outputs.CdnDomainRefererRefererRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainRefererRefererRule {
    /**
     * Whether to allow emptpy.
     */
    allowEmpty: boolean;
    /**
     * Referer type.
     */
    refererType: string;
    /**
     * Referer list.
     */
    referers: string[];
    /**
     * Referer rule path list.
     */
    rulePaths: string[];
    /**
     * Referer rule type.
     */
    ruleType: string;
}

export interface CdnDomainRequestHeader {
    /**
     * Custom request header configuration rules.
     */
    headerRules?: outputs.CdnDomainRequestHeaderHeaderRule[];
    /**
     * Custom request header configuration switch. Valid values are `on` and `off`. and default value is `off`.
     */
    switch?: string;
}

export interface CdnDomainRequestHeaderHeaderRule {
    /**
     * Http header setting method. The following types are supported: `add`: add a head, if a head already exists, there will be a duplicate head, `del`: delete the head.
     */
    headerMode: string;
    /**
     * Http header name.
     */
    headerName: string;
    /**
     * Http header value, optional when Mode is `del`, Required when Mode is `add`/`set`.
     */
    headerValue: string;
    /**
     * Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html.
     */
    rulePaths: string[];
    /**
     * Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect.
     */
    ruleType: string;
}

export interface CdnDomainResponseHeader {
    /**
     * List of response header rule.
     */
    headerRules?: outputs.CdnDomainResponseHeaderHeaderRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainResponseHeaderHeaderRule {
    /**
     * Response header mode.
     */
    headerMode: string;
    /**
     * response header name of rule.
     */
    headerName: string;
    /**
     * response header value of rule.
     */
    headerValue: string;
    /**
     * response rule paths of rule.
     */
    rulePaths: string[];
    /**
     * response rule type of rule.
     */
    ruleType: string;
}

export interface CdnDomainRuleCach {
    /**
     * Cache expiration time setting, the unit is second, the maximum can be set to 365 days.
     */
    cacheTime: number;
    /**
     * Advanced cache expiration configuration. When it is turned on, it will compare the max-age value returned by the origin site with the cache expiration time set in CacheRules, and take the minimum value to cache at the node. Valid values are `on` and `off`. Default value is `off`.
     */
    compareMaxAge?: string;
    /**
     * Follow the source station configuration switch. Valid values are `on` and `off`.
     */
    followOriginSwitch?: string;
    /**
     * Specify whether to enable heuristic cache, only available while `follow_origin_switch` enabled, values: `on`, `off` (Default).
     */
    heuristicCacheSwitch?: string;
    /**
     * Specify heuristic cache time in second, only available while `follow_origin_switch` and `heuristic_cache_switch` enabled.
     */
    heuristicCacheTime?: number;
    /**
     * Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules. Valid values are `on` and `off`. Default value is `off`.
     */
    ignoreCacheControl?: string;
    /**
     * Ignore the Set-Cookie header of the origin site. Valid values are `on` and `off`. Default value is `off`. This parameter is for white-list customer.
     */
    ignoreSetCookie?: string;
    /**
     * Cache configuration switch. Valid values are `on` and `off`.
     */
    noCacheSwitch?: string;
    /**
     * Always check back to origin. Valid values are `on` and `off`. Default value is `off`.
     */
    reValidate?: string;
    /**
     * Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html, `index`: fill /.
     */
    rulePaths: string[];
    /**
     * Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
     */
    ruleType?: string;
    /**
     * Cache configuration switch. Valid values are `on` and `off`.
     */
    switch?: string;
}

export interface CdnDomainStatusCodeCache {
    /**
     * List of cache rule.
     */
    cacheRules?: outputs.CdnDomainStatusCodeCacheCacheRule[];
    /**
     * Configuration switch, available values: `on`, `off` (default).
     */
    switch: string;
}

export interface CdnDomainStatusCodeCacheCacheRule {
    /**
     * Status code cache expiration time (in seconds).
     */
    cacheTime: number;
    /**
     * Code of status cache. available values: `403`, `404`.
     */
    statusCode: string;
}

export interface CdnUrlPurgePurgeHistory {
    createTime: string;
    flushType: string;
    purgeType: string;
    status: string;
    taskId: string;
    url: string;
}

export interface CdnUrlPushPushHistory {
    area: string;
    createTime: string;
    percent: number;
    status: string;
    taskId: string;
    updateTime: string;
    url: string;
}

export interface CdwdorisInstanceBeSpec {
    /**
     * Quantities.
     */
    count: number;
    /**
     * Cloud disk size.
     */
    diskSize: number;
    /**
     * Specification name.
     */
    specName: string;
}

export interface CdwdorisInstanceChargeProperties {
    /**
     * Billing type: `PREPAID` for prepayment, and `POSTPAID_BY_HOUR` for postpayment. Note: This field may return null, indicating that no valid values can be obtained.
     */
    chargeType?: string;
    /**
     * Whether to automatically renew. 1 means automatic renewal is enabled. Note: This field may return null, indicating that no valid values can be obtained.
     */
    renewFlag?: number;
    /**
     * Billing duration Note: This field may return null, indicating that no valid values can be obtained.
     */
    timeSpan?: number;
    /**
     * Billing time unit, and `m` means month, etc. Note: This field may return null, indicating that no valid values can be obtained.
     */
    timeUnit?: string;
}

export interface CdwdorisInstanceFeSpec {
    /**
     * Quantities.
     */
    count: number;
    /**
     * Cloud disk size.
     */
    diskSize: number;
    /**
     * Specification name.
     */
    specName: string;
}

export interface CdwdorisInstanceTag {
    /**
     * Tag key.
     */
    tagKey: string;
    /**
     * Tag value.
     */
    tagValue: string;
}

export interface CdwdorisInstanceUserMultiZoneInfos {
    /**
     * Subnet ID Note: This field may return null, indicating that no valid values can be obtained.
     */
    subnetId?: string;
    /**
     * The number of available IP addresses in the current subnet Note: This field may return null, indicating that no valid values can be obtained.
     */
    subnetIpNum?: number;
    /**
     * Availability zone Note: This field may return null, indicating that no valid values can be obtained.
     */
    zone?: string;
}

export interface CdwdorisWorkloadGroupWorkloadGroup {
    /**
     * Cpu hard limit. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cpuHardLimit?: string;
    /**
     * CPU weight. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cpuShare?: number;
    /**
     * Whether to allow over-allocation. Note: This field may return null, indicating that no valid value can be obtained.
     */
    enableMemoryOverCommit?: boolean;
    /**
     * Memory limit, the sum of the memory limit values of all resource groups should be less than or equal to 100. Note: This field may return null, indicating that no valid value can be obtained.
     */
    memoryLimit?: number;
    /**
     * Workload group name. Note: This field may return null, indicating that no valid value can be obtained.
     */
    workloadGroupName?: string;
}

export interface CdwpgInstanceChargeProperties {
    /**
     * Charge type, vaild values: PREPAID, POSTPAID_BY_HOUR.
     */
    chargeType?: string;
    /**
     * 0-no automatic renewal,1-automatic renewalNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    renewFlag: number;
    /**
     * Time RangeNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    timeSpan: number;
    /**
     * Time Unit,Generally h and mNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    timeUnit: string;
}

export interface CdwpgInstanceResource {
    /**
     * resource count.
     */
    count: number;
    /**
     * disk Information.
     */
    diskSpec: outputs.CdwpgInstanceResourceDiskSpec;
    /**
     * resource name.
     */
    specName: string;
    /**
     * resource type.
     */
    type: string;
}

export interface CdwpgInstanceResourceDiskSpec {
    /**
     * disk count.
     */
    diskCount: number;
    /**
     * disk size.
     */
    diskSize: number;
    /**
     * disk type.
     */
    diskType: string;
}

export interface CfwNatInstanceNewModeItems {
    /**
     * List of egress elastic public network IPs bound in the new mode.
     */
    eips: string[];
    /**
     * List of vpcs connected in new mode.
     */
    vpcLists: string[];
}

export interface CfwVpcInstanceVpcFwInstance {
    /**
     * Deploy regional information.
     */
    fwDeploy: outputs.CfwVpcInstanceVpcFwInstanceFwDeploy;
    /**
     * Firewall instance ID (passed in editing scenario).
     */
    fwInsId: string;
    /**
     * Firewall instance name.
     */
    name: string;
    /**
     * List of VpcIds accessed in private network mode; only used in private network mode.
     */
    vpcIds?: string[];
}

export interface CfwVpcInstanceVpcFwInstanceFwDeploy {
    /**
     * Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if it is empty, off-site disaster recovery will not be used by default.
     */
    crossAZone?: number;
    /**
     * Firewall Deployment Region.
     */
    deployRegion: string;
    /**
     * Bandwidth, unit: Mbps.
     */
    width: number;
    /**
     * Zone list.
     */
    zoneSets: string[];
}

export interface CfwVpcPolicyBetaList {
    lastTime: string;
    taskId: number;
    taskName: string;
}

export interface ChdfsAccessRuleAccessRule {
    /**
     * rule access mode, 1: read only, 2: read &amp; wirte.
     */
    accessMode?: number;
    /**
     * single rule id.
     */
    accessRuleId: number;
    /**
     * rule address, IP OR IP SEG.
     */
    address?: string;
    /**
     * rule create time.
     */
    createTime: string;
    /**
     * rule priority, range 1 - 100, value less higher priority.
     */
    priority?: number;
}

export interface ChdfsLifeCycleRuleLifeCycleRule {
    /**
     * rule create time.
     */
    createTime: string;
    /**
     * single rule id.
     */
    lifeCycleRuleId: number;
    /**
     * rule name.
     */
    lifeCycleRuleName?: string;
    /**
     * rule op path.
     */
    path?: string;
    /**
     * rule status, 1:open, 2:close.
     */
    status?: number;
    /**
     * life cycle rule transition list.
     */
    transitions?: outputs.ChdfsLifeCycleRuleLifeCycleRuleTransition[];
}

export interface ChdfsLifeCycleRuleLifeCycleRuleTransition {
    /**
     * trigger days(n day).
     */
    days: number;
    /**
     * transition type, 1: archive, 2: delete, 3: low rate.
     */
    type: number;
}

export interface CiMediaAnimationTemplateContainer {
    /**
     * Package format.
     */
    format: string;
}

export interface CiMediaAnimationTemplateTimeInterval {
    /**
     * duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    duration?: string;
    /**
     * Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    start?: string;
}

export interface CiMediaAnimationTemplateVideo {
    /**
     * Animation per second frame number, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
     */
    animateFramesPerSecond?: string;
    /**
     * GIFs are kept only Keyframe, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
     */
    animateOnlyKeepKeyFrame?: string;
    /**
     * Animation frame extraction every time, (0, video duration], Animation frame extraction time interval, If TimeInterval.Duration is set, it is less than this value.
     */
    animateTimeIntervalOfFrame?: string;
    /**
     * Codec format `gif`, `webp`.
     */
    codec: string;
    /**
     * Frame rate, value range: (0, 60], Unit: fps.
     */
    fps?: string;
    /**
     * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
     */
    height?: string;
    /**
     * Set relative quality, [1, 100), webp image quality setting takes effect, gif has no quality parameter.
     */
    quality?: string;
    /**
     * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
     */
    width?: string;
}

export interface CiMediaConcatTemplateConcatTemplate {
    /**
     * audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
     */
    audio?: outputs.CiMediaConcatTemplateConcatTemplateAudio;
    /**
     * mixing parameters.
     */
    audioMixes?: outputs.CiMediaConcatTemplateConcatTemplateAudioMix[];
    /**
     * Package format.
     */
    concatFragments: outputs.CiMediaConcatTemplateConcatTemplateConcatFragment[];
    /**
     * Only splicing without transcoding.
     */
    container: outputs.CiMediaConcatTemplateConcatTemplateContainer;
    /**
     * video information, do not upload Video, which is equivalent to deleting video information.
     */
    video?: outputs.CiMediaConcatTemplateConcatTemplateVideo;
}

export interface CiMediaConcatTemplateConcatTemplateAudio {
    /**
     * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
     */
    bitrate?: string;
    /**
     * number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
     */
    channels?: string;
    /**
     * Codec format, value aac, mp3.
     */
    codec: string;
    /**
     * Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
     */
    samplerate?: string;
}

export interface CiMediaConcatTemplateConcatTemplateAudioMix {
    /**
     * The media address of the audio track that needs to be mixed.
     */
    audioSource: string;
    /**
     * Mix Fade Configuration.
     */
    effectConfig?: outputs.CiMediaConcatTemplateConcatTemplateAudioMixEffectConfig;
    /**
     * Mixing mode Repeat: background sound loop, Once: The background sound is played once.
     */
    mixMode?: string;
    /**
     * Whether to replace the original audio of the Input media file with the mixed audio track media.
     */
    replace?: string;
}

export interface CiMediaConcatTemplateConcatTemplateAudioMixEffectConfig {
    /**
     * bgm transition fade-in duration, support floating point numbers.
     */
    bgmFadeTime?: string;
    /**
     * Enable bgm conversion fade in.
     */
    enableBgmFade?: string;
    /**
     * enable fade out.
     */
    enableEndFadeout?: string;
    /**
     * enable fade in.
     */
    enableStartFadein?: string;
    /**
     * fade out time, greater than 0, support floating point numbers.
     */
    endFadeoutTime: string;
    /**
     * Fade in duration, greater than 0, support floating point numbers.
     */
    startFadeinTime?: string;
}

export interface CiMediaConcatTemplateConcatTemplateConcatFragment {
    /**
     * node type, `start`, `end`.
     */
    mode: string;
    /**
     * Splicing object address.
     */
    url: string;
}

export interface CiMediaConcatTemplateConcatTemplateContainer {
    /**
     * Container format: mp4, flv, hls, ts, mp3, aac.
     */
    format: string;
}

export interface CiMediaConcatTemplateConcatTemplateVideo {
    /**
     * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
     */
    bitrate?: string;
    /**
     * Codec format `H.264`.
     */
    codec: string;
    /**
     * Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
     */
    crf?: string;
    /**
     * Frame rate, value range: (0, 60], Unit: fps.
     */
    fps?: string;
    /**
     * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
     */
    height?: string;
    /**
     * Whether to delete the source audio stream, the value is true, false.
     */
    remove: string;
    /**
     * Rotation angle, Value range: [0, 360), Unit: degree.
     */
    rotate?: string;
    /**
     * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
     */
    width?: string;
}

export interface CiMediaPicProcessTemplatePicProcess {
    /**
     * Whether to return the original image information.
     */
    isPicInfo?: string;
    /**
     * Image processing rules, 1: basic image processing, please refer to the basic image processing document, 2: image compression, please refer to the image compression document, 3: blind watermark, please refer to the blind watermark document.
     */
    processRule: string;
}

export interface CiMediaSmartCoverTemplateSmartCover {
    /**
     * Number of screenshots, [1,10].
     */
    count?: string;
    /**
     * cover deduplication, true/false.
     */
    deleteDuplicates?: string;
    /**
     * Image Format, value jpg, png, webp.
     */
    format: string;
    /**
     * Height, value range: [128, 4096], unit: px, if only Height is set, Width is calculated according to the original video ratio.
     */
    height?: string;
    /**
     * Width, value range: [128, 4096], unit: px, if only Width is set, Height is calculated according to the original ratio of the video.
     */
    width?: string;
}

export interface CiMediaSnapshotTemplateSnapshot {
    /**
     * Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
     */
    blackLevel: string;
    /**
     * Screenshot image processing parameters, for example: imageMogr2/format/png.
     */
    ciParam: string;
    /**
     * Number of screenshots, range (0 10000].
     */
    count: string;
    /**
     * high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
     */
    height: string;
    /**
     * Whether to enable black screen detection true/false.
     */
    isCheckBlack: string;
    /**
     * Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
     */
    isCheckCount: string;
    /**
     * Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
     */
    mode: string;
    /**
     * Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
     */
    pixelBlackThreshold: string;
    /**
     * Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
     */
    snapshotOutMode: string;
    /**
     * Screenshot output configuration.
     */
    spriteSnapshotConfig?: outputs.CiMediaSnapshotTemplateSnapshotSpriteSnapshotConfig;
    /**
     * Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    start: string;
    /**
     * Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    timeInterval: string;
    /**
     * wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
     */
    width: string;
}

export interface CiMediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
    /**
     * Single image height Value range: [8, 4096], Unit: px.
     */
    cellHeight: string;
    /**
     * Single image width Value range: [8, 4096], Unit: px.
     */
    cellWidth: string;
    /**
     * See `https://www.ffmpeg.org/ffmpeg-utils.html#color-syntax` for details on supported colors.
     */
    color: string;
    /**
     * Number of screenshot columns, value range: [1, 10000].
     */
    columns: string;
    /**
     * Number of screenshot lines, value range: [1, 10000].
     */
    lines: string;
    /**
     * screenshot margin size, Value range: [8, 4096], Unit: px.
     */
    margin: string;
    /**
     * screenshot padding size, Value range: [8, 4096], Unit: px.
     */
    padding: string;
}

export interface CiMediaSpeechRecognitionTemplateSpeechRecognition {
    /**
     * Number of voice channels: 1 means mono. EngineModelType supports only mono for non-telephone scenarios, and 2 means dual channels (only 8k_zh engine model supports dual channels, which should correspond to both sides of the call).
     */
    channelNum: string;
    /**
     * Whether to perform intelligent conversion of Arabic numerals (currently supports Mandarin Chinese engine): 0 means no conversion, directly output Chinese numbers, 1 means intelligently convert to Arabic numerals according to the scene, 3 means enable math-related digital conversion, the default value is 0.
     */
    convertNumMode?: string;
    /**
     * Engine model type, divided into phone scene and non-phone scene, phone scene: 8k_zh: phone 8k Chinese Mandarin general (can be used for dual-channel audio), 8k_zh_s: phone 8k Chinese Mandarin speaker separation (only for monophonic audio), 8k_en: Telephone 8k English; non-telephone scene: 16k_zh: 16k Mandarin Chinese, 16k_zh_video: 16k audio and video field, 16k_en: 16k English, 16k_ca: 16k Cantonese, 16k_ja: 16k Japanese, 16k_zh_edu: Chinese education, 16k_en_edu: English education, 16k_zh_medical: medical, 16k_th: Thai, 16k_zh_dialect: multi-dialect, supports 23 dialects.
     */
    engineModelType: string;
    /**
     * Whether to filter dirty words (currently supports Mandarin Chinese engine): 0 means not to filter dirty words, 1 means to filter dirty words, 2 means to replace dirty words with *, the default value is 0.
     */
    filterDirty?: string;
    /**
     * Whether to pass modal particles (currently supports Mandarin Chinese engine): 0 means not to filter modal particles, 1 means partial filtering, 2 means strict filtering, and the default value is 0.
     */
    filterModal?: string;
    /**
     * Whether to filter punctuation (currently supports Mandarin Chinese engine): 0 means no filtering, 1 means filtering end-of-sentence punctuation, 2 means filtering all punctuation, the default value is 0.
     */
    filterPunc?: string;
    /**
     * Output file type, optional txt, srt. The default is txt.
     */
    outputFileType?: string;
    /**
     * Recognition result return form: 0 means the recognition result text (including segmented time stamps), 1 is the detailed recognition result at the word level granularity, without punctuation, and includes the speech rate value (a list of word time stamps, generally used to generate subtitle scenes), 2 Detailed recognition results at word-level granularity (including punctuation and speech rate values)..
     */
    resTextFormat?: string;
    /**
     * Whether to enable speaker separation: 0 means not enabled, 1 means enabled (only supports 8k_zh, 16k_zh, 16k_zh_video, monophonic audio), the default value is 0, Note: 8K telephony scenarios suggest using dual-channel to distinguish between the two parties, set ChannelNum=2 is enough, no need to enable speaker separation.
     */
    speakerDiarization?: string;
    /**
     * The number of speakers to be separated (need to be used in conjunction with enabling speaker separation), value range: 0-10, 0 means automatic separation (currently only supports <= 6 people), 1-10 represents the number of specified speakers to be separated. The default value is 0.
     */
    speakerNumber?: string;
}

export interface CiMediaTranscodeProTemplateAudio {
    /**
     * Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
     */
    codec: string;
    /**
     * Whether to delete the source audio stream, the value is true, false.
     */
    remove?: string;
}

export interface CiMediaTranscodeProTemplateContainer {
    /**
     * Fragment configuration, valid when format is hls and dash.
     */
    clipConfig?: outputs.CiMediaTranscodeProTemplateContainerClipConfig;
    /**
     * Package format.
     */
    format: string;
}

export interface CiMediaTranscodeProTemplateContainerClipConfig {
    /**
     * Fragmentation duration, default 5s.
     */
    duration?: string;
}

export interface CiMediaTranscodeProTemplateTimeInterval {
    /**
     * duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    duration?: string;
    /**
     * Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    start?: string;
}

export interface CiMediaTranscodeProTemplateTransConfig {
    /**
     * Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
     */
    adjDarMethod?: string;
    /**
     * Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
     */
    audioBitrateAdjMethod?: string;
    /**
     * Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
     */
    deleteMetadata?: string;
    /**
     * Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
     */
    isCheckAudioBitrate?: string;
    /**
     * Whether to check the resolution, when it is false, transcode according to the configuration parameters.
     */
    isCheckReso?: string;
    /**
     * Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
     */
    isCheckVideoBitrate?: string;
    /**
     * Whether to enable HDR to SDR true, false.
     */
    isHdr2Sdr?: string;
    /**
     * Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
     */
    resoAdjMethod?: string;
    /**
     * Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
     */
    videoBitrateAdjMethod?: string;
}

export interface CiMediaTranscodeProTemplateVideo {
    /**
     * Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
     */
    bitrate?: string;
    /**
     * Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
     */
    codec?: string;
    /**
     * Frame rate, value range: (0, 60], Unit: fps.
     */
    fps?: string;
    /**
     * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
     */
    height?: string;
    /**
     * field pattern.
     */
    interlaced?: string;
    /**
     * encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
     */
    profile?: string;
    /**
     * Rotation angle, Value range: [0, 360), Unit: degree.
     */
    rotate?: string;
    /**
     * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
     */
    width?: string;
}

export interface CiMediaTranscodeTemplateAudio {
    /**
     * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
     */
    bitrate?: string;
    /**
     * number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3/opus, support 1, 2- When Codec is set to Vorbis, only 2 is supported- When Codec is set to amr, only 1 is supported- When Codec is set to pcm_s16le, only 1 and 2 are supported- When the encapsulation format is dash, 8 is not supported.
     */
    channels?: string;
    /**
     * Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
     */
    codec?: string;
    /**
     * Keep dual audio tracks, the value is true, false. This parameter is invalid when Video.Codec is H.265.
     */
    keepTwoTracks?: string;
    /**
     * Whether to delete the source audio stream, the value is true, false.
     */
    remove?: string;
    /**
     * Sampling bit width- When Codec is set to aac, support fltp- When Codec is set to mp3, fltp, s16p, s32p are supported- When Codec is set to flac, s16, s32, s16p, s32p are supported- When Codec is set to amr, support s16, s16p- When Codec is set to opus, support s16- When Codec is set to pcm_s16le, support s16- When Codec is set to Vorbis, support fltp- This parameter is invalid when Video.Codec is H.265.
     */
    sampleFormat?: string;
    /**
     * Sampling Rate- Unit: Hz- Optional 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below- When Codec is set to amr, only 8000 is supported- When Codec is set to opus, it supports 8000, 16000, 24000, 48000.
     */
    samplerate?: string;
    /**
     * Convert track, the value is true, false. This parameter is invalid when Video.Codec is H.265.
     */
    switchTrack?: string;
}

export interface CiMediaTranscodeTemplateAudioMix {
    /**
     * The media address of the audio track that needs to be mixed.
     */
    audioSource: string;
    /**
     * Mix Fade Configuration.
     */
    effectConfig?: outputs.CiMediaTranscodeTemplateAudioMixEffectConfig;
    /**
     * Mixing mode Repeat: background sound loop, Once: The background sound is played once.
     */
    mixMode?: string;
    /**
     * Whether to replace the original audio of the Input media file with the mixed audio track media.
     */
    replace?: string;
}

export interface CiMediaTranscodeTemplateAudioMixEffectConfig {
    /**
     * bgm transition fade-in duration, support floating point numbers.
     */
    bgmFadeTime?: string;
    /**
     * Enable bgm conversion fade in.
     */
    enableBgmFade?: string;
    /**
     * enable fade out.
     */
    enableEndFadeout?: string;
    /**
     * enable fade in.
     */
    enableStartFadein?: string;
    /**
     * fade out time, greater than 0, support floating point numbers.
     */
    endFadeoutTime?: string;
    /**
     * Fade in duration, greater than 0, support floating point numbers.
     */
    startFadeinTime?: string;
}

export interface CiMediaTranscodeTemplateContainer {
    /**
     * Fragment configuration, valid when format is hls and dash.
     */
    clipConfig?: outputs.CiMediaTranscodeTemplateContainerClipConfig;
    /**
     * Package format.
     */
    format: string;
}

export interface CiMediaTranscodeTemplateContainerClipConfig {
    /**
     * Fragmentation duration, default 5s.
     */
    duration?: string;
}

export interface CiMediaTranscodeTemplateTimeInterval {
    /**
     * duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    duration?: string;
    /**
     * Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
     */
    start?: string;
}

export interface CiMediaTranscodeTemplateTransConfig {
    /**
     * Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
     */
    adjDarMethod?: string;
    /**
     * Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
     */
    audioBitrateAdjMethod?: string;
    /**
     * Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
     */
    deleteMetadata?: string;
    /**
     * hls encryption configuration.
     */
    hlsEncrypt?: outputs.CiMediaTranscodeTemplateTransConfigHlsEncrypt;
    /**
     * Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
     */
    isCheckAudioBitrate?: string;
    /**
     * Whether to check the resolution, when it is false, transcode according to the configuration parameters.
     */
    isCheckReso?: string;
    /**
     * Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
     */
    isCheckVideoBitrate?: string;
    /**
     * Whether to enable HDR to SDR true, false.
     */
    isHdr2Sdr?: string;
    /**
     * Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
     */
    resoAdjMethod?: string;
    /**
     * Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
     */
    videoBitrateAdjMethod?: string;
}

export interface CiMediaTranscodeTemplateTransConfigHlsEncrypt {
    /**
     * Whether to enable HLS encryption, support encryption when Container.Format is hls.
     */
    isHlsEncrypt: string;
    /**
     * HLS encrypted key, this parameter is only meaningful when IsHlsEncrypt is true.
     */
    uriKey: string;
}

export interface CiMediaTranscodeTemplateVideo {
    /**
     * Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
     */
    bitrate?: string;
    /**
     * buffer size, Value range: [1000, 128000], Unit: Kb, This parameter is not supported when Codec is VP8/VP9.
     */
    bufsize?: string;
    /**
     * Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
     */
    codec?: string;
    /**
     * Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
     */
    crf?: string;
    /**
     * Frame rate, value range: (0, 60], Unit: fps.
     */
    fps?: string;
    /**
     * The maximum number of frames between key frames, value range: [1, 100000].
     */
    gop?: string;
    /**
     * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
     */
    height?: string;
    /**
     * Adaptive length,true, false, This parameter is not supported when Codec is VP8/VP9/AV1.
     */
    longShortMode?: string;
    /**
     * Peak video bit rate, Value range: [10, 50000], Unit: Kbps, This parameter is not supported when Codec is VP8/VP9.
     */
    maxrate?: string;
    /**
     * video color format, H.264 support: yuv420p, yuv422p, yuv444p, yuvj420p, yuvj422p, yuvj444p, auto, H.265 support: yuv420p, yuv420p10le, auto, This parameter is not supported when Codec is VP8/VP9/AV1.
     */
    pixfmt?: string;
    /**
     * Video Algorithm Presets- H.264 supports this parameter, the values are veryfast, fast, medium, slow, slower- VP8 supports this parameter, the value is good, realtime- AV1 supports this parameter, the value is 5 (recommended value), 4- H.265 and VP9 do not support this parameter.
     */
    preset?: string;
    /**
     * encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
     */
    profile?: string;
    /**
     * Whether to delete the video stream, true, false.
     */
    remove?: string;
    /**
     * Rotation angle, Value range: [0, 360), Unit: degree.
     */
    rotate?: string;
    /**
     * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
     */
    width?: string;
}

export interface CiMediaVideoMontageTemplateAudio {
    /**
     * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
     */
    bitrate?: string;
    /**
     * number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
     */
    channels?: string;
    /**
     * Codec format, value aac, mp3.
     */
    codec: string;
    /**
     * Whether to delete the source audio stream, the value is true, false.
     */
    remove?: string;
    /**
     * Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
     */
    samplerate?: string;
}

export interface CiMediaVideoMontageTemplateAudioMix {
    /**
     * The media address of the audio track that needs to be mixed.
     */
    audioSource: string;
    /**
     * Mix Fade Configuration.
     */
    effectConfig?: outputs.CiMediaVideoMontageTemplateAudioMixEffectConfig;
    /**
     * Mixing mode Repeat: background sound loop, Once: The background sound is played once.
     */
    mixMode?: string;
    /**
     * Whether to replace the original audio of the Input media file with the mixed audio track media.
     */
    replace?: string;
}

export interface CiMediaVideoMontageTemplateAudioMixEffectConfig {
    /**
     * bgm transition fade-in duration, support floating point numbers.
     */
    bgmFadeTime?: string;
    /**
     * Enable bgm conversion fade in.
     */
    enableBgmFade?: string;
    /**
     * enable fade out.
     */
    enableEndFadeout?: string;
    /**
     * enable fade in.
     */
    enableStartFadein?: string;
    /**
     * fade out time, greater than 0, support floating point numbers.
     */
    endFadeoutTime?: string;
    /**
     * Fade in duration, greater than 0, support floating point numbers.
     */
    startFadeinTime?: string;
}

export interface CiMediaVideoMontageTemplateContainer {
    /**
     * Container format: mp4, flv, hls, ts, mkv.
     */
    format: string;
}

export interface CiMediaVideoMontageTemplateVideo {
    /**
     * Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
     */
    bitrate?: string;
    /**
     * Codec format `H.264`.
     */
    codec: string;
    /**
     * Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
     */
    crf?: string;
    /**
     * Frame rate, value range: (0, 60], Unit: fps.
     */
    fps?: string;
    /**
     * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
     */
    height?: string;
    /**
     * Whether to delete the source audio stream, the value is true, false.
     */
    remove?: string;
    /**
     * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
     */
    width?: string;
}

export interface CiMediaVideoProcessTemplateColorEnhance {
    /**
     * Contrast, value range: [0, 100], empty string (indicates automatic analysis).
     */
    contrast?: string;
    /**
     * colorcorrection, value range: [0, 100], empty string (indicating automatic analysis).
     */
    correction?: string;
    /**
     * Whether color enhancement is turned on.
     */
    enable?: string;
    /**
     * Saturation, value range: [0, 100], empty string (indicating automatic analysis).
     */
    saturation?: string;
}

export interface CiMediaVideoProcessTemplateMsSharpen {
    /**
     * Whether detail enhancement is enabled.
     */
    enable?: string;
    /**
     * Enhancement level, value range: [0, 10], empty string (indicates automatic analysis).
     */
    sharpenLevel?: string;
}

export interface CiMediaVoiceSeparateTemplateAudioConfig {
    /**
     * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
     */
    bitrate?: string;
    /**
     * number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2- When Codec is set to amr, only 1 is supported.
     */
    channels?: string;
    /**
     * Codec format, value aac, mp3, flac, amr.
     */
    codec: string;
    /**
     * Sampling Rate- 1: Unit: Hz- 2: Optional 8000, 11025, 22050, 32000, 44100, 48000, 96000- 3: When Codec is set to aac/flac, 8000 is not supported- 4: When Codec is set to mp3, 8000 and 96000 are not supported- 5: When Codec is set to amr, only 8000 is supported.
     */
    samplerate?: string;
}

export interface CiMediaWatermarkTemplateWatermark {
    /**
     * Horizontal offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ], 2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Top, Bottom and Center, the parameter is invalid.
     */
    dx: string;
    /**
     * Vertical offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ],2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096],3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Left, Right and Center, the parameter is invalid.
     */
    dy: string;
    /**
     * Watermark end time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
     */
    endTime?: string;
    /**
     * Image watermark node.
     */
    image?: outputs.CiMediaWatermarkTemplateWatermarkImage;
    /**
     * Offset method, Relativity: proportional, Absolute: fixed position.
     */
    locMode: string;
    /**
     * Reference position, TopRight, TopLeft, BottomRight, BottomLeft, Left, Right, Top, Bottom, Center.
     */
    pos: string;
    /**
     * Watermark start time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
     */
    startTime?: string;
    /**
     * Text Watermark Node.
     */
    text?: outputs.CiMediaWatermarkTemplateWatermarkText;
    /**
     * Watermark type, Text: text watermark, Image: image watermark.
     */
    type: string;
}

export interface CiMediaWatermarkTemplateWatermarkImage {
    /**
     * Whether the background image.
     */
    background: string;
    /**
     * High, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
     */
    height?: string;
    /**
     * Size mode, Original: original size, Proportion: proportional, Fixed: fixed size.
     */
    mode: string;
    /**
     * Transparency, value range: [1 100], unit %.
     */
    transparency: string;
    /**
     * Address of watermark map (pass in after Urlencode is required).
     */
    url: string;
    /**
     * Width, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
     */
    width?: string;
}

export interface CiMediaWatermarkTemplateWatermarkText {
    /**
     * Font color, format: 0xRRGGBB.
     */
    fontColor: string;
    /**
     * Font size, value range: [5 100], unit px.
     */
    fontSize: string;
    /**
     * font type.
     */
    fontType: string;
    /**
     * Watermark content, the length does not exceed 64 characters, only supports Chinese, English, numbers, _, - and *.
     */
    text: string;
    /**
     * Transparency, value range: [1 100], unit %.
     */
    transparency: string;
}

export interface CkafkaAclRuleRuleList {
    /**
     * The default is *, which means that any host can be accessed. Currently, ckafka does not support host and ip network segment.
     */
    host: string;
    /**
     * Acl operation mode, enumeration value (all operations All, read Read, write Write).
     */
    operation: string;
    /**
     * permission type, (Deny|Allow).
     */
    permissionType: string;
    /**
     * User list, the default is User:, which means that any user can access, and the current user can only be the user included in the user list. The input format needs to be prefixed with [User:]. For example, user A is passed in as User:A.
     */
    principal: string;
}

export interface CkafkaConnectResourceClickhouseConnectParam {
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * Password for Clickhouse connection source.
     */
    password: string;
    /**
     * Clickhouse connection port.
     */
    port: number;
    /**
     * Instance resources for Click House connection sources.
     */
    resource: string;
    /**
     * Whether the Clickhouse connection source is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * Instance VIP of the ClickHouse connection source, when it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * The vpc Id of the source of the ClickHouse connection, when it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * The username of the clickhouse connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourceDorisConnectParam {
    /**
     * Doris http CLB port, Usually mapped to port 8040 of be.
     */
    bePort?: number;
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * Doris  password.
     */
    password: string;
    /**
     * Doris jdbc CLB port, Usually mapped to port 9030 of fe.
     */
    port: number;
    /**
     * Doris  instanceId.
     */
    resource: string;
    /**
     * Doris Whether the connection source is a self-built cluster, default: false.
     */
    selfBuilt?: boolean;
    /**
     * Doris vip, When it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * Doris vpcId, When it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * Doris  The username of the connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourceDtsConnectParam {
    /**
     * Id of the Dts consumption group.
     */
    groupId: string;
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * The password of the Dts consumption group.
     */
    password: string;
    /**
     * Dts port.
     */
    port: number;
    /**
     * Dts instance Id.
     */
    resource: string;
    /**
     * Topic subscribed by Dts.
     */
    topic: string;
    /**
     * The account number of the Dts consumption group.
     */
    userName: string;
}

export interface CkafkaConnectResourceEsConnectParam {
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * Es The password of the connection source.
     */
    password: string;
    /**
     * Es port.
     */
    port: number;
    /**
     * Instance resource of Es connection source.
     */
    resource: string;
    /**
     * Whether the Es connection source is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * The instance vip of the Es connection source, when it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * The vpc Id of the Es connection source, when it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * Es The username of the connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourceKafkaConnectParam {
    /**
     * Kafka broker ip, Mandatory when self-built.
     */
    brokerAddress?: string;
    /**
     * Whether to update to the associated Dip task, default: false.
     */
    isUpdate?: boolean;
    /**
     * CKafka instanceId region, Required when crossing regions.
     */
    region?: string;
    /**
     * Kafka instanceId, When it is a Tencent Cloud instance, it is required.
     */
    resource?: string;
    /**
     * Whether it is a self-built cluster, default: false.
     */
    selfBuilt?: boolean;
}

export interface CkafkaConnectResourceMariadbConnectParam {
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * MariaDB password.
     */
    password: string;
    /**
     * MariaDB port.
     */
    port: number;
    /**
     * MariaDB instanceId.
     */
    resource: string;
    /**
     * The instance vip of the Maria DB connection source, when it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * MariaDB vpcId, When it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * MariaDB The username of the connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourceMongodbConnectParam {
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * Password for the source of the Mongo DB connection.
     */
    password: string;
    /**
     * MongoDB port.
     */
    port: number;
    /**
     * Instance resource of Mongo DB connection source.
     */
    resource: string;
    /**
     * Whether the Mongo DB connection source is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * The instance VIP of the Mongo DB connection source, when it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * The vpc Id of the Mongo DB connection source, which is required when it is a Tencent Cloud instance.
     */
    uniqVpcId?: string;
    /**
     * The username of the Mongo DB connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourceMysqlConnectParam {
    /**
     * Required when type is TDSQL C_MYSQL.
     */
    clusterId?: string;
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * Mysql connection source password.
     */
    password: string;
    /**
     * MySQL port.
     */
    port: number;
    /**
     * Instance resource of My SQL connection source.
     */
    resource: string;
    /**
     * Mysql Whether the connection source is a self-built cluster, default: false.
     */
    selfBuilt?: boolean;
    /**
     * The instance vip of the MySQL connection source, when it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * The vpc Id of the My SQL connection source, when it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * Username of Mysql connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourcePostgresqlConnectParam {
    /**
     * Required when type is TDSQL C_POSTGRESQL.
     */
    clusterId?: string;
    /**
     * Whether to update to the associated Datahub task, default: false.
     */
    isUpdate?: boolean;
    /**
     * PostgreSQL password.
     */
    password: string;
    /**
     * PostgreSQL port.
     */
    port: number;
    /**
     * PostgreSQL instanceId.
     */
    resource: string;
    /**
     * PostgreSQL Whether the connection source is a self-built cluster, default: false.
     */
    selfBuilt?: boolean;
    /**
     * The instance VIP of the Postgresql connection source, when it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * The instance vpcId of the Postgresql connection source, when it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * PostgreSQL The username of the connection source.
     */
    userName: string;
}

export interface CkafkaConnectResourceSqlserverConnectParam {
    /**
     * Whether to update to the associated Dip task, default: false.
     */
    isUpdate?: boolean;
    /**
     * SQLServer password.
     */
    password: string;
    /**
     * SQLServer port.
     */
    port: number;
    /**
     * SQLServer instanceId.
     */
    resource: string;
    /**
     * SQLServer instance vip, When it is a Tencent Cloud instance, it is required.
     */
    serviceVip?: string;
    /**
     * SQLServer vpcId, When it is a Tencent Cloud instance, it is required.
     */
    uniqVpcId?: string;
    /**
     * SQLServer The username of the connection source.
     */
    userName: string;
}

export interface CkafkaDatahubTaskSourceResource {
    /**
     * ClickHouse config, Type CLICKHOUSE requierd.
     */
    clickHouseParam?: outputs.CkafkaDatahubTaskSourceResourceClickHouseParam;
    /**
     * Cls configuration, Required when Type is CLS.
     */
    clsParam?: outputs.CkafkaDatahubTaskSourceResourceClsParam;
    /**
     * Cos configuration, required when Type is COS.
     */
    cosParam?: outputs.CkafkaDatahubTaskSourceResourceCosParam;
    /**
     * Ctsdb configuration, Required when Type is CTSDB.
     */
    ctsdbParam?: outputs.CkafkaDatahubTaskSourceResourceCtsdbParam;
    /**
     * Dts configuration, required when Type is DTS.
     */
    dtsParam?: outputs.CkafkaDatahubTaskSourceResourceDtsParam;
    /**
     * Es configuration, required when Type is ES.
     */
    esParam?: outputs.CkafkaDatahubTaskSourceResourceEsParam;
    /**
     * EB configuration, required when type is EB.
     */
    eventBusParam?: outputs.CkafkaDatahubTaskSourceResourceEventBusParam;
    /**
     * ckafka configuration, required when Type is KAFKA.
     */
    kafkaParam?: outputs.CkafkaDatahubTaskSourceResourceKafkaParam;
    /**
     * MariaDB configuration, Required when Type is MARIADB.
     */
    mariaDbParam?: outputs.CkafkaDatahubTaskSourceResourceMariaDbParam;
    /**
     * MongoDB config, Required when Type is MONGODB.
     */
    mongoDbParam?: outputs.CkafkaDatahubTaskSourceResourceMongoDbParam;
    /**
     * MySQL configuration, Required when Type is MYSQL.
     */
    mySqlParam?: outputs.CkafkaDatahubTaskSourceResourceMySqlParam;
    /**
     * PostgreSQL configuration, Required when Type is POSTGRESQL or TDSQL C_POSTGRESQL.
     */
    postgreSqlParam?: outputs.CkafkaDatahubTaskSourceResourcePostgreSqlParam;
    /**
     * Scf configuration, Required when Type is SCF.
     */
    scfParam?: outputs.CkafkaDatahubTaskSourceResourceScfParam;
    /**
     * SQLServer configuration, Required when Type is SQLSERVER.
     */
    sqlServerParam?: outputs.CkafkaDatahubTaskSourceResourceSqlServerParam;
    /**
     * Tdw configuration, required when Type is TDW.
     */
    tdwParam?: outputs.CkafkaDatahubTaskSourceResourceTdwParam;
    /**
     * Topic configuration, Required when Type is Topic.
     */
    topicParam?: outputs.CkafkaDatahubTaskSourceResourceTopicParam;
    /**
     * resource type.
     */
    type: string;
}

export interface CkafkaDatahubTaskSourceResourceClickHouseParam {
    /**
     * ClickHouse cluster.
     */
    cluster: string;
    /**
     * ClickHouse database name.
     */
    database: string;
    /**
     * When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
     */
    dropCls?: outputs.CkafkaDatahubTaskSourceResourceClickHouseParamDropCls;
    /**
     * Whether ClickHouse discards the message that fails to parse, the default is true.
     */
    dropInvalidMessage?: boolean;
    /**
     * ClickHouse ip.
     */
    ip?: string;
    /**
     * ClickHouse passwd.
     */
    password?: string;
    /**
     * ClickHouse port.
     */
    port?: number;
    /**
     * resource id.
     */
    resource: string;
    /**
     * ClickHouse schema.
     */
    schemas: outputs.CkafkaDatahubTaskSourceResourceClickHouseParamSchema[];
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt?: boolean;
    /**
     * instance vip.
     */
    serviceVip?: string;
    /**
     * ClickHouse table.
     */
    table: string;
    /**
     * ClickHouse type, emr-clickhouse: emr;cdw-clickhouse: cdwch; selfBuilt: ``.
     */
    type?: string;
    /**
     * instance vpc id.
     */
    uniqVpcId?: string;
    /**
     * ClickHouse user name.
     */
    userName?: string;
}

export interface CkafkaDatahubTaskSourceResourceClickHouseParamDropCls {
    /**
     * cls LogSet id.
     */
    dropClsLogSet?: string;
    /**
     * cls account.
     */
    dropClsOwneruin?: string;
    /**
     * cls region.
     */
    dropClsRegion?: string;
    /**
     * cls topicId.
     */
    dropClsTopicId?: string;
    /**
     * Whether to deliver to cls.
     */
    dropInvalidMessageToCls?: boolean;
}

export interface CkafkaDatahubTaskSourceResourceClickHouseParamSchema {
    /**
     * Whether the column item is allowed to be empty.
     */
    allowNull: boolean;
    /**
     * column name.
     */
    columnName: string;
    /**
     * The json Key name corresponding to this column.
     */
    jsonKey: string;
    /**
     * type of table column.
     */
    type: string;
}

export interface CkafkaDatahubTaskSourceResourceClsParam {
    /**
     * Required when Decode Json is false.
     */
    contentKey?: string;
    /**
     * Whether the produced information is in json format.
     */
    decodeJson: boolean;
    /**
     * LogSet id.
     */
    logSet?: string;
    /**
     * cls id.
     */
    resource: string;
    /**
     * Specify the content of a field in the message as the time of the cls log. The format of the field content needs to be a second-level timestamp.
     */
    timeField?: string;
}

export interface CkafkaDatahubTaskSourceResourceCosParam {
    /**
     * The size of aggregated messages MB.
     */
    aggregateBatchSize?: number;
    /**
     * time interval.
     */
    aggregateInterval?: number;
    /**
     * cos bucket name.
     */
    bucketName: string;
    /**
     * Partition format formatted according to strptime time.
     */
    directoryTimeFormat?: string;
    /**
     * The file format after message aggregation csv|json.
     */
    formatOutputType?: string;
    /**
     * ObjectKey.
     */
    objectKey?: string;
    /**
     * Dumped object directory prefix.
     */
    objectKeyPrefix?: string;
    /**
     * region code.
     */
    region: string;
}

export interface CkafkaDatahubTaskSourceResourceCtsdbParam {
    /**
     * Ctsdb metric.
     */
    ctsdbMetric?: string;
    /**
     * resource id.
     */
    resource?: string;
}

export interface CkafkaDatahubTaskSourceResourceDtsParam {
    /**
     * Dts consumer group Id.
     */
    groupId?: string;
    /**
     * Dts consumer group passwd.
     */
    groupPassword?: string;
    /**
     * Dts account.
     */
    groupUser?: string;
    /**
     * Dts connection ip.
     */
    ip?: string;
    /**
     * Dts connection port.
     */
    port?: number;
    /**
     * Dts instance Id.
     */
    resource: string;
    /**
     * Dts topic.
     */
    topic?: string;
    /**
     * False to synchronize the original data, true to synchronize the parsed json format data, the default is true.
     */
    tranSql?: boolean;
}

export interface CkafkaDatahubTaskSourceResourceEsParam {
    /**
     * key for data in non-json format.
     */
    contentKey?: string;
    /**
     * When the message dumped to ES is the binlog of Database, if you need to synchronize database operations, that is, fill in the primary key of the database table when adding, deleting, and modifying operations to ES.
     */
    databasePrimaryKey?: string;
    /**
     * Es date suffix.
     */
    dateFormat?: string;
    /**
     * The field name of the document ID value dumped into Es.
     */
    documentIdField?: string;
    /**
     * When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
     */
    dropCls?: outputs.CkafkaDatahubTaskSourceResourceEsParamDropCls;
    /**
     * dead letter queue.
     */
    dropDlq?: outputs.CkafkaDatahubTaskSourceResourceEsParamDropDlq;
    /**
     * Whether Es discards messages in non-json format.
     */
    dropInvalidJsonMessage?: boolean;
    /**
     * Whether Es discards the message of parsing failure.
     */
    dropInvalidMessage?: boolean;
    /**
     * Es index name.
     */
    index?: string;
    /**
     * Es custom index name type, STRING, JSONPATH, the default is STRING.
     */
    indexType?: string;
    /**
     * Es Password.
     */
    password?: string;
    /**
     * Es connection port.
     */
    port?: number;
    /**
     * Resource.
     */
    resource: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt?: boolean;
    /**
     * instance vip.
     */
    serviceVip?: string;
    /**
     * instance vpc id.
     */
    uniqVpcId?: string;
    /**
     * Es UserName.
     */
    userName?: string;
}

export interface CkafkaDatahubTaskSourceResourceEsParamDropCls {
    /**
     * cls log set.
     */
    dropClsLogSet?: string;
    /**
     * Delivery account of cls.
     */
    dropClsOwneruin?: string;
    /**
     * The region where the cls is delivered.
     */
    dropClsRegion?: string;
    /**
     * topic of cls.
     */
    dropClsTopicId?: string;
    /**
     * Whether to deliver to cls.
     */
    dropInvalidMessageToCls?: boolean;
}

export interface CkafkaDatahubTaskSourceResourceEsParamDropDlq {
    /**
     * dlq type, CKAFKA|TOPIC.
     */
    dlqType?: string;
    /**
     * Ckafka type dlq.
     */
    kafkaParam?: outputs.CkafkaDatahubTaskSourceResourceEsParamDropDlqKafkaParam;
    /**
     * retry times.
     */
    maxRetryAttempts?: number;
    /**
     * retry interval.
     */
    retryInterval?: number;
    /**
     * DIP Topic type dead letter queue.
     */
    topicParam?: outputs.CkafkaDatahubTaskSourceResourceEsParamDropDlqTopicParam;
    /**
     * type, DLQ dead letter queue, IGNORE_ERROR|DROP.
     */
    type: string;
}

export interface CkafkaDatahubTaskSourceResourceEsParamDropDlqKafkaParam {
    /**
     * Whether to compress when writing to the Topic, if it is not enabled, fill in none, if it is enabled, fill in open.
     */
    compressionType?: string;
    /**
     * Enable the fault-tolerant instance and enable the dead-letter queue.
     */
    enableToleration?: boolean;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * Partition num.
     */
    partitionNum?: number;
    /**
     * Qps limit.
     */
    qpsLimit?: number;
    /**
     * resource id.
     */
    resource: string;
    /**
     * resource id name.
     */
    resourceName?: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * The route from Table to Topic must be passed when the Distribute to multiple topics switch is turned on.
     */
    tableMappings?: outputs.CkafkaDatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMapping[];
    /**
     * Topic name, multiple separated by `,`.
     */
    topic?: string;
    /**
     * Topic Id.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks, if you do not use to distribute to multiple topics, you need to fill in the topic name that needs to be automatically created in the Topic field).
     */
    useAutoCreateTopic?: boolean;
    /**
     * Distribute to multiple topics switch, the default is false.
     */
    useTableMapping?: boolean;
    /**
     * Zone ID.
     */
    zoneId?: number;
}

export interface CkafkaDatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMapping {
    /**
     * database name.
     */
    database: string;
    /**
     * Table name, multiple tables, separated by (commas).
     */
    table: string;
    /**
     * Topic name.
     */
    topic: string;
    /**
     * Topic ID.
     */
    topicId: string;
}

export interface CkafkaDatahubTaskSourceResourceEsParamDropDlqTopicParam {
    /**
     * Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
     */
    compressionType?: string;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * The topic name of the topic sold separately.
     */
    resource: string;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * TopicId.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
     */
    useAutoCreateTopic?: boolean;
}

export interface CkafkaDatahubTaskSourceResourceEventBusParam {
    /**
     * SCF function name.
     */
    functionName?: string;
    /**
     * SCF namespace.
     */
    namespace?: string;
    /**
     * SCF version and alias.
     */
    qualifier?: string;
    /**
     * instance id.
     */
    resource: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * resource type, EB_COS/EB_ES/EB_CLS.
     */
    type: string;
}

export interface CkafkaDatahubTaskSourceResourceKafkaParam {
    /**
     * Whether to compress when writing to the Topic, if it is not enabled, fill in none, if it is enabled, fill in open.
     */
    compressionType?: string;
    /**
     * enable dead letter queue.
     */
    enableToleration?: boolean;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, from beginning:earliest, from latest:latest, from specific time:timestamp.
     */
    offsetType?: string;
    /**
     * the partition num of the topic.
     */
    partitionNum?: number;
    /**
     * Qps(query per seconds) limit.
     */
    qpsLimit?: number;
    /**
     * instance resource.
     */
    resource: string;
    /**
     * instance name.
     */
    resourceName?: string;
    /**
     * whether the cluster is built by yourself instead of cloud product.
     */
    selfBuilt: boolean;
    /**
     * when Offset type timestamp is required.
     */
    startTime?: number;
    /**
     * maps of table to topic, required when multi topic is selected.
     */
    tableMappings?: outputs.CkafkaDatahubTaskSourceResourceKafkaParamTableMapping[];
    /**
     * Topic name, use `,` when more than 1 topic.
     */
    topic?: string;
    /**
     * Topic id.
     */
    topicId?: string;
    /**
     * Does the used topic need to be automatically created (currently only supports SOURCE inflow tasks, if you do not use to distribute to multiple topics, you need to fill in the topic name that needs to be automatically created in the Topic field).
     */
    useAutoCreateTopic?: boolean;
    /**
     * whether to use multi table.
     */
    useTableMapping?: boolean;
    /**
     * Zone ID.
     */
    zoneId?: number;
}

export interface CkafkaDatahubTaskSourceResourceKafkaParamTableMapping {
    /**
     * database name.
     */
    database: string;
    /**
     * table name,use, to separate.
     */
    table: string;
    /**
     * Topic name.
     */
    topic: string;
    /**
     * Topic ID.
     */
    topicId: string;
}

export interface CkafkaDatahubTaskSourceResourceMariaDbParam {
    /**
     * MariaDB database name, * for all database.
     */
    database: string;
    /**
     * If the value is all, DDL data and DML data will also be written to the selected topic; if the value is dml, only DML data will be written to the selected topic.
     */
    includeContentChanges?: string;
    /**
     * If the value is true, and the value of the binlog rows query log events configuration item in My SQL is ON, the data flowing into the topic contains the original SQL statement; if the value is false, the data flowing into the topic does not contain Original SQL statement.
     */
    includeQuery?: boolean;
    /**
     * When the Table input is a prefix, the value of this item is true, otherwise it is false.
     */
    isTablePrefix?: boolean;
    /**
     * Format  library 1. table 1: field 1, field 2; library 2. table 2: field 2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
     */
    keyColumns?: string;
    /**
     * output format, DEFAULT, CANAL_1, CANAL_2.
     */
    outputFormat?: string;
    /**
     * If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
     */
    recordWithSchema?: boolean;
    /**
     * MariaDB connection Id.
     */
    resource: string;
    /**
     * schema_only|initial, default initial.
     */
    snapshotMode?: string;
    /**
     * MariaDB db name, *is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name.
     */
    table: string;
}

export interface CkafkaDatahubTaskSourceResourceMongoDbParam {
    /**
     * MongoDB collection.
     */
    collection: string;
    /**
     * Whether to copy the stock data, the default parameter is true.
     */
    copyExisting: boolean;
    /**
     * MongoDB database name.
     */
    database: string;
    /**
     * Mongo DB connection ip.
     */
    ip?: string;
    /**
     * Listening event type, if it is empty, it means select all. Values include insert, update, replace, delete, invalidate, drop, dropdatabase, rename, used between multiple types, separated by commas.
     */
    listeningEvent?: string;
    /**
     * MongoDB database password.
     */
    password?: string;
    /**
     * aggregation pipeline.
     */
    pipeline?: string;
    /**
     * MongoDB connection port.
     */
    port?: number;
    /**
     * Master-slave priority, default master node.
     */
    readPreference?: string;
    /**
     * resource id.
     */
    resource: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt?: boolean;
    /**
     * MongoDB database user name.
     */
    userName?: string;
}

export interface CkafkaDatahubTaskSourceResourceMySqlParam {
    /**
     * The name of the column to be monitored.
     */
    dataSourceIncrementColumn?: string;
    /**
     * TIMESTAMP indicates that the incremental column is of timestamp type, INCREMENT indicates that the incremental column is of self-incrementing id type&#39;.
     */
    dataSourceIncrementMode?: string;
    /**
     * TABLE indicates that the read item is a table, QUERY indicates that the read item is a query.
     */
    dataSourceMonitorMode?: string;
    /**
     * When DataMonitorMode=TABLE, pass in the Table that needs to be read; when DataMonitorMode=QUERY, pass in the query sql statement that needs to be read.
     */
    dataSourceMonitorResource?: string;
    /**
     * HEAD means copy stock + incremental data, TAIL means copy only incremental data.
     */
    dataSourceStartFrom?: string;
    /**
     * INSERT means insert using Insert mode, UPSERT means insert using Upsert mode.
     */
    dataTargetInsertMode?: string;
    /**
     * When DataInsertMode=UPSERT, pass in the primary key that the current upsert depends on.
     */
    dataTargetPrimaryKeyField?: string;
    /**
     * Mapping relationship between tables and messages.
     */
    dataTargetRecordMappings?: outputs.CkafkaDatahubTaskSourceResourceMySqlParamDataTargetRecordMapping[];
    /**
     * MySQL database name, * is the whole database.
     */
    database: string;
    /**
     * The Topic that stores the Ddl information of My SQL, if it is empty, it will not be stored by default.
     */
    ddlTopic?: string;
    /**
     * When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
     */
    dropCls?: outputs.CkafkaDatahubTaskSourceResourceMySqlParamDropCls;
    /**
     * Whether to discard messages that fail to parse, the default is true.
     */
    dropInvalidMessage?: boolean;
    /**
     * If the value is all, DDL data and DML data will also be written to the selected topic; if the value is dml, only DML data will be written to the selected topic.
     */
    includeContentChanges?: string;
    /**
     * If the value is true, and the value of the binlog rows query log events configuration item in My SQL is ON, the data flowing into the topic contains the original SQL statement; if the value is false, the data flowing into the topic does not contain Original SQL statement.
     */
    includeQuery?: boolean;
    /**
     * When the Table input is a prefix, the value of this item is true, otherwise it is false.
     */
    isTablePrefix?: boolean;
    /**
     * Whether the input table is a regular expression, if this option and Is Table Prefix are true at the same time, the judgment priority of this option is higher than Is Table Prefix.
     */
    isTableRegular?: boolean;
    /**
     * Format library1.table1 field 1,field 2;library 2.table2 field 2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
     */
    keyColumns?: string;
    /**
     * output format, DEFAULT, CANAL_1, CANAL_2.
     */
    outputFormat?: string;
    /**
     * If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
     */
    recordWithSchema?: boolean;
    /**
     * MySQL connection Id.
     */
    resource: string;
    /**
     * database name of signal table.
     */
    signalDatabase?: string;
    /**
     * whether to Copy inventory information (schema_only does not copy, initial full amount), the default is initial.
     */
    snapshotMode?: string;
    /**
     * The name of the MySQL data table,  is the non-system table in all the monitored databases, which can be separated by, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name, when a regular expression needs to be filled in, the format is data database name.data table name.
     */
    table: string;
    /**
     * Regular expression for routing events to specific topics, defaults to (.*).
     */
    topicRegex?: string;
    /**
     * TopicRegex, $1, $2.
     */
    topicReplacement?: string;
}

export interface CkafkaDatahubTaskSourceResourceMySqlParamDataTargetRecordMapping {
    /**
     * Whether the message is allowed to be empty.
     */
    allowNull?: boolean;
    /**
     * Whether it is an auto-increment column.
     */
    autoIncrement?: boolean;
    /**
     * Corresponding mapping column name.
     */
    columnName?: string;
    /**
     * current column size.
     */
    columnSize?: string;
    /**
     * current column precision.
     */
    decimalDigits?: string;
    /**
     * Database table default parameters.
     */
    defaultValue?: string;
    /**
     * Database table extra fields.
     */
    extraInfo?: string;
    /**
     * The key name of the message.
     */
    jsonKey?: string;
    /**
     * message type.
     */
    type?: string;
}

export interface CkafkaDatahubTaskSourceResourceMySqlParamDropCls {
    /**
     * cls LogSet id.
     */
    dropClsLogSet?: string;
    /**
     * account.
     */
    dropClsOwneruin?: string;
    /**
     * The region where the cls is delivered.
     */
    dropClsRegion?: string;
    /**
     * cls topic.
     */
    dropClsTopicId?: string;
    /**
     * Whether to deliver to cls.
     */
    dropInvalidMessageToCls?: boolean;
}

export interface CkafkaDatahubTaskSourceResourcePostgreSqlParam {
    /**
     * Upstream data format (JSON|Debezium), required when the database synchronization mode matches the default field.
     */
    dataFormat?: string;
    /**
     * INSERT means insert using Insert mode, UPSERT means insert using Upsert mode.
     */
    dataTargetInsertMode?: string;
    /**
     * When DataInsertMode=UPSERT, pass in the primary key that the current upsert depends on.
     */
    dataTargetPrimaryKeyField?: string;
    /**
     * Mapping relationship between tables and messages.
     */
    dataTargetRecordMappings?: outputs.CkafkaDatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMapping[];
    /**
     * PostgreSQL database name.
     */
    database: string;
    /**
     * Whether to discard messages that fail to parse, the default is true.
     */
    dropInvalidMessage?: boolean;
    /**
     * Whether the input table is a regular expression.
     */
    isTableRegular?: boolean;
    /**
     * Format  library1.table1:field 1,field2;library2.table2:field2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
     */
    keyColumns?: string;
    /**
     * (decoderbufs/pgoutput), default decoderbufs.
     */
    pluginName: string;
    /**
     * If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
     */
    recordWithSchema?: boolean;
    /**
     * PostgreSQL connection Id.
     */
    resource: string;
    /**
     * never|initial, default initial.
     */
    snapshotMode?: string;
    /**
     * PostgreSQL tableName, * is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of Schema name.Data table name, and you need to fill in a regular expression When, the format is Schema name.data table name.
     */
    table: string;
}

export interface CkafkaDatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMapping {
    /**
     * Whether the message is allowed to be empty.
     */
    allowNull?: boolean;
    /**
     * Whether it is an auto-increment column.
     */
    autoIncrement?: boolean;
    /**
     * Column Name.
     */
    columnName?: string;
    /**
     * current ColumnSize.
     */
    columnSize?: string;
    /**
     * current Column DecimalDigits.
     */
    decimalDigits?: string;
    /**
     * Database table default parameters.
     */
    defaultValue?: string;
    /**
     * Database table extra fields.
     */
    extraInfo?: string;
    /**
     * The key name of the message.
     */
    jsonKey?: string;
    /**
     * message type.
     */
    type?: string;
}

export interface CkafkaDatahubTaskSourceResourceScfParam {
    /**
     * The maximum number of messages sent in each batch, the default is 1000.
     */
    batchSize?: number;
    /**
     * SCF function name.
     */
    functionName: string;
    /**
     * The number of retries after the SCF call fails, the default is 5.
     */
    maxRetries?: number;
    /**
     * SCF cloud function namespace, the default is default.
     */
    namespace?: string;
    /**
     * SCF cloud function version and alias, the default is DEFAULT.
     */
    qualifier?: string;
}

export interface CkafkaDatahubTaskSourceResourceSqlServerParam {
    /**
     * SQLServer database name.
     */
    database: string;
    /**
     * SQLServer connection Id.
     */
    resource: string;
    /**
     * schema_only|initial default initial.
     */
    snapshotMode?: string;
    /**
     * SQLServer table, *is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name.
     */
    table: string;
}

export interface CkafkaDatahubTaskSourceResourceTdwParam {
    /**
     * Tdw bid.
     */
    bid: string;
    /**
     * default true.
     */
    isDomestic?: boolean;
    /**
     * TDW address, defalt tl-tdbank-tdmanager.tencent-distribute.com.
     */
    tdwHost?: string;
    /**
     * TDW port, default 8099.
     */
    tdwPort?: number;
    /**
     * Tdw tid.
     */
    tid: string;
}

export interface CkafkaDatahubTaskSourceResourceTopicParam {
    /**
     * Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
     */
    compressionType?: string;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * The topic name of the topic sold separately.
     */
    resource: string;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * Topic TopicId.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
     */
    useAutoCreateTopic?: boolean;
}

export interface CkafkaDatahubTaskTargetResource {
    /**
     * ClickHouse config, Type CLICKHOUSE requierd.
     */
    clickHouseParam?: outputs.CkafkaDatahubTaskTargetResourceClickHouseParam;
    /**
     * Cls configuration, Required when Type is CLS.
     */
    clsParam?: outputs.CkafkaDatahubTaskTargetResourceClsParam;
    /**
     * Cos configuration, required when Type is COS.
     */
    cosParam?: outputs.CkafkaDatahubTaskTargetResourceCosParam;
    /**
     * Ctsdb configuration, Required when Type is CTSDB.
     */
    ctsdbParam?: outputs.CkafkaDatahubTaskTargetResourceCtsdbParam;
    /**
     * Dts configuration, required when Type is DTS.
     */
    dtsParam?: outputs.CkafkaDatahubTaskTargetResourceDtsParam;
    /**
     * Es configuration, required when Type is ES.
     */
    esParam?: outputs.CkafkaDatahubTaskTargetResourceEsParam;
    /**
     * EB configuration, required when type is EB.
     */
    eventBusParam?: outputs.CkafkaDatahubTaskTargetResourceEventBusParam;
    /**
     * ckafka configuration, required when Type is KAFKA.
     */
    kafkaParam?: outputs.CkafkaDatahubTaskTargetResourceKafkaParam;
    /**
     * MariaDB configuration, Required when Type is MARIADB.
     */
    mariaDbParam?: outputs.CkafkaDatahubTaskTargetResourceMariaDbParam;
    /**
     * MongoDB config, Required when Type is MONGODB.
     */
    mongoDbParam?: outputs.CkafkaDatahubTaskTargetResourceMongoDbParam;
    /**
     * MySQL configuration, Required when Type is MYSQL.
     */
    mySqlParam?: outputs.CkafkaDatahubTaskTargetResourceMySqlParam;
    /**
     * PostgreSQL configuration, Required when Type is POSTGRESQL or TDSQL C_POSTGRESQL.
     */
    postgreSqlParam?: outputs.CkafkaDatahubTaskTargetResourcePostgreSqlParam;
    /**
     * Scf configuration, Required when Type is SCF.
     */
    scfParam?: outputs.CkafkaDatahubTaskTargetResourceScfParam;
    /**
     * SQLServer configuration, Required when Type is SQLSERVER.
     */
    sqlServerParam?: outputs.CkafkaDatahubTaskTargetResourceSqlServerParam;
    /**
     * Tdw configuration, required when Type is TDW.
     */
    tdwParam?: outputs.CkafkaDatahubTaskTargetResourceTdwParam;
    /**
     * Topic configuration, Required when Type is Topic.
     */
    topicParam?: outputs.CkafkaDatahubTaskTargetResourceTopicParam;
    /**
     * Resource Type.
     */
    type: string;
}

export interface CkafkaDatahubTaskTargetResourceClickHouseParam {
    /**
     * ClickHouse cluster.
     */
    cluster: string;
    /**
     * ClickHouse database name.
     */
    database: string;
    /**
     * When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
     */
    dropCls?: outputs.CkafkaDatahubTaskTargetResourceClickHouseParamDropCls;
    /**
     * Whether ClickHouse discards the message that fails to parse, the default is true.
     */
    dropInvalidMessage?: boolean;
    /**
     * ClickHouse ip.
     */
    ip?: string;
    /**
     * ClickHouse passwd.
     */
    password?: string;
    /**
     * ClickHouse port.
     */
    port?: number;
    /**
     * resource id.
     */
    resource: string;
    /**
     * ClickHouse schema.
     */
    schemas: outputs.CkafkaDatahubTaskTargetResourceClickHouseParamSchema[];
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt?: boolean;
    /**
     * instance vip.
     */
    serviceVip?: string;
    /**
     * ClickHouse table.
     */
    table: string;
    /**
     * ClickHouse type, emr-clickhouse: emr;cdw-clickhouse: cdwch;selfBuilt: ``.
     */
    type?: string;
    /**
     * instance vpc id.
     */
    uniqVpcId?: string;
    /**
     * ClickHouse user name.
     */
    userName?: string;
}

export interface CkafkaDatahubTaskTargetResourceClickHouseParamDropCls {
    /**
     * cls LogSet id.
     */
    dropClsLogSet?: string;
    /**
     * cls account.
     */
    dropClsOwneruin?: string;
    /**
     * cls region.
     */
    dropClsRegion?: string;
    /**
     * cls topicId.
     */
    dropClsTopicId?: string;
    /**
     * Whether to deliver to cls.
     */
    dropInvalidMessageToCls?: boolean;
}

export interface CkafkaDatahubTaskTargetResourceClickHouseParamSchema {
    /**
     * Whether the column item is allowed to be empty.
     */
    allowNull: boolean;
    /**
     * column name.
     */
    columnName: string;
    /**
     * The json Key name corresponding to this column.
     */
    jsonKey: string;
    /**
     * type of table column.
     */
    type: string;
}

export interface CkafkaDatahubTaskTargetResourceClsParam {
    /**
     * Required when Decode Json is false.
     */
    contentKey?: string;
    /**
     * Whether the produced information is in json format.
     */
    decodeJson: boolean;
    /**
     * LogSet id.
     */
    logSet?: string;
    /**
     * cls id.
     */
    resource: string;
    /**
     * Specify the content of a field in the message as the time of the cls log. The format of the field content needs to be a second-level timestamp.
     */
    timeField?: string;
}

export interface CkafkaDatahubTaskTargetResourceCosParam {
    /**
     * The size of aggregated messages MB.
     */
    aggregateBatchSize?: number;
    /**
     * time interval.
     */
    aggregateInterval?: number;
    /**
     * cos bucket name.
     */
    bucketName: string;
    /**
     * Partition format formatted according to strptime time.
     */
    directoryTimeFormat?: string;
    /**
     * The file format after message aggregation csv|json.
     */
    formatOutputType?: string;
    /**
     * ObjectKey.
     */
    objectKey?: string;
    /**
     * Dumped object directory prefix.
     */
    objectKeyPrefix?: string;
    /**
     * region code.
     */
    region: string;
}

export interface CkafkaDatahubTaskTargetResourceCtsdbParam {
    /**
     * Ctsdb metric.
     */
    ctsdbMetric?: string;
    /**
     * resource id.
     */
    resource?: string;
}

export interface CkafkaDatahubTaskTargetResourceDtsParam {
    /**
     * Dts consumer group Id.
     */
    groupId?: string;
    /**
     * Dts consumer group passwd.
     */
    groupPassword?: string;
    /**
     * Dts account.
     */
    groupUser?: string;
    /**
     * Dts connection ip.
     */
    ip?: string;
    /**
     * Dts connection port.
     */
    port?: number;
    /**
     * Dts instance Id.
     */
    resource: string;
    /**
     * Dts topic.
     */
    topic?: string;
    /**
     * False to synchronize the original data, true to synchronize the parsed json format data, the default is true.
     */
    tranSql?: boolean;
}

export interface CkafkaDatahubTaskTargetResourceEsParam {
    /**
     * key for data in non-json format.
     */
    contentKey?: string;
    /**
     * When the message dumped to ES is the binlog of Database, if you need to synchronize database operations, that is, fill in the primary key of the database table when adding, deleting, and modifying operations to ES.
     */
    databasePrimaryKey?: string;
    /**
     * Es date suffix.
     */
    dateFormat?: string;
    /**
     * The field name of the document ID value dumped into Es.
     */
    documentIdField?: string;
    /**
     * When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
     */
    dropCls?: outputs.CkafkaDatahubTaskTargetResourceEsParamDropCls;
    /**
     * dead letter queue.
     */
    dropDlq?: outputs.CkafkaDatahubTaskTargetResourceEsParamDropDlq;
    /**
     * Whether Es discards messages in non-json format.
     */
    dropInvalidJsonMessage?: boolean;
    /**
     * Whether Es discards the message of parsing failure.
     */
    dropInvalidMessage?: boolean;
    /**
     * Es index name.
     */
    index?: string;
    /**
     * Es custom index name type, STRING, JSONPATH, the default is STRING.
     */
    indexType?: string;
    /**
     * Es Password.
     */
    password?: string;
    /**
     * Es connection port.
     */
    port?: number;
    /**
     * Resource.
     */
    resource: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt?: boolean;
    /**
     * instance vip.
     */
    serviceVip?: string;
    /**
     * instance vpc id.
     */
    uniqVpcId?: string;
    /**
     * Es UserName.
     */
    userName?: string;
}

export interface CkafkaDatahubTaskTargetResourceEsParamDropCls {
    /**
     * cls log set.
     */
    dropClsLogSet?: string;
    /**
     * Delivery account of cls.
     */
    dropClsOwneruin?: string;
    /**
     * The region where the cls is delivered.
     */
    dropClsRegion?: string;
    /**
     * topic of cls.
     */
    dropClsTopicId?: string;
    /**
     * Whether to deliver to cls.
     */
    dropInvalidMessageToCls?: boolean;
}

export interface CkafkaDatahubTaskTargetResourceEsParamDropDlq {
    /**
     * dlq type, CKAFKA|TOPIC.
     */
    dlqType?: string;
    /**
     * Ckafka type dlq.
     */
    kafkaParam?: outputs.CkafkaDatahubTaskTargetResourceEsParamDropDlqKafkaParam;
    /**
     * retry times.
     */
    maxRetryAttempts?: number;
    /**
     * retry interval.
     */
    retryInterval?: number;
    /**
     * DIP Topic type dead letter queue.
     */
    topicParam?: outputs.CkafkaDatahubTaskTargetResourceEsParamDropDlqTopicParam;
    /**
     * type, DLQ dead letter queue, IGNORE_ERROR|DROP.
     */
    type: string;
}

export interface CkafkaDatahubTaskTargetResourceEsParamDropDlqKafkaParam {
    /**
     * Whether to compress when writing to the Topic, if it is not enabled, fill in none, if it is enabled, fill in open.
     */
    compressionType?: string;
    /**
     * Enable the fault-tolerant instance and enable the dead-letter queue.
     */
    enableToleration?: boolean;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * Partition num.
     */
    partitionNum?: number;
    /**
     * Qps limit.
     */
    qpsLimit?: number;
    /**
     * resource id.
     */
    resource: string;
    /**
     * resource id name.
     */
    resourceName?: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * The route from Table to Topic must be passed when the Distribute to multiple topics switch is turned on.
     */
    tableMappings?: outputs.CkafkaDatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMapping[];
    /**
     * Topic name, multiple separated by,.
     */
    topic?: string;
    /**
     * Topic Id.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks, if you do not use to distribute to multiple topics, you need to fill in the topic name that needs to be automatically created in the Topic field).
     */
    useAutoCreateTopic?: boolean;
    /**
     * Distribute to multiple topics switch, the default is false.
     */
    useTableMapping?: boolean;
    /**
     * Zone ID.
     */
    zoneId?: number;
}

export interface CkafkaDatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMapping {
    /**
     * database name.
     */
    database: string;
    /**
     * Table name, multiple tables, separated by (commas).
     */
    table: string;
    /**
     * Topic name.
     */
    topic: string;
    /**
     * Topic ID.
     */
    topicId: string;
}

export interface CkafkaDatahubTaskTargetResourceEsParamDropDlqTopicParam {
    /**
     * Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
     */
    compressionType?: string;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * The topic name of the topic sold separately.
     */
    resource: string;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * TopicId.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
     */
    useAutoCreateTopic?: boolean;
}

export interface CkafkaDatahubTaskTargetResourceEventBusParam {
    /**
     * SCF function name.
     */
    functionName?: string;
    /**
     * SCF namespace.
     */
    namespace?: string;
    /**
     * SCF version and alias.
     */
    qualifier?: string;
    /**
     * instance id.
     */
    resource: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * resource type. EB_COS/EB_ES/EB_CLS.
     */
    type: string;
}

export interface CkafkaDatahubTaskTargetResourceKafkaParam {
    /**
     * Whether to compress when writing to the Topic, if it is not enabled, fill in none, if it is enabled, fill in open.
     */
    compressionType?: string;
    /**
     * enable dead letter queue.
     */
    enableToleration?: boolean;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, from beginning:earliest, from latest:latest, from specific time:timestamp.
     */
    offsetType?: string;
    /**
     * the partition num of the topic.
     */
    partitionNum?: number;
    /**
     * Qps(query per seconds) limit.
     */
    qpsLimit?: number;
    /**
     * instance resource.
     */
    resource: string;
    /**
     * instance name.
     */
    resourceName?: string;
    /**
     * whether the cluster is built by yourself instead of cloud product.
     */
    selfBuilt: boolean;
    /**
     * when Offset type timestamp is required.
     */
    startTime?: number;
    /**
     * maps of table to topic, required when multi topic is selected.
     */
    tableMappings?: outputs.CkafkaDatahubTaskTargetResourceKafkaParamTableMapping[];
    /**
     * Topic name, use `,` when more than 1 topic.
     */
    topic?: string;
    /**
     * Topic id.
     */
    topicId?: string;
    /**
     * Does the used topic need to be automatically created (currently only supports SOURCE inflow tasks, if you do not use to distribute to multiple topics, you need to fill in the topic name that needs to be automatically created in the Topic field).
     */
    useAutoCreateTopic?: boolean;
    /**
     * whether to use multi table.
     */
    useTableMapping?: boolean;
    /**
     * Zone ID.
     */
    zoneId?: number;
}

export interface CkafkaDatahubTaskTargetResourceKafkaParamTableMapping {
    /**
     * database name.
     */
    database: string;
    /**
     * table name,use, to separate.
     */
    table: string;
    /**
     * Topic name.
     */
    topic: string;
    /**
     * Topic ID.
     */
    topicId: string;
}

export interface CkafkaDatahubTaskTargetResourceMariaDbParam {
    /**
     * MariaDB database name, * for all database.
     */
    database: string;
    /**
     * If the value is all, DDL data and DML data will also be written to the selected topic; if the value is dml, only DML data will be written to the selected topic.
     */
    includeContentChanges?: string;
    /**
     * If the value is true, and the value of the binlog rows query log events configuration item in My SQL is ON, the data flowing into the topic contains the original SQL statement; if the value is false, the data flowing into the topic does not contain Original SQL statement.
     */
    includeQuery?: boolean;
    /**
     * When the Table input is a prefix, the value of this item is true, otherwise it is false.
     */
    isTablePrefix?: boolean;
    /**
     * Format  library 1. table 1: field 1, field 2; library 2. table 2: field 2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
     */
    keyColumns?: string;
    /**
     * output format, DEFAULT, CANAL_1, CANAL_2.
     */
    outputFormat?: string;
    /**
     * If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
     */
    recordWithSchema?: boolean;
    /**
     * MariaDB connection Id.
     */
    resource: string;
    /**
     * schema_only|initial, default initial.
     */
    snapshotMode?: string;
    /**
     * MariaDB db name, *is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name.
     */
    table: string;
}

export interface CkafkaDatahubTaskTargetResourceMongoDbParam {
    /**
     * MongoDB collection.
     */
    collection: string;
    /**
     * Whether to copy the stock data, the default parameter is true.
     */
    copyExisting: boolean;
    /**
     * MongoDB database name.
     */
    database: string;
    /**
     * Mongo DB connection ip.
     */
    ip?: string;
    /**
     * Listening event type, if it is empty, it means select all. Values include insert, update, replace, delete, invalidate, drop, dropdatabase, rename, used between multiple types, separated by commas.
     */
    listeningEvent?: string;
    /**
     * MongoDB database password.
     */
    password?: string;
    /**
     * aggregation pipeline.
     */
    pipeline?: string;
    /**
     * MongoDB connection port.
     */
    port?: number;
    /**
     * Master-slave priority, default master node.
     */
    readPreference?: string;
    /**
     * resource id.
     */
    resource: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt?: boolean;
    /**
     * MongoDB database user name.
     */
    userName?: string;
}

export interface CkafkaDatahubTaskTargetResourceMySqlParam {
    /**
     * the name of the column to be monitored.
     */
    dataSourceIncrementColumn?: string;
    /**
     * TIMESTAMP indicates that the incremental column is of timestamp type, INCREMENT indicates that the incremental column is of self-incrementing id type.
     */
    dataSourceIncrementMode?: string;
    /**
     * TABLE indicates that the read item is a table, QUERY indicates that the read item is a query.
     */
    dataSourceMonitorMode?: string;
    /**
     * When DataMonitorMode=TABLE, pass in the Table that needs to be read; when DataMonitorMode=QUERY, pass in the query sql statement that needs to be read.
     */
    dataSourceMonitorResource?: string;
    /**
     * HEAD means copy stock + incremental data, TAIL means copy only incremental data.
     */
    dataSourceStartFrom?: string;
    /**
     * INSERT means insert using Insert mode, UPSERT means insert using Upsert mode.
     */
    dataTargetInsertMode?: string;
    /**
     * When DataInsertMode=UPSERT, pass in the primary key that the current upsert depends on.
     */
    dataTargetPrimaryKeyField?: string;
    /**
     * Mapping relationship between tables and messages.
     */
    dataTargetRecordMappings?: outputs.CkafkaDatahubTaskTargetResourceMySqlParamDataTargetRecordMapping[];
    /**
     * MySQL database name, * is the whole database.
     */
    database: string;
    /**
     * The Topic that stores the Ddl information of My SQL, if it is empty, it will not be stored by default.
     */
    ddlTopic?: string;
    /**
     * When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
     */
    dropCls?: outputs.CkafkaDatahubTaskTargetResourceMySqlParamDropCls;
    /**
     * Whether to discard messages that fail to parse, the default is true.
     */
    dropInvalidMessage?: boolean;
    /**
     * If the value is all, DDL data and DML data will also be written to the selected topic; if the value is dml, only DML data will be written to the selected topic.
     */
    includeContentChanges?: string;
    /**
     * If the value is true, and the value of the binlog rows query log events configuration item in My SQL is ON, the data flowing into the topic contains the original SQL statement; if the value is false, the data flowing into the topic does not contain Original SQL statement.
     */
    includeQuery?: boolean;
    /**
     * When the Table input is a prefix, the value of this item is true, otherwise it is false.
     */
    isTablePrefix?: boolean;
    /**
     * Whether the input table is a regular expression, if this option and Is Table Prefix are true at the same time, the judgment priority of this option is higher than Is Table Prefix.
     */
    isTableRegular?: boolean;
    /**
     * Format library1.table1 field 1,field 2;library 2.table2 field 2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
     */
    keyColumns?: string;
    /**
     * output format, DEFAULT, CANAL_1, CANAL_2.
     */
    outputFormat?: string;
    /**
     * If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
     */
    recordWithSchema?: boolean;
    /**
     * MySQL connection Id.
     */
    resource: string;
    /**
     * database name of signal table.
     */
    signalDatabase?: string;
    /**
     * whether to Copy inventory information (schema_only does not copy, initial full amount), the default is initial.
     */
    snapshotMode?: string;
    /**
     * The name of the MySQL data table,  is the non-system table in all the monitored databases, which can be separated by, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name, when a regular expression needs to be filled in, the format is data database name.data table name.
     */
    table: string;
    /**
     * Regular expression for routing events to specific topics, defaults to (.*).
     */
    topicRegex?: string;
    /**
     * TopicRegex, $1, $2.
     */
    topicReplacement?: string;
}

export interface CkafkaDatahubTaskTargetResourceMySqlParamDataTargetRecordMapping {
    /**
     * Whether the message is allowed to be empty.
     */
    allowNull?: boolean;
    /**
     * Whether it is an auto-increment column.
     */
    autoIncrement?: boolean;
    /**
     * Corresponding mapping column name.
     */
    columnName?: string;
    /**
     * current column size.
     */
    columnSize?: string;
    /**
     * current column precision.
     */
    decimalDigits?: string;
    /**
     * Database table default parameters.
     */
    defaultValue?: string;
    /**
     * Database table extra fields.
     */
    extraInfo?: string;
    /**
     * The key name of the message.
     */
    jsonKey?: string;
    /**
     * message type.
     */
    type?: string;
}

export interface CkafkaDatahubTaskTargetResourceMySqlParamDropCls {
    /**
     * cls LogSet id.
     */
    dropClsLogSet?: string;
    /**
     * account.
     */
    dropClsOwneruin?: string;
    /**
     * The region where the cls is delivered.
     */
    dropClsRegion?: string;
    /**
     * cls topic.
     */
    dropClsTopicId?: string;
    /**
     * Whether to deliver to cls.
     */
    dropInvalidMessageToCls?: boolean;
}

export interface CkafkaDatahubTaskTargetResourcePostgreSqlParam {
    /**
     * Upstream data format (JSON|Debezium), required when the database synchronization mode matches the default field.
     */
    dataFormat?: string;
    /**
     * INSERT means insert using Insert mode, UPSERT means insert using Upsert mode.
     */
    dataTargetInsertMode?: string;
    /**
     * When DataInsertMode=UPSERT, pass in the primary key that the current upsert depends on.
     */
    dataTargetPrimaryKeyField?: string;
    /**
     * Mapping relationship between tables and messages.
     */
    dataTargetRecordMappings?: outputs.CkafkaDatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMapping[];
    /**
     * PostgreSQL database name.
     */
    database: string;
    /**
     * Whether to discard messages that fail to parse, the default is true.
     */
    dropInvalidMessage?: boolean;
    /**
     * Whether the input table is a regular expression.
     */
    isTableRegular?: boolean;
    /**
     * Format  library1.table1:field 1,field2;library2.table2:field2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
     */
    keyColumns?: string;
    /**
     * (decoderbufs/pgoutput), default decoderbufs.
     */
    pluginName: string;
    /**
     * If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
     */
    recordWithSchema?: boolean;
    /**
     * PostgreSQL connection Id.
     */
    resource: string;
    /**
     * never|initial, default initial.
     */
    snapshotMode?: string;
    /**
     * PostgreSQL tableName, * is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of Schema name.Data table name, and you need to fill in a regular expression When, the format is Schema name.data table name.
     */
    table: string;
}

export interface CkafkaDatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMapping {
    /**
     * Whether the message is allowed to be empty.
     */
    allowNull?: boolean;
    /**
     * Whether it is an auto-increment column.
     */
    autoIncrement?: boolean;
    /**
     * Column Name.
     */
    columnName?: string;
    /**
     * current ColumnSize.
     */
    columnSize?: string;
    /**
     * current Column DecimalDigits.
     */
    decimalDigits?: string;
    /**
     * Database table default parameters.
     */
    defaultValue?: string;
    /**
     * Database table extra fields.
     */
    extraInfo?: string;
    /**
     * The key name of the message.
     */
    jsonKey?: string;
    /**
     * message type.
     */
    type?: string;
}

export interface CkafkaDatahubTaskTargetResourceScfParam {
    /**
     * The maximum number of messages sent in each batch, the default is 1000.
     */
    batchSize?: number;
    /**
     * SCF function name.
     */
    functionName: string;
    /**
     * The number of retries after the SCF call fails, the default is 5.
     */
    maxRetries?: number;
    /**
     * SCF cloud function namespace, the default is default.
     */
    namespace?: string;
    /**
     * SCF cloud function version and alias, the default is DEFAULT.
     */
    qualifier?: string;
}

export interface CkafkaDatahubTaskTargetResourceSqlServerParam {
    /**
     * SQLServer database name.
     */
    database: string;
    /**
     * SQLServer connection Id.
     */
    resource: string;
    /**
     * schema_only|initial default initial.
     */
    snapshotMode?: string;
    /**
     * SQLServer table, *is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name.
     */
    table: string;
}

export interface CkafkaDatahubTaskTargetResourceTdwParam {
    /**
     * Tdw bid.
     */
    bid: string;
    /**
     * default true.
     */
    isDomestic?: boolean;
    /**
     * TDW address, defalt tl-tdbank-tdmanager.tencent-distribute.com.
     */
    tdwHost?: string;
    /**
     * TDW port, default 8099.
     */
    tdwPort?: number;
    /**
     * Tdw tid.
     */
    tid: string;
}

export interface CkafkaDatahubTaskTargetResourceTopicParam {
    /**
     * Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
     */
    compressionType?: string;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * The topic name of the topic sold separately.
     */
    resource: string;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * Topic TopicId.
     */
    topicId: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
     */
    useAutoCreateTopic?: boolean;
}

export interface CkafkaDatahubTaskTransformParam {
    /**
     * Analysis result.
     */
    analyseResults?: outputs.CkafkaDatahubTaskTransformParamAnalyseResult[];
    /**
     * parsing format, JSON | DELIMITER| REGULAR.
     */
    analysisFormat: string;
    /**
     * Raw data.
     */
    content: string;
    /**
     * Whether to keep parsing failure data.
     */
    failureParam: outputs.CkafkaDatahubTaskTransformParamFailureParam;
    /**
     * filter.
     */
    filterParams?: outputs.CkafkaDatahubTaskTransformParamFilterParam[];
    /**
     * Map.
     */
    mapParams?: outputs.CkafkaDatahubTaskTransformParamMapParam[];
    /**
     * output format.
     */
    outputFormat: string;
    /**
     * delimiter, regular expression.
     */
    regex?: string;
    /**
     * Test Results.
     */
    result?: string;
    /**
     * Data source, TOPIC pulls from the source topic, CUSTOMIZE custom.
     */
    sourceType: string;
    /**
     * Whether the underlying engine uses eb.
     */
    useEventBus?: boolean;
}

export interface CkafkaDatahubTaskTransformParamAnalyseResult {
    /**
     * key.
     */
    key: string;
    /**
     * Type, DEFAULT default, DATE system default - timestamp, CUSTOMIZE custom, MAPPING mapping.
     */
    type?: string;
    /**
     * value.
     */
    value?: string;
}

export interface CkafkaDatahubTaskTransformParamFailureParam {
    /**
     * dlq type, CKAFKA|TOPIC.
     */
    dlqType?: string;
    /**
     * Ckafka type dlq.
     */
    kafkaParam?: outputs.CkafkaDatahubTaskTransformParamFailureParamKafkaParam;
    /**
     * retry times.
     */
    maxRetryAttempts?: number;
    /**
     * retry interval.
     */
    retryInterval?: number;
    /**
     * DIP Topic type dead letter queue.
     */
    topicParam?: outputs.CkafkaDatahubTaskTransformParamFailureParamTopicParam;
    /**
     * type, DLQ dead letter queue, IGNORE_ERROR|DROP.
     */
    type: string;
}

export interface CkafkaDatahubTaskTransformParamFailureParamKafkaParam {
    /**
     * Whether to compress when writing to the Topic, if it is not enabled, fill in none, if it is enabled, fill in open.
     */
    compressionType?: string;
    /**
     * Enable the fault-tolerant instance and enable the dead-letter queue.
     */
    enableToleration?: boolean;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * Partition num.
     */
    partitionNum?: number;
    /**
     * Qps limit.
     */
    qpsLimit?: number;
    /**
     * resource id.
     */
    resource: string;
    /**
     * resource id name.
     */
    resourceName?: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * The route from Table to Topic must be passed when the Distribute to multiple topics switch is turned on.
     */
    tableMappings?: outputs.CkafkaDatahubTaskTransformParamFailureParamKafkaParamTableMapping[];
    /**
     * Topic name, multiple separated by,.
     */
    topic?: string;
    /**
     * Topic Id.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks, if you do not use to distribute to multiple topics, you need to fill in the topic name that needs to be automatically created in the Topic field).
     */
    useAutoCreateTopic?: boolean;
    /**
     * Distribute to multiple topics switch, the default is false.
     */
    useTableMapping?: boolean;
    /**
     * Zone ID.
     */
    zoneId?: number;
}

export interface CkafkaDatahubTaskTransformParamFailureParamKafkaParamTableMapping {
    /**
     * database name.
     */
    database: string;
    /**
     * Table name, multiple tables, separated by (commas).
     */
    table: string;
    /**
     * Topic name.
     */
    topic: string;
    /**
     * Topic ID.
     */
    topicId: string;
}

export interface CkafkaDatahubTaskTransformParamFailureParamTopicParam {
    /**
     * Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
     */
    compressionType?: string;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * The topic name of the topic sold separately.
     */
    resource: string;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * TopicId.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
     */
    useAutoCreateTopic?: boolean;
}

export interface CkafkaDatahubTaskTransformParamFilterParam {
    /**
     * Key.
     */
    key: string;
    /**
     * Matching mode, prefix matches PREFIX, suffix matches SUFFIX, contains matches CONTAINS, except matches EXCEPT, value matches NUMBER, IP matches IP.
     */
    matchMode: string;
    /**
     * REGULAR.
     */
    type?: string;
    /**
     * Value.
     */
    value: string;
}

export interface CkafkaDatahubTaskTransformParamMapParam {
    /**
     * key.
     */
    key: string;
    /**
     * Type, DEFAULT default, DATE system default - timestamp, CUSTOMIZE custom, MAPPING mapping.
     */
    type?: string;
    /**
     * value.
     */
    value?: string;
}

export interface CkafkaDatahubTaskTransformsParam {
    /**
     * data process.
     */
    batchAnalyse?: outputs.CkafkaDatahubTaskTransformsParamBatchAnalyse;
    /**
     * Raw data.
     */
    content: string;
    /**
     * fail process.
     */
    failureParam?: outputs.CkafkaDatahubTaskTransformsParamFailureParam;
    /**
     * processing chain.
     */
    fieldChains: outputs.CkafkaDatahubTaskTransformsParamFieldChain[];
    /**
     * filter.
     */
    filterParams?: outputs.CkafkaDatahubTaskTransformsParamFilterParam[];
    /**
     * Whether to keep the data source Topic metadata information (source Topic, Partition, Offset), the default is false.
     */
    keepMetadata?: boolean;
    /**
     * output format, JSON, ROW, default JSON.
     */
    outputFormat?: string;
    /**
     * result.
     */
    result?: string;
    /**
     * The output format is ROW Required.
     */
    rowParam?: outputs.CkafkaDatahubTaskTransformsParamRowParam;
    /**
     * data source.
     */
    sourceType?: string;
}

export interface CkafkaDatahubTaskTransformsParamBatchAnalyse {
    /**
     * ONE BY ONE single output, MERGE combined output.
     */
    format: string;
}

export interface CkafkaDatahubTaskTransformsParamFailureParam {
    /**
     * dlq type, CKAFKA|TOPIC.
     */
    dlqType?: string;
    /**
     * Ckafka type dlq.
     */
    kafkaParam?: outputs.CkafkaDatahubTaskTransformsParamFailureParamKafkaParam;
    /**
     * retry times.
     */
    maxRetryAttempts?: number;
    /**
     * retry interval.
     */
    retryInterval?: number;
    /**
     * DIP Topic type dead letter queue.
     */
    topicParam?: outputs.CkafkaDatahubTaskTransformsParamFailureParamTopicParam;
    /**
     * type, DLQ dead letter queue, IGNORE_ERROR|DROP.
     */
    type: string;
}

export interface CkafkaDatahubTaskTransformsParamFailureParamKafkaParam {
    /**
     * Whether to compress when writing to the Topic, if it is not enabled, fill in none, if it is enabled, fill in open.
     */
    compressionType?: string;
    /**
     * Enable the fault-tolerant instance and enable the dead-letter queue.
     */
    enableToleration?: boolean;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * Partition num.
     */
    partitionNum?: number;
    /**
     * Qps limit.
     */
    qpsLimit?: number;
    /**
     * resource id.
     */
    resource: string;
    /**
     * resource id name.
     */
    resourceName?: string;
    /**
     * Whether it is a self-built cluster.
     */
    selfBuilt: boolean;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * The route from Table to Topic must be passed when the Distribute to multiple topics switch is turned on.
     */
    tableMappings?: outputs.CkafkaDatahubTaskTransformsParamFailureParamKafkaParamTableMapping[];
    /**
     * Topic name, multiple separated by,.
     */
    topic?: string;
    /**
     * Topic Id.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks, if you do not use to distribute to multiple topics, you need to fill in the topic name that needs to be automatically created in the Topic field).
     */
    useAutoCreateTopic?: boolean;
    /**
     * Distribute to multiple topics switch, the default is false.
     */
    useTableMapping?: boolean;
    /**
     * Zone ID.
     */
    zoneId?: number;
}

export interface CkafkaDatahubTaskTransformsParamFailureParamKafkaParamTableMapping {
    /**
     * database name.
     */
    database: string;
    /**
     * Table name, multiple tables, separated by (commas).
     */
    table: string;
    /**
     * Topic name.
     */
    topic: string;
    /**
     * Topic ID.
     */
    topicId: string;
}

export interface CkafkaDatahubTaskTransformsParamFailureParamTopicParam {
    /**
     * Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
     */
    compressionType?: string;
    /**
     * 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
     */
    msgMultiple?: number;
    /**
     * Offset type, initial position earliest, latest position latest, time point position timestamp.
     */
    offsetType?: string;
    /**
     * The topic name of the topic sold separately.
     */
    resource: string;
    /**
     * It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
     */
    startTime?: number;
    /**
     * TopicId.
     */
    topicId?: string;
    /**
     * whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
     */
    useAutoCreateTopic?: boolean;
}

export interface CkafkaDatahubTaskTransformsParamFieldChain {
    /**
     * analyze.
     */
    analyse: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyse;
    /**
     * Parsing results in JSON format.
     */
    analyseJsonResult?: string;
    /**
     * Analysis result.
     */
    analyseResults?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResult[];
    /**
     * Test Results.
     */
    result?: string;
    /**
     * data processing.
     */
    sMTs?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMT[];
    /**
     * secondary analysis.
     */
    secondaryAnalyse?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyse;
    /**
     * Secondary parsing results in JSON format.
     */
    secondaryAnalyseJsonResult?: string;
    /**
     * Secondary Analysis Results.
     */
    secondaryAnalyseResults?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResult[];
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyse {
    /**
     * Parsing format, JSON, DELIMITER delimiter, REGULAR regular extraction, SOURCE processing all results of the upper layer.
     */
    format: string;
    /**
     * KEY to be processed again - KEY expression.
     */
    inputValue?: string;
    /**
     * KEY to be processed again - mode.
     */
    inputValueType?: string;
    /**
     * delimiter, regular expression.
     */
    regex?: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResult {
    /**
     * KEY.
     */
    key: string;
    /**
     * Operation, DATE system preset - timestamp, CUSTOMIZE customization, MAPPING mapping, JSONPATH.
     */
    operate: string;
    /**
     * OriginalValue.
     */
    originalValue?: string;
    /**
     * data type, ORIGINAL, STRING, INT64, FLOAT64, BOOLEAN, MAP, ARRAY.
     */
    schemeType: string;
    /**
     * VALUE.
     */
    value?: string;
    /**
     * VALUE process.
     */
    valueOperate?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperate;
    /**
     * VALUE process chain.
     */
    valueOperates?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperate[];
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperate {
    /**
     * Time conversion, required when TYPE=DATE.
     */
    date?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDate;
    /**
     * Json Path replacement, must pass when TYPE=JSON PATH REPLACE.
     */
    jsonPathReplace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplace;
    /**
     * Key-value secondary analysis, must be passed when TYPE=KV.
     */
    kV?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKV;
    /**
     * Regular replacement, required when TYPE=REGEX REPLACE.
     */
    regexReplace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplace;
    /**
     * replace, TYPE=REPLACE is required.
     */
    replace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplace;
    /**
     * result.
     */
    result?: string;
    /**
     * The value supports one split and multiple values, required when TYPE=SPLIT.
     */
    split?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplit;
    /**
     * Substr, TYPE=SUBSTR is required.
     */
    substr?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstr;
    /**
     * Processing mode, REPLACE replacement, SUBSTR interception, DATE date conversion, TRIM removal of leading and trailing spaces, REGEX REPLACE regular replacement, URL DECODE, LOWERCASE conversion to lowercase.
     */
    type: string;
    /**
     * Url parsing.
     */
    urlDecode?: outputs.CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecode;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDate {
    /**
     * Time format.
     */
    format?: string;
    /**
     * input type, string|unix.
     */
    targetType?: string;
    /**
     * default GMT+8.
     */
    timeZone?: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplace {
    /**
     * Replacement value, Jsonpath expression or string.
     */
    newValue: string;
    /**
     * Replaced value, Jsonpath expression.
     */
    oldValue: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKV {
    /**
     * delimiter.
     */
    delimiter: string;
    /**
     * Keep the source Key, the default is false not to keep.
     */
    keepOriginalKey?: string;
    /**
     * Key-value secondary analysis delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplace {
    /**
     * new value.
     */
    newValue: string;
    /**
     * Regular.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplace {
    /**
     * new value.
     */
    newValue: string;
    /**
     * been replaced value.
     */
    oldValue: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplit {
    /**
     * delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstr {
    /**
     * cut-off position.
     */
    end: number;
    /**
     * interception starting position.
     */
    start: number;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecode {
    /**
     * code.
     */
    charsetName?: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMT {
    /**
     * KEY.
     */
    key: string;
    /**
     * Operation, DATE system preset - timestamp, CUSTOMIZE customization, MAPPING mapping, JSONPATH.
     */
    operate: string;
    /**
     * OriginalValue.
     */
    originalValue?: string;
    /**
     * data type, ORIGINAL, STRING, INT64, FLOAT64, BOOLEAN, MAP, ARRAY.
     */
    schemeType: string;
    /**
     * VALUE.
     */
    value?: string;
    /**
     * VALUE process.
     */
    valueOperate?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperate;
    /**
     * VALUE process chain.
     */
    valueOperates?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperate[];
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperate {
    /**
     * Time conversion, required when TYPE=DATE.
     */
    date?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateDate;
    /**
     * Json Path replacement, must pass when TYPE=JSON PATH REPLACE.
     */
    jsonPathReplace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplace;
    /**
     * Key-value secondary analysis, must be passed when TYPE=KV.
     */
    kV?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateKV;
    /**
     * Regular replacement, required when TYPE=REGEX REPLACE.
     */
    regexReplace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplace;
    /**
     * replace, TYPE=REPLACE is required.
     */
    replace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateReplace;
    /**
     * result.
     */
    result?: string;
    /**
     * The value supports one split and multiple values, required when TYPE=SPLIT.
     */
    split?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateSplit;
    /**
     * Substr, TYPE=SUBSTR is required.
     */
    substr?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateSubstr;
    /**
     * Processing mode, REPLACE replacement, SUBSTR interception, DATE date conversion, TRIM removal of leading and trailing spaces, REGEX REPLACE regular replacement, URL DECODE, LOWERCASE conversion to lowercase.
     */
    type: string;
    /**
     * Url parsing.
     */
    urlDecode?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecode;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateDate {
    /**
     * Time format.
     */
    format?: string;
    /**
     * input type, string|unix.
     */
    targetType?: string;
    /**
     * default GMT+8.
     */
    timeZone?: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplace {
    /**
     * Replacement value, Jsonpath expression or string.
     */
    newValue: string;
    /**
     * Replaced value, Jsonpath expression.
     */
    oldValue: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateKV {
    /**
     * delimiter.
     */
    delimiter: string;
    /**
     * Keep the source Key, the default is false not to keep.
     */
    keepOriginalKey?: string;
    /**
     * Key-value secondary analysis delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplace {
    /**
     * new value.
     */
    newValue: string;
    /**
     * Regular.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateReplace {
    /**
     * new value.
     */
    newValue: string;
    /**
     * been replaced value.
     */
    oldValue: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateSplit {
    /**
     * delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateSubstr {
    /**
     * cut-off position.
     */
    end: number;
    /**
     * interception starting position.
     */
    start: number;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecode {
    /**
     * code.
     */
    charsetName?: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyse {
    /**
     * delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResult {
    /**
     * KEY.
     */
    key: string;
    /**
     * Operation, DATE system preset - timestamp, CUSTOMIZE customization, MAPPING mapping, JSONPATH.
     */
    operate: string;
    /**
     * OriginalValue.
     */
    originalValue?: string;
    /**
     * data type, ORIGINAL, STRING, INT64, FLOAT64, BOOLEAN, MAP, ARRAY.
     */
    schemeType: string;
    /**
     * VALUE.
     */
    value?: string;
    /**
     * VALUE process.
     */
    valueOperate?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperate;
    /**
     * VALUE process chain.
     */
    valueOperates?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperate[];
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperate {
    /**
     * Time conversion, required when TYPE=DATE.
     */
    date?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDate;
    /**
     * Json Path replacement, must pass when TYPE=JSON PATH REPLACE.
     */
    jsonPathReplace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplace;
    /**
     * Key-value secondary analysis, must be passed when TYPE=KV.
     */
    kV?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKV;
    /**
     * Regular replacement, required when TYPE=REGEX REPLACE.
     */
    regexReplace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplace;
    /**
     * replace, TYPE=REPLACE is required.
     */
    replace?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplace;
    /**
     * result.
     */
    result?: string;
    /**
     * The value supports one split and multiple values, required when TYPE=SPLIT.
     */
    split?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplit;
    /**
     * Substr, TYPE=SUBSTR is required.
     */
    substr?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstr;
    /**
     * Processing mode, REPLACE replacement, SUBSTR interception, DATE date conversion, TRIM removal of leading and trailing spaces, REGEX REPLACE regular replacement, URL DECODE, LOWERCASE conversion to lowercase.
     */
    type: string;
    /**
     * Url parsing.
     */
    urlDecode?: outputs.CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecode;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDate {
    /**
     * Time format.
     */
    format?: string;
    /**
     * input type, string|unix.
     */
    targetType?: string;
    /**
     * default GMT+8.
     */
    timeZone?: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplace {
    /**
     * Replacement value, Jsonpath expression or string.
     */
    newValue: string;
    /**
     * Replaced value, Jsonpath expression.
     */
    oldValue: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKV {
    /**
     * delimiter.
     */
    delimiter: string;
    /**
     * Keep the source Key, the default is false not to keep.
     */
    keepOriginalKey?: string;
    /**
     * Key-value secondary analysis delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplace {
    /**
     * new value.
     */
    newValue: string;
    /**
     * Regular.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplace {
    /**
     * new value.
     */
    newValue: string;
    /**
     * been replaced value.
     */
    oldValue: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplit {
    /**
     * delimiter.
     */
    regex: string;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstr {
    /**
     * cut-off position.
     */
    end: number;
    /**
     * interception starting position.
     */
    start: number;
}

export interface CkafkaDatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecode {
    /**
     * code.
     */
    charsetName?: string;
}

export interface CkafkaDatahubTaskTransformsParamFilterParam {
    /**
     * Key.
     */
    key: string;
    /**
     * Matching mode, prefix matches PREFIX, suffix matches SUFFIX, contains matches CONTAINS, except matches EXCEPT, value matches NUMBER, IP matches IP.
     */
    matchMode: string;
    /**
     * REGULAR.
     */
    type?: string;
    /**
     * Value.
     */
    value: string;
}

export interface CkafkaDatahubTaskTransformsParamRowParam {
    /**
     * delimiter.
     */
    entryDelimiter?: string;
    /**
     * key, value delimiter.
     */
    keyValueDelimiter?: string;
    /**
     * row content, KEY_VALUE, VALUE.
     */
    rowContent: string;
}

export interface CkafkaInstanceConfig {
    /**
     * Automatic creation. true: enabled, false: not enabled.
     */
    autoCreateTopicEnable: boolean;
    /**
     * If auto.create.topic.enable is set to true and this value is not set, 3 will be used by default.
     */
    defaultNumPartitions: number;
    /**
     * If auto.create.topic.enable is set to true but this value is not set, 2 will be used by default.
     */
    defaultReplicationFactor: number;
}

export interface CkafkaInstanceDynamicRetentionConfig {
    /**
     * Minimum retention time, in minutes.
     */
    bottomRetention: number;
    /**
     * Disk quota threshold (in percentage) for triggering the message retention time change event.
     */
    diskQuotaPercentage: number;
    /**
     * Whether the dynamic message retention time configuration is enabled. 0: disabled; 1: enabled.
     */
    enable: number;
    /**
     * Percentage by which the message retention time is shortened each time.
     */
    stepForwardPercentage: number;
}

export interface CkafkaInstanceTag {
    /**
     * Tag key.
     */
    key: string;
    /**
     * Tag value.
     */
    value: string;
}

export interface CkafkaRouteBrokerVipList {
    vip: string;
    vport: string;
}

export interface CkafkaRouteVipList {
    vip: string;
    vport: string;
}

export interface ClbAttachmentTarget {
    /**
     * Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
     */
    eniIp?: string;
    /**
     * CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
     */
    instanceId?: string;
    /**
     * Port of the backend server. Valid value ranges: (0~65535).
     */
    port: number;
    /**
     * Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
     */
    weight?: number;
}

export interface ClbFunctionTargetsAttachmentFunctionTargets {
    /**
     * Information about cloud functions.Note: This field may return null, indicating that no valid value can be obtained.
     */
    function: outputs.ClbFunctionTargetsAttachmentFunctionTargetsFunction;
    /**
     * Weight. The default is `10`.
     */
    weight?: number;
}

export interface ClbFunctionTargetsAttachmentFunctionTargetsFunction {
    /**
     * The name of function.
     */
    functionName: string;
    /**
     * The namespace of function.
     */
    functionNamespace: string;
    /**
     * The version name or alias of the function.
     */
    functionQualifier: string;
    /**
     * Identifies the type of FunctionQualifier parameter, possible values: VERSION, ALIAS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    functionQualifierType?: string;
}

export interface ClbInstanceSnatIp {
    /**
     * Snat IP address, If set to empty will auto allocated.
     */
    ip?: string;
    /**
     * Snat subnet ID.
     */
    subnetId: string;
}

export interface ClbReplaceCertForLbsCertificate {
    /**
     * Content of the uploaded client certificate. When SSLMode = mutual, if there is no CertCaId, this parameter is required.
     */
    certCaContent?: string;
    /**
     * ID of a client certificate. When the listener adopts mutual authentication (i.e., SSLMode = mutual), if you leave this parameter empty, you must upload the client certificate, including CertCaContent and CertCaName.
     */
    certCaId?: string;
    /**
     * Name of the uploaded client CA certificate. When SSLMode = mutual, if there is no CertCaId, this parameter is required.
     */
    certCaName?: string;
    /**
     * Content of the uploaded server certificate. If there is no CertId, this parameter is required.
     */
    certContent?: string;
    /**
     * ID of a server certificate. If you leave this parameter empty, you must upload the certificate, including CertContent, CertKey, and CertName.
     */
    certId?: string;
    /**
     * Key of the uploaded server certificate. If there is no CertId, this parameter is required.
     */
    certKey?: string;
    /**
     * Name of the uploaded server certificate. If there is no CertId, this parameter is required.
     */
    certName?: string;
    /**
     * Authentication type. Value range: UNIDIRECTIONAL (unidirectional authentication), MUTUAL (mutual authentication).
     */
    sslMode?: string;
}

export interface ClbSnatIpIp {
    /**
     * Snat IP.
     */
    ip: string;
    /**
     * Subnet ID.
     */
    subnetId: string;
}

export interface ClbTargetGroupAttachmentsAssociation {
    /**
     * Listener ID.
     */
    listenerId?: string;
    /**
     * CLB instance ID, when the binding target is target group, load_balancer_id in associations is required.
     */
    loadBalancerId?: string;
    /**
     * Forwarding rule ID.
     */
    locationId?: string;
    /**
     * Target group ID, when the binding target is clb, the target_group_id in associations is required.
     */
    targetGroupId?: string;
}

export interface ClbTargetGroupTargetGroupInstance {
    /**
     * The internal ip of target group instance.
     */
    bindIp: string;
    /**
     * The new port of target group instance.
     */
    newPort?: number;
    /**
     * The port of target group instance.
     */
    port: number;
    /**
     * The weight of target group instance.
     */
    weight?: number;
}

export interface ClickhouseAccountPermissionDatabasePrivilegeList {
    /**
     * Database name.
     */
    databaseName: string;
    /**
     * Database privileges. Valid valuse: SELECT, INSERT_ALL, ALTER, TRUNCATE, DROP_TABLE, CREATE_TABLE, DROP_DATABASE.
     */
    databasePrivileges?: string[];
    /**
     * Table privilege list.
     */
    tablePrivilegeLists?: outputs.ClickhouseAccountPermissionDatabasePrivilegeListTablePrivilegeList[];
}

export interface ClickhouseAccountPermissionDatabasePrivilegeListTablePrivilegeList {
    /**
     * Table name.
     */
    tableName: string;
    /**
     * Table privileges. Valid values: SELECT, INSERT_ALL, ALTER, TRUNCATE, DROP_TABLE.
     */
    tablePrivileges: string[];
}

export interface ClickhouseBackupStrategyDataBackupStrategy {
    /**
     * Back up the list of tables.
     */
    backUpTables: outputs.ClickhouseBackupStrategyDataBackupStrategyBackUpTable[];
    /**
     * Execution hour.
     */
    executeHour: number;
    /**
     * Retention days.
     */
    retainDays: number;
    /**
     * The day of the week is separated by commas. For example: 2 represents Tuesday.
     */
    weekDays: string;
}

export interface ClickhouseBackupStrategyDataBackupStrategyBackUpTable {
    /**
     * Database.
     */
    database: string;
    /**
     * Table ip.
     */
    ips: string;
    /**
     * Ip address of cvm.
     */
    rip: string;
    /**
     * Table.
     */
    table: string;
    /**
     * Back up the list of tables.
     */
    totalBytes: number;
    /**
     * Virtual clusters.
     */
    vCluster: string;
    /**
     * ZK path.
     */
    zooPath: string;
}

export interface ClickhouseBackupStrategyMetaBackupStrategy {
    /**
     * Execution hour.
     */
    executeHour?: number;
    /**
     * Retention days.
     */
    retainDays?: number;
    /**
     * The day of the week is separated by commas. For example: 2 represents Tuesday.
     */
    weekDays?: string;
}

export interface ClickhouseInstanceCommonSpec {
    /**
     * Node count. NOTE: Only support value 3.
     */
    count: number;
    /**
     * Disk size.
     */
    diskSize: number;
    /**
     * Spec name.
     */
    specName: string;
}

export interface ClickhouseInstanceDataSpec {
    /**
     * Data spec count.
     */
    count: number;
    /**
     * Disk size.
     */
    diskSize: number;
    /**
     * Spec name.
     */
    specName: string;
}

export interface ClickhouseKeyvalConfigItems {
    /**
     * Instance config key.
     */
    confKey: string;
    /**
     * Instance config value.
     */
    confValue: string;
}

export interface ClickhouseXmlConfigModifyConfContext {
    /**
     * Configuration file name.
     */
    fileName: string;
    /**
     * Path to save configuration file.
     */
    filePath?: string;
    /**
     * New content of configuration file, base64 encoded.
     */
    newConfValue: string;
}

export interface ClsAlarmAlarmTarget {
    /**
     * search end time of offset.
     */
    endTimeOffset: number;
    /**
     * logset id.
     */
    logsetId: string;
    /**
     * the number of alarm object.
     */
    number: number;
    /**
     * query rules.
     */
    query: string;
    /**
     * search start time of offset.
     */
    startTimeOffset: number;
    /**
     * Retrieve grammar rules, 0: Lucene syntax, 1: CQL syntax, Default value is 0.
     */
    syntaxRule: number;
    /**
     * topic id.
     */
    topicId: string;
}

export interface ClsAlarmAnalysis {
    /**
     * configuration.
     */
    configInfos?: outputs.ClsAlarmAnalysisConfigInfo[];
    /**
     * analysis content.
     */
    content: string;
    /**
     * analysis name.
     */
    name: string;
    /**
     * analysis type.
     */
    type: string;
}

export interface ClsAlarmAnalysisConfigInfo {
    /**
     * key.
     */
    key: string;
    /**
     * value.
     */
    value: string;
}

export interface ClsAlarmCallBack {
    /**
     * callback body.
     */
    body: string;
    /**
     * callback headers.
     */
    headers?: string[];
}

export interface ClsAlarmMonitorTime {
    /**
     * time period or point in time.
     */
    time: number;
    /**
     * Period for periodic execution, Fixed for regular execution.
     */
    type: string;
}

export interface ClsAlarmNoticeNoticeReceiver {
    /**
     * end time allowed to receive messages.
     */
    endTime?: string;
    /**
     * index.
     */
    index?: number;
    /**
     * receiver channels, Email,Sms,WeChat or Phone.
     */
    receiverChannels: string[];
    /**
     * receiver id.
     */
    receiverIds: number[];
    /**
     * receiver type, Uin or Group.
     */
    receiverType: string;
    /**
     * start time allowed to receive messages.
     */
    startTime?: string;
}

export interface ClsAlarmNoticeWebCallback {
    /**
     * abandoned.
     */
    body?: string;
    /**
     * callback type, WeCom or Http.
     */
    callbackType: string;
    /**
     * abandoned.
     */
    headers?: string[];
    /**
     * index.
     */
    index?: number;
    /**
     * Method, POST or PUT.
     */
    method?: string;
    /**
     * callback url.
     */
    url: string;
}

export interface ClsCkafkaConsumerCkafka {
    /**
     * instance id.
     */
    instanceId: string;
    /**
     * instance name.
     */
    instanceName: string;
    /**
     * topic id of ckafka.
     */
    topicId: string;
    /**
     * topic name of ckafka.
     */
    topicName: string;
    /**
     * vip.
     */
    vip: string;
    /**
     * vport.
     */
    vport: string;
}

export interface ClsCkafkaConsumerContent {
    /**
     * whether to deliver the TAG info.
     */
    enableTag: boolean;
    /**
     * metadata info list.
     */
    metaFields: string[];
    /**
     * whether to tiling tag json.
     */
    tagJsonNotTiled?: boolean;
    /**
     * delivery timestamp precision,1 for second, 2 for millisecond.
     */
    timestampAccuracy?: number;
}

export interface ClsConfigExcludePath {
    /**
     * Type. Valid values: File, Path.
     */
    type?: string;
    /**
     * Specific content corresponding to Type.
     */
    value?: string;
}

export interface ClsConfigExtraContainerFile {
    /**
     * Container name.
     */
    container: string;
    /**
     * Pod label to be excluded.
     */
    excludeLabels?: string[];
    /**
     * Namespaces to be excluded, separated by separators, such as A, B.
     */
    excludeNamespace?: string;
    /**
     * log name.
     */
    filePattern: string;
    /**
     * Pod label info.
     */
    includeLabels?: string[];
    /**
     * Log Path.
     */
    logPath: string;
    /**
     * Namespace. There can be multiple namespaces, separated by separators, such as A, B.
     */
    namespace: string;
    /**
     * Workload info.
     */
    workload?: outputs.ClsConfigExtraContainerFileWorkload;
}

export interface ClsConfigExtraContainerFileWorkload {
    /**
     * container name.
     */
    container?: string;
    /**
     * workload type.
     */
    kind: string;
    /**
     * workload name.
     */
    name: string;
    /**
     * namespace.
     */
    namespace?: string;
}

export interface ClsConfigExtraContainerStdout {
    /**
     * Is all containers.
     */
    allContainers: boolean;
    /**
     * Pod label to be excluded.
     */
    excludeLabels?: string[];
    /**
     * Namespaces to be excluded, separated by separators, such as A, B.
     */
    excludeNamespace?: string;
    /**
     * Pod label info.
     */
    includeLabels?: string[];
    /**
     * Namespace. There can be multiple namespaces, separated by separators, such as A, B.
     */
    namespace?: string;
    /**
     * Workload info.
     */
    workloads?: outputs.ClsConfigExtraContainerStdoutWorkload[];
}

export interface ClsConfigExtraContainerStdoutWorkload {
    /**
     * container name.
     */
    container?: string;
    /**
     * workload type.
     */
    kind: string;
    /**
     * workload name.
     */
    name: string;
    /**
     * namespace.
     */
    namespace?: string;
}

export interface ClsConfigExtraExcludePath {
    /**
     * Type. Valid values: File, Path.
     */
    type?: string;
    /**
     * Specific content corresponding to Type.
     */
    value?: string;
}

export interface ClsConfigExtraExtractRule {
    /**
     * Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
     */
    backtracking: number;
    /**
     * First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
     */
    beginRegex?: string;
    /**
     * Delimiter for delimited log, which is valid only if log_type is delimiter_log.
     */
    delimiter?: string;
    /**
     * Log keys to be filtered and the corresponding regex.
     */
    filterKeyRegexes?: outputs.ClsConfigExtraExtractRuleFilterKeyRegex[];
    /**
     * Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
     */
    keys?: string[];
    /**
     * Full log matching rule, which is valid only if log_type is fullregex_log.
     */
    logRegex?: string;
    /**
     * Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
     */
    timeFormat?: string;
    /**
     * Time field key name. time_key and time_format must appear in pair.
     */
    timeKey?: string;
    /**
     * Unmatched log key.
     */
    unMatchLogKey?: string;
    /**
     * Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
     */
    unMatchUpLoadSwitch: boolean;
}

export interface ClsConfigExtraExtractRuleFilterKeyRegex {
    /**
     * Log key to be filtered.
     */
    key?: string;
    /**
     * Filter rule regex corresponding to key.
     */
    regex?: string;
}

export interface ClsConfigExtraHostFile {
    /**
     * Metadata info.
     */
    customLabels?: string[];
    /**
     * Log file name.
     */
    filePattern: string;
    /**
     * Log file dir.
     */
    logPath: string;
}

export interface ClsConfigExtractRule {
    /**
     * syslog system log collection specifies the address and port that the collector listens to.
     */
    address?: string;
    /**
     * Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
     */
    backtracking?: number;
    /**
     * First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
     */
    beginRegex?: string;
    /**
     * Delimiter for delimited log, which is valid only if log_type is delimiter_log.
     */
    delimiter?: string;
    /**
     * Log keys to be filtered and the corresponding regex.
     */
    filterKeyRegexes?: outputs.ClsConfigExtractRuleFilterKeyRegex[];
    /**
     * GBK encoding. Default 0.
     */
    isGbk?: number;
    /**
     * standard json. Default 0.
     */
    jsonStandard?: number;
    /**
     * Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
     */
    keys?: string[];
    /**
     * Full log matching rule, which is valid only if log_type is fullregex_log.
     */
    logRegex?: string;
    /**
     * metadata tags.
     */
    metaTags?: outputs.ClsConfigExtractRuleMetaTag[];
    /**
     * metadata type.
     */
    metadataType?: number;
    /**
     * parse protocol.
     */
    parseProtocol?: string;
    /**
     * metadata path regex.
     */
    pathRegex?: string;
    /**
     * syslog protocol, tcp or udp.
     */
    protocol?: string;
    /**
     * Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
     */
    timeFormat?: string;
    /**
     * Time field key name. time_key and time_format must appear in pair.
     */
    timeKey?: string;
    /**
     * Unmatched log key.
     */
    unMatchLogKey?: string;
    /**
     * Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
     */
    unMatchUpLoadSwitch?: boolean;
}

export interface ClsConfigExtractRuleFilterKeyRegex {
    /**
     * Log key to be filtered.
     */
    key?: string;
    /**
     * Filter rule regex corresponding to key.
     */
    regex?: string;
}

export interface ClsConfigExtractRuleMetaTag {
    /**
     * tag key.
     */
    key?: string;
    /**
     * tag value.
     */
    value?: string;
}

export interface ClsCosRechargeExtractRuleInfo {
    /**
     * syslog address.
     */
    address?: string;
    /**
     * backtracking data volume in incremental acquisition mode.
     */
    backtracking?: number;
    /**
     * begin line regex.
     */
    beginRegex?: string;
    /**
     * log delimiter.
     */
    delimiter?: string;
    /**
     * rules that need to filter logs.
     */
    filterKeyRegexes?: outputs.ClsCosRechargeExtractRuleInfoFilterKeyRegex[];
    /**
     * gbk encoding.
     */
    isGbk?: number;
    /**
     * is standard json.
     */
    jsonStandard?: number;
    /**
     * key list.
     */
    keys?: string[];
    /**
     * log regex.
     */
    logRegex?: string;
    /**
     * metadata tag list.
     */
    metaTags?: outputs.ClsCosRechargeExtractRuleInfoMetaTag[];
    /**
     * metadata type.
     */
    metadataType?: number;
    /**
     * parse protocol.
     */
    parseProtocol?: string;
    /**
     * metadata path regex.
     */
    pathRegex?: string;
    /**
     * syslog protocol.
     */
    protocol?: string;
    /**
     * time format.
     */
    timeFormat?: string;
    /**
     * time key.
     */
    timeKey?: string;
    /**
     * parsing failure log key.
     */
    unMatchLogKey?: string;
    /**
     * whether to upload the parsing failure log.
     */
    unMatchUpLoadSwitch?: boolean;
}

export interface ClsCosRechargeExtractRuleInfoFilterKeyRegex {
    /**
     * need filter log key.
     */
    key: string;
    /**
     * need filter log regex.
     */
    regex: string;
}

export interface ClsCosRechargeExtractRuleInfoMetaTag {
    /**
     * metadata key.
     */
    key?: string;
    /**
     * metadata value.
     */
    value?: string;
}

export interface ClsCosShipperCompress {
    /**
     * Compression format. Valid values: gzip, lzop, none (no compression).
     */
    format: string;
}

export interface ClsCosShipperContent {
    /**
     * CSV format content description.Note: this field may return null, indicating that no valid values can be obtained.
     */
    csv?: outputs.ClsCosShipperContentCsv;
    /**
     * Content format. Valid values: json, csv.
     */
    format: string;
    /**
     * JSON format content description.Note: this field may return null, indicating that no valid values can be obtained.
     */
    json?: outputs.ClsCosShipperContentJson;
}

export interface ClsCosShipperContentCsv {
    /**
     * Field delimiter.
     */
    delimiter: string;
    /**
     * Field delimiter.
     */
    escapeChar: string;
    /**
     * Names of keys.Note: this field may return null, indicating that no valid values can be obtained.
     */
    keys: string[];
    /**
     * Content used to populate non-existing fields.
     */
    nonExistingField: string;
    /**
     * Whether to print key on the first row of the CSV file.
     */
    printKey: boolean;
}

export interface ClsCosShipperContentJson {
    /**
     * Enablement flag.
     */
    enableTag: boolean;
    /**
     * Metadata information list
     * Note: this field may return null, indicating that no valid values can be obtained..
     */
    metaFields: string[];
}

export interface ClsCosShipperFilterRule {
    /**
     * Filter rule key.
     */
    key: string;
    /**
     * Filter rule.
     */
    regex: string;
    /**
     * Filter rule value.
     */
    value: string;
}

export interface ClsDataTransformDstResource {
    /**
     * Alias.
     */
    alias: string;
    /**
     * Dst topic ID.
     */
    topicId: string;
}

export interface ClsIndexRule {
    /**
     * The key value index is automatically configured. If it is empty, it means that the function is not enabled.
     */
    dynamicIndex?: outputs.ClsIndexRuleDynamicIndex;
    /**
     * Full-Text index configuration.
     */
    fullText?: outputs.ClsIndexRuleFullText;
    /**
     * Key-Value index configuration.
     */
    keyValue?: outputs.ClsIndexRuleKeyValue;
    /**
     * Metafield index configuration.
     */
    tag?: outputs.ClsIndexRuleTag;
}

export interface ClsIndexRuleDynamicIndex {
    /**
     * index automatic configuration switch.
     */
    status: boolean;
}

export interface ClsIndexRuleFullText {
    /**
     * Case sensitivity.
     */
    caseSensitive: boolean;
    /**
     * Whether Chinese characters are contained.
     */
    containZH: boolean;
    /**
     * Full-Text index delimiter. Each character in the string represents a delimiter.
     */
    tokenizer: string;
}

export interface ClsIndexRuleKeyValue {
    /**
     * Case sensitivity.
     */
    caseSensitive: boolean;
    /**
     * Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
     */
    keyValues?: outputs.ClsIndexRuleKeyValueKeyValue[];
}

export interface ClsIndexRuleKeyValueKeyValue {
    /**
     * When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
     */
    key: string;
    /**
     * Field index description information.
     */
    value?: outputs.ClsIndexRuleKeyValueKeyValueValue;
}

export interface ClsIndexRuleKeyValueKeyValueValue {
    /**
     * Whether Chinese characters are contained.
     */
    containZH?: boolean;
    /**
     * Whether the analysis feature is enabled for the field.
     */
    sqlFlag?: boolean;
    /**
     * Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
     */
    tokenizer?: string;
    /**
     * Field type. Valid values: long, text, double.
     */
    type: string;
}

export interface ClsIndexRuleTag {
    /**
     * Case sensitivity.
     */
    caseSensitive: boolean;
    /**
     * Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
     */
    keyValues?: outputs.ClsIndexRuleTagKeyValue[];
}

export interface ClsIndexRuleTagKeyValue {
    /**
     * When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
     */
    key: string;
    /**
     * Field index description information.
     */
    value?: outputs.ClsIndexRuleTagKeyValueValue;
}

export interface ClsIndexRuleTagKeyValueValue {
    /**
     * Whether Chinese characters are contained.
     */
    containZH?: boolean;
    /**
     * Whether the analysis feature is enabled for the field.
     */
    sqlFlag?: boolean;
    /**
     * Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
     */
    tokenizer?: string;
    /**
     * Field type. Valid values: long, text, double.
     */
    type: string;
}

export interface ClsKafkaRechargeLogRechargeRule {
    /**
     * default time from.
     */
    defaultTimeSrc?: number;
    /**
     * user default time.
     */
    defaultTimeSwitch: boolean;
    /**
     * encoding format.
     */
    encodingFormat: number;
    /**
     * log key list.
     */
    keys: string[];
    /**
     * log regex.
     */
    logRegex?: string;
    /**
     * metadata.
     */
    metadatas: string[];
    /**
     * recharge type.
     */
    rechargeType: string;
    /**
     * time format.
     */
    timeFormat?: string;
    /**
     * time key.
     */
    timeKey?: string;
    /**
     * time regex.
     */
    timeRegex?: string;
    /**
     * time zone.
     */
    timeZone?: string;
    /**
     * parse failed log key.
     */
    unMatchLogKey?: string;
    /**
     * is push parse failed log.
     */
    unMatchLogSwitch?: boolean;
    /**
     * parse failed log time from.
     */
    unMatchLogTimeSrc?: number;
}

export interface ClsKafkaRechargeProtocol {
    /**
     * encryption type.
     */
    mechanism?: string;
    /**
     * user password.
     */
    password?: string;
    /**
     * protocol type.
     */
    protocol?: string;
    /**
     * username.
     */
    userName?: string;
}

export interface ClsMachineGroupMachineGroupType {
    /**
     * Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
     */
    type: string;
    /**
     * Machine description list.
     */
    values: string[];
}

export interface ClsScheduledSqlDstResource {
    /**
     * topic type.
     */
    bizType?: number;
    /**
     * metric name.
     */
    metricName?: string;
    /**
     * topic region.
     */
    region?: string;
    /**
     * dst topic id.
     */
    topicId: string;
}

export interface ClsTopicExtends {
    /**
     * Log topic authentication free configuration information.
     */
    anonymousAccess?: outputs.ClsTopicExtendsAnonymousAccess;
}

export interface ClsTopicExtendsAnonymousAccess {
    /**
     * Operation list, supporting trackLog (JS/HTTP upload log) and realtimeProducer (kafka protocol upload log).
     */
    conditions?: outputs.ClsTopicExtendsAnonymousAccessCondition[];
    /**
     * Operation list, supporting trackLog (JS/HTTP upload log) and realtimeProducer (kafka protocol upload log).
     */
    operations?: string[];
}

export interface ClsTopicExtendsAnonymousAccessCondition {
    /**
     * Condition attribute, currently only VpcID is supported.
     */
    attributes?: string;
    /**
     * The value of the corresponding conditional attribute.
     */
    conditionValue?: string;
    /**
     * Conditional rule, 1: equal, 2: not equal.
     */
    rule?: number;
}

export interface CosBatchManifest {
    /**
     * The location information of the list of objects.
     */
    location: outputs.CosBatchManifestLocation;
    /**
     * Format information that describes the list of objects. If it is a CSV file, this element describes the fields contained in the manifest.
     */
    spec: outputs.CosBatchManifestSpec;
}

export interface CosBatchManifestLocation {
    /**
     * Specifies the etag of the object list. Length 1-1024 bytes.
     */
    etag: string;
    /**
     * Specifies the unique resource identifier of the object manifest, which is 1-1024 bytes long.
     */
    objectArn: string;
    /**
     * Specifies the version of the object manifest ID, which is 1-1024 bytes long.
     */
    objectVersionId?: string;
}

export interface CosBatchManifestSpec {
    /**
     * Describes the fields contained in the listing, which you need to use to specify CSV file fields when Format is COSBatchOperations_CSV_V1. Legal fields are: Ignore, Bucket, Key, VersionId.
     */
    fields?: string[];
    /**
     * Specifies the format information for the list of objects. Legal fields are: COSBatchOperations_CSV_V1, COSInventoryReport_CSV_V1.
     */
    format: string;
}

export interface CosBatchOperation {
    /**
     * Specifies the specific parameters for the batch restore operation for archive storage type objects in the inventory.
     */
    cosInitiateRestoreObject?: outputs.CosBatchOperationCosInitiateRestoreObject;
    /**
     * Specifies the specific parameters for the batch copy operation on the objects in the list.
     */
    cosPutObjectCopy?: outputs.CosBatchOperationCosPutObjectCopy;
}

export interface CosBatchOperationCosInitiateRestoreObject {
    /**
     * Sets the number of days after which the copy will be automatically expired and deleted, an integer in the range of 1-365.
     */
    expirationInDays: number;
    /**
     * Select archive recovery model. Available values: Bulk, Standard.
     */
    jobTier: string;
}

export interface CosBatchOperationCosPutObjectCopy {
    /**
     * This element specifies how ACL is copied. Valid values:
     * - Copy: inherits the source object ACL
     * - Replaced: replace source ACL
     * - Add: add a new ACL based on the source ACL.
     */
    accessControlDirective?: string;
    /**
     * Controls the specific access to the object.
     */
    accessControlGrants?: outputs.CosBatchOperationCosPutObjectCopyAccessControlGrants;
    /**
     * Defines the ACL property of the object. Valid values: private, public-read.
     */
    cannedAccessControlList?: string;
    /**
     * This element specifies whether to copy object metadata from the source object or replace it with metadata in the < NewObjectMetadata > element. Valid values are: Copy, Replaced, Add. Copy: inherit source object metadata; Replaced: replace source metadata; Add: add new metadata based on source metadata.
     */
    metadataDirective?: string;
    /**
     * When the object is modified after the specified time, the operation is performed, otherwise 412 is returned.
     */
    modifiedSinceConstraint?: number;
    /**
     * Configure the metadata for the object.
     */
    newObjectMetadata?: outputs.CosBatchOperationCosPutObjectCopyNewObjectMetadata;
    /**
     * The label of the configuration object, which must be specified when the < TaggingDirective > value is Replace or Add.
     */
    newObjectTaggings?: outputs.CosBatchOperationCosPutObjectCopyNewObjectTagging[];
    /**
     * Specifies whether the prefix of the source object needs to be replaced. A value of true indicates the replacement object prefix, which needs to be used with <ResourcesPrefix> and <TargetKeyPrefix>. Default value: false.
     */
    prefixReplace?: boolean;
    /**
     * This field is valid only when the < PrefixReplace > value is true. Specify the source object prefix to be replaced, and the replacement directory should end with `/`. Can be empty with a maximum length of 1024 bytes.
     */
    resourcesPrefix?: string;
    /**
     * Sets the storage level of the object. Enumerated value: STANDARD,STANDARD_IA. Default value: STANDARD.
     */
    storageClass?: string;
    /**
     * This element specifies whether to copy the object tag from the source object or replace it with the tag in the < NewObjectTagging > element. Valid values are: Copy, Replaced, Add. Copy: inherits the source object tag; Replaced: replaces the source tag; Add: adds a new tag based on the source tag.
     */
    taggingDirective?: string;
    /**
     * This field is valid only when the <PrefixReplace> value is true. This value represents the replaced prefix, and the replacement directory should end with /. Can be empty with a maximum length of 1024 bytes.
     */
    targetKeyPrefix?: string;
    /**
     * Sets the target bucket for the Copy. Use qcs to specify, for example, qcs::cos:ap-chengdu:uid/1250000000:examplebucket-1250000000.
     */
    targetResource: string;
    /**
     * When the object has not been modified after the specified time, the operation is performed, otherwise 412 is returned.
     */
    unmodifiedSinceConstraint?: number;
}

export interface CosBatchOperationCosPutObjectCopyAccessControlGrants {
    /**
     * User name.
     */
    displayName?: string;
    /**
     * User ID (UIN) in qcs format. For example: qcs::cam::uin/100000000001:uin/100000000001.
     */
    identifier: string;
    /**
     * Specify a permission to be granted. Enumerated value: READ,WRITE,FULL_CONTROL.
     */
    permission: string;
    /**
     * Specifies the type of Identifier. Currently, only user ID is supported. Enumerated value: ID.
     */
    typeIdentifier: string;
}

export interface CosBatchOperationCosPutObjectCopyNewObjectMetadata {
    /**
     * The caching instructions defined in RFC 2616 are saved as object metadata.
     */
    cacheControl?: string;
    /**
     * The file name defined in RFC 2616 is saved as object metadata.
     */
    contentDisposition?: string;
    /**
     * The encoding format defined in RFC 2616 is saved as object metadata.
     */
    contentEncoding?: string;
    /**
     * The content types defined in RFC 2616 are saved as object metadata.
     */
    contentType?: string;
    /**
     * The cache expiration time defined in RFC 2616 is saved as object metadata.
     */
    httpExpiresDate?: string;
    /**
     * Server encryption algorithm. Currently, only AES256 is supported.
     */
    sseAlgorithm?: string;
    /**
     * Includes user-defined metadata.
     */
    userMetadatas?: outputs.CosBatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata[];
}

export interface CosBatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata {
    /**
     * key.
     */
    key: string;
    /**
     * value.
     */
    value: string;
}

export interface CosBatchOperationCosPutObjectCopyNewObjectTagging {
    /**
     * key.
     */
    key: string;
    /**
     * value.
     */
    value: string;
}

export interface CosBatchReport {
    /**
     * Delivery bucket for task completion reports.
     */
    bucket: string;
    /**
     * Whether to output the task completion report.
     */
    enabled: string;
    /**
     * Task completion report format information. Legal value: Report_CSV_V1.
     */
    format: string;
    /**
     * Prefix information for the task completion report. Length 0-256 bytes.
     */
    prefix?: string;
    /**
     * Task completion report the task information that needs to be recorded to determine whether to record the execution information of all operations or the information of failed operations. Legal values: AllTasks, FailedTasksOnly.
     */
    reportScope: string;
}

export interface CosBucketCorsRule {
    /**
     * Specifies which headers are allowed.
     */
    allowedHeaders: string[];
    /**
     * Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
     */
    allowedMethods: string[];
    /**
     * Specifies which origins are allowed.
     */
    allowedOrigins: string[];
    /**
     * Specifies expose header in the response.
     */
    exposeHeaders?: string[];
    /**
     * Specifies time in seconds that browser can cache the response for a preflight request.
     */
    maxAgeSeconds?: number;
}

export interface CosBucketDomainCertificateAttachmentDomainCertificate {
    /**
     * Certificate info.
     */
    certificate: outputs.CosBucketDomainCertificateAttachmentDomainCertificateCertificate;
    /**
     * The name of domain.
     */
    domain: string;
}

export interface CosBucketDomainCertificateAttachmentDomainCertificateCertificate {
    /**
     * Certificate type.
     */
    certType: string;
    /**
     * Custom certificate.
     */
    customCert: outputs.CosBucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert;
}

export interface CosBucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert {
    /**
     * Public key of certificate.
     */
    cert: string;
    /**
     * Private key of certificate.
     */
    privateKey: string;
}

export interface CosBucketInventoryDestination {
    /**
     * ID of the bucket owner.
     */
    accountId?: string;
    /**
     * Bucket name.
     */
    bucket: string;
    /**
     * Server-side encryption for the inventory result.
     */
    encryption?: outputs.CosBucketInventoryDestinationEncryption;
    /**
     * Format of the inventory result. Valid value: CSV.
     */
    format: string;
    /**
     * Prefix of the inventory result.
     */
    prefix?: string;
}

export interface CosBucketInventoryDestinationEncryption {
    /**
     * Encryption with COS-managed key. This field can be left empty.
     */
    sseCos?: string;
}

export interface CosBucketInventoryFilter {
    /**
     * Creation time range of the objects to analyze.
     */
    period?: outputs.CosBucketInventoryFilterPeriod;
    /**
     * Prefix of the objects to analyze.
     */
    prefix?: string;
}

export interface CosBucketInventoryFilterPeriod {
    /**
     * Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
     */
    endTime?: string;
    /**
     * Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
     */
    startTime?: string;
}

export interface CosBucketInventoryOptionalFields {
    /**
     * Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
     */
    fields?: string[];
}

export interface CosBucketInventorySchedule {
    /**
     * Frequency of the inventory job. Enumerated values: Daily, Weekly.
     */
    frequency: string;
}

export interface CosBucketLifecycleRule {
    /**
     * Set the maximum time a multipart upload is allowed to remain running.
     */
    abortIncompleteMultipartUpload?: outputs.CosBucketLifecycleRuleAbortIncompleteMultipartUpload;
    /**
     * Specifies a period in the object's expire (documented below).
     */
    expiration?: outputs.CosBucketLifecycleRuleExpiration;
    /**
     * Object key prefix identifying one or more objects to which the rule applies.
     */
    filterPrefix: string;
    /**
     * A unique identifier for the rule. It can be up to 255 characters.
     */
    id?: string;
    /**
     * Specifies when non current object versions shall expire.
     */
    nonCurrentExpiration?: outputs.CosBucketLifecycleRuleNonCurrentExpiration;
    /**
     * Specifies a period in the non current object's transitions.
     */
    nonCurrentTransitions?: outputs.CosBucketLifecycleRuleNonCurrentTransition[];
    /**
     * Specifies a period in the object's transitions (documented below).
     */
    transitions?: outputs.CosBucketLifecycleRuleTransition[];
}

export interface CosBucketLifecycleRuleAbortIncompleteMultipartUpload {
    /**
     * Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
     */
    daysAfterInitiation: number;
}

export interface CosBucketLifecycleRuleExpiration {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * Indicates whether the delete marker of an expired object will be removed.
     */
    deleteMarker?: boolean;
}

export interface CosBucketLifecycleRuleNonCurrentExpiration {
    /**
     * Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
     */
    nonCurrentDays?: number;
}

export interface CosBucketLifecycleRuleNonCurrentTransition {
    /**
     * Number of days after non current object creation when the specific rule action takes effect.
     */
    nonCurrentDays?: number;
    /**
     * Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
     */
    storageClass: string;
}

export interface CosBucketLifecycleRuleTransition {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
     */
    storageClass: string;
}

export interface CosBucketOriginDomainRule {
    /**
     * Specify domain host.
     */
    domain: string;
    /**
     * Domain status, default: `ENABLED`.
     */
    status?: string;
    /**
     * Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
     */
    type?: string;
}

export interface CosBucketOriginPullRule {
    /**
     * Specifies the custom headers that you can add for COS to access your origin server.
     */
    customHttpHeaders?: {[key: string]: string};
    /**
     * Specifies the pass through headers when accessing the origin server.
     */
    followHttpHeaders?: string[];
    /**
     * Specifies whether to pass through COS request query string when accessing the origin server.
     */
    followQueryString?: boolean;
    /**
     * Specifies whether to follow 3XX redirect to another origin server to pull data from.
     */
    followRedirection?: boolean;
    /**
     * Allows only a domain name or IP address. You can optionally append a port number to the address.
     */
    host: string;
    /**
     * Triggers the origin-pull rule when the requested file name matches this prefix.
     */
    prefix?: string;
    /**
     * Priority of origin-pull rules, do not set the same value for multiple rules.
     */
    priority: number;
    /**
     * the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
     */
    protocol?: string;
    /**
     * If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
     */
    syncBackToSource?: boolean;
}

export interface CosBucketReplicaRule {
    /**
     * Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
     */
    destinationBucket: string;
    /**
     * Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
     */
    destinationStorageClass?: string;
    /**
     * Name of a specific rule.
     */
    id?: string;
    /**
     * Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
     */
    prefix?: string;
    /**
     * Status identifier, available values: `Enabled`, `Disabled`.
     */
    status: string;
}

export interface CosBucketWebsite {
    /**
     * `Endpoint` of the static website.
     */
    endpoint: string;
    /**
     * An absolute path to the document to return in case of a 4XX error.
     */
    errorDocument?: string;
    /**
     * COS returns this index document when requests are made to the root domain or any of the subfolders.
     */
    indexDocument?: string;
}

export interface CsipRiskCenterAsset {
    /**
     * Multi-cloud asset unique idNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    arn?: string;
    /**
     * Ip/ domain name/asset id, database id, etc.
     */
    asset?: string;
    /**
     * Asset nameNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    assetName?: string;
    /**
     * Asset classificationNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    assetType?: string;
    /**
     * Asset typeNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    instanceType?: string;
    /**
     * RegionNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    region?: string;
}

export interface CsipRiskCenterTaskAdvanceCfg {
    /**
     * Configure advanced risk Settings.
     */
    cfgRisks?: outputs.CsipRiskCenterTaskAdvanceCfgCfgRisk[];
    /**
     * Advanced Port Risk Configuration.
     */
    portRisks?: outputs.CsipRiskCenterTaskAdvanceCfgPortRisk[];
    /**
     * Advanced vulnerability risk configuration.
     */
    vulRisks?: outputs.CsipRiskCenterTaskAdvanceCfgVulRisk[];
    /**
     * Weak password risk advanced configuration.
     */
    weakPwdRisks?: outputs.CsipRiskCenterTaskAdvanceCfgWeakPwdRisk[];
}

export interface CsipRiskCenterTaskAdvanceCfgCfgRisk {
    /**
     * Whether to enable, 0- No, 1- Enable.
     */
    enable: number;
    /**
     * Detection item ID.
     */
    itemId: string;
    /**
     * Resource type.
     */
    resourceType: string;
}

export interface CsipRiskCenterTaskAdvanceCfgPortRisk {
    /**
     * Detection item type, 0-system defined, 1-user-defined.
     */
    checkType: number;
    /**
     * Description of detection items.
     */
    detail: string;
    /**
     * Whether to enable, 0- No, 1- Enable.
     */
    enable: number;
    /**
     * Port collection, separated by commas.
     */
    portSets: string;
}

export interface CsipRiskCenterTaskAdvanceCfgVulRisk {
    /**
     * Whether to enable, 0- No, 1- Enable.
     */
    enable: number;
    /**
     * Risk ID.
     */
    riskId: string;
}

export interface CsipRiskCenterTaskAdvanceCfgWeakPwdRisk {
    /**
     * Detection item ID.
     */
    checkItemId: number;
    /**
     * Whether to enable, 0- No, 1- Enable.
     */
    enable: number;
}

export interface CssPlayDomainCertAttachmentDomainInfo {
    /**
     * domain name.
     */
    domainName: string;
    /**
     * Whether to enable the https rule for the domain name. 1: enable, 0: disabled, -1: remain unchanged.
     */
    status: number;
}

export interface CssPullStreamTaskWatermarkList {
    /**
     * pic height.
     */
    height: number;
    /**
     * position type, 0:left top, 1:right top, 2:right bot, 3: left bot.
     */
    location: number;
    /**
     * watermark picture url.
     */
    pictureUrl: string;
    /**
     * pic width.
     */
    width: number;
    /**
     * x position.
     */
    xPosition: number;
    /**
     * y position.
     */
    yPosition: number;
}

export interface CssRecordTemplateAacParam {
    /**
     * Classification of on-demand applications. This field may return null, indicating that no valid value can be obtained.
     */
    classId?: number;
    /**
     * Whether to enable recording in the current format. The default value is 0. 0: No, 1: Yes.
     */
    enable?: number;
    /**
     * Task flow. Note: This field may return null, indicating that no valid value can be obtained.
     */
    procedure?: string;
    /**
     * Recording interval. Unit: second, default: 1800. Value range: 30-7200. This parameter is invalid for HLS. When recording HLS, a file is generated from streaming to streaming.
     */
    recordInterval?: number;
    /**
     * Video storage strategy. Normal: standard storage. Cold: low frequency storage. Note: This field may return null, indicating that no valid value can be obtained.
     */
    storageMode?: string;
    /**
     * Recording storage duration. Unit: second. Value range: 0 - 1500 days. 0: indicates permanent storage.
     */
    storageTime?: number;
    /**
     * Record file name.Special placeholders supported are: `StreamID`: Stream ID,`StartYear`: Start time - year,`StartMonth`: Start time - month,`StartDay`: Start time - day,`StartHour`: Start time - hour,`StartMinute`: Start time - minutes,`StartSecond`: Start time - seconds,`StartMillisecond`: Start time - milliseconds,`EndYear`: End time - year,`EndMonth`: End time - month,`EndDay`: End time - day,`EndHour`: End time - hour,`EndMinute`: End time - minutes,`EndSecond`: End time - seconds,`EndMillisecond`: End time - millisecondsIf the default recording file name is not set as ,`StreamID`,`StartYear`,`StartMonth`,`StartDay`,`StartHour`,`StartMinute`,`StartSecond`,`EndYear`,`EndMonth`,`EndDay`,`EndHour`,`EndMinute`,`EndSecond`.
     */
    vodFileName?: string;
    /**
     * The ID of the on-demand sub app.
     */
    vodSubAppId?: number;
}

export interface CssRecordTemplateFlvParam {
    /**
     * Classification of on-demand applications. Note: This field may return null, indicating that no valid value can be obtained.
     */
    classId?: number;
    /**
     * Whether to enable recording in the current format. The default value is 0. 0: No, 1: Yes.
     */
    enable?: number;
    /**
     * Task flow. This field may return null, indicating that no valid value can be obtained.
     */
    procedure?: string;
    /**
     * Recording interval.  Unit: second, default: 1800.  Value range: 30-7200.  This parameter is invalid for HLS. When recording HLS, a file is generated from streaming to streaming.
     */
    recordInterval?: number;
    /**
     * Video storage strategy. Normal: standard storage. Cold: low frequency storage. This field may return null, indicating that no valid value can be obtained.
     */
    storageMode?: string;
    /**
     * Recording storage duration.  Unit: second. Value range: 0 - 1500 days.  0: indicates permanent storage.
     */
    storageTime?: number;
    /**
     * Record file name.Special placeholders supported are: `StreamID`: Stream ID,`StartYear`: Start time - year,`StartMonth`: Start time - month,`StartDay`: Start time - day,`StartHour`: Start time - hour,`StartMinute`: Start time - minutes,`StartSecond`: Start time - seconds,`StartMillisecond`: Start time - milliseconds,`EndYear`: End time - year,`EndMonth`: End time - month,`EndDay`: End time - day,`EndHour`: End time - hour,`EndMinute`: End time - minutes,`EndSecond`: End time - seconds,`EndMillisecond`: End time - millisecondsIf the default recording file name is not set as ,`StreamID`_ ,`StartYear`-,`StartMonth`-,`StartDay`-,`StartHour`-,`StartMinute`-,`StartSecond`_ ,`EndYear`-,`EndMonth`-,`EndDay`-,`EndHour`-,`EndMinute`-,`EndSecond`.
     */
    vodFileName?: string;
    /**
     * The ID of the vodSub app.
     */
    vodSubAppId?: number;
}

export interface CssRecordTemplateFlvSpecialParam {
    /**
     * Whether to enable the transfer while recording is valid only in the flv format.
     */
    uploadInRecording?: boolean;
}

export interface CssRecordTemplateHlsParam {
    /**
     * Classification of on-demand applications. Note: This field may return null, indicating that no valid value can be obtained.
     */
    classId?: number;
    /**
     * Whether to enable recording in the current format. The default value is 0. 0: No, 1: Yes.
     */
    enable?: number;
    /**
     * Task flow. Note: This field may return null, indicating that no valid value can be obtained.
     */
    procedure?: string;
    /**
     * Recording interval. Unit: second, default: 1800. Value range: 30-7200. This parameter is invalid for HLS. When recording HLS, a file is generated from streaming to streaming.
     */
    recordInterval?: number;
    /**
     * Video storage strategy. Normal: standard storage. Cold: low frequency storage. Note: This field may return null, indicating that no valid value can be obtained.
     */
    storageMode?: string;
    /**
     * Recording storage duration. Unit: second. Value range: 0 - 1500 days. 0: indicates permanent storage.
     */
    storageTime?: number;
    /**
     * Record file name.Special placeholders supported are: `StreamID`: Stream ID,`StartYear`: Start time - year,`StartMonth`: Start time - month,`StartDay`: Start time - day,`StartHour`: Start time - hour,`StartMinute`: Start time - minutes,`StartSecond`: Start time - seconds,`StartMillisecond`: Start time - milliseconds,`EndYear`: End time - year,`EndMonth`: End time - month,`EndDay`: End time - day,`EndHour`: End time - hour,`EndMinute`: End time - minutes,`EndSecond`: End time - seconds,`EndMillisecond`: End time - millisecondsIf the default recording file name is not set as ,`StreamID`,`StartYear`,`StartMonth`,`StartDay`,`StartHour`,`StartMinute`,`StartSecond`,`EndYear`,`EndMonth`,`EndDay`,`EndHour`,`EndMinute`,`EndSecond`.
     */
    vodFileName?: string;
    /**
     * The ID of the vodSub app.
     */
    vodSubAppId?: number;
}

export interface CssRecordTemplateHlsSpecialParam {
    /**
     * HLS freewheeling timeout. Value range [0, 1800].
     */
    flowContinueDuration?: number;
}

export interface CssRecordTemplateMp3Param {
    /**
     * Classification of vod applications. Note: This field may return null, indicating that no valid value can be obtained.
     */
    classId?: number;
    /**
     * Whether to enable recording in the current format. The default value is 0. 0: No, 1: Yes.
     */
    enable?: number;
    /**
     * Task flow. Note: This field may return null, indicating that no valid value can be obtained.
     */
    procedure?: string;
    /**
     * Recording interval. Unit: second, default: 1800. Value range: 30-7200. This parameter is invalid for HLS. When recording HLS, a file is generated from streaming to streaming.
     */
    recordInterval?: number;
    /**
     * Video storage strategy. Normal: standard storage. Cold: low frequency storage. Note: This field may return null, indicating that no valid value can be obtained.
     */
    storageMode?: string;
    /**
     * Recording storage duration. Unit: second. Value range: 0 - 1500 days. 0: indicates permanent storage.
     */
    storageTime?: number;
    /**
     * Record file name.Special placeholders supported are: `StreamID`: Stream ID,`StartYear`: Start time - year,`StartMonth`: Start time - month,`StartDay`: Start time - day,`StartHour`: Start time - hour,`StartMinute`: Start time - minutes,`StartSecond`: Start time - seconds,`StartMillisecond`: Start time - milliseconds,`EndYear`: End time - year,`EndMonth`: End time - month,`EndDay`: End time - day,`EndHour`: End time - hour,`EndMinute`: End time - minutes,`EndSecond`: End time - seconds,`EndMillisecond`: End time - millisecondsIf the default recording file name is not set as ,`StreamID`,`StartYear`,`StartMonth`,`StartDay`,`StartHour`,`StartMinute`, `StartSecond`,`EndYear`,`EndMonth`,`EndDay`,`EndHour`,`EndMinute`,`EndSecond`.
     */
    vodFileName?: string;
    /**
     * The ID of the on-demand sub app.
     */
    vodSubAppId?: number;
}

export interface CssRecordTemplateMp4Param {
    /**
     * Classification of on-demand applications. Note: This field may return null, indicating that no valid value can be obtained.
     */
    classId?: number;
    /**
     * Whether to enable recording in the current format. The default value is 0. 0: No, 1: Yes.
     */
    enable?: number;
    /**
     * Task flow. Note: This field may return null, indicating that no valid value can be obtained.
     */
    procedure?: string;
    /**
     * Recording interval. Unit: second, default: 1800. Value range: 30-7200. This parameter is invalid for HLS. When recording HLS, a file is generated from streaming to streaming.
     */
    recordInterval?: number;
    /**
     * Video storage strategy. Normal: standard storage. Cold: low frequency storage. Note: This field may return null, indicating that no valid value can be obtained.
     */
    storageMode?: string;
    /**
     * Recording storage duration. Unit: second. Value range: 0 - 1500 days. 0: indicates permanent storage.
     */
    storageTime?: number;
    /**
     * Record file name.Special placeholders supported are: `StreamID`: Stream ID,`StartYear`: Start time - year,`StartMonth`: Start time - month,`StartDay`: Start time - day,`StartHour`: Start time - hour,`StartMinute`: Start time - minutes,`StartSecond`: Start time - seconds,`StartMillisecond`: Start time - milliseconds,`EndYear`: End time - year,`EndMonth`: End time - month,`EndDay`: End time - day,`EndHour`: End time - hour,`EndMinute`: End time - minutes,`EndSecond`: End time - seconds,`EndMillisecond`: End time - millisecondsIf the default recording file name is not set as ,`StreamID`,`StartYear`,`StartMonth`,`StartDay`,`StartHour`,`StartMinute`,`StartSecond`,`EndYear`,`EndMonth`,`EndDay`,`EndHour`,`EndMinute`,`EndSecond`.
     */
    vodFileName?: string;
    /**
     * The ID of the on-demand sub app.
     */
    vodSubAppId?: number;
}

export interface CssStreamMonitorInputList {
    /**
     * Description content.limit 256 bytes.
     */
    description?: string;
    /**
     * Wait monitor input push path.limit 32 bytes.
     */
    inputApp?: string;
    /**
     * Wait monitor input push domain.limit 128 bytes.
     */
    inputDomain?: string;
    /**
     * Wait monitor input stream name.limit 256 bytes.
     */
    inputStreamName: string;
    /**
     * Wait monitor input stream push url.
     */
    inputUrl?: string;
}

export interface CssStreamMonitorNotifyPolicy {
    /**
     * Callback url.limit [0,512].only http or https.
     */
    callbackUrl?: string;
    /**
     * Notify policy type.0: not notify.1: use global policy.
     */
    notifyPolicyType?: number;
}

export interface CssStreamMonitorOutputInfo {
    /**
     * Monitor task play path.limit 32 bytes.
     */
    outputApp?: string;
    /**
     * Monitor task output play domain.limit 128 bytes.
     */
    outputDomain?: string;
    /**
     * Monitor task output height, limit[1, 1080].
     */
    outputStreamHeight: number;
    /**
     * Monitor task output stream name.limit 256 bytes.
     */
    outputStreamName?: string;
    /**
     * Output stream width, limit[1, 1920].
     */
    outputStreamWidth: number;
}

export interface CvmChcConfigBmcVirtualPrivateCloud {
    /**
     * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.
     */
    asVpcGateway?: boolean;
    /**
     * Number of IPv6 addresses randomly generated for the ENI.
     */
    ipv6AddressCount: number;
    /**
     * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
     */
    privateIpAddresses: string[];
    /**
     * VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.
     */
    subnetId: string;
    /**
     * VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
     */
    vpcId: string;
}

export interface CvmChcConfigDeployVirtualPrivateCloud {
    /**
     * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.
     */
    asVpcGateway?: boolean;
    /**
     * Number of IPv6 addresses randomly generated for the ENI.
     */
    ipv6AddressCount: number;
    /**
     * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
     */
    privateIpAddresses: string[];
    /**
     * VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.
     */
    subnetId: string;
    /**
     * VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
     */
    vpcId: string;
}

export interface CvmImportImageTagSpecification {
    /**
     * Resource type. Valid values: instance (CVM), host (CDH), image (for image), and keypair (for key). Note: This field may return null, indicating that no valid values can be obtained.
     */
    resourceType: string;
    /**
     * Tag pairs Note: This field may return null, indicating that no valid values can be obtained.
     */
    tags: outputs.CvmImportImageTagSpecificationTag[];
}

export interface CvmImportImageTagSpecificationTag {
    /**
     * Tag key.
     */
    key: string;
    /**
     * Tag value.
     */
    value: string;
}

export interface CvmLaunchTemplateActionTimer {
    /**
     * Execution time.
     */
    actionTime?: string;
    /**
     * Extended data.
     */
    externals?: outputs.CvmLaunchTemplateActionTimerExternals;
    /**
     * Timer name.
     */
    timerAction?: string;
}

export interface CvmLaunchTemplateActionTimerExternals {
    /**
     * Release address.
     */
    releaseAddress?: boolean;
    /**
     * HDD local storage attributes.
     */
    storageBlockAttr?: outputs.CvmLaunchTemplateActionTimerExternalsStorageBlockAttr;
    /**
     * Unsupported network type.
     */
    unsupportNetworks?: string[];
}

export interface CvmLaunchTemplateActionTimerExternalsStorageBlockAttr {
    /**
     * The maximum capacity of HDD local storage.
     */
    maxSize: number;
    /**
     * The minimum capacity of HDD local storage.
     */
    minSize: number;
    /**
     * The type of HDD local storage.
     */
    type: string;
}

export interface CvmLaunchTemplateDataDisk {
    /**
     * Cloud Dedicated Cluster(CDC) ID.
     */
    cdcId?: string;
    /**
     * Whether the data disk is destroyed along with the instance, true or false.
     */
    deleteWithInstance?: boolean;
    /**
     * Data disk ID.
     */
    diskId?: string;
    /**
     * The size of the data disk.
     */
    diskSize: number;
    /**
     * The type of data disk.
     */
    diskType?: string;
    /**
     * Whether the data disk is encrypted, TRUE or FALSE.
     */
    encrypt?: boolean;
    /**
     * The id of custom CMK.
     */
    kmsKeyId?: string;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
    /**
     * Cloud disk performance, MB/s.
     */
    throughputPerformance?: number;
}

export interface CvmLaunchTemplateEnhancedService {
    /**
     * Enable TencentCloud Automation Tools(TAT).
     */
    automationService?: outputs.CvmLaunchTemplateEnhancedServiceAutomationService;
    /**
     * Enable cloud monitor service.
     */
    monitorService?: outputs.CvmLaunchTemplateEnhancedServiceMonitorService;
    /**
     * Enable cloud security service.
     */
    securityService?: outputs.CvmLaunchTemplateEnhancedServiceSecurityService;
}

export interface CvmLaunchTemplateEnhancedServiceAutomationService {
    /**
     * Whether to enable TencentCloud Automation Tools(TAT), TRUE or FALSE.
     */
    enabled?: boolean;
}

export interface CvmLaunchTemplateEnhancedServiceMonitorService {
    /**
     * Whether to enable cloud monitor service, TRUE or FALSE.
     */
    enabled?: boolean;
}

export interface CvmLaunchTemplateEnhancedServiceSecurityService {
    /**
     * Whether to enable cloud security service, TRUE or FALSE.
     */
    enabled?: boolean;
}

export interface CvmLaunchTemplateInstanceChargePrepaid {
    /**
     * The period of purchasing instances.
     */
    period: number;
    /**
     * Automatic renew flag.
     */
    renewFlag?: string;
}

export interface CvmLaunchTemplateInstanceMarketOptions {
    /**
     * Market option type, currently only supports value: spot.
     */
    marketType?: string;
    /**
     * Bidding related options.
     */
    spotOptions: outputs.CvmLaunchTemplateInstanceMarketOptionsSpotOptions;
}

export interface CvmLaunchTemplateInstanceMarketOptionsSpotOptions {
    /**
     * Bidding.
     */
    maxPrice: string;
    /**
     * Bidding request type, currently only supported type: one-time.
     */
    spotInstanceType?: string;
}

export interface CvmLaunchTemplateInternetAccessible {
    /**
     * The ID of bandwidth package.
     */
    bandwidthPackageId?: string;
    /**
     * The type of internet charge.
     */
    internetChargeType?: string;
    /**
     * Internet outbound bandwidth upper limit, Mbps.
     */
    internetMaxBandwidthOut?: number;
    /**
     * Whether to allocate public network IP, TRUE or FALSE.
     */
    publicIpAssigned?: boolean;
}

export interface CvmLaunchTemplateLoginSettings {
    /**
     * Keep the original settings of the mirror.
     */
    keepImageLogin?: string;
    /**
     * List of key ID.
     */
    keyIds?: string[];
    /**
     * The login password of instance.
     */
    password?: string;
}

export interface CvmLaunchTemplatePlacement {
    /**
     * The CDH ID list of the instance(input).
     */
    hostIds?: string[];
    /**
     * Specify the host machine ip.
     *
     * @deprecated Deprecated
     */
    hostIps?: string[];
    /**
     * The project ID of the instance.
     */
    projectId?: number;
    /**
     * The available zone ID of the instance.
     */
    zone: string;
}

export interface CvmLaunchTemplateSystemDisk {
    /**
     * Cloud Dedicated Cluster(CDC) ID.
     */
    cdcId?: string;
    /**
     * System disk ID.
     */
    diskId?: string;
    /**
     * The size of system disk.
     */
    diskSize?: number;
    /**
     * The type of system disk.
     */
    diskType?: string;
}

export interface CvmLaunchTemplateTagSpecification {
    /**
     * The type of resource.
     */
    resourceType: string;
    /**
     * Tag list.
     */
    tags: outputs.CvmLaunchTemplateTagSpecificationTag[];
}

export interface CvmLaunchTemplateTagSpecificationTag {
    /**
     * The key of tag.
     */
    key: string;
    /**
     * The value of tag.
     */
    value: string;
}

export interface CvmLaunchTemplateVersionActionTimer {
    /**
     * Execution time, displayed according to ISO8601 standard, and UTC time is used. The format is YYYY-MM-DDThh:mm:ssZ. For example, 2018-05-29T11:26:40Z, the execution must be at least 5 minutes later than the current time.
     */
    actionTime: string;
    /**
     * Additional data.
     */
    externals?: outputs.CvmLaunchTemplateVersionActionTimerExternals;
    /**
     * Timer name. Currently TerminateInstances is the only supported value.
     */
    timerAction: string;
}

export interface CvmLaunchTemplateVersionActionTimerExternals {
    /**
     * Release address.
     */
    releaseAddress: boolean;
    /**
     * Information on local HDD storage.
     */
    storageBlockAttr?: outputs.CvmLaunchTemplateVersionActionTimerExternalsStorageBlockAttr;
    /**
     * Not supported network.
     */
    unsupportNetworks: string[];
}

export interface CvmLaunchTemplateVersionActionTimerExternalsStorageBlockAttr {
    /**
     * Maximum capacity of local HDD storage.
     */
    maxSize: number;
    /**
     * Minimum capacity of local HDD storage.
     */
    minSize: number;
    /**
     * Local HDD storage type. Value: LOCAL_PRO.
     */
    type: string;
}

export interface CvmLaunchTemplateVersionDataDisk {
    /**
     * ID of the dedicated cluster to which the instance belongs.
     */
    cdcId: string;
    /**
     * Whether to terminate the data disk when its CVM is terminated. Default value: `true`.
     */
    deleteWithInstance: boolean;
    /**
     * System disk ID. System disks whose type is LOCAL_BASIC or LOCAL_SSD do not have an ID and do not support this parameter. It is only used as a response parameter for APIs such as DescribeInstances, and cannot be used as a request parameter for APIs such as RunInstances.
     */
    diskId: string;
    /**
     * Data disk size (in GB). The minimum adjustment increment is 10 GB. The value range varies by data disk type.
     */
    diskSize: number;
    /**
     * The type of data disk.
     */
    diskType: string;
    /**
     * Specifies whether the data disk is encrypted.
     */
    encrypt: boolean;
    /**
     * ID of the custom CMK in the format of UUID or `kms-abcd1234`.
     */
    kmsKeyId: string;
    /**
     * Data disk snapshot ID. The size of the selected data disk snapshot must be smaller than that of the data disk. Note: This field may return null, indicating that no valid value is found.
     */
    snapshotId: string;
    /**
     * Cloud disk performance in MB/s.
     */
    throughputPerformance: number;
}

export interface CvmLaunchTemplateVersionEnhancedService {
    /**
     * Whether to enable the TAT service. If this parameter is not specified, the TAT service is enabled for public images and disabled for other images by default.
     */
    automationService?: outputs.CvmLaunchTemplateVersionEnhancedServiceAutomationService;
    /**
     * Enables cloud monitor service. If this parameter is not specified, the cloud monitor service will be enabled by default.
     */
    monitorService?: outputs.CvmLaunchTemplateVersionEnhancedServiceMonitorService;
    /**
     * Enables cloud security service. If this parameter is not specified, the cloud security service will be enabled by default.
     */
    securityService?: outputs.CvmLaunchTemplateVersionEnhancedServiceSecurityService;
}

export interface CvmLaunchTemplateVersionEnhancedServiceAutomationService {
    /**
     * Whether to enable the TAT service.
     */
    enabled: boolean;
}

export interface CvmLaunchTemplateVersionEnhancedServiceMonitorService {
    /**
     * Whether to enable Cloud Monitor.
     */
    enabled: boolean;
}

export interface CvmLaunchTemplateVersionEnhancedServiceSecurityService {
    /**
     * Whether to enable Cloud Security.
     */
    enabled: boolean;
}

export interface CvmLaunchTemplateVersionInstanceChargePrepaid {
    /**
     * Subscription period; unit: month; valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
     */
    period: number;
    /**
     * Auto renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically DISABLE_NOTIFY_AND_MANUAL_RENEW: neither notify upon expiration nor renew automatically &lt;br&gt;&lt;br&gt;Default value: NOTIFY_AND_MANUAL_RENEW. If this parameter is specified as NOTIFY_AND_AUTO_RENEW, the instance will be automatically renewed on a monthly basis if the account balance is sufficient.
     */
    renewFlag: string;
}

export interface CvmLaunchTemplateVersionInstanceMarketOptions {
    /**
     * Market option type. Currently spot is the only supported value.
     */
    marketType: string;
    /**
     * Options related to bidding.
     */
    spotOptions: outputs.CvmLaunchTemplateVersionInstanceMarketOptionsSpotOptions;
}

export interface CvmLaunchTemplateVersionInstanceMarketOptionsSpotOptions {
    /**
     * Bidding price.
     */
    maxPrice: string;
    /**
     * Bidding request type. Currently only one-time is supported.
     */
    spotInstanceType: string;
}

export interface CvmLaunchTemplateVersionInternetAccessible {
    /**
     * Bandwidth package ID.
     */
    bandwidthPackageId: string;
    /**
     * Network connection billing plan.
     */
    internetChargeType: string;
    /**
     * The maximum outbound bandwidth of the public network, in Mbps. The default value is 0 Mbps.
     */
    internetMaxBandwidthOut: number;
    /**
     * Whether to assign a public IP.
     */
    publicIpAssigned: boolean;
}

export interface CvmLaunchTemplateVersionLoginSettings {
    /**
     * Whether to keep the original settings of an image.
     */
    keepImageLogin: string;
    /**
     * List of key IDs. After an instance is associated with a key, you can access the instance with the private key in the key pair.
     */
    keyIds: string[];
    /**
     * Login password of the instance.
     */
    password: string;
}

export interface CvmLaunchTemplateVersionPlacement {
    /**
     * ID list of CDHs from which the instance can be created. If you have purchased CDHs and specify this parameter, the instances you purchase will be randomly deployed on the CDHs.
     */
    hostIds: string[];
    /**
     * IPs of the hosts to create CVMs.
     */
    hostIps: string[];
    /**
     * ID of the project to which the instance belongs. This parameter can be obtained from the projectId returned by DescribeProject. If this is left empty, the default project is used.
     */
    projectId: number;
    /**
     * ID of the availability zone where the instance resides. You can call the DescribeZones API and obtain the ID in the returned Zone field.
     */
    zone: string;
}

export interface CvmLaunchTemplateVersionSystemDisk {
    /**
     * ID of the dedicated cluster to which the instance belongs.
     */
    cdcId: string;
    /**
     * System disk ID. System disks whose type is LOCAL_BASIC or LOCAL_SSD do not have an ID and do not support this parameter. It is only used as a response parameter for APIs such as DescribeInstances, and cannot be used as a request parameter for APIs such as RunInstances.
     */
    diskId: string;
    /**
     * System disk size; unit: GB; default value: 50 GB.
     */
    diskSize: number;
    /**
     * The type of system disk. Default value: the type of hard disk currently in stock.
     */
    diskType: string;
}

export interface CvmLaunchTemplateVersionTagSpecification {
    /**
     * The type of resource that the tag is bound to.
     */
    resourceType: string;
    /**
     * List of tags.
     */
    tags: outputs.CvmLaunchTemplateVersionTagSpecificationTag[];
}

export interface CvmLaunchTemplateVersionTagSpecificationTag {
    /**
     * Tag key.
     */
    key: string;
    /**
     * Tag value.
     */
    value: string;
}

export interface CvmLaunchTemplateVersionVirtualPrivateCloud {
    /**
     * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC.
     */
    asVpcGateway: boolean;
    /**
     * Number of IPv6 addresses randomly generated for the ENI.
     */
    ipv6AddressCount: number;
    /**
     * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
     */
    privateIpAddresses: string[];
    /**
     * VPC subnet ID in the format subnet-xxx, if you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
     */
    subnetId: string;
    /**
     * VPC ID in the format of vpc-xxx, if you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
     */
    vpcId: string;
}

export interface CvmLaunchTemplateVirtualPrivateCloud {
    /**
     * Is it used as a Public network gateway, TRUE or FALSE.
     */
    asVpcGateway?: boolean;
    /**
     * The number of ipv6 addresses for Elastic Network Interface.
     */
    ipv6AddressCount?: number;
    /**
     * The address of private ip.
     */
    privateIpAddresses?: string[];
    /**
     * The id of subnet.
     */
    subnetId: string;
    /**
     * The id of VPC.
     */
    vpcId: string;
}

export interface CvmModifyInstanceDiskTypeDataDisk {
    /**
     * ID of the dedicated cluster to which the instance belongs.
     */
    cdcId?: string;
    /**
     * Whether to terminate the data disk when its CVM is terminated. Valid values:
     * - TRUE: terminate the data disk when its CVM is terminated. This value only supports pay-as-you-go cloud disks billed on an hourly basis.
     * - FALSE: retain the data disk when its CVM is terminated.
     * Default value: TRUE.
     */
    deleteWithInstance?: boolean;
    /**
     * Data disk ID. Note that it's not available for LOCAL_BASIC and LOCAL_SSD disks.
     */
    diskId?: string;
    /**
     * Data disk size (in GB). The minimum adjustment increment is 10 GB. The value range varies by data disk type. The default value is 0, indicating that no data disk is purchased. For more information, see the product documentation.
     */
    diskSize: number;
    /**
     * Data disk type. Valid values:
     * - LOCAL_BASIC: local hard disk;
     * - LOCAL_SSD: local SSD hard disk;
     * - LOCAL_NVME: local NVME hard disk, which is strongly related to InstanceType and cannot be specified;
     * - LOCAL_PRO: local HDD hard disk, which is strongly related to InstanceType and cannot be specified;
     * - CLOUD_BASIC: ordinary cloud disk;
     * - CLOUD_PREMIUM: high-performance cloud disk;
     * - CLOUD_SSD:SSD cloud disk;
     * - CLOUD_HSSD: enhanced SSD cloud disk;
     * - CLOUD_TSSD: extremely fast SSD cloud disk;
     * - CLOUD_BSSD: general-purpose SSD cloud disk;
     * Default value: LOCAL_BASIC.
     */
    diskType?: string;
    /**
     * Specifies whether the data disk is encrypted. Valid values:
     * - TRUE: encrypted
     * - FALSE: not encrypted
     * Default value: FALSE.
     */
    encrypt?: boolean;
    /**
     * ID of the custom CMK in the format of UUID or “kms-abcd1234”. This parameter is used to encrypt cloud disks.
     */
    kmsKeyId?: string;
    /**
     * Data disk snapshot ID. The size of the selected data disk snapshot must be smaller than that of the data disk.
     */
    snapshotId?: string;
    /**
     * Cloud disk performance, in MB/s.
     */
    throughputPerformance?: number;
}

export interface CvmModifyInstanceDiskTypeSystemDisk {
    /**
     * ID of the dedicated cluster to which the instance belongs.
     */
    cdcId?: string;
    /**
     * System disk ID. System disks whose type is LOCAL_BASIC or LOCAL_SSD do not have an ID and do not support this parameter.
     */
    diskId?: string;
    /**
     * System disk size; unit: GB; default value: 50 GB.
     */
    diskSize?: number;
    /**
     * System disk type. Valid values:- LOCAL_BASIC: local disk
     * - LOCAL_SSD: local SSD disk
     * - CLOUD_BASIC: ordinary cloud disk
     * - CLOUD_SSD: SSD cloud disk
     * - CLOUD_PREMIUM: Premium cloud storage
     * - CLOUD_BSSD: Balanced SSD
     * The disk currently in stock will be used by default.
     */
    diskType?: string;
}

export interface CvmRenewHostHostChargePrepaid {
    /**
     * The duration of purchasing an instance, unit: month. Value range: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
     */
    period: number;
    /**
     * Auto renewal flag. Valid values:&lt;br&gt;&lt;li&gt;NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically&lt;br&gt;&lt;li&gt;NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically&lt;br&gt;&lt;li&gt;DISABLE_NOTIFY_AND_MANUAL_RENEW: neither notify upon expiration nor renew automatically&lt;br&gt;&lt;br&gt;Default value: NOTIFY_AND_AUTO_RENEW。If this parameter is specified as NOTIFY_AND_AUTO_RENEW, the instance will be automatically renewed on a monthly basis if the account balance is sufficient.
     */
    renewFlag?: string;
}

export interface CvmRenewInstanceInstanceChargePrepaid {
    /**
     * Subscription period; unit: month; valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60. Note: This field may return null, indicating that no valid value is found.
     */
    period: number;
    /**
     * Auto renewal flag. Valid values:
     * - `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically;
     * - `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically;
     * - `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically;
     * Default value: NOTIFY_AND_MANUAL_RENEW. If this parameter is specified as NOTIFY_AND_AUTO_RENEW, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. Note: This field may return null, indicating that no valid value is found.
     */
    renewFlag?: string;
}

export interface CynosdbAccountPrivilegesDatabasePrivilege {
    /**
     * Database.
     */
    db: string;
    /**
     * Database privileges.
     */
    privileges: string[];
}

export interface CynosdbAccountPrivilegesTablePrivilege {
    /**
     * Database name.
     */
    db: string;
    /**
     * Table privileges.
     */
    privileges: string[];
    /**
     * Table name.
     */
    tableName: string;
}

export interface CynosdbAuditLogFileFilter {
    /**
     * Affects the number of rows. Indicates that the audit log whose number of affected rows is greater than this value is filtered.
     */
    affectRows?: number;
    /**
     * The name of database.
     */
    dbNames?: string[];
    /**
     * Execution time. The unit is: ms. Indicates to filter audit logs whose execution time is greater than this value.
     */
    execTime?: number;
    /**
     * Client host.
     */
    hosts?: string[];
    /**
     * The name of audit policy.
     */
    policyNames?: string[];
    /**
     * Return the number of rows.
     */
    sentRows?: number;
    /**
     * SQL statement. Support fuzzy matching.
     */
    sql?: string;
    /**
     * SQL type. currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
     */
    sqlType?: string;
    /**
     * SQL type. Supports simultaneous query of multiple types. currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
     */
    sqlTypes?: string[];
    /**
     * SQL statement. Support passing multiple sql statements.
     */
    sqls?: string[];
    /**
     * The name of table.
     */
    tableNames?: string[];
    /**
     * The ID of thread.
     */
    threadIds?: string[];
    /**
     * User name.
     */
    users?: string[];
}

export interface CynosdbClusterDatabasesUserHostPrivilege {
    /**
     * .
     */
    dbHost: string;
    /**
     * .
     */
    dbPrivilege: string;
    /**
     * Authorized Users.
     */
    dbUserName: string;
}

export interface CynosdbClusterParamItem {
    /**
     * Param expected value to set.
     */
    currentValue: string;
    /**
     * Name of param, e.g. `character_set_server`.
     */
    name: string;
    /**
     * Param old value, indicates the value which already set, this value is required when modifying current_value.
     */
    oldValue?: string;
}

export interface CynosdbClusterRoGroupAddr {
    ip: string;
    port: number;
}

export interface CynosdbClusterRoGroupInstance {
    instanceId: string;
    instanceName: string;
}

export interface CynosdbClusterRwGroupAddr {
    ip: string;
    port: number;
}

export interface CynosdbClusterRwGroupInstance {
    instanceId: string;
    instanceName: string;
}

export interface CynosdbClusterSlaveZoneTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CynosdbExportInstanceErrorLogsErrorLogItemExport {
    content: string;
    level: string;
    timestamp: string;
}

export interface CynosdbInstanceParamInstanceParamList {
    /**
     * Current value of parameter.
     */
    currentValue: string;
    /**
     * Parameter Name.
     */
    paramName: string;
}

export interface CynosdbParamTemplateParamList {
    /**
     * Current value.
     */
    currentValue: string;
    /**
     * Parameter Name.
     */
    paramName: string;
}

export interface CynosdbProxyEndPointInstanceWeight {
    /**
     * Instance Id.
     */
    instanceId: string;
    /**
     * Instance Weight.
     */
    weight: number;
}

export interface CynosdbProxyProxyZone {
    /**
     * Number of proxy nodes.
     */
    proxyNodeCount?: number;
    /**
     * Proxy node availability zone.
     */
    proxyNodeZone?: string;
}

export interface CynosdbProxyRoInstance {
    instanceId: string;
    weight: number;
}

export interface CynosdbRollBackClusterRollbackDatabase {
    /**
     * New database name.
     */
    newDatabase: string;
    /**
     * Old database name.
     */
    oldDatabase: string;
}

export interface CynosdbRollBackClusterRollbackTable {
    /**
     * New database name.
     */
    database: string;
    /**
     * Tables.
     */
    tables: outputs.CynosdbRollBackClusterRollbackTableTable[];
}

export interface CynosdbRollBackClusterRollbackTableTable {
    /**
     * New table name.
     */
    newTable: string;
    /**
     * Old table name.
     */
    oldTable: string;
}

export interface DayuCcHttpPolicyRuleList {
    /**
     * Operator of the rule. Valid values: `include`, `not_include`, `equal`.
     */
    operator?: string;
    /**
     * Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
     */
    skey?: string;
    /**
     * Rule value, then length should be less than 31 bytes.
     */
    value?: string;
}

export interface DayuCcHttpsPolicyRuleList {
    /**
     * Operator of the rule. Valid values are `include` and `equal`.
     */
    operator: string;
    /**
     * Key of the rule. Valid values are `cgi`, `ua` and `referer`.
     */
    skey: string;
    /**
     * Rule value, then length should be less than 31 bytes.
     */
    value: string;
}

export interface DayuCcPolicyV2CcBlackWhiteIp {
    /**
     * Blacklist and whitelist IP addresses.
     */
    blackWhiteIp: string;
    /**
     * Create time.
     */
    createTime: string;
    /**
     * Domain.
     */
    domain: string;
    /**
     * Modify time.
     */
    modifyTime: string;
    /**
     * Protocol.
     */
    protocol: string;
    /**
     * IP type, value [black(blacklist IP), white (whitelist IP)].
     */
    type: string;
}

export interface DayuCcPolicyV2CcGeoIpPolicy {
    /**
     * User action, drop or arg.
     */
    action: string;
    /**
     * The list of region IDs that the user selects to block.
     */
    areaLists: number[];
    /**
     * Create time.
     */
    createTime: string;
    /**
     * domain.
     */
    domain: string;
    /**
     * Modify time.
     */
    modifyTime: string;
    /**
     * Protocol, preferably HTTP, HTTPS.
     */
    protocol: string;
    /**
     * Regional types, divided into china, oversea and customized.
     */
    regionType: string;
}

export interface DayuCcPolicyV2CcPrecisionPolicy {
    /**
     * Domain.
     */
    domain: string;
    /**
     * Ip address.
     */
    ip: string;
    /**
     * Policy mode (discard or captcha).
     */
    policyAction: string;
    /**
     * Policy Id.
     */
    policyId: string;
    /**
     * A list of policies.
     */
    policys: outputs.DayuCcPolicyV2CcPrecisionPolicyPolicy[];
    /**
     * Protocol.
     */
    protocol: string;
}

export interface DayuCcPolicyV2CcPrecisionPolicyPolicy {
    /**
     * Configuration item types, currently only support value.
     */
    fieldName: string;
    /**
     * Configuration fields with the desirable values cgi, ua, cookie, referer, accept, srcip.
     */
    fieldType: string;
    /**
     * Configure the value.
     */
    value: string;
    /**
     * Configure the item-value comparison mode, which can be taken as the value of evaluate, not_equal, include.
     */
    valueOperator: string;
}

export interface DayuCcPolicyV2CcPrecisionReqLimit {
    /**
     * Domain.
     */
    domain: string;
    /**
     * Instance id.
     */
    instanceId: string;
    /**
     * IP address.
     */
    ip: string;
    /**
     * Protection rating, the optional value of default means default policy, loose means loose, and strict means strict.
     */
    level: string;
    /**
     * The CC Frequency Limit Policy Item field.
     */
    policys: outputs.DayuCcPolicyV2CcPrecisionReqLimitPolicy[];
    /**
     * Protocol, preferably HTTP, HTTPS.
     */
    protocol: string;
}

export interface DayuCcPolicyV2CcPrecisionReqLimitPolicy {
    /**
     * The frequency limit policy mode, the optional value of arg indicates the verification code, and drop indicates the discard.
     */
    action: string;
    /**
     * Cookies, one of the three policy entries can only be filled in.
     */
    cookie?: string;
    /**
     * The duration of the frequency limit policy can be taken from 1 to 86400 per second.
     */
    executeDuration: number;
    /**
     * The policy item is compared, and the optional value include indicates inclusion, and equal means equal.
     */
    mode: string;
    /**
     * Statistical period, take values 1, 10, 30, 60, in seconds.
     */
    period: number;
    /**
     * The number of requests, the value is 1 to 20000.
     */
    requestNum: number;
    /**
     * Uri, one of the three policy entries can only be filled in.
     */
    uri?: string;
    /**
     * User-Agent, only one of the three policy entries can be filled in.
     */
    userAgent?: string;
}

export interface DayuCcPolicyV2Threshold {
    /**
     * domain.
     */
    domain: string;
    /**
     * Cleaning threshold, -1 indicates that the `default` mode is turned on.
     */
    threshold: number;
}

export interface DayuDdosIpAttachmentV2BoundIpList {
    /**
     * Category of product that can be bound. Valid values: public (CVM and CLB), bm (BM), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), and other (hosted IP). This field is required when you perform binding.
     */
    bizType?: string;
    /**
     * Sub-product category. Valid values: cvm (CVM), lb (Load balancer), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), eip (BM EIP) and other (managed IP). This field is required when you perform binding.
     */
    deviceType?: string;
    /**
     * Anti-DDoS instance ID of the IP. This field is required only when the instance is bound to an IP. For example, this field InstanceId will be eni-* if the instance ID is bound to an ENI IP; none if there is no instance to bind to a managed IP.
     */
    instanceId?: string;
    /**
     * IP address.
     */
    ip: string;
}

export interface DayuDdosPolicyDropOption {
    /**
     * The number of new connections based on destination IP that trigger suppression of connections. Valid value ranges: (0~4294967295).
     */
    badConnThreshold: number;
    /**
     * Indicate whether to check null connection or not.
     */
    checkSyncConn: boolean;
    /**
     * Connection timeout of abnormal connection check. Valid value ranges: (0~65535).
     */
    connTimeout: number;
    /**
     * The limit of concurrent connections based on destination IP. Valid value ranges: (0~4294967295).
     */
    dConnLimit: number;
    /**
     * The limit of new connections based on destination IP. Valid value ranges: (0~4294967295).
     */
    dNewLimit: number;
    /**
     * Indicate whether to drop abroad traffic or not.
     */
    dropAbroad: boolean;
    /**
     * Indicate whether to drop ICMP protocol or not.
     */
    dropIcmp: boolean;
    /**
     * Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
     */
    dropOther: boolean;
    /**
     * Indicate whether to drop TCP protocol or not.
     */
    dropTcp: boolean;
    /**
     * Indicate to drop UDP protocol or not.
     */
    dropUdp: boolean;
    /**
     * The limit of ICMP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
     */
    icmpMbpsLimit: number;
    /**
     * Indicate to enable null connection or not.
     */
    nullConnEnable: boolean;
    /**
     * The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate. Valid value ranges: (0~4294967295)(Mbps).
     */
    otherMbpsLimit: number;
    /**
     * The limit of concurrent connections based on source IP. Valid value ranges: (0~4294967295).
     */
    sConnLimit: number;
    /**
     * The limit of new connections based on source IP. Valid value ranges: (0~4294967295).
     */
    sNewLimit: number;
    /**
     * The limit of syn of abnormal connection check. Valid value ranges: (0~100).
     */
    synLimit: number;
    /**
     * The percentage of syn in ack of abnormal connection check. Valid value ranges: (0~100).
     */
    synRate?: number;
    /**
     * The limit of TCP traffic. Valid value ranges: (0~4294967295)(Mbps).
     */
    tcpMbpsLimit: number;
    /**
     * The limit of UDP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
     */
    udpMbpsLimit: number;
}

export interface DayuDdosPolicyPacketFilter {
    /**
     * Action of port to take. Valid values: `drop`, `drop_black`,`drop_rst`,`drop_black_rst`,`transmit`.`drop`(drop the packet), `drop_black`(drop the packet and black the ip),`drop_rst`(drop the packet and disconnect),`drop_black_rst`(drop the packet, black the ip and disconnect),`transmit`(transmit the packet).
     */
    action?: string;
    /**
     * End port of the destination. Valid value ranges: (0~65535). It must be greater than `d_start_port`.
     */
    dEndPort?: number;
    /**
     * Start port of the destination. Valid value ranges: (0~65535).
     */
    dStartPort?: number;
    /**
     * The depth of match. Valid value ranges: (0~1500).
     */
    depth?: number;
    /**
     * Indicate whether to include the key word/regular expression or not.
     */
    isInclude?: boolean;
    /**
     * Indicate whether to check load or not, `begin_l5` means to match and `no_match` means not.
     */
    matchBegin?: string;
    /**
     * The key word or regular expression.
     */
    matchStr?: string;
    /**
     * Match type. Valid values: `sunday` and `pcre`. `sunday` means key word match while `pcre` means regular match.
     */
    matchType?: string;
    /**
     * The offset of match. Valid value ranges: (0~1500).
     */
    offset?: number;
    /**
     * The max length of the packet. Valid value ranges: (0~1500)(Mbps). It must be greater than `pkt_length_min`.
     */
    pktLengthMax?: number;
    /**
     * The minimum length of the packet. Valid value ranges: (0~1500)(Mbps).
     */
    pktLengthMin?: number;
    /**
     * Protocol. Valid values: `tcp`, `udp`, `icmp`, `all`.
     */
    protocol?: string;
    /**
     * End port of the source. Valid value ranges: (0~65535). It must be greater than `s_start_port`.
     */
    sEndPort?: number;
    /**
     * Start port of the source. Valid value ranges: (0~65535).
     */
    sStartPort?: number;
}

export interface DayuDdosPolicyPortFilter {
    /**
     * Action of port to take. Valid values: `drop`, `transmit`.
     */
    action?: string;
    /**
     * End port. Valid value ranges: (0~65535). It must be greater than `start_port`.
     */
    endPort?: number;
    /**
     * The type of forbidden port. Valid values: `0`, `1`, `2`. `0` for destination ports make effect, `1` for source ports make effect. `2` for both destination and source ports.
     */
    kind?: number;
    /**
     * Protocol. Valid values are `tcp`, `udp`, `icmp`, `all`.
     */
    protocol?: string;
    /**
     * Start port. Valid value ranges: (0~65535).
     */
    startPort?: number;
}

export interface DayuDdosPolicyV2Acl {
    /**
     * Action, optional values: drop, transmit, forward.
     */
    action: string;
    /**
     * The destination port ends, and the value range is 0~65535.
     */
    dPortEnd: number;
    /**
     * The destination port starts, and the value range is 0~65535.
     */
    dPortStart: number;
    /**
     * Protocol type, desirable values tcp, udp, all.
     */
    forwardProtocol: string;
    /**
     * Policy priority, the lower the number, the higher the level, the higher the rule matches, taking a value of 1-1000.Note: This field may return null, indicating that a valid value could not be retrieved.
     */
    priority: number;
    /**
     * The source port ends, and the acceptable value ranges from 0 to 65535.
     */
    sPortEnd: number;
    /**
     * The source port starts, and the value range is 0~65535.
     */
    sPortStart: number;
}

export interface DayuDdosPolicyV2BlackWhiteIp {
    /**
     * Ip of resource instance.
     */
    ip: string;
    /**
     * IP type, value [`black`(blacklist IP), `white` (whitelist IP)].
     */
    ipType: string;
}

export interface DayuDdosPolicyV2DdosConnectLimit {
    /**
     * Based on connection suppression trigger threshold, value range [0,4294967295].
     */
    badConnThreshold: number;
    /**
     * Abnormal connection detection condition, connection timeout, value range [0,65535].
     */
    connTimeout: number;
    /**
     * Concurrent connection control based on destination IP+ destination port.
     */
    dstConnLimit: number;
    /**
     * Limit on the number of news per second based on the destination IP.
     */
    dstNewLimit: number;
    /**
     * Abnormal connection detection conditions, empty connection guard switch, value range[0,1].
     */
    nullConnEnable: number;
    /**
     * Concurrent connection control based on source IP + destination IP.
     */
    sdConnLimit: number;
    /**
     * The limit on the number of news per second based on source IP + destination IP.
     */
    sdNewLimit: number;
    /**
     * Anomaly connection detection condition, syn threshold, value range [0,100].
     */
    synLimit: number;
    /**
     * Anomalous connection detection condition, percentage of syn ack, value range [0,100].
     */
    synRate: number;
}

export interface DayuDdosPolicyV2DdosGeoIpBlockConfig {
    /**
     * Block action, take the value [`drop`, `trans`].
     */
    action: string;
    /**
     * When the RegionType is customized, the AreaList must be filled in, and a maximum of 128 must be filled in.
     */
    areaLists: number[];
    /**
     * Zone type, value [oversea (overseas),china (domestic),customized (custom region)].
     */
    regionType: string;
}

export interface DayuDdosPolicyV2DdosSpeedLimitConfig {
    /**
     * Bandwidth bps.
     */
    bandwidth: number;
    /**
     * List of port ranges, up to 8, multiple; Separated, the range is represented with -; this port range must be filled in; fill in the style 1:0-65535, style 2:80; 443; 1000-2000.
     */
    dstPortList: string;
    /**
     * Speed limit mode, take the value [1 (speed limit based on source IP),2 (speed limit based on destination port)].
     */
    mode: number;
    /**
     * Packet rate pps.
     */
    packetRate: number;
    /**
     * IP protocol numbers, take the value[ ALL (all protocols),TCP (tcp protocol),UDP (udp protocol),SMP (smp protocol),1; 2-100 (custom protocol number range, up to 8)].
     */
    protocolList: string;
}

export interface DayuDdosPolicyV2PacketFilter {
    /**
     * Action, take the value [drop,transmit,drop_black (discard and black out),drop_rst (Interception),drop_black_rst (intercept and block),forward].
     */
    action: string;
    /**
     * The end destination port, take the value 1~65535, which must be greater than or equal to the starting destination port.
     */
    dPortEnd: number;
    /**
     * From the destination port, take the value 0~65535.
     */
    dPortStart: number;
    /**
     * Detection depth from the detection position, value [0,1500].
     */
    depth: number;
    /**
     * Second detection depth starting from the second detection position, value [0,1500].
     */
    depth2: number;
    /**
     * Whether to include the detected value, take the value [0 (included),1 (not included)].
     */
    isNot: number;
    /**
     * Whether the second detection contains the detected value, the value [0 (included),1 (not included)].
     */
    isNot2: number;
    /**
     * Detect position, take the value [begin_l3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), no_match (mismatch)].
     */
    matchBegin: string;
    /**
     * The second detection position. take the value [begin_l3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), no_match (mismatch)].
     */
    matchBegin2: string;
    /**
     * When there is a second detection condition, the and/or relationship with the first detection condition, takes the value [And (and relationship),none (fill in this value when there is no second detection condition)].
     */
    matchLogic: string;
    /**
     * Detection type, value [sunday (keyword),pcre (regular expression)].
     */
    matchType: string;
    /**
     * The second type of detection, takes the value [sunday (keyword),pcre (regular expression)].
     */
    matchType2: string;
    /**
     * Offset from detection position, value range [0, Depth].
     */
    offset: number;
    /**
     * Offset from the second detection position, value range [0,Depth2].
     */
    offset2: number;
    /**
     * The maximum message length, taken from 1 to 1500, must be greater than or equal to the minimum message length.
     */
    pktlenMax: number;
    /**
     * Minimum message length, 1-1500.
     */
    pktlenMin: number;
    /**
     * Protocol, value [tcp udp icmp all].
     */
    protocol: string;
    /**
     * End source port, take the value 1~65535, must be greater than or equal to the starting source port.
     */
    sPortEnd: number;
    /**
     * Start the source port, take the value 0~65535.
     */
    sPortStart: number;
    /**
     * Detect values, key strings or regular expressions, take the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
     */
    str: string;
    /**
     * The second detection value, the key string or regular expression, takes the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
     */
    str2: string;
}

export interface DayuDdosPolicyV2ProtocolBlockConfig {
    /**
     * ICMP block, value [0 (block off), 1 (block on)].
     */
    dropIcmp: number;
    /**
     * Other block, value [0 (block off), 1 (block on)].
     */
    dropOther: number;
    /**
     * TCP block, value [0 (block off), 1 (block on)].
     */
    dropTcp: number;
    /**
     * UDP block, value [0 (block off), 1 (block on)].
     */
    dropUdp: number;
}

export interface DayuDdosPolicyV2WaterPrintConfig {
    /**
     * List of forwarding listeners to which the watermark belongs.
     */
    listeners: outputs.DayuDdosPolicyV2WaterPrintConfigListener[];
    /**
     * Watermark offset, value range: [0-100].
     */
    offset: number;
    /**
     * Whether it is enabled, value [0 (manual open), 1 (immediate operation)].
     */
    openStatus: number;
    /**
     * Watermark check mode, value [`checkall`(normal mode), `shortfpcheckall`(simplified mode)].
     */
    verify: string;
}

export interface DayuDdosPolicyV2WaterPrintConfigListener {
    /**
     * Forwarding protocol, value [TCP, UDP].
     */
    forwardProtocol: string;
    /**
     * Lower limit of forwarding listening port. Values: [1-65535].
     */
    frontendPort: number;
    /**
     * Upper limit of forwarding listening port. Values: [1-65535].
     */
    frontendPortEnd: number;
}

export interface DayuDdosPolicyWatermarkFilter {
    /**
     * Indicate whether to auto-remove the watermark or not.
     */
    autoRemove?: boolean;
    /**
     * The offset of watermark. Valid value ranges: (0~1500).
     */
    offset?: number;
    /**
     * Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
     */
    openSwitch?: boolean;
    /**
     * Port range of TCP, the format is like `2000-3000`.
     */
    tcpPortLists?: string[];
    /**
     * Port range of TCP, the format is like `2000-3000`.
     */
    udpPortLists?: string[];
}

export interface DayuDdosPolicyWatermarkKey {
    content: string;
    createTime: string;
    id: string;
    openSwitch: boolean;
}

export interface DayuL4RuleSourceList {
    /**
     * Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
     */
    source: string;
    /**
     * Weight of the source, the valid value ranges from 0 to 100.
     */
    weight: number;
}

export interface DayuL4RuleV2Rules {
    /**
     * session hold switch.
     */
    keepEnable: boolean;
    /**
     * The keeptime of the layer 4 rule.
     */
    keeptime: number;
    /**
     * LB type of the rule, `1` for weight cycling and `2` for IP hash.
     */
    lbType: number;
    /**
     * Protocol of the rule.
     */
    protocol: string;
    /**
     * Corresponding regional information.
     */
    region: number;
    /**
     * Remove the watermark state.
     */
    removeSwitch: boolean;
    /**
     * Name of the rule.
     */
    ruleName: string;
    /**
     * Source list of the rule.
     */
    sourceLists: outputs.DayuL4RuleV2RulesSourceList[];
    /**
     * The source port of the layer 4 rule.
     */
    sourcePort: number;
    /**
     * Source type, `1` for source of host, `2` for source of IP.
     */
    sourceType: number;
    /**
     * The virtual port of the layer 4 rule.
     */
    virtualPort: number;
}

export interface DayuL4RuleV2RulesSourceList {
    /**
     * Source IP or domain.
     */
    source: string;
    /**
     * Weight of the source.
     */
    weight: number;
}

export interface DayuL7RuleV2Rule {
    /**
     * HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
     */
    ccEnable?: number;
    /**
     * The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
     */
    certType?: number;
    /**
     * Domain of the rule.
     */
    domain: string;
    /**
     * Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
     */
    httpsToHttpEnable?: number;
    /**
     * session hold switch.
     */
    keepEnable: number;
    /**
     * The keeptime of the layer 4 rule.
     */
    keeptime: number;
    /**
     * LB type of the rule, `1` for weight cycling and `2` for IP hash.
     */
    lbType: number;
    /**
     * Protocol of the rule.
     */
    protocol: string;
    sourceLists: outputs.DayuL7RuleV2RuleSourceList[];
    /**
     * Source type, `1` for source of host, `2` for source of IP.
     */
    sourceType: number;
    /**
     * When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
     */
    sslId?: string;
}

export interface DayuL7RuleV2RuleSourceList {
    /**
     * Source IP or domain.
     */
    source: string;
    /**
     * Weight of the source.
     */
    weight: number;
}

export interface DbbrainModifyDiagDbInstanceOperationInstanceConfs {
    /**
     * Database inspection switch, Yes/No.
     */
    dailyInspection?: string;
    /**
     * Instance overview switch, Yes/No.
     */
    overviewDisplay?: string;
}

export interface DbbrainSqlFilterSessionToken {
    /**
     * password.
     */
    password: string;
    /**
     * user name.
     */
    user: string;
}

export interface DbbrainTdsqlAuditLogFilter {
    /**
     * Number of affected rows. Indicates filtering audit logs whose affected rows are greater than this value.
     */
    affectRows?: number;
    /**
     * Database name.
     */
    dbNames?: string[];
    /**
     * Execution time. The unit is: us. It means to filter the audit logs whose execution time is greater than this value.
     */
    execTime?: number;
    /**
     * Client Address.
     */
    hosts?: string[];
    /**
     * Return the number of rows. It means to filter the audit log with the number of returned rows greater than this value.
     */
    sentRows?: number;
    /**
     * Username.
     */
    users?: string[];
}

export interface DcdbAccountPrivilegesAccount {
    /**
     * account host.
     */
    host: string;
    /**
     * account name.
     */
    user: string;
}

export interface DcdbAccountPrivilegesColumnPrivileges {
    /**
     * Database column name.
     */
    column: string;
    /**
     * The name of database.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * Database table name.
     */
    table: string;
}

export interface DcdbAccountPrivilegesDatabasePrivileges {
    /**
     * The name of database.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
}

export interface DcdbAccountPrivilegesTablePrivileges {
    /**
     * The name of database.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * Database table name.
     */
    table: string;
}

export interface DcdbAccountPrivilegesViewPrivileges {
    /**
     * The name of database.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * Database view name.
     */
    view: string;
}

export interface DcdbDbInstanceInitParam {
    /**
     * The name of parameter.
     */
    param: string;
    /**
     * The value of parameter.
     */
    value: string;
}

export interface DcdbDbInstanceResourceTag {
    /**
     * The key of tag.
     */
    tagKey: string;
    /**
     * The value of tag.
     */
    tagValue: string;
}

export interface DcdbDbParametersParams {
    /**
     * The name of parameter.
     */
    param: string;
    /**
     * The value of parameter.
     */
    value: string;
}

export interface DcdbHourdbInstanceResourceTag {
    /**
     * tag key.
     */
    tagKey: string;
    /**
     * tag value.
     */
    tagValue: string;
}

export interface DcxExtraConfigBfdInfo {
    /**
     * detect interval.
     */
    interval?: number;
    /**
     * detect times.
     */
    probeFailedTimes?: number;
}

export interface DcxExtraConfigBgpPeer {
    /**
     * user idc BGP Asn.
     */
    asn?: number;
    /**
     * user bgp key.
     */
    authKey?: string;
}

export interface DcxExtraConfigNqaInfo {
    /**
     * detect ip.
     */
    destinationIp?: string;
    /**
     * detect interval.
     */
    interval?: number;
    /**
     * detect times.
     */
    probeFailedTimes?: number;
}

export interface DcxExtraConfigRouteFilterPrefixes {
    /**
     * user network prefixes.
     */
    cidr?: string;
}

export interface DlcAddUsersToWorkGroupAttachmentAddInfo {
    /**
     * User id set, matched with CAM side uin.
     */
    userIds: string[];
    /**
     * Work group id.
     */
    workGroupId: number;
}

export interface DlcAttachUserPolicyOperationPolicySet {
    /**
     * For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
     */
    catalog: string;
    /**
     * For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
     */
    column?: string;
    /**
     * The time when the permission was created. Leave the input parameter blank.
     */
    createTime?: string;
    /**
     * Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
     */
    dataEngine?: string;
    /**
     * Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
     */
    database: string;
    /**
     * For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
     */
    function?: string;
    /**
     * Policy id.
     */
    id?: number;
    /**
     * Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
     */
    mode?: string;
    /**
     * Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
     */
    operation: string;
    /**
     * Operator, do not fill in the input parameters.
     */
    operator?: string;
    /**
     * Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
     */
    policyType?: string;
    /**
     * Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
     */
    reAuth?: boolean;
    /**
     * Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
     */
    source?: string;
    /**
     * The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
     */
    sourceId?: number;
    /**
     * The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
     */
    sourceName?: string;
    /**
     * For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
     */
    table: string;
    /**
     * For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
     */
    view?: string;
}

export interface DlcAttachWorkGroupPolicyOperationPolicySet {
    /**
     * For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
     */
    catalog: string;
    /**
     * For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
     */
    column?: string;
    /**
     * The time when the permission was created. Leave the input parameter blank.
     */
    createTime?: string;
    /**
     * Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
     */
    dataEngine?: string;
    /**
     * Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
     */
    database: string;
    /**
     * For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
     */
    function?: string;
    /**
     * Policy id.
     */
    id?: number;
    /**
     * Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
     */
    mode?: string;
    /**
     * Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
     */
    operation: string;
    /**
     * Operator, do not fill in the input parameters.
     */
    operator?: string;
    /**
     * Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
     */
    policyType?: string;
    /**
     * Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
     */
    reAuth?: boolean;
    /**
     * Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
     */
    source?: string;
    /**
     * The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
     */
    sourceId?: number;
    /**
     * The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
     */
    sourceName?: string;
    /**
     * For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
     */
    table: string;
    /**
     * For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
     */
    view?: string;
}

export interface DlcBindWorkGroupsToUserAttachmentAddInfo {
    /**
     * User id, matched with CAM side uin.
     */
    userId: string;
    /**
     * Work group id set.
     */
    workGroupIds: number[];
}

export interface DlcDataEngineCrontabResumeSuspendStrategy {
    /**
     * Scheduled pull-up time: For example: 8 o&amp;#39;clock on Monday is expressed as 1000000-08:00:00.
     */
    resumeTime?: string;
    /**
     * Suspend configuration: 0 (default): wait for the task to end before suspending, 1: force suspend.
     */
    suspendStrategy?: number;
    /**
     * Scheduled suspension time: For example: 20 o&amp;#39;clock on Monday is expressed as 1000000-20:00:00.
     */
    suspendTime?: string;
}

export interface DlcDataEngineDataEngineConfigPair {
    /**
     * Configuration items.
     */
    configItem: string;
    /**
     * Configuration value.
     */
    configValue: string;
}

export interface DlcDataEngineSessionResourceTemplate {
    /**
     * Engine driver size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
     */
    driverSize?: string;
    /**
     * Specify the executor max number (in a dynamic configuration scenario), the minimum value is 1, and the maximum value is less than the cluster specification (when ExecutorMaxNumbers is less than ExecutorNums, the value is set to ExecutorNums).
     */
    executorMaxNumbers?: number;
    /**
     * Specify the number of executors. The minimum value is 1 and the maximum value is less than the cluster specification.
     */
    executorNums?: number;
    /**
     * Engine executor size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
     */
    executorSize?: string;
}

export interface DlcDetachUserPolicyOperationPolicySet {
    /**
     * For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
     */
    catalog: string;
    /**
     * For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
     */
    column?: string;
    /**
     * The time when the permission was created. Leave the input parameter blank.
     */
    createTime?: string;
    /**
     * Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
     */
    dataEngine?: string;
    /**
     * Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
     */
    database: string;
    /**
     * For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
     */
    function?: string;
    /**
     * Policy id.
     */
    id?: number;
    /**
     * Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
     */
    mode?: string;
    /**
     * Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
     */
    operation: string;
    /**
     * Operator, do not fill in the input parameters.
     */
    operator?: string;
    /**
     * Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
     */
    policyType?: string;
    /**
     * Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
     */
    reAuth?: boolean;
    /**
     * Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
     */
    source?: string;
    /**
     * The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
     */
    sourceId?: number;
    /**
     * The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
     */
    sourceName?: string;
    /**
     * For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
     */
    table: string;
    /**
     * For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
     */
    view?: string;
}

export interface DlcDetachWorkGroupPolicyOperationPolicySet {
    /**
     * For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
     */
    catalog: string;
    /**
     * For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
     */
    column?: string;
    /**
     * The time when the permission was created. Leave the input parameter blank.
     */
    createTime?: string;
    /**
     * Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
     */
    dataEngine?: string;
    /**
     * Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
     */
    database: string;
    /**
     * For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
     */
    function?: string;
    /**
     * Policy id.
     */
    id?: number;
    /**
     * Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
     */
    mode?: string;
    /**
     * Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
     */
    operation: string;
    /**
     * Operator, do not fill in the input parameters.
     */
    operator?: string;
    /**
     * Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
     */
    policyType?: string;
    /**
     * Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
     */
    reAuth?: boolean;
    /**
     * Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
     */
    source?: string;
    /**
     * The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
     */
    sourceId?: number;
    /**
     * The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
     */
    sourceName?: string;
    /**
     * For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
     */
    table: string;
    /**
     * For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
     */
    view?: string;
}

export interface DlcUpdateRowFilterOperationPolicy {
    /**
     * For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
     */
    catalog: string;
    /**
     * For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
     */
    column?: string;
    /**
     * The time when the permission was created. Leave the input parameter blank.
     */
    createTime?: string;
    /**
     * Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
     */
    dataEngine?: string;
    /**
     * Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
     */
    database: string;
    /**
     * For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
     */
    function?: string;
    /**
     * Policy id.
     */
    id?: number;
    /**
     * Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
     */
    mode?: string;
    /**
     * Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
     */
    operation: string;
    /**
     * Operator, do not fill in the input parameters.
     */
    operator?: string;
    /**
     * Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
     */
    policyType?: string;
    /**
     * Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
     */
    reAuth?: boolean;
    /**
     * Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
     */
    source?: string;
    /**
     * The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
     */
    sourceId?: number;
    /**
     * The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
     */
    sourceName?: string;
    /**
     * For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
     */
    table: string;
    /**
     * For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
     */
    view?: string;
}

export interface DlcUserDataEngineConfigDataEngineConfigPair {
    /**
     * Config key.
     */
    configItem: string;
    /**
     * Config value.
     */
    configValue: string;
}

export interface DlcUserDataEngineConfigSessionResourceTemplate {
    /**
     * Engine driver size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
     */
    driverSize?: string;
    /**
     * Specify the executor max number (in a dynamic configuration scenario), the minimum value is 1, and the maximum value is less than the cluster specification (when ExecutorMaxNumbers is less than ExecutorNums, the value is set to ExecutorNums).
     */
    executorMaxNumbers?: number;
    /**
     * Specify the number of executors. The minimum value is 1 and the maximum value is less than the cluster specification.
     */
    executorNums?: number;
    /**
     * Engine executor size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
     */
    executorSize?: string;
}

export interface DtsCompareTaskObjects {
    /**
     * object items.
     */
    objectItems?: outputs.DtsCompareTaskObjectsObjectItem[];
    /**
     * object mode.
     */
    objectMode: string;
}

export interface DtsCompareTaskObjectsObjectItem {
    /**
     * database mode.
     */
    dbMode: string;
    /**
     * database name.
     */
    dbName: string;
    /**
     * schema name.
     */
    schemaName: string;
    /**
     * table mode.
     */
    tableMode: string;
    /**
     * table list.
     */
    tables?: outputs.DtsCompareTaskObjectsObjectItemTable[];
    /**
     * view mode.
     */
    viewMode: string;
    /**
     * view list.
     */
    views?: outputs.DtsCompareTaskObjectsObjectItemView[];
}

export interface DtsCompareTaskObjectsObjectItemTable {
    /**
     * table name.
     */
    tableName: string;
}

export interface DtsCompareTaskObjectsObjectItemView {
    /**
     * view name.
     */
    viewName: string;
}

export interface DtsMigrateJobDstInfo {
    /**
     * AccessType.
     */
    accessType: string;
    /**
     * DatabaseType.
     */
    databaseType: string;
    /**
     * ExtraAttr.
     */
    extraAttrs?: outputs.DtsMigrateJobDstInfoExtraAttr[];
    /**
     * Info.
     */
    infos: outputs.DtsMigrateJobDstInfoInfo[];
    /**
     * NodeType.
     */
    nodeType: string;
    /**
     * Region.
     */
    region: string;
    /**
     * Supplier.
     */
    supplier?: string;
}

export interface DtsMigrateJobDstInfoExtraAttr {
    /**
     * Key.
     */
    key?: string;
    /**
     * Value.
     */
    value?: string;
}

export interface DtsMigrateJobDstInfoInfo {
    /**
     * Account.
     */
    account?: string;
    /**
     * Account Mode.
     */
    accountMode?: string;
    /**
     * Account Role.
     */
    accountRole?: string;
    /**
     * CcnGwId.
     */
    ccnGwId?: string;
    /**
     * CvmInstanceId.
     */
    cvmInstanceId?: string;
    /**
     * DbKernel.
     */
    dbKernel?: string;
    /**
     * Engine Version.
     */
    engineVersion: string;
    /**
     * Host.
     */
    host?: string;
    /**
     * InstanceId.
     */
    instanceId?: string;
    /**
     * Password.
     */
    password?: string;
    /**
     * Port.
     */
    port?: number;
    /**
     * Role.
     */
    role?: string;
    /**
     * SubnetId.
     */
    subnetId?: string;
    /**
     * Tmp SecretId.
     */
    tmpSecretId?: string;
    /**
     * Tmp SecretKey.
     */
    tmpSecretKey?: string;
    /**
     * Tmp Token.
     */
    tmpToken?: string;
    /**
     * UniqDcgId.
     */
    uniqDcgId?: string;
    /**
     * UniqVpnGwId.
     */
    uniqVpnGwId?: string;
    /**
     * User.
     */
    user?: string;
    /**
     * VpcId.
     */
    vpcId?: string;
}

export interface DtsMigrateJobMigrateOption {
    /**
     * Consistency.
     */
    consistency?: outputs.DtsMigrateJobMigrateOptionConsistency;
    /**
     * Migration object option, you need to tell the migration service which library table objects to migrate.
     */
    databaseTable: outputs.DtsMigrateJobMigrateOptionDatabaseTable;
    /**
     * ExtraAttr.
     */
    extraAttrs?: outputs.DtsMigrateJobMigrateOptionExtraAttr[];
    /**
     * IsDstReadOnly.
     */
    isDstReadOnly?: boolean;
    /**
     * IsMigrateAccount.
     */
    isMigrateAccount?: boolean;
    /**
     * IsOverrideRoot.
     */
    isOverrideRoot?: boolean;
    /**
     * MigrateType.
     */
    migrateType: string;
}

export interface DtsMigrateJobMigrateOptionConsistency {
    /**
     * ConsistencyOption.
     */
    mode?: string;
}

export interface DtsMigrateJobMigrateOptionDatabaseTable {
    /**
     * AdvancedObjects.
     */
    advancedObjects: string[];
    /**
     * The database list.
     */
    databases?: outputs.DtsMigrateJobMigrateOptionDatabaseTableDatabase[];
    /**
     * Object mode. eg:all,partial.
     */
    objectMode: string;
}

export interface DtsMigrateJobMigrateOptionDatabaseTableDatabase {
    /**
     * DB selection mode:all (for all objects under the current object), partial (partial objects), when the ObjectMode is partial, this item is required.
     */
    dbMode?: string;
    /**
     * database name.
     */
    dbName?: string;
    /**
     * EventMode.
     */
    eventMode?: string;
    /**
     * Events.
     */
    events: string[];
    /**
     * FunctionMode.
     */
    functionMode?: string;
    /**
     * Functions.
     */
    functions: string[];
    /**
     * New database name.
     */
    newDbName?: string;
    /**
     * schema name after migration or synchronization.
     */
    newSchemaName?: string;
    /**
     * ProcedureMode.
     */
    procedureMode?: string;
    /**
     * Procedures.
     */
    procedures: string[];
    /**
     * RoleMode.
     */
    roleMode?: string;
    /**
     * Roles.
     */
    roles?: outputs.DtsMigrateJobMigrateOptionDatabaseTableDatabaseRole[];
    /**
     * schema mode: all,partial.
     */
    schemaMode?: string;
    /**
     * schema name.
     */
    schemaName?: string;
    /**
     * table mode: all,partial.
     */
    tableMode?: string;
    /**
     * tables list.
     */
    tables?: outputs.DtsMigrateJobMigrateOptionDatabaseTableDatabaseTable[];
    /**
     * TriggerMode.
     */
    triggerMode?: string;
    /**
     * Triggers.
     */
    triggers: string[];
    /**
     * ViewMode.
     */
    viewMode?: string;
    /**
     * Views.
     */
    views?: outputs.DtsMigrateJobMigrateOptionDatabaseTableDatabaseView[];
}

export interface DtsMigrateJobMigrateOptionDatabaseTableDatabaseRole {
    /**
     * NewRoleName.
     */
    newRoleName?: string;
    /**
     * RoleName.
     */
    roleName?: string;
}

export interface DtsMigrateJobMigrateOptionDatabaseTableDatabaseTable {
    /**
     * new table name.
     */
    newTableName?: string;
    /**
     * table edit mode.
     */
    tableEditMode?: string;
    /**
     * table name.
     */
    tableName?: string;
    /**
     * temporary tables.
     */
    tmpTables: string[];
}

export interface DtsMigrateJobMigrateOptionDatabaseTableDatabaseView {
    /**
     * NewViewName.
     */
    newViewName?: string;
    /**
     * ViewName.
     */
    viewName?: string;
}

export interface DtsMigrateJobMigrateOptionExtraAttr {
    /**
     * Key.
     */
    key?: string;
    /**
     * Value.
     */
    value?: string;
}

export interface DtsMigrateJobSrcInfo {
    /**
     * AccessType.
     */
    accessType: string;
    /**
     * DatabaseType.
     */
    databaseType: string;
    /**
     * ExtraAttr.
     */
    extraAttrs?: outputs.DtsMigrateJobSrcInfoExtraAttr[];
    /**
     * Info.
     */
    infos: outputs.DtsMigrateJobSrcInfoInfo[];
    /**
     * NodeType.
     */
    nodeType: string;
    /**
     * Region.
     */
    region: string;
    /**
     * Supplier.
     */
    supplier?: string;
}

export interface DtsMigrateJobSrcInfoExtraAttr {
    /**
     * Key.
     */
    key?: string;
    /**
     * Value.
     */
    value?: string;
}

export interface DtsMigrateJobSrcInfoInfo {
    /**
     * Account.
     */
    account?: string;
    /**
     * AccountMode.
     */
    accountMode?: string;
    /**
     * AccountRole.
     */
    accountRole?: string;
    /**
     * CcnGwId.
     */
    ccnGwId?: string;
    /**
     * CvmInstanceId.
     */
    cvmInstanceId?: string;
    /**
     * DbKernel.
     */
    dbKernel?: string;
    /**
     * EngineVersion.
     */
    engineVersion: string;
    /**
     * Host.
     */
    host?: string;
    /**
     * InstanceId.
     */
    instanceId?: string;
    /**
     * Password.
     */
    password?: string;
    /**
     * Port.
     */
    port?: number;
    /**
     * Role.
     */
    role?: string;
    /**
     * SubnetId.
     */
    subnetId?: string;
    /**
     * TmpSecretId.
     */
    tmpSecretId?: string;
    /**
     * TmpSecretKey.
     */
    tmpSecretKey?: string;
    /**
     * TmpToken.
     */
    tmpToken?: string;
    /**
     * UniqDcgId.
     */
    uniqDcgId?: string;
    /**
     * UniqVpnGwId.
     */
    uniqVpnGwId?: string;
    /**
     * User.
     */
    user?: string;
    /**
     * VpcId.
     */
    vpcId?: string;
}

export interface DtsMigrateServiceTag {
    /**
     * tag key.
     */
    tagKey?: string;
    /**
     * tag value.
     */
    tagValue?: string;
}

export interface DtsSyncConfigDstInfo {
    /**
     * The account to which the instance belongs. This field is required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    account?: string;
    /**
     * The account to which the resource belongs is empty or self (represents resources within this account), other (represents cross-account resources). Note: This field may return null, indicating that no valid value can be obtained.
     */
    accountMode?: string;
    /**
     * The role during cross-account synchronization, only [a-zA-Z0-9-_]+ is allowed, if it is a cross-account instance, this field is required. Note: This field may return null, indicating that no valid value can be obtained.
     */
    accountRole?: string;
    /**
     * Cloud networking ID, which is required for the cloud networking access type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ccnId?: string;
    /**
     * CVM instance short ID, which is the same as the instance ID displayed on the cloud server console page. If it is a self-built instance of CVM, this field needs to be passed. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cvmInstanceId?: string;
    /**
     * The network environment to which the database belongs. It is required when AccessType is Cloud Network (CCN). `UserIDC` represents the user IDC. `TencentVPC` represents Tencent Cloud VPC. Note: This field may return null, indicating that no valid value can be obtained.
     */
    databaseNetEnv?: string;
    /**
     * Database kernel type, used to distinguish different kernels in tdsql: percona, mariadb, mysql. Note: This field may return null, indicating that no valid value can be obtained.
     */
    dbKernel?: string;
    /**
     * Database name, when the database is cdwpg, it needs to be provided. Note: This field may return null, indicating that no valid value can be obtained.
     */
    dbName?: string;
    /**
     * Whether to use encrypted transmission, UnEncrypted means not to use encrypted transmission, Encrypted means to use encrypted transmission, the default is UnEncrypted. Note: This field may return null, indicating that no valid value can be obtained.
     */
    encryptConn?: string;
    /**
     * Database version, valid only when the instance is an RDS instance, ignored by other instances, the format is: 5.6 or 5.7, the default is 5.6. Note: This field may return null, indicating that no valid value can be obtained.
     */
    engineVersion?: string;
    /**
     * Database instance id. Note: This field may return null, indicating that no valid value can be obtained.
     */
    instanceId?: string;
    /**
     * The IP address of the instance, which is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ip?: string;
    /**
     * Password, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
     */
    password: string;
    /**
     * Instance port, this item is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
     */
    port?: number;
    /**
     * The english name of region. Note: This field may return null, indicating that no valid value can be obtained.
     */
    region?: string;
    /**
     * The node type of tdsql mysql version, the enumeration value is proxy, set. Note: This field may return null, indicating that no valid value can be obtained.
     */
    role?: string;
    /**
     * External role id. Note: This field may return null, indicating that no valid value can be obtained.
     */
    roleExternalId?: string;
    /**
     * The subnet ID under the private network, this item is required for the private network, leased line, and VPN access methods. Note: This field may return null, indicating that no valid value can be obtained.
     */
    subnetId?: string;
    /**
     * Cloud vendor type, when the instance is an RDS instance, fill in aliyun, in other cases fill in others, the default is others. Note: This field may return null, indicating that no valid value can be obtained.
     */
    supplier?: string;
    /**
     * Temporary key Id, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tmpSecretId?: string;
    /**
     * Temporary key Key, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tmpSecretKey?: string;
    /**
     * Temporary Token, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tmpToken?: string;
    /**
     * Leased line gateway ID, which is required for the leased line access type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    uniqDcgId?: string;
    /**
     * VPN gateway ID, which is required for the VPN access type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    uniqVpnGwId?: string;
    /**
     * Username, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
     */
    user?: string;
    /**
     * Private network ID, which is required for access methods of private network, leased line, and VPN. Note: This field may return null, indicating that no valid value can be obtained.
     */
    vpcId?: string;
}

export interface DtsSyncConfigObjects {
    /**
     * For advanced object types, such as function and procedure, when an advanced object needs to be synchronized, the initialization type must include the structure initialization type, that is, the value of the Options.InitType field is Structure or Full. Note: This field may return null, indicating that no valid value can be obtained.
     */
    advancedObjects: string[];
    /**
     * Synchronization object, not null when Mode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
     */
    databases?: outputs.DtsSyncConfigObjectsDatabase[];
    /**
     * Migration object type Partial (partial object). Note: This field may return null, indicating that no valid value can be obtained.
     */
    mode?: string;
    /**
     * OnlineDDL type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    onlineDdl?: outputs.DtsSyncConfigObjectsOnlineDdl;
}

export interface DtsSyncConfigObjectsDatabase {
    /**
     * DB selection mode: All (for all objects under the current object), Partial (for some objects), when the Mode is Partial, this item is required. Note that synchronization of advanced objects does not depend on this value. Note: This field may return null, indicating that no valid value can be obtained.
     */
    dbMode?: string;
    /**
     * The name of the library that needs to be migrated or synchronized. This item is required when the ObjectMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
     */
    dbName?: string;
    /**
     * Event migration mode, all (for all objects under the current object), partial (partial objects). Note: This field may return null, indicating that no valid value can be obtained.
     */
    eventMode?: string;
    /**
     * When EventMode is partial, specify the name of the event to be migrated. Note: This field may return null, indicating that no valid value can be obtained.
     */
    events: string[];
    /**
     * Select the mode to be synchronized, Partial is a part, all is an entire selection. Note: This field may return null, indicating that no valid value can be obtained.
     */
    functionMode?: string;
    /**
     * Required when the FunctionMode value is Partial. Note: This field may return null, indicating that no valid value can be obtained.
     */
    functions: string[];
    /**
     * The name of the library after migration or synchronization, which is the same as the source library by default. Note: This field may return null, indicating that no valid value can be obtained.
     */
    newDbName?: string;
    /**
     * Schema name after migration or synchronization. Note: This field may return null, indicating that no valid value can be obtained.
     */
    newSchemaName?: string;
    /**
     * Select the mode to be synchronized, Partial is part, All is the whole selection. Note: This field may return null, indicating that no valid value can be obtained.
     */
    procedureMode?: string;
    /**
     * Required when the value of ProcedureMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
     */
    procedures: string[];
    /**
     * Migrated or synchronized schemaNote: This field may return null, indicating that no valid value can be obtained.
     */
    schemaName?: string;
    /**
     * Table selection mode: All (for all objects under the current object), Partial (for some objects), this item is required when the DBMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tableMode?: string;
    /**
     * A collection of table graph objects, when TableMode is Partial, this item needs to be filled in. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tables?: outputs.DtsSyncConfigObjectsDatabaseTable[];
    /**
     * Trigger migration mode, all (for all objects under the current object), partial (partial objects). Note: This field may return null, indicating that no valid value can be obtained.
     */
    triggerMode?: string;
    /**
     * When TriggerMode is partial, specify the name of the trigger to be migrated. Note: This field may return null, indicating that no valid value can be obtained.
     */
    triggers: string[];
    /**
     * View selection mode: All is all view objects under the current object, Partial is part of the view objects. Note: This field may return null, indicating that no valid value can be obtained.
     */
    viewMode?: string;
    /**
     * View object collection, when ViewMode is Partial, this item needs to be filled in. Note: This field may return null, indicating that no valid value can be obtained.
     */
    views?: outputs.DtsSyncConfigObjectsDatabaseView[];
}

export interface DtsSyncConfigObjectsDatabaseTable {
    /**
     * Filter condition. Note: This field may return null, indicating that no valid value can be obtained.
     */
    filterCondition?: string;
    /**
     * New table name. Note: This field may return null, indicating that no valid value can be obtained.
     */
    newTableName?: string;
    /**
     * Table name. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tableName?: string;
}

export interface DtsSyncConfigObjectsDatabaseView {
    /**
     * New view name. Note: This field may return null, indicating that no valid value can be obtained.
     */
    newViewName?: string;
    /**
     * View name. Note: This field may return null, indicating that no valid value can be obtained.
     */
    viewName?: string;
}

export interface DtsSyncConfigObjectsOnlineDdl {
    /**
     * status.
     */
    status?: string;
}

export interface DtsSyncConfigOptions {
    /**
     * Whether to add additional columns. Note: This field may return null, indicating that no valid value can be obtained.
     */
    addAdditionalColumn: boolean;
    /**
     * Detailed options for conflict handling, such as conditional rows and conditional actions in conditional overrides. Note: This field may return null, indicating that no valid value can be obtained.
     */
    conflictHandleOption?: outputs.DtsSyncConfigOptionsConflictHandleOption;
    /**
     * Conflict handling options, ReportError (error report, the default value), Ignore (ignore), Cover (cover), ConditionCover (condition coverage). Note: This field may return null, indicating that no valid value can be obtained.
     */
    conflictHandleType: string;
    /**
     * DDL synchronization options, specifically describe which DDLs to synchronize. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ddlOptions?: outputs.DtsSyncConfigOptionsDdlOption[];
    /**
     * The processing of the table with the same name, ReportErrorAfterCheck (pre-check and report error, default), InitializeAfterDelete (delete and re-initialize), ExecuteAfterIgnore (ignore and continue to execute). Note: This field may return null, indicating that no valid value can be obtained.
     */
    dealOfExistSameTable: string;
    /**
     * Synchronous initialization options, Data (full data initialization), Structure (structure initialization), Full (full data and structure initialization, default), None (incremental only). Note: This field may return null, indicating that no valid value can be obtained.
     */
    initType: string;
    /**
     * DML and DDL options to be synchronized, Insert (insert operation), Update (update operation), Delete (delete operation), DDL (structure synchronization), leave blank (not selected), PartialDDL (custom, work with DdlOptions). Note: This field may return null, indicating that no valid value can be obtained.
     */
    opTypes?: string[];
}

export interface DtsSyncConfigOptionsConflictHandleOption {
    /**
     * Columns covered by the condition. Note: This field may return null, indicating that no valid value can be obtained.
     */
    conditionColumn?: string;
    /**
     * Conditional Override Operation. Note: This field may return null, indicating that no valid value can be obtained.
     */
    conditionOperator?: string;
    /**
     * Conditional Override Priority Processing. Note: This field may return null, indicating that no valid value can be obtained.
     */
    conditionOrderInSrcAndDst?: string;
}

export interface DtsSyncConfigOptionsDdlOption {
    /**
     * Ddl type, such as Database, Table, View, Index, etc. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ddlObject?: string;
    /**
     * The specific value of ddl, the possible values for Database [Create,Drop,Alter].The possible values for Table [Create,Drop,Alter,Truncate,Rename].The possible values for View[Create,Drop].For the possible values of Index [Create, Drop]. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ddlValues?: string[];
}

export interface DtsSyncConfigSrcInfo {
    /**
     * The account to which the instance belongs. This field is required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    account?: string;
    /**
     * The account to which the resource belongs is empty or self (represents resources within this account), other (represents cross-account resources). Note: This field may return null, indicating that no valid value can be obtained.
     */
    accountMode?: string;
    /**
     * The role during cross-account synchronization, only [a-zA-Z0-9-_]+ is allowed, if it is a cross-account instance, this field is required. Note: This field may return null, indicating that no valid value can be obtained.
     */
    accountRole?: string;
    /**
     * Cloud networking ID, which is required for the cloud networking access type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ccnId?: string;
    /**
     * CVM instance short ID, which is the same as the instance ID displayed on the cloud server console page. If it is a self-built instance of CVM, this field needs to be passed. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cvmInstanceId?: string;
    /**
     * The network environment to which the database belongs. It is required when AccessType is Cloud Network (CCN). `UserIDC` represents the user IDC. `TencentVPC` represents Tencent Cloud VPC. Note: This field may return null, indicating that no valid value can be obtained.
     */
    databaseNetEnv?: string;
    /**
     * Database kernel type, used to distinguish different kernels in tdsql: percona, mariadb, mysql. Note: This field may return null, indicating that no valid value can be obtained.
     */
    dbKernel?: string;
    /**
     * Database name, when the database is cdwpg, it needs to be provided. Note: This field may return null, indicating that no valid value can be obtained.
     */
    dbName?: string;
    /**
     * Whether to use encrypted transmission, UnEncrypted means not to use encrypted transmission, Encrypted means to use encrypted transmission, the default is UnEncrypted. Note: This field may return null, indicating that no valid value can be obtained.
     */
    encryptConn?: string;
    /**
     * Database version, valid only when the instance is an RDS instance, ignored by other instances, the format is: 5.6 or 5.7, the default is 5.6. Note: This field may return null, indicating that no valid value can be obtained.
     */
    engineVersion?: string;
    /**
     * Database instance id. Note: This field may return null, indicating that no valid value can be obtained.
     */
    instanceId?: string;
    /**
     * The IP address of the instance, which is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ip?: string;
    /**
     * Password, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
     */
    password: string;
    /**
     * Instance port, this item is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
     */
    port?: number;
    /**
     * The english name of region. Note: This field may return null, indicating that no valid value can be obtained.
     */
    region?: string;
    /**
     * The node type of tdsql mysql version, the enumeration value is proxy, set. Note: This field may return null, indicating that no valid value can be obtained.
     */
    role?: string;
    /**
     * External role id. Note: This field may return null, indicating that no valid value can be obtained.
     */
    roleExternalId?: string;
    /**
     * The subnet ID under the private network, this item is required for the private network, leased line, and VPN access methods. Note: This field may return null, indicating that no valid value can be obtained.
     */
    subnetId?: string;
    /**
     * Cloud vendor type, when the instance is an RDS instance, fill in aliyun, in other cases fill in others, the default is others. Note: This field may return null, indicating that no valid value can be obtained.
     */
    supplier?: string;
    /**
     * Temporary key Id, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tmpSecretId?: string;
    /**
     * Temporary key Key, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tmpSecretKey?: string;
    /**
     * Temporary Token, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tmpToken?: string;
    /**
     * Leased line gateway ID, which is required for the leased line access type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    uniqDcgId?: string;
    /**
     * VPN gateway ID, which is required for the VPN access type. Note: This field may return null, indicating that no valid value can be obtained.
     */
    uniqVpnGwId?: string;
    /**
     * Username, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
     */
    user?: string;
    /**
     * Private network ID, which is required for access methods of private network, leased line, and VPN. Note: This field may return null, indicating that no valid value can be obtained.
     */
    vpcId?: string;
}

export interface DtsSyncJobTag {
    /**
     * tag key.
     */
    tagKey?: string;
    /**
     * tag value.
     */
    tagValue?: string;
}

export interface EbEventConnectorConnectionDescription {
    /**
     * apigw parameter,Note: This field may return null, indicating that no valid value can be obtained.
     */
    apiGwParams?: outputs.EbEventConnectorConnectionDescriptionApiGwParams;
    /**
     * ckafka parameter, note: this field may return null, indicating that no valid value can be obtained.
     */
    ckafkaParams?: outputs.EbEventConnectorConnectionDescriptionCkafkaParams;
    /**
     * Resource qcs six-segment style, more reference [resource six-segment style](https://cloud.tencent.com/document/product/598/10606).
     */
    resourceDescription: string;
}

export interface EbEventConnectorConnectionDescriptionApiGwParams {
    /**
     * POST.
     */
    method: string;
    /**
     * HTTPS.
     */
    protocol: string;
}

export interface EbEventConnectorConnectionDescriptionCkafkaParams {
    /**
     * kafka offset.
     */
    offset: string;
    /**
     * ckafka  topic.
     */
    topicName: string;
}

export interface EbEventTargetTargetDescription {
    /**
     * Ckafka parameters.
     */
    ckafkaTargetParams?: outputs.EbEventTargetTargetDescriptionCkafkaTargetParams;
    /**
     * ElasticSearch parameters.
     */
    esTargetParams?: outputs.EbEventTargetTargetDescriptionEsTargetParams;
    /**
     * QCS resource six-stage format, more references [resource six-stage format](https://cloud.tencent.com/document/product/598/10606).
     */
    resourceDescription: string;
    /**
     * cloud function parameters.
     */
    scfParams?: outputs.EbEventTargetTargetDescriptionScfParams;
}

export interface EbEventTargetTargetDescriptionCkafkaTargetParams {
    /**
     * retry strategy.
     */
    retryPolicy: outputs.EbEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy;
    /**
     * The ckafka topic to deliver to.
     */
    topicName: string;
}

export interface EbEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy {
    /**
     * Maximum number of retries.
     */
    maxRetryAttempts: number;
    /**
     * Retry Interval Unit: Seconds.
     */
    retryInterval: number;
}

export interface EbEventTargetTargetDescriptionEsTargetParams {
    /**
     * index prefix.
     */
    indexPrefix: string;
    /**
     * DTS index configuration.
     */
    indexSuffixMode: string;
    /**
     * es template type.
     */
    indexTemplateType?: string;
    /**
     * network connection type.
     */
    netMode: string;
    /**
     * DTS event configuration.
     */
    outputMode: string;
    /**
     * es log rotation granularity.
     */
    rotationInterval: string;
}

export interface EbEventTargetTargetDescriptionScfParams {
    /**
     * Maximum number of events for batch delivery.
     */
    batchEventCount?: number;
    /**
     * Maximum waiting time for bulk delivery.
     */
    batchTimeout?: number;
    /**
     * Enable batch delivery.
     */
    enableBatchDelivery?: boolean;
}

export interface EbEventTransformTransformation {
    /**
     * Describe how to filter data.
     */
    etlFilter?: outputs.EbEventTransformTransformationEtlFilter;
    /**
     * Describe how to extract data.
     */
    extraction?: outputs.EbEventTransformTransformationExtraction;
    /**
     * Describe how to convert data.
     */
    transform?: outputs.EbEventTransformTransformationTransform;
}

export interface EbEventTransformTransformationEtlFilter {
    /**
     * Grammatical Rules are consistent.
     */
    filter: string;
}

export interface EbEventTransformTransformationExtraction {
    /**
     * JsonPath, if not specified, the default value $.
     */
    extractionInputPath: string;
    /**
     * Value: `TEXT`, `JSON`.
     */
    format: string;
    /**
     * Only Text needs to be passed.
     */
    textParams?: outputs.EbEventTransformTransformationExtractionTextParams;
}

export interface EbEventTransformTransformationExtractionTextParams {
    /**
     * Fill in the regular expression: length 128.
     */
    regex?: string;
    /**
     * `Comma`, `|`, `tab`, `space`, `newline`, `%`, `#`, the limit length is 1.
     */
    separator?: string;
}

export interface EbEventTransformTransformationTransform {
    /**
     * Describe how the data is transformed.
     */
    outputStructs: outputs.EbEventTransformTransformationTransformOutputStruct[];
}

export interface EbEventTransformTransformationTransformOutputStruct {
    /**
     * Corresponding to the key in the output json.
     */
    key: string;
    /**
     * You can fill in the json-path and also support constants or built-in keyword date types.
     */
    value: string;
    /**
     * The data type of value, optional values: `STRING`, `NUMBER`, `BOOLEAN`, `NULL`, `SYS_VARIABLE`, `JSONPATH`.
     */
    valueType: string;
}

export interface EbPutEventsEventList {
    /**
     * Event data, the content is controlled by the system that created the event, the current datacontenttype only supports application/json;charset=utf-8, so this field is a json string.
     */
    data: string;
    /**
     * Event source information, new product reporting must comply with EB specifications.
     */
    source: string;
    /**
     * Detailed description of the event source, customizable, optional. The cloud service defaults to the standard qcs resource representation syntax: qcs::dts:ap-guangzhou:appid/uin:xxx.
     */
    subject: string;
    /**
     * The timestamp in milliseconds when the event occurred,time.Now().UnixNano()/1e6.
     */
    time?: number;
    /**
     * Event type, customizable, optional. The cloud service writes COS:Created:PostObject by default, use: to separate the type field.
     */
    type: string;
}

export interface EksClusterDnsServer {
    /**
     * DNS Server domain. Empty indicates all domain.
     */
    domain?: string;
    /**
     * List of DNS Server IP address, pattern: "ip[:port]".
     */
    servers?: string[];
}

export interface EksClusterInternalLb {
    /**
     * Indicates weather the internal access LB enabled.
     */
    enabled: boolean;
    /**
     * ID of subnet which related to Internal LB.
     */
    subnetId?: string;
}

export interface EksClusterPublicLb {
    /**
     * List of CIDRs which allowed to access.
     */
    allowFromCidrs?: string[];
    /**
     * Indicates weather the public access LB enabled.
     */
    enabled: boolean;
    /**
     * Extra param text json.
     */
    extraParam?: string;
    /**
     * Security group.
     */
    securityGroup: string;
    /**
     * List of security allow IP or CIDRs, default deny all.
     */
    securityPolicies?: string[];
}

export interface EksContainerInstanceCbsVolume {
    /**
     * ID of CBS.
     */
    diskId: string;
    /**
     * Name of CBS volume.
     */
    name: string;
}

export interface EksContainerInstanceContainer {
    /**
     * Container launch argument list.
     */
    args?: string[];
    /**
     * Container launch command list.
     */
    commands?: string[];
    /**
     * Number of cpu core of container.
     */
    cpu?: number;
    /**
     * Map of environment variables of container OS.
     */
    envVars?: {[key: string]: string};
    /**
     * Image of Container.
     */
    image: string;
    /**
     * Configuration block of LivenessProbe.
     */
    livenessProbe?: outputs.EksContainerInstanceContainerLivenessProbe;
    /**
     * Memory size of container.
     */
    memory?: number;
    /**
     * Name of Container.
     */
    name: string;
    /**
     * Configuration block of ReadinessProbe.
     */
    readinessProbe?: outputs.EksContainerInstanceContainerReadinessProbe;
    /**
     * List of volume mount informations.
     */
    volumeMounts?: outputs.EksContainerInstanceContainerVolumeMount[];
    /**
     * Container working directory.
     */
    workingDir?: string;
}

export interface EksContainerInstanceContainerLivenessProbe {
    /**
     * List of execution commands.
     */
    execCommands?: string[];
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
     */
    failureThreshold?: number;
    /**
     * HttpGet detection path.
     */
    httpGetPath?: string;
    /**
     * HttpGet detection port.
     */
    httpGetPort?: number;
    /**
     * HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
     */
    httpGetScheme?: string;
    /**
     * Number of seconds after the container has started before probes are initiated.
     */
    initDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
     */
    successThreshold?: number;
    /**
     * TCP Socket detection port.
     */
    tcpSocketPort?: number;
    /**
     * Number of seconds after which the probe times out.
     * Defaults to 1 second. Minimum value is `1`.
     */
    timeoutSeconds?: number;
}

export interface EksContainerInstanceContainerReadinessProbe {
    /**
     * List of execution commands.
     */
    execCommands?: string[];
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
     */
    failureThreshold?: number;
    /**
     * HttpGet detection path.
     */
    httpGetPath?: string;
    /**
     * HttpGet detection port.
     */
    httpGetPort?: number;
    /**
     * HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
     */
    httpGetScheme?: string;
    /**
     * Number of seconds after the container has started before probes are initiated.
     */
    initDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
     */
    successThreshold?: number;
    /**
     * TCP Socket detection port.
     */
    tcpSocketPort?: number;
    /**
     * Number of seconds after which the probe times out.
     * Defaults to 1 second. Minimum value is `1`.
     */
    timeoutSeconds?: number;
}

export interface EksContainerInstanceContainerVolumeMount {
    /**
     * Volume mount propagation.
     */
    mountPropagation?: string;
    /**
     * Volume name.
     */
    name: string;
    /**
     * Volume mount path.
     */
    path: string;
    /**
     * Whether the volume is read-only.
     */
    readOnly?: boolean;
    /**
     * Volume mount sub-path.
     */
    subPath?: string;
    /**
     * Volume mount sub-path expression.
     */
    subPathExpr?: string;
}

export interface EksContainerInstanceImageRegistryCredential {
    /**
     * Name of credential.
     */
    name?: string;
    /**
     * Password.
     */
    password?: string;
    /**
     * Address of image registry.
     */
    server?: string;
    /**
     * Username.
     */
    username?: string;
}

export interface EksContainerInstanceInitContainer {
    /**
     * Container launch argument list.
     */
    args?: string[];
    /**
     * Container launch command list.
     */
    commands?: string[];
    /**
     * Number of cpu core of container.
     */
    cpu?: number;
    /**
     * Map of environment variables of container OS.
     */
    envVars?: {[key: string]: string};
    /**
     * Image of Container.
     */
    image: string;
    /**
     * Memory size of container.
     */
    memory?: number;
    /**
     * Name of Container.
     */
    name: string;
    /**
     * List of volume mount informations.
     */
    volumeMounts?: outputs.EksContainerInstanceInitContainerVolumeMount[];
    /**
     * Container working directory.
     */
    workingDir?: string;
}

export interface EksContainerInstanceInitContainerVolumeMount {
    /**
     * Volume mount propagation.
     */
    mountPropagation?: string;
    /**
     * Volume name.
     */
    name: string;
    /**
     * Volume mount path.
     */
    path: string;
    /**
     * Whether the volume is read-only.
     */
    readOnly?: boolean;
    /**
     * Volume mount sub-path.
     */
    subPath?: string;
    /**
     * Volume mount sub-path expression.
     */
    subPathExpr?: string;
}

export interface EksContainerInstanceNfsVolume {
    /**
     * Name of NFS volume.
     */
    name: string;
    /**
     * NFS volume path.
     */
    path: string;
    /**
     * Indicates whether the volume is read only. Default is `false`.
     */
    readOnly?: boolean;
    /**
     * NFS server address.
     */
    server: string;
}

export interface ElasticsearchDiagnoseDiagnoseJobMeta {
    jobDescription: string;
    jobName: string;
    jobZhName: string;
}

export interface ElasticsearchInstanceEsAcl {
    /**
     * Blacklist of kibana access.
     */
    blackLists: string[];
    /**
     * Whitelist of kibana access.
     */
    whiteLists: string[];
}

export interface ElasticsearchInstanceMultiZoneInfo {
    /**
     * Availability zone.
     */
    availabilityZone: string;
    /**
     * The ID of a VPC subnetwork.
     */
    subnetId: string;
}

export interface ElasticsearchInstanceNodeInfoList {
    /**
     * Node disk size. Unit is GB, and default value is `100`.
     */
    diskSize?: number;
    /**
     * Node disk type. Valid values are `CLOUD_SSD`, `CLOUD_PREMIUM`, `CLOUD_HSSD`, `CLOUD_BSSD`, `CLOUD_BIGDATA` and `CLOUD_HIGHIO`. The default value is `CLOUD_SSD`.
     */
    diskType?: string;
    /**
     * Decides to encrypt this disk or not.
     */
    encrypt?: boolean;
    /**
     * Number of nodes.
     */
    nodeNum: number;
    /**
     * Node specification, and valid values refer to [document of tencentcloud](https://intl.cloud.tencent.com/document/product/845/18376).
     */
    nodeType: string;
    /**
     * Node type. Valid values are `hotData`, `warmData` and `dedicatedMaster`. The default value is 'hotData`.
     */
    type?: string;
}

export interface ElasticsearchInstanceWebNodeTypeInfo {
    /**
     * Visual node number.
     */
    nodeNum: number;
    /**
     * Visual node specifications.
     */
    nodeType: string;
}

export interface ElasticsearchLogstashOperationDuration {
    /**
     * day of week, from Monday to Sunday, value range: [0, 6]notes: may return null when missing.
     */
    periods: number[];
    /**
     * operation end time.
     */
    timeEnd: string;
    /**
     * operation start time.
     */
    timeStart: string;
    /**
     * time zone, for example: UTC+8.
     */
    timeZone: string;
}

export interface ElasticsearchLogstashPipelinePipeline {
    /**
     * Pipeline batch processing delay.
     */
    batchDelay: number;
    /**
     * Pipe batch size.
     */
    batchSize: number;
    /**
     * Pipeline configuration content.
     */
    config: string;
    /**
     * Pipeline description information.
     */
    pipelineDesc: string;
    /**
     * Pipeline id.
     */
    pipelineId: string;
    /**
     * Number of pipeline buffer queue checkpoint writes.
     */
    queueCheckPointWrites: number;
    /**
     * Pipeline buffer queue size.
     */
    queueMaxBytes: string;
    /**
     * Pipeline buffer queue type.
     */
    queueType: string;
    /**
     * Number of Worker of pipe.
     */
    workers: number;
}

export interface EmrClusterPlacementInfo {
    /**
     * Project id.
     */
    projectId: number;
    /**
     * Zone.
     */
    zone: string;
}

export interface EmrClusterResourceSpec {
    /**
     * The number of common node.
     */
    commonCount: number;
    commonResourceSpec?: outputs.EmrClusterResourceSpecCommonResourceSpec;
    /**
     * The number of core node.
     */
    coreCount: number;
    coreResourceSpec?: outputs.EmrClusterResourceSpecCoreResourceSpec;
    /**
     * The number of master node.
     */
    masterCount: number;
    masterResourceSpec?: outputs.EmrClusterResourceSpecMasterResourceSpec;
    /**
     * The number of core node.
     */
    taskCount: number;
    taskResourceSpec?: outputs.EmrClusterResourceSpecTaskResourceSpec;
}

export interface EmrClusterResourceSpecCommonResourceSpec {
    cpu?: number;
    diskSize?: number;
    diskType?: string;
    memSize?: number;
    rootSize?: number;
    spec?: string;
    storageType?: number;
}

export interface EmrClusterResourceSpecCoreResourceSpec {
    cpu?: number;
    diskSize?: number;
    diskType?: string;
    memSize?: number;
    rootSize?: number;
    spec?: string;
    storageType?: number;
}

export interface EmrClusterResourceSpecMasterResourceSpec {
    cpu?: number;
    diskSize?: number;
    diskType?: string;
    memSize?: number;
    rootSize?: number;
    spec?: string;
    storageType?: number;
}

export interface EmrClusterResourceSpecTaskResourceSpec {
    cpu?: number;
    diskSize?: number;
    diskType?: string;
    memSize?: number;
    rootSize?: number;
    spec?: string;
    storageType?: number;
}

export interface EniIpv4 {
    /**
     * Description of the IP, maximum length 25.
     */
    description?: string;
    /**
     * Intranet IP.
     */
    ip: string;
    /**
     * Indicates whether the IP is primary.
     */
    primary: boolean;
}

export interface EniIpv4AddressPrivateIpAddress {
    /**
     * EIP instance ID, such as `eip-11112222`.
     */
    addressId: string;
    /**
     * Private IP description.
     */
    description: string;
    /**
     * Whether the public IP is blocked.
     */
    isWanIpBlocked: boolean;
    /**
     * Whether it is a primary IP.
     */
    primary: boolean;
    /**
     * Private IP address.
     */
    privateIpAddress: string;
    /**
     * Public IP address.
     */
    publicIpAddress: string;
    /**
     * IP service level. Values: PT` (Gold), `AU` (Silver), `AG `(Bronze) and DEFAULT` (Default).
     */
    qosLevel: string;
    /**
     * IP status: `PENDING`: Creating, `MIGRATING`: Migrating, `DELETING`: Deleting, `AVAILABLE`: Available.
     */
    state: string;
}

export interface EniIpv4Info {
    description: string;
    ip: string;
    primary: boolean;
}

export interface EniIpv6AddressIpv6Address {
    /**
     * `IPv6` address, in the form of: `3402:4e00:20:100:0:8cd9:2a67:71f3`.
     */
    address: string;
    /**
     * `EIP` instance `ID`, such as:`eip-hxlqja90`.
     */
    addressId: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Whether the public network IP is blocked.
     */
    isWanIpBlocked: boolean;
    /**
     * Whether to master `IP`.
     */
    primary: boolean;
    /**
     * `IPv6` address status: `PENDING`: pending, `MIGRATING`: migrating, `DELETING`: deleting, `AVAILABLE`: available.
     */
    state: string;
}

export interface GaapCustomHeaderHeader {
    /**
     * Header name.
     */
    headerName: string;
    /**
     * Header value.
     */
    headerValue: string;
}

export interface GaapHttpRuleRealserver {
    /**
     * ID of the GAAP realserver.
     */
    id: string;
    /**
     * IP of the GAAP realserver.
     */
    ip: string;
    /**
     * Port of the GAAP realserver.
     */
    port: number;
    /**
     * Scheduling weight, default value is `1`. Valid value ranges: (1~100).
     */
    weight?: number;
}

export interface GaapLayer4ListenerRealserverBindSet {
    /**
     * ID of the GAAP realserver.
     */
    id: string;
    /**
     * IP of the GAAP realserver.
     */
    ip: string;
    /**
     * Port of the GAAP realserver.
     */
    port: number;
    /**
     * Scheduling weight, default value is `1`. The range of values is [1,100].
     */
    weight?: number;
}

export interface GetAddressTemplateGroupsGroupList {
    id: string;
    name: string;
    templateIds: string[];
}

export interface GetAddressTemplatesTemplateList {
    addresses: string[];
    id: string;
    name: string;
}

export interface GetAntiddosBasicDeviceStatusClbData {
    key: string;
    value: string;
}

export interface GetAntiddosBasicDeviceStatusData {
    key: string;
    value: string;
}

export interface GetAntiddosListListenerLayer4Listener {
    backendPort: number;
    frontendPort: number;
    instanceDetailRules: outputs.GetAntiddosListListenerLayer4ListenerInstanceDetailRule[];
    instanceDetails: outputs.GetAntiddosListListenerLayer4ListenerInstanceDetail[];
    protocol: string;
    realServers: outputs.GetAntiddosListListenerLayer4ListenerRealServer[];
}

export interface GetAntiddosListListenerLayer4ListenerInstanceDetail {
    eipLists: string[];
    instanceId: string;
}

export interface GetAntiddosListListenerLayer4ListenerInstanceDetailRule {
    cname: string;
    eipLists: string[];
    instanceId: string;
}

export interface GetAntiddosListListenerLayer4ListenerRealServer {
    port: number;
    realServer: string;
    rsType: number;
    weight: number;
}

export interface GetAntiddosListListenerLayer7Listener {
    domain: string;
    instanceDetailRules: outputs.GetAntiddosListListenerLayer7ListenerInstanceDetailRule[];
    instanceDetails: outputs.GetAntiddosListListenerLayer7ListenerInstanceDetail[];
    protocol: string;
    proxyTypeLists: outputs.GetAntiddosListListenerLayer7ListenerProxyTypeList[];
    realServers: outputs.GetAntiddosListListenerLayer7ListenerRealServer[];
    vport: number;
}

export interface GetAntiddosListListenerLayer7ListenerInstanceDetail {
    eipLists: string[];
    instanceId: string;
}

export interface GetAntiddosListListenerLayer7ListenerInstanceDetailRule {
    cname: string;
    eipLists: string[];
    instanceId: string;
}

export interface GetAntiddosListListenerLayer7ListenerProxyTypeList {
    proxyPorts: number[];
    proxyType: string;
}

export interface GetAntiddosListListenerLayer7ListenerRealServer {
    port: number;
    realServer: string;
    rsType: number;
    weight: number;
}

export interface GetAntiddosOverviewDdosEventListEventList {
    attackStatus: number;
    attackType: string;
    business: string;
    endTime: string;
    id: string;
    instanceId: string;
    instanceName: string;
    mbps: number;
    pps: number;
    startTime: string;
    vip: string;
}

export interface GetApiGatewayApiAppApiResult {
    apiBusinessType: string;
    apiDesc: string;
    apiId: string;
    apiName: string;
    apiType: string;
    authRelationApiId: string;
    authType: string;
    base64EncodedTriggerRules: outputs.GetApiGatewayApiAppApiResultBase64EncodedTriggerRule[];
    constantParameters: outputs.GetApiGatewayApiAppApiResultConstantParameter[];
    createdTime: string;
    enableCors: boolean;
    environments: string[];
    internalDomain: string;
    isBase64Encoded: boolean;
    isBase64Trigger: boolean;
    isDebugAfterCharge: boolean;
    microServices: outputs.GetApiGatewayApiAppApiResultMicroService[];
    microServicesInfos: number[];
    modifiedTime: string;
    oauthConfigs: outputs.GetApiGatewayApiAppApiResultOauthConfig[];
    protocol: string;
    requestConfigs: outputs.GetApiGatewayApiAppApiResultRequestConfig[];
    requestParameters: outputs.GetApiGatewayApiAppApiResultRequestParameter[];
    responseErrorCodes: outputs.GetApiGatewayApiAppApiResultResponseErrorCode[];
    responseFailExample: string;
    responseSuccessExample: string;
    responseType: string;
    serviceConfigs: outputs.GetApiGatewayApiAppApiResultServiceConfig[];
    serviceDesc: string;
    serviceId: string;
    serviceMockReturnMessage: string;
    serviceName: string;
    serviceParameters: outputs.GetApiGatewayApiAppApiResultServiceParameter[];
    serviceScfFunctionName: string;
    serviceScfFunctionNamespace: string;
    serviceScfFunctionQualifier: string;
    serviceScfIsIntegratedResponse: boolean;
    serviceTimeout: number;
    serviceTsfHealthCheckConfs: outputs.GetApiGatewayApiAppApiResultServiceTsfHealthCheckConf[];
    serviceTsfLoadBalanceConfs: outputs.GetApiGatewayApiAppApiResultServiceTsfLoadBalanceConf[];
    serviceType: string;
    serviceWebsocketCleanupFunctionName: string;
    serviceWebsocketCleanupFunctionNamespace: string;
    serviceWebsocketCleanupFunctionQualifier: string;
    serviceWebsocketRegisterFunctionName: string;
    serviceWebsocketRegisterFunctionNamespace: string;
    serviceWebsocketRegisterFunctionQualifier: string;
    serviceWebsocketTransportFunctionName: string;
    serviceWebsocketTransportFunctionNamespace: string;
    serviceWebsocketTransportFunctionQualifier: string;
    tags: outputs.GetApiGatewayApiAppApiResultTag[];
}

export interface GetApiGatewayApiAppApiResultBase64EncodedTriggerRule {
    name: string;
    values: string[];
}

export interface GetApiGatewayApiAppApiResultConstantParameter {
    defaultValue: string;
    desc: string;
    name: string;
    position: string;
}

export interface GetApiGatewayApiAppApiResultMicroService {
    clusterId: string;
    microServiceName: string;
    namespaceId: string;
}

export interface GetApiGatewayApiAppApiResultOauthConfig {
    loginRedirectUrl: string;
    publicKey: string;
    tokenLocation: string;
}

export interface GetApiGatewayApiAppApiResultRequestConfig {
    method: string;
    path: string;
}

export interface GetApiGatewayApiAppApiResultRequestParameter {
    defaultValue: string;
    desc: string;
    name: string;
    position: string;
    required: boolean;
    type: string;
}

export interface GetApiGatewayApiAppApiResultResponseErrorCode {
    code: number;
    convertedCode: number;
    desc: string;
    msg: string;
    needConvert: boolean;
}

export interface GetApiGatewayApiAppApiResultServiceConfig {
    method: string;
    path: string;
    product: string;
    uniqVpcId: string;
    upstreamId: string;
    url: string;
}

export interface GetApiGatewayApiAppApiResultServiceParameter {
    defaultValue: string;
    name: string;
    position: string;
    relevantRequestParameterDesc: string;
    relevantRequestParameterName: string;
    relevantRequestParameterPosition: string;
}

export interface GetApiGatewayApiAppApiResultServiceTsfHealthCheckConf {
    errorThresholdPercentage: number;
    isHealthCheck: boolean;
    requestVolumeThreshold: number;
    sleepWindowInMilliseconds: number;
}

export interface GetApiGatewayApiAppApiResultServiceTsfLoadBalanceConf {
    isLoadBalance: boolean;
    method: string;
    sessionStickRequired: boolean;
    sessionStickTimeout: number;
}

export interface GetApiGatewayApiAppApiResultTag {
    key: string;
    value: string;
}

export interface GetApiGatewayApiAppServiceApiIdStatusSet {
    apiBusinessType: string;
    apiDesc: string;
    apiId: string;
    apiName: string;
    apiType: string;
    authRelationApiId: string;
    authType: string;
    createdTime: string;
    isDebugAfterCharge: boolean;
    method: string;
    modifiedTime: string;
    oauthConfigs: outputs.GetApiGatewayApiAppServiceApiIdStatusSetOauthConfig[];
    path: string;
    protocol: string;
    serviceId: string;
    tokenLocation: string;
    uniqVpcId: string;
}

export interface GetApiGatewayApiAppServiceApiIdStatusSetOauthConfig {
    loginRedirectUrl: string;
    publicKey: string;
    tokenLocation: string;
}

export interface GetApiGatewayApiAppServiceUsagePlanList {
    createdTime: string;
    environment: string;
    maxRequestNumPreSec: number;
    modifiedTime: string;
    usagePlanDesc: string;
    usagePlanId: string;
    usagePlanName: string;
}

export interface GetApiGatewayApiAppsApiAppList {
    apiAppDesc: string;
    apiAppId: string;
    apiAppKey: string;
    apiAppName: string;
    apiAppSecret: string;
    createdTime: string;
    modifiedTime: string;
}

export interface GetApiGatewayApiDocsApiDocList {
    apiDocId: string;
    apiDocName: string;
    apiDocStatus: string;
}

export interface GetApiGatewayApiKeysList {
    accessKeySecret: string;
    apiKeyId: string;
    createTime: string;
    modifyTime: string;
    status: string;
}

export interface GetApiGatewayApiPluginsResult {
    attachedTime: string;
    description: string;
    environment: string;
    pluginData: string;
    pluginId: string;
    pluginName: string;
    pluginType: string;
}

export interface GetApiGatewayApiUsagePlansResult {
    apiId: string;
    apiName: string;
    createdTime: string;
    environment: string;
    inUseRequestNum: number;
    maxRequestNum: number;
    maxRequestNumPreSec: number;
    method: string;
    modifiedTime: string;
    path: string;
    serviceId: string;
    serviceName: string;
    usagePlanDesc: string;
    usagePlanId: string;
    usagePlanName: string;
}

export interface GetApiGatewayApisList {
    apiDesc: string;
    apiName: string;
    authType: string;
    createTime: string;
    enableCors: boolean;
    modifyTime: string;
    protocol: string;
    requestConfigMethod: string;
    requestConfigPath: string;
    requestParameters: outputs.GetApiGatewayApisListRequestParameter[];
    responseErrorCodes: outputs.GetApiGatewayApisListResponseErrorCode[];
    responseFailExample: string;
    responseSuccessExample: string;
    responseType: string;
    serviceConfigMethod: string;
    serviceConfigMockReturnMessage: string;
    serviceConfigPath: string;
    serviceConfigProduct: string;
    serviceConfigScfFunctionName: string;
    serviceConfigScfFunctionNamespace: string;
    serviceConfigScfFunctionQualifier: string;
    serviceConfigTimeout: number;
    serviceConfigType: string;
    serviceConfigUrl: string;
    serviceConfigVpcId: string;
    serviceId: string;
}

export interface GetApiGatewayApisListRequestParameter {
    defaultValue: string;
    desc: string;
    name: string;
    position: string;
    required: boolean;
    type: string;
}

export interface GetApiGatewayApisListResponseErrorCode {
    code: number;
    convertedCode: number;
    desc: string;
    msg: string;
    needConvert: boolean;
}

export interface GetApiGatewayBindApiAppsStatusFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter value of the field.
     */
    values: string[];
}

export interface GetApiGatewayBindApiAppsStatusResult {
    apiAppApiSets: outputs.GetApiGatewayBindApiAppsStatusResultApiAppApiSet[];
}

export interface GetApiGatewayBindApiAppsStatusResultApiAppApiSet {
    apiAppId: string;
    apiAppName: string;
    apiId: string;
    apiName: string;
    apiRegion: string;
    authorizedTime: string;
    environmentName: string;
    serviceId: string;
}

export interface GetApiGatewayCustomerDomainsList {
    certificateId: string;
    domainName: string;
    isDefaultMapping: boolean;
    isStatusOn: boolean;
    netType: string;
    pathMappings: outputs.GetApiGatewayCustomerDomainsListPathMapping[];
    protocol: string;
}

export interface GetApiGatewayCustomerDomainsListPathMapping {
    environment: string;
    path: string;
}

export interface GetApiGatewayIpStrategiesList {
    attachLists: outputs.GetApiGatewayIpStrategiesListAttachList[];
    bindApiTotalCount: number;
    createTime: string;
    ipList: string;
    modifyTime: string;
    serviceId: string;
    strategyId: string;
    strategyName: string;
    strategyType: string;
}

export interface GetApiGatewayIpStrategiesListAttachList {
    apiBusinessType: string;
    apiDesc: string;
    apiId: string;
    apiName: string;
    apiType: string;
    authRelationApiId: string;
    authType: string;
    createTime: string;
    method: string;
    modifyTime: string;
    oauthConfig: {[key: string]: string};
    path: string;
    protocol: string;
    relationBusinessApiIds: string[];
    serviceId: string;
    tags: string[];
    uniqVpcId: string;
    vpcId: number;
}

export interface GetApiGatewayPluginsResult {
    apiId: string;
    apiName: string;
    apiType: string;
    attachedOtherPlugin: boolean;
    isAttached: boolean;
    method: string;
    path: string;
}

export interface GetApiGatewayServiceEnvironmentListResult {
    environmentName: string;
    status: number;
    url: string;
    versionName: string;
}

export interface GetApiGatewayServiceReleaseVersionsResult {
    versionDesc: string;
    versionName: string;
}

export interface GetApiGatewayServicesList {
    createTime: string;
    exclusiveSetName: string;
    innerHttpPort: number;
    innerHttpsPort: number;
    internalSubDomain: string;
    ipVersion: string;
    modifyTime: string;
    netTypes: string[];
    outerSubDomain: string;
    protocol: string;
    serviceDesc: string;
    serviceId: string;
    serviceName: string;
    usagePlanLists: outputs.GetApiGatewayServicesListUsagePlanList[];
}

export interface GetApiGatewayServicesListUsagePlanList {
    apiId: string;
    bindType: string;
    usagePlanId: string;
    usagePlanName: string;
}

export interface GetApiGatewayThrottlingApisList {
    apiEnvironmentStrategies: outputs.GetApiGatewayThrottlingApisListApiEnvironmentStrategy[];
    serviceId: string;
}

export interface GetApiGatewayThrottlingApisListApiEnvironmentStrategy {
    apiId: string;
    apiName: string;
    method: string;
    path: string;
    strategyLists: outputs.GetApiGatewayThrottlingApisListApiEnvironmentStrategyStrategyList[];
}

export interface GetApiGatewayThrottlingApisListApiEnvironmentStrategyStrategyList {
    environmentName: string;
    quota: number;
}

export interface GetApiGatewayThrottlingServicesList {
    environments: outputs.GetApiGatewayThrottlingServicesListEnvironment[];
    serviceId: string;
}

export interface GetApiGatewayThrottlingServicesListEnvironment {
    environmentName: string;
    status: number;
    strategy: number;
    url: string;
    versionName: string;
}

export interface GetApiGatewayUpstreamsFilter {
    /**
     * Fields that need to be filtered.
     */
    name: string;
    /**
     * The filtering value of the field.
     */
    values: string[];
}

export interface GetApiGatewayUpstreamsResult {
    apiId: string;
    apiName: string;
    bindTime: string;
    serviceId: string;
    serviceName: string;
}

export interface GetApiGatewayUsagePlanEnvironmentsList {
    apiId: string;
    apiName: string;
    createTime: string;
    environment: string;
    method: string;
    modifyTime: string;
    path: string;
    serviceId: string;
    serviceName: string;
}

export interface GetApiGatewayUsagePlansList {
    createTime: string;
    maxRequestNum: number;
    maxRequestNumPreSec: number;
    modifyTime: string;
    usagePlanDesc: string;
    usagePlanId: string;
    usagePlanName: string;
}

export interface GetAsAdvicesAutoScalingAdviceSet {
    advices: outputs.GetAsAdvicesAutoScalingAdviceSetAdvice[];
    autoScalingGroupId: string;
    level: string;
}

export interface GetAsAdvicesAutoScalingAdviceSetAdvice {
    detail: string;
    problem: string;
    solution: string;
}

export interface GetAsInstancesFilter {
    /**
     * Fields to be filtered. Valid names: `instance-id`: Filters by instance ID, `auto-scaling-group-id`: Filter by scaling group ID.
     */
    name: string;
    /**
     * Value of the field.
     */
    values: string[];
}

export interface GetAsInstancesInstanceList {
    addTime: string;
    autoScalingGroupId: string;
    autoScalingGroupName: string;
    creationType: string;
    healthStatus: string;
    instanceId: string;
    instanceType: string;
    launchConfigurationId: string;
    launchConfigurationName: string;
    lifeCycleState: string;
    protectedFromScaleIn: boolean;
    versionNumber: number;
    zone: string;
}

export interface GetAsLastActivityActivitySet {
    activityId: string;
    activityRelatedInstanceSets: outputs.GetAsLastActivityActivitySetActivityRelatedInstanceSet[];
    activityType: string;
    autoScalingGroupId: string;
    cause: string;
    createdTime: string;
    description: string;
    detailedStatusMessageSets: outputs.GetAsLastActivityActivitySetDetailedStatusMessageSet[];
    endTime: string;
    invocationResultSets: outputs.GetAsLastActivityActivitySetInvocationResultSet[];
    lifecycleActionResultSets: outputs.GetAsLastActivityActivitySetLifecycleActionResultSet[];
    startTime: string;
    statusCode: string;
    statusMessage: string;
    statusMessageSimplified: string;
}

export interface GetAsLastActivityActivitySetActivityRelatedInstanceSet {
    instanceId: string;
    instanceStatus: string;
}

export interface GetAsLastActivityActivitySetDetailedStatusMessageSet {
    code: string;
    instanceChargeType: string;
    instanceId: string;
    instanceType: string;
    message: string;
    subnetId: string;
    zone: string;
}

export interface GetAsLastActivityActivitySetInvocationResultSet {
    commandId: string;
    errorMessage: string;
    instanceId: string;
    invocationId: string;
    invocationTaskId: string;
    taskStatus: string;
}

export interface GetAsLastActivityActivitySetLifecycleActionResultSet {
    instanceId: string;
    invocationId: string;
    invokeCommandResult: string;
    lifecycleActionResult: string;
    lifecycleHookId: string;
    notificationResult: string;
    resultReason: string;
}

export interface GetAsScalingConfigsConfigurationList {
    configurationId: string;
    configurationName: string;
    createTime: string;
    dataDisks: outputs.GetAsScalingConfigsConfigurationListDataDisk[];
    diskTypePolicy: string;
    enhancedMonitorService: boolean;
    enhancedSecurityService: boolean;
    imageId: string;
    instanceTags: {[key: string]: string};
    instanceTypes: string[];
    internetChargeType: string;
    internetMaxBandwidthOut: number;
    keyIds: string[];
    projectId: number;
    publicIpAssigned: boolean;
    securityGroupIds: string[];
    status: string;
    systemDiskSize: number;
    systemDiskType: string;
    userData: string;
    versionNumber: number;
}

export interface GetAsScalingConfigsConfigurationListDataDisk {
    deleteWithInstance: boolean;
    diskSize: number;
    diskType: string;
    snapshotId: string;
}

export interface GetAsScalingGroupsScalingGroupList {
    configurationId: string;
    createTime: string;
    defaultCooldown: number;
    desiredCapacity: number;
    forwardBalancerIds: outputs.GetAsScalingGroupsScalingGroupListForwardBalancerId[];
    instanceCount: number;
    loadBalancerIds: string[];
    maxSize: number;
    minSize: number;
    multiZoneSubnetPolicy: string;
    projectId: number;
    retryPolicy: string;
    scalingGroupId: string;
    scalingGroupName: string;
    status: string;
    subnetIds: string[];
    tags: {[key: string]: string};
    terminationPolicies: string[];
    vpcId: string;
    zones: string[];
}

export interface GetAsScalingGroupsScalingGroupListForwardBalancerId {
    listenerId: string;
    loadBalancerId: string;
    locationId: string;
    targetAttributes: outputs.GetAsScalingGroupsScalingGroupListForwardBalancerIdTargetAttribute[];
}

export interface GetAsScalingGroupsScalingGroupListForwardBalancerIdTargetAttribute {
    port: number;
    weight: number;
}

export interface GetAsScalingPoliciesScalingPolicyList {
    adjustmentType: string;
    adjustmentValue: number;
    comparisonOperator: string;
    continuousTime: number;
    cooldown: number;
    metricName: string;
    notificationUserGroupIds: string[];
    period: number;
    policyName: string;
    scalingGroupId: string;
    statistic: string;
    threshold: number;
}

export interface GetAuditCosRegionsAuditCosRegionList {
    cosRegion: string;
    cosRegionName: string;
}

export interface GetAuditKeyAliasAuditKeyAliasList {
    keyAlias: string;
    keyId: string;
}

export interface GetAuditsAuditList {
    auditSwitch: boolean;
    cosBucket: string;
    id: string;
    logFilePrefix: string;
    name: string;
}

export interface GetAvailabilityRegionsRegion {
    description: string;
    name: string;
    state: string;
}

export interface GetAvailabilityZonesByProductZone {
    description: string;
    id: string;
    name: string;
    state: string;
}

export interface GetAvailabilityZonesZone {
    description: string;
    id: string;
    name: string;
    state: string;
}

export interface GetBiProjectList {
    apply: boolean;
    authLists: string[];
    colorCode: string;
    configLists: outputs.GetBiProjectListConfigList[];
    corpId: string;
    createdAt: string;
    createdUser: string;
    id: number;
    isExternalManage: boolean;
    lastModifyName: string;
    logo: string;
    managePlatform: string;
    mark: string;
    memberCount: number;
    name: string;
    pageCount: number;
    panelScope: string;
    seed: string;
    source: string;
    updatedAt: string;
    updatedUser: string;
}

export interface GetBiProjectListConfigList {
    components: outputs.GetBiProjectListConfigListComponent[];
    moduleGroup: string;
}

export interface GetBiProjectListConfigListComponent {
    includeType: string;
    moduleId: string;
    params: string;
}

export interface GetBiUserProjectList {
    areaCode: string;
    corpId: string;
    createdAt: string;
    createdUser: string;
    email: string;
    firstModify: number;
    globalUserName: string;
    lastLogin: string;
    mobile: string;
    phoneNumber: string;
    status: number;
    updatedAt: string;
    updatedUser: string;
    userId: string;
    userName: string;
}

export interface GetCamGroupMembershipsMembershipList {
    groupId: string;
    userIds: string[];
    userNames: string[];
}

export interface GetCamGroupPolicyAttachmentsGroupPolicyAttachmentList {
    createMode: number;
    createTime: string;
    groupId: string;
    policyId: string;
    policyName: string;
    policyType: string;
}

export interface GetCamGroupUserAccountGroupInfo {
    createTime: string;
    groupId: number;
    groupName: string;
    remark: string;
}

export interface GetCamGroupsGroupList {
    createTime: string;
    groupId: string;
    name: string;
    remark: string;
}

export interface GetCamListAttachedUserPolicyPolicyList {
    addTime: string;
    createMode: string;
    deactived: number;
    deactivedDetails: string[];
    description: string;
    groups: outputs.GetCamListAttachedUserPolicyPolicyListGroup[];
    policyId: string;
    policyName: string;
    strategyType: string;
}

export interface GetCamListAttachedUserPolicyPolicyListGroup {
    groupId: number;
    groupName: string;
}

export interface GetCamListEntitiesForPolicyList {
    attachmentTime: string;
    id: string;
    name: string;
    relatedType: number;
    uin: number;
}

export interface GetCamPoliciesPolicyList {
    attachments: number;
    createMode: number;
    createTime: string;
    description: string;
    name: string;
    policyId: string;
    serviceType: string;
    type: number;
}

export interface GetCamPolicyGrantingServiceAccessList {
    actions: outputs.GetCamPolicyGrantingServiceAccessListAction[];
    policies: outputs.GetCamPolicyGrantingServiceAccessListPolicy[];
    services: outputs.GetCamPolicyGrantingServiceAccessListService[];
}

export interface GetCamPolicyGrantingServiceAccessListAction {
    description: string;
    name: string;
}

export interface GetCamPolicyGrantingServiceAccessListPolicy {
    policyDescription: string;
    policyId: string;
    policyName: string;
    policyType: string;
}

export interface GetCamPolicyGrantingServiceAccessListService {
    serviceName: string;
    serviceType: string;
}

export interface GetCamRolePolicyAttachmentsRolePolicyAttachmentList {
    createMode: number;
    createTime: string;
    policyId: string;
    policyName: string;
    policyType: string;
    roleId: string;
}

export interface GetCamRolesRoleList {
    consoleLogin: boolean;
    createTime: string;
    description: string;
    document: string;
    name: string;
    roleId: string;
    updateTime: string;
}

export interface GetCamSamlProvidersProviderList {
    createTime: string;
    description: string;
    modifyTime: string;
    name: string;
}

export interface GetCamSecretLastUsedTimeSecretIdLastUsedRow {
    lastSecretUsedDate: number;
    lastUsedDate: string;
    secretId: string;
}

export interface GetCamUserPolicyAttachmentsUserPolicyAttachmentList {
    createMode: number;
    createTime: string;
    policyId: string;
    policyName: string;
    policyType: string;
    userId: string;
    userName: string;
}

export interface GetCamUsersUserList {
    consoleLogin: boolean;
    countryCode: string;
    email: string;
    name: string;
    phoneNum: string;
    remark: string;
    uid: number;
    uin: number;
    userId: string;
}

export interface GetCatNodeNodeDefine {
    city: string;
    code: string;
    codeType: string;
    district: string;
    ipType: number;
    location: number;
    name: string;
    netService: string;
    nodeDefineStatus: number;
    taskTypes: number[];
    type: number;
}

export interface GetCatProbeDataDetailedSingleDataDefine {
    fields: outputs.GetCatProbeDataDetailedSingleDataDefineField[];
    labels: outputs.GetCatProbeDataDetailedSingleDataDefineLabel[];
    probeTime: number;
}

export interface GetCatProbeDataDetailedSingleDataDefineField {
    id: number;
    name: string;
    value: number;
}

export interface GetCatProbeDataDetailedSingleDataDefineLabel {
    id: number;
    name: string;
    value: string;
}

export interface GetCbsSnapshotPoliciesSnapshotPolicyList {
    attachedStorageIds: string[];
    createTime: string;
    repeatHours: number[];
    repeatWeekdays: number[];
    retentionDays: number;
    snapshotPolicyId: string;
    snapshotPolicyName: string;
    status: string;
}

export interface GetCbsSnapshotsSnapshotList {
    availabilityZone: string;
    createTime: string;
    encrypt: boolean;
    percent: number;
    projectId: number;
    snapshotId: string;
    snapshotName: string;
    storageId: string;
    storageSize: number;
    storageUsage: string;
}

export interface GetCbsStoragesSetStorageList {
    attached: boolean;
    availabilityZone: string;
    chargeType: string;
    createTime: string;
    dedicatedClusterId: string;
    encrypt: boolean;
    instanceId: string;
    prepaidRenewFlag: string;
    projectId: number;
    status: string;
    storageId: string;
    storageName: string;
    storageSize: number;
    storageType: string;
    storageUsage: string;
    tags: {[key: string]: string};
    throughputPerformance: number;
}

export interface GetCbsStoragesStorageList {
    attached: boolean;
    availabilityZone: string;
    chargeType: string;
    createTime: string;
    dedicatedClusterId: string;
    encrypt: boolean;
    instanceId: string;
    prepaidRenewFlag: string;
    projectId: number;
    status: string;
    storageId: string;
    storageName: string;
    storageSize: number;
    storageType: string;
    storageUsage: string;
    tags: {[key: string]: string};
    throughputPerformance: number;
}

export interface GetCcnBandwidthLimitsLimit {
    bandwidthLimit: number;
    dstRegion: string;
    region: string;
}

export interface GetCcnCrossBorderFlowMonitorCrossBorderFlowMonitorData {
    inBandwidths: number[];
    inPkgs: number[];
    outBandwidths: number[];
    outPkgs: number[];
}

export interface GetCcnCrossBorderRegionBandwidthLimitsCcnBandwidthSet {
    ccnId: string;
    ccnRegionBandwidthLimits: outputs.GetCcnCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimit[];
    createdTime: string;
    expiredTime: string;
    instanceChargeType: string;
    isCrossBorder: boolean;
    isSecurityLock: boolean;
    marketId: string;
    regionFlowControlId: string;
    renewFlag: string;
    updateTime: string;
    userAccountId: string;
}

export interface GetCcnCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimit {
    bandwidthLimit: number;
    destinationRegion: string;
    sourceRegion: string;
}

export interface GetCcnCrossBorderRegionBandwidthLimitsFilter {
    /**
     * attribute name.
     */
    name: string;
    /**
     * Value of the field.
     */
    values: string[];
}

export interface GetCcnInstancesInstanceList {
    attachmentLists: outputs.GetCcnInstancesInstanceListAttachmentList[];
    bandwidthLimitType: string;
    ccnId: string;
    chargeType: string;
    createTime: string;
    description: string;
    name: string;
    qos: string;
    state: string;
}

export interface GetCcnInstancesInstanceListAttachmentList {
    attachedTime: string;
    cidrBlocks: string[];
    instanceId: string;
    instanceRegion: string;
    instanceType: string;
    state: string;
}

export interface GetCcnRoutesFilter {
    /**
     * Field to be filtered. Support `route-id`, `cidr-block`, `instance-type`, `instance-region`, `instance-id`, `route-table-id`.
     */
    name: string;
    /**
     * Filter value of the field.
     */
    values: string[];
}

export interface GetCcnRoutesRouteList {
    destinationCidrBlock: string;
    enabled: boolean;
    extraState: string;
    instanceExtraName: string;
    instanceId: string;
    instanceName: string;
    instanceRegion: string;
    instanceType: string;
    instanceUin: string;
    isBgp: boolean;
    routeId: string;
    routePriority: number;
    updateTime: string;
}

export interface GetCdcDedicatedClusterHostsHostInfoSet {
    cpuAvailable: number;
    cpuTotal: number;
    expireTime: string;
    hostId: string;
    hostIp: string;
    hostStatus: string;
    hostType: string;
    memAvailable: number;
    memTotal: number;
    runTime: string;
    serviceType: string;
}

export interface GetCdcDedicatedClusterInstanceTypesDedicatedClusterInstanceTypeSet {
    cpu: number;
    cpuType: string;
    fpga: number;
    gpu: number;
    instanceBandwidth: number;
    instanceFamily: string;
    instancePps: number;
    instanceType: string;
    memory: number;
    networkCard: number;
    remark: string;
    status: string;
    storageBlockAmount: number;
    typeName: string;
    zone: string;
}

export interface GetCdcDedicatedClusterOrdersDedicatedClusterOrderSet {
    action: string;
    cpu: number;
    createTime: string;
    dedicatedClusterId: string;
    dedicatedClusterOrderId: string;
    dedicatedClusterOrderItems: outputs.GetCdcDedicatedClusterOrdersDedicatedClusterOrderSetDedicatedClusterOrderItem[];
    dedicatedClusterTypeId: string;
    gpu: number;
    mem: number;
    orderStatus: string;
    orderType: string;
    payStatus: number;
    payType: string;
    powerDraw: number;
    supportedInstanceFamilies: string[];
    supportedStorageTypes: string[];
    supportedUplinkSpeeds: number[];
    timeSpan: number;
    timeUnit: string;
    weight: number;
}

export interface GetCdcDedicatedClusterOrdersDedicatedClusterOrderSetDedicatedClusterOrderItem {
    computeFormat: string;
    count: number;
    createTime: string;
    dedicatedClusterTypeId: string;
    description: string;
    name: string;
    powerDraw: number;
    subOrderId: string;
    subOrderPayStatus: number;
    subOrderStatus: string;
    supportedInstanceFamilies: string[];
    supportedStorageTypes: string[];
    supportedUplinkSpeeds: number[];
    totalCpu: number;
    totalGpu: number;
    totalMem: number;
    typeFamily: string;
    typeName: string;
    weight: number;
}

export interface GetCdhInstancesCdhInstanceList {
    availabilityZone: string;
    cageId: string;
    chargeType: string;
    createTime: string;
    cvmInstanceIds: string[];
    expiredTime: string;
    hostId: string;
    hostName: string;
    hostResources: outputs.GetCdhInstancesCdhInstanceListHostResource[];
    hostState: string;
    hostType: string;
    prepaidRenewFlag: string;
    projectId: number;
}

export interface GetCdhInstancesCdhInstanceListHostResource {
    cpuAvailableNum: number;
    cpuTotalNum: number;
    diskAvailableSize: number;
    diskTotalSize: number;
    diskType: string;
    memoryAvailableSize: number;
    memoryTotalSize: number;
}

export interface GetCdnDomainsDomainList {
    area: string;
    cname: string;
    createTime: string;
    domain: string;
    fullUrlCache: boolean;
    httpsConfigs: outputs.GetCdnDomainsDomainListHttpsConfig[];
    id: string;
    origins: outputs.GetCdnDomainsDomainListOrigin[];
    projectId: number;
    rangeOriginSwitch: string;
    requestHeaders: outputs.GetCdnDomainsDomainListRequestHeader[];
    ruleCaches: outputs.GetCdnDomainsDomainListRuleCach[];
    serviceType: string;
    status: string;
    tags: {[key: string]: string};
    updateTime: string;
}

export interface GetCdnDomainsDomainListHttpsConfig {
    http2Switch: string;
    httpsSwitch: string;
    ocspStaplingSwitch: string;
    spdySwitch: string;
    verifyClient: string;
}

export interface GetCdnDomainsDomainListOrigin {
    backupOriginLists: string[];
    backupOriginType: string;
    backupServerName: string;
    cosPrivateAccess: string;
    originLists: string[];
    originPullProtocol: string;
    originType: string;
    serverName: string;
}

export interface GetCdnDomainsDomainListRequestHeader {
    headerRules: outputs.GetCdnDomainsDomainListRequestHeaderHeaderRule[];
    switch: string;
}

export interface GetCdnDomainsDomainListRequestHeaderHeaderRule {
    headerMode: string;
    headerName: string;
    headerValue: string;
    rulePaths: string[];
    ruleType: string;
}

export interface GetCdnDomainsDomainListRuleCach {
    cacheTime: number;
    compareMaxAge: string;
    followOriginSwitch: string;
    ignoreCacheControl: string;
    ignoreSetCookie: string;
    noCacheSwitch: string;
    reValidate: string;
    rulePaths: string[];
    ruleType: string;
    switch: string;
}

export interface GetCdwdorisInstancesInstancesList {
    accessInfo: string;
    bindSGs: string[];
    buildVersion: string;
    canAttachCbs: boolean;
    caseSensitive: number;
    characteristics: string[];
    clsLogSetId: string;
    clsTopicId: string;
    components: string;
    coolDownBucket: string;
    coreSummaries: outputs.GetCdwdorisInstancesInstancesListCoreSummary[];
    cosBucketName: string;
    cosMoveFactor: number;
    createTime: string;
    eip: string;
    enableCoolDown: number;
    enableMultiZones: boolean;
    enableXmlConfig: number;
    expireTime: string;
    flowMsg: string;
    graceShutdownWaitSeconds: string;
    ha: string;
    haType: number;
    hasClsTopic: boolean;
    id: number;
    instanceId: string;
    instanceName: string;
    isWhiteSGs: boolean;
    kind: string;
    masterSummaries: outputs.GetCdwdorisInstancesInstancesListMasterSummary[];
    monitor: string;
    payMode: string;
    region: string;
    regionDesc: string;
    regionId: number;
    renewFlag: boolean;
    restartTimeout: string;
    status: string;
    statusDesc: string;
    subnetId: string;
    tags: outputs.GetCdwdorisInstancesInstancesListTag[];
    userNetworkInfos: string;
    version: string;
    vpcId: string;
    zone: string;
    zoneDesc: string;
}

export interface GetCdwdorisInstancesInstancesListCoreSummary {
    attachCbsSpecs: outputs.GetCdwdorisInstancesInstancesListCoreSummaryAttachCbsSpec[];
    core: number;
    disk: number;
    diskCount: number;
    diskDesc: string;
    diskType: string;
    encrypt: number;
    maxDiskSize: number;
    memory: number;
    nodeSize: number;
    spec: string;
    specCore: number;
    specMemory: number;
    subProductType: string;
}

export interface GetCdwdorisInstancesInstancesListCoreSummaryAttachCbsSpec {
    diskCount: number;
    diskDesc: string;
    diskSize: number;
    diskType: string;
}

export interface GetCdwdorisInstancesInstancesListMasterSummary {
    attachCbsSpecs: outputs.GetCdwdorisInstancesInstancesListMasterSummaryAttachCbsSpec[];
    core: number;
    disk: number;
    diskCount: number;
    diskDesc: string;
    diskType: string;
    encrypt: number;
    maxDiskSize: number;
    memory: number;
    nodeSize: number;
    spec: string;
    specCore: number;
    specMemory: number;
    subProductType: string;
}

export interface GetCdwdorisInstancesInstancesListMasterSummaryAttachCbsSpec {
    diskCount: number;
    diskDesc: string;
    diskSize: number;
    diskType: string;
}

export interface GetCdwdorisInstancesInstancesListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetCdwdorisInstancesSearchTag {
    /**
     * 1 means only the tag key is entered without a value, and 0 means both the key and the value are entered.
     */
    allValue?: number;
    /**
     * Tag key.
     */
    tagKey?: string;
    /**
     * Tag value.
     */
    tagValue?: string;
}

export interface GetCfsAccessGroupsAccessGroupList {
    accessGroupId: string;
    createTime: string;
    description: string;
    name: string;
}

export interface GetCfsAccessRulesAccessRuleList {
    accessRuleId: string;
    authClientIp: string;
    priority: number;
    rwPermission: string;
    userPermission: string;
}

export interface GetCfsAvailableZoneRegionZone {
    region: string;
    regionCnName: string;
    regionName: string;
    regionStatus: string;
    zones: outputs.GetCfsAvailableZoneRegionZoneZone[];
}

export interface GetCfsAvailableZoneRegionZoneZone {
    types: outputs.GetCfsAvailableZoneRegionZoneZoneType[];
    zone: string;
    zoneCnName: string;
    zoneId: number;
    zoneName: string;
}

export interface GetCfsAvailableZoneRegionZoneZoneType {
    prepayment: boolean;
    protocols: outputs.GetCfsAvailableZoneRegionZoneZoneTypeProtocol[];
    type: string;
}

export interface GetCfsAvailableZoneRegionZoneZoneTypeProtocol {
    protocol: string;
    saleStatus: string;
}

export interface GetCfsFileSystemClientsClientList {
    cfsVip: string;
    clientIp: string;
    mountDirectory: string;
    vpcId: string;
    zone: string;
    zoneName: string;
}

export interface GetCfsFileSystemsFileSystemList {
    accessGroupId: string;
    availabilityZone: string;
    createTime: string;
    fileSystemId: string;
    fsId: string;
    mountIp: string;
    name: string;
    protocol: string;
    sizeLimit: number;
    sizeUsed: number;
    status: string;
    storageType: string;
}

export interface GetCfsMountTargetsMountTarget {
    ccnId: string;
    cidrBlock: string;
    fileSystemId: string;
    fsId: string;
    ipAddress: string;
    lifeCycleState: string;
    mountTargetId: string;
    networkInterface: string;
    subnetId: string;
    subnetName: string;
    vpcId: string;
    vpcName: string;
}

export interface GetCfwEdgeFwSwitchesData {
    assetType: string;
    instanceId: string;
    instanceName: string;
    intranetIp: string;
    publicIp: string;
    publicIpType: number;
    region: string;
    status: number;
    switchMode: number;
    vpcId: string;
}

export interface GetCfwNatFwSwitchesData {
    abnormal: number;
    cvmNum: number;
    enable: number;
    id: number;
    natId: string;
    natInsId: string;
    natInsName: string;
    natName: string;
    region: string;
    routeId: string;
    routeName: string;
    status: number;
    subnetCidr: string;
    subnetId: string;
    subnetName: string;
    vpcId: string;
    vpcName: string;
}

export interface GetCfwVpcFwSwitchesSwitchList {
    enable: number;
    status: number;
    switchId: string;
    switchMode: number;
    switchName: string;
}

export interface GetChdfsAccessGroupsAccessGroup {
    accessGroupId: string;
    accessGroupName: string;
    createTime: string;
    description: string;
    vpcId: string;
    vpcType: number;
}

export interface GetChdfsFileSystemsFileSystem {
    appId: number;
    blockSize: number;
    capacityQuota: number;
    createTime: string;
    description: string;
    enableRanger: boolean;
    fileSystemId: string;
    fileSystemName: string;
    posixAcl: boolean;
    rangerServiceAddresses: string[];
    region: string;
    status: number;
    superUsers: string[];
}

export interface GetChdfsMountPointsMountPoint {
    accessGroupIds: string[];
    createTime: string;
    fileSystemId: string;
    mountPointId: string;
    mountPointName: string;
    status: number;
}

export interface GetCkafkaAclsAclList {
    host: string;
    operationType: string;
    permissionType: string;
    principal: string;
    resourceName: string;
    resourceType: string;
}

export interface GetCkafkaConnectResourceResult {
    connectResourceLists: outputs.GetCkafkaConnectResourceResultConnectResourceList[];
    totalCount: number;
}

export interface GetCkafkaConnectResourceResultConnectResourceList {
    clickhouseConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListClickhouseConnectParam[];
    createTime: string;
    ctsdbConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListCtsdbConnectParam[];
    currentStep: string;
    datahubTaskCount: number;
    description: string;
    dorisConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListDorisConnectParam[];
    dtsConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListDtsConnectParam[];
    errorMessage: string;
    esConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListEsConnectParam[];
    kafkaConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListKafkaConnectParam[];
    mariaDbConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListMariaDbConnectParam[];
    mongoDbConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListMongoDbConnectParam[];
    mysqlConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListMysqlConnectParam[];
    postgreSqlConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListPostgreSqlConnectParam[];
    resourceId: string;
    resourceName: string;
    sqlServerConnectParams: outputs.GetCkafkaConnectResourceResultConnectResourceListSqlServerConnectParam[];
    status: number;
    stepLists: string[];
    taskProgress: number;
    type: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListClickhouseConnectParam {
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListCtsdbConnectParam {
    password: string;
    port: number;
    resource: string;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListDorisConnectParam {
    bePort: number;
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListDtsConnectParam {
    groupId: string;
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    topic: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListEsConnectParam {
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListKafkaConnectParam {
    brokerAddress: string;
    isUpdate: boolean;
    region: string;
    resource: string;
    selfBuilt: boolean;
}

export interface GetCkafkaConnectResourceResultConnectResourceListMariaDbConnectParam {
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListMongoDbConnectParam {
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListMysqlConnectParam {
    clusterId: string;
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListPostgreSqlConnectParam {
    clusterId: string;
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaConnectResourceResultConnectResourceListSqlServerConnectParam {
    isUpdate: boolean;
    password: string;
    port: number;
    resource: string;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaDatahubGroupOffsetsTopicList {
    partitions: outputs.GetCkafkaDatahubGroupOffsetsTopicListPartition[];
    topic: string;
}

export interface GetCkafkaDatahubGroupOffsetsTopicListPartition {
    errorCode: number;
    lag: number;
    logEndOffset: number;
    metadata: string;
    offset: number;
    partition: number;
}

export interface GetCkafkaDatahubTaskTaskList {
    createTime: string;
    datahubId: string;
    errorMessage: string;
    sourceResources: outputs.GetCkafkaDatahubTaskTaskListSourceResource[];
    status: number;
    stepLists: string[];
    targetResources: outputs.GetCkafkaDatahubTaskTaskListTargetResource[];
    taskCurrentStep: string;
    taskId: string;
    taskName: string;
    taskProgress: number;
    taskType: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResource {
    clickHouseParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceClickHouseParam[];
    clsParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceClsParam[];
    cosParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceCosParam[];
    ctsdbParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceCtsdbParam[];
    dtsParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceDtsParam[];
    esParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEsParam[];
    eventBusParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEventBusParam[];
    kafkaParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceKafkaParam[];
    mariaDbParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceMariaDbParam[];
    mongoDbParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceMongoDbParam[];
    mySqlParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceMySqlParam[];
    postgreSqlParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourcePostgreSqlParam[];
    scfParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceScfParam[];
    sqlServerParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceSqlServerParam[];
    tdwParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceTdwParam[];
    topicParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceTopicParam[];
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceClickHouseParam {
    cluster: string;
    database: string;
    dropCls: outputs.GetCkafkaDatahubTaskTaskListSourceResourceClickHouseParamDropCl[];
    dropInvalidMessage: boolean;
    ip: string;
    password: string;
    port: number;
    resource: string;
    schemas: outputs.GetCkafkaDatahubTaskTaskListSourceResourceClickHouseParamSchema[];
    selfBuilt: boolean;
    serviceVip: string;
    table: string;
    type: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceClickHouseParamDropCl {
    dropClsLogSet: string;
    dropClsOwneruin: string;
    dropClsRegion: string;
    dropClsTopicId: string;
    dropInvalidMessageToCls: boolean;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceClickHouseParamSchema {
    allowNull: boolean;
    columnName: string;
    jsonKey: string;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceClsParam {
    contentKey: string;
    decodeJson: boolean;
    logSet: string;
    resource: string;
    timeField: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceCosParam {
    aggregateBatchSize: number;
    aggregateInterval: number;
    bucketName: string;
    directoryTimeFormat: string;
    formatOutputType: string;
    objectKey: string;
    objectKeyPrefix: string;
    region: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceCtsdbParam {
    ctsdbMetric: string;
    resource: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceDtsParam {
    groupId: string;
    groupPassword: string;
    groupUser: string;
    ip: string;
    port: number;
    resource: string;
    topic: string;
    tranSql: boolean;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEsParam {
    contentKey: string;
    databasePrimaryKey: string;
    dateFormat: string;
    documentIdField: string;
    dropCls: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropCl[];
    dropDlqs: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlq[];
    dropInvalidJsonMessage: boolean;
    dropInvalidMessage: boolean;
    index: string;
    indexType: string;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropCl {
    dropClsLogSet: string;
    dropClsOwneruin: string;
    dropClsRegion: string;
    dropClsTopicId: string;
    dropInvalidMessageToCls: boolean;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlq {
    dlqType: string;
    kafkaParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParam[];
    maxRetryAttempts: number;
    retryInterval: number;
    topicParams: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlqTopicParam[];
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParam {
    compressionType: string;
    connectorSyncType: string;
    enableToleration: boolean;
    keepPartition: boolean;
    msgMultiple: number;
    offsetType: string;
    partitionNum: number;
    qpsLimit: number;
    resource: string;
    resourceName: string;
    selfBuilt: boolean;
    startTime: number;
    tableMappings: outputs.GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParamTableMapping[];
    topic: string;
    topicId: string;
    useAutoCreateTopic: boolean;
    useTableMapping: boolean;
    zoneId: number;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParamTableMapping {
    database: string;
    table: string;
    topic: string;
    topicId: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEsParamDropDlqTopicParam {
    compressionType: string;
    msgMultiple: number;
    offsetType: string;
    resource: string;
    startTime: number;
    topicId: string;
    useAutoCreateTopic: boolean;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceEventBusParam {
    functionName: string;
    namespace: string;
    qualifier: string;
    resource: string;
    selfBuilt: boolean;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceKafkaParam {
    compressionType: string;
    connectorSyncType: string;
    enableToleration: boolean;
    keepPartition: boolean;
    msgMultiple: number;
    offsetType: string;
    partitionNum: number;
    qpsLimit: number;
    resource: string;
    resourceName: string;
    selfBuilt: boolean;
    startTime: number;
    tableMappings: outputs.GetCkafkaDatahubTaskTaskListSourceResourceKafkaParamTableMapping[];
    topic: string;
    topicId: string;
    useAutoCreateTopic: boolean;
    useTableMapping: boolean;
    zoneId: number;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceKafkaParamTableMapping {
    database: string;
    table: string;
    topic: string;
    topicId: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceMariaDbParam {
    database: string;
    includeContentChanges: string;
    includeQuery: boolean;
    isTablePrefix: boolean;
    keyColumns: string;
    outputFormat: string;
    recordWithSchema: boolean;
    resource: string;
    snapshotMode: string;
    table: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceMongoDbParam {
    collection: string;
    copyExisting: boolean;
    database: string;
    ip: string;
    listeningEvent: string;
    password: string;
    pipeline: string;
    port: number;
    readPreference: string;
    resource: string;
    selfBuilt: boolean;
    userName: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceMySqlParam {
    dataSourceIncrementColumn: string;
    dataSourceIncrementMode: string;
    dataSourceMonitorMode: string;
    dataSourceMonitorResource: string;
    dataSourceStartFrom: string;
    dataTargetInsertMode: string;
    dataTargetPrimaryKeyField: string;
    dataTargetRecordMappings: outputs.GetCkafkaDatahubTaskTaskListSourceResourceMySqlParamDataTargetRecordMapping[];
    database: string;
    ddlTopic: string;
    dropCls: outputs.GetCkafkaDatahubTaskTaskListSourceResourceMySqlParamDropCl[];
    dropInvalidMessage: boolean;
    includeContentChanges: string;
    includeQuery: boolean;
    isTablePrefix: boolean;
    isTableRegular: boolean;
    keyColumns: string;
    outputFormat: string;
    recordWithSchema: boolean;
    resource: string;
    signalDatabase: string;
    snapshotMode: string;
    table: string;
    topicRegex: string;
    topicReplacement: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceMySqlParamDataTargetRecordMapping {
    allowNull: boolean;
    autoIncrement: boolean;
    columnName: string;
    columnSize: string;
    decimalDigits: string;
    defaultValue: string;
    extraInfo: string;
    jsonKey: string;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceMySqlParamDropCl {
    dropClsLogSet: string;
    dropClsOwneruin: string;
    dropClsRegion: string;
    dropClsTopicId: string;
    dropInvalidMessageToCls: boolean;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourcePostgreSqlParam {
    dataFormat: string;
    dataTargetInsertMode: string;
    dataTargetPrimaryKeyField: string;
    dataTargetRecordMappings: outputs.GetCkafkaDatahubTaskTaskListSourceResourcePostgreSqlParamDataTargetRecordMapping[];
    database: string;
    dropInvalidMessage: boolean;
    isTableRegular: boolean;
    keyColumns: string;
    pluginName: string;
    recordWithSchema: boolean;
    resource: string;
    snapshotMode: string;
    table: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourcePostgreSqlParamDataTargetRecordMapping {
    allowNull: boolean;
    autoIncrement: boolean;
    columnName: string;
    columnSize: string;
    decimalDigits: string;
    defaultValue: string;
    extraInfo: string;
    jsonKey: string;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceScfParam {
    batchSize: number;
    functionName: string;
    maxRetries: number;
    namespace: string;
    qualifier: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceSqlServerParam {
    database: string;
    resource: string;
    snapshotMode: string;
    table: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceTdwParam {
    bid: string;
    isDomestic: boolean;
    tdwHost: string;
    tdwPort: number;
    tid: string;
}

export interface GetCkafkaDatahubTaskTaskListSourceResourceTopicParam {
    compressionType: string;
    msgMultiple: number;
    offsetType: string;
    resource: string;
    startTime: number;
    topicId: string;
    useAutoCreateTopic: boolean;
}

export interface GetCkafkaDatahubTaskTaskListTargetResource {
    clickHouseParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceClickHouseParam[];
    clsParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceClsParam[];
    cosParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceCosParam[];
    ctsdbParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceCtsdbParam[];
    dtsParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceDtsParam[];
    esParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEsParam[];
    eventBusParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEventBusParam[];
    kafkaParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceKafkaParam[];
    mariaDbParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceMariaDbParam[];
    mongoDbParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceMongoDbParam[];
    mySqlParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceMySqlParam[];
    postgreSqlParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourcePostgreSqlParam[];
    scfParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceScfParam[];
    sqlServerParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceSqlServerParam[];
    tdwParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceTdwParam[];
    topicParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceTopicParam[];
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceClickHouseParam {
    cluster: string;
    database: string;
    dropCls: outputs.GetCkafkaDatahubTaskTaskListTargetResourceClickHouseParamDropCl[];
    dropInvalidMessage: boolean;
    ip: string;
    password: string;
    port: number;
    resource: string;
    schemas: outputs.GetCkafkaDatahubTaskTaskListTargetResourceClickHouseParamSchema[];
    selfBuilt: boolean;
    serviceVip: string;
    table: string;
    type: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceClickHouseParamDropCl {
    dropClsLogSet: string;
    dropClsOwneruin: string;
    dropClsRegion: string;
    dropClsTopicId: string;
    dropInvalidMessageToCls: boolean;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceClickHouseParamSchema {
    allowNull: boolean;
    columnName: string;
    jsonKey: string;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceClsParam {
    contentKey: string;
    decodeJson: boolean;
    logSet: string;
    resource: string;
    timeField: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceCosParam {
    aggregateBatchSize: number;
    aggregateInterval: number;
    bucketName: string;
    directoryTimeFormat: string;
    formatOutputType: string;
    objectKey: string;
    objectKeyPrefix: string;
    region: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceCtsdbParam {
    ctsdbMetric: string;
    resource: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceDtsParam {
    groupId: string;
    groupPassword: string;
    groupUser: string;
    ip: string;
    port: number;
    resource: string;
    topic: string;
    tranSql: boolean;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEsParam {
    contentKey: string;
    databasePrimaryKey: string;
    dateFormat: string;
    documentIdField: string;
    dropCls: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropCl[];
    dropDlqs: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlq[];
    dropInvalidJsonMessage: boolean;
    dropInvalidMessage: boolean;
    index: string;
    indexType: string;
    password: string;
    port: number;
    resource: string;
    selfBuilt: boolean;
    serviceVip: string;
    uniqVpcId: string;
    userName: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropCl {
    dropClsLogSet: string;
    dropClsOwneruin: string;
    dropClsRegion: string;
    dropClsTopicId: string;
    dropInvalidMessageToCls: boolean;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlq {
    dlqType: string;
    kafkaParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlqKafkaParam[];
    maxRetryAttempts: number;
    retryInterval: number;
    topicParams: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlqTopicParam[];
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlqKafkaParam {
    compressionType: string;
    connectorSyncType: string;
    enableToleration: boolean;
    keepPartition: boolean;
    msgMultiple: number;
    offsetType: string;
    partitionNum: number;
    qpsLimit: number;
    resource: string;
    resourceName: string;
    selfBuilt: boolean;
    startTime: number;
    tableMappings: outputs.GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlqKafkaParamTableMapping[];
    topic: string;
    topicId: string;
    useAutoCreateTopic: boolean;
    useTableMapping: boolean;
    zoneId: number;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlqKafkaParamTableMapping {
    database: string;
    table: string;
    topic: string;
    topicId: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEsParamDropDlqTopicParam {
    compressionType: string;
    msgMultiple: number;
    offsetType: string;
    resource: string;
    startTime: number;
    topicId: string;
    useAutoCreateTopic: boolean;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceEventBusParam {
    functionName: string;
    namespace: string;
    qualifier: string;
    resource: string;
    selfBuilt: boolean;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceKafkaParam {
    compressionType: string;
    connectorSyncType: string;
    enableToleration: boolean;
    keepPartition: boolean;
    msgMultiple: number;
    offsetType: string;
    partitionNum: number;
    qpsLimit: number;
    resource: string;
    resourceName: string;
    selfBuilt: boolean;
    startTime: number;
    tableMappings: outputs.GetCkafkaDatahubTaskTaskListTargetResourceKafkaParamTableMapping[];
    topic: string;
    topicId: string;
    useAutoCreateTopic: boolean;
    useTableMapping: boolean;
    zoneId: number;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceKafkaParamTableMapping {
    database: string;
    table: string;
    topic: string;
    topicId: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceMariaDbParam {
    database: string;
    includeContentChanges: string;
    includeQuery: boolean;
    isTablePrefix: boolean;
    keyColumns: string;
    outputFormat: string;
    recordWithSchema: boolean;
    resource: string;
    snapshotMode: string;
    table: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceMongoDbParam {
    collection: string;
    copyExisting: boolean;
    database: string;
    ip: string;
    listeningEvent: string;
    password: string;
    pipeline: string;
    port: number;
    readPreference: string;
    resource: string;
    selfBuilt: boolean;
    userName: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceMySqlParam {
    dataSourceIncrementColumn: string;
    dataSourceIncrementMode: string;
    dataSourceMonitorMode: string;
    dataSourceMonitorResource: string;
    dataSourceStartFrom: string;
    dataTargetInsertMode: string;
    dataTargetPrimaryKeyField: string;
    dataTargetRecordMappings: outputs.GetCkafkaDatahubTaskTaskListTargetResourceMySqlParamDataTargetRecordMapping[];
    database: string;
    ddlTopic: string;
    dropCls: outputs.GetCkafkaDatahubTaskTaskListTargetResourceMySqlParamDropCl[];
    dropInvalidMessage: boolean;
    includeContentChanges: string;
    includeQuery: boolean;
    isTablePrefix: boolean;
    isTableRegular: boolean;
    keyColumns: string;
    outputFormat: string;
    recordWithSchema: boolean;
    resource: string;
    signalDatabase: string;
    snapshotMode: string;
    table: string;
    topicRegex: string;
    topicReplacement: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceMySqlParamDataTargetRecordMapping {
    allowNull: boolean;
    autoIncrement: boolean;
    columnName: string;
    columnSize: string;
    decimalDigits: string;
    defaultValue: string;
    extraInfo: string;
    jsonKey: string;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceMySqlParamDropCl {
    dropClsLogSet: string;
    dropClsOwneruin: string;
    dropClsRegion: string;
    dropClsTopicId: string;
    dropInvalidMessageToCls: boolean;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourcePostgreSqlParam {
    dataFormat: string;
    dataTargetInsertMode: string;
    dataTargetPrimaryKeyField: string;
    dataTargetRecordMappings: outputs.GetCkafkaDatahubTaskTaskListTargetResourcePostgreSqlParamDataTargetRecordMapping[];
    database: string;
    dropInvalidMessage: boolean;
    isTableRegular: boolean;
    keyColumns: string;
    pluginName: string;
    recordWithSchema: boolean;
    resource: string;
    snapshotMode: string;
    table: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourcePostgreSqlParamDataTargetRecordMapping {
    allowNull: boolean;
    autoIncrement: boolean;
    columnName: string;
    columnSize: string;
    decimalDigits: string;
    defaultValue: string;
    extraInfo: string;
    jsonKey: string;
    type: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceScfParam {
    batchSize: number;
    functionName: string;
    maxRetries: number;
    namespace: string;
    qualifier: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceSqlServerParam {
    database: string;
    resource: string;
    snapshotMode: string;
    table: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceTdwParam {
    bid: string;
    isDomestic: boolean;
    tdwHost: string;
    tdwPort: number;
    tid: string;
}

export interface GetCkafkaDatahubTaskTaskListTargetResourceTopicParam {
    compressionType: string;
    msgMultiple: number;
    offsetType: string;
    resource: string;
    startTime: number;
    topicId: string;
    useAutoCreateTopic: boolean;
}

export interface GetCkafkaDatahubTopicTopicList {
    name: string;
    note: string;
    partitionNum: number;
    retentionMs: number;
    status: number;
    topicId: string;
    topicName: string;
}

export interface GetCkafkaGroupGroupList {
    group: string;
    protocol: string;
}

export interface GetCkafkaGroupInfoResult {
    errorCode: string;
    group: string;
    members: outputs.GetCkafkaGroupInfoResultMember[];
    protocol: string;
    protocolType: string;
    state: string;
}

export interface GetCkafkaGroupInfoResultMember {
    assignments: outputs.GetCkafkaGroupInfoResultMemberAssignment[];
    clientHost: string;
    clientId: string;
    memberId: string;
}

export interface GetCkafkaGroupInfoResultMemberAssignment {
    topics: outputs.GetCkafkaGroupInfoResultMemberAssignmentTopic[];
    version: number;
}

export interface GetCkafkaGroupInfoResultMemberAssignmentTopic {
    partitions: number[];
    topic: string;
}

export interface GetCkafkaGroupOffsetsTopicList {
    partitions: outputs.GetCkafkaGroupOffsetsTopicListPartition[];
    topic: string;
}

export interface GetCkafkaGroupOffsetsTopicListPartition {
    errorCode: number;
    lag: number;
    logEndOffset: number;
    metadata: string;
    offset: number;
    partition: number;
}

export interface GetCkafkaInstancesFilter {
    /**
     * The field that needs to be filtered.
     */
    name: string;
    /**
     * The filtered value of the field.
     */
    values: string[];
}

export interface GetCkafkaInstancesInstanceList {
    bandwidth: number;
    createTime: number;
    cvm: number;
    diskSize: number;
    diskType: string;
    expireTime: number;
    healthy: number;
    healthyMessage: string;
    instanceId: string;
    instanceName: string;
    instanceType: string;
    isInternal: number;
    maxPartitionNumber: number;
    maxTopicNumber: number;
    partitionNumber: number;
    publicNetwork: number;
    publicNetworkChargeType: string;
    rebalanceTime: string;
    renewFlag: number;
    status: number;
    subnetId: string;
    tags: outputs.GetCkafkaInstancesInstanceListTag[];
    topicNum: number;
    version: string;
    vip: string;
    vipLists: outputs.GetCkafkaInstancesInstanceListVipList[];
    vpcId: string;
    vport: string;
    zoneId: number;
    zoneIds: number[];
}

export interface GetCkafkaInstancesInstanceListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetCkafkaInstancesInstanceListVipList {
    vip: string;
    vport: string;
}

export interface GetCkafkaRegionResult {
    areaName: string;
    ipv6: number;
    multiZone: number;
    regionCode: string;
    regionCodeV3: string;
    regionId: number;
    regionName: string;
    support: string;
}

export interface GetCkafkaTaskStatusResult {
    output: string;
    status: number;
}

export interface GetCkafkaTopicFlowRankingResult {
    consumeSpeeds: outputs.GetCkafkaTopicFlowRankingResultConsumeSpeed[];
    topicFlows: outputs.GetCkafkaTopicFlowRankingResultTopicFlow[];
    topicMessageHeaps: outputs.GetCkafkaTopicFlowRankingResultTopicMessageHeap[];
}

export interface GetCkafkaTopicFlowRankingResultConsumeSpeed {
    consumerGroupName: string;
    speed: number;
}

export interface GetCkafkaTopicFlowRankingResultTopicFlow {
    messageHeap: number;
    partitionNum: number;
    replicaNum: number;
    topicId: string;
    topicName: string;
    topicTraffic: string;
}

export interface GetCkafkaTopicFlowRankingResultTopicMessageHeap {
    messageHeap: number;
    partitionNum: number;
    replicaNum: number;
    topicId: string;
    topicName: string;
    topicTraffic: string;
}

export interface GetCkafkaTopicProduceConnectionResult {
    ipAddr: string;
    isUnSupportVersion: boolean;
    time: string;
}

export interface GetCkafkaTopicSubscribeGroupGroupsInfo {
    errorCode: string;
    group: string;
    members: outputs.GetCkafkaTopicSubscribeGroupGroupsInfoMember[];
    protocol: string;
    protocolType: string;
    state: string;
}

export interface GetCkafkaTopicSubscribeGroupGroupsInfoMember {
    assignments: outputs.GetCkafkaTopicSubscribeGroupGroupsInfoMemberAssignment[];
    clientHost: string;
    clientId: string;
    memberId: string;
}

export interface GetCkafkaTopicSubscribeGroupGroupsInfoMemberAssignment {
    topics: outputs.GetCkafkaTopicSubscribeGroupGroupsInfoMemberAssignmentTopic[];
    version: number;
}

export interface GetCkafkaTopicSubscribeGroupGroupsInfoMemberAssignmentTopic {
    partitions: number[];
    topic: string;
}

export interface GetCkafkaTopicSyncReplicaTopicInSyncReplicaList {
    beginOffset: number;
    endOffset: number;
    inSyncReplica: string;
    leader: number;
    messageCount: number;
    outOfSyncReplica: string;
    partition: string;
    replica: string;
}

export interface GetCkafkaTopicsInstanceList {
    cleanUpPolicy: string;
    createTime: string;
    enableWhiteList: boolean;
    forwardCosBucket: string;
    forwardInterval: number;
    forwardStatus: number;
    ipWhiteListCount: number;
    maxMessageBytes: number;
    note: string;
    partitionNum: number;
    replicaNum: number;
    retention: number;
    segment: number;
    segmentBytes: number;
    syncReplicaMinNum: number;
    topicId: string;
    topicName: string;
    uncleanLeaderElectionEnable: boolean;
}

export interface GetCkafkaUsersUserList {
    accountName: string;
    createTime: string;
    updateTime: string;
}

export interface GetCkafkaZoneResult {
    clusterInfos: outputs.GetCkafkaZoneResultClusterInfo[];
    maxBandwidth: number;
    maxBuyInstanceNum: number;
    messagePrices: outputs.GetCkafkaZoneResultMessagePrice[];
    physical: string;
    profession: string;
    publicNetwork: string;
    publicNetworkLimit: string;
    standard: string;
    standardS2: string;
    unitPrices: outputs.GetCkafkaZoneResultUnitPrice[];
    zoneLists: outputs.GetCkafkaZoneResultZoneList[];
}

export interface GetCkafkaZoneResultClusterInfo {
    availableBandWidth: number;
    availableDiskSize: number;
    clusterId: number;
    clusterName: string;
    maxBandWidth: number;
    maxDiskSize: number;
    zoneId: number;
    zoneIds: number[];
}

export interface GetCkafkaZoneResultMessagePrice {
    realTotalCost: number;
    totalCost: number;
}

export interface GetCkafkaZoneResultUnitPrice {
    realTotalCost: number;
    totalCost: number;
}

export interface GetCkafkaZoneResultZoneList {
    appId: number;
    exflag: string;
    flag: boolean;
    isInternalApp: number;
    salesInfos: outputs.GetCkafkaZoneResultZoneListSalesInfo[];
    soldOut: string;
    zoneId: string;
    zoneName: string;
    zoneStatus: number;
}

export interface GetCkafkaZoneResultZoneListSalesInfo {
    flag: boolean;
    platform: string;
    soldOut: boolean;
    version: string;
}

export interface GetClbAttachmentsAttachmentList {
    clbId: string;
    listenerId: string;
    protocolType: string;
    ruleId: string;
    targets: outputs.GetClbAttachmentsAttachmentListTarget[];
}

export interface GetClbAttachmentsAttachmentListTarget {
    eniIp: string;
    instanceId: string;
    port: number;
    weight: number;
}

export interface GetClbClusterResourcesClusterResourceSet {
    clusterId: string;
    clusterName: string;
    clustersZones: outputs.GetClbClusterResourcesClusterResourceSetClustersZone[];
    idle: string;
    isp: string;
    loadBalancerId: string;
    vip: string;
}

export interface GetClbClusterResourcesClusterResourceSetClustersZone {
    masterZones: string[];
    slaveZones: string[];
}

export interface GetClbClusterResourcesFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter values.
     */
    values: string[];
}

export interface GetClbCrossTargetsCrossTargetSet {
    eniId: string;
    instanceId: string;
    instanceName: string;
    ip: string;
    localVpcId: string;
    region: string;
    vpcId: string;
    vpcName: string;
}

export interface GetClbCrossTargetsFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter values.
     */
    values: string[];
}

export interface GetClbExclusiveClustersClusterSet {
    clusterId: string;
    clusterName: string;
    clusterTag: string;
    clusterType: string;
    clustersVersion: string;
    clustersZones: outputs.GetClbExclusiveClustersClusterSetClustersZone[];
    disasterRecoveryType: string;
    httpMaxNewConn: number;
    httpQps: number;
    httpsMaxNewConn: number;
    httpsQps: number;
    idleResourceCount: number;
    isp: string;
    loadBalanceDirectorCount: number;
    maxConn: number;
    maxInFlow: number;
    maxInPkg: number;
    maxNewConn: number;
    maxOutFlow: number;
    maxOutPkg: number;
    network: string;
    resourceCount: number;
    zone: string;
}

export interface GetClbExclusiveClustersClusterSetClustersZone {
    masterZones: string[];
    slaveZones: string[];
}

export interface GetClbExclusiveClustersFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter value array.
     */
    values: string[];
}

export interface GetClbIdleInstancesIdleLoadBalancer {
    domain: string;
    forward: number;
    idleReason: string;
    loadBalancerId: string;
    loadBalancerName: string;
    region: string;
    status: number;
    vip: string;
}

export interface GetClbInstanceByCertIdCertSet {
    certId: string;
    loadBalancers: outputs.GetClbInstanceByCertIdCertSetLoadBalancer[];
}

export interface GetClbInstanceByCertIdCertSetLoadBalancer {
    addressIPVersion: string;
    addressIPv6: string;
    anycastZone: string;
    attributeFlags: string[];
    backupZoneSets: outputs.GetClbInstanceByCertIdCertSetLoadBalancerBackupZoneSet[];
    chargeType: string;
    clusterIds: string[];
    clusterTag: string;
    configId: string;
    createTime: string;
    domain: string;
    exclusiveClusters: outputs.GetClbInstanceByCertIdCertSetLoadBalancerExclusiveCluster[];
    expireTime: string;
    extraInfos: outputs.GetClbInstanceByCertIdCertSetLoadBalancerExtraInfo[];
    forward: number;
    healthLogSetId: string;
    healthLogTopicId: string;
    ipv6Mode: string;
    isBlock: boolean;
    isBlockTime: string;
    isDdos: boolean;
    isolatedTime: string;
    isolation: number;
    loadBalancerDomain: string;
    loadBalancerId: string;
    loadBalancerName: string;
    loadBalancerPassToTarget: boolean;
    loadBalancerType: string;
    loadBalancerVips: string[];
    localBgp: boolean;
    log: string;
    logSetId: string;
    logTopicId: string;
    masterZones: outputs.GetClbInstanceByCertIdCertSetLoadBalancerMasterZone[];
    mixIpTarget: boolean;
    networkAttributes: outputs.GetClbInstanceByCertIdCertSetLoadBalancerNetworkAttribute[];
    nfvInfo: string;
    numericalVpcId: number;
    openBgp: number;
    prepaidAttributes: outputs.GetClbInstanceByCertIdCertSetLoadBalancerPrepaidAttribute[];
    projectId: number;
    secureGroups: string[];
    slaType: string;
    snat: boolean;
    snatIps: outputs.GetClbInstanceByCertIdCertSetLoadBalancerSnatIp[];
    snatPro: boolean;
    status: number;
    statusTime: string;
    subnetId: string;
    tags: outputs.GetClbInstanceByCertIdCertSetLoadBalancerTag[];
    targetRegionInfos: outputs.GetClbInstanceByCertIdCertSetLoadBalancerTargetRegionInfo[];
    vipIsp: string;
    vpcId: string;
    zones: string[];
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerBackupZoneSet {
    edgeZone: boolean;
    localZone: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
    zoneRegion: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerExclusiveCluster {
    classicalClusters: outputs.GetClbInstanceByCertIdCertSetLoadBalancerExclusiveClusterClassicalCluster[];
    l4Clusters: outputs.GetClbInstanceByCertIdCertSetLoadBalancerExclusiveClusterL4Cluster[];
    l7Clusters: outputs.GetClbInstanceByCertIdCertSetLoadBalancerExclusiveClusterL7Cluster[];
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerExclusiveClusterClassicalCluster {
    clusterId: string;
    clusterName: string;
    zone: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerExclusiveClusterL4Cluster {
    clusterId: string;
    clusterName: string;
    zone: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerExclusiveClusterL7Cluster {
    clusterId: string;
    clusterName: string;
    zone: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerExtraInfo {
    tgwGroupName: string;
    zhiTong: boolean;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerMasterZone {
    edgeZone: boolean;
    localZone: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
    zoneRegion: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerNetworkAttribute {
    bandwidthpkgSubType: string;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerPrepaidAttribute {
    period: number;
    renewFlag: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerSnatIp {
    ip: string;
    subnetId: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerTag {
    tagKey: string;
    tagValue: string;
}

export interface GetClbInstanceByCertIdCertSetLoadBalancerTargetRegionInfo {
    region: string;
    vpcId: string;
}

export interface GetClbInstanceDetailFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter value array.
     */
    values: string[];
}

export interface GetClbInstanceDetailLoadBalancerDetailSet {
    address: string;
    addressIpVersion: string;
    addressIpv6: string;
    addressIsp: string;
    chargeType: string;
    configId: string;
    createTime: string;
    domain: string;
    domains: string;
    extraInfos: outputs.GetClbInstanceDetailLoadBalancerDetailSetExtraInfo[];
    ipv6Mode: string;
    isolation: number;
    listenerId: string;
    loadBalancerDomain: string;
    loadBalancerId: string;
    loadBalancerName: string;
    loadBalancerPassToTarget: number;
    loadBalancerType: string;
    locationId: string;
    networkAttributes: outputs.GetClbInstanceDetailLoadBalancerDetailSetNetworkAttribute[];
    port: number;
    prepaidAttributes: outputs.GetClbInstanceDetailLoadBalancerDetailSetPrepaidAttribute[];
    projectId: number;
    protocol: string;
    securityGroups: string[];
    slaveZones: string[];
    sniSwitch: number;
    status: number;
    tags: outputs.GetClbInstanceDetailLoadBalancerDetailSetTag[];
    targetAddress: string;
    targetHealth: string;
    targetId: string;
    targetPort: number;
    targetWeight: number;
    url: string;
    vpcId: string;
    zone: string;
    zones: string[];
}

export interface GetClbInstanceDetailLoadBalancerDetailSetExtraInfo {
    tgwGroupName: string;
    zhiTong: boolean;
}

export interface GetClbInstanceDetailLoadBalancerDetailSetNetworkAttribute {
    bandwidthPkgSubType: string;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
}

export interface GetClbInstanceDetailLoadBalancerDetailSetPrepaidAttribute {
    period: number;
    renewFlag: string;
}

export interface GetClbInstanceDetailLoadBalancerDetailSetTag {
    tagKey: string;
    tagValue: string;
}

export interface GetClbInstanceTrafficLoadBalancerTraffic {
    domain: string;
    loadBalancerId: string;
    loadBalancerName: string;
    outBandwidth: number;
    region: string;
    vip: string;
}

export interface GetClbInstancesClbList {
    addressIpVersion: string;
    clbId: string;
    clbName: string;
    clbVips: string[];
    clusterId: string;
    createTime: string;
    internetBandwidthMaxOut: number;
    internetChargeType: string;
    localZone: boolean;
    networkType: string;
    projectId: number;
    securityGroups: string[];
    status: number;
    statusTime: string;
    subnetId: string;
    tags: {[key: string]: string};
    targetRegionInfoRegion: string;
    targetRegionInfoVpcId: string;
    vipIsp: string;
    vpcId: string;
    zone: string;
    zoneId: number;
    zoneName: string;
    zoneRegion: string;
}

export interface GetClbListenerRulesRuleList {
    certificateCaId: string;
    certificateId: string;
    certificateSslMode: string;
    clbId: string;
    domain: string;
    healthCheckHealthNum: number;
    healthCheckHttpCode: number;
    healthCheckHttpDomain: string;
    healthCheckHttpMethod: string;
    healthCheckHttpPath: string;
    healthCheckIntervalTime: number;
    healthCheckSwitch: boolean;
    healthCheckUnhealthNum: number;
    http2Switch: boolean;
    listenerId: string;
    ruleId: string;
    scheduler: string;
    sessionExpireTime: number;
    url: string;
}

export interface GetClbListenersByTargetsBackend {
    /**
     * Private network IP to be queried, which can be of the CVM or ENI.
     */
    privateIp: string;
    /**
     * VPC ID.
     */
    vpcId: string;
}

export interface GetClbListenersByTargetsLoadBalancer {
    listeners: outputs.GetClbListenersByTargetsLoadBalancerListener[];
    loadBalancerId: string;
    region: string;
    vip: string;
}

export interface GetClbListenersByTargetsLoadBalancerListener {
    endPort: number;
    listenerId: string;
    port: number;
    protocol: string;
    rules: outputs.GetClbListenersByTargetsLoadBalancerListenerRule[];
    targets: outputs.GetClbListenersByTargetsLoadBalancerListenerTarget[];
}

export interface GetClbListenersByTargetsLoadBalancerListenerRule {
    domain: string;
    locationId: string;
    targets: outputs.GetClbListenersByTargetsLoadBalancerListenerRuleTarget[];
    url: string;
}

export interface GetClbListenersByTargetsLoadBalancerListenerRuleTarget {
    port: number;
    privateIp: string;
    type: string;
    vpcId: number;
    weight: number;
}

export interface GetClbListenersByTargetsLoadBalancerListenerTarget {
    port: number;
    privateIp: string;
    type: string;
    vpcId: number;
    weight: number;
}

export interface GetClbListenersListenerList {
    certificateCaId: string;
    certificateId: string;
    certificateSslMode: string;
    clbId: string;
    healthCheckContextType: string;
    healthCheckHealthNum: number;
    healthCheckHttpCode: number;
    healthCheckHttpDomain: string;
    healthCheckHttpMethod: string;
    healthCheckHttpPath: string;
    healthCheckHttpVersion: string;
    healthCheckIntervalTime: number;
    healthCheckPort: number;
    healthCheckRecvContext: string;
    healthCheckSendContext: string;
    healthCheckSwitch: boolean;
    healthCheckTimeOut: number;
    healthCheckType: string;
    healthCheckUnhealthNum: number;
    listenerId: string;
    listenerName: string;
    port: number;
    protocol: string;
    scheduler: string;
    sessionExpireTime: number;
    sniSwitch: boolean;
}

export interface GetClbRedirectionsRedirectionList {
    clbId: string;
    sourceListenerId: string;
    sourceRuleId: string;
    targetListenerId: string;
    targetRuleId: string;
}

export interface GetClbResourcesFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter value array.
     */
    values: string[];
}

export interface GetClbResourcesZoneResourceSet {
    edgeZone: boolean;
    ipVersion: string;
    localZone: boolean;
    masterZone: string;
    resourceSets: outputs.GetClbResourcesZoneResourceSetResourceSet[];
    slaveZone: string;
    zoneRegion: string;
    zoneResourceType: string;
}

export interface GetClbResourcesZoneResourceSetResourceSet {
    availabilitySets: outputs.GetClbResourcesZoneResourceSetResourceSetAvailabilitySet[];
    isp: string;
    types: string[];
}

export interface GetClbResourcesZoneResourceSetResourceSetAvailabilitySet {
    availability: string;
    type: string;
}

export interface GetClbTargetGroupListFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter value array.
     */
    values: string[];
}

export interface GetClbTargetGroupListTargetGroupSet {
    associatedRules: outputs.GetClbTargetGroupListTargetGroupSetAssociatedRule[];
    createdTime: string;
    port: number;
    targetGroupId: string;
    targetGroupName: string;
    updatedTime: string;
    vpcId: string;
}

export interface GetClbTargetGroupListTargetGroupSetAssociatedRule {
    domain: string;
    listenerId: string;
    listenerName: string;
    loadBalancerId: string;
    loadBalancerName: string;
    locationId: string;
    port: number;
    protocol: string;
    url: string;
}

export interface GetClbTargetGroupsList {
    associatedRuleLists: outputs.GetClbTargetGroupsListAssociatedRuleList[];
    createTime: string;
    port: number;
    targetGroupId: string;
    targetGroupInstanceLists: outputs.GetClbTargetGroupsListTargetGroupInstanceList[];
    targetGroupName: string;
    updateTime: string;
    vpcId: string;
}

export interface GetClbTargetGroupsListAssociatedRuleList {
    domain: string;
    listenerId: string;
    listenerName: string;
    listenerPort: number;
    loadBalancerId: string;
    loadBalancerName: string;
    locationId: string;
    protocol: string;
    url: string;
}

export interface GetClbTargetGroupsListTargetGroupInstanceList {
    eniId: string;
    instanceId: string;
    instanceName: string;
    privateIpAddresses: string[];
    publicIpAddresses: string[];
    registeredTime: string;
    serverPort: number;
    serverType: string;
    weight: number;
}

export interface GetClbTargetHealthLoadBalancer {
    listeners: outputs.GetClbTargetHealthLoadBalancerListener[];
    loadBalancerId: string;
    loadBalancerName: string;
}

export interface GetClbTargetHealthLoadBalancerListener {
    listenerId: string;
    listenerName: string;
    port: number;
    protocol: string;
    rules: outputs.GetClbTargetHealthLoadBalancerListenerRule[];
}

export interface GetClbTargetHealthLoadBalancerListenerRule {
    domain: string;
    locationId: string;
    targets: outputs.GetClbTargetHealthLoadBalancerListenerRuleTarget[];
    url: string;
}

export interface GetClbTargetHealthLoadBalancerListenerRuleTarget {
    healthStatus: boolean;
    healthStatusDetail: string;
    ip: string;
    port: number;
    targetId: string;
}

export interface GetClickhouseBackupJobDetailTableContent {
    database: string;
    ips: string;
    rip: string;
    table: string;
    totalBytes: number;
    vCluster: string;
    zooPath: string;
}

export interface GetClickhouseBackupJobsBackUpJob {
    backUpSize: number;
    backUpTime: string;
    backUpType: string;
    expireTime: string;
    jobId: number;
    jobStatus: string;
    snapshot: string;
}

export interface GetClickhouseBackupTablesAvailableTable {
    database: string;
    ips: string;
    rip: string;
    table: string;
    totalBytes: number;
    vCluster: string;
    zooPath: string;
}

export interface GetClickhouseInstanceNodesInstanceNodesList {
    cluster: string;
    core: number;
    diskSize: number;
    diskType: string;
    ip: string;
    isChProxy: boolean;
    memory: number;
    nodeGroups: outputs.GetClickhouseInstanceNodesInstanceNodesListNodeGroup[];
    rip: string;
    spec: string;
}

export interface GetClickhouseInstanceNodesInstanceNodesListNodeGroup {
    groupName: string;
    replicaName: string;
    shardName: string;
}

export interface GetClickhouseSpecAttachCbsSpec {
    diskCount: number;
    diskDesc: string;
    diskType: string;
    maxDiskSize: number;
    minDiskSize: number;
}

export interface GetClickhouseSpecCommonSpec {
    available: boolean;
    computeSpecDesc: string;
    cpu: number;
    dataDisks: outputs.GetClickhouseSpecCommonSpecDataDisk[];
    displayName: string;
    instanceQuota: number;
    maxNodeSize: number;
    mem: number;
    name: string;
    systemDisks: outputs.GetClickhouseSpecCommonSpecSystemDisk[];
    type: string;
}

export interface GetClickhouseSpecCommonSpecDataDisk {
    diskCount: number;
    diskDesc: string;
    diskType: string;
    maxDiskSize: number;
    minDiskSize: number;
}

export interface GetClickhouseSpecCommonSpecSystemDisk {
    diskCount: number;
    diskDesc: string;
    diskType: string;
    maxDiskSize: number;
    minDiskSize: number;
}

export interface GetClickhouseSpecDataSpec {
    available: boolean;
    computeSpecDesc: string;
    cpu: number;
    dataDisks: outputs.GetClickhouseSpecDataSpecDataDisk[];
    displayName: string;
    instanceQuota: number;
    maxNodeSize: number;
    mem: number;
    name: string;
    systemDisks: outputs.GetClickhouseSpecDataSpecSystemDisk[];
    type: string;
}

export interface GetClickhouseSpecDataSpecDataDisk {
    diskCount: number;
    diskDesc: string;
    diskType: string;
    maxDiskSize: number;
    minDiskSize: number;
}

export interface GetClickhouseSpecDataSpecSystemDisk {
    diskCount: number;
    diskDesc: string;
    diskType: string;
    maxDiskSize: number;
    minDiskSize: number;
}

export interface GetClsLogsetsFilter {
    /**
     * Fields that need to be filtered. Support: `logsetName`, `logsetId`, `tagKey`, `tag:tagKey`.
     */
    key: string;
    /**
     * The values that need to be filtered.
     */
    values: string[];
}

export interface GetClsLogsetsLogset {
    assumerName: string;
    createTime: string;
    logsetId: string;
    logsetName: string;
    roleName: string;
    tags: outputs.GetClsLogsetsLogsetTag[];
    topicCount: number;
}

export interface GetClsLogsetsLogsetTag {
    key: string;
    value: string;
}

export interface GetClsMachineGroupConfigsConfig {
    configId: string;
    createTime: string;
    excludePaths: outputs.GetClsMachineGroupConfigsConfigExcludePath[];
    extractRules: outputs.GetClsMachineGroupConfigsConfigExtractRule[];
    logFormat: string;
    logType: string;
    name: string;
    output: string;
    path: string;
    updateTime: string;
    userDefineRule: string;
}

export interface GetClsMachineGroupConfigsConfigExcludePath {
    type: string;
    value: string;
}

export interface GetClsMachineGroupConfigsConfigExtractRule {
    address: string;
    backtracking: number;
    beginRegex: string;
    delimiter: string;
    filterKeyRegexes: outputs.GetClsMachineGroupConfigsConfigExtractRuleFilterKeyRegex[];
    isGbk: number;
    jsonStandard: number;
    keys: string[];
    logRegex: string;
    metaTags: outputs.GetClsMachineGroupConfigsConfigExtractRuleMetaTag[];
    metadataType: number;
    parseProtocol: string;
    pathRegex: string;
    protocol: string;
    timeFormat: string;
    timeKey: string;
    unMatchLogKey: string;
    unMatchUpLoadSwitch: boolean;
}

export interface GetClsMachineGroupConfigsConfigExtractRuleFilterKeyRegex {
    key: string;
    regex: string;
}

export interface GetClsMachineGroupConfigsConfigExtractRuleMetaTag {
    key: string;
    value: string;
}

export interface GetClsMachinesMachine {
    autoUpdate: number;
    errCode: number;
    errMsg: string;
    ip: string;
    offlineTime: string;
    status: number;
    updateStatus: number;
    version: string;
}

export interface GetClsShipperTasksTask {
    endTime: number;
    message: string;
    rangeEnd: number;
    rangeStart: number;
    shipperId: string;
    startTime: number;
    status: string;
    taskId: string;
    topicId: string;
}

export interface GetContainerClusterInstancesNode {
    abnormalReason: string;
    cpu: number;
    instanceId: string;
    isNormal: number;
    lanIp: string;
    mem: number;
    wanIp: string;
}

export interface GetContainerClustersCluster {
    clusterId: string;
    clusterName: string;
    description: string;
    kubernetesVersion: string;
    nodesNum: number;
    nodesStatus: string;
    securityCertificationAuthority: string;
    securityClusterExternalEndpoint: string;
    securityPassword: string;
    securityUsername: string;
    totalCpu: number;
    totalMem: number;
}

export interface GetCosBatchsJob {
    creationTime: string;
    description: string;
    jobId: string;
    operation: string;
    priority: number;
    progressSummaries: outputs.GetCosBatchsJobProgressSummary[];
    status: string;
    terminationDate: string;
}

export interface GetCosBatchsJobProgressSummary {
    numberOfTasksFailed: number;
    numberOfTasksSucceeded: number;
    totalNumberOfTasks: number;
}

export interface GetCosBucketInventorysInventory {
    destinations: outputs.GetCosBucketInventorysInventoryDestination[];
    filters: outputs.GetCosBucketInventorysInventoryFilter[];
    id: string;
    includedObjectVersions: string;
    isEnabled: string;
    optionalFields: outputs.GetCosBucketInventorysInventoryOptionalField[];
    schedules: outputs.GetCosBucketInventorysInventorySchedule[];
}

export interface GetCosBucketInventorysInventoryDestination {
    accountId: string;
    bucket: string;
    encryptions: outputs.GetCosBucketInventorysInventoryDestinationEncryption[];
    format: string;
    prefix: string;
}

export interface GetCosBucketInventorysInventoryDestinationEncryption {
    sseCos: string;
}

export interface GetCosBucketInventorysInventoryFilter {
    periods: outputs.GetCosBucketInventorysInventoryFilterPeriod[];
    prefix: string;
}

export interface GetCosBucketInventorysInventoryFilterPeriod {
    endTime: string;
    startTime: string;
}

export interface GetCosBucketInventorysInventoryOptionalField {
    fields: string[];
}

export interface GetCosBucketInventorysInventorySchedule {
    frequency: string;
}

export interface GetCosBucketMultipartUploadsUpload {
    initiated: string;
    initiators: outputs.GetCosBucketMultipartUploadsUploadInitiator[];
    key: string;
    owners: outputs.GetCosBucketMultipartUploadsUploadOwner[];
    storageClass: string;
    uploadId: string;
}

export interface GetCosBucketMultipartUploadsUploadInitiator {
    displayName: string;
    id: string;
}

export interface GetCosBucketMultipartUploadsUploadOwner {
    displayName: string;
    id: string;
}

export interface GetCosBucketsBucketList {
    acl: string;
    aclBody: string;
    bucket: string;
    corsRules: outputs.GetCosBucketsBucketListCorsRule[];
    cosBucketUrl: string;
    lifecycleRules: outputs.GetCosBucketsBucketListLifecycleRule[];
    originDomainRules: outputs.GetCosBucketsBucketListOriginDomainRule[];
    originPullRules: outputs.GetCosBucketsBucketListOriginPullRule[];
    tags: {[key: string]: string};
    websites: outputs.GetCosBucketsBucketListWebsite[];
}

export interface GetCosBucketsBucketListCorsRule {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposeHeaders: string[];
    maxAgeSeconds: number;
}

export interface GetCosBucketsBucketListLifecycleRule {
    abortIncompleteMultipartUploads: outputs.GetCosBucketsBucketListLifecycleRuleAbortIncompleteMultipartUpload[];
    expirations: outputs.GetCosBucketsBucketListLifecycleRuleExpiration[];
    filterPrefix: string;
    nonCurrentExpirations: outputs.GetCosBucketsBucketListLifecycleRuleNonCurrentExpiration[];
    nonCurrentTransitions: outputs.GetCosBucketsBucketListLifecycleRuleNonCurrentTransition[];
    transitions: outputs.GetCosBucketsBucketListLifecycleRuleTransition[];
}

export interface GetCosBucketsBucketListLifecycleRuleAbortIncompleteMultipartUpload {
    daysAfterInitiation: number;
}

export interface GetCosBucketsBucketListLifecycleRuleExpiration {
    date: string;
    days: number;
}

export interface GetCosBucketsBucketListLifecycleRuleNonCurrentExpiration {
    nonCurrentDays: number;
}

export interface GetCosBucketsBucketListLifecycleRuleNonCurrentTransition {
    nonCurrentDays: number;
    storageClass: string;
}

export interface GetCosBucketsBucketListLifecycleRuleTransition {
    date: string;
    days: number;
    storageClass: string;
}

export interface GetCosBucketsBucketListOriginDomainRule {
    domain: string;
    status: string;
    type: string;
}

export interface GetCosBucketsBucketListOriginPullRule {
    customHttpHeaders: {[key: string]: string};
    followHttpHeaders: string[];
    followQueryString: boolean;
    followRedirection: boolean;
    host: string;
    prefix: string;
    priority: number;
    protocol: string;
    syncBackToSource: boolean;
}

export interface GetCosBucketsBucketListWebsite {
    errorDocument: string;
    indexDocument: string;
}

export interface GetCssBackupStreamStreamInfoList {
    backupLists: outputs.GetCssBackupStreamStreamInfoListBackupList[];
    hostGroupName: string;
    optimalEnable: number;
    streamName: string;
}

export interface GetCssBackupStreamStreamInfoListBackupList {
    appName: string;
    domainName: string;
    masterFlag: number;
    publishTime: string;
    sourceFrom: string;
    upstreamSequence: string;
}

export interface GetCssDeliverLogDownListLogInfoList {
    fileSize: number;
    logName: string;
    logTime: string;
    logUrl: string;
}

export interface GetCssDomainsDomainList {
    bCName: number;
    createTime: string;
    currentCName: string;
    isDelayLive: number;
    isMiniProgramLive: number;
    name: string;
    playType: number;
    rentExpireTime: string;
    rentTag: number;
    status: number;
    targetDomain: string;
    type: number;
}

export interface GetCssMonitorReportDiagnoseResult {
    lowFrameRateResults: string[];
    streamBrokenResults: string[];
    streamFormatResults: string[];
}

export interface GetCssMonitorReportMpsResult {
    aiAsrResults: string[];
    aiOcrResults: string[];
}

export interface GetCssPadTemplatesTemplate {
    createTime: string;
    description: string;
    maxDuration: number;
    templateId: number;
    templateName: string;
    type: number;
    updateTime: string;
    url: string;
    waitDuration: number;
}

export interface GetCssPullStreamTaskStatusTaskStatusInfo {
    fileDuration: number;
    fileUrl: string;
    loopedTimes: number;
    nextFileUrl: string;
    offsetTime: number;
    reportTime: string;
    runStatus: string;
}

export interface GetCssStreamMonitorListLiveStreamMonitor {
    aiAsrInputIndexLists: number[];
    aiFormatDiagnose: number;
    aiOcrInputIndexLists: number[];
    allowMonitorReport: number;
    asrLanguage: number;
    audibleInputIndexLists: number[];
    checkStreamBroken: number;
    checkStreamLowFrameRate: number;
    createTime: number;
    inputLists: outputs.GetCssStreamMonitorListLiveStreamMonitorInputList[];
    monitorId: string;
    monitorName: string;
    notifyPolicies: outputs.GetCssStreamMonitorListLiveStreamMonitorNotifyPolicy[];
    ocrLanguage: number;
    outputInfos: outputs.GetCssStreamMonitorListLiveStreamMonitorOutputInfo[];
    startTime: number;
    status: number;
    stopTime: number;
    updateTime: number;
}

export interface GetCssStreamMonitorListLiveStreamMonitorInputList {
    description: string;
    inputApp: string;
    inputDomain: string;
    inputStreamName: string;
    inputUrl: string;
}

export interface GetCssStreamMonitorListLiveStreamMonitorNotifyPolicy {
    callbackUrl: string;
    notifyPolicyType: number;
}

export interface GetCssStreamMonitorListLiveStreamMonitorOutputInfo {
    outputApp: string;
    outputDomain: string;
    outputStreamHeight: number;
    outputStreamName: string;
    outputStreamWidth: number;
}

export interface GetCssTimeShiftRecordDetailRecordList {
    endTime: number;
    sid: string;
    startTime: number;
}

export interface GetCssTimeShiftStreamListStreamList {
    appName: string;
    domain: string;
    domainGroup: string;
    duration: number;
    endTime: number;
    startTime: number;
    streamName: string;
    streamType: number;
    transCodeId: number;
}

export interface GetCssWatermarksWatermarkList {
    createTime: string;
    height: number;
    pictureUrl: string;
    status: number;
    watermarkId: number;
    watermarkName: string;
    width: number;
    xPosition: number;
    yPosition: number;
}

export interface GetCssXp2pDetailInfoListDataInfoList {
    appId: string;
    cdnBytes: number;
    onlinePeople: number;
    p2pBytes: number;
    request: number;
    requestSuccess: number;
    streamName: string;
    stuckPeople: number;
    stuckTimes: number;
    time: string;
    type: string;
}

export interface GetCvmChcDeniedActionsChcHostDeniedActionSet {
    chcId: string;
    denyActions: string[];
    state: string;
}

export interface GetCvmChcHostsChcHostSet {
    bmcIp: string;
    bmcMac: string;
    bmcSecurityGroupIds: string[];
    bmcVirtualPrivateClouds: outputs.GetCvmChcHostsChcHostSetBmcVirtualPrivateCloud[];
    chcId: string;
    cpu: number;
    createdTime: string;
    cvmInstanceId: string;
    deployIp: string;
    deployMac: string;
    deploySecurityGroupIds: string[];
    deployVirtualPrivateClouds: outputs.GetCvmChcHostsChcHostSetDeployVirtualPrivateCloud[];
    deviceType: string;
    disk: string;
    hardwareDescription: string;
    instanceName: string;
    instanceState: string;
    memory: number;
    placements: outputs.GetCvmChcHostsChcHostSetPlacement[];
    serialNumber: string;
    tenantType: string;
}

export interface GetCvmChcHostsChcHostSetBmcVirtualPrivateCloud {
    asVpcGateway: boolean;
    ipv6AddressCount: number;
    privateIpAddresses: string[];
    subnetId: string;
    vpcId: string;
}

export interface GetCvmChcHostsChcHostSetDeployVirtualPrivateCloud {
    asVpcGateway: boolean;
    ipv6AddressCount: number;
    privateIpAddresses: string[];
    subnetId: string;
    vpcId: string;
}

export interface GetCvmChcHostsChcHostSetPlacement {
    hostId: string;
    hostIds: string[];
    hostIps: string[];
    projectId: number;
    zone: string;
}

export interface GetCvmChcHostsFilter {
    /**
     * Filter name.
     */
    name: string;
    /**
     * Filter values.
     */
    values: string[];
}

export interface GetCvmImageSharePermissionSharePermissionSet {
    accountId: string;
    createdTime: string;
}

export interface GetCvmImportImageOsImportImageOsListSupported {
    linuxes: string[];
    windows: string[];
}

export interface GetCvmImportImageOsImportImageOsVersionSet {
    architectures: string[];
    osName: string;
    osVersions: string[];
}

export interface GetCvmInstancesModificationFilter {
    /**
     * Fields to be filtered.
     */
    name: string;
    /**
     * Value of the field.
     */
    values: string[];
}

export interface GetCvmInstancesModificationInstanceTypeConfigStatusList {
    instanceTypeConfigs: outputs.GetCvmInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfig[];
    message: string;
    status: string;
}

export interface GetCvmInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfig {
    cpu: number;
    fpga: number;
    gpu: number;
    instanceFamily: string;
    instanceType: string;
    memory: number;
    zone: string;
}

export interface GetCwpMachinesSimpleFilter {
    /**
     * exact match. true or false.
     */
    exactMatch?: boolean;
    /**
     * Only supported Keywords, Version and TagId.
     */
    name: string;
    /**
     * If `name` is `Keywords`: enter keyword query; If `name` is `Version`: enter PRO_VERSION: Professional Edition | BASIC_VERSION: Basic | Flagship: Flagship | ProtectedMachines: Professional+Flagship | UnFlagship: Non Flagship | PRO_POST_PAY: Professional Edition Pay by Volume | PRO_PRE_PAY: Professional Edition Monthly Package query; If `name` is `TagId`: enter tag ID query.
     */
    values: string[];
}

export interface GetCwpMachinesSimpleMachine {
    cloudTags: outputs.GetCwpMachinesSimpleMachineCloudTag[];
    instanceId: string;
    instanceState: string;
    isProVersion: boolean;
    kernelVersion: string;
    licenseOrders: outputs.GetCwpMachinesSimpleMachineLicenseOrder[];
    machineIp: string;
    machineName: string;
    machineOs: string;
    machineType: string;
    machineWanIp: string;
    payMode: string;
    projectId: number;
    protectType: string;
    quuid: string;
    regionInfos: outputs.GetCwpMachinesSimpleMachineRegionInfo[];
    tags: outputs.GetCwpMachinesSimpleMachineTag[];
    uuid: string;
}

export interface GetCwpMachinesSimpleMachineCloudTag {
    tagKey: string;
    tagValue: string;
}

export interface GetCwpMachinesSimpleMachineLicenseOrder {
    licenseId: number;
    licenseType: number;
    resourceId: string;
    sourceType: number;
    status: number;
}

export interface GetCwpMachinesSimpleMachineRegionInfo {
    region: string;
    regionCode: string;
    regionId: number;
    regionName: string;
    regionNameEn: string;
}

export interface GetCwpMachinesSimpleMachineTag {
    name: string;
    rid: number;
    tagId: number;
}

export interface GetCynosdbAccountAllGrantPrivilegesAccount {
    /**
     * Account.
     */
    accountName: string;
    /**
     * Host, default `%`.
     */
    host?: string;
}

export interface GetCynosdbAccountAllGrantPrivilegesDatabasePrivilege {
    db: string;
    privileges: string[];
}

export interface GetCynosdbAccountAllGrantPrivilegesTablePrivilege {
    db: string;
    privileges: string[];
    tableName: string;
}

export interface GetCynosdbAccountsAccountSet {
    accountName: string;
    createTime: string;
    description: string;
    host: string;
    maxUserConnections: number;
    updateTime: string;
}

export interface GetCynosdbAuditLogsFilter {
    /**
     * Affects the number of rows. Indicates that filtering affects audit logs with rows greater than this value.
     */
    affectRows?: number;
    /**
     * Database name.
     */
    dbNames?: string[];
    /**
     * Execution time. Unit: ms. Indicates audit logs with a filter execution time greater than this value.
     */
    execTime?: number;
    /**
     * Client address.
     */
    hosts?: string[];
    /**
     * Audit policy name.
     */
    policyNames?: string[];
    /**
     * Returns the number of rows.
     */
    sentRows?: number;
    /**
     * SQL statement. Supports fuzzy matching.
     */
    sql?: string;
    /**
     * SQL type. Currently supported: SELECT, Insert, UPDATE, DELETE, CREATE, DROP, ALT, SET, REPLACE, EXECUTE.
     */
    sqlType?: string;
    /**
     * SQL type. Supports simultaneous querying of multiple types. Currently supported: SELECT, Insert, UPDATE, DELETE, CREATE, DROP, ALT, SET, REPLACE, EXECUTE.
     */
    sqlTypes?: string[];
    /**
     * SQL statement. Supports passing multiple SQL statements.
     */
    sqls?: string[];
    /**
     * Table name.
     */
    tableNames?: string[];
    /**
     * Thread ID.
     */
    threadIds?: string[];
    /**
     * User name.
     */
    users?: string[];
}

export interface GetCynosdbAuditLogsItem {
    affectRows: number;
    dbName: string;
    errCode: number;
    execTime: number;
    host: string;
    instanceName: string;
    policyName: string;
    sentRows: number;
    sql: string;
    sqlType: string;
    tableName: string;
    threadId: number;
    timestamp: string;
    user: string;
}

export interface GetCynosdbClusterDetailDatabasesDbInfo {
    appId: number;
    characterSet: string;
    clusterId: string;
    collateRule: string;
    createTime: string;
    dbId: number;
    dbName: string;
    description: string;
    status: string;
    uin: string;
    updateTime: string;
    userHostPrivileges: outputs.GetCynosdbClusterDetailDatabasesDbInfoUserHostPrivilege[];
}

export interface GetCynosdbClusterDetailDatabasesDbInfoUserHostPrivilege {
    dbHost: string;
    dbPrivilege: string;
    dbUserName: string;
}

export interface GetCynosdbClusterInstanceGroupsInstanceGrpInfoList {
    appId: number;
    clusterId: string;
    createdTime: string;
    deletedTime: string;
    instanceGrpId: string;
    instanceSets: outputs.GetCynosdbClusterInstanceGroupsInstanceGrpInfoListInstanceSet[];
    status: string;
    type: string;
    updatedTime: string;
    vip: string;
    vport: number;
    wanDomain: string;
    wanIp: string;
    wanPort: number;
    wanStatus: string;
}

export interface GetCynosdbClusterInstanceGroupsInstanceGrpInfoListInstanceSet {
    appId: number;
    businessType: string;
    clusterId: string;
    clusterName: string;
    cpu: number;
    createTime: string;
    cynosVersion: string;
    dbType: string;
    dbVersion: string;
    destroyDeadlineText: string;
    destroyTime: string;
    instanceId: string;
    instanceName: string;
    instanceRole: string;
    instanceType: string;
    isFreeze: string;
    isolateTime: string;
    maxCpu: number;
    memory: number;
    minCpu: number;
    netType: number;
    payMode: number;
    periodEndTime: string;
    physicalZone: string;
    processingTask: string;
    projectId: number;
    region: string;
    renewFlag: number;
    resourceTags: outputs.GetCynosdbClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTag[];
    serverlessStatus: string;
    status: string;
    statusDesc: string;
    storage: number;
    storageId: string;
    storagePayMode: number;
    subnetId: string;
    tasks: outputs.GetCynosdbClusterInstanceGroupsInstanceGrpInfoListInstanceSetTask[];
    uin: string;
    updateTime: string;
    vip: string;
    vpcId: string;
    vport: number;
    wanDomain: string;
    wanIp: string;
    wanPort: number;
    wanStatus: string;
    zone: string;
}

export interface GetCynosdbClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetCynosdbClusterInstanceGroupsInstanceGrpInfoListInstanceSetTask {
    objectId: string;
    objectType: string;
    taskId: number;
    taskStatus: string;
    taskType: string;
}

export interface GetCynosdbClusterParamLogsClusterParamLog {
    clusterId: string;
    createTime: string;
    currentValue: string;
    instanceId: string;
    paramName: string;
    status: string;
    updateTime: string;
    updateValue: string;
}

export interface GetCynosdbClusterParamsItem {
    currentValue: string;
    default: string;
    description: string;
    enumValues: string[];
    func: string;
    isFunc: boolean;
    isGlobal: number;
    matchType: string;
    matchValue: string;
    max: string;
    min: string;
    needReboot: number;
    paramName: string;
    paramType: string;
}

export interface GetCynosdbClusterTable {
    database: string;
    tables: string[];
}

export interface GetCynosdbClustersClusterList {
    autoRenewFlag: number;
    availableZone: string;
    chargeType: string;
    clusterId: string;
    clusterLimit: number;
    clusterName: string;
    clusterStatus: string;
    createTime: string;
    dbType: string;
    dbVersion: string;
    port: number;
    projectId: number;
    subnetId: string;
    vpcId: string;
}

export interface GetCynosdbDescribeInstanceErrorLogsErrorLog {
    content: string;
    level: string;
    timestamp: number;
}

export interface GetCynosdbDescribeInstanceSlowQueriesBinlog {
    binlogId: number;
    fileName: string;
    fileSize: number;
    finishTime: string;
    startTime: string;
}

export interface GetCynosdbInstanceSlowQueriesSlowQuery {
    database: string;
    lockTime: number;
    queryTime: number;
    rowsExamined: number;
    rowsSent: number;
    sqlMd5: string;
    sqlTemplate: string;
    sqlText: string;
    timestamp: number;
    userHost: string;
    userName: string;
}

export interface GetCynosdbInstancesInstanceList {
    clusterId: string;
    createTime: string;
    instanceCpuCore: number;
    instanceId: string;
    instanceMemorySize: number;
    instanceName: string;
    instanceStatus: string;
    instanceStorageSize: number;
    instanceType: string;
}

export interface GetCynosdbParamTemplatesItem {
    dbMode: string;
    engineVersion: string;
    id: number;
    paramInfoSets: outputs.GetCynosdbParamTemplatesItemParamInfoSet[];
    templateDescription: string;
    templateName: string;
}

export interface GetCynosdbParamTemplatesItemParamInfoSet {
    currentValue: string;
    default: string;
    description: string;
    enumValues: string[];
    max: string;
    min: string;
    needReboot: number;
    paramName: string;
    paramType: string;
}

export interface GetCynosdbProjectSecurityGroupsGroup {
    createTime: string;
    inbounds: outputs.GetCynosdbProjectSecurityGroupsGroupInbound[];
    outbounds: outputs.GetCynosdbProjectSecurityGroupsGroupOutbound[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
    securityGroupRemark: string;
}

export interface GetCynosdbProjectSecurityGroupsGroupInbound {
    action: string;
    addressModule: string;
    cidrIp: string;
    desc: string;
    id: string;
    ipProtocol: string;
    portRange: string;
    serviceModule: string;
}

export interface GetCynosdbProjectSecurityGroupsGroupOutbound {
    action: string;
    addressModule: string;
    cidrIp: string;
    desc: string;
    id: string;
    ipProtocol: string;
    portRange: string;
    serviceModule: string;
}

export interface GetCynosdbProxyNodeFilter {
    /**
     * Exact match or not.
     */
    exactMatch?: boolean;
    /**
     * Search Fields. Supported: Status, ProxyNodeId, ClusterId.
     */
    name?: string;
    /**
     * Search String.
     */
    names: string[];
    /**
     * Operator.
     */
    operator?: string;
    /**
     * Search String.
     */
    values: string[];
}

export interface GetCynosdbProxyNodeProxyNodeInfo {
    appId: number;
    clusterId: string;
    cpu: number;
    mem: number;
    proxyGroupId: string;
    proxyNodeConnections: number;
    proxyNodeId: string;
    region: string;
    status: string;
    zone: string;
}

export interface GetCynosdbResourcePackageListResourcePackageList {
    appId: number;
    bindInstanceInfos: outputs.GetCynosdbResourcePackageListResourcePackageListBindInstanceInfo[];
    expireTime: string;
    hasQuota: boolean;
    packageId: string;
    packageName: string;
    packageRegion: string;
    packageTotalSpec: number;
    packageType: string;
    packageUsedSpec: number;
    startTime: string;
    status: string;
}

export interface GetCynosdbResourcePackageListResourcePackageListBindInstanceInfo {
    instanceId: string;
    instanceRegion: string;
    instanceType: string;
}

export interface GetCynosdbResourcePackageSaleSpecsDetail {
    expireDay: number;
    maxPackageSpec: number;
    minPackageSpec: number;
    packageRegion: string;
    packageType: string;
    packageVersion: string;
}

export interface GetCynosdbRollbackTimeRangeRollbackTimeRange {
    timeRangeEnd: string;
    timeRangeStart: string;
}

export interface GetCynosdbZoneConfigList {
    cpu: number;
    machineType: string;
    maxIoBandwidth: number;
    maxStorageSize: number;
    memory: number;
    minStorageSize: number;
    zoneStockInfos: outputs.GetCynosdbZoneConfigListZoneStockInfo[];
}

export interface GetCynosdbZoneConfigListZoneStockInfo {
    hasStock: boolean;
    zone: string;
}

export interface GetCynosdbZoneRegionSet {
    dbType: string;
    modules: outputs.GetCynosdbZoneRegionSetModule[];
    region: string;
    regionId: number;
    regionZh: string;
    zoneSets: outputs.GetCynosdbZoneRegionSetZoneSet[];
}

export interface GetCynosdbZoneRegionSetModule {
    isDisable: string;
    moduleName: string;
}

export interface GetCynosdbZoneRegionSetZoneSet {
    hasPermission: boolean;
    isSupportNormal: number;
    isSupportServerless: number;
    isWholeRdmaZone: string;
    physicalZone: string;
    zone: string;
    zoneId: number;
    zoneZh: string;
}

export interface GetDayuCcHttpPoliciesList {
    action: string;
    createTime: string;
    frequency: number;
    ipLists: string[];
    name: string;
    policyId: string;
    resourceId: string;
    resourceType: string;
    ruleLists: outputs.GetDayuCcHttpPoliciesListRuleList[];
    smode: string;
    switch: boolean;
}

export interface GetDayuCcHttpPoliciesListRuleList {
    operator: string;
    skey: string;
    value: string;
}

export interface GetDayuCcHttpsPoliciesList {
    action: string;
    createTime: string;
    domain: string;
    ipLists: string[];
    name: string;
    policyId: string;
    resourceId: string;
    resourceType: string;
    ruleId: string;
    ruleLists: outputs.GetDayuCcHttpsPoliciesListRuleList[];
    switch: boolean;
}

export interface GetDayuCcHttpsPoliciesListRuleList {
    operator: string;
    skey: string;
    value: string;
}

export interface GetDayuDdosPoliciesList {
    blackIps: string[];
    createTime: string;
    dropOptions: outputs.GetDayuDdosPoliciesListDropOption[];
    name: string;
    packetFilters: outputs.GetDayuDdosPoliciesListPacketFilter[];
    policyId: string;
    portFilters: outputs.GetDayuDdosPoliciesListPortFilter[];
    sceneId: string;
    watermarkFilters: outputs.GetDayuDdosPoliciesListWatermarkFilter[];
    watermarkKeys: outputs.GetDayuDdosPoliciesListWatermarkKey[];
    whiteIps: string[];
}

export interface GetDayuDdosPoliciesListDropOption {
    badConnThreshold: number;
    checkSyncConn: boolean;
    connTimeout: number;
    dConnLimit: number;
    dNewLimit: number;
    dropAbroad: boolean;
    dropIcmp: boolean;
    dropOther: boolean;
    dropTcp: boolean;
    dropUdp: boolean;
    icmpMbpsLimit: number;
    nullConnEnable: boolean;
    otherMbpsLimit: number;
    sConnLimit: number;
    sNewLimit: number;
    synLimit: number;
    synRate: number;
    tcpMbpsLimit: number;
    udpMbpsLimit: number;
}

export interface GetDayuDdosPoliciesListPacketFilter {
    action: string;
    dEndPort: number;
    dStartPort: number;
    depth: number;
    isInclude: boolean;
    matchBegin: string;
    matchStr: string;
    matchType: string;
    offset: number;
    pktLengthMax: number;
    pktLengthMin: number;
    protocol: string;
    sEndPort: number;
    sStartPort: number;
}

export interface GetDayuDdosPoliciesListPortFilter {
    action: string;
    endPort: number;
    kind: number;
    protocol: string;
    startPort: number;
}

export interface GetDayuDdosPoliciesListWatermarkFilter {
    autoRemove: boolean;
    offset: number;
    openSwitch: boolean;
    tcpPortLists: string[];
    udpPortLists: string[];
}

export interface GetDayuDdosPoliciesListWatermarkKey {
    content: string;
    createTime: string;
    id: string;
    openSwitch: boolean;
}

export interface GetDayuDdosPolicyAttachmentsDayuDdosPolicyAttachmentList {
    policyId: string;
    resourceId: string;
    resourceType: string;
}

export interface GetDayuDdosPolicyCasesList {
    appProtocols: string[];
    appType: string;
    createTime: string;
    hasAbroad: string;
    hasInitiateTcp: string;
    hasInitiateUdp: string;
    hasVpn: string;
    maxTcpPackageLen: string;
    maxUdpPackageLen: string;
    minTcpPackageLen: string;
    minUdpPackageLen: string;
    name: string;
    peerTcpPort: string;
    peerUdpPort: string;
    platformTypes: string[];
    resourceType: string;
    sceneId: string;
    tcpEndPort: string;
    tcpFootprint: string;
    tcpStartPort: string;
    udpEndPort: string;
    udpFootprint: string;
    udpStartPort: string;
    webApiUrls: string[];
}

export interface GetDayuEipList {
    createdTime: string;
    eipAddressStatus: string;
    eipBoundRscEni: string;
    eipBoundRscIns: string;
    eipBoundRscVip: string;
    eipLists: string[];
    expiredTime: string;
    instanceId: string;
    modifyTime: string;
    protectionStatus: string;
    region: string;
}

export interface GetDayuL4RulesList {
    dPort: number;
    healthCheckHealthNum: number;
    healthCheckInterval: number;
    healthCheckSwitch: boolean;
    healthCheckTimeout: number;
    healthCheckUnhealthNum: number;
    lbType: number;
    name: string;
    protocol: string;
    ruleId: string;
    sPort: number;
    sessionSwitch: boolean;
    sessionTime: number;
    sourceLists: outputs.GetDayuL4RulesListSourceList[];
    sourceType: number;
}

export interface GetDayuL4RulesListSourceList {
    source: string;
    weight: number;
}

export interface GetDayuL4RulesV2List {
    id: string;
    ip: string;
    keepEnable: boolean;
    keeptime: number;
    lbType: number;
    modifyTime: string;
    protocol: string;
    region: number;
    removeSwitch: boolean;
    ruleId: string;
    ruleName: string;
    sourceLists: outputs.GetDayuL4RulesV2ListSourceList[];
    sourcePort: number;
    sourceType: number;
    virtualPort: number;
}

export interface GetDayuL4RulesV2ListSourceList {
    source: string;
    weight: number;
}

export interface GetDayuL7RulesList {
    domain: string;
    healthCheckCode: number;
    healthCheckHealthNum: number;
    healthCheckInterval: number;
    healthCheckMethod: string;
    healthCheckPath: string;
    healthCheckSwitch: boolean;
    healthCheckUnhealthNum: number;
    name: string;
    protocol: string;
    ruleId: string;
    sourceLists: string[];
    sourceType: number;
    sslId: string;
    status: number;
    switch: boolean;
    threshold: number;
}

export interface GetDayuL7RulesV2List {
    ccEnable: number;
    ccLevel: string;
    ccStatus: number;
    ccThreshold: number;
    certType: number;
    domain: string;
    httpsToHttpEnable: number;
    id: string;
    ip: string;
    keepEnable: number;
    keepTime: number;
    lbType: number;
    modifyTime: string;
    protocol: string;
    region: number;
    ruleName: string;
    sourceLists: outputs.GetDayuL7RulesV2ListSourceList[];
    sourceType: number;
    sslId: string;
    status: number;
    virtualPort: number;
}

export interface GetDayuL7RulesV2ListSourceList {
    source: string;
    weight: number;
}

export interface GetDbbrainDiagDbInstancesItem {
    auditPolicyStatus: string;
    auditRunningStatus: string;
    cpu: number;
    createTime: string;
    deadlineTime: string;
    deployMode: string;
    engineVersion: string;
    eventCount: number;
    groupId: string;
    groupName: string;
    healthScore: number;
    initFlag: number;
    instanceConfs: outputs.GetDbbrainDiagDbInstancesItemInstanceConf[];
    instanceId: string;
    instanceName: string;
    instanceType: number;
    internalVip: string;
    internalVport: number;
    isSupported: boolean;
    memory: number;
    product: string;
    region: string;
    secAuditStatus: string;
    source: string;
    status: number;
    taskStatus: number;
    uniqSubnetId: string;
    uniqVpcId: string;
    vip: string;
    volume: number;
    vport: number;
}

export interface GetDbbrainDiagDbInstancesItemInstanceConf {
    dailyInspection: string;
    keyDelimiters: string[];
    overviewDisplay: string;
}

export interface GetDbbrainDiagEventsList {
    diagItem: string;
    diagType: string;
    endTime: string;
    eventId: number;
    instanceId: string;
    metric: string;
    outline: string;
    region: string;
    severity: number;
    startTime: string;
}

export interface GetDbbrainDiagHistoryEvent {
    diagItem: string;
    diagType: string;
    endTime: string;
    eventId: number;
    instanceId: string;
    metric: string;
    outline: string;
    region: string;
    severity: number;
    startTime: string;
}

export interface GetDbbrainHealthScoresData {
    eventsTotalCount: number;
    healthLevel: string;
    healthScore: number;
    issueTypes: outputs.GetDbbrainHealthScoresDataIssueType[];
}

export interface GetDbbrainHealthScoresDataIssueType {
    events: outputs.GetDbbrainHealthScoresDataIssueTypeEvent[];
    issueType: string;
    totalCount: number;
}

export interface GetDbbrainHealthScoresDataIssueTypeEvent {
    count: number;
    diagType: string;
    endTime: string;
    eventId: number;
    metric: string;
    outline: string;
    scoreLost: number;
    severity: number;
    startTime: string;
}

export interface GetDbbrainMysqlProcessListProcessList {
    command: string;
    db: string;
    host: string;
    id: string;
    info: string;
    state: string;
    time: string;
    user: string;
}

export interface GetDbbrainNoPrimaryKeyTablesNoPrimaryKeyTable {
    engine: string;
    tableName: string;
    tableRows: number;
    tableSchema: string;
    totalLength: number;
}

export interface GetDbbrainRedisTopBigKeysTopKey {
    encoding: string;
    expireTime: number;
    itemCount: number;
    key: string;
    length: number;
    maxElementSize: number;
    type: string;
}

export interface GetDbbrainRedisTopKeyPrefixListItem {
    aveElementSize: number;
    count: number;
    itemCount: number;
    keyPreIndex: string;
    length: number;
    maxElementSize: number;
}

export interface GetDbbrainSecurityAuditLogExportTasksList {
    asyncRequestId: number;
    createTime: string;
    dangerLevels: number[];
    endTime: string;
    logEndTime: string;
    logStartTime: string;
    progress: number;
    startTime: string;
    status: string;
    totalSize: number;
}

export interface GetDbbrainSlowLogTimeSeriesStatsSeriesData {
    series: outputs.GetDbbrainSlowLogTimeSeriesStatsSeriesDataSeries[];
    timestamps: number[];
}

export interface GetDbbrainSlowLogTimeSeriesStatsSeriesDataSeries {
    metric: string;
    unit: string;
    values: number[];
}

export interface GetDbbrainSlowLogTimeSeriesStatsTimeSeries {
    count: number;
    timestamp: number;
}

export interface GetDbbrainSlowLogTopSqlsRow {
    execTimes: number;
    lockTime: number;
    lockTimeAvg: number;
    lockTimeMax: number;
    lockTimeMin: number;
    lockTimeRatio: number;
    md5: string;
    queryTime: number;
    queryTimeAvg: number;
    queryTimeMax: number;
    queryTimeMin: number;
    queryTimeRatio: number;
    rowsExamined: number;
    rowsExaminedAvg: number;
    rowsExaminedMax: number;
    rowsExaminedMin: number;
    rowsExaminedRatio: number;
    rowsSent: number;
    rowsSentAvg: number;
    rowsSentMax: number;
    rowsSentMin: number;
    rowsSentRatio: number;
    schema: string;
    sqlTemplate: string;
    sqlText: string;
}

export interface GetDbbrainSlowLogTopSqlsSchemaList {
    /**
     * DB name.
     */
    schema: string;
}

export interface GetDbbrainSlowLogUserHostStatsItem {
    count: number;
    ratio: number;
    userHost: string;
}

export interface GetDbbrainSlowLogsRow {
    database: string;
    lockTime: number;
    queryTime: number;
    rowsExamined: number;
    rowsSent: number;
    sqlText: string;
    timestamp: string;
    userHost: string;
    userName: string;
}

export interface GetDbbrainSqlFiltersList {
    createTime: string;
    currentConcurrency: number;
    currentTime: string;
    expireTime: string;
    id: number;
    maxConcurrency: number;
    originKeys: string;
    originRule: string;
    rejectedSqlCount: number;
    sqlType: string;
    status: string;
}

export interface GetDbbrainTopSpaceSchemaTimeSeriesTopSpaceSchemaTimeSeries {
    seriesDatas: outputs.GetDbbrainTopSpaceSchemaTimeSeriesTopSpaceSchemaTimeSeriesSeriesData[];
    tableSchema: string;
}

export interface GetDbbrainTopSpaceSchemaTimeSeriesTopSpaceSchemaTimeSeriesSeriesData {
    series: outputs.GetDbbrainTopSpaceSchemaTimeSeriesTopSpaceSchemaTimeSeriesSeriesDataSeries[];
    timestamps: number[];
}

export interface GetDbbrainTopSpaceSchemaTimeSeriesTopSpaceSchemaTimeSeriesSeriesDataSeries {
    metric: string;
    unit: string;
    values: number[];
}

export interface GetDbbrainTopSpaceSchemasTopSpaceSchema {
    dataFree: number;
    dataLength: number;
    fragRatio: number;
    indexLength: number;
    physicalFileSize: number;
    tableRows: number;
    tableSchema: string;
    totalLength: number;
}

export interface GetDbbrainTopSpaceTableTimeSeriesTopSpaceTableTimeSeries {
    engine: string;
    seriesDatas: outputs.GetDbbrainTopSpaceTableTimeSeriesTopSpaceTableTimeSeriesSeriesData[];
    tableName: string;
    tableSchema: string;
}

export interface GetDbbrainTopSpaceTableTimeSeriesTopSpaceTableTimeSeriesSeriesData {
    series: outputs.GetDbbrainTopSpaceTableTimeSeriesTopSpaceTableTimeSeriesSeriesDataSeries[];
    timestamps: number[];
}

export interface GetDbbrainTopSpaceTableTimeSeriesTopSpaceTableTimeSeriesSeriesDataSeries {
    metric: string;
    unit: string;
    values: number[];
}

export interface GetDbbrainTopSpaceTablesTopSpaceTable {
    dataFree: number;
    dataLength: number;
    engine: string;
    fragRatio: number;
    indexLength: number;
    physicalFileSize: number;
    tableName: string;
    tableRows: number;
    tableSchema: string;
    totalLength: number;
}

export interface GetDcAccessPointsAccessPointSet {
    accessPointId: string;
    accessPointName: string;
    accessPointType: string;
    area: string;
    availablePortTypes: string[];
    city: string;
    coordinates: outputs.GetDcAccessPointsAccessPointSetCoordinate[];
    lineOperators: string[];
    location: string;
    regionId: string;
    state: string;
}

export interface GetDcAccessPointsAccessPointSetCoordinate {
    lat: number;
    lng: number;
}

export interface GetDcGatewayCcnRoutesInstanceList {
    asPaths: string[];
    cidrBlock: string;
    dcgId: string;
    routeId: string;
}

export interface GetDcGatewayInstancesInstanceList {
    cnnRouteType: string;
    createTime: string;
    dcgId: string;
    dcgIp: string;
    enableBgp: boolean;
    gatewayType: string;
    name: string;
    networkInstanceId: string;
    networkType: string;
}

export interface GetDcInstancesInstanceList {
    accessPointId: string;
    bandwidth: number;
    circuitCode: string;
    createTime: string;
    customerAddress: string;
    customerEmail: string;
    customerName: string;
    customerPhone: string;
    dcId: string;
    enabledTime: string;
    expiredTime: string;
    faultReportContactPerson: string;
    faultReportContactPhone: string;
    lineOperator: string;
    location: string;
    name: string;
    portType: string;
    redundantDcId: string;
    state: string;
    tencentAddress: string;
}

export interface GetDcInternetAddressStatisticsInternetAddressStatistic {
    region: string;
    subnetNum: number;
}

export interface GetDcPublicDirectConnectTunnelRoutesFilter {
    /**
     * Fields to be filtered.
     */
    name: string;
    /**
     * filter value of the field.
     */
    values: string[];
}

export interface GetDcPublicDirectConnectTunnelRoutesRoute {
    asPaths: string[];
    destinationCidrBlock: string;
    nextHop: string;
    routeId: string;
    routeType: string;
    status: string;
}

export interface GetDcdbAccountsList {
    createTime: string;
    delayThresh: number;
    description: string;
    host: string;
    readOnly: number;
    slaveConst: number;
    updateTime: string;
    userName: string;
}

export interface GetDcdbDatabaseObjectsFunc {
    func: string;
}

export interface GetDcdbDatabaseObjectsProc {
    proc: string;
}

export interface GetDcdbDatabaseObjectsTable {
    table: string;
}

export interface GetDcdbDatabaseObjectsView {
    view: string;
}

export interface GetDcdbDatabaseTablesCol {
    col: string;
    type: string;
}

export interface GetDcdbDatabasesList {
    dbName: string;
}

export interface GetDcdbInstanceNodeInfoNodesInfo {
    nodeId: string;
    role: string;
    shardId: string;
}

export interface GetDcdbInstancesList {
    appId: number;
    autoRenewFlag: number;
    createTime: string;
    dbEngine: string;
    dbVersion: string;
    instanceId: string;
    instanceName: string;
    instanceType: number;
    isAuditSupported: number;
    isTmp: number;
    isolatedTimestamp: string;
    memory: number;
    nodeCount: number;
    paymode: string;
    periodEndTime: string;
    projectId: number;
    region: string;
    resourceTags: outputs.GetDcdbInstancesListResourceTag[];
    shardCount: number;
    shardDetails: outputs.GetDcdbInstancesListShardDetail[];
    status: number;
    statusDesc: string;
    storage: number;
    subnetId: number;
    uin: string;
    updateTime: string;
    vip: string;
    vpcId: number;
    vport: number;
    wanDomain: string;
    wanPort: number;
    wanStatus: number;
    wanVip: string;
}

export interface GetDcdbInstancesListResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetDcdbInstancesListShardDetail {
    cpu: number;
    createtime: string;
    memory: number;
    nodeCount: number;
    shardId: number;
    shardInstanceId: string;
    shardSerialId: string;
    status: number;
    storage: number;
}

export interface GetDcdbLogFilesFile {
    fileName: string;
    length: number;
    mtime: number;
    uri: string;
}

export interface GetDcdbOrdersDeal {
    count: number;
    dealName: string;
    flowId: number;
    instanceIds: string[];
    ownerUin: string;
    payMode: number;
}

export interface GetDcdbParametersList {
    constraints: outputs.GetDcdbParametersListConstraint[];
    default: string;
    haveSetValue: boolean;
    needRestart: boolean;
    param: string;
    value: string;
}

export interface GetDcdbParametersListConstraint {
    enum: string;
    ranges: outputs.GetDcdbParametersListConstraintRange[];
    string: string;
    type: string;
}

export interface GetDcdbParametersListConstraintRange {
    max: string;
    min: string;
}

export interface GetDcdbProjectSecurityGroupsGroup {
    createTime: string;
    inbounds: outputs.GetDcdbProjectSecurityGroupsGroupInbound[];
    outbounds: outputs.GetDcdbProjectSecurityGroupsGroupOutbound[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
    securityGroupRemark: string;
}

export interface GetDcdbProjectSecurityGroupsGroupInbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetDcdbProjectSecurityGroupsGroupOutbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetDcdbProjectsProject {
    appId: number;
    createTime: string;
    creatorUin: number;
    info: string;
    isDefault: number;
    name: string;
    ownerUin: number;
    projectId: number;
    srcAppId: number;
    srcPlat: string;
    status: number;
}

export interface GetDcdbSaleInfoRegionList {
    availableChoices: outputs.GetDcdbSaleInfoRegionListAvailableChoice[];
    region: string;
    regionId: number;
    regionName: string;
    zoneLists: outputs.GetDcdbSaleInfoRegionListZoneList[];
}

export interface GetDcdbSaleInfoRegionListAvailableChoice {
    masterZones: outputs.GetDcdbSaleInfoRegionListAvailableChoiceMasterZone[];
    slaveZones: outputs.GetDcdbSaleInfoRegionListAvailableChoiceSlaveZone[];
}

export interface GetDcdbSaleInfoRegionListAvailableChoiceMasterZone {
    onSale: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
}

export interface GetDcdbSaleInfoRegionListAvailableChoiceSlaveZone {
    onSale: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
}

export interface GetDcdbSaleInfoRegionListZoneList {
    onSale: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
}

export interface GetDcdbSecurityGroupsList {
    createTime: string;
    inbounds: outputs.GetDcdbSecurityGroupsListInbound[];
    outbounds: outputs.GetDcdbSecurityGroupsListOutbound[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetDcdbSecurityGroupsListInbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetDcdbSecurityGroupsListOutbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetDcdbShardSpecSpecConfig {
    machine: string;
    specConfigInfos: outputs.GetDcdbShardSpecSpecConfigSpecConfigInfo[];
}

export interface GetDcdbShardSpecSpecConfigSpecConfigInfo {
    cpu: number;
    maxStorage: number;
    memory: number;
    minStorage: number;
    nodeCount: number;
    pid: number;
    qps: number;
    suitInfo: string;
}

export interface GetDcdbShardsList {
    cpu: number;
    createTime: string;
    instanceId: string;
    memory: number;
    memoryUsage: number;
    nodeCount: number;
    paymode: string;
    periodEndTime: string;
    projectId: number;
    proxyVersion: string;
    range: string;
    region: string;
    shardInstanceId: string;
    shardMasterZone: string;
    shardSerialId: string;
    shardSlaveZones: string[];
    status: number;
    statusDesc: string;
    storage: number;
    storageUsage: number;
    subnetId: string;
    vpcId: string;
    zone: string;
}

export interface GetDcdbSlowLogsData {
    checkSum: string;
    db: string;
    exampleSql: string;
    fingerPrint: string;
    host: string;
    lockTimeAvg: string;
    lockTimeMax: string;
    lockTimeMin: string;
    lockTimeSum: string;
    queryCount: string;
    queryTimeAvg: string;
    queryTimeMax: string;
    queryTimeMin: string;
    queryTimeSum: string;
    rowsExaminedSum: string;
    rowsSentSum: string;
    tsMax: string;
    tsMin: string;
    user: string;
}

export interface GetDcdbUpgradePriceAddShardConfig {
    /**
     * The number of new shards.
     */
    shardCount: number;
    /**
     * Shard memory size in GB.
     */
    shardMemory: number;
    /**
     * Shard storage capacity in GB.
     */
    shardStorage: number;
}

export interface GetDcdbUpgradePriceExpandShardConfig {
    /**
     * List of shard ID.
     */
    shardInstanceIds: string[];
    /**
     * Shard memory size in GB.
     */
    shardMemory: number;
    /**
     * Shard node count.
     */
    shardNodeCount?: number;
    /**
     * Shard storage capacity in GB.
     */
    shardStorage: number;
}

export interface GetDcdbUpgradePriceSplitShardConfig {
    /**
     * List of shard ID.
     */
    shardInstanceIds: string[];
    /**
     * Shard memory size in GB.
     */
    shardMemory: number;
    /**
     * Shard storage capacity in GB.
     */
    shardStorage: number;
    /**
     * Data split ratio, fixed at 50%.
     */
    splitRate: number;
}

export interface GetDcxInstancesInstanceList {
    bandwidth: number;
    bgpAsn: number;
    bgpAuthKey: string;
    createTime: string;
    customerAddress: string;
    dcId: string;
    dcgId: string;
    dcxId: string;
    name: string;
    networkRegion: string;
    networkType: string;
    routeFilterPrefixes: string[];
    routeType: string;
    state: string;
    tencentAddress: string;
    vlan: number;
    vpcId: string;
}

export interface GetDlcCheckDataEngineConfigPairsValidityDataEngineConfigPair {
    /**
     * Configuration item.
     */
    configItem: string;
    /**
     * Configuration value.
     */
    configValue: string;
}

export interface GetDlcDescribeDataEngineDataEngine {
    autoResume: boolean;
    autoSuspend: boolean;
    autoSuspendTime: number;
    childImageVersionId: string;
    cidrBlock: string;
    clusterType: string;
    createTime: number;
    crontabResumeSuspend: number;
    crontabResumeSuspendStrategies: outputs.GetDlcDescribeDataEngineDataEngineCrontabResumeSuspendStrategy[];
    dataEngineId: string;
    dataEngineName: string;
    defaultDataEngine: boolean;
    defaultHouse: boolean;
    elasticLimit: number;
    elasticSwitch: boolean;
    engineExecType: string;
    engineType: string;
    expireTime: string;
    imageVersionId: string;
    imageVersionName: string;
    isolatedTime: string;
    maxClusters: number;
    maxConcurrency: number;
    message: string;
    minClusters: number;
    mode: number;
    networkConnectionSets: outputs.GetDlcDescribeDataEngineDataEngineNetworkConnectionSet[];
    permissions: string[];
    quotaId: string;
    renewFlag: number;
    resourceType: string;
    reversalTime: string;
    sessionResourceTemplates: outputs.GetDlcDescribeDataEngineDataEngineSessionResourceTemplate[];
    size: number;
    spendAfter: number;
    startStandbyCluster: boolean;
    state: number;
    subAccountUin: string;
    tagLists: outputs.GetDlcDescribeDataEngineDataEngineTagList[];
    tolerableQueueTime: number;
    uiURL: string;
    updateTime: number;
    userAlias: string;
    userAppId: number;
    userUin: string;
}

export interface GetDlcDescribeDataEngineDataEngineCrontabResumeSuspendStrategy {
    resumeTime: string;
    suspendStrategy: number;
    suspendTime: string;
}

export interface GetDlcDescribeDataEngineDataEngineNetworkConnectionSet {
    appid: number;
    associateId: string;
    createTime: number;
    datasourceConnectionCidrBlock: string;
    datasourceConnectionId: string;
    datasourceConnectionName: string;
    datasourceConnectionSubnetCidrBlock: string;
    datasourceConnectionSubnetId: string;
    datasourceConnectionVpcId: string;
    houseId: string;
    houseName: string;
    id: number;
    networkConnectionDesc: string;
    networkConnectionType: number;
    state: number;
    subAccountUin: string;
    uin: string;
    updateTime: number;
}

export interface GetDlcDescribeDataEngineDataEngineSessionResourceTemplate {
    driverSize: string;
    executorMaxNumbers: number;
    executorNums: number;
    executorSize: string;
}

export interface GetDlcDescribeDataEngineDataEngineTagList {
    tagKey: string;
    tagValue: string;
}

export interface GetDlcDescribeDataEngineEventsEvent {
    clusterInfos: string[];
    eventsActions: string[];
    times: string[];
}

export interface GetDlcDescribeDataEngineImageVersionsImageParentVersion {
    description: string;
    engineType: string;
    imageVersion: string;
    imageVersionId: string;
    insertTime: string;
    isPublic: number;
    isSharedEngine: number;
    state: number;
    updateTime: string;
}

export interface GetDlcDescribeDataEnginePythonSparkImagesPythonSparkImage {
    childImageVersionId: string;
    createTime: string;
    description: string;
    sparkImageId: string;
    sparkImageVersion: string;
    updateTime: string;
}

export interface GetDlcDescribeUpdatableDataEnginesDataEngineBasicInfo {
    appId: number;
    createTime: number;
    dataEngineId: string;
    dataEngineName: string;
    dataEngineType: string;
    message: string;
    state: number;
    updateTime: number;
    userUin: string;
}

export interface GetDlcDescribeUserInfoFilter {
    /**
     * Attribute name. If there are multiple Filters, the relationship between Filters is a logical OR (OR) relationship.
     */
    name: string;
    /**
     * Attribute value, if there are multiple Values in the same filter, the relationship between values under the same filter is a logical OR relationship.
     */
    values: string[];
}

export interface GetDlcDescribeUserInfoUserInfo {
    dataPolicyInfos: outputs.GetDlcDescribeUserInfoUserInfoDataPolicyInfo[];
    enginePolicyInfos: outputs.GetDlcDescribeUserInfoUserInfoEnginePolicyInfo[];
    rowFilterInfos: outputs.GetDlcDescribeUserInfoUserInfoRowFilterInfo[];
    type: string;
    userAlias: string;
    userDescription: string;
    userId: string;
    userType: string;
    workGroupInfos: outputs.GetDlcDescribeUserInfoUserInfoWorkGroupInfo[];
}

export interface GetDlcDescribeUserInfoUserInfoDataPolicyInfo {
    policySets: outputs.GetDlcDescribeUserInfoUserInfoDataPolicyInfoPolicySet[];
    totalCount: number;
}

export interface GetDlcDescribeUserInfoUserInfoDataPolicyInfoPolicySet {
    catalog: string;
    column: string;
    createTime: string;
    dataEngine: string;
    database: string;
    function: string;
    id: number;
    mode: string;
    operation: string;
    operator: string;
    policyType: string;
    reAuth: boolean;
    source: string;
    sourceId: number;
    sourceName: string;
    table: string;
    view: string;
}

export interface GetDlcDescribeUserInfoUserInfoEnginePolicyInfo {
    policySets: outputs.GetDlcDescribeUserInfoUserInfoEnginePolicyInfoPolicySet[];
    totalCount: number;
}

export interface GetDlcDescribeUserInfoUserInfoEnginePolicyInfoPolicySet {
    catalog: string;
    column: string;
    createTime: string;
    dataEngine: string;
    database: string;
    function: string;
    id: number;
    mode: string;
    operation: string;
    operator: string;
    policyType: string;
    reAuth: boolean;
    source: string;
    sourceId: number;
    sourceName: string;
    table: string;
    view: string;
}

export interface GetDlcDescribeUserInfoUserInfoRowFilterInfo {
    policySets: outputs.GetDlcDescribeUserInfoUserInfoRowFilterInfoPolicySet[];
    totalCount: number;
}

export interface GetDlcDescribeUserInfoUserInfoRowFilterInfoPolicySet {
    catalog: string;
    column: string;
    createTime: string;
    dataEngine: string;
    database: string;
    function: string;
    id: number;
    mode: string;
    operation: string;
    operator: string;
    policyType: string;
    reAuth: boolean;
    source: string;
    sourceId: number;
    sourceName: string;
    table: string;
    view: string;
}

export interface GetDlcDescribeUserInfoUserInfoWorkGroupInfo {
    totalCount: number;
    workGroupSets: outputs.GetDlcDescribeUserInfoUserInfoWorkGroupInfoWorkGroupSet[];
}

export interface GetDlcDescribeUserInfoUserInfoWorkGroupInfoWorkGroupSet {
    createTime: string;
    creator: string;
    workGroupDescription: string;
    workGroupId: number;
    workGroupName: string;
}

export interface GetDlcDescribeUserRolesUserRole {
    appId: string;
    arn: string;
    cosPermissionLists: outputs.GetDlcDescribeUserRolesUserRoleCosPermissionList[];
    creator: string;
    desc: string;
    modifyTime: number;
    permissionJson: string;
    roleId: number;
    roleName: string;
    uin: string;
}

export interface GetDlcDescribeUserRolesUserRoleCosPermissionList {
    cosPath: string;
    permissions: string[];
}

export interface GetDlcDescribeWorkGroupInfoFilter {
    /**
     * Attribute name. If there are multiple Filters, the relationship between filters is a logical or (OR) relationship.
     */
    name: string;
    /**
     * Attribute value, if there are multiple values in the same filter, the relationship between values under the same filter is a logical or relationship.
     */
    values: string[];
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfo {
    dataPolicyInfos: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfo[];
    enginePolicyInfos: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfo[];
    rowFilterInfos: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoRowFilterInfo[];
    type: string;
    userInfos: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoUserInfo[];
    workGroupDescription: string;
    workGroupId: number;
    workGroupName: string;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfo {
    policySets: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoPolicySet[];
    totalCount: number;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoDataPolicyInfoPolicySet {
    catalog: string;
    column: string;
    createTime: string;
    dataEngine: string;
    database: string;
    function: string;
    id: number;
    mode: string;
    operation: string;
    operator: string;
    policyType: string;
    reAuth: boolean;
    source: string;
    sourceId: number;
    sourceName: string;
    table: string;
    view: string;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfo {
    policySets: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoPolicySet[];
    totalCount: number;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoEnginePolicyInfoPolicySet {
    catalog: string;
    column: string;
    createTime: string;
    dataEngine: string;
    database: string;
    function: string;
    id: number;
    mode: string;
    operation: string;
    operator: string;
    policyType: string;
    reAuth: boolean;
    source: string;
    sourceId: number;
    sourceName: string;
    table: string;
    view: string;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoRowFilterInfo {
    policySets: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoPolicySet[];
    totalCount: number;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoRowFilterInfoPolicySet {
    catalog: string;
    column: string;
    createTime: string;
    dataEngine: string;
    database: string;
    function: string;
    id: number;
    mode: string;
    operation: string;
    operator: string;
    policyType: string;
    reAuth: boolean;
    source: string;
    sourceId: number;
    sourceName: string;
    table: string;
    view: string;
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoUserInfo {
    totalCount: number;
    userSets: outputs.GetDlcDescribeWorkGroupInfoWorkGroupInfoUserInfoUserSet[];
}

export interface GetDlcDescribeWorkGroupInfoWorkGroupInfoUserInfoUserSet {
    createTime: string;
    creator: string;
    userAlias: string;
    userDescription: string;
    userId: string;
}

export interface GetDnatsDnatList {
    description: string;
    elasticIp: string;
    elasticPort: string;
    natId: string;
    privateIp: string;
    privatePort: string;
    protocol: string;
    vpcId: string;
}

export interface GetDnspodDomainAnalyticsAliasData {
    datas: outputs.GetDnspodDomainAnalyticsAliasDataData[];
    infos: outputs.GetDnspodDomainAnalyticsAliasDataInfo[];
}

export interface GetDnspodDomainAnalyticsAliasDataData {
    dateKey: string;
    hourKey: number;
    num: number;
}

export interface GetDnspodDomainAnalyticsAliasDataInfo {
    dnsFormat: string;
    dnsTotal: number;
    domain: string;
    endDate: string;
    startDate: string;
}

export interface GetDnspodDomainAnalyticsData {
    dateKey: string;
    hourKey: number;
    num: number;
}

export interface GetDnspodDomainAnalyticsInfo {
    dnsFormat: string;
    dnsTotal: number;
    domain: string;
    endDate: string;
    startDate: string;
}

export interface GetDnspodDomainListDomainList {
    cnameSpeedup: string;
    createdOn: string;
    dnsStatus: string;
    domainId: number;
    effectiveDns: string[];
    grade: string;
    gradeLevel: number;
    gradeTitle: string;
    groupId: number;
    isVip: string;
    name: string;
    owner: string;
    punycode: string;
    recordCount: number;
    remark: string;
    searchEnginePush: string;
    status: string;
    tagLists: outputs.GetDnspodDomainListDomainListTagList[];
    ttl: number;
    updatedOn: string;
    vipAutoRenew: string;
    vipEndAt: string;
    vipStartAt: string;
}

export interface GetDnspodDomainListDomainListTagList {
    tagKey: string;
    tagValue: string;
}

export interface GetDnspodDomainListTag {
    /**
     * Field to be filtered.
     */
    tagKey: string;
    /**
     * Filter value of the field.
     */
    tagValues: string[];
}

export interface GetDnspodRecordAnalyticsAliasData {
    datas: outputs.GetDnspodRecordAnalyticsAliasDataData[];
    infos: outputs.GetDnspodRecordAnalyticsAliasDataInfo[];
}

export interface GetDnspodRecordAnalyticsAliasDataData {
    dateKey: string;
    hourKey: number;
    num: number;
}

export interface GetDnspodRecordAnalyticsAliasDataInfo {
    dnsFormat: string;
    dnsTotal: number;
    domain: string;
    endDate: string;
    startDate: string;
    subdomain: string;
}

export interface GetDnspodRecordAnalyticsData {
    dateKey: string;
    hourKey: number;
    num: number;
}

export interface GetDnspodRecordAnalyticsInfo {
    dnsFormat: string;
    dnsTotal: number;
    domain: string;
    endDate: string;
    startDate: string;
    subdomain: string;
}

export interface GetDnspodRecordLineListLineGroupList {
    lineId: string;
    lineLists: string[];
    name: string;
    type: string;
}

export interface GetDnspodRecordLineListLineList {
    lineId: string;
    name: string;
}

export interface GetDnspodRecordListRecordCountInfo {
    listCount: number;
    subdomainCount: number;
    totalCount: number;
}

export interface GetDnspodRecordListRecordList {
    defaultNs: boolean;
    line: string;
    lineId: string;
    monitorStatus: string;
    mx: number;
    name: string;
    recordId: number;
    remark: string;
    status: string;
    ttl: number;
    type: string;
    updatedOn: string;
    value: string;
    weight: number;
}

export interface GetDnspodRecordsRecordCountInfo {
    listCount: number;
    subdomainCount: number;
    totalCount: number;
}

export interface GetDnspodRecordsResult {
    line: string;
    lineId: string;
    monitorStatus: string;
    mx: number;
    name: string;
    recordId: number;
    remark: string;
    status: string;
    ttl: number;
    type: string;
    updatedOn: string;
    value: string;
    weight: number;
}

export interface GetDomainsList {
    autoRenew: number;
    buyStatus: string;
    codeTld: string;
    creationDate: string;
    domainId: string;
    domainName: string;
    expirationDate: string;
    isPremium: boolean;
    tld: string;
}

export interface GetDtsCompareTasksList {
    checkProcesses: outputs.GetDtsCompareTasksListCheckProcess[];
    compareProcesses: outputs.GetDtsCompareTasksListCompareProcess[];
    compareTaskId: string;
    conclusion: string;
    configs: outputs.GetDtsCompareTasksListConfig[];
    createdAt: string;
    finishedAt: string;
    jobId: string;
    startedAt: string;
    status: string;
    taskName: string;
}

export interface GetDtsCompareTasksListCheckProcess {
    message: string;
    percent: number;
    status: string;
    stepAll: number;
    stepNow: number;
    steps: outputs.GetDtsCompareTasksListCheckProcessStep[];
}

export interface GetDtsCompareTasksListCheckProcessStep {
    errors: outputs.GetDtsCompareTasksListCheckProcessStepError[];
    percent: number;
    startTime: string;
    status: string;
    stepId: string;
    stepMessage: string;
    stepName: string;
    stepNo: number;
    warnings: outputs.GetDtsCompareTasksListCheckProcessStepWarning[];
}

export interface GetDtsCompareTasksListCheckProcessStepError {
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsCompareTasksListCheckProcessStepWarning {
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsCompareTasksListCompareProcess {
    message: string;
    percent: number;
    status: string;
    stepAll: number;
    stepNow: number;
    steps: outputs.GetDtsCompareTasksListCompareProcessStep[];
}

export interface GetDtsCompareTasksListCompareProcessStep {
    errors: outputs.GetDtsCompareTasksListCompareProcessStepError[];
    percent: number;
    startTime: string;
    status: string;
    stepId: string;
    stepMessage: string;
    stepName: string;
    stepNo: number;
    warnings: outputs.GetDtsCompareTasksListCompareProcessStepWarning[];
}

export interface GetDtsCompareTasksListCompareProcessStepError {
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsCompareTasksListCompareProcessStepWarning {
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsCompareTasksListConfig {
    objectItems: outputs.GetDtsCompareTasksListConfigObjectItem[];
    objectMode: string;
}

export interface GetDtsCompareTasksListConfigObjectItem {
    dbMode: string;
    dbName: string;
    schemaName: string;
    tableMode: string;
    tables: outputs.GetDtsCompareTasksListConfigObjectItemTable[];
    viewMode: string;
    views: outputs.GetDtsCompareTasksListConfigObjectItemView[];
}

export interface GetDtsCompareTasksListConfigObjectItemTable {
    tableName: string;
}

export interface GetDtsCompareTasksListConfigObjectItemView {
    viewName: string;
}

export interface GetDtsMigrateDbInstancesInstance {
    hint: string;
    instanceId: string;
    instanceName: string;
    usable: number;
    vip: string;
    vport: number;
}

export interface GetDtsMigrateJobsList {
    actions: outputs.GetDtsMigrateJobsListAction[];
    briefMsg: string;
    compareTasks: outputs.GetDtsMigrateJobsListCompareTask[];
    createTime: string;
    dstInfos: outputs.GetDtsMigrateJobsListDstInfo[];
    endTime: string;
    expectRunTime: string;
    jobId: string;
    jobName: string;
    runMode: string;
    srcInfos: outputs.GetDtsMigrateJobsListSrcInfo[];
    startTime: string;
    status: string;
    stepInfos: outputs.GetDtsMigrateJobsListStepInfo[];
    tags: outputs.GetDtsMigrateJobsListTag[];
    tradeInfos: outputs.GetDtsMigrateJobsListTradeInfo[];
    updateTime: string;
}

export interface GetDtsMigrateJobsListAction {
    allActions: string[];
    allowedActions: string[];
}

export interface GetDtsMigrateJobsListCompareTask {
    compareTaskId: string;
    status: string;
}

export interface GetDtsMigrateJobsListDstInfo {
    accessType: string;
    databaseType: string;
    infos: outputs.GetDtsMigrateJobsListDstInfoInfo[];
    nodeType: string;
    region: string;
}

export interface GetDtsMigrateJobsListDstInfoInfo {
    account: string;
    accountMode: string;
    accountRole: string;
    ccnGwId: string;
    cvmInstanceId: string;
    dbKernel: string;
    engineVersion: string;
    host: string;
    instanceId: string;
    password: string;
    port: number;
    role: string;
    subnetId: string;
    tmpSecretId: string;
    tmpSecretKey: string;
    tmpToken: string;
    uniqVpnGwId: string;
    user: string;
    vpcId: string;
}

export interface GetDtsMigrateJobsListSrcInfo {
    accessType: string;
    databaseType: string;
    extraAttrs: outputs.GetDtsMigrateJobsListSrcInfoExtraAttr[];
    infos: outputs.GetDtsMigrateJobsListSrcInfoInfo[];
    nodeType: string;
    region: string;
    supplier: string;
}

export interface GetDtsMigrateJobsListSrcInfoExtraAttr {
    key: string;
    value: string;
}

export interface GetDtsMigrateJobsListSrcInfoInfo {
    account: string;
    accountMode: string;
    accountRole: string;
    ccnGwId: string;
    cvmInstanceId: string;
    dbKernel: string;
    engineVersion: string;
    host: string;
    instanceId: string;
    password: string;
    port: number;
    role: string;
    subnetId: string;
    tmpSecretId: string;
    tmpSecretKey: string;
    tmpToken: string;
    uniqVpnGwId: string;
    user: string;
    vpcId: string;
}

export interface GetDtsMigrateJobsListStepInfo {
    masterSlaveDistance: number;
    secondsBehindMaster: number;
    stepAll: number;
    stepInfos: outputs.GetDtsMigrateJobsListStepInfoStepInfo[];
    stepNow: number;
}

export interface GetDtsMigrateJobsListStepInfoStepInfo {
    errors: outputs.GetDtsMigrateJobsListStepInfoStepInfoError[];
    percent: number;
    startTime: string;
    status: string;
    stepId: string;
    stepMessage: string;
    stepName: string;
    stepNo: number;
    warnings: outputs.GetDtsMigrateJobsListStepInfoStepInfoWarning[];
}

export interface GetDtsMigrateJobsListStepInfoStepInfoError {
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsMigrateJobsListStepInfoStepInfoWarning {
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsMigrateJobsListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetDtsMigrateJobsListTradeInfo {
    billingType: string;
    dealName: string;
    expireTime: string;
    instanceClass: string;
    isolateReason: string;
    isolateTime: string;
    lastDealName: string;
    offlineReason: string;
    offlineTime: string;
    payType: string;
    tradeStatus: string;
}

export interface GetDtsMigrateJobsTagFilter {
    /**
     * tag key.
     */
    tagKey?: string;
    /**
     * tag value.
     */
    tagValue?: string;
}

export interface GetDtsSyncJobsList {
    actions: string[];
    allActions: string[];
    createTime: string;
    details: outputs.GetDtsSyncJobsListDetail[];
    dstAccessType: string;
    dstDatabaseType: string;
    dstInfos: outputs.GetDtsSyncJobsListDstInfo[];
    dstRegion: string;
    endTime: string;
    expectRunTime: string;
    expireTime: string;
    jobId: string;
    jobName: string;
    objects: outputs.GetDtsSyncJobsListObject[];
    options: outputs.GetDtsSyncJobsListOption[];
    payMode: string;
    runMode: string;
    specification: string;
    srcAccessType: string;
    srcDatabaseType: string;
    srcInfos: outputs.GetDtsSyncJobsListSrcInfo[];
    srcRegion: string;
    startTime: string;
    status: string;
    tags: outputs.GetDtsSyncJobsListTag[];
}

export interface GetDtsSyncJobsListDetail {
    currentStepProgress: number;
    masterSlaveDistance: number;
    message: string;
    progress: number;
    secondsBehindMaster: number;
    stepAll: number;
    stepInfos: outputs.GetDtsSyncJobsListDetailStepInfo[];
    stepNow: number;
}

export interface GetDtsSyncJobsListDetailStepInfo {
    errors: outputs.GetDtsSyncJobsListDetailStepInfoError[];
    progress: number;
    startTime: string;
    status: string;
    stepId: string;
    stepName: string;
    stepNo: number;
    warnings: outputs.GetDtsSyncJobsListDetailStepInfoWarning[];
}

export interface GetDtsSyncJobsListDetailStepInfoError {
    code: string;
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsSyncJobsListDetailStepInfoWarning {
    code: string;
    helpDoc: string;
    message: string;
    solution: string;
}

export interface GetDtsSyncJobsListDstInfo {
    account: string;
    accountMode: string;
    accountRole: string;
    ccnId: string;
    cvmInstanceId: string;
    dbKernel: string;
    dbName: string;
    engineVersion: string;
    instanceId: string;
    ip: string;
    password: string;
    port: number;
    region: string;
    subnetId: string;
    supplier: string;
    tmpSecretId: string;
    tmpSecretKey: string;
    tmpToken: string;
    uniqDcgId: string;
    uniqVpnGwId: string;
    user: string;
    vpcId: string;
}

export interface GetDtsSyncJobsListObject {
    advancedObjects: string[];
    databases: outputs.GetDtsSyncJobsListObjectDatabase[];
    mode: string;
}

export interface GetDtsSyncJobsListObjectDatabase {
    dbMode: string;
    dbName: string;
    functionMode: string;
    functions: string[];
    newDbName: string;
    newSchemaName: string;
    procedureMode: string;
    procedures: string[];
    schemaName: string;
    tableMode: string;
    tables: outputs.GetDtsSyncJobsListObjectDatabaseTable[];
    viewMode: string;
    views: outputs.GetDtsSyncJobsListObjectDatabaseView[];
}

export interface GetDtsSyncJobsListObjectDatabaseTable {
    filterCondition: string;
    newTableName: string;
    tableName: string;
}

export interface GetDtsSyncJobsListObjectDatabaseView {
    newViewName: string;
    viewName: string;
}

export interface GetDtsSyncJobsListOption {
    addAdditionalColumn: boolean;
    conflictHandleOptions: outputs.GetDtsSyncJobsListOptionConflictHandleOption[];
    conflictHandleType: string;
    ddlOptions: outputs.GetDtsSyncJobsListOptionDdlOption[];
    dealOfExistSameTable: string;
    initType: string;
    opTypes: string[];
}

export interface GetDtsSyncJobsListOptionConflictHandleOption {
    conditionColumn: string;
    conditionOperator: string;
    conditionOrderInSrcAndDst: string;
}

export interface GetDtsSyncJobsListOptionDdlOption {
    ddlObject: string;
    ddlValues: string[];
}

export interface GetDtsSyncJobsListSrcInfo {
    account: string;
    accountMode: string;
    accountRole: string;
    ccnId: string;
    cvmInstanceId: string;
    dbKernel: string;
    dbName: string;
    engineVersion: string;
    instanceId: string;
    ip: string;
    password: string;
    port: number;
    region: string;
    subnetId: string;
    supplier: string;
    tmpSecretId: string;
    tmpSecretKey: string;
    tmpToken: string;
    uniqDcgId: string;
    uniqVpnGwId: string;
    user: string;
    vpcId: string;
}

export interface GetDtsSyncJobsListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetDtsSyncJobsTagFilter {
    /**
     * tag key.
     */
    tagKey?: string;
    /**
     * tag value.
     */
    tagValue?: string;
}

export interface GetEbBusEventBus {
    addTime: string;
    connectionBriefs: outputs.GetEbBusEventBusConnectionBrief[];
    description: string;
    eventBusId: string;
    eventBusName: string;
    modTime: string;
    payMode: string;
    targetBriefs: outputs.GetEbBusEventBusTargetBrief[];
    type: string;
}

export interface GetEbBusEventBusConnectionBrief {
    status: string;
    type: string;
}

export interface GetEbBusEventBusTargetBrief {
    targetId: string;
    type: string;
}

export interface GetEbBusFilter {
    /**
     * The name of the filter key.
     */
    name: string;
    /**
     * One or more filter values.
     */
    values: string[];
}

export interface GetEbEventRulesRule {
    addTime: string;
    deadLetterConfigs: outputs.GetEbEventRulesRuleDeadLetterConfig[];
    description: string;
    enable: boolean;
    eventBusId: string;
    modTime: string;
    ruleId: string;
    ruleName: string;
    status: string;
    targets: outputs.GetEbEventRulesRuleTarget[];
}

export interface GetEbEventRulesRuleDeadLetterConfig {
    ckafkaDeliveryParams: outputs.GetEbEventRulesRuleDeadLetterConfigCkafkaDeliveryParam[];
    disposeMethod: string;
}

export interface GetEbEventRulesRuleDeadLetterConfigCkafkaDeliveryParam {
    resourceDescription: string;
    topicName: string;
}

export interface GetEbEventRulesRuleTarget {
    targetId: string;
    type: string;
}

export interface GetEbPlatformEventNamesEventName {
    eventName: string;
    eventType: string;
}

export interface GetEbPlatformEventPatternsEventPattern {
    eventName: string;
    eventPattern: string;
}

export interface GetEbPlatformProductsPlatformProduct {
    productName: string;
    productType: string;
}

export interface GetEbSearchFilter {
    /**
     * LogFilters array.
     */
    filters?: outputs.GetEbSearchFilterFilter[];
    /**
     * filter field name.
     */
    key?: string;
    /**
     * operator, congruent eq, not equal neq, similar like, exclude similar not like, less than lt, less than and equal to lte, greater than gt, greater than and equal to gte, in range range, not in range norange.
     */
    operator?: string;
    /**
     * The logical relationship of the level filters, the value AND or OR.
     */
    type?: string;
    /**
     * Filter value, range operation needs to enter two values at the same time, separated by commas.
     */
    value?: string;
}

export interface GetEbSearchFilterFilter {
    /**
     * filter field name.
     */
    key: string;
    /**
     * operator, congruent eq, not equal neq, similar like, exclude similar not like, less than lt, less than and equal to lte, greater than gt, greater than and equal to gte, within range range, not within range norange.
     */
    operator: string;
    /**
     * Filter values, range operations need to enter two values at the same time, separated by commas.
     */
    value: string;
}

export interface GetEbSearchResult {
    message: string;
    region: string;
    ruleIds: string;
    source: string;
    status: string;
    subject: string;
    timestamp: string;
    type: string;
}

export interface GetEipAddressQuotaQuotaSet {
    quotaCurrent: number;
    quotaId: string;
    quotaLimit: number;
}

export interface GetEipFilter {
    /**
     * Key of the filter, valid keys: `address-id`,`address-name`,`address-ip`.
     */
    name: string;
    /**
     * Value of the filter.
     */
    values: string[];
}

export interface GetEipsEipList {
    createTime: string;
    eipId: string;
    eipName: string;
    eipType: string;
    eniId: string;
    instanceId: string;
    publicIp: string;
    status: string;
    tags: {[key: string]: string};
}

export interface GetEksClusterCredentialAddress {
    ip: string;
    port: string;
    type: string;
}

export interface GetEksClusterCredentialInternalLb {
    enabled: boolean;
    subnetId: string;
}

export interface GetEksClusterCredentialPublicLb {
    allowFromCidrs: string[];
    enabled: boolean;
    extraParam: string;
    securityGroup: string;
    securityPolicies: string[];
}

export interface GetEksClustersList {
    clusterDesc: string;
    clusterId: string;
    clusterName: string;
    createdTime: string;
    dnsServers: outputs.GetEksClustersListDnsServer[];
    enableVpcCoreDns: boolean;
    k8sVersion: string;
    needDeleteCbs: boolean;
    serviceSubnetId: string;
    status: string;
    subnetIds: string[];
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetEksClustersListDnsServer {
    domain: string;
    servers: string[];
}

export interface GetElasticsearchDescribeIndexListIndexMetaField {
    appId: number;
    backingIndices: outputs.GetElasticsearchDescribeIndexListIndexMetaFieldBackingIndex[];
    clusterId: string;
    clusterName: string;
    clusterVersion: string;
    indexCreateTime: string;
    indexDocs: number;
    indexMetaJson: string;
    indexName: string;
    indexOptionsFields: outputs.GetElasticsearchDescribeIndexListIndexMetaFieldIndexOptionsField[];
    indexPolicyFields: outputs.GetElasticsearchDescribeIndexListIndexMetaFieldIndexPolicyField[];
    indexSettingsFields: outputs.GetElasticsearchDescribeIndexListIndexMetaFieldIndexSettingsField[];
    indexStatus: string;
    indexStorage: number;
    indexType: string;
}

export interface GetElasticsearchDescribeIndexListIndexMetaFieldBackingIndex {
    indexCreateTime: string;
    indexName: string;
    indexPhrase: string;
    indexStatus: string;
    indexStorage: number;
}

export interface GetElasticsearchDescribeIndexListIndexMetaFieldIndexOptionsField {
    expireMaxAge: string;
    expireMaxSize: string;
    rolloverDynamic: string;
    rolloverMaxAge: string;
    shardNumDynamic: string;
    timestampField: string;
    writeMode: string;
}

export interface GetElasticsearchDescribeIndexListIndexMetaFieldIndexPolicyField {
    coldAction: string;
    coldEnable: string;
    coldMinAge: string;
    frozenEnable: string;
    frozenMinAge: string;
    warmEnable: string;
    warmMinAge: string;
}

export interface GetElasticsearchDescribeIndexListIndexMetaFieldIndexSettingsField {
    numberOfReplicas: string;
    numberOfShards: string;
    refreshInterval: string;
}

export interface GetElasticsearchDiagnoseDiagnoseResult {
    completed: boolean;
    createTime: string;
    instanceId: string;
    jobParams: outputs.GetElasticsearchDiagnoseDiagnoseResultJobParam[];
    jobResults: outputs.GetElasticsearchDiagnoseDiagnoseResultJobResult[];
    jobType: number;
    requestId: string;
    score: number;
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobParam {
    indices: string;
    interval: number;
    jobs: string[];
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobResult {
    advise: string;
    detail: string;
    jobName: string;
    logDetails: outputs.GetElasticsearchDiagnoseDiagnoseResultJobResultLogDetail[];
    metricDetails: outputs.GetElasticsearchDiagnoseDiagnoseResultJobResultMetricDetail[];
    score: number;
    settingDetails: outputs.GetElasticsearchDiagnoseDiagnoseResultJobResultSettingDetail[];
    status: number;
    summary: string;
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobResultLogDetail {
    advise: string;
    count: number;
    key: string;
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobResultMetricDetail {
    key: string;
    metrics: outputs.GetElasticsearchDiagnoseDiagnoseResultJobResultMetricDetailMetric[];
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobResultMetricDetailMetric {
    dimensions: outputs.GetElasticsearchDiagnoseDiagnoseResultJobResultMetricDetailMetricDimension[];
    value: number;
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobResultMetricDetailMetricDimension {
    key: string;
    value: string;
}

export interface GetElasticsearchDiagnoseDiagnoseResultJobResultSettingDetail {
    advise: string;
    key: string;
    value: string;
}

export interface GetElasticsearchInstanceLogsInstanceLogList {
    ip: string;
    level: string;
    message: string;
    nodeId: string;
    time: string;
}

export interface GetElasticsearchInstanceOperationsOperation {
    details: outputs.GetElasticsearchInstanceOperationsOperationDetail[];
    id: number;
    progress: number;
    result: string;
    startTime: string;
    subAccountUin: string;
    tasks: outputs.GetElasticsearchInstanceOperationsOperationTask[];
    type: string;
}

export interface GetElasticsearchInstanceOperationsOperationDetail {
    newInfos: outputs.GetElasticsearchInstanceOperationsOperationDetailNewInfo[];
    oldInfos: outputs.GetElasticsearchInstanceOperationsOperationDetailOldInfo[];
}

export interface GetElasticsearchInstanceOperationsOperationDetailNewInfo {
    key: string;
    value: string;
}

export interface GetElasticsearchInstanceOperationsOperationDetailOldInfo {
    key: string;
    value: string;
}

export interface GetElasticsearchInstanceOperationsOperationTask {
    elapsedTime: number;
    finishTime: string;
    name: string;
    processInfos: outputs.GetElasticsearchInstanceOperationsOperationTaskProcessInfo[];
    progress: number;
    subTasks: outputs.GetElasticsearchInstanceOperationsOperationTaskSubTask[];
}

export interface GetElasticsearchInstanceOperationsOperationTaskProcessInfo {
    completed: number;
    remain: number;
    taskType: number;
    total: number;
}

export interface GetElasticsearchInstanceOperationsOperationTaskSubTask {
    errMsg: string;
    failedIndices: string[];
    finishTime: string;
    level: number;
    name: string;
    result: boolean;
    status: number;
    type: string;
}

export interface GetElasticsearchInstancePluginListPluginList {
    pluginDesc: string;
    pluginName: string;
    pluginType: number;
    pluginUpdateTime: string;
    pluginVersion: string;
    removable: boolean;
    status: number;
}

export interface GetElasticsearchInstancesInstanceList {
    availabilityZone: string;
    basicSecurityType: number;
    chargeType: string;
    createTime: string;
    deployMode: number;
    elasticsearchDomain: string;
    elasticsearchPort: number;
    elasticsearchVip: string;
    instanceId: string;
    instanceName: string;
    kibanaUrl: string;
    licenseType: string;
    multiZoneInfos: outputs.GetElasticsearchInstancesInstanceListMultiZoneInfo[];
    nodeInfoLists: outputs.GetElasticsearchInstancesInstanceListNodeInfoList[];
    subnetId: string;
    tags: {[key: string]: string};
    version: string;
    vpcId: string;
}

export interface GetElasticsearchInstancesInstanceListMultiZoneInfo {
    availabilityZone: string;
    subnetId: string;
}

export interface GetElasticsearchInstancesInstanceListNodeInfoList {
    diskSize: number;
    diskType: string;
    encrypt: boolean;
    nodeNum: number;
    nodeType: string;
    type: string;
}

export interface GetElasticsearchLogstashInstanceLogsInstanceLogList {
    ip: string;
    level: string;
    message: string;
    nodeId: string;
    time: string;
}

export interface GetElasticsearchLogstashInstanceOperationsOperation {
    details: outputs.GetElasticsearchLogstashInstanceOperationsOperationDetail[];
    id: number;
    progress: number;
    result: string;
    startTime: string;
    subAccountUin: string;
    tasks: outputs.GetElasticsearchLogstashInstanceOperationsOperationTask[];
    type: string;
}

export interface GetElasticsearchLogstashInstanceOperationsOperationDetail {
    newInfos: outputs.GetElasticsearchLogstashInstanceOperationsOperationDetailNewInfo[];
    oldInfos: outputs.GetElasticsearchLogstashInstanceOperationsOperationDetailOldInfo[];
}

export interface GetElasticsearchLogstashInstanceOperationsOperationDetailNewInfo {
    key: string;
    value: string;
}

export interface GetElasticsearchLogstashInstanceOperationsOperationDetailOldInfo {
    key: string;
    value: string;
}

export interface GetElasticsearchLogstashInstanceOperationsOperationTask {
    elapsedTime: number;
    finishTime: string;
    name: string;
    processInfos: outputs.GetElasticsearchLogstashInstanceOperationsOperationTaskProcessInfo[];
    progress: number;
    subTasks: outputs.GetElasticsearchLogstashInstanceOperationsOperationTaskSubTask[];
}

export interface GetElasticsearchLogstashInstanceOperationsOperationTaskProcessInfo {
    completed: number;
    remain: number;
    taskType: number;
    total: number;
}

export interface GetElasticsearchLogstashInstanceOperationsOperationTaskSubTask {
    errMsg: string;
    failedIndices: string[];
    finishTime: string;
    level: number;
    name: string;
    result: boolean;
    status: number;
    type: string;
}

export interface GetElasticsearchViewsClusterView {
    avgCpuUsage: number;
    avgDiskUsage: number;
    avgMemUsage: number;
    break: number;
    dataNodeNum: number;
    diskUsedInBytes: number;
    docNum: number;
    health: number;
    indexNum: number;
    initializingShardNum: number;
    nodeNum: number;
    primaryShardNum: number;
    relocatingShardNum: number;
    searchableSnapshotCosAppId: string;
    searchableSnapshotCosBucket: string;
    shardNum: number;
    targetNodeTypes: string[];
    totalCosStorage: number;
    totalDiskSize: number;
    totalNodeNum: number;
    unassignedShardNum: number;
    visible: number;
}

export interface GetElasticsearchViewsKibanasView {
    cpuNum: number;
    cpuUsage: number;
    diskSize: number;
    diskUsage: number;
    ip: string;
    memSize: number;
    memUsage: number;
    nodeId: string;
    zone: string;
}

export interface GetElasticsearchViewsNodesView {
    break: number;
    cpuNum: number;
    cpuUsage: number;
    diskIds: string[];
    diskSize: number;
    diskUsage: number;
    hidden: boolean;
    isCoordinationNode: boolean;
    jvmMemUsage: number;
    memSize: number;
    memUsage: number;
    nodeHttpIp: string;
    nodeId: string;
    nodeIp: string;
    nodeRole: string;
    shardNum: number;
    visible: number;
    zone: string;
}

export interface GetEmrAutoScaleRecordsFilter {
    /**
     * Key. Note: This field may return null, indicating that no valid value can be obtained.
     */
    key: string;
    /**
     * Value. Note: This field may return null, indicating that no valid value can be obtained.
     */
    value: string;
}

export interface GetEmrAutoScaleRecordsRecordList {
    actionStatus: string;
    actionTime: string;
    compensateCount: number;
    compensateFlag: number;
    endTime: string;
    expectScaleNum: number;
    scaleAction: string;
    scaleInfo: string;
    specInfo: string;
    strategyName: string;
    strategyType: number;
}

export interface GetEmrCluster {
    addTime: string;
    chargeType: number;
    clusterId: string;
    clusterName: string;
    ftitle: string;
    id: number;
    masterIp: string;
    projectId: number;
    regionId: number;
    status: number;
    zone: string;
    zoneId: number;
}

export interface GetEmrCvmQuotaEksQuotaSet {
    cpu: number;
    memory: number;
    nodeType: string;
    number: number;
}

export interface GetEmrCvmQuotaPostPaidQuotaSet {
    remainingQuota: number;
    totalQuota: number;
    usedQuota: number;
    zone: string;
}

export interface GetEmrCvmQuotaSpotPaidQuotaSet {
    remainingQuota: number;
    totalQuota: number;
    usedQuota: number;
    zone: string;
}

export interface GetEmrNodesNode {
    appId: number;
    applyTime: string;
    autoFlag: number;
    cdbIp: string;
    cdbNodeInfos: outputs.GetEmrNodesNodeCdbNodeInfo[];
    cdbPort: number;
    chargeType: number;
    cpuNum: number;
    destroyable: number;
    deviceClass: string;
    diskSize: string;
    dynamicPodSpec: string;
    emrResourceId: string;
    expireTime: string;
    flag: number;
    freeTime: string;
    hardwareResourceType: string;
    hwDiskSize: number;
    hwDiskSizeDesc: string;
    hwMemSize: number;
    hwMemSizeDesc: string;
    ip: string;
    isAutoRenew: number;
    isDynamicSpec: number;
    mcMultiDisks: outputs.GetEmrNodesNodeMcMultiDisk[];
    memDesc: string;
    memSize: number;
    mutable: number;
    nameTag: string;
    orderNo: string;
    regionId: number;
    rootSize: number;
    serialNo: string;
    services: string;
    spec: string;
    storageType: number;
    supportModifyPayMode: number;
    tags: outputs.GetEmrNodesNodeTag[];
    wanIp: string;
    zoneId: number;
}

export interface GetEmrNodesNodeCdbNodeInfo {
    applyTime: string;
    expireFlag: boolean;
    expireTime: string;
    instanceName: string;
    ip: string;
    isAutoRenew: number;
    memSize: number;
    payType: number;
    port: number;
    regionId: number;
    serialNo: string;
    service: string;
    status: number;
    volume: number;
    zoneId: number;
}

export interface GetEmrNodesNodeMcMultiDisk {
    count: number;
    type: number;
    volume: number;
}

export interface GetEmrNodesNodeTag {
    tagKey: string;
    tagValue: string;
}

export interface GetEnisEni {
    createTime: string;
    description: string;
    id: string;
    instanceId: string;
    ipv4s: outputs.GetEnisEniIpv4[];
    mac: string;
    name: string;
    primary: boolean;
    securityGroups: string[];
    state: string;
    subnetId: string;
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetEnisEniIpv4 {
    description: string;
    ip: string;
    primary: boolean;
}

export interface GetGaapAccessRegionsAccessRegionSet {
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
    supportFeatures: outputs.GetGaapAccessRegionsAccessRegionSetSupportFeature[];
}

export interface GetGaapAccessRegionsAccessRegionSetSupportFeature {
    networkTypes: string[];
}

export interface GetGaapAccessRegionsByDestRegionAccessRegionSet {
    bandwidthLists: number[];
    concurrentLists: number[];
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
}

export interface GetGaapCertificatesCertificate {
    beginTime: string;
    createTime: string;
    endTime: string;
    id: string;
    issuerCn: string;
    name: string;
    subjectCn: string;
    type: string;
}

export interface GetGaapCountryAreaMappingCountryAreaMappingList {
    continentInnerCode: string;
    continentName: string;
    geographicalZoneInnerCode: string;
    geographicalZoneName: string;
    nationCountryInnerCode: string;
    nationCountryName: string;
    remark: string;
}

export interface GetGaapCustomHeaderHeader {
    headerName: string;
    headerValue: string;
}

export interface GetGaapDestRegionsDestRegionSet {
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
    supportFeatures: outputs.GetGaapDestRegionsDestRegionSetSupportFeature[];
}

export interface GetGaapDestRegionsDestRegionSetSupportFeature {
    networkTypes: string[];
}

export interface GetGaapDomainErrorPageInfosErrorPageSet {
    body: string;
    clearHeaders: string[];
    domain: string;
    errorNos: number[];
    errorPageId: string;
    listenerId: string;
    newErrorNo: number;
    setHeaders: outputs.GetGaapDomainErrorPageInfosErrorPageSetSetHeader[];
    status: number;
}

export interface GetGaapDomainErrorPageInfosErrorPageSetSetHeader {
    headerName: string;
    headerValue: string;
}

export interface GetGaapDomainErrorPagesErrorPageInfoList {
    body: string;
    clearHeaders: string[];
    domain: string;
    errorCodes: number[];
    id: string;
    listenerId: string;
    newErrorCodes: number;
    setHeaders: {[key: string]: string};
}

export interface GetGaapGroupAndStatisticsProxyGroupSet {
    groupId: string;
    groupName: string;
    proxySets: outputs.GetGaapGroupAndStatisticsProxyGroupSetProxySet[];
}

export interface GetGaapGroupAndStatisticsProxyGroupSetProxySet {
    listenerLists: outputs.GetGaapGroupAndStatisticsProxyGroupSetProxySetListenerList[];
    proxyId: string;
    proxyName: string;
}

export interface GetGaapGroupAndStatisticsProxyGroupSetProxySetListenerList {
    listenerId: string;
    listenerName: string;
    port: number;
    protocol: string;
}

export interface GetGaapHttpDomainsDomain {
    basicAuth: boolean;
    basicAuthId: string;
    certificateId: string;
    clientCertificateId: string;
    clientCertificateIds: string[];
    domain: string;
    gaapAuth: boolean;
    gaapAuthId: string;
    realserverAuth: boolean;
    realserverCertificateDomain: string;
    realserverCertificateId: string;
    realserverCertificateIds: string[];
}

export interface GetGaapHttpRulesRule {
    connectTimeout: number;
    domain: string;
    forwardHost: string;
    healthCheck: boolean;
    healthCheckMethod: string;
    healthCheckPath: string;
    healthCheckStatusCodes: number[];
    id: string;
    interval: number;
    listenerId: string;
    path: string;
    realserverType: string;
    realservers: outputs.GetGaapHttpRulesRuleRealserver[];
    scheduler: string;
    sni: string;
    sniSwitch: string;
}

export interface GetGaapHttpRulesRuleRealserver {
    domain: string;
    id: string;
    ip: string;
    port: number;
    status: number;
    weight: number;
}

export interface GetGaapLayer4ListenersListener {
    connectTimeout: number;
    createTime: string;
    healthCheck: boolean;
    id: string;
    interval: number;
    name: string;
    port: number;
    protocol: string;
    proxyId: string;
    realserverType: string;
    scheduler: string;
    status: number;
}

export interface GetGaapLayer7ListenersListener {
    authType: number;
    certificateId: string;
    clientCertificateId: string;
    clientCertificateIds: string[];
    createTime: string;
    forwardProtocol: string;
    id: string;
    name: string;
    port: number;
    protocol: string;
    proxyId: string;
    status: number;
}

export interface GetGaapListenerRealServersBindRealServerSet {
    downIPLists: string[];
    realServerFailoverRole: string;
    realServerIP: string;
    realServerId: string;
    realServerPort: number;
    realServerStatus: number;
    realServerWeight: number;
}

export interface GetGaapListenerRealServersRealServerSet {
    inBanBlacklist: number;
    projectId: number;
    realServerIP: string;
    realServerId: string;
    realServerName: string;
}

export interface GetGaapListenerStatisticsStatisticsData {
    metricDatas: outputs.GetGaapListenerStatisticsStatisticsDataMetricData[];
    metricName: string;
}

export interface GetGaapListenerStatisticsStatisticsDataMetricData {
    data: number;
    time: number;
}

export interface GetGaapProxiesProxy {
    accessRegion: string;
    bandwidth: number;
    concurrent: number;
    createTime: string;
    domain: string;
    forwardIp: string;
    id: string;
    ip: string;
    name: string;
    policyId: string;
    projectId: number;
    realserverRegion: string;
    scalable: boolean;
    status: string;
    supportProtocols: string[];
    tags: {[key: string]: string};
    version: string;
}

export interface GetGaapProxiesStatusInstanceStatusSet {
    instanceId: string;
    status: string;
}

export interface GetGaapProxyAndStatisticsListenersProxySet {
    listenerLists: outputs.GetGaapProxyAndStatisticsListenersProxySetListenerList[];
    proxyId: string;
    proxyName: string;
}

export interface GetGaapProxyAndStatisticsListenersProxySetListenerList {
    listenerId: string;
    listenerName: string;
    port: number;
    protocol: string;
}

export interface GetGaapProxyDetailProxyDetail {
    accessRegion: string;
    accessRegionInfos: outputs.GetGaapProxyDetailProxyDetailAccessRegionInfo[];
    banStatus: string;
    bandwidth: number;
    billingType: number;
    clientIpMethods: number[];
    concurrent: number;
    createTime: number;
    domain: string;
    featureBitmap: number;
    forwardIp: string;
    groupId: string;
    http3Supported: number;
    inBanBlacklist: number;
    instanceId: string;
    ip: string;
    ipAddressVersion: string;
    ipLists: outputs.GetGaapProxyDetailProxyDetailIpList[];
    modifyConfigTime: number;
    networkType: string;
    packageType: string;
    policyId: string;
    projectId: number;
    proxyId: string;
    proxyName: string;
    proxyType: number;
    realServerRegion: string;
    realServerRegionInfos: outputs.GetGaapProxyDetailProxyDetailRealServerRegionInfo[];
    relatedGlobalDomains: string[];
    scalarable: number;
    status: string;
    supportProtocols: string[];
    supportSecurity: number;
    tagSets: outputs.GetGaapProxyDetailProxyDetailTagSet[];
    version: string;
}

export interface GetGaapProxyDetailProxyDetailAccessRegionInfo {
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
    supportFeatures: outputs.GetGaapProxyDetailProxyDetailAccessRegionInfoSupportFeature[];
}

export interface GetGaapProxyDetailProxyDetailAccessRegionInfoSupportFeature {
    networkTypes: string[];
}

export interface GetGaapProxyDetailProxyDetailIpList {
    bandwidth: number;
    ip: string;
    provider: string;
}

export interface GetGaapProxyDetailProxyDetailRealServerRegionInfo {
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
    supportFeatures: outputs.GetGaapProxyDetailProxyDetailRealServerRegionInfoSupportFeature[];
}

export interface GetGaapProxyDetailProxyDetailRealServerRegionInfoSupportFeature {
    networkTypes: string[];
}

export interface GetGaapProxyDetailProxyDetailTagSet {
    tagKey: string;
    tagValue: string;
}

export interface GetGaapProxyGroupStatisticsStatisticsData {
    metricDatas: outputs.GetGaapProxyGroupStatisticsStatisticsDataMetricData[];
    metricName: string;
}

export interface GetGaapProxyGroupStatisticsStatisticsDataMetricData {
    data: number;
    time: number;
}

export interface GetGaapProxyGroupsFilter {
    /**
     * Filter conditions.
     */
    name: string;
    /**
     * filtering value.
     */
    values: string[];
}

export interface GetGaapProxyGroupsProxyGroupList {
    createTime: number;
    domain: string;
    featureBitmap: number;
    groupId: string;
    groupName: string;
    http3Supported: number;
    projectId: number;
    proxyType: number;
    realServerRegionInfos: outputs.GetGaapProxyGroupsProxyGroupListRealServerRegionInfo[];
    status: string;
    tagSets: outputs.GetGaapProxyGroupsProxyGroupListTagSet[];
    version: string;
}

export interface GetGaapProxyGroupsProxyGroupListRealServerRegionInfo {
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
    supportFeatures: outputs.GetGaapProxyGroupsProxyGroupListRealServerRegionInfoSupportFeature[];
}

export interface GetGaapProxyGroupsProxyGroupListRealServerRegionInfoSupportFeature {
    networkTypes: string[];
}

export interface GetGaapProxyGroupsProxyGroupListTagSet {
    tagKey: string;
    tagValue: string;
}

export interface GetGaapProxyGroupsTagSet {
    /**
     * Tag Key.
     */
    tagKey: string;
    /**
     * Tag Value.
     */
    tagValue: string;
}

export interface GetGaapProxyStatisticsStatisticsData {
    metricDatas: outputs.GetGaapProxyStatisticsStatisticsDataMetricData[];
    metricName: string;
}

export interface GetGaapProxyStatisticsStatisticsDataMetricData {
    data: number;
    time: number;
}

export interface GetGaapRealServersStatusRealServerStatusSet {
    bindStatus: number;
    groupId: string;
    proxyId: string;
    realServerId: string;
}

export interface GetGaapRealserversRealserver {
    domain: string;
    id: string;
    ip: string;
    name: string;
    projectId: number;
    tags: {[key: string]: string};
}

export interface GetGaapRegionAndPriceBandwidthUnitPrice {
    bandwidthRanges: number[];
    bandwidthUnitPrice: number;
    discountBandwidthUnitPrice: number;
}

export interface GetGaapRegionAndPriceDestRegionSet {
    featureBitmap: number;
    idcType: string;
    regionArea: string;
    regionAreaName: string;
    regionId: string;
    regionName: string;
    supportFeatures: outputs.GetGaapRegionAndPriceDestRegionSetSupportFeature[];
}

export interface GetGaapRegionAndPriceDestRegionSetSupportFeature {
    networkTypes: string[];
}

export interface GetGaapResourcesByTagResourceSet {
    resourceId: string;
    resourceType: string;
}

export interface GetGaapRuleRealServersBindRealServerSet {
    downIpLists: string[];
    realServerFailoverRole: string;
    realServerId: string;
    realServerIp: string;
    realServerPort: number;
    realServerStatus: number;
    realServerWeight: number;
}

export interface GetGaapRuleRealServersRealServerSet {
    inBanBlacklist: number;
    projectId: number;
    realServerId: string;
    realServerIp: string;
    realServerName: string;
}

export interface GetGaapSecurityRulesRule {
    action: string;
    cidrIp: string;
    id: string;
    name: string;
    port: string;
    protocol: string;
}

export interface GetHaVipEipAttachmentsHaVipEipAttachmentList {
    addressIp: string;
    havipId: string;
}

export interface GetHaVipsHaVipList {
    addressIp: string;
    createTime: string;
    id: string;
    instanceId: string;
    name: string;
    networkInterfaceId: string;
    state: string;
    subnetId: string;
    vip: string;
    vpcId: string;
}

export interface GetImageFilter {
    /**
     * Key of the filter, valid keys: `image-id`, `image-type`, `image-name`.
     */
    name: string;
    /**
     * Values of the filter.
     */
    values: string[];
}

export interface GetImagesImage {
    architecture: string;
    createdTime: string;
    imageCreator: string;
    imageDescription: string;
    imageId: string;
    imageName: string;
    imageSize: number;
    imageSource: string;
    imageState: string;
    imageType: string;
    osName: string;
    platform: string;
    snapshots: outputs.GetImagesImageSnapshot[];
    supportCloudInit: boolean;
    syncPercent: number;
}

export interface GetImagesImageSnapshot {
    diskSize: number;
    diskUsage: string;
    snapshotId: string;
    snapshotName: string;
}

export interface GetInstanceTypesFilter {
    /**
     * The filter name. Valid values: `zone`, `instance-family` and `instance-charge-type`.
     */
    name: string;
    /**
     * The filter values.
     */
    values: string[];
}

export interface GetInstanceTypesInstanceType {
    availabilityZone: string;
    cpuCoreCount: number;
    family: string;
    gpuCoreCount: number;
    instanceChargeType: string;
    instanceType: string;
    memorySize: number;
    status: string;
}

export interface GetInstancesInstanceList {
    allocatePublicIp: boolean;
    availabilityZone: string;
    camRoleName: string;
    cpu: number;
    createTime: string;
    dataDisks: outputs.GetInstancesInstanceListDataDisk[];
    dedicatedClusterId: string;
    expiredTime: string;
    imageId: string;
    instanceChargeType: string;
    instanceChargeTypePrepaidRenewFlag: string;
    instanceId: string;
    instanceName: string;
    instanceType: string;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
    memory: number;
    osName: string;
    privateIp: string;
    projectId: number;
    publicIp: string;
    securityGroups: string[];
    status: string;
    subnetId: string;
    systemDiskId: string;
    systemDiskSize: number;
    systemDiskType: string;
    tags: {[key: string]: string};
    uuid: string;
    vpcId: string;
}

export interface GetInstancesInstanceListDataDisk {
    dataDiskId: string;
    dataDiskSize: number;
    dataDiskType: string;
    deleteWithInstance: boolean;
}

export interface GetInstancesSetInstanceList {
    allocatePublicIp: boolean;
    availabilityZone: string;
    camRoleName: string;
    cpu: number;
    createTime: string;
    dataDisks: outputs.GetInstancesSetInstanceListDataDisk[];
    expiredTime: string;
    imageId: string;
    instanceChargeType: string;
    instanceChargeTypePrepaidRenewFlag: string;
    instanceId: string;
    instanceName: string;
    instanceType: string;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
    memory: number;
    privateIp: string;
    projectId: number;
    publicIp: string;
    securityGroups: string[];
    status: string;
    subnetId: string;
    systemDiskId: string;
    systemDiskSize: number;
    systemDiskType: string;
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetInstancesSetInstanceListDataDisk {
    dataDiskId: string;
    dataDiskSize: number;
    dataDiskType: string;
    deleteWithInstance: boolean;
}

export interface GetKeyPairsKeyPairList {
    createTime: string;
    keyId: string;
    keyName: string;
    projectId: number;
    publicKey: string;
}

export interface GetKmsDescribeKeysKeyList {
    alias: string;
    createTime: number;
    creatorUin: number;
    deletionDate: number;
    description: string;
    keyId: string;
    keyRotationEnabled: boolean;
    keyState: string;
    keyUsage: string;
    nextRotateTime: number;
    origin: string;
    owner: string;
    validTo: number;
}

export interface GetKmsKeysKeyList {
    alias: string;
    createTime: number;
    creatorUin: number;
    deletionDate: number;
    description: string;
    keyId: string;
    keyRotationEnabled: boolean;
    keyState: string;
    keyUsage: string;
    nextRotateTime: number;
    origin: string;
    owner: string;
    validTo: number;
}

export interface GetKmsListAlgorithmsAsymmetricAlgorithm {
    algorithm: string;
    keyUsage: string;
}

export interface GetKmsListAlgorithmsAsymmetricSignVerifyAlgorithm {
    algorithm: string;
    keyUsage: string;
}

export interface GetKmsListAlgorithmsSymmetricAlgorithm {
    algorithm: string;
    keyUsage: string;
}

export interface GetKmsListKeysKey {
    keyId: string;
}

export interface GetKmsWhiteBoxDeviceFingerprintsList {
    description: string;
    identity: string;
}

export interface GetKmsWhiteBoxKeyDetailsKeyInfo {
    algorithm: string;
    alias: string;
    createTime: number;
    creatorUin: number;
    decryptKey: string;
    description: string;
    deviceFingerprintBind: boolean;
    encryptKey: string;
    keyId: string;
    ownerUin: number;
    resourceId: string;
    status: string;
}

export interface GetKubernetesAvailableClusterVersionsCluster {
    clusterId: string;
    versions: string[];
}

export interface GetKubernetesChartsChartList {
    label: {[key: string]: string};
    latestVersion: string;
    name: string;
}

export interface GetKubernetesClusterAuthenticationOptionsOidcConfig {
    autoCreateClientIds: string[];
    autoCreateOidcConfig: boolean;
    autoInstallPodIdentityWebhookAddon: boolean;
}

export interface GetKubernetesClusterAuthenticationOptionsServiceAccount {
    autoCreateDiscoveryAnonymousAuth: boolean;
    issuer: string;
    jwksUri: string;
    useTkeDefault: boolean;
}

export interface GetKubernetesClusterCommonNamesList {
    commonNames: string;
    subaccountUin: string;
}

export interface GetKubernetesClusterInstancesFilter {
    /**
     * The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
     */
    name: string;
    /**
     * Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
     */
    values: string[];
}

export interface GetKubernetesClusterInstancesInstanceSet {
    autoscalingGroupId: string;
    createdTime: string;
    drainStatus: string;
    failedReason: string;
    instanceAdvancedSettings: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSetting[];
    instanceId: string;
    instanceRole: string;
    instanceState: string;
    lanIp: string;
    nodePoolId: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSetting {
    dataDisks: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingDataDisk[];
    desiredPodNumber: number;
    dockerGraphPath: string;
    extraArgs: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingExtraArg[];
    gpuArgs: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArg[];
    labels: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingLabel[];
    mountTarget: string;
    preStartUserScript: string;
    taints: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingTaint[];
    unschedulable: number;
    userScript: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingDataDisk {
    autoFormatAndMount: boolean;
    diskPartition: string;
    diskSize: number;
    diskType: string;
    fileSystem: string;
    mountTarget: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingExtraArg {
    kubelets: string[];
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArg {
    cudas: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgCuda[];
    cudnns: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgCudnn[];
    customDrivers: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgCustomDriver[];
    drivers: outputs.GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgDriver[];
    migEnable: boolean;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgCuda {
    name: string;
    version: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgCudnn {
    devName: string;
    docName: string;
    name: string;
    version: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgCustomDriver {
    address: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingGpuArgDriver {
    name: string;
    version: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingLabel {
    name: string;
    value: string;
}

export interface GetKubernetesClusterInstancesInstanceSetInstanceAdvancedSettingTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetKubernetesClusterLevelsList {
    alias: string;
    configMapCount: number;
    crdCount: number;
    enable: boolean;
    name: string;
    nodeCount: number;
    otherCount: number;
    podCount: number;
}

export interface GetKubernetesClusterNativeNodePoolsFilter {
    /**
     * The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
     */
    name: string;
    /**
     * Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
     */
    values: string[];
}

export interface GetKubernetesClusterNativeNodePoolsNodePool {
    annotations: outputs.GetKubernetesClusterNativeNodePoolsNodePoolAnnotation[];
    clusterId: string;
    createdAt: string;
    deletionProtection: boolean;
    labels: outputs.GetKubernetesClusterNativeNodePoolsNodePoolLabel[];
    lifeState: string;
    name: string;
    natives: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNative[];
    nodePoolId: string;
    tags: outputs.GetKubernetesClusterNativeNodePoolsNodePoolTag[];
    taints: outputs.GetKubernetesClusterNativeNodePoolsNodePoolTaint[];
    type: string;
    unschedulable: boolean;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolAnnotation {
    name: string;
    value: string;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolLabel {
    name: string;
    value: string;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNative {
    autoRepair: boolean;
    dataDisks: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeDataDisk[];
    enableAutoscaling: boolean;
    healthCheckPolicyName: string;
    hostNamePattern: string;
    instanceChargePrepaids: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeInstanceChargePrepaid[];
    instanceChargeType: string;
    instanceTypes: string[];
    internetAccessibles: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeInternetAccessible[];
    keyIds: string[];
    kubeletArgs: string[];
    lifecycles: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeLifecycle[];
    managements: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeManagement[];
    replicas: number;
    runtimeRootDir: string;
    scalings: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeScaling[];
    securityGroupIds: string[];
    subnetIds: string[];
    systemDisks: outputs.GetKubernetesClusterNativeNodePoolsNodePoolNativeSystemDisk[];
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeDataDisk {
    autoFormatAndMount: boolean;
    diskPartition: string;
    diskSize: number;
    diskType: string;
    encrypt: string;
    fileSystem: string;
    kmsKeyId: string;
    mountTarget: string;
    snapshotId: string;
    throughputPerformance: number;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeInstanceChargePrepaid {
    period: number;
    renewFlag: string;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeInternetAccessible {
    bandwidthPackageId: string;
    chargeType: string;
    maxBandwidthOut: number;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeLifecycle {
    postInit: string;
    preInit: string;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeManagement {
    hosts: string[];
    kernelArgs: string[];
    nameservers: string[];
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeScaling {
    createPolicy: string;
    maxReplicas: number;
    minReplicas: number;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolNativeSystemDisk {
    diskSize: number;
    diskType: string;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolTag {
    resourceType: string;
    tags: outputs.GetKubernetesClusterNativeNodePoolsNodePoolTagTag[];
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolTagTag {
    key: string;
    value: string;
}

export interface GetKubernetesClusterNativeNodePoolsNodePoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetKubernetesClusterNodePoolsFilter {
    /**
     * The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
     */
    name: string;
    /**
     * Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
     */
    values: string[];
}

export interface GetKubernetesClusterNodePoolsNodePoolSet {
    autoscalingGroupId: string;
    autoscalingGroupStatus: string;
    clusterInstanceId: string;
    dataDisks: outputs.GetKubernetesClusterNodePoolsNodePoolSetDataDisk[];
    deletionProtection: boolean;
    desiredNodesNum: number;
    desiredPodNum: number;
    dockerGraphPath: string;
    extraArgs: outputs.GetKubernetesClusterNodePoolsNodePoolSetExtraArg[];
    gpuArgs: outputs.GetKubernetesClusterNodePoolsNodePoolSetGpuArg[];
    imageId: string;
    labels: outputs.GetKubernetesClusterNodePoolsNodePoolSetLabel[];
    launchConfigurationId: string;
    lifeState: string;
    maxNodesNum: number;
    minNodesNum: number;
    name: string;
    nodeCountSummaries: outputs.GetKubernetesClusterNodePoolsNodePoolSetNodeCountSummary[];
    nodePoolId: string;
    nodePoolOs: string;
    osCustomizeType: string;
    preStartUserScript: string;
    tags: outputs.GetKubernetesClusterNodePoolsNodePoolSetTag[];
    taints: outputs.GetKubernetesClusterNodePoolsNodePoolSetTaint[];
    unschedulable: number;
    userScript: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetDataDisk {
    autoFormatAndMount: boolean;
    diskPartition: string;
    diskSize: number;
    diskType: string;
    fileSystem: string;
    mountTarget: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetExtraArg {
    kubelets: string[];
}

export interface GetKubernetesClusterNodePoolsNodePoolSetGpuArg {
    cudas: outputs.GetKubernetesClusterNodePoolsNodePoolSetGpuArgCuda[];
    cudnns: outputs.GetKubernetesClusterNodePoolsNodePoolSetGpuArgCudnn[];
    customDrivers: outputs.GetKubernetesClusterNodePoolsNodePoolSetGpuArgCustomDriver[];
    drivers: outputs.GetKubernetesClusterNodePoolsNodePoolSetGpuArgDriver[];
    migEnable: boolean;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetGpuArgCuda {
    name: string;
    version: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetGpuArgCudnn {
    devName: string;
    docName: string;
    name: string;
    version: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetGpuArgCustomDriver {
    address: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetGpuArgDriver {
    name: string;
    version: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetLabel {
    name: string;
    value: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetNodeCountSummary {
    autoscalingAddeds: outputs.GetKubernetesClusterNodePoolsNodePoolSetNodeCountSummaryAutoscalingAdded[];
    manuallyAddeds: outputs.GetKubernetesClusterNodePoolsNodePoolSetNodeCountSummaryManuallyAdded[];
}

export interface GetKubernetesClusterNodePoolsNodePoolSetNodeCountSummaryAutoscalingAdded {
    initializing: number;
    joining: number;
    normal: number;
    total: number;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetNodeCountSummaryManuallyAdded {
    initializing: number;
    joining: number;
    normal: number;
    total: number;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetTag {
    key: string;
    value: string;
}

export interface GetKubernetesClusterNodePoolsNodePoolSetTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetKubernetesClustersList {
    certificationAuthority: string;
    claimExpiredSeconds: number;
    clusterAsEnabled: boolean;
    clusterCidr: string;
    clusterDeployType: string;
    clusterDesc: string;
    clusterExternalEndpoint: string;
    clusterExtraArgs: outputs.GetKubernetesClustersListClusterExtraArg[];
    clusterId: string;
    clusterIpvs: boolean;
    clusterMaxPodNum: number;
    clusterMaxServiceNum: number;
    clusterName: string;
    clusterNodeNum: number;
    clusterOs: string;
    clusterVersion: string;
    containerRuntime: string;
    deletionProtection: boolean;
    domain: string;
    eniSubnetIds: string[];
    ignoreClusterCidrConflict: boolean;
    isNonStaticIpMode: boolean;
    kubeConfig: string;
    kubeConfigIntranet: string;
    kubeProxyMode: string;
    networkType: string;
    nodeNameType: string;
    password: string;
    pgwEndpoint: string;
    projectId: number;
    securityPolicies: string[];
    serviceCidr: string;
    tags: {[key: string]: string};
    userName: string;
    vpcCniType: string;
    vpcId: string;
    workerInstancesLists: outputs.GetKubernetesClustersListWorkerInstancesList[];
}

export interface GetKubernetesClustersListClusterExtraArg {
    kubeApiservers: string[];
    kubeControllerManagers: string[];
    kubeSchedulers: string[];
}

export interface GetKubernetesClustersListWorkerInstancesList {
    failedReason: string;
    instanceId: string;
    instanceRole: string;
    instanceState: string;
    lanIp: string;
}

export interface GetLighthouseAllSceneSceneSet {
    description: string;
    displayName: string;
    sceneId: string;
}

export interface GetLighthouseBundleBundleSet {
    bundleDisplayLabel: string;
    bundleId: string;
    bundleSalesState: string;
    bundleType: string;
    cpu: number;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
    memory: number;
    monthlyTraffic: number;
    prices: outputs.GetLighthouseBundleBundleSetPrice[];
    supportLinuxUnixPlatform: boolean;
    supportWindowsPlatform: boolean;
    systemDiskSize: number;
    systemDiskType: string;
}

export interface GetLighthouseBundleBundleSetPrice {
    instancePrices: outputs.GetLighthouseBundleBundleSetPriceInstancePrice[];
}

export interface GetLighthouseBundleBundleSetPriceInstancePrice {
    currency: string;
    discount: number;
    discountPrice: number;
    originalBundlePrice: number;
    originalPrice: number;
}

export interface GetLighthouseBundleFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter value of field.
     */
    values: string[];
}

export interface GetLighthouseDiskConfigDiskConfigSet {
    diskSalesState: string;
    diskStepSize: number;
    diskType: string;
    maxDiskSize: number;
    minDiskSize: number;
    zone: string;
}

export interface GetLighthouseDiskConfigFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter value of field.
     */
    values: string[];
}

export interface GetLighthouseDisksDiskList {
    attached: boolean;
    createdTime: string;
    deleteWithInstance: boolean;
    diskBackupCount: number;
    diskBackupQuota: number;
    diskChargeType: string;
    diskId: string;
    diskName: string;
    diskSize: number;
    diskState: string;
    diskType: string;
    diskUsage: string;
    expiredTime: string;
    instanceId: string;
    isolatedTime: string;
    latestOperation: string;
    latestOperationRequestId: string;
    latestOperationState: string;
    renewFlag: string;
    zone: string;
}

export interface GetLighthouseDisksFilter {
    /**
     * Fields to be filtered. Valid names: `disk-id`: Filters by disk id; `instance-id`: Filter by instance id; `disk-name`: Filter by disk name; `zone`: Filter by zone; `disk-usage`: Filter by disk usage(Values: `SYSTEM_DISK` or `DATA_DISK`); `disk-state`: Filter by disk state.
     */
    name: string;
    /**
     * Value of the field.
     */
    values: string[];
}

export interface GetLighthouseFirewallRulesTemplateFirewallRuleSet {
    action: string;
    appType: string;
    cidrBlock: string;
    firewallRuleDescription: string;
    port: string;
    protocol: string;
}

export interface GetLighthouseInstanceBlueprintBlueprintInstanceSet {
    blueprints: outputs.GetLighthouseInstanceBlueprintBlueprintInstanceSetBlueprint[];
    instanceId: string;
    softwareSets: outputs.GetLighthouseInstanceBlueprintBlueprintInstanceSetSoftwareSet[];
}

export interface GetLighthouseInstanceBlueprintBlueprintInstanceSetBlueprint {
    blueprintId: string;
    blueprintName: string;
    blueprintState: string;
    blueprintType: string;
    communityUrl: string;
    createdTime: string;
    description: string;
    displayTitle: string;
    displayVersion: string;
    dockerVersion: string;
    guideUrl: string;
    imageId: string;
    imageUrl: string;
    osName: string;
    platform: string;
    platformType: string;
    requiredMemorySize: number;
    requiredSystemDiskSize: number;
    sceneIdSets: string[];
    supportAutomationTools: boolean;
}

export interface GetLighthouseInstanceBlueprintBlueprintInstanceSetSoftwareSet {
    detailSets: outputs.GetLighthouseInstanceBlueprintBlueprintInstanceSetSoftwareSetDetailSet[];
    imageUrl: string;
    installDir: string;
    name: string;
    version: string;
}

export interface GetLighthouseInstanceBlueprintBlueprintInstanceSetSoftwareSetDetailSet {
    key: string;
    title: string;
    value: string;
}

export interface GetLighthouseInstanceDiskNumAttachDetailSet {
    attachedDiskCount: number;
    instanceId: string;
    maxAttachCount: number;
}

export interface GetLighthouseInstanceTrafficPackageInstanceTrafficPackageSet {
    instanceId: string;
    trafficPackageSets: outputs.GetLighthouseInstanceTrafficPackageInstanceTrafficPackageSetTrafficPackageSet[];
}

export interface GetLighthouseInstanceTrafficPackageInstanceTrafficPackageSetTrafficPackageSet {
    deadline: string;
    endTime: string;
    startTime: string;
    status: string;
    trafficOverflow: number;
    trafficPackageId: string;
    trafficPackageRemaining: number;
    trafficPackageTotal: number;
    trafficUsed: number;
}

export interface GetLighthouseModifyInstanceBundleFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter value of field.
     */
    values: string[];
}

export interface GetLighthouseModifyInstanceBundleModifyBundleSet {
    bundles: outputs.GetLighthouseModifyInstanceBundleModifyBundleSetBundle[];
    modifyBundleState: string;
    modifyPrices: outputs.GetLighthouseModifyInstanceBundleModifyBundleSetModifyPrice[];
    notSupportModifyMessage: string;
}

export interface GetLighthouseModifyInstanceBundleModifyBundleSetBundle {
    bundleDisplayLabel: string;
    bundleId: string;
    bundleSalesState: string;
    bundleType: string;
    bundleTypeDescription: string;
    cpu: number;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
    memory: number;
    monthlyTraffic: number;
    prices: outputs.GetLighthouseModifyInstanceBundleModifyBundleSetBundlePrice[];
    supportLinuxUnixPlatform: boolean;
    supportWindowsPlatform: boolean;
    systemDiskSize: number;
    systemDiskType: string;
}

export interface GetLighthouseModifyInstanceBundleModifyBundleSetBundlePrice {
    instancePrices: outputs.GetLighthouseModifyInstanceBundleModifyBundleSetBundlePriceInstancePrice[];
}

export interface GetLighthouseModifyInstanceBundleModifyBundleSetBundlePriceInstancePrice {
    currency: string;
    discount: number;
    discountPrice: number;
    originalBundlePrice: number;
    originalPrice: number;
}

export interface GetLighthouseModifyInstanceBundleModifyBundleSetModifyPrice {
    instancePrices: outputs.GetLighthouseModifyInstanceBundleModifyBundleSetModifyPriceInstancePrice[];
}

export interface GetLighthouseModifyInstanceBundleModifyBundleSetModifyPriceInstancePrice {
    currency: string;
    discount: number;
    discountPrice: number;
    originalBundlePrice: number;
    originalPrice: number;
}

export interface GetLighthouseRegionRegionSet {
    isChinaMainland: boolean;
    region: string;
    regionName: string;
    regionState: string;
}

export interface GetLighthouseResetInstanceBlueprintFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter value of field.
     */
    values: string[];
}

export interface GetLighthouseResetInstanceBlueprintResetInstanceBlueprintSet {
    blueprintInfos: outputs.GetLighthouseResetInstanceBlueprintResetInstanceBlueprintSetBlueprintInfo[];
    isResettable: boolean;
    nonResettableMessage: string;
}

export interface GetLighthouseResetInstanceBlueprintResetInstanceBlueprintSetBlueprintInfo {
    blueprintId: string;
    blueprintName: string;
    blueprintState: string;
    blueprintType: string;
    communityUrl: string;
    createdTime: string;
    description: string;
    displayTitle: string;
    displayVersion: string;
    dockerVersion: string;
    guideUrl: string;
    imageId: string;
    imageUrl: string;
    osName: string;
    platform: string;
    platformType: string;
    requiredMemorySize: number;
    requiredSystemDiskSize: number;
    sceneIdSets: string[];
    supportAutomationTools: boolean;
}

export interface GetLighthouseSceneSceneSet {
    description: string;
    displayName: string;
    sceneId: string;
}

export interface GetLighthouseZoneZoneInfoSet {
    instanceDisplayLabel: string;
    zone: string;
    zoneName: string;
}

export interface GetMariadbAccountsList {
    createTime: string;
    delayThresh: number;
    description: string;
    host: string;
    readOnly: number;
    slaveConst: number;
    updateTime: string;
    userName: string;
}

export interface GetMariadbDatabaseObjectsFunc {
    func: string;
}

export interface GetMariadbDatabaseObjectsProc {
    proc: string;
}

export interface GetMariadbDatabaseObjectsTable {
    table: string;
}

export interface GetMariadbDatabaseObjectsView {
    view: string;
}

export interface GetMariadbDatabaseTableCol {
    col: string;
    type: string;
}

export interface GetMariadbDatabasesDatabase {
    dbName: string;
}

export interface GetMariadbDbInstancesInstance {
    dbVersionId: string;
    instanceId: string;
    instanceName: string;
    internetDomain: string;
    internetIp: string;
    internetPort: number;
    memory: number;
    projectId: number;
    region: string;
    resourceTags: outputs.GetMariadbDbInstancesInstanceResourceTag[];
    storage: number;
    subnetId: string;
    vip: string;
    vpcId: string;
    vport: number;
    zone: string;
}

export interface GetMariadbDbInstancesInstanceResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetMariadbDcnDetailDcnDetail {
    cpu: number;
    createTime: string;
    dcnFlag: number;
    dcnStatus: number;
    encryptStatus: number;
    instanceId: string;
    instanceName: string;
    instanceType: number;
    memory: number;
    payMode: number;
    periodEndTime: string;
    region: string;
    replicaConfigs: outputs.GetMariadbDcnDetailDcnDetailReplicaConfig[];
    replicaStatuses: outputs.GetMariadbDcnDetailDcnDetailReplicaStatus[];
    status: number;
    statusDesc: string;
    storage: number;
    vip: string;
    vipv6: string;
    vport: number;
    zone: string;
}

export interface GetMariadbDcnDetailDcnDetailReplicaConfig {
    delayReplicationType: string;
    dueTime: string;
    replicationDelay: number;
    roReplicationMode: string;
}

export interface GetMariadbDcnDetailDcnDetailReplicaStatus {
    delay: number;
    status: string;
}

export interface GetMariadbInstanceNodeInfoNodesInfo {
    nodeId: string;
    role: string;
}

export interface GetMariadbInstanceSpecsSpec {
    machine: string;
    specInfos: outputs.GetMariadbInstanceSpecsSpecSpecInfo[];
}

export interface GetMariadbInstanceSpecsSpecSpecInfo {
    cpu: number;
    machine: string;
    maxStorage: number;
    memory: number;
    minStorage: number;
    nodeCount: number;
    pid: number;
    qps: number;
    suitInfo: string;
}

export interface GetMariadbLogFilesFile {
    fileName: string;
    length: number;
    mtime: number;
    uri: string;
}

export interface GetMariadbOrdersDeal {
    count: number;
    dealName: string;
    flowId: number;
    instanceIds: string[];
    ownerUin: string;
    payMode: number;
}

export interface GetMariadbProjectSecurityGroupsGroup {
    createTime: string;
    inbounds: outputs.GetMariadbProjectSecurityGroupsGroupInbound[];
    outbounds: outputs.GetMariadbProjectSecurityGroupsGroupOutbound[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
    securityGroupRemark: string;
}

export interface GetMariadbProjectSecurityGroupsGroupInbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetMariadbProjectSecurityGroupsGroupOutbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetMariadbSaleInfoRegionList {
    availableChoices: outputs.GetMariadbSaleInfoRegionListAvailableChoice[];
    region: string;
    regionId: number;
    regionName: string;
    zoneLists: outputs.GetMariadbSaleInfoRegionListZoneList[];
}

export interface GetMariadbSaleInfoRegionListAvailableChoice {
    masterZones: outputs.GetMariadbSaleInfoRegionListAvailableChoiceMasterZone[];
    slaveZones: outputs.GetMariadbSaleInfoRegionListAvailableChoiceSlaveZone[];
}

export interface GetMariadbSaleInfoRegionListAvailableChoiceMasterZone {
    onSale: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
}

export interface GetMariadbSaleInfoRegionListAvailableChoiceSlaveZone {
    onSale: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
}

export interface GetMariadbSaleInfoRegionListZoneList {
    onSale: boolean;
    zone: string;
    zoneId: number;
    zoneName: string;
}

export interface GetMariadbSecurityGroupsList {
    createTime: string;
    inbounds: outputs.GetMariadbSecurityGroupsListInbound[];
    outbounds: outputs.GetMariadbSecurityGroupsListOutbound[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
    securityGroupRemark: string;
}

export interface GetMariadbSecurityGroupsListInbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetMariadbSecurityGroupsListOutbound {
    action: string;
    cidrIp: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetMariadbSlowLogsData {
    checkSum: string;
    db: string;
    exampleSql: string;
    fingerPrint: string;
    host: string;
    lockTimeAvg: string;
    lockTimeMax: string;
    lockTimeMin: string;
    lockTimeSum: string;
    queryCount: string;
    queryTimeAvg: string;
    queryTimeMax: string;
    queryTimeMin: string;
    queryTimeSum: string;
    rowsExaminedSum: string;
    rowsSentSum: string;
    tsMax: string;
    tsMin: string;
    user: string;
}

export interface GetMongodbInstanceBackupsBackupList {
    backupDesc: string;
    backupMethod: number;
    backupName: string;
    backupSize: number;
    backupType: number;
    endTime: string;
    instanceId: string;
    startTime: string;
    status: number;
}

export interface GetMongodbInstanceConnectionsClient {
    count: number;
    internalService: boolean;
    ip: string;
}

export interface GetMongodbInstanceCurrentOpCurrentOp {
    microsecsRunning: number;
    nodeName: string;
    ns: string;
    op: string;
    opId: number;
    operation: string;
    query: string;
    replicaSetName: string;
    state: string;
}

export interface GetMongodbInstanceParamsInstanceEnumParam {
    currentValue: string;
    defaultValue: string;
    enumValues: string[];
    needRestart: string;
    paramName: string;
    status: number;
    tips: string[];
    valueType: string;
}

export interface GetMongodbInstanceParamsInstanceIntegerParam {
    currentValue: string;
    defaultValue: string;
    max: string;
    min: string;
    needRestart: string;
    paramName: string;
    status: number;
    tips: string[];
    valueType: string;
}

export interface GetMongodbInstanceParamsInstanceMultiParam {
    currentValue: string;
    defaultValue: string;
    enumValues: string[];
    needRestart: string;
    paramName: string;
    status: number;
    tips: string[];
    valueType: string;
}

export interface GetMongodbInstanceParamsInstanceTextParam {
    currentValue: string;
    defaultValue: string;
    needRestart: string;
    paramName: string;
    status: string;
    textValue: string;
    tips: string[];
    valueType: string;
}

export interface GetMongodbInstancesInstanceList {
    autoRenewFlag: number;
    availableZone: string;
    chargeType: string;
    clusterType: string;
    cpu: number;
    createTime: string;
    engineVersion: string;
    instanceId: string;
    instanceName: string;
    machineType: string;
    memory: number;
    projectId: number;
    shardQuantity: number;
    status: number;
    subnetId: string;
    tags: {[key: string]: string};
    vip: string;
    volume: number;
    vpcId: string;
    vport: number;
}

export interface GetMongodbZoneConfigList {
    availableZone: string;
    clusterType: string;
    cpu: number;
    defaultStorage: number;
    engineVersion: string;
    machineType: string;
    maxReplicateSetNum: number;
    maxStorage: number;
    memory: number;
    minReplicateSetNum: number;
    minStorage: number;
}

export interface GetMonitorAlarmAllNamespacesCommonNamespace {
    dimensions: outputs.GetMonitorAlarmAllNamespacesCommonNamespaceDimension[];
    id: string;
    monitorType: string;
    name: string;
}

export interface GetMonitorAlarmAllNamespacesCommonNamespaceDimension {
    canFilterHistory: boolean;
    canFilterPolicy: boolean;
    canGroupBy: boolean;
    isMultiple: boolean;
    isMutable: boolean;
    isRequired: boolean;
    isVisible: boolean;
    key: string;
    mustGroupBy: boolean;
    name: string;
    operators: outputs.GetMonitorAlarmAllNamespacesCommonNamespaceDimensionOperator[];
    showValueReplace: string;
}

export interface GetMonitorAlarmAllNamespacesCommonNamespaceDimensionOperator {
    id: string;
    name: string;
}

export interface GetMonitorAlarmAllNamespacesCustomNamespacesNews {
    availableRegions: string[];
    config: string;
    dashboardId: string;
    id: string;
    name: string;
    productName: string;
    sortId: number;
    value: string;
}

export interface GetMonitorAlarmAllNamespacesQceNamespacesNews {
    availableRegions: string[];
    config: string;
    dashboardId: string;
    id: string;
    name: string;
    productName: string;
    sortId: number;
    value: string;
}

export interface GetMonitorAlarmBasicAlarmsAlarm {
    alarmStatus: string;
    alarmType: number;
    content: string;
    dimensions: string;
    duration: number;
    firstOccurTime: string;
    groupId: number;
    groupName: string;
    id: number;
    instanceGroups: outputs.GetMonitorAlarmBasicAlarmsAlarmInstanceGroup[];
    lastOccurTime: string;
    metricId: number;
    metricName: string;
    notifyWays: string[];
    objId: string;
    objName: string;
    projectId: number;
    projectName: string;
    region: string;
    status: number;
    viewName: string;
    vpc: string;
}

export interface GetMonitorAlarmBasicAlarmsAlarmInstanceGroup {
    instanceGroupId: number;
    instanceGroupName: string;
}

export interface GetMonitorAlarmBasicMetricMetricSet {
    dimensions: outputs.GetMonitorAlarmBasicMetricMetricSetDimension[];
    meanings: outputs.GetMonitorAlarmBasicMetricMetricSetMeaning[];
    metricCName: string;
    metricEName: string;
    metricName: string;
    namespace: string;
    period: number[];
    periods: outputs.GetMonitorAlarmBasicMetricMetricSetPeriod[];
    unit: string;
    unitCname: string;
}

export interface GetMonitorAlarmBasicMetricMetricSetDimension {
    dimensions: string[];
}

export interface GetMonitorAlarmBasicMetricMetricSetMeaning {
    en: string;
    zh: string;
}

export interface GetMonitorAlarmBasicMetricMetricSetPeriod {
    period: string;
    statTypes: string[];
}

export interface GetMonitorAlarmConditionsTemplateTemplateGroupList {
    conditions: outputs.GetMonitorAlarmConditionsTemplateTemplateGroupListCondition[];
    eventConditions: outputs.GetMonitorAlarmConditionsTemplateTemplateGroupListEventCondition[];
    groupId: number;
    groupName: string;
    insertTime: number;
    isUnionRule: number;
    lastEditUin: number;
    policyGroups: outputs.GetMonitorAlarmConditionsTemplateTemplateGroupListPolicyGroup[];
    remark: string;
    updateTime: number;
    viewName: string;
}

export interface GetMonitorAlarmConditionsTemplateTemplateGroupListCondition {
    alarmNotifyPeriod: number;
    alarmNotifyType: number;
    calcType: string;
    calcValue: string;
    continueTime: string;
    isAdvanced: number;
    isOpen: number;
    metricDisplayName: string;
    metricId: number;
    period: number;
    productId: string;
    ruleId: number;
    unit: string;
}

export interface GetMonitorAlarmConditionsTemplateTemplateGroupListEventCondition {
    alarmNotifyPeriod: string;
    alarmNotifyType: string;
    eventDisplayName: string;
    eventId: string;
    ruleId: string;
}

export interface GetMonitorAlarmConditionsTemplateTemplateGroupListPolicyGroup {
    canSetDefault: boolean;
    enable: boolean;
    groupId: number;
    groupName: string;
    insertTime: number;
    isDefault: number;
    isUnionRule: number;
    lastEditUin: number;
    noShieldedInstanceCount: number;
    parentGroupId: number;
    projectId: number;
    receiverInfos: outputs.GetMonitorAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfo[];
    remark: string;
    totalInstanceCount: number;
    updateTime: number;
    viewName: string;
}

export interface GetMonitorAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfo {
    endTime: number;
    needSendNotice: number;
    notifyWays: string[];
    personInterval: number;
    receiverGroupLists: number[];
    receiverType: string;
    receiverUserLists: number[];
    recoverNotifies: string[];
    roundInterval: number;
    roundNumber: number;
    sendFors: string[];
    startTime: number;
    uidLists: number[];
}

export interface GetMonitorAlarmHistoryHistory {
    alarmId: string;
    alarmLevel: string;
    alarmObject: string;
    alarmStatus: string;
    alarmType: string;
    content: string;
    dimensions: string;
    eventId: number;
    firstOccurTime: number;
    instanceGroups: outputs.GetMonitorAlarmHistoryHistoryInstanceGroup[];
    lastOccurTime: number;
    metricsInfos: outputs.GetMonitorAlarmHistoryHistoryMetricsInfo[];
    monitorType: string;
    namespace: string;
    noticeWays: string[];
    originId: string;
    policyExists: number;
    policyId: string;
    policyName: string;
    projectId: number;
    projectName: string;
    receiverGroups: number[];
    receiverUids: number[];
    region: string;
    vpc: string;
}

export interface GetMonitorAlarmHistoryHistoryInstanceGroup {
    id: number;
    name: string;
}

export interface GetMonitorAlarmHistoryHistoryMetricsInfo {
    description: string;
    metricName: string;
    period: number;
    qceNamespace: string;
    value: string;
}

export interface GetMonitorAlarmHistoryNamespace {
    /**
     * Monitor type.
     */
    monitorType: string;
    /**
     * Policy type.
     */
    namespace: string;
}

export interface GetMonitorAlarmMetricMetric {
    description: string;
    dimensions: string[];
    isAdvanced: number;
    isOpen: number;
    max: number;
    metricConfigs: outputs.GetMonitorAlarmMetricMetricMetricConfig[];
    metricName: string;
    min: number;
    namespace: string;
    operators: outputs.GetMonitorAlarmMetricMetricOperator[];
    periods: number[];
    productId: number;
    unit: string;
}

export interface GetMonitorAlarmMetricMetricMetricConfig {
    continuePeriods: number[];
    operators: string[];
    periods: number[];
}

export interface GetMonitorAlarmMetricMetricOperator {
    id: string;
    name: string;
}

export interface GetMonitorAlarmMonitorTypeMonitorTypeInfo {
    id: string;
    name: string;
    sortId: number;
}

export interface GetMonitorAlarmNoticeCallbacksUrlNotice {
    endTime: number;
    isValid: number;
    startTime: number;
    url: string;
    validationCode: string;
    weekdays: number[];
}

export interface GetMonitorAlarmNoticesAlarmNotice {
    ampConsumerId: string;
    clsNotices: outputs.GetMonitorAlarmNoticesAlarmNoticeClsNotice[];
    id: string;
    isPreset: number;
    name: string;
    noticeLanguage: string;
    noticeType: string;
    policyIds: string[];
    updatedAt: string;
    updatedBy: string;
    urlNotices: outputs.GetMonitorAlarmNoticesAlarmNoticeUrlNotice[];
    userNotices: outputs.GetMonitorAlarmNoticesAlarmNoticeUserNotice[];
}

export interface GetMonitorAlarmNoticesAlarmNoticeClsNotice {
    enable: number;
    logSetId: string;
    region: string;
    topicId: string;
}

export interface GetMonitorAlarmNoticesAlarmNoticeUrlNotice {
    endTime: number;
    startTime: number;
    url: string;
    weekdays: number[];
}

export interface GetMonitorAlarmNoticesAlarmNoticeUserNotice {
    endTime: number;
    groupIds: number[];
    needPhoneArriveNotice: number;
    noticeWays: string[];
    phoneCallType: string;
    phoneCircleInterval: number;
    phoneCircleTimes: number;
    phoneInnerInterval: number;
    phoneOrders: number[];
    receiverType: string;
    startTime: number;
    userIds: number[];
    weekdays: number[];
}

export interface GetMonitorAlarmPolicyPolicy {
    advancedMetricNumber: number;
    canSetDefault: number;
    conditionTemplateId: string;
    conditions: outputs.GetMonitorAlarmPolicyPolicyCondition[];
    conditionsTemps: outputs.GetMonitorAlarmPolicyPolicyConditionsTemp[];
    enable: number;
    eventConditions: outputs.GetMonitorAlarmPolicyPolicyEventCondition[];
    filterDimensionsParam: string;
    insertTime: number;
    instanceGroupId: number;
    instanceGroupName: string;
    instanceSum: number;
    isBindAll: number;
    isDefault: number;
    isOneClick: number;
    lastEditUin: string;
    monitorType: string;
    namespace: string;
    namespaceShowName: string;
    noticeIds: string[];
    notices: outputs.GetMonitorAlarmPolicyPolicyNotice[];
    oneClickStatus: number;
    originId: string;
    policyId: string;
    policyName: string;
    projectId: number;
    projectName: string;
    regions: string[];
    remark: string;
    ruleType: string;
    tagInstances: outputs.GetMonitorAlarmPolicyPolicyTagInstance[];
    tags: outputs.GetMonitorAlarmPolicyPolicyTag[];
    triggerTasks: outputs.GetMonitorAlarmPolicyPolicyTriggerTask[];
    updateTime: number;
    useSum: number;
}

export interface GetMonitorAlarmPolicyPolicyCondition {
    complexExpression: string;
    isUnionRule: number;
    rules: outputs.GetMonitorAlarmPolicyPolicyConditionRule[];
}

export interface GetMonitorAlarmPolicyPolicyConditionRule {
    continuePeriod: number;
    description: string;
    filters: outputs.GetMonitorAlarmPolicyPolicyConditionRuleFilter[];
    hierarchicalValues: outputs.GetMonitorAlarmPolicyPolicyConditionRuleHierarchicalValue[];
    isAdvanced: number;
    isOpen: number;
    isPowerNotice: number;
    metricName: string;
    noticeFrequency: number;
    operator: string;
    period: number;
    productId: string;
    ruleType: string;
    unit: string;
    value: string;
    valueMax: number;
    valueMin: number;
}

export interface GetMonitorAlarmPolicyPolicyConditionRuleFilter {
    dimensions: string;
    type: string;
}

export interface GetMonitorAlarmPolicyPolicyConditionRuleHierarchicalValue {
    remind: string;
    serious: string;
    warn: string;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTemp {
    conditions: outputs.GetMonitorAlarmPolicyPolicyConditionsTempCondition[];
    eventConditions: outputs.GetMonitorAlarmPolicyPolicyConditionsTempEventCondition[];
    templateName: string;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempCondition {
    complexExpression: string;
    isUnionRule: number;
    rules: outputs.GetMonitorAlarmPolicyPolicyConditionsTempConditionRule[];
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempConditionRule {
    continuePeriod: number;
    description: string;
    filters: outputs.GetMonitorAlarmPolicyPolicyConditionsTempConditionRuleFilter[];
    hierarchicalValues: outputs.GetMonitorAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValue[];
    isAdvanced: number;
    isOpen: number;
    isPowerNotice: number;
    metricName: string;
    noticeFrequency: number;
    operator: string;
    period: number;
    productId: string;
    ruleType: string;
    unit: string;
    value: string;
    valueMax: number;
    valueMin: number;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempConditionRuleFilter {
    dimensions: string;
    type: string;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValue {
    remind: string;
    serious: string;
    warn: string;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempEventCondition {
    rules: outputs.GetMonitorAlarmPolicyPolicyConditionsTempEventConditionRule[];
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempEventConditionRule {
    continuePeriod: number;
    description: string;
    filters: outputs.GetMonitorAlarmPolicyPolicyConditionsTempEventConditionRuleFilter[];
    hierarchicalValues: outputs.GetMonitorAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValue[];
    isAdvanced: number;
    isOpen: number;
    isPowerNotice: number;
    metricName: string;
    noticeFrequency: number;
    operator: string;
    period: number;
    productId: string;
    ruleType: string;
    unit: string;
    value: string;
    valueMax: number;
    valueMin: number;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempEventConditionRuleFilter {
    dimensions: string;
    type: string;
}

export interface GetMonitorAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValue {
    remind: string;
    serious: string;
    warn: string;
}

export interface GetMonitorAlarmPolicyPolicyEventCondition {
    rules: outputs.GetMonitorAlarmPolicyPolicyEventConditionRule[];
}

export interface GetMonitorAlarmPolicyPolicyEventConditionRule {
    continuePeriod: number;
    description: string;
    filters: outputs.GetMonitorAlarmPolicyPolicyEventConditionRuleFilter[];
    hierarchicalValues: outputs.GetMonitorAlarmPolicyPolicyEventConditionRuleHierarchicalValue[];
    isAdvanced: number;
    isOpen: number;
    isPowerNotice: number;
    metricName: string;
    noticeFrequency: number;
    operator: string;
    period: number;
    productId: string;
    ruleType: string;
    unit: string;
    value: string;
    valueMax: number;
    valueMin: number;
}

export interface GetMonitorAlarmPolicyPolicyEventConditionRuleFilter {
    dimensions: string;
    type: string;
}

export interface GetMonitorAlarmPolicyPolicyEventConditionRuleHierarchicalValue {
    remind: string;
    serious: string;
    warn: string;
}

export interface GetMonitorAlarmPolicyPolicyNotice {
    ampConsumerId: string;
    clsNotices: outputs.GetMonitorAlarmPolicyPolicyNoticeClsNotice[];
    id: string;
    isPreset: number;
    name: string;
    noticeLanguage: string;
    noticeType: string;
    policyIds: string[];
    tags: outputs.GetMonitorAlarmPolicyPolicyNoticeTag[];
    updatedAt: string;
    updatedBy: string;
    urlNotices: outputs.GetMonitorAlarmPolicyPolicyNoticeUrlNotice[];
    userNotices: outputs.GetMonitorAlarmPolicyPolicyNoticeUserNotice[];
}

export interface GetMonitorAlarmPolicyPolicyNoticeClsNotice {
    enable: number;
    logSetId: string;
    region: string;
    topicId: string;
}

export interface GetMonitorAlarmPolicyPolicyNoticeTag {
    key: string;
    value: string;
}

export interface GetMonitorAlarmPolicyPolicyNoticeUrlNotice {
    endTime: number;
    isValid: number;
    startTime: number;
    url: string;
    validationCode: string;
    weekdays: number[];
}

export interface GetMonitorAlarmPolicyPolicyNoticeUserNotice {
    endTime: number;
    groupIds: number[];
    needPhoneArriveNotice: number;
    noticeWays: string[];
    onCallFormIds: string[];
    phoneCallType: string;
    phoneCircleInterval: number;
    phoneCircleTimes: number;
    phoneInnerInterval: number;
    phoneOrders: number[];
    receiverType: string;
    startTime: number;
    userIds: number[];
    weekdays: number[];
}

export interface GetMonitorAlarmPolicyPolicyTag {
    key: string;
    value: string;
}

export interface GetMonitorAlarmPolicyPolicyTagInstance {
    bindingStatus: number;
    instanceSum: number;
    key: string;
    regionId: number;
    serviceType: string;
    tagStatus: number;
    value: string;
}

export interface GetMonitorAlarmPolicyPolicyTriggerTask {
    taskConfig: string;
    type: string;
}

export interface GetMonitorAlarmPolicyTriggerTask {
    /**
     * Configuration information in JSON format, such as {Key1:Value1,Key2:Value2}Note: this field may return null, indicating that no valid values can be obtained.
     */
    taskConfig: string;
    /**
     * Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
     */
    type: string;
}

export interface GetMonitorBindingObjectsList {
    dimensionsJson: string;
    isShielded: number;
    region: string;
    uniqueId: string;
}

export interface GetMonitorDataDimension {
    /**
     * Instance dimension name, eg: `InstanceId` for cvm.
     */
    name: string;
    /**
     * Instance dimension value, eg: `ins-j0hk02zo` for cvm.
     */
    value: string;
}

export interface GetMonitorDataList {
    timestamp: number;
    value: number;
}

export interface GetMonitorGrafanaPluginOverviewsPluginSet {
    pluginId: string;
    version: string;
}

export interface GetMonitorPolicyConditionsList {
    eventMetrics: outputs.GetMonitorPolicyConditionsListEventMetric[];
    isSupportMultiRegion: boolean;
    metrics: outputs.GetMonitorPolicyConditionsListMetric[];
    name: string;
    policyViewName: string;
    supportRegions: string[];
}

export interface GetMonitorPolicyConditionsListEventMetric {
    eventId: number;
    eventShowName: string;
    needRecovered: boolean;
}

export interface GetMonitorPolicyConditionsListMetric {
    calcTypeKeys: number[];
    calcTypeNeed: boolean;
    calcValueDefault: string;
    calcValueFixed: string;
    calcValueMax: string;
    calcValueMin: string;
    calcValueNeed: boolean;
    continueTimeDefault: number;
    continueTimeKeys: number[];
    continueTimeNeed: boolean;
    metricId: number;
    metricShowName: string;
    metricUnit: string;
    periodDefault: number;
    periodKeys: number[];
    periodNeed: boolean;
    periodNumDefault: number;
    periodNumKeys: number[];
    periodNumNeed: boolean;
    statTypeP10: string;
    statTypeP1800: string;
    statTypeP300: string;
    statTypeP3600: string;
    statTypeP5: string;
    statTypeP60: string;
    statTypeP600: string;
    statTypeP86400: string;
}

export interface GetMonitorPolicyGroupsList {
    canSetDefault: boolean;
    conditions: outputs.GetMonitorPolicyGroupsListCondition[];
    eventConditions: outputs.GetMonitorPolicyGroupsListEventCondition[];
    groupId: number;
    groupName: string;
    insertTime: number;
    isDefault: number;
    isOpen: boolean;
    lastEditUin: string;
    noShieldedSum: number;
    parentGroupId: number;
    policyViewName: string;
    projectId: number;
    receivers: outputs.GetMonitorPolicyGroupsListReceiver[];
    remark: string;
    updateTime: number;
    useSum: number;
}

export interface GetMonitorPolicyGroupsListCondition {
    alarmNotifyPeriod: number;
    alarmNotifyType: number;
    calcType: number;
    calcValue: string;
    continueTime: number;
    metricId: number;
    metricShowName: string;
    metricUnit: string;
    period: number;
    ruleId: number;
}

export interface GetMonitorPolicyGroupsListEventCondition {
    alarmNotifyPeriod: number;
    alarmNotifyType: number;
    eventId: number;
    eventShowName: string;
    ruleId: number;
}

export interface GetMonitorPolicyGroupsListReceiver {
    endTime: number;
    needSendNotice: number;
    notifyWays: string[];
    personInterval: number;
    receiveLanguage: string;
    receiverGroupLists: number[];
    receiverType: string;
    receiverUserLists: number[];
    recoverNotifies: string[];
    roundInterval: number;
    roundNumber: number;
    sendFors: string[];
    startTime: number;
    uidLists: number[];
}

export interface GetMonitorProductEventDimension {
    /**
     * Instance dimension name, eg: `deviceWanIp` for internet ip.
     */
    name?: string;
    /**
     * Instance dimension value, eg: `119.119.119.119` for internet ip.
     */
    value?: string;
}

export interface GetMonitorProductEventList {
    additionMsgs: outputs.GetMonitorProductEventListAdditionMsg[];
    dimensions: outputs.GetMonitorProductEventListDimension[];
    eventCname: string;
    eventEname: string;
    eventId: number;
    eventName: string;
    groupInfos: outputs.GetMonitorProductEventListGroupInfo[];
    instanceId: string;
    instanceName: string;
    isAlarmConfig: number;
    productCname: string;
    productEname: string;
    productName: string;
    projectId: string;
    region: string;
    startTime: number;
    status: string;
    supportAlarm: number;
    type: string;
    updateTime: number;
}

export interface GetMonitorProductEventListAdditionMsg {
    key: string;
    name: string;
    value: string;
}

export interface GetMonitorProductEventListDimension {
    key: string;
    name: string;
    value: string;
}

export interface GetMonitorProductEventListGroupInfo {
    groupId: string;
    groupName: string;
}

export interface GetMonitorProductNamespaceList {
    namespace: string;
    productChineseName: string;
    productName: string;
}

export interface GetMonitorStatisticDataCondition {
    /**
     * Dimension.
     */
    key: string;
    /**
     * Operator. Valid values: eq (equal to), ne (not equal to), in.
     */
    operator: string;
    /**
     * Dimension value. If Operator is eq or ne, only the first element will be used.
     */
    values: string[];
}

export interface GetMonitorStatisticDataData {
    metricName: string;
    points: outputs.GetMonitorStatisticDataDataPoint[];
}

export interface GetMonitorStatisticDataDataPoint {
    dimensions: outputs.GetMonitorStatisticDataDataPointDimension[];
    values: outputs.GetMonitorStatisticDataDataPointValue[];
}

export interface GetMonitorStatisticDataDataPointDimension {
    name: string;
    value: string;
}

export interface GetMonitorStatisticDataDataPointValue {
    timestamp: number;
    value: number;
}

export interface GetMonitorTmpInstancesInstanceSet {
    alertRuleLimit: number;
    apiRootPath: string;
    authToken: string;
    autoRenewFlag: number;
    chargeStatus: number;
    createdAt: string;
    dataRetentionTime: number;
    enableGrafana: number;
    expireTime: string;
    grafanaInstanceId: string;
    grafanaIpWhiteList: string;
    grafanaStatus: number;
    grafanaUrl: string;
    grants: outputs.GetMonitorTmpInstancesInstanceSetGrant[];
    instanceChargeType: number;
    instanceId: string;
    instanceName: string;
    instanceStatus: number;
    ipv4Address: string;
    isNearExpire: number;
    migrationType: number;
    proxyAddress: string;
    recordingRuleLimit: number;
    regionId: number;
    remoteWrite: string;
    specName: string;
    subnetId: string;
    tagSpecifications: outputs.GetMonitorTmpInstancesInstanceSetTagSpecification[];
    vpcId: string;
    zone: string;
}

export interface GetMonitorTmpInstancesInstanceSetGrant {
    hasAgentManage: number;
    hasApiOperation: number;
    hasChargeOperation: number;
    hasGrafanaStatusChange: number;
    hasTkeManage: number;
    hasVpcDisplay: number;
}

export interface GetMonitorTmpInstancesInstanceSetTagSpecification {
    key: string;
    value: string;
}

export interface GetMonitorTmpInstancesTagFilter {
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetMonitorTmpRegionsRegionSet {
    area: string;
    region: string;
    regionId: number;
    regionName: string;
    regionPayMode: number;
    regionShortName: string;
    regionState: number;
}

export interface GetMpsMediaMetaDataInputInfo {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.GetMpsMediaMetaDataInputInfoCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.GetMpsMediaMetaDataInputInfoS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address.`URL`: A URL.`AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.GetMpsMediaMetaDataInputInfoUrlInputInfo;
}

export interface GetMpsMediaMetaDataInputInfoCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface GetMpsMediaMetaDataInputInfoS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface GetMpsMediaMetaDataInputInfoUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface GetMpsMediaMetaDataMetaData {
    audioDuration: number;
    audioStreamSets: outputs.GetMpsMediaMetaDataMetaDataAudioStreamSet[];
    bitrate: number;
    container: string;
    duration: number;
    height: number;
    rotate: number;
    size: number;
    videoDuration: number;
    videoStreamSets: outputs.GetMpsMediaMetaDataMetaDataVideoStreamSet[];
    width: number;
}

export interface GetMpsMediaMetaDataMetaDataAudioStreamSet {
    bitrate: number;
    channel: number;
    codec: string;
    samplingRate: number;
}

export interface GetMpsMediaMetaDataMetaDataVideoStreamSet {
    bitrate: number;
    codec: string;
    colorPrimaries: string;
    colorSpace: string;
    colorTransfer: string;
    fps: number;
    hdrType: string;
    height: number;
    width: number;
}

export interface GetMpsSchedulesScheduleInfoSet {
    activities: outputs.GetMpsSchedulesScheduleInfoSetActivity[];
    createTime: string;
    outputDir: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetOutputStorage[];
    resourceId: string;
    scheduleId: number;
    scheduleName: string;
    status: string;
    taskNotifyConfigs: outputs.GetMpsSchedulesScheduleInfoSetTaskNotifyConfig[];
    triggers: outputs.GetMpsSchedulesScheduleInfoSetTrigger[];
    updateTime: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivity {
    activityParas: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityPara[];
    activityType: string;
    reardriveIndices: number[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityPara {
    adaptiveDynamicStreamingTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTask[];
    aiAnalysisTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTask[];
    aiContentReviewTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTask[];
    aiRecognitionTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTask[];
    animatedGraphicTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTask[];
    imageSpriteTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTask[];
    sampleSnapshotTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTask[];
    snapshotByTimeOffsetTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTask[];
    transcodeTasks: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTask[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTask {
    addOnSubtitles: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle[];
    definition: number;
    outputObjectPath: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage[];
    segmentObjectName: string;
    subStreamObjectName: string;
    watermarkSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle {
    subtitles: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet {
    definition: number;
    endTimeOffset: number;
    rawParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter[];
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter {
    coordinateOrigin: string;
    imageTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate[];
    type: string;
    xPos: string;
    yPos: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate {
    height: string;
    imageContents: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent[];
    repeatType: string;
    width: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTask {
    definition: number;
    extendedParameter: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTask {
    definition: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTask {
    definition: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTask {
    definition: number;
    endTimeOffset: number;
    outputObjectPath: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorage[];
    startTimeOffset: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTask {
    definition: number;
    objectNumberFormats: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormat[];
    outputObjectPath: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorage[];
    webVttObjectName: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormat {
    increment: number;
    initialValue: number;
    minLength: number;
    placeHolder: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTask {
    definition: number;
    objectNumberFormats: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormat[];
    outputObjectPath: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorage[];
    watermarkSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSet[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormat {
    increment: number;
    initialValue: number;
    minLength: number;
    placeHolder: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSet {
    definition: number;
    endTimeOffset: number;
    rawParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter[];
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter {
    coordinateOrigin: string;
    imageTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate[];
    type: string;
    xPos: string;
    yPos: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate {
    height: string;
    imageContents: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent[];
    repeatType: string;
    width: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTask {
    definition: number;
    extTimeOffsetSets: string[];
    objectNumberFormats: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat[];
    outputObjectPath: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage[];
    watermarkSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat {
    increment: number;
    initialValue: number;
    minLength: number;
    placeHolder: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet {
    definition: number;
    endTimeOffset: number;
    rawParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter[];
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter {
    coordinateOrigin: string;
    imageTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate[];
    type: string;
    xPos: string;
    yPos: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate {
    height: string;
    imageContents: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent[];
    repeatType: string;
    width: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTask {
    definition: number;
    endTimeOffset: number;
    headTailParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameter[];
    mosaicSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSet[];
    objectNumberFormats: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormat[];
    outputObjectPath: string;
    outputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorage[];
    overrideParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameter[];
    rawParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameter[];
    segmentObjectName: string;
    startTimeOffset: number;
    watermarkSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSet[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameter {
    headSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSet[];
    tailSets: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSet[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSet {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSet {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSet {
    coordinateOrigin: string;
    endTimeOffset: number;
    height: string;
    startTimeOffset: number;
    width: string;
    xPos: string;
    yPos: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormat {
    increment: number;
    initialValue: number;
    minLength: number;
    placeHolder: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameter {
    addOnSubtitles: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle[];
    addonAudioStreams: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream[];
    audioTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate[];
    container: string;
    removeAudio: number;
    removeVideo: number;
    stdExtInfo: string;
    subtitleTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate[];
    tehdConfigs: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfig[];
    videoTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle {
    subtitles: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate {
    audioChannel: number;
    bitrate: number;
    codec: string;
    sampleRate: number;
    streamSelects: number[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate {
    fontAlpha: number;
    fontColor: string;
    fontSize: string;
    fontType: string;
    path: string;
    streamIndex: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfig {
    maxVideoBitrate: number;
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate {
    bitrate: number;
    codec: string;
    contentAdaptStream: number;
    fillType: string;
    fps: number;
    gop: number;
    height: number;
    resolutionAdaptive: string;
    vcrf: number;
    width: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameter {
    audioTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplate[];
    container: string;
    removeAudio: number;
    removeVideo: number;
    tehdConfigs: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfig[];
    videoTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplate[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplate {
    audioChannel: number;
    bitrate: number;
    codec: string;
    sampleRate: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfig {
    maxVideoBitrate: number;
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplate {
    bitrate: number;
    codec: string;
    fillType: string;
    fps: number;
    gop: number;
    height: number;
    resolutionAdaptive: string;
    vcrf: number;
    width: number;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSet {
    definition: number;
    endTimeOffset: number;
    rawParameters: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameter[];
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameter {
    coordinateOrigin: string;
    imageTemplates: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate[];
    type: string;
    xPos: string;
    yPos: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate {
    height: string;
    imageContents: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent[];
    repeatType: string;
    width: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent {
    cosInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo[];
    s3InputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo[];
    type: string;
    urlInputInfos: outputs.GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo[];
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    bucket: string;
    object: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    s3Bucket: string;
    s3Object: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    url: string;
}

export interface GetMpsSchedulesScheduleInfoSetOutputStorage {
    cosOutputStorages: outputs.GetMpsSchedulesScheduleInfoSetOutputStorageCosOutputStorage[];
    s3OutputStorages: outputs.GetMpsSchedulesScheduleInfoSetOutputStorageS3OutputStorage[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetOutputStorageCosOutputStorage {
    bucket: string;
    region: string;
}

export interface GetMpsSchedulesScheduleInfoSetOutputStorageS3OutputStorage {
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetTaskNotifyConfig {
    awsSqs: outputs.GetMpsSchedulesScheduleInfoSetTaskNotifyConfigAwsSq[];
    cmqModel: string;
    cmqRegion: string;
    notifyMode: string;
    notifyType: string;
    notifyUrl: string;
    queueName: string;
    topicName: string;
}

export interface GetMpsSchedulesScheduleInfoSetTaskNotifyConfigAwsSq {
    s3SecretId: string;
    s3SecretKey: string;
    sqsQueueName: string;
    sqsRegion: string;
}

export interface GetMpsSchedulesScheduleInfoSetTrigger {
    awsS3FileUploadTriggers: outputs.GetMpsSchedulesScheduleInfoSetTriggerAwsS3FileUploadTrigger[];
    cosFileUploadTriggers: outputs.GetMpsSchedulesScheduleInfoSetTriggerCosFileUploadTrigger[];
    type: string;
}

export interface GetMpsSchedulesScheduleInfoSetTriggerAwsS3FileUploadTrigger {
    awsSqs: outputs.GetMpsSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSq[];
    dir: string;
    formats: string[];
    s3Bucket: string;
    s3Region: string;
    s3SecretId: string;
    s3SecretKey: string;
}

export interface GetMpsSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSq {
    s3SecretId: string;
    s3SecretKey: string;
    sqsQueueName: string;
    sqsRegion: string;
}

export interface GetMpsSchedulesScheduleInfoSetTriggerCosFileUploadTrigger {
    bucket: string;
    dir: string;
    formats: string[];
    region: string;
}

export interface GetMpsTasksTaskSet {
    beginProcessTime: string;
    createTime: string;
    finishTime: string;
    subTaskTypes: string[];
    taskId: string;
    taskType: string;
}

export interface GetMysqlBackupListList {
    backupId: number;
    backupModel: string;
    creator: string;
    finishTime: string;
    internetUrl: string;
    intranetUrl: string;
    size: number;
    time: string;
}

export interface GetMysqlBackupSummariesItem {
    autoBackupCount: number;
    autoBackupVolume: number;
    backupVolume: number;
    binlogBackupCount: number;
    binlogBackupVolume: number;
    dataBackupCount: number;
    dataBackupVolume: number;
    instanceId: string;
    manualBackupCount: number;
    manualBackupVolume: number;
}

export interface GetMysqlBinLogItem {
    binlogFinishTime: string;
    binlogStartTime: string;
    cosStorageType: number;
    date: string;
    instanceId: string;
    internetUrl: string;
    intranetUrl: string;
    name: string;
    region: string;
    remoteInfos: outputs.GetMysqlBinLogItemRemoteInfo[];
    size: number;
    status: string;
    type: string;
}

export interface GetMysqlBinLogItemRemoteInfo {
    finishTime: string;
    region: string;
    startTime: string;
    status: string;
    subBackupIds: number[];
    url: string;
}

export interface GetMysqlCloneListItem {
    cloneJobId: number;
    dstInstanceId: string;
    endTime: string;
    newRegionId: number;
    rollbackStrategy: string;
    rollbackTargetTime: string;
    srcInstanceId: string;
    srcRegionId: number;
    startTime: string;
    taskStatus: string;
}

export interface GetMysqlDatabasesDatabaseList {
    characterSet: string;
    databaseName: string;
}

export interface GetMysqlDefaultParamsParamList {
    currentValue: string;
    default: string;
    description: string;
    enumValues: string[];
    max: number;
    min: number;
    name: string;
    needReboot: number;
    paramType: string;
}

export interface GetMysqlErrorLogItem {
    content: string;
    timestamp: number;
}

export interface GetMysqlInstanceInstanceList {
    autoRenewFlag: number;
    chargeType: string;
    cpuCoreCount: number;
    createTime: string;
    deadLineTime: string;
    deviceType: string;
    drInstanceIds: string[];
    engineVersion: string;
    initFlag: number;
    instanceName: string;
    instanceRole: string;
    internetHost: string;
    internetPort: number;
    internetStatus: number;
    intranetIp: string;
    intranetPort: number;
    masterInstanceId: string;
    memorySize: number;
    mysqlId: string;
    payType: number;
    projectId: number;
    roGroups: outputs.GetMysqlInstanceInstanceListRoGroup[];
    roInstanceIds: string[];
    slaveSyncMode: number;
    status: number;
    subnetId: string;
    volumeSize: number;
    vpcId: string;
    zone: string;
}

export interface GetMysqlInstanceInstanceListRoGroup {
    groupId: string;
    instanceIds: string[];
}

export interface GetMysqlInstanceParamRecordItem {
    instanceId: string;
    isSuccess: boolean;
    modifyTime: string;
    newValue: string;
    oldValue: string;
    paramName: string;
}

export interface GetMysqlInstanceRebootTimeItem {
    instanceId: string;
    timeInSeconds: number;
}

export interface GetMysqlParameterListParameterList {
    currentValue: string;
    defaultValue: string;
    description: string;
    enumValues: string[];
    max: number;
    min: number;
    needReboot: number;
    parameterName: string;
    parameterType: string;
}

export interface GetMysqlProjectSecurityGroupGroup {
    createTime: string;
    inbounds: outputs.GetMysqlProjectSecurityGroupGroupInbound[];
    outbounds: outputs.GetMysqlProjectSecurityGroupGroupOutbound[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
    securityGroupRemark: string;
}

export interface GetMysqlProjectSecurityGroupGroupInbound {
    action: string;
    cidrIp: string;
    desc: string;
    dir: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetMysqlProjectSecurityGroupGroupOutbound {
    action: string;
    cidrIp: string;
    desc: string;
    dir: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetMysqlProxyCustomCustomConf {
    cpu: number;
    device: string;
    deviceType: string;
    memory: number;
    type: string;
}

export interface GetMysqlProxyCustomWeightRule {
    lessThan: number;
    weight: number;
}

export interface GetMysqlRollbackRangeTimeItem {
    code: number;
    instanceId: string;
    message: string;
    times: outputs.GetMysqlRollbackRangeTimeItemTime[];
}

export interface GetMysqlRollbackRangeTimeItemTime {
    begin: string;
    end: string;
}

export interface GetMysqlSlowLogDataItem {
    database: string;
    lockTime: number;
    md5: string;
    queryTime: number;
    rowsExamined: number;
    rowsSent: number;
    sqlTemplate: string;
    sqlText: string;
    timestamp: number;
    userHost: string;
    userName: string;
}

export interface GetMysqlSlowLogItem {
    date: string;
    internetUrl: string;
    intranetUrl: string;
    name: string;
    size: number;
    type: string;
}

export interface GetMysqlSwitchRecordItem {
    switchTime: string;
    switchType: string;
}

export interface GetMysqlUserTaskItem {
    asyncRequestId: string;
    code: number;
    endTime: string;
    instanceIds: string[];
    jobId: number;
    message: string;
    progress: number;
    startTime: string;
    taskStatus: string;
    taskType: string;
}

export interface GetMysqlZoneConfigList {
    disasterRecoveryZones: string[];
    engineVersions: string[];
    firstSlaveZones: string[];
    hourInstanceSaleMaxNum: number;
    isDefault: number;
    isSupportDisasterRecovery: number;
    isSupportVpc: number;
    name: string;
    payTypes: number[];
    remoteRoZones: string[];
    secondSlaveZones: string[];
    sells: outputs.GetMysqlZoneConfigListSell[];
    slaveDeployModes: number[];
    supportSlaveSyncModes: number[];
}

export interface GetMysqlZoneConfigListSell {
    cdbType: string;
    cpu: number;
    info: string;
    maxVolumeSize: number;
    memSize: number;
    minVolumeSize: number;
    qps: number;
    volumeStep: number;
}

export interface GetNatDcRouteNatDirectConnectGatewayRouteSet {
    createTime: string;
    destinationCidrBlock: string;
    gatewayId: string;
    gatewayType: string;
    updateTime: string;
}

export interface GetNatGatewaySnatsSnatList {
    createTime: string;
    description: string;
    instanceId: string;
    instancePrivateIpAddr: string;
    natGatewayId: string;
    publicIpAddrs: string[];
    resourceType: string;
    snatId: string;
    subnetCidrBlock: string;
    subnetId: string;
}

export interface GetNatGatewaysNat {
    assignedEipSets: string[];
    bandwidth: number;
    createTime: string;
    id: string;
    maxConcurrent: number;
    name: string;
    state: string;
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetNatsNat {
    assignedEipSets: string[];
    bandwidth: number;
    createTime: string;
    id: string;
    maxConcurrent: number;
    name: string;
    state: number;
    vpcId: string;
}

export interface GetOceanusClustersClusterSet {
    appId: number;
    archGeneration: number;
    autoRenewFlag: number;
    ccns: outputs.GetOceanusClustersClusterSetCcn[];
    clsLogName: string;
    clsLogSet: string;
    clsTopicId: string;
    clsTopicName: string;
    clusterId: string;
    clusterSessions: outputs.GetOceanusClustersClusterSetClusterSession[];
    clusterType: number;
    correlations: outputs.GetOceanusClustersClusterSetCorrelation[];
    createTime: string;
    creatorUin: string;
    cuMem: number;
    cuNum: number;
    customizedDnsEnabled: number;
    defaultCosBucket: string;
    defaultLogCollectConf: string;
    expireTime: string;
    freeCu: number;
    freeCuNum: number;
    isNeedManageNode: number;
    isolatedTime: string;
    name: string;
    netEnvironmentType: number;
    orders: outputs.GetOceanusClustersClusterSetOrder[];
    ownerUin: string;
    payMode: number;
    region: string;
    remark: string;
    runningCu: number;
    secondsUntilExpiry: string;
    sqlGateways: outputs.GetOceanusClustersClusterSetSqlGateway[];
    status: number;
    statusDesc: string;
    tags: outputs.GetOceanusClustersClusterSetTag[];
    updateTime: string;
    versions: outputs.GetOceanusClustersClusterSetVersion[];
    zone: string;
}

export interface GetOceanusClustersClusterSetCcn {
    ccnId: string;
    subnetId: string;
    vpcId: string;
}

export interface GetOceanusClustersClusterSetClusterSession {
}

export interface GetOceanusClustersClusterSetCorrelation {
    clusterGroupId: number;
    clusterGroupSerialId: string;
    clusterName: string;
    projectId: number;
    projectIdStr: string;
    status: number;
    workSpaceId: string;
    workSpaceName: string;
}

export interface GetOceanusClustersClusterSetOrder {
    autoRenewFlag: number;
    computeCu: number;
    operateUin: string;
    orderTime: string;
    type: number;
}

export interface GetOceanusClustersClusterSetSqlGateway {
    createTime: string;
    creatorUin: string;
    cuSpec: number;
    flinkVersion: string;
    properties: outputs.GetOceanusClustersClusterSetSqlGatewayProperty[];
    resourceRefs: outputs.GetOceanusClustersClusterSetSqlGatewayResourceRef[];
    serialId: string;
    status: number;
    updateTime: string;
}

export interface GetOceanusClustersClusterSetSqlGatewayProperty {
    key: string;
    value: string;
}

export interface GetOceanusClustersClusterSetSqlGatewayResourceRef {
    resourceId: string;
    type: number;
    version: number;
    workspaceId: string;
}

export interface GetOceanusClustersClusterSetTag {
    tagKey: string;
    tagValue: string;
}

export interface GetOceanusClustersClusterSetVersion {
    flink: string;
    supportedFlinks: string[];
}

export interface GetOceanusClustersFilter {
    /**
     * The field to be filtered.
     */
    name: string;
    /**
     * The filtering values of the field.
     */
    values: string[];
}

export interface GetOceanusJobEventsEvent {
    description: string;
    message: string;
    runningOrderId: number;
    solutionLink: string;
    timestamp: number;
    type: string;
}

export interface GetOceanusJobSubmissionLogJobInstanceList {
    jobInstanceStartTime: string;
    runningOrderId: number;
    startingMillis: number;
}

export interface GetOceanusJobSubmissionLogLogContentList {
    containerName: string;
    log: string;
    pkgId: string;
    pkgLogId: number;
    time: number;
}

export interface GetOceanusResourceRelatedJobRefJobInfo {
    jobConfigVersion: number;
    jobId: string;
    resourceVersion: number;
}

export interface GetOceanusSavepointListSavepoint {
    createTime: number;
    description: string;
    id: number;
    jobRuntimeId: number;
    path: string;
    pathStatus: number;
    recordType: number;
    serialId: string;
    size: number;
    status: number;
    timeConsuming: number;
    timeout: number;
    updateTime: number;
    versionId: number;
}

export interface GetOceanusSystemResourceFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter values for the field.
     */
    values: string[];
}

export interface GetOceanusSystemResourceResourceSet {
    latestResourceConfigVersion: number;
    name: string;
    region: string;
    remark: string;
    resourceId: string;
    resourceType: number;
}

export interface GetOceanusTreeJobsFilter {
    /**
     * Field to be filtered. Can only be set `Zone` or `JobType` or `JobStatus`.
     */
    name: string;
    /**
     * Filter values for the field.
     */
    values: string[];
}

export interface GetOceanusTreeJobsTreeInfo {
    children: string;
    id: string;
    jobSets: outputs.GetOceanusTreeJobsTreeInfoJobSet[];
    name: string;
    parentId: string;
}

export interface GetOceanusTreeJobsTreeInfoJobSet {
    jobId: string;
    jobType: number;
    name: string;
    runningCu: number;
    status: number;
}

export interface GetOceanusTreeResourcesTreeInfo {
    children: string;
    id: string;
    items: outputs.GetOceanusTreeResourcesTreeInfoItem[];
    name: string;
    parentId: string;
}

export interface GetOceanusTreeResourcesTreeInfoItem {
    fileName: string;
    folderId: string;
    name: string;
    refJobStatusCountSets: outputs.GetOceanusTreeResourcesTreeInfoItemRefJobStatusCountSet[];
    remark: string;
    resourceId: string;
    resourceType: number;
}

export interface GetOceanusTreeResourcesTreeInfoItemRefJobStatusCountSet {
    count: number;
    jobStatus: number;
}

export interface GetOceanusWorkSpacesFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter values for the field.
     */
    values: string[];
}

export interface GetOceanusWorkSpacesWorkSpaceSetItem {
    appId: number;
    clusterGroupSetItems: outputs.GetOceanusWorkSpacesWorkSpaceSetItemClusterGroupSetItem[];
    createTime: string;
    creatorUin: string;
    description: string;
    jobsCount: number;
    ownerUin: string;
    region: string;
    roleAuthCount: number;
    roleAuths: outputs.GetOceanusWorkSpacesWorkSpaceSetItemRoleAuth[];
    serialId: string;
    status: number;
    updateTime: string;
    workSpaceId: string;
    workSpaceName: string;
}

export interface GetOceanusWorkSpacesWorkSpaceSetItemClusterGroupSetItem {
    appId: number;
    clusterId: string;
    createTime: string;
    creatorUin: string;
    cuMem: number;
    cuNum: number;
    freeCu: number;
    freeCuNum: number;
    name: string;
    netEnvironmentType: number;
    ownerUin: string;
    payMode: number;
    region: string;
    remark: string;
    runningCu: number;
    status: number;
    statusDesc: string;
    updateTime: string;
    zone: string;
}

export interface GetOceanusWorkSpacesWorkSpaceSetItemRoleAuth {
    appId: number;
    authSubAccountUin: string;
    createTime: string;
    creatorUin: string;
    id: number;
    ownerUin: string;
    permission: number;
    roleName: string;
    status: number;
    updateTime: string;
    workSpaceId: number;
    workSpaceSerialId: string;
}

export interface GetOrganizationMembersItem {
    bindStatus: string;
    createTime: string;
    isAllowQuit: string;
    memberType: string;
    memberUin: number;
    name: string;
    nodeId: number;
    nodeName: string;
    orgIdentities: outputs.GetOrganizationMembersItemOrgIdentity[];
    orgPermissions: outputs.GetOrganizationMembersItemOrgPermission[];
    orgPolicyName: string;
    orgPolicyType: string;
    payName: string;
    payUin: string;
    permissionStatus: string;
    remark: string;
    updateTime: string;
}

export interface GetOrganizationMembersItemOrgIdentity {
    identityAliasName: string;
    identityId: number;
}

export interface GetOrganizationMembersItemOrgPermission {
    id: number;
    name: string;
}

export interface GetOrganizationOrgAuthNodeItem {
    authName: string;
    managers: outputs.GetOrganizationOrgAuthNodeItemManager[];
    relationId: number;
}

export interface GetOrganizationOrgAuthNodeItemManager {
    memberName: string;
    memberUin: number;
}

export interface GetOrganizationOrgFinancialByMemberItem {
    memberName: string;
    memberUin: number;
    ratio: string;
    totalCost: number;
}

export interface GetOrganizationOrgFinancialByMonthItem {
    growthRate: string;
    id: number;
    month: string;
    totalCost: number;
}

export interface GetOrganizationOrgFinancialByProductItem {
    productCode: string;
    productName: string;
    ratio: string;
    totalCost: number;
}

export interface GetOrganizationOrgShareAreaItem {
    area: string;
    areaId: number;
    name: string;
}

export interface GetOrganizationServicesItem {
    canAssignCount: number;
    consoleUrl: string;
    description: string;
    document: string;
    grantStatus: string;
    isAssign: number;
    isSetManagementScope: number;
    isUsageStatus: number;
    memberNum: string;
    product: string;
    productName: string;
    serviceGrant: number;
    serviceId: number;
}

export interface GetPlacementGroupsPlacementGroupList {
    createTime: string;
    currentNum: number;
    cvmQuotaTotal: number;
    instanceIds: string[];
    name: string;
    placementGroupId: string;
    type: string;
}

export interface GetPostgresqlBackupDownloadUrlsBackupDownloadRestriction {
    /**
     * Whether IP is allowed. Valid values: `ALLOW` (allow), `DENY` (deny).
     */
    ipRestrictionEffect?: string;
    /**
     * Whether it is allowed to download IP list of the backup files.
     */
    ipSets?: string[];
    /**
     * Type of the network restrictions for downloading backup files. Valid values: `NONE` (backups can be downloaded over both private and public networks), `INTRANET` (backups can only be downloaded over the private network), `CUSTOMIZE` (backups can be downloaded over specified VPCs or at specified IPs).
     */
    restrictionType?: string;
    /**
     * Whether it is allowed to download the VPC ID list of the backup files.
     */
    vpcIdSets?: string[];
    /**
     * Whether VPC is allowed. Valid values: `ALLOW` (allow), `DENY` (deny).
     */
    vpcRestrictionEffect?: string;
}

export interface GetPostgresqlBaseBackupsBaseBackupSet {
    backupMethod: string;
    backupMode: string;
    dbInstanceId: string;
    expireTime: string;
    finishTime: string;
    id: string;
    name: string;
    size: number;
    startTime: string;
    state: string;
}

export interface GetPostgresqlBaseBackupsFilter {
    /**
     * Filter name.
     */
    name?: string;
    /**
     * One or more filter values.
     */
    values?: string[];
}

export interface GetPostgresqlDbInstanceClassesClassInfoSet {
    cpu: number;
    maxStorage: number;
    memory: number;
    minStorage: number;
    qps: number;
    specCode: string;
}

export interface GetPostgresqlDbInstanceVersionsVersionSet {
    availableUpgradeTargets: string[];
    dbEngine: string;
    dbKernelVersion: string;
    dbMajorVersion: string;
    dbVersion: string;
    status: string;
    supportedFeatureNames: string[];
}

export interface GetPostgresqlDefaultParametersParamInfoSet {
    advanced: boolean;
    classificationCn: string;
    classificationEn: string;
    currentValue: string;
    defaultValue: string;
    enumValues: string[];
    id: number;
    lastModifyTime: string;
    max: number;
    min: number;
    name: string;
    needReboot: boolean;
    paramDescriptionCh: string;
    paramDescriptionEn: string;
    paramValueType: string;
    specRelated: boolean;
    specRelationSets: outputs.GetPostgresqlDefaultParametersParamInfoSetSpecRelationSet[];
    standbyRelated: number;
    unit: string;
    versionRelationSets: outputs.GetPostgresqlDefaultParametersParamInfoSetVersionRelationSet[];
}

export interface GetPostgresqlDefaultParametersParamInfoSetSpecRelationSet {
    enumValues: string[];
    max: number;
    memory: string;
    min: number;
    name: string;
    unit: string;
    value: string;
}

export interface GetPostgresqlDefaultParametersParamInfoSetVersionRelationSet {
    dbKernelVersion: string;
    enumValues: string[];
    max: number;
    min: number;
    name: string;
    unit: string;
    value: string;
}

export interface GetPostgresqlInstancesInstanceList {
    autoRenewFlag: number;
    availabilityZone: string;
    chargeType: string;
    charset: string;
    createTime: string;
    engineVersion: string;
    id: string;
    memory: number;
    name: string;
    privateAccessIp: string;
    privateAccessPort: number;
    projectId: number;
    publicAccessHost: string;
    publicAccessPort: number;
    publicAccessSwitch: boolean;
    rootUser: string;
    storage: number;
    subnetId: string;
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetPostgresqlLogBackupsFilter {
    /**
     * Filter name.
     */
    name?: string;
    /**
     * One or more filter values.
     */
    values?: string[];
}

export interface GetPostgresqlLogBackupsLogBackupSet {
    backupMethod: string;
    backupMode: string;
    dbInstanceId: string;
    expireTime: string;
    finishTime: string;
    id: string;
    name: string;
    size: number;
    startTime: string;
    state: string;
}

export interface GetPostgresqlParameterTemplatesFilter {
    /**
     * Filter name.
     */
    name?: string;
    /**
     * One or more filter values.
     */
    values?: string[];
}

export interface GetPostgresqlParameterTemplatesList {
    dbEngine: string;
    dbMajorVersion: string;
    templateDescription: string;
    templateId: string;
    templateName: string;
}

export interface GetPostgresqlReadonlyGroupsFilter {
    /**
     * Filter name.
     */
    name?: string;
    /**
     * One or more filter values.
     */
    values?: string[];
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupList {
    dbInstanceNetInfos: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListDbInstanceNetInfo[];
    masterDbInstanceId: string;
    maxReplayLag: number;
    maxReplayLatency: number;
    minDelayEliminateReserve: number;
    networkAccessLists: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListNetworkAccessList[];
    projectId: number;
    readOnlyDbInstanceLists: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceList[];
    readOnlyGroupId: string;
    readOnlyGroupName: string;
    rebalance: number;
    region: string;
    replayLagEliminate: number;
    replayLatencyEliminate: number;
    status: string;
    subnetId: string;
    vpcId: string;
    zone: string;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListDbInstanceNetInfo {
    address: string;
    ip: string;
    netType: string;
    port: number;
    protocolType: string;
    status: string;
    subnetId: string;
    vpcId: string;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListNetworkAccessList {
    resourceId: string;
    resourceType: number;
    subnetId: string;
    vip: string;
    vip6: string;
    vpcId: string;
    vpcStatus: number;
    vport: number;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceList {
    appId: number;
    autoRenew: number;
    createTime: string;
    dbCharset: string;
    dbEngine: string;
    dbEngineConfig: string;
    dbInstanceClass: string;
    dbInstanceCpu: number;
    dbInstanceId: string;
    dbInstanceMemory: number;
    dbInstanceName: string;
    dbInstanceNetInfos: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbInstanceNetInfo[];
    dbInstanceStatus: string;
    dbInstanceStorage: number;
    dbInstanceType: string;
    dbInstanceVersion: string;
    dbKernelVersion: string;
    dbMajorVersion: string;
    dbNodeSets: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbNodeSet[];
    dbVersion: string;
    expireTime: string;
    isSupportTDE: number;
    isolatedTime: string;
    masterDbInstanceId: string;
    networkAccessLists: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListNetworkAccessList[];
    offlineTime: string;
    payType: string;
    projectId: number;
    readOnlyInstanceNum: number;
    region: string;
    statusInReadonlyGroup: string;
    subnetId: string;
    supportIpv6: number;
    tagLists: outputs.GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListTagList[];
    type: string;
    uid: number;
    updateTime: string;
    vpcId: string;
    zone: string;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbInstanceNetInfo {
    address: string;
    ip: string;
    netType: string;
    port: number;
    protocolType: string;
    status: string;
    subnetId: string;
    vpcId: string;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbNodeSet {
    role: string;
    zone: string;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListNetworkAccessList {
    resourceId: string;
    resourceType: number;
    subnetId: string;
    vip: string;
    vip6: string;
    vpcId: string;
    vpcStatus: number;
    vport: number;
}

export interface GetPostgresqlReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListTagList {
    tagKey: string;
    tagValue: string;
}

export interface GetPostgresqlRegionsRegionSet {
    region: string;
    regionId: number;
    regionName: string;
    regionState: string;
    supportInternational: number;
}

export interface GetPostgresqlSpecinfosList {
    cpu: number;
    engineVersion: string;
    engineVersionName: string;
    id: string;
    memory: number;
    qps: number;
    storageMax: number;
    storageMin: number;
}

export interface GetPostgresqlXlogsList {
    endTime: string;
    externalAddr: string;
    id: number;
    internalAddr: string;
    size: number;
    startTime: string;
}

export interface GetPostgresqlZonesZoneSet {
    standbyZoneSets: string[];
    zone: string;
    zoneId: number;
    zoneName: string;
    zoneState: string;
    zoneSupportIpv6: number;
}

export interface GetPrivateDnsPrivateZoneListFilter {
    /**
     * name.
     */
    name: string;
    /**
     * values.
     */
    values: string[];
}

export interface GetPrivateDnsPrivateZoneListPrivateZoneSet {
    accountVpcSets: outputs.GetPrivateDnsPrivateZoneListPrivateZoneSetAccountVpcSet[];
    cnameSpeedupStatus: string;
    createdOn: string;
    deletedVpcSets: outputs.GetPrivateDnsPrivateZoneListPrivateZoneSetDeletedVpcSet[];
    dnsForwardStatus: string;
    domain: string;
    endPointName: string;
    forwardAddress: string;
    forwardRuleName: string;
    forwardRuleType: string;
    isCustomTld: boolean;
    ownerUin: number;
    recordCount: number;
    remark: string;
    status: string;
    tags: outputs.GetPrivateDnsPrivateZoneListPrivateZoneSetTag[];
    updatedOn: string;
    vpcSets: outputs.GetPrivateDnsPrivateZoneListPrivateZoneSetVpcSet[];
    zoneId: string;
}

export interface GetPrivateDnsPrivateZoneListPrivateZoneSetAccountVpcSet {
    region: string;
    uin: string;
    uniqVpcId: string;
}

export interface GetPrivateDnsPrivateZoneListPrivateZoneSetDeletedVpcSet {
    region: string;
    uniqVpcId: string;
}

export interface GetPrivateDnsPrivateZoneListPrivateZoneSetTag {
    tagKey: string;
    tagValue: string;
}

export interface GetPrivateDnsPrivateZoneListPrivateZoneSetVpcSet {
    region: string;
    uniqVpcId: string;
}

export interface GetPrivateDnsRecordsFilter {
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter values.
     */
    values: string[];
}

export interface GetPrivateDnsRecordsRecordSet {
    createdOn: string;
    enabled: number;
    extra: string;
    mx: number;
    recordId: string;
    recordType: string;
    recordValue: string;
    status: string;
    subDomain: string;
    ttl: number;
    updatedOn: string;
    weight: number;
    zoneId: string;
}

export interface GetProjectsProject {
    createTime: string;
    creatorUin: number;
    projectId: number;
    projectInfo: string;
    projectName: string;
}

export interface GetProtocolTemplateGroupsGroupList {
    id: string;
    name: string;
    templateIds: string[];
}

export interface GetProtocolTemplatesTemplateList {
    id: string;
    name: string;
    protocols: string[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSet {
    jobs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJob[];
    scenarios: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenario[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJob {
    abortReason: number;
    configs: string[];
    createdAt: string;
    cronId: string;
    datasets: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobDataset[];
    debug: boolean;
    domainNameConfigs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobDomainNameConfig[];
    duration: number;
    endTime: string;
    errorRate: number;
    extensions: string[];
    jobId: string;
    jobOwner: string;
    loadSourceInfos: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadSourceInfo[];
    loadSources: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadSource[];
    loads: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoad[];
    maxRequestsPerSecond: number;
    maxVirtualUserCount: number;
    message: string;
    networkReceiveRate: number;
    networkSendRate: number;
    note: string;
    notificationHooks: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobNotificationHook[];
    plugins: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobPlugin[];
    projectId: string;
    projectName: string;
    protocols: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobProtocol[];
    requestFiles: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobRequestFile[];
    requestTotal: number;
    requestsPerSecond: number;
    responseTimeAverage: number;
    responseTimeMax: number;
    responseTimeMin: number;
    responseTimeP90: number;
    responseTimeP95: number;
    responseTimeP99: number;
    scenarioId: string;
    scenarioName: string;
    scripts: string[];
    startTime: string;
    status: number;
    testScripts: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobTestScript[];
    type: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobDataset {
    fileId: string;
    headLines: string[];
    headerColumns: string[];
    headerInFile: boolean;
    lineCount: number;
    name: string;
    size: number;
    split: boolean;
    tailLines: string[];
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobDomainNameConfig {
    dnsConfigs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobDomainNameConfigDnsConfig[];
    hostAliases: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobDomainNameConfigHostAlias[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobDomainNameConfigDnsConfig {
    nameservers: string[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobDomainNameConfigHostAlias {
    hostNames: string[];
    ip: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoad {
    geoRegionsLoadDistributions: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadGeoRegionsLoadDistribution[];
    loadSpecs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpec[];
    vpcLoadDistributions: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadVpcLoadDistribution[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadGeoRegionsLoadDistribution {
    percentage: number;
    region: string;
    regionId: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpec {
    concurrencies: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecConcurrency[];
    requestsPerSeconds: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecRequestsPerSecond[];
    scriptOrigins: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecScriptOrigin[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecConcurrency {
    gracefulStopSeconds: number;
    iterationCount: number;
    maxRequestsPerSecond: number;
    resources: number;
    stages: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecConcurrencyStage[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecConcurrencyStage {
    durationSeconds: number;
    targetVirtualUsers: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecRequestsPerSecond {
    durationSeconds: number;
    gracefulStopSeconds: number;
    maxRequestsPerSecond: number;
    resources: number;
    startRequestsPerSecond: number;
    targetRequestsPerSecond: number;
    targetVirtualUsers: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadLoadSpecScriptOrigin {
    durationSeconds: number;
    machineNumber: number;
    machineSpecification: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadSource {
    ip: string;
    podName: string;
    region: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadSourceInfo {
    ip: string;
    podName: string;
    region: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobLoadVpcLoadDistribution {
    region: string;
    regionId: number;
    subnetIds: string[];
    vpcId: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobNotificationHook {
    events: string[];
    url: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobPlugin {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobProtocol {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobRequestFile {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetJobTestScript {
    encodedContent: string;
    encodedHttpArchive: string;
    fileId: string;
    loadWeight: number;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenario {
    appId: number;
    configs: string[];
    createdAt: string;
    cronId: string;
    datasets: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDataset[];
    description: string;
    domainNameConfigs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDomainNameConfig[];
    encodedScripts: string;
    extensions: string[];
    loads: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoad[];
    name: string;
    notificationHooks: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioNotificationHook[];
    owner: string;
    plugins: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioPlugin[];
    projectId: string;
    projectName: string;
    protocols: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioProtocol[];
    requestFiles: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioRequestFile[];
    scenarioId: string;
    slaId: string;
    slaPolicies: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicy[];
    status: number;
    subAccountUin: string;
    testScripts: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioTestScript[];
    type: string;
    uin: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDataset {
    fileId: string;
    headLines: string[];
    headerColumns: string[];
    headerInFile: boolean;
    lineCount: number;
    name: string;
    size: number;
    split: boolean;
    tailLines: string[];
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDomainNameConfig {
    dnsConfigs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDomainNameConfigDnsConfig[];
    hostAliases: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDomainNameConfigHostAlias[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDomainNameConfigDnsConfig {
    nameservers: string[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioDomainNameConfigHostAlias {
    hostNames: string[];
    ip: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoad {
    geoRegionsLoadDistributions: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadGeoRegionsLoadDistribution[];
    loadSpecs: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpec[];
    vpcLoadDistributions: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadVpcLoadDistribution[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadGeoRegionsLoadDistribution {
    percentage: number;
    region: string;
    regionId: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpec {
    concurrencies: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecConcurrency[];
    requestsPerSeconds: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecRequestsPerSecond[];
    scriptOrigins: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecScriptOrigin[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecConcurrency {
    gracefulStopSeconds: number;
    iterationCount: number;
    maxRequestsPerSecond: number;
    resources: number;
    stages: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecConcurrencyStage[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecConcurrencyStage {
    durationSeconds: number;
    targetVirtualUsers: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecRequestsPerSecond {
    durationSeconds: number;
    gracefulStopSeconds: number;
    maxRequestsPerSecond: number;
    resources: number;
    startRequestsPerSecond: number;
    targetRequestsPerSecond: number;
    targetVirtualUsers: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadLoadSpecScriptOrigin {
    durationSeconds: number;
    machineNumber: number;
    machineSpecification: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioLoadVpcLoadDistribution {
    region: string;
    regionId: number;
    subnetIds: string[];
    vpcId: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioNotificationHook {
    events: string[];
    url: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioPlugin {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioProtocol {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioRequestFile {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicy {
    alertChannels: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicyAlertChannel[];
    slaRules: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicySlaRule[];
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicyAlertChannel {
    ampConsumerId: string;
    noticeId: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicySlaRule {
    abortFlag: boolean;
    aggregation: string;
    condition: string;
    for: string;
    labelFilters: outputs.GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicySlaRuleLabelFilter[];
    metric: string;
    value: number;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioSlaPolicySlaRuleLabelFilter {
    labelName: string;
    labelValue: string;
}

export interface GetPtsScenarioWithJobsScenarioWithJobsSetScenarioTestScript {
    encodedContent: string;
    encodedHttpArchive: string;
    fileId: string;
    loadWeight: number;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface GetRedisBackupBackupSet {
    backupId: string;
    backupSize: number;
    backupType: string;
    endTime: string;
    expireTime: string;
    fileType: string;
    fullBackup: number;
    instanceId: string;
    instanceName: string;
    instanceType: number;
    locked: number;
    region: string;
    remark: string;
    startTime: string;
    status: number;
}

export interface GetRedisBackupDownloadInfoBackupInfo {
    downloadUrl: string;
    fileName: string;
    fileSize: number;
    innerDownloadUrl: string;
}

export interface GetRedisBackupDownloadInfoLimitVpc {
    /**
     * Customize the region of the VPC to which the backup file is downloaded.
     */
    region: string;
    /**
     * Customize the list of VPCs to download backup files.
     */
    vpcLists: string[];
}

export interface GetRedisInstanceNodeInfoProxy {
    nodeId: string;
    zoneId: number;
}

export interface GetRedisInstanceNodeInfoRedi {
    clusterId: number;
    nodeId: string;
    nodeRole: string;
    zoneId: number;
}

export interface GetRedisInstanceShardsInstanceShard {
    connected: number;
    keys: number;
    role: number;
    runid: string;
    shardId: string;
    shardName: string;
    slots: string;
    storage: number;
    storageSlope: number;
}

export interface GetRedisInstanceTaskListTask {
    endTime: string;
    instanceId: string;
    instanceName: string;
    progress: number;
    projectId: number;
    result: number;
    startTime: string;
    taskId: number;
    taskType: string;
}

export interface GetRedisInstanceZoneInfoReplicaGroup {
    groupId: number;
    groupName: string;
    redisNodes: outputs.GetRedisInstanceZoneInfoReplicaGroupRedisNode[];
    role: string;
    zoneId: string;
}

export interface GetRedisInstanceZoneInfoReplicaGroupRedisNode {
    keys: number;
    nodeId: string;
    role: string;
    slot: string;
    status: string;
}

export interface GetRedisInstancesInstanceList {
    chargeType: string;
    createTime: string;
    ip: string;
    memSize: number;
    name: string;
    nodeInfos: outputs.GetRedisInstancesInstanceListNodeInfo[];
    port: number;
    projectId: number;
    redisId: string;
    redisReplicasNum: number;
    redisShardNum: number;
    status: string;
    subnetId: string;
    tags: {[key: string]: string};
    type: string;
    typeId: number;
    vpcId: string;
    zone: string;
}

export interface GetRedisInstancesInstanceListNodeInfo {
    id: number;
    master: boolean;
    zoneId: number;
}

export interface GetRedisParamRecordsInstanceParamHistory {
    modifyTime: string;
    newValue: string;
    paramName: string;
    preValue: string;
    status: number;
}

export interface GetRedisZoneConfigList {
    memSizes: number[];
    redisReplicasNums: number[];
    redisShardNums: number[];
    shardMemories: number[];
    type: string;
    typeId: number;
    version: string;
    zone: string;
}

export interface GetReservedInstanceConfigsConfigList {
    availabilityZone: string;
    configId: string;
    currencyCode: string;
    duration: number;
    instanceType: string;
    offeringType: string;
    platform: string;
    price: number;
    usagePrice: number;
}

export interface GetReservedInstancesReservedInstanceList {
    availabilityZone: string;
    endTime: string;
    instanceCount: number;
    instanceType: string;
    reservedInstanceId: string;
    startTime: string;
    status: string;
}

export interface GetRouteTableRoute {
    cidrBlock: string;
    description: string;
    nextHub: string;
    nextType: string;
}

export interface GetRumProjectProjectSet {
    createTime: string;
    creator: string;
    desc: string;
    enableUrlGroup: number;
    instanceId: string;
    instanceKey: string;
    instanceName: string;
    isStar: number;
    key: string;
    name: string;
    pid: number;
    projectStatus: number;
    rate: string;
    repo: string;
    type: string;
    url: string;
}

export interface GetRumScoresScoreSet {
    apiDuration: string;
    apiFail: string;
    apiNum: string;
    createTime: string;
    pageDuration: string;
    pageError: string;
    pagePv: string;
    pageUv: string;
    projectId: number;
    recordNum: number;
    score: string;
    staticDuration: string;
    staticFail: string;
    staticNum: string;
}

export interface GetRumTawAreaAreaSet {
    areaAbbr: string;
    areaId: number;
    areaKey: string;
    areaName: string;
    areaRegionCode: string;
    areaRegionId: string;
    areaStatus: number;
}

export interface GetRumTawInstanceInstanceSet {
    areaId: number;
    chargeStatus: number;
    chargeType: number;
    clusterId: number;
    createdAt: string;
    dataRetentionDays: number;
    instanceDesc: string;
    instanceId: string;
    instanceName: string;
    instanceStatus: number;
    tags: outputs.GetRumTawInstanceInstanceSetTag[];
    updatedAt: string;
}

export interface GetRumTawInstanceInstanceSetTag {
    key: string;
    value: string;
}

export interface GetRumWhitelistWhitelistSet {
    aid: string;
    createTime: string;
    createUser: string;
    remark: string;
    ttl: string;
    whitelistUin: string;
    wid: string;
}

export interface GetScfAccountInfoAccountLimit {
    namespaces: outputs.GetScfAccountInfoAccountLimitNamespace[];
    namespacesCount: number;
}

export interface GetScfAccountInfoAccountLimitNamespace {
    concurrentExecutions: number;
    functionsCount: number;
    initTimeoutLimit: number;
    maxMsgTtl: number;
    minMsgTtl: number;
    namespace: string;
    retryNumLimit: number;
    testModelLimit: number;
    timeoutLimit: number;
    triggers: outputs.GetScfAccountInfoAccountLimitNamespaceTrigger[];
}

export interface GetScfAccountInfoAccountLimitNamespaceTrigger {
    apigw: number;
    ckafka: number;
    clb: number;
    cls: number;
    cm: number;
    cmq: number;
    cos: number;
    eb: number;
    mps: number;
    timer: number;
    total: number;
    vod: number;
}

export interface GetScfAccountInfoAccountUsage {
    namespaces: outputs.GetScfAccountInfoAccountUsageNamespace[];
    namespacesCount: number;
    totalAllocatedConcurrencyMem: number;
    totalConcurrencyMem: number;
    userConcurrencyMemLimit: number;
}

export interface GetScfAccountInfoAccountUsageNamespace {
    functions: string[];
    functionsCount: number;
    namespace: string;
    totalAllocatedConcurrencyMem: number;
    totalAllocatedProvisionedMem: number;
    totalConcurrencyMem: number;
}

export interface GetScfAsyncEventManagementEventList {
    endTime: string;
    invokeRequestId: string;
    invokeType: string;
    qualifier: string;
    startTime: string;
    status: string;
}

export interface GetScfAsyncEventStatusResult {
    invokeRequestId: string;
    status: string;
    statusCode: number;
}

export interface GetScfFunctionAliasesAlias {
    addTime: string;
    description: string;
    functionVersion: string;
    modTime: string;
    name: string;
    routingConfigs: outputs.GetScfFunctionAliasesAliasRoutingConfig[];
}

export interface GetScfFunctionAliasesAliasRoutingConfig {
    additionVersionMatchs: outputs.GetScfFunctionAliasesAliasRoutingConfigAdditionVersionMatch[];
    additionalVersionWeights: outputs.GetScfFunctionAliasesAliasRoutingConfigAdditionalVersionWeight[];
}

export interface GetScfFunctionAliasesAliasRoutingConfigAdditionVersionMatch {
    expression: string;
    key: string;
    method: string;
    version: string;
}

export interface GetScfFunctionAliasesAliasRoutingConfigAdditionalVersionWeight {
    version: string;
    weight: number;
}

export interface GetScfFunctionVersionsVersion {
    addTime: string;
    description: string;
    modTime: string;
    status: string;
    version: string;
}

export interface GetScfFunctionsFunction {
    asyncRunEnable: string;
    clsLogsetId: string;
    clsTopicId: string;
    codeError: string;
    codeResult: string;
    codeSize: number;
    createTime: string;
    description: string;
    dnsCache: boolean;
    eipFixed: boolean;
    eips: string[];
    enableEipConfig: boolean;
    enablePublicNet: boolean;
    environment: {[key: string]: string};
    errNo: number;
    handler: string;
    host: string;
    imageConfigs: outputs.GetScfFunctionsFunctionImageConfig[];
    installDependency: boolean;
    intranetConfigs: outputs.GetScfFunctionsFunctionIntranetConfig[];
    l5Enable: boolean;
    memSize: number;
    modifyTime: string;
    name: string;
    namespace: string;
    role: string;
    runtime: string;
    status: string;
    statusDesc: string;
    subnetId: string;
    tags: {[key: string]: string};
    timeout: number;
    triggerInfos: outputs.GetScfFunctionsFunctionTriggerInfo[];
    vip: string;
    vpcId: string;
}

export interface GetScfFunctionsFunctionImageConfig {
    args: string;
    command: string;
    containerImageAccelerate: boolean;
    entryPoint: string;
    imagePort: number;
    imageType: string;
    imageUri: string;
    registryId: string;
}

export interface GetScfFunctionsFunctionIntranetConfig {
    ipAddresses: string[];
    ipFixed: string;
}

export interface GetScfFunctionsFunctionTriggerInfo {
    createTime: string;
    customArgument: string;
    enable: boolean;
    modifyTime: string;
    name: string;
    triggerDesc: string;
    type: string;
}

export interface GetScfLayerVersionsLayerVersion {
    addTime: string;
    compatibleRuntimes: string[];
    description: string;
    layerName: string;
    layerVersion: number;
    licenseInfo: string;
    stamp: string;
    status: string;
}

export interface GetScfLayersLayer {
    addTime: string;
    compatibleRuntimes: string[];
    description: string;
    layerName: string;
    layerVersion: number;
    licenseInfo: string;
    stamp: string;
    status: string;
}

export interface GetScfLogsLog {
    billDuration: number;
    duration: number;
    functionName: string;
    invokeFinished: number;
    level: string;
    log: string;
    memUsage: number;
    requestId: string;
    retCode: number;
    retMsg: string;
    source: string;
    startTime: string;
}

export interface GetScfNamespacesNamespace {
    createTime: string;
    description: string;
    modifyTime: string;
    namespace: string;
    type: string;
}

export interface GetScfRequestStatusData {
    duration: number;
    functionName: string;
    memUsage: number;
    requestId: string;
    retCode: number;
    retMsg: string;
    retryNum: number;
    startTime: string;
}

export interface GetScfTriggersFilter {
    /**
     * Fields to be filtered. Up to 10 conditions allowed.Values of Name: VpcId, SubnetId, ClsTopicId, ClsLogsetId, Role, CfsId, CfsMountInsId, Eip. Values limit: 1.Name options: Status, Runtime, FunctionType, PublicNetStatus, AsyncRunEnable, TraceEnable. Values limit: 20.When Name is Runtime, CustomImage refers to the image type function.
     */
    name: string;
    /**
     * Filter values of the field.
     */
    values: string[];
}

export interface GetScfTriggersTrigger {
    addTime: string;
    availableStatus: string;
    bindStatus: string;
    customArgument: string;
    enable: number;
    modTime: string;
    qualifier: string;
    resourceId: string;
    triggerAttribute: string;
    triggerDesc: string;
    triggerName: string;
    type: string;
}

export interface GetSecurityGroupsSecurityGroup {
    beAssociateCount: number;
    createTime: string;
    description: string;
    egresses: string[];
    ingresses: string[];
    name: string;
    projectId: number;
    securityGroupId: string;
    tags: {[key: string]: string};
}

export interface GetSesBlackEmailAddressBlackList {
    bounceTime: string;
    emailAddress: string;
}

export interface GetSesEmailIdentitiesEmailIdentity {
    currentReputationLevel: number;
    dailyQuota: number;
    identityName: string;
    identityType: string;
    sendingEnabled: boolean;
}

export interface GetSesReceiversData {
    count: number;
    createTime: string;
    desc: string;
    receiverId: number;
    receiversName: string;
    receiversStatus: number;
}

export interface GetSesSendEmailStatusEmailStatusList {
    deliverMessage: string;
    deliverStatus: number;
    deliverTime: number;
    fromEmailAddress: string;
    messageId: string;
    requestTime: number;
    sendStatus: number;
    toEmailAddress: string;
    userClicked: boolean;
    userComplainted: boolean;
    userOpened: boolean;
    userUnsubscribed: boolean;
}

export interface GetSesSendTasksData {
    cacheCount: number;
    createTime: string;
    cycleParams: outputs.GetSesSendTasksDataCycleParam[];
    errMsg: string;
    fromEmailAddress: string;
    receiverId: number;
    receiversName: string;
    requestCount: number;
    sendCount: number;
    subject: string;
    taskId: number;
    taskStatus: number;
    taskType: number;
    templates: outputs.GetSesSendTasksDataTemplate[];
    timedParams: outputs.GetSesSendTasksDataTimedParam[];
    updateTime: string;
}

export interface GetSesSendTasksDataCycleParam {
    beginTime: string;
    intervalTime: number;
    termCycle: number;
}

export interface GetSesSendTasksDataTemplate {
    templateData: string;
    templateId: number;
}

export interface GetSesSendTasksDataTimedParam {
    beginTime: string;
}

export interface GetSesStatisticsReportDailyVolume {
    acceptedCount: number;
    bounceCount: number;
    clickedCount: number;
    deliveredCount: number;
    openedCount: number;
    requestCount: number;
    sendDate: string;
    unsubscribeCount: number;
}

export interface GetSesStatisticsReportOverallVolume {
    acceptedCount: number;
    bounceCount: number;
    clickedCount: number;
    deliveredCount: number;
    openedCount: number;
    requestCount: number;
    sendDate: string;
    unsubscribeCount: number;
}

export interface GetSqlserverAccountDbAttachmentsList {
    accountName: string;
    dbName: string;
    instanceId: string;
    privilege: string;
}

export interface GetSqlserverAccountsList {
    createTime: string;
    instanceId: string;
    name: string;
    remark: string;
    status: number;
    updateTime: string;
}

export interface GetSqlserverBackupCommandsList {
    command: string;
    requestId: string;
}

export interface GetSqlserverBackupUploadSizeCosUploadBackupFileSet {
    fileName: string;
    size: number;
}

export interface GetSqlserverBackupsList {
    dbLists: string[];
    endTime: string;
    fileName: string;
    id: string;
    instanceId: string;
    internetUrl: string;
    intranetUrl: string;
    size: number;
    startTime: string;
    status: number;
    strategy: number;
    triggerModel: number;
}

export interface GetSqlserverBasicInstancesInstanceList {
    availabilityZone: string;
    chargeType: string;
    cpu: number;
    createTime: string;
    engineVersion: string;
    id: string;
    memory: number;
    name: string;
    projectId: number;
    status: number;
    storage: number;
    subnetId: string;
    tags: {[key: string]: string};
    usedStorage: number;
    vip: string;
    vpcId: string;
    vport: number;
}

export interface GetSqlserverDbsDbList {
    charset: string;
    createTime: string;
    instanceId: string;
    name: string;
    remark: string;
    status: string;
}

export interface GetSqlserverDescHaLogSwitchLog {
    endTime: string;
    eventId: string;
    reason: string;
    startTime: string;
    switchType: number;
}

export interface GetSqlserverInsAttributeSslConfig {
    encryption: string;
    sslValidity: number;
    sslValidityPeriod: string;
}

export interface GetSqlserverInsAttributeTdeConfig {
    certificateAttribution: string;
    encryption: string;
    quoteUin: string;
}

export interface GetSqlserverInstanceParamRecordsItem {
    instanceId: string;
    modifyTime: string;
    newValue: string;
    oldValue: string;
    paramName: string;
    status: number;
}

export interface GetSqlserverInstancesInstanceList {
    availabilityZone: string;
    chargeType: string;
    createTime: string;
    engineVersion: string;
    haType: string;
    id: string;
    memory: number;
    name: string;
    projectId: number;
    roFlag: string;
    status: number;
    storage: number;
    subnetId: string;
    tags: {[key: string]: string};
    usedStorage: number;
    vip: string;
    vpcId: string;
    vport: number;
}

export interface GetSqlserverProjectSecurityGroupsSecurityGroupSet {
    createTime: string;
    inboundSets: outputs.GetSqlserverProjectSecurityGroupsSecurityGroupSetInboundSet[];
    outboundSets: outputs.GetSqlserverProjectSecurityGroupsSecurityGroupSetOutboundSet[];
    projectId: number;
    securityGroupId: string;
    securityGroupName: string;
    securityGroupRemark: string;
}

export interface GetSqlserverProjectSecurityGroupsSecurityGroupSetInboundSet {
    action: string;
    cidrIp: string;
    dir: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetSqlserverProjectSecurityGroupsSecurityGroupSetOutboundSet {
    action: string;
    cidrIp: string;
    dir: string;
    ipProtocol: string;
    portRange: string;
}

export interface GetSqlserverPublishSubscribesPublishSubscribeList {
    databaseTuples: outputs.GetSqlserverPublishSubscribesPublishSubscribeListDatabaseTuple[];
    publishInstanceId: string;
    publishInstanceIp: string;
    publishInstanceName: string;
    publishSubscribeId: number;
    publishSubscribeName: string;
    subscribeInstanceId: string;
    subscribeInstanceIp: string;
    subscribeInstanceName: string;
}

export interface GetSqlserverPublishSubscribesPublishSubscribeListDatabaseTuple {
    lastSyncTime: string;
    publishDatabase: string;
    status: string;
    subscribeDatabase: string;
}

export interface GetSqlserverQueryXeventEvent {
    endTime: string;
    eventType: string;
    externalAddr: string;
    fileName: string;
    id: number;
    internalAddr: string;
    size: number;
    startTime: string;
    status: number;
}

export interface GetSqlserverReadonlyGroupsList {
    id: string;
    isOfflineDelay: number;
    masterInstanceId: string;
    maxDelayTime: number;
    minInstances: number;
    name: string;
    readonlyInstanceSets: string[];
    status: number;
    vip: string;
    vport: number;
}

export interface GetSqlserverRegionsRegionSet {
    region: string;
    regionId: number;
    regionName: string;
    regionState: string;
}

export interface GetSqlserverRollbackTimeDetail {
    dbName: string;
    endTime: string;
    startTime: string;
}

export interface GetSqlserverSlowlogsSlowlog {
    count: number;
    endTime: string;
    externalAddr: string;
    id: number;
    internalAddr: string;
    size: number;
    startTime: string;
    status: number;
}

export interface GetSqlserverZoneConfigZoneList {
    availabilityZone: string;
    specinfoLists: outputs.GetSqlserverZoneConfigZoneListSpecinfoList[];
    zoneId: number;
}

export interface GetSqlserverZoneConfigZoneListSpecinfoList {
    chargeType: string;
    cpu: number;
    dbVersion: string;
    dbVersionName: string;
    machineType: string;
    maxStorageSize: number;
    memory: number;
    minStorageSize: number;
    qps: number;
    specId: number;
}

export interface GetSslCertificatesCertificate {
    beginTime: string;
    cert: string;
    createTime: string;
    domain: string;
    dvAuths: outputs.GetSslCertificatesCertificateDvAuth[];
    endTime: string;
    id: string;
    key: string;
    name: string;
    orderId: string;
    productZhName: string;
    projectId: number;
    status: number;
    subjectNames: string[];
    type: string;
}

export interface GetSslCertificatesCertificateDvAuth {
    dvAuthKey: string;
    dvAuthValue: string;
    dvAuthVerifyType: string;
}

export interface GetSslDescribeCertificateResult {
    alias: string;
    cACommonNames: string[];
    cAEncryptAlgorithms: string[];
    cAEndTimes: string[];
    certBeginTime: string;
    certEndTime: string;
    certificateExtras: outputs.GetSslDescribeCertificateResultCertificateExtra[];
    certificateType: string;
    deployable: boolean;
    domain: string;
    dvAuthDetails: outputs.GetSslDescribeCertificateResultDvAuthDetail[];
    dvRevokeAuthDetails: outputs.GetSslDescribeCertificateResultDvRevokeAuthDetail[];
    from: string;
    insertTime: string;
    isDv: boolean;
    isVip: boolean;
    isVulnerability: boolean;
    isWildcard: boolean;
    orderId: string;
    ownerUin: string;
    packageType: string;
    packageTypeName: string;
    productZhName: string;
    projectId: string;
    renewAble: boolean;
    status: number;
    statusMsg: string;
    statusName: string;
    subjectAltNames: string[];
    submittedDatas: outputs.GetSslDescribeCertificateResultSubmittedData[];
    validityPeriod: string;
    verifyType: string;
    vulnerabilityReport: string;
    vulnerabilityStatus: string;
}

export interface GetSslDescribeCertificateResultCertificateExtra {
    companyType: number;
    domainNumber: string;
    originCertificateId: string;
    renewOrder: string;
    replacedBy: string;
    replacedFor: string;
    sMCert: number;
}

export interface GetSslDescribeCertificateResultDvAuthDetail {
    dvAuthDomain: string;
    dvAuthKey: string;
    dvAuthKeySubDomain: string;
    dvAuthPath: string;
    dvAuthValue: string;
    dvAuths: outputs.GetSslDescribeCertificateResultDvAuthDetailDvAuth[];
}

export interface GetSslDescribeCertificateResultDvAuthDetailDvAuth {
    dvAuthDomain: string;
    dvAuthKey: string;
    dvAuthPath: string;
    dvAuthSubDomain: string;
    dvAuthValue: string;
    dvAuthVerifyType: string;
}

export interface GetSslDescribeCertificateResultDvRevokeAuthDetail {
    dvAuthDomain: string;
    dvAuthKey: string;
    dvAuthPath: string;
    dvAuthSubDomain: string;
    dvAuthValue: string;
    dvAuthVerifyType: string;
}

export interface GetSslDescribeCertificateResultSubmittedData {
    adminEmail: string;
    adminFirstName: string;
    adminLastName: string;
    adminPhoneNum: string;
    adminPosition: string;
    certificateDomain: string;
    contactEmail: string;
    contactFirstName: string;
    contactLastName: string;
    contactNumber: string;
    contactPosition: string;
    csrContent: string;
    csrType: string;
    domainLists: string[];
    keyPassword: string;
    organizationAddress: string;
    organizationCity: string;
    organizationCountry: string;
    organizationDivision: string;
    organizationName: string;
    organizationRegion: string;
    phoneAreaCode: string;
    phoneNumber: string;
    postalCode: string;
    verifyType: string;
}

export interface GetSslDescribeCompaniesCompany {
    companyAddress: string;
    companyCity: string;
    companyCountry: string;
    companyId: number;
    companyName: string;
    companyPhone: string;
    companyProvince: string;
    idNumber: string;
    idType: string;
}

export interface GetSslDescribeHostApiGatewayInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostApiGatewayInstanceListInstanceList {
    certId: string;
    domain: string;
    protocol: string;
    serviceId: string;
    serviceName: string;
}

export interface GetSslDescribeHostCdnInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostCdnInstanceListInstanceList {
    certId: string;
    domain: string;
    httpsBillingSwitch: string;
    status: string;
}

export interface GetSslDescribeHostClbInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostClbInstanceListInstanceList {
    listeners: outputs.GetSslDescribeHostClbInstanceListInstanceListListener[];
    loadBalancerId: string;
    loadBalancerName: string;
}

export interface GetSslDescribeHostClbInstanceListInstanceListListener {
    certificates: outputs.GetSslDescribeHostClbInstanceListInstanceListListenerCertificate[];
    listenerId: string;
    listenerName: string;
    noMatchDomains: string[];
    protocol: string;
    rules: outputs.GetSslDescribeHostClbInstanceListInstanceListListenerRule[];
    sniSwitch: number;
}

export interface GetSslDescribeHostClbInstanceListInstanceListListenerCertificate {
    certCaId: string;
    certId: string;
    dnsNames: string[];
    sSLMode: string;
}

export interface GetSslDescribeHostClbInstanceListInstanceListListenerRule {
    certificates: outputs.GetSslDescribeHostClbInstanceListInstanceListListenerRuleCertificate[];
    domain: string;
    isMatch: boolean;
    locationId: string;
    noMatchDomains: string[];
}

export interface GetSslDescribeHostClbInstanceListInstanceListListenerRuleCertificate {
    certCaId: string;
    certId: string;
    dnsNames: string[];
    sSLMode: string;
}

export interface GetSslDescribeHostCosInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostCosInstanceListInstanceList {
    bucket: string;
    certId: string;
    domain: string;
    region: string;
    status: string;
}

export interface GetSslDescribeHostDdosInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostDdosInstanceListInstanceList {
    certId: string;
    domain: string;
    instanceId: string;
    protocol: string;
    virtualPort: string;
}

export interface GetSslDescribeHostDeployRecordDeployRecordList {
    certId: string;
    createTime: string;
    id: number;
    region: string;
    resourceType: string;
    status: number;
    updateTime: string;
}

export interface GetSslDescribeHostDeployRecordDetailDeployRecordDetailList {
    bucket: string;
    certId: string;
    createTime: string;
    domains: string[];
    envId: string;
    errorMsg: string;
    id: number;
    instanceId: string;
    instanceName: string;
    listenerId: string;
    listenerName: string;
    namespace: string;
    oldCertId: string;
    port: number;
    protocol: string;
    region: string;
    secretName: string;
    sniSwitch: number;
    status: number;
    tcbType: string;
    updateTime: string;
}

export interface GetSslDescribeHostLighthouseInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostLighthouseInstanceListInstanceList {
    domains: string[];
    instanceId: string;
    instanceName: string;
    ips: string[];
}

export interface GetSslDescribeHostLiveInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostLiveInstanceListInstanceList {
    certId: string;
    domain: string;
    status: number;
}

export interface GetSslDescribeHostTeoInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostTeoInstanceListInstanceList {
    certId: string;
    host: string;
    status: string;
    zoneId: string;
}

export interface GetSslDescribeHostTkeInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostTkeInstanceListInstanceList {
    clusterId: string;
    clusterName: string;
    clusterType: string;
    clusterVersion: string;
    namespaceLists: outputs.GetSslDescribeHostTkeInstanceListInstanceListNamespaceList[];
}

export interface GetSslDescribeHostTkeInstanceListInstanceListNamespaceList {
    name: string;
    secretLists: outputs.GetSslDescribeHostTkeInstanceListInstanceListNamespaceListSecretList[];
}

export interface GetSslDescribeHostTkeInstanceListInstanceListNamespaceListSecretList {
    certId: string;
    ingressLists: outputs.GetSslDescribeHostTkeInstanceListInstanceListNamespaceListSecretListIngressList[];
    name: string;
    noMatchDomains: string[];
}

export interface GetSslDescribeHostTkeInstanceListInstanceListNamespaceListSecretListIngressList {
    domains: string[];
    ingressName: string;
    tlsDomains: string[];
}

export interface GetSslDescribeHostUpdateRecordDeployRecordList {
    certId: string;
    createTime: string;
    id: number;
    oldCertId: string;
    regions: string[];
    resourceTypes: string[];
    status: number;
    updateTime: string;
}

export interface GetSslDescribeHostUpdateRecordDetailRecordDetailList {
    lists: outputs.GetSslDescribeHostUpdateRecordDetailRecordDetailListList[];
    resourceType: string;
    totalCount: number;
}

export interface GetSslDescribeHostUpdateRecordDetailRecordDetailListList {
    bucket: string;
    certId: string;
    createTime: string;
    domains: string[];
    envId: string;
    errorMsg: string;
    id: number;
    instanceId: string;
    instanceName: string;
    listenerId: string;
    listenerName: string;
    namespace: string;
    oldCertId: string;
    port: number;
    protocol: string;
    region: string;
    resourceType: string;
    secretName: string;
    sniSwitch: number;
    status: number;
    tCBType: string;
    updateTime: string;
}

export interface GetSslDescribeHostVodInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostVodInstanceListInstanceList {
    certId: string;
    domain: string;
}

export interface GetSslDescribeHostWafInstanceListFilter {
    /**
     * Filter parameter key.
     */
    filterKey: string;
    /**
     * Filter parameter value.
     */
    filterValue: string;
}

export interface GetSslDescribeHostWafInstanceListInstanceList {
    certId: string;
    domain: string;
    status: number;
}

export interface GetSslDescribeManagerDetailCompanyInfo {
    companyAddress: string;
    companyCity: string;
    companyCountry: string;
    companyId: number;
    companyName: string;
    companyPhone: string;
    companyProvince: string;
    idNumber: string;
    idType: string;
}

export interface GetSslDescribeManagersManager {
    certCount: number;
    createTime: string;
    domainCount: number;
    expireTime: string;
    managerDepartment: string;
    managerFirstName: string;
    managerId: number;
    managerLastName: string;
    managerMail: string;
    managerPhone: string;
    managerPosition: string;
    status: string;
    submitAuditTime: string;
    verifyTime: string;
}

export interface GetSsmSecretVersionsSecretVersionList {
    secretBinary: string;
    secretString: string;
    versionId: string;
}

export interface GetSsmSecretsSecretList {
    associatedInstanceIds: string[];
    createTime: number;
    createUin: number;
    deleteTime: number;
    description: string;
    kmsKeyId: string;
    kmsKeyType: string;
    nextRotationTime: number;
    productName: string;
    projectId: number;
    resourceId: string;
    resourceName: string;
    rotationBeginTime: string;
    rotationFrequency: number;
    rotationStatus: number;
    secretName: string;
    secretType: number;
    status: string;
    targetUin: number;
}

export interface GetTatAgentAutomationAgentSet {
    agentStatus: string;
    environment: string;
    instanceId: string;
    lastHeartbeatTime: string;
    supportFeatures: string[];
    version: string;
}

export interface GetTatAgentFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter values of the field.
     */
    values: string[];
}

export interface GetTatCommandCommandSet {
    commandId: string;
    commandName: string;
    commandType: string;
    content: string;
    createdBy: string;
    createdTime: string;
    defaultParameters: string;
    description: string;
    enableParameter: boolean;
    formattedDescription: string;
    outputCosBucketUrl: string;
    outputCosKeyPrefix: string;
    tags: outputs.GetTatCommandCommandSetTag[];
    timeout: number;
    updatedTime: string;
    username: string;
    workingDirectory: string;
}

export interface GetTatCommandCommandSetTag {
    key: string;
    value: string;
}

export interface GetTatInvocationTaskFilter {
    /**
     * Field to be filtered.
     */
    name: string;
    /**
     * Filter values of the field.
     */
    values: string[];
}

export interface GetTatInvocationTaskInvocationTaskSet {
    commandDocuments: outputs.GetTatInvocationTaskInvocationTaskSetCommandDocument[];
    commandId: string;
    createdTime: string;
    endTime: string;
    errorInfo: string;
    instanceId: string;
    invocationId: string;
    invocationSource: string;
    invocationTaskId: string;
    startTime: string;
    taskResults: outputs.GetTatInvocationTaskInvocationTaskSetTaskResult[];
    taskStatus: string;
    updatedTime: string;
}

export interface GetTatInvocationTaskInvocationTaskSetCommandDocument {
    commandType: string;
    content: string;
    outputCosBucketUrl: string;
    outputCosKeyPrefix: string;
    timeout: number;
    username: string;
    workingDirectory: string;
}

export interface GetTatInvocationTaskInvocationTaskSetTaskResult {
    dropped: number;
    execEndTime: string;
    execStartTime: string;
    exitCode: number;
    output: string;
    outputUploadCosErrorInfo: string;
    outputUrl: string;
}

export interface GetTatInvokerInvokerSet {
    commandId: string;
    createdTime: string;
    enable: boolean;
    instanceIds: string[];
    invokerId: string;
    name: string;
    parameters: string;
    scheduleSettings: outputs.GetTatInvokerInvokerSetScheduleSetting[];
    type: string;
    updatedTime: string;
    username: string;
}

export interface GetTatInvokerInvokerSetScheduleSetting {
    invokeTime: string;
    policy: string;
    recurrence: string;
}

export interface GetTatInvokerRecordsInvokerRecordSet {
    invocationId: string;
    invokeTime: string;
    invokerId: string;
    reason: string;
    result: string;
}

export interface GetTcaplusClustersList {
    apiAccessId: string;
    apiAccessIp: string;
    apiAccessPort: number;
    clusterId: string;
    clusterName: string;
    createTime: string;
    idlType: string;
    networkType: string;
    oldPasswordExpireTime: string;
    password: string;
    passwordStatus: string;
    subnetId: string;
    vpcId: string;
}

export interface GetTcaplusIdlsList {
    idlId: string;
}

export interface GetTcaplusTablegroupsList {
    createTime: string;
    tableCount: number;
    tablegroupId: string;
    tablegroupName: string;
    totalSize: number;
}

export interface GetTcaplusTablesList {
    createTime: string;
    description: string;
    error: string;
    idlId: string;
    reservedReadCu: number;
    reservedVolume: number;
    reservedWriteCu: number;
    status: string;
    tableId: string;
    tableIdlType: string;
    tableName: string;
    tableSize: number;
    tableType: string;
    tablegroupId: string;
}

export interface GetTcmMeshMeshList {
    configs: outputs.GetTcmMeshMeshListConfig[];
    displayName: string;
    meshId: string;
    tagLists: outputs.GetTcmMeshMeshListTagList[];
    type: string;
    version: string;
}

export interface GetTcmMeshMeshListConfig {
    istios: outputs.GetTcmMeshMeshListConfigIstio[];
}

export interface GetTcmMeshMeshListConfigIstio {
    disableHttpRetry: boolean;
    disablePolicyChecks: boolean;
    enablePilotHttp: boolean;
    outboundTrafficPolicy: string;
    smartDns: outputs.GetTcmMeshMeshListConfigIstioSmartDn[];
}

export interface GetTcmMeshMeshListConfigIstioSmartDn {
    istioMetaDnsAutoAllocate: boolean;
    istioMetaDnsCapture: boolean;
}

export interface GetTcmMeshMeshListTagList {
    key: string;
    passthrough: boolean;
    value: string;
}

export interface GetTcmqQueueFilter {
    /**
     * Filter parameter name.
     */
    name?: string;
    /**
     * Value.
     */
    values?: string[];
}

export interface GetTcmqQueueQueueList {
    activeMsgNum: number;
    bps: number;
    createTime: number;
    createUin: number;
    deadLetterPolicies: outputs.GetTcmqQueueQueueListDeadLetterPolicy[];
    deadLetterSources: outputs.GetTcmqQueueQueueListDeadLetterSource[];
    delayMsgNum: number;
    inactiveMsgNum: number;
    lastModifyTime: number;
    maxDelaySeconds: number;
    maxMsgBacklogSize: number;
    maxMsgHeapNum: number;
    maxMsgSize: number;
    maxUnackedMsgNum: number;
    minMsgTime: number;
    msgRetentionSeconds: number;
    namespaceName: string;
    pollingWaitSeconds: number;
    qps: number;
    queueId: string;
    queueName: string;
    retentionSizeInMb: number;
    rewindMsgNum: number;
    rewindSeconds: number;
    status: number;
    tags: outputs.GetTcmqQueueQueueListTag[];
    tenantId: string;
    trace: boolean;
    transaction: boolean;
    transactionPolicies: outputs.GetTcmqQueueQueueListTransactionPolicy[];
    visibilityTimeout: number;
}

export interface GetTcmqQueueQueueListDeadLetterPolicy {
    deadLetterQueue: string;
    maxReceiveCount: number;
    maxTimeToLive: number;
    policy: number;
}

export interface GetTcmqQueueQueueListDeadLetterSource {
    queueId: string;
    queueName: string;
}

export interface GetTcmqQueueQueueListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetTcmqQueueQueueListTransactionPolicy {
    firstQueryInterval: number;
    maxQueryCount: number;
}

export interface GetTcmqSubscribeSubscriptionList {
    bindingKeys: string[];
    createTime: number;
    endpoint: string;
    filterTags: string[];
    lastModifyTime: number;
    msgCount: number;
    notifyContentFormat: string;
    notifyStrategy: string;
    protocol: string;
    subscriptionId: string;
    subscriptionName: string;
    topicOwner: number;
}

export interface GetTcmqTopicFilter {
    /**
     * Filter parameter name.
     */
    name?: string;
    /**
     * Value.
     */
    values?: string[];
}

export interface GetTcmqTopicTopicList {
    brokerType: number;
    createTime: number;
    createUin: number;
    filterType: number;
    lastModifyTime: number;
    maxMsgSize: number;
    msgCount: number;
    msgRetentionSeconds: number;
    namespaceName: string;
    qps: number;
    status: number;
    tags: outputs.GetTcmqTopicTopicListTag[];
    tenantId: string;
    topicId: string;
    topicName: string;
    trace: boolean;
}

export interface GetTcmqTopicTopicListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetTcrImagesImageInfoList {
    digest: string;
    imageVersion: string;
    kind: string;
    kmsSignature: string;
    size: number;
    updateTime: string;
}

export interface GetTcrInstancesInstanceList {
    id: string;
    instanceType: string;
    internalEndPoint: string;
    name: string;
    publicDomain: string;
    status: string;
    tags: {[key: string]: string};
}

export interface GetTcrNamespacesNamespaceList {
    id: number;
    isPublic: boolean;
    name: string;
}

export interface GetTcrReplicationInstanceCreateTasksTaskDetail {
    createdTime: string;
    finishedTime: string;
    taskMessage: string;
    taskName: string;
    taskStatus: string;
    taskUuid: string;
}

export interface GetTcrReplicationInstanceSyncStatusReplicationLog {
    destination: string;
    endTime: string;
    resourceType: string;
    source: string;
    startTime: string;
    status: string;
}

export interface GetTcrRepositoriesRepositoryList {
    briefDesc: string;
    createTime: string;
    description: string;
    isPublic: boolean;
    name: string;
    namespaceName: string;
    updateTime: string;
    url: string;
}

export interface GetTcrTagRetentionExecutionTasksRetentionTaskList {
    endTime: string;
    executionId: number;
    repository: string;
    retained: number;
    startTime: string;
    status: string;
    taskId: number;
    total: number;
}

export interface GetTcrTagRetentionExecutionsRetentionExecutionList {
    endTime: string;
    executionId: number;
    retentionId: number;
    startTime: string;
    status: string;
}

export interface GetTcrTokensTokenList {
    createTime: string;
    description: string;
    enable: boolean;
    tokenId: string;
}

export interface GetTcrVpcAttachmentsVpcAttachmentList {
    accessIp: string;
    enablePublicDomainDns: boolean;
    enableVpcDomainDns: boolean;
    status: string;
    subnetId: string;
    vpcId: string;
}

export interface GetTcrWebhookTriggerLogsLog {
    creationTime: string;
    detail: string;
    eventType: string;
    id: number;
    notifyType: string;
    status: string;
    triggerId: number;
    updateTime: string;
}

export interface GetTdcpgClustersList {
    autoRenewFlag: number;
    clusterId: string;
    clusterName: string;
    createTime: string;
    dbCharset: string;
    dbKernelVersion: string;
    dbMajorVersion: string;
    dbVersion: string;
    endpointSets: outputs.GetTdcpgClustersListEndpointSet[];
    instanceCount: number;
    payMode: string;
    payPeriodEndTime: string;
    projectId: number;
    region: string;
    status: string;
    statusDesc: string;
    storageLimit: number;
    storagePayMode: string;
    storageUsed: number;
    zone: string;
}

export interface GetTdcpgClustersListEndpointSet {
    clusterId: string;
    endpointId: string;
    endpointName: string;
    endpointType: string;
    privateIp: string;
    privatePort: number;
    subnetId: string;
    vpcId: string;
    wanDomain: string;
    wanIp: string;
    wanPort: number;
}

export interface GetTdcpgInstancesList {
    clusterId: string;
    cpu: number;
    createTime: string;
    dbKernelVersion: string;
    dbMajorVersion: string;
    dbVersion: string;
    endpointId: string;
    instanceId: string;
    instanceName: string;
    instanceType: string;
    memory: number;
    payMode: string;
    payPeriodEndTime: string;
    region: string;
    status: string;
    statusDesc: string;
    zone: string;
}

export interface GetTdmqProInstanceDetailClusterInfo {
    canEditRoute: boolean;
    clusterId: string;
    clusterName: string;
    createTime: string;
    maxStorage: number;
    nodeDistributions: outputs.GetTdmqProInstanceDetailClusterInfoNodeDistribution[];
    remark: string;
    status: number;
    version: string;
}

export interface GetTdmqProInstanceDetailClusterInfoNodeDistribution {
    nodeCount: number;
    zoneId: string;
    zoneName: string;
}

export interface GetTdmqProInstanceDetailClusterSpecInfo {
    maxBandWidth: number;
    maxNamespaces: number;
    maxTopics: number;
    maxTps: number;
    scalableTps: number;
    specName: string;
}

export interface GetTdmqProInstanceDetailNetworkAccessPointInfo {
    endpoint: string;
    instanceId: string;
    routeType: number;
    subnetId: string;
    vpcId: string;
}

export interface GetTdmqProInstancesFilter {
    /**
     * The name of the filter parameter.
     */
    name?: string;
    /**
     * value.
     */
    values?: string[];
}

export interface GetTdmqProInstancesInstance {
    autoRenewFlag: number;
    configDisplay: string;
    createTime: string;
    expireTime: number;
    instanceId: string;
    instanceName: string;
    instanceVersion: string;
    maxBandWidth: number;
    maxStorage: number;
    maxTps: number;
    payMode: number;
    remark: string;
    scalableTps: number;
    specName: string;
    status: number;
    subnetId: string;
    tags: outputs.GetTdmqProInstancesInstanceTag[];
    vpcId: string;
}

export interface GetTdmqProInstancesInstanceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetTdmqPublishersFilter {
    /**
     * The name of the filter parameter.
     */
    name?: string;
    /**
     * value.
     */
    values?: string[];
}

export interface GetTdmqPublishersPublisher {
    address: string;
    averageMsgSize: number;
    clientVersion: string;
    connectedSince: string;
    msgRateIn: number;
    msgThroughputIn: number;
    partition: number;
    producerId: number;
    producerName: string;
}

export interface GetTdmqPublishersSort {
    /**
     * sorter.
     */
    name: string;
    /**
     * Ascending ASC, descending DESC.
     */
    order: string;
}

export interface GetTdmqRabbitmqNodeListFilter {
    /**
     * The name of the filter parameter.
     */
    name?: string;
    /**
     * value.
     */
    values?: string[];
}

export interface GetTdmqRabbitmqNodeListNodeList {
    cpuUsage: string;
    diskUsage: string;
    memory: number;
    nodeName: string;
    nodeStatus: string;
    processNumber: number;
}

export interface GetTdmqRabbitmqVipInstanceFilter {
    /**
     * The name of the filter parameter.
     */
    name?: string;
    /**
     * value.
     */
    values?: string[];
}

export interface GetTdmqRabbitmqVipInstanceInstance {
    autoRenewFlag: number;
    configDisplay: string;
    exceptionInformation: string;
    expireTime: number;
    instanceId: string;
    instanceName: string;
    instanceVersion: string;
    maxBandWidth: number;
    maxStorage: number;
    maxTps: number;
    nodeCount: number;
    payMode: number;
    remark: string;
    specName: string;
    status: number;
}

export interface GetTdmqRocketmqClusterClusterList {
    configs: outputs.GetTdmqRocketmqClusterClusterListConfig[];
    infos: outputs.GetTdmqRocketmqClusterClusterListInfo[];
    status: number;
}

export interface GetTdmqRocketmqClusterClusterListConfig {
    maxGroupNum: number;
    maxLatencyTime: number;
    maxNamespaceNum: number;
    maxRetentionTime: number;
    maxTopicNum: number;
    maxTpsPerNamespace: number;
    usedGroupNum: number;
    usedNamespaceNum: number;
    usedTopicNum: number;
}

export interface GetTdmqRocketmqClusterClusterListInfo {
    clusterId: string;
    clusterName: string;
    createTime: number;
    isVip: boolean;
    publicEndPoint: string;
    region: string;
    remark: string;
    rocketmqFlag: boolean;
    supportNamespaceEndpoint: boolean;
    vpcEndPoint: string;
    vpcs: outputs.GetTdmqRocketmqClusterClusterListInfoVpc[];
}

export interface GetTdmqRocketmqClusterClusterListInfoVpc {
    subnetId: string;
    vpcId: string;
}

export interface GetTdmqRocketmqGroupGroup {
    broadcastEnable: boolean;
    clientProtocol: string;
    consumerNum: number;
    consumerType: string;
    consumptionMode: number;
    createTime: number;
    name: string;
    readEnable: boolean;
    remark: string;
    retryPartitionNum: number;
    totalAccumulative: number;
    tps: number;
    updateTime: number;
}

export interface GetTdmqRocketmqMessagesMessageTrack {
    consumeStatus: string;
    exceptionDesc: string;
    group: string;
    trackType: string;
}

export interface GetTdmqRocketmqNamespaceNamespace {
    namespaceId: string;
    publicEndpoint: string;
    remark: string;
    retentionTime: number;
    ttl: number;
    vpcEndpoint: string;
}

export interface GetTdmqRocketmqRoleRoleSet {
    createTime: string;
    remark: string;
    roleName: string;
    token: string;
    updateTime: string;
}

export interface GetTdmqRocketmqTopicTopic {
    createTime: number;
    name: string;
    partitionNum: number;
    remark: string;
    updateTime: number;
}

export interface GetTdmqVipInstanceClusterInfo {
    clusterId: string;
    clusterName: string;
    createTime: number;
    httpPublicEndpoint: string;
    httpVpcEndpoint: string;
    isVip: boolean;
    isolateTime: number;
    publicEndPoint: string;
    region: string;
    remark: string;
    rocketMqFlag: boolean;
    status: number;
    supportNamespaceEndpoint: boolean;
    vpcEndPoint: string;
    vpcs: outputs.GetTdmqVipInstanceClusterInfoVpc[];
}

export interface GetTdmqVipInstanceClusterInfoVpc {
    subnetId: string;
    vpcId: string;
}

export interface GetTdmqVipInstanceInstanceConfig {
    configDisplay: string;
    maxGroupNum: number;
    maxNamespaceNum: number;
    maxQueuesPerTopic: number;
    maxTopicNum: number;
    maxTpsPerNamespace: number;
    nodeCount: number;
    nodeDistributions: outputs.GetTdmqVipInstanceInstanceConfigNodeDistribution[];
    topicDistributions: outputs.GetTdmqVipInstanceInstanceConfigTopicDistribution[];
    usedGroupNum: number;
    usedNamespaceNum: number;
    usedTopicNum: number;
}

export interface GetTdmqVipInstanceInstanceConfigNodeDistribution {
    nodeCount: number;
    zoneId: string;
    zoneName: string;
}

export interface GetTdmqVipInstanceInstanceConfigTopicDistribution {
    count: number;
    topicType: string;
}

export interface GetTeoRuleEngineSettingsAction {
    action: string;
    properties: outputs.GetTeoRuleEngineSettingsActionProperty[];
}

export interface GetTeoRuleEngineSettingsActionProperty {
    choiceProperties: outputs.GetTeoRuleEngineSettingsActionPropertyChoiceProperty[];
    choicesValues: string[];
    extraParameters: outputs.GetTeoRuleEngineSettingsActionPropertyExtraParameter[];
    isAllowEmpty: boolean;
    isMultiple: boolean;
    max: number;
    min: number;
    name: string;
    type: string;
}

export interface GetTeoRuleEngineSettingsActionPropertyChoiceProperty {
    choicesValues: string[];
    extraParameters: outputs.GetTeoRuleEngineSettingsActionPropertyChoicePropertyExtraParameter[];
    isAllowEmpty: boolean;
    isMultiple: boolean;
    max: number;
    min: number;
    name: string;
    type: string;
}

export interface GetTeoRuleEngineSettingsActionPropertyChoicePropertyExtraParameter {
    choices: string[];
    id: string;
    type: string;
}

export interface GetTeoRuleEngineSettingsActionPropertyExtraParameter {
    choices: string[];
    id: string;
    type: string;
}

export interface GetTeoZoneAvailablePlansPlanInfoList {
    area: string;
    currency: string;
    flux: number;
    frequency: string;
    planType: string;
    price: number;
    request: number;
    siteNumber: number;
}

export interface GetTseAccessAddressEnvAddressInfo {
    configInternetServiceIp: string;
    configIntranetAddress: string;
    enableConfigInternet: boolean;
    enableConfigIntranet: boolean;
    envName: string;
    internetBandWidth: number;
}

export interface GetTseAccessAddressLimiterAddressInfo {
    intranetAddress: string;
}

export interface GetTseGatewayCanaryRulesResult {
    canaryRuleLists: outputs.GetTseGatewayCanaryRulesResultCanaryRuleList[];
    totalCount: number;
}

export interface GetTseGatewayCanaryRulesResultCanaryRuleList {
    balancedServiceLists: outputs.GetTseGatewayCanaryRulesResultCanaryRuleListBalancedServiceList[];
    conditionLists: outputs.GetTseGatewayCanaryRulesResultCanaryRuleListConditionList[];
    enabled: boolean;
    priority: number;
    serviceId: string;
    serviceName: string;
}

export interface GetTseGatewayCanaryRulesResultCanaryRuleListBalancedServiceList {
    percent: number;
    serviceId: string;
    serviceName: string;
    upstreamName: string;
}

export interface GetTseGatewayCanaryRulesResultCanaryRuleListConditionList {
    delimiter: string;
    globalConfigId: string;
    globalConfigName: string;
    key: string;
    operator: string;
    type: string;
    value: string;
}

export interface GetTseGatewayCertificatesFilter {
    /**
     * Filter name.
     */
    key?: string;
    /**
     * Filter value.
     */
    value?: string;
}

export interface GetTseGatewayCertificatesResult {
    certificatesLists: outputs.GetTseGatewayCertificatesResultCertificatesList[];
    total: number;
}

export interface GetTseGatewayCertificatesResultCertificatesList {
    bindDomains: string[];
    certId: string;
    certSource: string;
    createTime: string;
    crt: string;
    expireTime: string;
    id: string;
    issueTime: string;
    key: string;
    name: string;
    status: string;
}

export interface GetTseGatewayNodesNodeList {
    groupId: string;
    groupName: string;
    nodeId: string;
    nodeIp: string;
    status: string;
    zone: string;
    zoneId: string;
}

export interface GetTseGatewayRoutesResult {
    routeLists: outputs.GetTseGatewayRoutesResultRouteList[];
    totalCount: number;
}

export interface GetTseGatewayRoutesResultRouteList {
    createdTime: string;
    destinationPorts: number[];
    forceHttps: boolean;
    headers: outputs.GetTseGatewayRoutesResultRouteListHeader[];
    hosts: string[];
    httpsRedirectStatusCode: number;
    id: string;
    methods: string[];
    name: string;
    paths: string[];
    preserveHost: boolean;
    protocols: string[];
    serviceId: string;
    serviceName: string;
    stripPath: boolean;
}

export interface GetTseGatewayRoutesResultRouteListHeader {
    key: string;
    value: string;
}

export interface GetTseGatewayServicesFilter {
    /**
     * filter name.
     */
    key?: string;
    /**
     * filter value.
     */
    value?: string;
}

export interface GetTseGatewayServicesResult {
    serviceLists: outputs.GetTseGatewayServicesResultServiceList[];
    totalCount: number;
}

export interface GetTseGatewayServicesResultServiceList {
    createdTime: string;
    editable: boolean;
    id: string;
    name: string;
    tags: string[];
    upstreamInfos: outputs.GetTseGatewayServicesResultServiceListUpstreamInfo[];
    upstreamType: string;
}

export interface GetTseGatewayServicesResultServiceListUpstreamInfo {
    algorithm: string;
    autoScalingCvmPort: number;
    autoScalingGroupId: string;
    autoScalingHookStatus: string;
    autoScalingTatCmdStatus: string;
    host: string;
    namespace: string;
    port: number;
    realSourceType: string;
    scfLambdaName: string;
    scfLambdaQualifier: string;
    scfNamespace: string;
    scfType: string;
    serviceName: string;
    slowStart: number;
    sourceId: string;
    sourceName: string;
    sourceType: string;
    targets: outputs.GetTseGatewayServicesResultServiceListUpstreamInfoTarget[];
}

export interface GetTseGatewayServicesResultServiceListUpstreamInfoTarget {
    createdTime: string;
    health: string;
    host: string;
    port: number;
    source: string;
    weight: number;
}

export interface GetTseGatewaysFilter {
    /**
     * filter name.
     */
    name: string;
    /**
     * filter value.
     */
    values: string[];
}

export interface GetTseGatewaysResult {
    gatewayLists: outputs.GetTseGatewaysResultGatewayList[];
    totalCount: number;
}

export interface GetTseGatewaysResultGatewayList {
    autoRenewFlag: number;
    createTime: string;
    curDeadline: string;
    description: string;
    enableCls: boolean;
    enableInternet: boolean;
    engineRegion: string;
    featureVersion: string;
    gatewayId: string;
    gatewayMinorVersion: string;
    gatewayVersion: string;
    ingressClassName: string;
    instancePorts: outputs.GetTseGatewaysResultGatewayListInstancePort[];
    internetMaxBandwidthOut: number;
    internetPayMode: string;
    isolateTime: string;
    loadBalancerType: string;
    name: string;
    nodeConfigs: outputs.GetTseGatewaysResultGatewayListNodeConfig[];
    publicIpAddresses: string[];
    status: string;
    tags: outputs.GetTseGatewaysResultGatewayListTag[];
    tradeType: number;
    type: string;
    vpcConfigs: outputs.GetTseGatewaysResultGatewayListVpcConfig[];
}

export interface GetTseGatewaysResultGatewayListInstancePort {
    httpPort: string;
    httpsPort: string;
}

export interface GetTseGatewaysResultGatewayListNodeConfig {
    number: number;
    specification: string;
}

export interface GetTseGatewaysResultGatewayListTag {
    tagKey: string;
    tagValue: string;
}

export interface GetTseGatewaysResultGatewayListVpcConfig {
    subnetId: string;
    vpcId: string;
}

export interface GetTseGroupsFilter {
    /**
     * filter name.
     */
    name: string;
    /**
     * filter values.
     */
    values: string[];
}

export interface GetTseGroupsResult {
    gatewayGroupLists: outputs.GetTseGroupsResultGatewayGroupList[];
    totalCount: number;
}

export interface GetTseGroupsResultGatewayGroupList {
    bindingStrategies: outputs.GetTseGroupsResultGatewayGroupListBindingStrategy[];
    createTime: string;
    description: string;
    gatewayId: string;
    groupId: string;
    internetMaxBandwidthOut: number;
    isFirstGroup: number;
    modifyTime: string;
    name: string;
    nodeConfigs: outputs.GetTseGroupsResultGatewayGroupListNodeConfig[];
    status: string;
    subnetIds: string;
}

export interface GetTseGroupsResultGatewayGroupListBindingStrategy {
    configs: outputs.GetTseGroupsResultGatewayGroupListBindingStrategyConfig[];
    createTime: string;
    cronConfigs: outputs.GetTseGroupsResultGatewayGroupListBindingStrategyCronConfig[];
    description: string;
    gatewayId: string;
    maxReplicas: number;
    modifyTime: string;
    strategyId: string;
    strategyName: string;
}

export interface GetTseGroupsResultGatewayGroupListBindingStrategyConfig {
    autoScalerId: string;
    createTime: string;
    enabled: boolean;
    maxReplicas: number;
    metrics: outputs.GetTseGroupsResultGatewayGroupListBindingStrategyConfigMetric[];
    modifyTime: string;
    strategyId: string;
}

export interface GetTseGroupsResultGatewayGroupListBindingStrategyConfigMetric {
    resourceName: string;
    targetType: string;
    targetValue: number;
    type: string;
}

export interface GetTseGroupsResultGatewayGroupListBindingStrategyCronConfig {
    createTime: string;
    enabled: boolean;
    modifyTime: string;
    params: outputs.GetTseGroupsResultGatewayGroupListBindingStrategyCronConfigParam[];
    strategyId: string;
}

export interface GetTseGroupsResultGatewayGroupListBindingStrategyCronConfigParam {
    crontab: string;
    period: string;
    startAt: string;
    targetReplicas: number;
}

export interface GetTseGroupsResultGatewayGroupListNodeConfig {
    number: number;
    specification: string;
}

export interface GetTseNacosReplicasReplica {
    name: string;
    role: string;
    status: string;
    subnetId: string;
    vpcId: string;
    zone: string;
    zoneId: string;
}

export interface GetTseNacosServerInterfacesContent {
    interface: string;
}

export interface GetTseZookeeperReplicasReplica {
    aliasName: string;
    name: string;
    role: string;
    status: string;
    subnetId: string;
    vpcId: string;
    zone: string;
    zoneId: string;
}

export interface GetTseZookeeperServerInterfacesContent {
    interface: string;
}

export interface GetTsfApiDetailResult {
    canRun: boolean;
    definitions: outputs.GetTsfApiDetailResultDefinition[];
    description: string;
    requestContentType: string;
    requests: outputs.GetTsfApiDetailResultRequest[];
    responses: outputs.GetTsfApiDetailResultResponse[];
    status: number;
}

export interface GetTsfApiDetailResultDefinition {
    name: string;
    properties: outputs.GetTsfApiDetailResultDefinitionProperty[];
}

export interface GetTsfApiDetailResultDefinitionProperty {
    description: string;
    name: string;
    type: string;
}

export interface GetTsfApiDetailResultRequest {
    defaultValue: string;
    description: string;
    in: string;
    name: string;
    required: boolean;
    type: string;
}

export interface GetTsfApiDetailResultResponse {
    description: string;
    name: string;
    type: string;
}

export interface GetTsfApiGroupResult {
    contents: outputs.GetTsfApiGroupResultContent[];
    totalCount: number;
}

export interface GetTsfApiGroupResultContent {
    aclMode: string;
    apiCount: number;
    authType: string;
    bindedGatewayDeployGroups: outputs.GetTsfApiGroupResultContentBindedGatewayDeployGroup[];
    createdTime: string;
    description: string;
    gatewayInstanceId: string;
    gatewayInstanceType: string;
    groupContext: string;
    groupId: string;
    groupName: string;
    groupType: string;
    namespaceNameKey: string;
    namespaceNameKeyPosition: string;
    serviceNameKey: string;
    serviceNameKeyPosition: string;
    status: string;
    updatedTime: string;
}

export interface GetTsfApiGroupResultContentBindedGatewayDeployGroup {
    applicationId: string;
    applicationName: string;
    applicationType: string;
    clusterType: string;
    deployGroupId: string;
    deployGroupName: string;
    groupStatus: string;
}

export interface GetTsfApplicationAttributeResult {
    groupCount: number;
    instanceCount: number;
    runInstanceCount: number;
}

export interface GetTsfApplicationConfigResult {
    contents: outputs.GetTsfApplicationConfigResultContent[];
    totalCount: number;
}

export interface GetTsfApplicationConfigResultContent {
    applicationId: string;
    applicationName: string;
    configId: string;
    configName: string;
    configType: string;
    configValue: string;
    configVersion: string;
    configVersionCount: number;
    configVersionDesc: string;
    creationTime: string;
    deleteFlag: boolean;
    lastUpdateTime: string;
}

export interface GetTsfApplicationFileConfigResult {
    contents: outputs.GetTsfApplicationFileConfigResultContent[];
    totalCount: number;
}

export interface GetTsfApplicationFileConfigResultContent {
    applicationId: string;
    applicationName: string;
    configFileCode: string;
    configFileName: string;
    configFilePath: string;
    configFileValue: string;
    configFileValueLength: number;
    configId: string;
    configName: string;
    configPostCmd: string;
    configVersion: string;
    configVersionCount: number;
    configVersionDesc: string;
    creationTime: string;
    deleteFlag: boolean;
    lastUpdateTime: string;
}

export interface GetTsfApplicationPublicConfigResult {
    contents: outputs.GetTsfApplicationPublicConfigResultContent[];
    totalCount: number;
}

export interface GetTsfApplicationPublicConfigResultContent {
    applicationId: string;
    applicationName: string;
    configId: string;
    configName: string;
    configType: string;
    configValue: string;
    configVersion: string;
    configVersionCount: number;
    configVersionDesc: string;
    creationTime: string;
    deleteFlag: boolean;
    lastUpdateTime: string;
}

export interface GetTsfApplicationResult {
    contents: outputs.GetTsfApplicationResultContent[];
    totalCount: number;
}

export interface GetTsfApplicationResultContent {
    apigatewayServiceId: string;
    applicationDesc: string;
    applicationId: string;
    applicationName: string;
    applicationRemarkName: string;
    applicationResourceType: string;
    applicationRuntimeType: string;
    applicationType: string;
    createTime: string;
    ignoreCreateImageRepository: boolean;
    microserviceType: string;
    progLang: string;
    serviceConfigLists: outputs.GetTsfApplicationResultContentServiceConfigList[];
    updateTime: string;
}

export interface GetTsfApplicationResultContentServiceConfigList {
    healthChecks: outputs.GetTsfApplicationResultContentServiceConfigListHealthCheck[];
    name: string;
    ports: outputs.GetTsfApplicationResultContentServiceConfigListPort[];
}

export interface GetTsfApplicationResultContentServiceConfigListHealthCheck {
    path: string;
}

export interface GetTsfApplicationResultContentServiceConfigListPort {
    protocol: string;
    targetPort: number;
}

export interface GetTsfBusinessLogConfigsResult {
    contents: outputs.GetTsfBusinessLogConfigsResultContent[];
    totalCount: number;
}

export interface GetTsfBusinessLogConfigsResultContent {
    configAssociatedGroups: outputs.GetTsfBusinessLogConfigsResultContentConfigAssociatedGroup[];
    configCreateTime: string;
    configDesc: string;
    configId: string;
    configName: string;
    configPath: string;
    configPipeline: string;
    configSchemas: outputs.GetTsfBusinessLogConfigsResultContentConfigSchema[];
    configTags: string;
    configUpdateTime: string;
}

export interface GetTsfBusinessLogConfigsResultContentConfigAssociatedGroup {
    applicationId: string;
    applicationName: string;
    applicationType: string;
    associatedTime: string;
    clusterId: string;
    clusterName: string;
    clusterType: string;
    groupId: string;
    groupName: string;
    namespaceId: string;
    namespaceName: string;
}

export interface GetTsfBusinessLogConfigsResultContentConfigSchema {
    schemaContent: string;
    schemaCreateTime: string;
    schemaDateFormat: string;
    schemaMultilinePattern: string;
    schemaPatternLayout: string;
    schemaType: number;
}

export interface GetTsfClusterResult {
    contents: outputs.GetTsfClusterResultContent[];
    totalCount: number;
}

export interface GetTsfClusterResultContent {
    clusterCidr: string;
    clusterDesc: string;
    clusterId: string;
    clusterLimitCpu: number;
    clusterLimitMem: number;
    clusterName: string;
    clusterStatus: string;
    clusterTotalCpu: number;
    clusterTotalMem: number;
    clusterType: string;
    clusterUsedCpu: number;
    clusterUsedMem: number;
    clusterVersion: string;
    createTime: string;
    deleteFlag: boolean;
    deleteFlagReason: string;
    instanceCount: number;
    normalInstanceCount: number;
    operationInfos: outputs.GetTsfClusterResultContentOperationInfo[];
    runInstanceCount: number;
    runServiceInstanceCount: number;
    subnetId: string;
    tsfRegionId: string;
    tsfRegionName: string;
    tsfZoneId: string;
    tsfZoneName: string;
    updateTime: string;
    vpcId: string;
}

export interface GetTsfClusterResultContentOperationInfo {
    addInstances: outputs.GetTsfClusterResultContentOperationInfoAddInstance[];
    destroys: outputs.GetTsfClusterResultContentOperationInfoDestroy[];
    inits: outputs.GetTsfClusterResultContentOperationInfoInit[];
}

export interface GetTsfClusterResultContentOperationInfoAddInstance {
    disabledReason: string;
    enabled: boolean;
    supported: boolean;
}

export interface GetTsfClusterResultContentOperationInfoDestroy {
    disabledReason: string;
    enabled: boolean;
    supported: boolean;
}

export interface GetTsfClusterResultContentOperationInfoInit {
    disabledReason: string;
    enabled: boolean;
    supported: boolean;
}

export interface GetTsfConfigSummaryResult {
    contents: outputs.GetTsfConfigSummaryResultContent[];
    totalCount: number;
}

export interface GetTsfConfigSummaryResultContent {
    applicationId: string;
    applicationName: string;
    configId: string;
    configName: string;
    configType: string;
    configValue: string;
    configVersion: string;
    configVersionCount: number;
    configVersionDesc: string;
    creationTime: string;
    deleteFlag: boolean;
    lastUpdateTime: string;
}

export interface GetTsfContainerGroupResult {
    contents: outputs.GetTsfContainerGroupResultContent[];
    totalCount: number;
}

export interface GetTsfContainerGroupResultContent {
    alias: string;
    clusterId: string;
    clusterName: string;
    cpuLimit: string;
    cpuRequest: string;
    createTime: string;
    groupId: string;
    groupName: string;
    kubeInjectEnable: boolean;
    memLimit: string;
    memRequest: string;
    namespaceId: string;
    namespaceName: string;
    repoName: string;
    server: string;
    tagName: string;
    updatedTime: string;
}

export interface GetTsfDeliveryConfigByGroupIdResult {
    configId: string;
    configName: string;
}

export interface GetTsfDeliveryConfigsResult {
    contents: outputs.GetTsfDeliveryConfigsResultContent[];
    totalCount: number;
}

export interface GetTsfDeliveryConfigsResultContent {
    collectPaths: string[];
    configId: string;
    configName: string;
    createTime: string;
    customRule: string;
    enableAuth: boolean;
    enableGlobalLineRule: boolean;
    groups: outputs.GetTsfDeliveryConfigsResultContentGroup[];
    kafkaAddress: string;
    kafkaInfos: outputs.GetTsfDeliveryConfigsResultContentKafkaInfo[];
    kafkaVIp: string;
    kafkaVPort: string;
    lineRule: string;
    password: string;
    topic: string;
    username: string;
}

export interface GetTsfDeliveryConfigsResultContentGroup {
    associateTime: string;
    clusterId: string;
    clusterName: string;
    clusterType: string;
    groupId: string;
    groupName: string;
    namespaceName: string;
}

export interface GetTsfDeliveryConfigsResultContentKafkaInfo {
    customRule: string;
    lineRule: string;
    paths: string[];
    topic: string;
}

export interface GetTsfGatewayAllGroupApisResult {
    gatewayDeployGroupId: string;
    gatewayDeployGroupName: string;
    groupNum: number;
    groups: outputs.GetTsfGatewayAllGroupApisResultGroup[];
}

export interface GetTsfGatewayAllGroupApisResultGroup {
    gatewayInstanceId: string;
    gatewayInstanceType: string;
    groupApiCount: number;
    groupApis: outputs.GetTsfGatewayAllGroupApisResultGroupGroupApi[];
    groupId: string;
    groupName: string;
}

export interface GetTsfGatewayAllGroupApisResultGroupGroupApi {
    apiId: string;
    method: string;
    microserviceName: string;
    namespaceName: string;
    path: string;
}

export interface GetTsfGroupConfigReleaseResult {
    configReleaseLists: outputs.GetTsfGroupConfigReleaseResultConfigReleaseList[];
    fileConfigReleaseLists: outputs.GetTsfGroupConfigReleaseResultFileConfigReleaseList[];
    packageId: string;
    packageName: string;
    packageVersion: string;
    publicConfigReleaseLists: outputs.GetTsfGroupConfigReleaseResultPublicConfigReleaseList[];
    repoName: string;
    tagName: string;
}

export interface GetTsfGroupConfigReleaseResultConfigReleaseList {
    applicationId: string;
    clusterId: string;
    clusterName: string;
    configId: string;
    configName: string;
    configReleaseId: string;
    configVersion: string;
    groupId: string;
    groupName: string;
    namespaceId: string;
    namespaceName: string;
    releaseDesc: string;
    releaseTime: string;
}

export interface GetTsfGroupConfigReleaseResultFileConfigReleaseList {
    clusterId: string;
    clusterName: string;
    configId: string;
    configName: string;
    configReleaseId: string;
    configVersion: string;
    groupId: string;
    groupName: string;
    namespaceId: string;
    namespaceName: string;
    releaseDesc: string;
    releaseTime: string;
}

export interface GetTsfGroupConfigReleaseResultPublicConfigReleaseList {
    applicationId: string;
    clusterId: string;
    clusterName: string;
    configId: string;
    configName: string;
    configReleaseId: string;
    configVersion: string;
    groupId: string;
    groupName: string;
    namespaceId: string;
    namespaceName: string;
    releaseDesc: string;
    releaseTime: string;
}

export interface GetTsfGroupGatewaysResult {
    contents: outputs.GetTsfGroupGatewaysResultContent[];
    totalCount: number;
}

export interface GetTsfGroupGatewaysResultContent {
    aclMode: string;
    apiCount: number;
    authType: string;
    bindedGatewayDeployGroups: outputs.GetTsfGroupGatewaysResultContentBindedGatewayDeployGroup[];
    createdTime: string;
    description: string;
    gatewayInstanceId: string;
    gatewayInstanceType: string;
    groupContext: string;
    groupId: string;
    groupName: string;
    groupType: string;
    namespaceNameKey: string;
    namespaceNameKeyPosition: string;
    serviceNameKey: string;
    serviceNameKeyPosition: string;
    status: string;
    updatedTime: string;
}

export interface GetTsfGroupGatewaysResultContentBindedGatewayDeployGroup {
    applicationId: string;
    applicationName: string;
    applicationType: string;
    clusterType: string;
    deployGroupId: string;
    deployGroupName: string;
    groupStatus: string;
}

export interface GetTsfGroupInstancesResult {
    contents: outputs.GetTsfGroupInstancesResultContent[];
    totalCount: number;
}

export interface GetTsfGroupInstancesResultContent {
    agentVersion: string;
    applicationId: string;
    applicationName: string;
    applicationResourceType: string;
    applicationType: string;
    clusterId: string;
    clusterName: string;
    clusterType: string;
    countInTsf: number;
    groupId: string;
    groupName: string;
    instanceAvailableStatus: string;
    instanceChargeType: string;
    instanceCreatedTime: string;
    instanceDesc: string;
    instanceExpiredTime: string;
    instanceId: string;
    instanceImportMode: string;
    instanceLimitCpu: number;
    instanceLimitMem: number;
    instanceName: string;
    instancePkgVersion: string;
    instanceStatus: string;
    instanceTotalCpu: number;
    instanceTotalMem: number;
    instanceUsedCpu: number;
    instanceUsedMem: number;
    instanceZoneId: string;
    lanIp: string;
    namespaceId: string;
    namespaceName: string;
    nodeInstanceId: string;
    operationState: number;
    reason: string;
    restrictState: string;
    serviceInstanceStatus: string;
    serviceSidecarStatus: string;
    updateTime: string;
    wanIp: string;
}

export interface GetTsfGroupsResult {
    contents: outputs.GetTsfGroupsResultContent[];
    totalCount: number;
}

export interface GetTsfGroupsResultContent {
    alias: string;
    applicationId: string;
    applicationName: string;
    applicationType: string;
    clusterId: string;
    clusterName: string;
    createTime: string;
    deployDesc: string;
    groupDesc: string;
    groupId: string;
    groupName: string;
    groupResourceType: string;
    microserviceType: string;
    namespaceId: string;
    namespaceName: string;
    startupParameters: string;
    updateTime: string;
    updatedTime: number;
}

export interface GetTsfMicroserviceApiVersionResult {
    applicationId: string;
    applicationName: string;
    pkgVersion: string;
}

export interface GetTsfMicroserviceResult {
    contents: outputs.GetTsfMicroserviceResultContent[];
    totalCount: number;
}

export interface GetTsfMicroserviceResultContent {
    createTime: number;
    criticalInstanceCount: number;
    microserviceDesc: string;
    microserviceId: string;
    microserviceName: string;
    namespaceId: string;
    runInstanceCount: number;
    updateTime: number;
}

export interface GetTsfMsApiListResult {
    contents: outputs.GetTsfMsApiListResultContent[];
    totalCount: number;
}

export interface GetTsfMsApiListResultContent {
    description: string;
    method: string;
    path: string;
    status: number;
}

export interface GetTsfPodInstancesResult {
    contents: outputs.GetTsfPodInstancesResultContent[];
    totalCount: number;
}

export interface GetTsfPodInstancesResultContent {
    createdAt: string;
    instanceAvailableStatus: string;
    instanceStatus: string;
    ip: string;
    nodeInstanceId: string;
    nodeIp: string;
    podId: string;
    podName: string;
    readyCount: number;
    reason: string;
    restartCount: number;
    runtime: string;
    serviceInstanceStatus: string;
    status: string;
}

export interface GetTsfPublicConfigSummaryResult {
    contents: outputs.GetTsfPublicConfigSummaryResultContent[];
    totalCount: number;
}

export interface GetTsfPublicConfigSummaryResultContent {
    applicationId: string;
    applicationName: string;
    configId: string;
    configName: string;
    configType: string;
    configValue: string;
    configVersion: string;
    configVersionCount: number;
    configVersionDesc: string;
    creationTime: string;
    deleteFlag: boolean;
    lastUpdateTime: string;
}

export interface GetTsfRepositoryResult {
    contents: outputs.GetTsfRepositoryResultContent[];
    totalCount: number;
}

export interface GetTsfRepositoryResultContent {
    bucketName: string;
    bucketRegion: string;
    createTime: string;
    directory: string;
    isUsed: boolean;
    repositoryDesc: string;
    repositoryId: string;
    repositoryName: string;
    repositoryType: string;
}

export interface GetTsfUnitRulesResult {
    contents: outputs.GetTsfUnitRulesResultContent[];
    totalCount: number;
}

export interface GetTsfUnitRulesResultContent {
    createdTime: string;
    description: string;
    gatewayInstanceId: string;
    id: string;
    name: string;
    status: string;
    unitRuleItemLists: outputs.GetTsfUnitRulesResultContentUnitRuleItemList[];
    updatedTime: string;
}

export interface GetTsfUnitRulesResultContentUnitRuleItemList {
    description: string;
    destNamespaceId: string;
    destNamespaceName: string;
    id: string;
    name: string;
    priority: number;
    relationship: string;
    unitRuleId: string;
    unitRuleTagLists: outputs.GetTsfUnitRulesResultContentUnitRuleItemListUnitRuleTagList[];
}

export interface GetTsfUnitRulesResultContentUnitRuleItemListUnitRuleTagList {
    id: string;
    tagField: string;
    tagOperator: string;
    tagType: string;
    tagValue: string;
    unitRuleItemId: string;
}

export interface GetTsfUsableUnitNamespacesResult {
    contents: outputs.GetTsfUsableUnitNamespacesResultContent[];
    totalCount: number;
}

export interface GetTsfUsableUnitNamespacesResultContent {
    createdTime: string;
    gatewayInstanceId: string;
    id: string;
    namespaceId: string;
    namespaceName: string;
    updatedTime: string;
}

export interface GetVodAdaptiveDynamicStreamingTemplatesTemplateList {
    comment: string;
    createTime: string;
    definition: string;
    disableHigherVideoBitrate: boolean;
    disableHigherVideoResolution: boolean;
    drmType: string;
    format: string;
    name: string;
    streamInfos: outputs.GetVodAdaptiveDynamicStreamingTemplatesTemplateListStreamInfo[];
    type: string;
    updateTime: string;
}

export interface GetVodAdaptiveDynamicStreamingTemplatesTemplateListStreamInfo {
    audios: outputs.GetVodAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoAudio[];
    removeAudio: boolean;
    videos: outputs.GetVodAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoVideo[];
}

export interface GetVodAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoAudio {
    audioChannel: string;
    bitrate: number;
    codec: string;
    sampleRate: number;
}

export interface GetVodAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoVideo {
    bitrate: number;
    codec: string;
    fillType: string;
    fps: number;
    height: number;
    resolutionAdaptive: boolean;
    width: number;
}

export interface GetVodImageSpriteTemplatesTemplateList {
    columnCount: number;
    comment: string;
    createTime: string;
    definition: string;
    fillType: string;
    height: number;
    name: string;
    resolutionAdaptive: boolean;
    rowCount: number;
    sampleInterval: number;
    sampleType: string;
    type: string;
    updateTime: string;
    width: number;
}

export interface GetVodProcedureTemplatesTemplateList {
    comment: string;
    createTime: string;
    mediaProcessTasks: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTask[];
    name: string;
    type: string;
    updateTime: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTask {
    adaptiveDynamicStreamingTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskList[];
    animatedGraphicTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskAnimatedGraphicTaskList[];
    coverBySnapshotTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskList[];
    imageSpriteTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskImageSpriteTaskList[];
    sampleSnapshotTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskList[];
    snapshotByTimeOffsetTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskList[];
    transcodeTaskLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskList[];
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskList {
    definition: string;
    watermarkLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList[];
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList {
    definition: string;
    endTimeOffset: number;
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskAnimatedGraphicTaskList {
    definition: string;
    endTimeOffset: number;
    startTimeOffset: number;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskList {
    definition: string;
    positionType: string;
    positionValue: number;
    watermarkLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskListWatermarkList[];
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskListWatermarkList {
    definition: string;
    endTimeOffset: number;
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskImageSpriteTaskList {
    definition: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskList {
    definition: string;
    watermarkLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskListWatermarkList[];
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskListWatermarkList {
    definition: string;
    endTimeOffset: number;
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskList {
    definition: string;
    extTimeOffsetLists: string[];
    watermarkLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList[];
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList {
    definition: string;
    endTimeOffset: number;
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskList {
    definition: string;
    mosaicLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListMosaicList[];
    watermarkLists: outputs.GetVodProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListWatermarkList[];
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListMosaicList {
    coordinateOrigin: string;
    endTimeOffset: number;
    height: string;
    startTimeOffset: number;
    width: string;
    xPos: string;
    yPos: string;
}

export interface GetVodProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListWatermarkList {
    definition: string;
    endTimeOffset: number;
    startTimeOffset: number;
    svgContent: string;
    textContent: string;
}

export interface GetVodSnapshotByTimeOffsetTemplatesTemplateList {
    comment: string;
    createTime: string;
    definition: string;
    fillType: string;
    format: string;
    height: number;
    name: string;
    resolutionAdaptive: boolean;
    type: string;
    updateTime: string;
    width: number;
}

export interface GetVodSuperPlayerConfigsConfigList {
    adaptiveDynamicStreamingDefinition: string;
    comment: string;
    createTime: string;
    domain: string;
    drmStreamingInfos: outputs.GetVodSuperPlayerConfigsConfigListDrmStreamingInfo[];
    drmSwitch: boolean;
    imageSpriteDefinition: string;
    name: string;
    resolutionNames: outputs.GetVodSuperPlayerConfigsConfigListResolutionName[];
    scheme: string;
    type: string;
    updateTime: string;
}

export interface GetVodSuperPlayerConfigsConfigListDrmStreamingInfo {
    simpleAesDefinition: string;
}

export interface GetVodSuperPlayerConfigsConfigListResolutionName {
    minEdgeLength: number;
    name: string;
}

export interface GetVpcAccountAttributesAccountAttributeSet {
    attributeName: string;
    attributeValues: string[];
}

export interface GetVpcAclsAclList {
    createTime: string;
    egresses: outputs.GetVpcAclsAclListEgress[];
    id: string;
    ingresses: outputs.GetVpcAclsAclListIngress[];
    name: string;
    subnets: outputs.GetVpcAclsAclListSubnet[];
    vpcId: string;
}

export interface GetVpcAclsAclListEgress {
    cidrBlock: string;
    description: string;
    policy: string;
    port: string;
    protocol: string;
}

export interface GetVpcAclsAclListIngress {
    cidrBlock: string;
    description: string;
    policy: string;
    port: string;
    protocol: string;
}

export interface GetVpcAclsAclListSubnet {
    cidrBlock: string;
    subnetId: string;
    subnetName: string;
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetVpcBandwidthPackageBillUsageBandwidthPackageBillBandwidthSet {
    bandwidthUsage: number;
}

export interface GetVpcBandwidthPackageQuotaQuotaSet {
    quotaCurrent: number;
    quotaId: string;
    quotaLimit: number;
}

export interface GetVpcClassicLinkInstancesClassicLinkInstanceSet {
    instanceId: string;
    vpcId: string;
}

export interface GetVpcClassicLinkInstancesFilter {
    /**
     * The attribute name. If more than one Filter exists, the logical relation between these Filters is `AND`.
     */
    name: string;
    /**
     * The attribute value. If there are multiple Values for one Filter, the logical relation between these Values under the same Filter is `OR`.
     */
    values: string[];
}

export interface GetVpcCvmInstancesFilter {
    /**
     * The attribute name. If more than one Filter exists, the logical relation between these Filters is `AND`.
     */
    name: string;
    /**
     * Attribute value. If multiple values exist in one filter, the logical relationship between these values is `OR`. For a `bool` parameter, the valid values include `TRUE` and `FALSE`.
     */
    values: string[];
}

export interface GetVpcCvmInstancesInstanceSet {
    cpu: number;
    createdTime: string;
    eniIpLimit: number;
    eniLimit: number;
    instanceEniCount: number;
    instanceId: string;
    instanceName: string;
    instanceState: string;
    instanceType: string;
    memory: number;
    subnetId: string;
    vpcId: string;
}

export interface GetVpcGatewayFlowMonitorDetailGatewayFlowMonitorDetailSet {
    inPkg: number;
    inTraffic: number;
    outPkg: number;
    outTraffic: number;
    privateIpAddress: string;
}

export interface GetVpcGatewayFlowQosGatewayQosSet {
    bandwidth: number;
    createTime: string;
    ipAddress: string;
    vpcId: string;
}

export interface GetVpcInstancesInstanceList {
    cidrBlock: string;
    createTime: string;
    dnsServers: string[];
    isDefault: boolean;
    isMulticast: boolean;
    name: string;
    subnetIds: string[];
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetVpcLimitsVpcLimitSet {
    limitType: string;
    limitValue: number;
}

export interface GetVpcNetDetectStateCheckNetDetectIpStateSet {
    delay: number;
    detectDestinationIp: string;
    packetLossRate: number;
    state: number;
}

export interface GetVpcNetDetectStatesFilter {
    /**
     * The attribute name. If more than one Filter exists, the logical relation between these Filters is `AND`.
     */
    name: string;
    /**
     * Attribute value. If multiple values exist in one filter, the logical relationship between these values is `OR`. For a `bool` parameter, the valid values include `TRUE` and `FALSE`.
     */
    values: string[];
}

export interface GetVpcNetDetectStatesNetDetectStateSet {
    netDetectId: string;
    netDetectIpStateSets: outputs.GetVpcNetDetectStatesNetDetectStateSetNetDetectIpStateSet[];
}

export interface GetVpcNetDetectStatesNetDetectStateSetNetDetectIpStateSet {
    delay: number;
    detectDestinationIp: string;
    packetLossRate: number;
    state: number;
}

export interface GetVpcPrivateIpAddressesVpcPrivateIpAddressSet {
    cidrBlock: string;
    createdTime: string;
    privateIpAddress: string;
    privateIpAddressType: string;
}

export interface GetVpcProductQuotaProductQuotaSet {
    quotaCurrent: number;
    quotaId: string;
    quotaLimit: number;
    quotaName: string;
    quotaRegion: boolean;
}

export interface GetVpcResourceDashboardResourceDashboardSet {
    cdb: number;
    cfs: number;
    ckafka: number;
    classicLink: number;
    cmem: number;
    cnas: number;
    ctsDb: number;
    cvm: number;
    cynosDbMysql: number;
    cynosDbPostgres: number;
    dbAudit: number;
    dcdb: number;
    dcg: number;
    elasticSearch: number;
    emr: number;
    flowLog: number;
    greenplumn: number;
    grocery: number;
    hsm: number;
    ip: number;
    itop: number;
    lb: number;
    mariaDb: number;
    mongoDb: number;
    nas: number;
    nat: number;
    networkAcl: number;
    networkDetect: number;
    oracle: number;
    pcx: number;
    postgres: number;
    redis: number;
    routeTable: number;
    seal: number;
    sqlServer: number;
    subnet: number;
    subnetId: string;
    tBaas: number;
    tcaplus: number;
    tiDb: number;
    vpcId: string;
    vpngw: number;
}

export interface GetVpcRouteConflictsRouteConflictSet {
    conflictSets: outputs.GetVpcRouteConflictsRouteConflictSetConflictSet[];
    destinationCidrBlock: string;
    routeTableId: string;
}

export interface GetVpcRouteConflictsRouteConflictSetConflictSet {
    createdTime: string;
    destinationCidrBlock: string;
    destinationIpv6CidrBlock: string;
    enabled: boolean;
    gatewayId: string;
    gatewayType: string;
    publishedToVbc: boolean;
    routeDescription: string;
    routeId: number;
    routeItemId: string;
    routeTableId: string;
    routeType: string;
}

export interface GetVpcRouteTablesInstanceList {
    createTime: string;
    isDefault: boolean;
    name: string;
    routeEntryInfos: outputs.GetVpcRouteTablesInstanceListRouteEntryInfo[];
    routeTableId: string;
    subnetIds: string[];
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetVpcRouteTablesInstanceListRouteEntryInfo {
    description: string;
    destinationCidrBlock: string;
    nextHub: string;
    nextType: string;
    routeEntryId: string;
}

export interface GetVpcSecurityGroupLimitsSecurityGroupLimitSet {
    instanceSecurityGroupLimit: number;
    referredSecurityGroupLimit: number;
    securityGroupExtendedPolicyLimit: number;
    securityGroupInstanceLimit: number;
    securityGroupLimit: number;
    securityGroupPolicyLimit: number;
    securityGroupReferredCvmAndEniLimit: number;
    securityGroupReferredSvcLimit: number;
}

export interface GetVpcSecurityGroupReferencesReferredSecurityGroupSet {
    referredSecurityGroupIds: string[];
    securityGroupId: string;
}

export interface GetVpcSgSnapshotFileContentBackupData {
    action: string;
    addressTemplates: outputs.GetVpcSgSnapshotFileContentBackupDataAddressTemplate[];
    cidrBlock: string;
    ipv6CidrBlock: string;
    modifyTime: string;
    policyDescription: string;
    policyIndex: number;
    port: string;
    protocol: string;
    securityGroupId: string;
    serviceTemplates: outputs.GetVpcSgSnapshotFileContentBackupDataServiceTemplate[];
}

export interface GetVpcSgSnapshotFileContentBackupDataAddressTemplate {
    addressGroupId: string;
    addressId: string;
}

export interface GetVpcSgSnapshotFileContentBackupDataServiceTemplate {
    serviceGroupId: string;
    serviceId: string;
}

export interface GetVpcSgSnapshotFileContentOriginalData {
    action: string;
    addressTemplates: outputs.GetVpcSgSnapshotFileContentOriginalDataAddressTemplate[];
    cidrBlock: string;
    ipv6CidrBlock: string;
    modifyTime: string;
    policyDescription: string;
    policyIndex: number;
    port: string;
    protocol: string;
    securityGroupId: string;
    serviceTemplates: outputs.GetVpcSgSnapshotFileContentOriginalDataServiceTemplate[];
}

export interface GetVpcSgSnapshotFileContentOriginalDataAddressTemplate {
    addressGroupId: string;
    addressId: string;
}

export interface GetVpcSgSnapshotFileContentOriginalDataServiceTemplate {
    serviceGroupId: string;
    serviceId: string;
}

export interface GetVpcSnapshotFilesSnapshotFileSet {
    backupTime: string;
    instanceId: string;
    operator: string;
    snapshotFileId: string;
    snapshotPolicyId: string;
}

export interface GetVpcSubnetResourceDashboardResourceStatisticsSet {
    ip: number;
    resourceStatisticsItemSets: outputs.GetVpcSubnetResourceDashboardResourceStatisticsSetResourceStatisticsItemSet[];
    subnetId: string;
    vpcId: string;
}

export interface GetVpcSubnetResourceDashboardResourceStatisticsSetResourceStatisticsItemSet {
    resourceCount: number;
    resourceName: string;
    resourceType: string;
}

export interface GetVpcSubnetsInstanceList {
    availabilityZone: string;
    availableIpCount: number;
    cdcId: string;
    cidrBlock: string;
    createTime: string;
    isDefault: boolean;
    isMulticast: boolean;
    name: string;
    routeTableId: string;
    subnetId: string;
    tags: {[key: string]: string};
    vpcId: string;
}

export interface GetVpcTemplateLimitsTemplateLimit {
    addressTemplateGroupMemberLimit: number;
    addressTemplateMemberLimit: number;
    serviceTemplateGroupMemberLimit: number;
    serviceTemplateMemberLimit: number;
}

export interface GetVpcUsedIpAddressIpAddressState {
    ipAddress: string;
    resourceId: string;
    resourceType: string;
    subnetId: string;
    vpcId: string;
}

export interface GetVpnConnectionsConnectionList {
    createTime: string;
    customerGatewayId: string;
    encryptProto: string;
    id: string;
    ikeDhGroupName: string;
    ikeExchangeMode: string;
    ikeLocalAddress: string;
    ikeLocalFqdnName: string;
    ikeLocalIdentity: string;
    ikeProtoAuthenAlgorithm: string;
    ikeProtoEncryAlgorithm: string;
    ikeRemoteAddress: string;
    ikeRemoteFqdnName: string;
    ikeRemoteIdentity: string;
    ikeSaLifetimeSeconds: number;
    ikeVersion: string;
    ipsecEncryptAlgorithm: string;
    ipsecIntegrityAlgorithm: string;
    ipsecPfsDhGroup: string;
    ipsecSaLifetimeSeconds: number;
    ipsecSaLifetimeTraffic: number;
    name: string;
    netStatus: string;
    preShareKey: string;
    routeType: string;
    securityGroupPolicies: outputs.GetVpnConnectionsConnectionListSecurityGroupPolicy[];
    state: string;
    tags: {[key: string]: string};
    vpcId: string;
    vpnGatewayId: string;
    vpnProto: string;
}

export interface GetVpnConnectionsConnectionListSecurityGroupPolicy {
    localCidrBlock: string;
    remoteCidrBlocks: string[];
}

export interface GetVpnCustomerGatewayVendorsCustomerGatewayVendorSet {
    platform: string;
    softwareVersion: string;
    vendorName: string;
}

export interface GetVpnCustomerGatewaysGatewayList {
    createTime: string;
    id: string;
    name: string;
    publicIpAddress: string;
    tags: {[key: string]: string};
}

export interface GetVpnGatewayRoutesVpnGatewayRouteList {
    createTime: string;
    destinationCidrBlock: string;
    instanceId: string;
    instanceType: string;
    priority: number;
    routeId: string;
    status: string;
    type: string;
    updateTime: string;
    vpnGatewayId: string;
}

export interface GetVpnGatewaysGatewayList {
    bandwidth: number;
    chargeType: string;
    createTime: string;
    expiredTime: string;
    id: string;
    isAddressBlocked: boolean;
    name: string;
    newPurchasePlan: string;
    prepaidRenewFlag: string;
    publicIpAddress: string;
    restrictState: string;
    state: string;
    tags: {[key: string]: string};
    type: string;
    vpcId: string;
    zone: string;
}

export interface GetWafAttackLogHistogramData {
    count: number;
    timeStamp: number;
}

export interface GetWafAttackLogListData {
    content: string;
    fileName: string;
    source: string;
    timeStamp: string;
}

export interface GetWafCiphersCipher {
    cipherId: number;
    cipherName: string;
    versionId: number;
}

export interface GetWafDomainsDomain {
    albType: string;
    apiStatus: number;
    appId: number;
    botStatus: number;
    ccLists: string[];
    cdcClusters: string;
    clsStatus: number;
    cname: string;
    createTime: string;
    domain: string;
    domainId: string;
    edition: string;
    engine: number;
    flowMode: number;
    instanceId: string;
    instanceName: string;
    ipv6Status: number;
    level: number;
    loadBalancerSets: outputs.GetWafDomainsDomainLoadBalancerSet[];
    mode: number;
    ports: outputs.GetWafDomainsDomainPort[];
    postCkafkaStatus: number;
    postClsStatus: number;
    region: string;
    rsLists: string[];
    sgDetail: string;
    sgState: number;
    state: number;
    status: number;
}

export interface GetWafDomainsDomainLoadBalancerSet {
    listenerId: string;
    listenerName: string;
    loadBalancerId: string;
    loadBalancerName: string;
    loadBalancerType: string;
    numericalVpcId: number;
    protocol: string;
    region: string;
    vip: string;
    vport: number;
    zone: string;
}

export interface GetWafDomainsDomainPort {
    nginxServerId: number;
    port: string;
    protocol: string;
    upstreamPort: string;
    upstreamProtocol: string;
}

export interface GetWafFindDomainsList {
    appid: number;
    domain: string;
    domainId: string;
    edition: string;
    findTime: string;
    instanceId: string;
    ips: string[];
    isWafDomain: number;
}

export interface GetWafInstanceQpsLimitQpsData {
    elasticBillingDefault: number;
    elasticBillingMax: number;
    elasticBillingMin: number;
    qpsExtendIntlMax: number;
    qpsExtendMax: number;
}

export interface GetWafPeakPointsPoint {
    access: number;
    attack: number;
    botAccess: number;
    cc: number;
    down: number;
    statusClientError: number;
    statusOk: number;
    statusRedirect: number;
    statusServerError: number;
    time: number;
    up: number;
    upstreamClientError: number;
    upstreamRedirect: number;
    upstreamServerError: number;
}

export interface GetWafTlsVersionsTl {
    versionId: number;
    versionName: string;
}

export interface GetWafUserClbRegionsRichData {
    code: string;
    id: string;
    text: string;
    value: string;
}

export interface GetWafUserDomainsUsersInfo {
    appid: number;
    cls: number;
    domain: string;
    domainId: string;
    edition: string;
    instanceId: string;
    instanceName: string;
    level: string;
    writeConfig: string;
}

export interface GetWafWafInfosHostList {
    domain: string;
    domainId: string;
    flowMode: number;
    loadBalancers: outputs.GetWafWafInfosHostListLoadBalancer[];
    status: number;
}

export interface GetWafWafInfosHostListLoadBalancer {
    listenerId: string;
    listenerName: string;
    loadBalancerId: string;
    loadBalancerName: string;
    loadBalancerType: string;
    numericalVpcId: number;
    protocol: string;
    region: string;
    vip: string;
    vport: number;
    zone: string;
}

export interface GetWafWafInfosParam {
    /**
     * Domain unique ID.
     */
    domainId?: string;
    /**
     * Listener ID of LoadBalancer.
     */
    listenerId?: string;
    /**
     * Loadbalancer unique ID.If this parameter is not passed, it will operate all listeners of this appid. If this parameter is not empty, it will operate listeners of the LoadBalancer only.
     */
    loadBalancerId: string;
}

export interface GetWedataDataSourceListFilter {
    /**
     * Filter name.
     */
    name?: string;
    /**
     * Filter value.
     */
    values?: string[];
}

export interface GetWedataDataSourceListOrderField {
    /**
     * OrderFields rule.
     */
    direction: string;
    /**
     * OrderFields name.
     */
    name: string;
}

export interface GetWedataDataSourceListRow {
    appId: number;
    author: boolean;
    authorityProjectName: string;
    authorityUserName: string;
    bizParams: string;
    bizParamsString: string;
    category: string;
    clusterId: string;
    clusterName: string;
    createTime: number;
    dataSourceStatus: string;
    databaseName: string;
    deliver: boolean;
    description: string;
    display: string;
    edit: boolean;
    id: number;
    instance: string;
    modifiedTime: number;
    name: string;
    ownerAccount: string;
    ownerAccountName: string;
    ownerProjectId: string;
    ownerProjectIdent: string;
    ownerProjectName: string;
    params: string;
    paramsString: string;
    region: string;
    showType: string;
    status: number;
    type: string;
}

export interface GetWedataDataSourceWithoutInfoData {
    appId: number;
    author: boolean;
    authorityProjectName: string;
    authorityUserName: string;
    bizParams: string;
    bizParamsString: string;
    category: string;
    clusterId: string;
    clusterName: string;
    createTime: number;
    dataSourceStatus: string;
    databaseName: string;
    deliver: boolean;
    description: string;
    display: string;
    edit: boolean;
    id: number;
    instance: string;
    modifiedTime: number;
    name: string;
    ownerAccount: string;
    ownerAccountName: string;
    ownerProjectId: string;
    ownerProjectIdent: string;
    ownerProjectName: string;
    params: string;
    paramsString: string;
    region: string;
    showType: string;
    status: number;
    type: string;
}

export interface GetWedataDataSourceWithoutInfoFilter {
    /**
     * Filter name.
     */
    name?: string;
    /**
     * Filter value.
     */
    values?: string[];
}

export interface GetWedataDataSourceWithoutInfoOrderField {
    /**
     * OrderFields rule.
     */
    direction: string;
    /**
     * OrderFields name.
     */
    name: string;
}

export interface GetWedataRuleTemplatesData {
    citationCount: number;
    compareType: number;
    description: string;
    multiSourceFlag: boolean;
    name: string;
    qualityDim: number;
    ruleTemplateId: number;
    sourceContent: string;
    sourceEngineTypes: number[];
    sourceObjectDataType: number;
    sourceObjectType: number;
    sqlExpression: string;
    subQualityDim: number;
    type: number;
    updateTime: string;
    userId: number;
    userName: string;
    whereFlag: boolean;
}

export interface InstanceDataDisk {
    /**
     * Data disk ID used to initialize the data disk. When data disk type is `LOCAL_BASIC` and `LOCAL_SSD`, disk id is not supported.
     */
    dataDiskId: string;
    /**
     * Size of the data disk, and unit is GB.
     */
    dataDiskSize: number;
    /**
     * Snapshot ID of the data disk. The selected data disk snapshot size must be smaller than the data disk size.
     */
    dataDiskSnapshotId?: string;
    /**
     * Data disk type. For more information about limits on different data disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: LOCAL_BASIC: local disk, LOCAL_SSD: local SSD disk, LOCAL_NVME: local NVME disk, specified in the InstanceType, LOCAL_PRO: local HDD disk, specified in the InstanceType, CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD, CLOUD_BSSD: Balanced SSD.
     */
    dataDiskType: string;
    /**
     * Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `POSTPAID_BY_HOUR` instance), default is true.
     */
    deleteWithInstance?: boolean;
    /**
     * Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `PREPAID` instance), default is false.
     */
    deleteWithInstancePrepaid?: boolean;
    /**
     * Decides whether the disk is encrypted. Default is `false`.
     */
    encrypt?: boolean;
    /**
     * Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
     */
    throughputPerformance?: number;
}

export interface InstanceSetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface InstanceTimeouts {
    create?: string;
}

export interface KmsOverwriteWhiteBoxDeviceFingerprintsDeviceFingerprint {
    /**
     * Description.
     */
    description?: string;
    /**
     * identity.
     */
    identity: string;
}

export interface KubernetesAsScalingGroupAutoScalingConfig {
    /**
     * Name of a launch configuration.
     */
    configurationName: string;
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesAsScalingGroupAutoScalingConfigDataDisk[];
    /**
     * To specify whether to enable cloud monitor service. Default is TRUE.
     */
    enhancedMonitorService?: boolean;
    /**
     * To specify whether to enable cloud security service. Default is TRUE.
     */
    enhancedSecurityService?: boolean;
    /**
     * A list of tags used to associate different resources.
     */
    instanceTags?: {[key: string]: string};
    /**
     * Specified types of CVM instance.
     */
    instanceType: string;
    /**
     * Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
     */
    internetChargeType?: string;
    /**
     * Max bandwidth of Internet access in Mbps. Default is `0`.
     */
    internetMaxBandwidthOut?: number;
    /**
     * ID list of keys.
     */
    keyIds?: string[];
    /**
     * Password to access.
     */
    password?: string;
    /**
     * Specifys to which project the configuration belongs.
     */
    projectId?: number;
    /**
     * Specify whether to assign an Internet IP address.
     */
    publicIpAssigned?: boolean;
    /**
     * Security groups to which a CVM instance belongs.
     */
    securityGroupIds?: string[];
    /**
     * Volume of system disk in GB. Default is `50`.
     */
    systemDiskSize?: number;
    /**
     * Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
     */
    systemDiskType?: string;
}

export interface KubernetesAsScalingGroupAutoScalingConfigDataDisk {
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
     */
    diskType?: string;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
}

export interface KubernetesAsScalingGroupAutoScalingGroup {
    /**
     * Default cooldown time in second, and default value is 300.
     */
    defaultCooldown?: number;
    /**
     * Desired volume of CVM instances, which is between max_size and min_size.
     */
    desiredCapacity: number;
    /**
     * List of application load balancers, which can't be specified with load_balancer_ids together.
     */
    forwardBalancerIds?: outputs.KubernetesAsScalingGroupAutoScalingGroupForwardBalancerId[];
    /**
     * ID list of traditional load balancers.
     */
    loadBalancerIds?: string[];
    /**
     * Maximum number of CVM instances (0~2000).
     */
    maxSize: number;
    /**
     * Minimum number of CVM instances (0~2000).
     */
    minSize: number;
    /**
     * Specifys to which project the scaling group belongs.
     */
    projectId?: number;
    /**
     * Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
     */
    retryPolicy?: string;
    /**
     * Name of a scaling group.
     */
    scalingGroupName: string;
    /**
     * ID list of subnet, and for VPC it is required.
     */
    subnetIds?: string[];
    /**
     * Tags of a scaling group.
     */
    tags?: {[key: string]: string};
    /**
     * Available values for termination policies include `OLDEST_INSTANCE` and `NEWEST_INSTANCE`.
     */
    terminationPolicies?: string[];
    /**
     * ID of VPC network.
     */
    vpcId: string;
    /**
     * List of available zones, for Basic network it is required.
     */
    zones?: string[];
}

export interface KubernetesAsScalingGroupAutoScalingGroupForwardBalancerId {
    /**
     * Listener ID for application load balancers.
     */
    listenerId: string;
    /**
     * ID of available load balancers.
     */
    loadBalancerId: string;
    /**
     * ID of forwarding rules.
     */
    ruleId?: string;
    /**
     * Attribute list of target rules.
     */
    targetAttributes: outputs.KubernetesAsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute[];
}

export interface KubernetesAsScalingGroupAutoScalingGroupForwardBalancerIdTargetAttribute {
    /**
     * Port number.
     */
    port: number;
    /**
     * Weight.
     */
    weight: number;
}

export interface KubernetesClusterAttachmentWorkerConfig {
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesClusterAttachmentWorkerConfigDataDisk[];
    /**
     * Indicate to set desired pod number in node. valid when the cluster is podCIDR.
     */
    desiredPodNum?: number;
    /**
     * Docker graph path. Default is `/var/lib/docker`.
     */
    dockerGraphPath?: string;
    /**
     * Custom parameter information related to the node. This is a white-list parameter.
     */
    extraArgs?: string[];
    /**
     * GPU driver parameters.
     */
    gpuArgs?: outputs.KubernetesClusterAttachmentWorkerConfigGpuArgs;
    /**
     * Indicate to schedule the adding node or not. Default is true.
     *
     * @deprecated Deprecated
     */
    isSchedule?: boolean;
    /**
     * Mount target. Default is not mounting.
     */
    mountTarget?: string;
    /**
     * Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
     */
    preStartUserScript?: string;
    /**
     * Base64-encoded User Data text, the length limit is 16KB.
     */
    userData?: string;
}

export interface KubernetesClusterAttachmentWorkerConfigDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
     */
    diskType?: string;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     */
    fileSystem?: string;
    /**
     * Mount target.
     */
    mountTarget?: string;
}

export interface KubernetesClusterAttachmentWorkerConfigGpuArgs {
    /**
     * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    cuda?: {[key: string]: string};
    /**
     * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
     */
    cudnn?: {[key: string]: string};
    /**
     * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
     */
    customDriver?: {[key: string]: string};
    /**
     * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    driver?: {[key: string]: string};
    /**
     * Whether to enable MIG.
     */
    migEnable?: boolean;
}

export interface KubernetesClusterAttachmentWorkerConfigOverrides {
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesClusterAttachmentWorkerConfigOverridesDataDisk[];
    /**
     * Indicate to set desired pod number in node. valid when the cluster is podCIDR.
     */
    desiredPodNum?: number;
    /**
     * Docker graph path. Default is `/var/lib/docker`.
     *
     * @deprecated Deprecated
     */
    dockerGraphPath?: string;
    /**
     * Custom parameter information related to the node. This is a white-list parameter.
     *
     * @deprecated Deprecated
     */
    extraArgs?: string[];
    /**
     * GPU driver parameters.
     */
    gpuArgs?: outputs.KubernetesClusterAttachmentWorkerConfigOverridesGpuArgs;
    /**
     * Indicate to schedule the adding node or not. Default is true.
     *
     * @deprecated Deprecated
     */
    isSchedule?: boolean;
    /**
     * Mount target. Default is not mounting.
     *
     * @deprecated Deprecated
     */
    mountTarget?: string;
    /**
     * Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
     *
     * @deprecated Deprecated
     */
    preStartUserScript?: string;
    /**
     * Base64-encoded User Data text, the length limit is 16KB.
     *
     * @deprecated Deprecated
     */
    userData?: string;
}

export interface KubernetesClusterAttachmentWorkerConfigOverridesDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
     */
    diskType?: string;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     */
    fileSystem?: string;
    /**
     * Mount target.
     */
    mountTarget?: string;
}

export interface KubernetesClusterAttachmentWorkerConfigOverridesGpuArgs {
    /**
     * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    cuda?: {[key: string]: string};
    /**
     * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
     */
    cudnn?: {[key: string]: string};
    /**
     * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
     */
    customDriver?: {[key: string]: string};
    /**
     * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    driver?: {[key: string]: string};
    /**
     * Whether to enable MIG.
     */
    migEnable?: boolean;
}

export interface KubernetesClusterAuthOptions {
    /**
     * If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
     */
    autoCreateDiscoveryAnonymousAuth?: boolean;
    /**
     * Specify service-account-issuer. If use_tke_default is set to `true`, please do not set this field, it will be ignored anyway.
     */
    issuer?: string;
    /**
     * Specify service-account-jwks-uri. If use_tke_default is set to `true`, please do not set this field, it will be ignored anyway.
     */
    jwksUri?: string;
    /**
     * If set to `true`, the issuer and jwks_uri will be generated automatically by tke, please do not set issuer and jwks_uri, and they will be ignored.
     */
    useTkeDefault?: boolean;
}

export interface KubernetesClusterClusterAudit {
    /**
     * when you want to close the cluster audit log or delete the cluster, you can use this parameter to determine whether the audit log set and topic created by default will be deleted.
     */
    deleteAuditLogAndTopic?: boolean;
    /**
     * Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
     */
    enabled: boolean;
    /**
     * Specify id of existing CLS log set, or auto create a new set by leave it empty.
     */
    logSetId?: string;
    /**
     * Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
     */
    topicId?: string;
}

export interface KubernetesClusterClusterExtraArgs {
    /**
     * The customized parameters for kube-apiserver.
     */
    kubeApiservers?: string[];
    /**
     * The customized parameters for kube-controller-manager.
     */
    kubeControllerManagers?: string[];
    /**
     * The customized parameters for kube-scheduler.
     */
    kubeSchedulers?: string[];
}

export interface KubernetesClusterEventPersistence {
    /**
     * when you want to close the cluster event persistence or delete the cluster, you can use this parameter to determine whether the event persistence log set and topic created by default will be deleted.
     */
    deleteEventLogAndTopic?: boolean;
    /**
     * Specify weather the Event Persistence enabled.
     */
    enabled: boolean;
    /**
     * Specify id of existing CLS log set, or auto create a new set by leave it empty.
     */
    logSetId?: string;
    /**
     * Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
     */
    topicId?: string;
}

export interface KubernetesClusterExistInstance {
    /**
     * Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
     */
    desiredPodNumbers?: number[];
    /**
     * Reinstallation parameters of an existing instance.
     */
    instancesPara?: outputs.KubernetesClusterExistInstanceInstancesPara;
    /**
     * Role of existed node. value:MASTER_ETCD or WORKER.
     */
    nodeRole?: string;
}

export interface KubernetesClusterExistInstanceInstancesPara {
    /**
     * Cluster IDs.
     */
    instanceIds: string[];
}

export interface KubernetesClusterExtensionAddon {
    /**
     * Add-on name.
     */
    name: string;
    /**
     * Parameter of the add-on resource object in JSON string format, please check the example at the top of page for reference.
     */
    param: string;
}

export interface KubernetesClusterLogAgent {
    /**
     * Whether the log agent enabled.
     */
    enabled: boolean;
    /**
     * Kubelet root directory as the literal.
     */
    kubeletRootDir?: string;
}

export interface KubernetesClusterMasterConfig {
    /**
     * Indicates which availability zone will be used.
     */
    availabilityZone?: string;
    /**
     * bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
     */
    bandwidthPackageId?: string;
    /**
     * CAM role name authorized to access.
     */
    camRoleName?: string;
    /**
     * Number of cvm.
     */
    count?: number;
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesClusterMasterConfigDataDisk[];
    /**
     * Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
     */
    desiredPodNum?: number;
    /**
     * Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
     */
    disasterRecoverGroupIds?: string[];
    /**
     * To specify whether to enable cloud monitor service. Default is TRUE.
     */
    enhancedMonitorService?: boolean;
    /**
     * To specify whether to enable cloud security service. Default is TRUE.
     */
    enhancedSecurityService?: boolean;
    /**
     * The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
     */
    hostname?: string;
    /**
     * Id of cvm hpc cluster.
     */
    hpcClusterId?: string;
    /**
     * The valid image id, format of img-xxx. Note: `img_id` will be replaced with the image corresponding to TKE `cluster_os`.
     */
    imgId?: string;
    /**
     * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
     */
    instanceChargeType?: string;
    /**
     * The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
     */
    instanceChargeTypePrepaidPeriod?: number;
    /**
     * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
     */
    instanceChargeTypePrepaidRenewFlag: string;
    /**
     * Name of the CVMs.
     */
    instanceName?: string;
    /**
     * Specified types of CVM instance.
     */
    instanceType: string;
    /**
     * Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
     */
    internetChargeType?: string;
    /**
     * Max bandwidth of Internet access in Mbps. Default is 0.
     */
    internetMaxBandwidthOut?: number;
    /**
     * ID list of keys, should be set if `password` not set.
     */
    keyIds?: string[];
    /**
     * Password to access, should be set if `key_ids` not set.
     */
    password?: string;
    /**
     * Specify whether to assign an Internet IP address.
     */
    publicIpAssigned?: boolean;
    /**
     * Security groups to which a CVM instance belongs.
     */
    securityGroupIds?: string[];
    /**
     * Private network ID.
     */
    subnetId: string;
    /**
     * Volume of system disk in GB. Default is `50`.
     */
    systemDiskSize?: number;
    /**
     * System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
     */
    systemDiskType?: string;
    /**
     * ase64-encoded User Data text, the length limit is 16KB.
     */
    userData?: string;
}

export interface KubernetesClusterMasterConfigDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount.
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
     */
    diskType?: string;
    /**
     * Indicates whether to encrypt data disk, default `false`.
     */
    encrypt?: boolean;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     */
    fileSystem?: string;
    /**
     * ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
     */
    kmsKeyId?: string;
    /**
     * Mount target.
     */
    mountTarget?: string;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
}

export interface KubernetesClusterNodePoolGlobalConfig {
    /**
     * Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
     */
    expander: string;
    /**
     * Whether to ignore DaemonSet pods by default when calculating resource usage.
     */
    ignoreDaemonSetsUtilization: boolean;
    /**
     * Indicates whether to enable scale-in.
     */
    isScaleInEnabled: boolean;
    /**
     * Max concurrent scale-in volume.
     */
    maxConcurrentScaleIn: number;
    /**
     * Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
     */
    scaleInDelay: number;
    /**
     * Number of consecutive minutes of idleness after which the node is subject to scale-in.
     */
    scaleInUnneededTime: number;
    /**
     * Percentage of node resource usage below which the node is considered to be idle.
     */
    scaleInUtilizationThreshold: number;
    /**
     * During scale-in, ignore nodes with local storage pods.
     */
    skipNodesWithLocalStorage: boolean;
    /**
     * During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
     */
    skipNodesWithSystemPods: boolean;
}

export interface KubernetesClusterWorkerConfig {
    /**
     * Indicates which availability zone will be used.
     */
    availabilityZone?: string;
    /**
     * bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
     */
    bandwidthPackageId?: string;
    /**
     * CAM role name authorized to access.
     */
    camRoleName?: string;
    /**
     * Number of cvm.
     */
    count?: number;
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesClusterWorkerConfigDataDisk[];
    /**
     * Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
     */
    desiredPodNum?: number;
    /**
     * Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
     */
    disasterRecoverGroupIds?: string[];
    /**
     * To specify whether to enable cloud monitor service. Default is TRUE.
     */
    enhancedMonitorService?: boolean;
    /**
     * To specify whether to enable cloud security service. Default is TRUE.
     */
    enhancedSecurityService?: boolean;
    /**
     * The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
     */
    hostname?: string;
    /**
     * Id of cvm hpc cluster.
     */
    hpcClusterId?: string;
    /**
     * The valid image id, format of img-xxx. Note: `img_id` will be replaced with the image corresponding to TKE `cluster_os`.
     */
    imgId?: string;
    /**
     * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
     */
    instanceChargeType?: string;
    /**
     * The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
     */
    instanceChargeTypePrepaidPeriod?: number;
    /**
     * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
     */
    instanceChargeTypePrepaidRenewFlag: string;
    /**
     * Name of the CVMs.
     */
    instanceName?: string;
    /**
     * Specified types of CVM instance.
     */
    instanceType: string;
    /**
     * Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
     */
    internetChargeType?: string;
    /**
     * Max bandwidth of Internet access in Mbps. Default is 0.
     */
    internetMaxBandwidthOut?: number;
    /**
     * ID list of keys, should be set if `password` not set.
     */
    keyIds?: string[];
    /**
     * Password to access, should be set if `key_ids` not set.
     */
    password?: string;
    /**
     * Specify whether to assign an Internet IP address.
     */
    publicIpAssigned?: boolean;
    /**
     * Security groups to which a CVM instance belongs.
     */
    securityGroupIds?: string[];
    /**
     * Private network ID.
     */
    subnetId: string;
    /**
     * Volume of system disk in GB. Default is `50`.
     */
    systemDiskSize?: number;
    /**
     * System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
     */
    systemDiskType?: string;
    /**
     * ase64-encoded User Data text, the length limit is 16KB.
     */
    userData?: string;
}

export interface KubernetesClusterWorkerConfigDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount.
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
     */
    diskType?: string;
    /**
     * Indicates whether to encrypt data disk, default `false`.
     */
    encrypt?: boolean;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     */
    fileSystem?: string;
    /**
     * ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
     */
    kmsKeyId?: string;
    /**
     * Mount target.
     */
    mountTarget?: string;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
}

export interface KubernetesClusterWorkerInstancesList {
    failedReason: string;
    instanceId: string;
    instanceRole: string;
    instanceState: string;
    lanIp: string;
}

export interface KubernetesEncryptionProtectionKmsConfiguration {
    /**
     * kms id.
     */
    keyId?: string;
    /**
     * kms region.
     */
    kmsRegion?: string;
}

export interface KubernetesNativeNodePoolAnnotation {
    /**
     * Name in the map table.
     */
    name: string;
    /**
     * Value in the map table.
     */
    value: string;
}

export interface KubernetesNativeNodePoolLabel {
    /**
     * Name in the map table.
     */
    name: string;
    /**
     * Value in map table.
     */
    value: string;
}

export interface KubernetesNativeNodePoolNative {
    /**
     * Whether to enable self-healing ability.
     */
    autoRepair?: boolean;
    /**
     * Native node pool data disk list.
     */
    dataDisks?: outputs.KubernetesNativeNodePoolNativeDataDisk[];
    /**
     * Whether to enable elastic scaling.
     */
    enableAutoscaling?: boolean;
    /**
     * Fault self-healing rule name.
     */
    healthCheckPolicyName?: string;
    /**
     * Native node pool hostName pattern string.
     */
    hostNamePattern?: string;
    /**
     * Billing configuration for yearly and monthly models.
     */
    instanceChargePrepaid?: outputs.KubernetesNativeNodePoolNativeInstanceChargePrepaid;
    /**
     * Node billing type. `PREPAID` is a yearly and monthly subscription, `POSTPAID_BY_HOUR` is a pay-as-you-go plan. The default is `POSTPAID_BY_HOUR`.
     */
    instanceChargeType: string;
    /**
     * Model list.
     */
    instanceTypes: string[];
    /**
     * Public network bandwidth settings.
     */
    internetAccessible?: outputs.KubernetesNativeNodePoolNativeInternetAccessible;
    /**
     * Node pool ssh public key id array.
     */
    keyIds?: string[];
    /**
     * Kubelet custom parameters.
     */
    kubeletArgs?: string[];
    /**
     * Predefined scripts.
     */
    lifecycle?: outputs.KubernetesNativeNodePoolNativeLifecycle;
    /**
     * Node pool management parameter settings.
     */
    management?: outputs.KubernetesNativeNodePoolNativeManagement;
    /**
     * Desired number of nodes.
     */
    replicas: number;
    /**
     * Runtime root directory.
     */
    runtimeRootDir: string;
    /**
     * Node pool scaling configuration.
     */
    scaling?: outputs.KubernetesNativeNodePoolNativeScaling;
    /**
     * Security group list.
     */
    securityGroupIds: string[];
    /**
     * Subnet list.
     */
    subnetIds: string[];
    /**
     * System disk configuration.
     */
    systemDisk: outputs.KubernetesNativeNodePoolNativeSystemDisk;
}

export interface KubernetesNativeNodePoolNativeDataDisk {
    /**
     * Whether to automatically format the disk and mount it.
     */
    autoFormatAndMount: boolean;
    /**
     * Mount device name or partition name.
     */
    diskPartition?: string;
    /**
     * Cloud disk size (G).
     */
    diskSize: number;
    /**
     * Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD, `CLOUD_TSSD`: Tremendous SSD, `LOCAL_NVME`: local NVME disk.
     */
    diskType: string;
    /**
     * Pass in this parameter to create an encrypted cloud disk. The value is fixed to `ENCRYPT`.
     */
    encrypt?: string;
    /**
     * File system (ext3/ext4/xfs).
     */
    fileSystem?: string;
    /**
     * Customize the key when purchasing an encrypted disk. When this parameter is passed in, the Encrypt parameter is not empty.
     */
    kmsKeyId?: string;
    /**
     * Mount directory.
     */
    mountTarget?: string;
    /**
     * Snapshot ID. If passed in, the cloud disk will be created based on this snapshot. The snapshot type must be a data disk snapshot.
     */
    snapshotId?: string;
    /**
     * Cloud disk performance, unit: MB/s. Use this parameter to purchase additional performance for the cloud disk.
     */
    throughputPerformance?: number;
}

export interface KubernetesNativeNodePoolNativeInstanceChargePrepaid {
    /**
     * Postpaid billing cycle, unit (month): 1, 2, 3, 4, 5,, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
     */
    period: number;
    /**
     * Prepaid renewal method:
     *   - `NOTIFY_AND_AUTO_RENEW`: Notify users of expiration and automatically renew (default).
     *   - `NOTIFY_AND_MANUAL_RENEW`: Notify users of expiration, but do not automatically renew.
     *   - `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Do not notify users of expiration and do not automatically renew.
     */
    renewFlag?: string;
}

export interface KubernetesNativeNodePoolNativeInternetAccessible {
    /**
     * Bandwidth package ID. Note: When ChargeType is BANDWIDTH_PACKAG, the value cannot be empty; otherwise, the value must be empty.
     */
    bandwidthPackageId?: string;
    /**
     * Network billing method. Optional value is `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
     */
    chargeType: string;
    /**
     * Maximum bandwidth output. Note: When chargeType is `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_POSTPAID_BY_HOUR`, the valid range is 1~100. When chargeType is `BANDWIDTH_PACKAG`, the valid range is 1~2000.
     */
    maxBandwidthOut: number;
}

export interface KubernetesNativeNodePoolNativeLifecycle {
    /**
     * Custom script after node initialization.
     */
    postInit?: string;
    /**
     * Custom script before node initialization.
     */
    preInit?: string;
}

export interface KubernetesNativeNodePoolNativeManagement {
    /**
     * Hosts configuration.
     */
    hosts?: string[];
    /**
     * Kernel parameter configuration.
     */
    kernelArgs?: string[];
    /**
     * Dns configuration.
     */
    nameservers: string[];
}

export interface KubernetesNativeNodePoolNativeScaling {
    /**
     * Node pool expansion strategy. `ZoneEquality`: multiple availability zones are broken up; `ZonePriority`: the preferred availability zone takes precedence.
     */
    createPolicy: string;
    /**
     * Maximum number of replicas in node pool.
     */
    maxReplicas: number;
    /**
     * Minimum number of replicas in node pool.
     */
    minReplicas: number;
}

export interface KubernetesNativeNodePoolNativeSystemDisk {
    /**
     * Cloud disk size (G).
     */
    diskSize: number;
    /**
     * Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD.
     */
    diskType: string;
}

export interface KubernetesNativeNodePoolTag {
    /**
     * The resource type bound to the label.
     */
    resourceType?: string;
    /**
     * Tag pair list.
     */
    tags?: outputs.KubernetesNativeNodePoolTagTag[];
}

export interface KubernetesNativeNodePoolTagTag {
    /**
     * Tag Key.
     */
    key?: string;
    /**
     * Tag Value.
     */
    value?: string;
}

export interface KubernetesNativeNodePoolTaint {
    /**
     * Effect of the taint.
     */
    effect?: string;
    /**
     * Key of the taint.
     */
    key?: string;
    /**
     * Value of the taint.
     */
    value?: string;
}

export interface KubernetesNodePoolAutoScalingConfig {
    /**
     * Backup CVM instance types if specified instance type sold out or mismatch.
     */
    backupInstanceTypes?: string[];
    /**
     * bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
     */
    bandwidthPackageId?: string;
    /**
     * Name of cam role.
     */
    camRoleName?: string;
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesNodePoolAutoScalingConfigDataDisk[];
    /**
     * To specify whether to enable cloud monitor service. Default is TRUE.
     */
    enhancedMonitorService?: boolean;
    /**
     * To specify whether to enable cloud security service. Default is TRUE.
     */
    enhancedSecurityService?: boolean;
    /**
     * The hostname of the cloud server, dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows instances are not supported. Examples of other types (Linux, etc.): The character length is [2, 40], multiple periods are allowed, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (unlimited case), numbers and dashes (-). Pure numbers are not allowed. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
     */
    hostName: string;
    /**
     * The style of the host name of the cloud server, the value range includes ORIGINAL and UNIQUE, and the default is ORIGINAL. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
     */
    hostNameStyle: string;
    /**
     * Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
     */
    instanceChargeType: string;
    /**
     * The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
     */
    instanceChargeTypePrepaidPeriod?: number;
    /**
     * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
     */
    instanceChargeTypePrepaidRenewFlag: string;
    /**
     * Instance name, no more than 60 characters. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
     */
    instanceName: string;
    /**
     * Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default value: `ORIGINAL`. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
     */
    instanceNameStyle: string;
    /**
     * Specified types of CVM instance.
     */
    instanceType: string;
    /**
     * Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
     */
    internetChargeType?: string;
    /**
     * Max bandwidth of Internet access in Mbps. Default is `0`.
     */
    internetMaxBandwidthOut?: number;
    /**
     * ID list of keys.
     */
    keyIds?: string[];
    /**
     * Ordered security groups to which a CVM instance belongs.
     */
    orderlySecurityGroupIds: string[];
    /**
     * Password to access.
     */
    password?: string;
    /**
     * Specify whether to assign an Internet IP address.
     */
    publicIpAssigned?: boolean;
    /**
     * Security groups to which a CVM instance belongs.
     *
     * @deprecated Deprecated
     */
    securityGroupIds: string[];
    /**
     * Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
     */
    spotInstanceType?: string;
    /**
     * Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
     */
    spotMaxPrice?: string;
    /**
     * Volume of system disk in GB. Default is `50`.
     */
    systemDiskSize?: number;
    /**
     * Type of a CVM disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`. Default is `CLOUD_PREMIUM`.
     */
    systemDiskType?: string;
}

export interface KubernetesNodePoolAutoScalingConfigDataDisk {
    /**
     * Indicates whether the disk remove after instance terminated. Default is `false`.
     */
    deleteWithInstance?: boolean;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
     */
    diskType?: string;
    /**
     * Specify whether to encrypt data disk, default: false. NOTE: Make sure the instance type is offering and the cam role `QcloudKMSAccessForCVMRole` was provided.
     */
    encrypt?: boolean;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
    /**
     * Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD` and `data_size` > 460GB.
     */
    throughputPerformance?: number;
}

export interface KubernetesNodePoolNodeConfig {
    /**
     * Configurations of data disk.
     */
    dataDisks?: outputs.KubernetesNodePoolNodeConfigDataDisk[];
    /**
     * Indicate to set desired pod number in node. valid when the cluster is podCIDR.
     */
    desiredPodNum?: number;
    /**
     * Docker graph path. Default is `/var/lib/docker`.
     */
    dockerGraphPath?: string;
    /**
     * Custom parameter information related to the node. This is a white-list parameter.
     */
    extraArgs?: string[];
    /**
     * GPU driver parameters.
     */
    gpuArgs?: outputs.KubernetesNodePoolNodeConfigGpuArgs;
    /**
     * Indicate to schedule the adding node or not. Default is true.
     */
    isSchedule?: boolean;
    /**
     * Mount target. Default is not mounting.
     */
    mountTarget?: string;
    /**
     * Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
     */
    preStartUserScript?: string;
    /**
     * Base64-encoded User Data text, the length limit is 16KB.
     */
    userData?: string;
}

export interface KubernetesNodePoolNodeConfigDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
     */
    diskType?: string;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     */
    fileSystem?: string;
    /**
     * Mount target.
     */
    mountTarget?: string;
}

export interface KubernetesNodePoolNodeConfigGpuArgs {
    /**
     * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    cuda?: {[key: string]: string};
    /**
     * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
     */
    cudnn?: {[key: string]: string};
    /**
     * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
     */
    customDriver?: {[key: string]: string};
    /**
     * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    driver?: {[key: string]: string};
    /**
     * Whether to enable MIG.
     */
    migEnable?: boolean;
}

export interface KubernetesNodePoolTaint {
    /**
     * Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
     */
    effect: string;
    /**
     * Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
     */
    key: string;
    /**
     * Value of the taint.
     */
    value: string;
}

export interface KubernetesScaleWorkerDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount.
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
     */
    diskType?: string;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     */
    fileSystem?: string;
    /**
     * Mount target.
     */
    mountTarget?: string;
}

export interface KubernetesScaleWorkerGpuArgs {
    /**
     * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    cuda?: {[key: string]: string};
    /**
     * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
     */
    cudnn?: {[key: string]: string};
    /**
     * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
     */
    customDriver?: {[key: string]: string};
    /**
     * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
     */
    driver?: {[key: string]: string};
    /**
     * Whether to enable MIG.
     */
    migEnable?: boolean;
}

export interface KubernetesScaleWorkerWorkerConfig {
    /**
     * Indicates which availability zone will be used.
     */
    availabilityZone?: string;
    /**
     * bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
     */
    bandwidthPackageId?: string;
    /**
     * CAM role name authorized to access.
     */
    camRoleName?: string;
    /**
     * Number of cvm.
     */
    count?: number;
    /**
     * Configurations of cvm data disk.
     */
    dataDisks?: outputs.KubernetesScaleWorkerWorkerConfigDataDisk[];
    /**
     * Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
     */
    desiredPodNum?: number;
    /**
     * Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
     */
    disasterRecoverGroupIds?: string[];
    /**
     * To specify whether to enable cloud monitor service. Default is TRUE.
     */
    enhancedMonitorService?: boolean;
    /**
     * To specify whether to enable cloud security service. Default is TRUE.
     */
    enhancedSecurityService?: boolean;
    /**
     * The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
     */
    hostname?: string;
    /**
     * Id of cvm hpc cluster.
     */
    hpcClusterId?: string;
    /**
     * The valid image id, format of img-xxx.
     */
    imgId?: string;
    /**
     * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
     */
    instanceChargeType?: string;
    /**
     * The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
     */
    instanceChargeTypePrepaidPeriod?: number;
    /**
     * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
     */
    instanceChargeTypePrepaidRenewFlag: string;
    /**
     * Name of the CVMs.
     */
    instanceName?: string;
    /**
     * Specified types of CVM instance.
     */
    instanceType: string;
    /**
     * Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
     */
    internetChargeType?: string;
    /**
     * Max bandwidth of Internet access in Mbps. Default is 0.
     */
    internetMaxBandwidthOut?: number;
    /**
     * ID list of keys, should be set if `password` not set.
     */
    keyIds?: string[];
    /**
     * Password to access, should be set if `key_ids` not set.
     */
    password?: string;
    /**
     * Specify whether to assign an Internet IP address.
     */
    publicIpAssigned?: boolean;
    /**
     * Security groups to which a CVM instance belongs.
     */
    securityGroupIds?: string[];
    /**
     * Private network ID.
     */
    subnetId: string;
    /**
     * Volume of system disk in GB. Default is `50`.
     */
    systemDiskSize?: number;
    /**
     * System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
     */
    systemDiskType?: string;
    /**
     * User data provided to instances, needs to be encoded in base64, and the maximum supported data size is 16KB.
     */
    userData?: string;
}

export interface KubernetesScaleWorkerWorkerConfigDataDisk {
    /**
     * Indicate whether to auto format and mount or not. Default is `false`.
     *
     * @deprecated Deprecated
     */
    autoFormatAndMount?: boolean;
    /**
     * The name of the device or partition to mount.
     *
     * @deprecated Deprecated
     */
    diskPartition?: string;
    /**
     * Volume of disk in GB. Default is `0`.
     */
    diskSize?: number;
    /**
     * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
     */
    diskType?: string;
    /**
     * Indicates whether to encrypt data disk, default `false`.
     */
    encrypt?: boolean;
    /**
     * File system, e.g. `ext3/ext4/xfs`.
     *
     * @deprecated Deprecated
     */
    fileSystem?: string;
    /**
     * ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
     */
    kmsKeyId?: string;
    /**
     * Mount target.
     *
     * @deprecated Deprecated
     */
    mountTarget?: string;
    /**
     * Data disk snapshot ID.
     */
    snapshotId?: string;
}

export interface KubernetesScaleWorkerWorkerInstancesList {
    failedReason: string;
    instanceId: string;
    instanceRole: string;
    instanceState: string;
    lanIp: string;
}

export interface KubernetesServerlessNodePoolServerlessNode {
    /**
     * display name of serverless node.
     */
    displayName?: string;
    /**
     * subnet id of serverless node.
     */
    subnetId: string;
}

export interface KubernetesServerlessNodePoolTaint {
    /**
     * Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
     */
    effect: string;
    /**
     * Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
     */
    key: string;
    /**
     * Value of the taint.
     */
    value: string;
}

export interface LighthouseDiskAutoMountConfiguration {
    /**
     * The file system type. Value: ext4, xfs. Only instances of the Linux operating system can pass in this parameter, and if it is not passed, it defaults to ext4.
     */
    fileSystemType?: string;
    /**
     * Instance ID to be mounted. The specified instance must be in the Running state.
     */
    instanceId: string;
    /**
     * The mount point within the instance. Only instances of the Linux operating system can pass in this parameter, and if it is not passed, it will be mounted under the /data/disk path by default.
     */
    mountPoint?: string;
}

export interface LighthouseDiskDiskChargePrepaid {
    /**
     * new purchase cycle.
     */
    period: number;
    /**
     * Automatic renewal flag. Value: `NOTIFY_AND_AUTO_RENEW`: Notice expires and auto-renews. `NOTIFY_AND_MANUAL_RENEW`: Notification expires without automatic renewal, users need to manually renew. `DISABLE_NOTIFY_AND_AUTO_RENEW`: No automatic renewal and no notification. Default: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the disk will be automatically renewed monthly when the account balance is sufficient.
     */
    renewFlag?: string;
    /**
     * newly purchased unit. Default: m.
     */
    timeUnit?: string;
}

export interface LighthouseFirewallRuleFirewallRule {
    /**
     * Valid values are ACCEPT, DROP. Default value is ACCEPT.
     */
    action?: string;
    /**
     * IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
     */
    cidrBlock?: string;
    /**
     * Firewall rule description.
     */
    firewallRuleDescription?: string;
    /**
     * Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
     */
    port?: string;
    /**
     * Protocol. Valid values are TCP, UDP, ICMP, ALL.
     */
    protocol: string;
}

export interface LighthouseFirewallTemplateTemplateRule {
    /**
     * Action. Values: ACCEPT, DROP. The default is `ACCEPT`.
     */
    action?: string;
    /**
     * Network segment or IP (mutually exclusive). The default is `0.0.0.0`, indicating all sources.
     */
    cidrBlock?: string;
    /**
     * Firewall rule description.
     */
    firewallRuleDescription?: string;
    /**
     * Port. Values: ALL, Separate ports, comma-separated discrete ports, minus sign-separated port ranges.
     */
    port?: string;
    /**
     * Protocol. Values: TCP, UDP, ICMP, ALL.
     */
    protocol: string;
}

export interface LighthouseInstanceContainer {
    /**
     * The command to run.
     */
    command?: string;
    /**
     * Container image address.
     */
    containerImage?: string;
    /**
     * Container name.
     */
    containerName?: string;
    /**
     * List of environment variables.
     */
    envs?: outputs.LighthouseInstanceContainerEnv[];
    /**
     * List of mappings of container ports and host ports.
     */
    publishPorts?: outputs.LighthouseInstanceContainerPublishPort[];
    /**
     * List of container mount volumes.
     */
    volumes?: outputs.LighthouseInstanceContainerVolume[];
}

export interface LighthouseInstanceContainerEnv {
    /**
     * Environment variable key.
     */
    key: string;
    /**
     * Environment variable value.
     */
    value: string;
}

export interface LighthouseInstanceContainerPublishPort {
    /**
     * Container port.
     */
    containerPort: number;
    /**
     * Host port.
     */
    hostPort: number;
    /**
     * External IP. It defaults to 0.0.0.0.
     */
    ip?: string;
    /**
     * The protocol defaults to tcp. Valid values: tcp, udp and sctp.
     */
    protocol?: string;
}

export interface LighthouseInstanceContainerVolume {
    /**
     * Container path.
     */
    containerPath: string;
    /**
     * Host path.
     */
    hostPath: string;
}

export interface LighthouseInstanceLoginConfiguration {
    /**
     * whether auto generate password. if false, need set password.
     */
    autoGeneratePassword: string;
    /**
     * Login password.
     */
    password?: string;
}

export interface LighthouseRenewDiskRenewDiskChargePrepaid {
    /**
     * Current instance expiration time. Such as 2018-01-01 00:00:00. Specifying this parameter can align the expiration time of the instance attached to the disk. One of this parameter and Period must be specified, and cannot be specified at the same time.
     */
    curInstanceDeadline?: string;
    /**
     * Renewal period.
     */
    period?: number;
    /**
     * Automatic renewal falg. Value:NOTIFY_AND_AUTO_RENEW: Notice expires and auto-renews.NOTIFY_AND_MANUAL_RENEW: Notification expires without automatic renewal, users need to manually renew.DISABLE_NOTIFY_AND_AUTO_RENEW: No automatic renewal and no notification.Default: NOTIFY_AND_MANUAL_RENEW. If this parameter is specified as NOTIFY_AND_AUTO_RENEW, the disk will be automatically renewed monthly when the account balance is sufficient.
     */
    renewFlag?: string;
    /**
     * newly purchased unit. Default: m.
     */
    timeUnit?: string;
}

export interface LighthouseRenewInstanceInstanceChargePrepaid {
    /**
     * The duration of purchasing an instance. Unit is month. Valid values are (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60).
     */
    period: number;
    /**
     * Automatic renewal logo. Values:
     * - `NOTIFY_AND_AUTO_RENEW`: notify expiration and renew automatically;
     * - `NOTIFY_AND_MANUAL_RENEW`: notification of expiration does not renew automatically. Users need to renew manually;
     * - `DISABLE_NOTIFY_AND_AUTO_RENEW`: no automatic renewal and no notification;
     * Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis after expiration, when the account balance is sufficient.
     */
    renewFlag?: string;
}

export interface MariadbAccountPrivilegesAccounts {
    /**
     * user host.
     */
    host: string;
    /**
     * user name.
     */
    user: string;
}

export interface MariadbAccountPrivilegesColumnPrivilege {
    /**
     * Column name.
     */
    column: string;
    /**
     * Database name.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * Table name.
     */
    table: string;
}

export interface MariadbAccountPrivilegesDatabasePrivilege {
    /**
     * Database name.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
}

export interface MariadbAccountPrivilegesFunctionPrivilege {
    /**
     * Database name.
     */
    database: string;
    /**
     * Function name.
     */
    functionName: string;
    /**
     * Permission information.
     */
    privileges: string[];
}

export interface MariadbAccountPrivilegesProcedurePrivilege {
    /**
     * Database name.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * Procedure name.
     */
    procedure: string;
}

export interface MariadbAccountPrivilegesTablePrivilege {
    /**
     * Database name.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * Table name.
     */
    table: string;
}

export interface MariadbAccountPrivilegesViewPrivilege {
    /**
     * Database name.
     */
    database: string;
    /**
     * Permission information.
     */
    privileges: string[];
    /**
     * View name.
     */
    view: string;
}

export interface MariadbInstanceInitParam {
    /**
     * parameter name.
     */
    param: string;
    /**
     * parameter value.
     */
    value: string;
}

export interface MariadbParametersParam {
    /**
     * parameter name.
     */
    param: string;
    /**
     * parameter value.
     */
    value: string;
}

export interface MdlStreamLiveInputInputSetting {
    /**
     * Application name, which is valid if `Type` is `RTMP_PUSH` and can contain 1-32 letters and digitsNote: This field may return `null`, indicating that no valid value was found.
     */
    appName?: string;
    /**
     * Delayed time (ms) for playback, which is valid if `Type` is `RTMP_PUSH`Value range: 0 (default) or 10000-600000The value must be a multiple of 1,000.Note: This field may return `null`, indicating that no valid value was found.
     */
    delayTime?: number;
    /**
     * RTP/UDP input address, which does not need to be entered for the input parameter.Note: this field may return null, indicating that no valid values can be obtained.
     */
    inputAddress?: string;
    /**
     * The domain of an SRT_PUSH address. If this is a request parameter, you do not need to specify it.Note: This field may return `null`, indicating that no valid value was found.
     */
    inputDomain?: string;
    /**
     * The password, which is used for authentication.Note: This field may return `null`, indicating that no valid value was found.
     */
    password?: string;
    /**
     * Source type for stream pulling and relaying. To pull content from private-read COS buckets under the current account, set this parameter to `TencentCOS`; otherwise, leave it empty.Note: this field may return `null`, indicating that no valid value was found.
     */
    sourceType?: string;
    /**
     * Source URL, which is valid if `Type` is `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL` and can contain 1-512 charactersNote: This field may return `null`, indicating that no valid value was found.
     */
    sourceUrl?: string;
    /**
     * Stream name, which is valid if `Type` is `RTMP_PUSH` and can contain 1-32 letters and digitsNote: This field may return `null`, indicating that no valid value was found.
     */
    streamName?: string;
    /**
     * The username, which is used for authentication.Note: This field may return `null`, indicating that no valid value was found.
     */
    userName?: string;
}

export interface MongodbInstanceAccountAuthRole {
    /**
     * Permission information of the current account. 0: No permission. 1: read-only. 2: Write only. 3: Read and write.
     */
    mask: number;
    /**
     * Refers to the name of the database with the current account permissions.*: Indicates all databases. db.name: Indicates the database of a specific name.
     */
    namespace: string;
}

export interface MongodbInstanceAddNodeList {
    /**
     * The node role that needs to be added.
     * - SECONDARY: Mongod node;
     * - READONLY: read-only node;
     * - MONGOS: Mongos node.
     */
    role: string;
    /**
     * The availability zone corresponding to the node.
     * - single availability zone, where all nodes are in the same availability zone;
     * - multiple availability zones: the current standard specification is the distribution of three availability zones, and the master and slave nodes are not in the same availability zone. You should pay attention to configuring the availability zone corresponding to the new node, and the rule that the number of nodes in any two availability zones is greater than the third availability zone must be met after the addition.
     */
    zone: string;
}

export interface MongodbInstanceBackupDownloadTaskBackupSet {
    /**
     * Replication Id.
     */
    replicaSetId: string;
}

export interface MongodbInstanceBackupTimeouts {
    create?: string;
}

export interface MongodbInstanceRemoveNodeList {
    /**
     * The node ID to delete. The shard cluster must specify the name of the node to be deleted by a group of shards, and the rest of the shards should be grouped and aligned.
     */
    nodeName: string;
    /**
     * The node role that needs to be deleted.
     * - SECONDARY: Mongod node;
     * - READONLY: read-only node;
     * - MONGOS: Mongos node.
     */
    role: string;
    /**
     * The availability zone corresponding to the node.
     * - single availability zone, where all nodes are in the same availability zone;
     * - multiple availability zones: the current standard specification is the distribution of three availability zones, and the master and slave nodes are not in the same availability zone. You should pay attention to configuring the availability zone corresponding to the new node, and the rule that the number of nodes in any two availability zones is greater than the third availability zone must be met after the addition.
     */
    zone: string;
}

export interface MongodbInstanceStandbyInstanceList {
    standbyInstanceId: string;
    standbyInstanceRegion: string;
}

export interface MongodbInstanceTransparentDataEncryptionKeyInfoList {
    createTime: string;
    keyId: string;
    keyName: string;
    keyOrigin: string;
    keyUsage: string;
    status: string;
}

export interface MonitorAlarmNoticeClsNotice {
    /**
     * Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
     */
    enable?: number;
    /**
     * Log collection Id.
     */
    logSetId: string;
    /**
     * Regional.
     */
    region: string;
    /**
     * Theme Id.
     */
    topicId: string;
}

export interface MonitorAlarmNoticeUrlNotice {
    /**
     * Notification End Time Seconds at the start of a day.
     */
    endTime?: number;
    /**
     * If passed verification `0` is no, `1` is yes. Default `0`.
     */
    isValid: number;
    /**
     * Notification Start Time Number of seconds at the start of a day.
     */
    startTime?: number;
    /**
     * Callback URL (limited to 256 characters).
     */
    url: string;
    /**
     * Verification code.
     */
    validationCode?: string;
    /**
     * Notification period 1-7 indicates Monday to Sunday.
     */
    weekdays?: number[];
}

export interface MonitorAlarmNoticeUserNotice {
    /**
     * The number of seconds since the notification end time 00:00:00 (value range 0-86399).
     */
    endTime: number;
    /**
     * User group ID list.
     */
    groupIds?: number[];
    /**
     * Contact notification required 0= No 1= Yes.
     */
    needPhoneArriveNotice?: number;
    /**
     * Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
     */
    noticeWays: string[];
    /**
     * Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
     */
    phoneCallType?: string;
    /**
     * Number of seconds between polls (value range: 60-900).
     */
    phoneCircleInterval?: number;
    /**
     * Number of telephone polls (value range: 1-5).
     */
    phoneCircleTimes?: number;
    /**
     * Number of seconds between calls in a polling session (value range: 60-900).
     */
    phoneInnerInterval?: number;
    /**
     * Telephone polling list.
     */
    phoneOrders?: number[];
    /**
     * Recipient Type USER=User GROUP=User Group.
     */
    receiverType: string;
    /**
     * The number of seconds since the notification start time 00:00:00 (value range 0-86399).
     */
    startTime: number;
    /**
     * User UID List.
     */
    userIds?: number[];
    /**
     * Notification period 1-7 indicates Monday to Sunday.
     */
    weekdays?: number[];
}

export interface MonitorAlarmPolicyConditions {
    /**
     * The and or relation of indicator alarm rule.
     */
    isUnionRule?: number;
    /**
     * A list of metric trigger condition.
     */
    rules?: outputs.MonitorAlarmPolicyConditionsRule[];
}

export interface MonitorAlarmPolicyConditionsRule {
    /**
     * Number of periods.
     */
    continuePeriod: number;
    /**
     * Metric display name, which is used in the output parameter.
     */
    description: string;
    /**
     * Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
     */
    filter?: outputs.MonitorAlarmPolicyConditionsRuleFilter;
    /**
     * Whether the alarm frequency increases exponentially.
     */
    isPowerNotice: number;
    /**
     * Metric name or event name.
     */
    metricName?: string;
    /**
     * Alarm interval in seconds.
     */
    noticeFrequency: number;
    /**
     * Operator.
     */
    operator?: string;
    /**
     * Statistical period in seconds.
     */
    period?: number;
    /**
     * Trigger condition type.
     */
    ruleType: string;
    /**
     * Unit, which is used in the output parameter.
     */
    unit: string;
    /**
     * Threshold.
     */
    value?: string;
}

export interface MonitorAlarmPolicyConditionsRuleFilter {
    /**
     * JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
     */
    dimensions?: string;
    /**
     * Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
     */
    type?: string;
}

export interface MonitorAlarmPolicyEventCondition {
    /**
     * Number of periods.
     */
    continuePeriod: number;
    /**
     * Metric display name, which is used in the output parameter.
     */
    description: string;
    /**
     * Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
     */
    filter?: outputs.MonitorAlarmPolicyEventConditionFilter;
    /**
     * Whether the alarm frequency increases exponentially.
     */
    isPowerNotice: number;
    /**
     * Metric name or event name.
     */
    metricName?: string;
    /**
     * Alarm interval in seconds.
     */
    noticeFrequency: number;
    /**
     * Operator.
     */
    operator?: string;
    /**
     * Statistical period in seconds.
     */
    period?: number;
    /**
     * Trigger condition type.
     */
    ruleType: string;
    /**
     * Unit, which is used in the output parameter.
     */
    unit: string;
    /**
     * Threshold.
     */
    value?: string;
}

export interface MonitorAlarmPolicyEventConditionFilter {
    /**
     * JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
     */
    dimensions?: string;
    /**
     * Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
     */
    type?: string;
}

export interface MonitorAlarmPolicyFilter {
    /**
     * JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
     */
    dimensions?: string;
    /**
     * Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
     */
    type: string;
}

export interface MonitorAlarmPolicyPolicyTag {
    /**
     * Tag key.
     */
    key: string;
    /**
     * Tag value.
     */
    value: string;
}

export interface MonitorAlarmPolicyTriggerTask {
    /**
     * Configuration information in JSON format.
     */
    taskConfig: string;
    /**
     * Triggered task type.
     */
    type: string;
}

export interface MonitorBindingObjectDimension {
    /**
     * Represents a collection of dimensions of an object instance, json format.eg:'{"unInstanceId":"ins-ot3cq4bi"}'.
     */
    dimensionsJson: string;
    /**
     * Object unique ID.
     */
    uniqueId: string;
}

export interface MonitorBindingReceiverReceivers {
    /**
     * End of alarm period. Meaning with `start_time`.
     */
    endTime?: number;
    /**
     * Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
     */
    notifyWays: string[];
    /**
     * Alert sending language. Optional `en-US`,`zh-CN`.
     */
    receiveLanguage?: string;
    /**
     * Alarm receive group ID list.
     */
    receiverGroupLists?: number[];
    /**
     * Receive type. Optional `group`,`user`.
     */
    receiverType: string;
    /**
     * Alarm receiver ID list.
     */
    receiverUserLists?: number[];
    /**
     * Alarm period start time. Valid value ranges: (0~86399). which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
     */
    startTime?: number;
}

export interface MonitorGrafanaSsoAccountRole {
    /**
     * Grafana organization id string.
     */
    organization: string;
    /**
     * Grafana role, one of {Admin,Editor,Viewer}.
     */
    role: string;
}

export interface MonitorPolicyBindingObjectDimension {
    /**
     * Represents a collection of dimensions of an object instance, json format.eg:'{"unInstanceId":"ins-ot3cq4bi"}'.
     */
    dimensionsJson: string;
    /**
     * Object unique ID.
     */
    uniqueId: string;
}

export interface MonitorPolicyGroupBindingObject {
    dimensionsJson: string;
    isShielded: number;
    region: string;
    uniqueId: string;
}

export interface MonitorPolicyGroupCondition {
    /**
     * Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
     */
    alarmNotifyPeriod: number;
    /**
     * Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
     */
    alarmNotifyType: number;
    /**
     * Data aggregation cycle (unit of second), if the metric has a default value can not be filled, refer to `data.tencentcloud_monitor_policy_conditions(period_keys)`.
     */
    calcPeriod: number;
    /**
     * Compare type. Valid value ranges: [1~12]. `1` means more than, `2` means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell, refer to `data.tencentcloud_monitor_policy_conditions(calc_type_keys)`.
     */
    calcType: number;
    /**
     * Threshold value, refer to `data.tencentcloud_monitor_policy_conditions(calc_value_*)`.
     */
    calcValue: number;
    /**
     * The rule triggers an alert that lasts for several detection cycles, refer to `data.tencentcloud_monitor_policy_conditions(period_num_keys)`.
     */
    continuePeriod: number;
    /**
     * Id of the metric, refer to `data.tencentcloud_monitor_policy_conditions(metric_id)`.
     */
    metricId: number;
}

export interface MonitorPolicyGroupEventCondition {
    /**
     * Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
     */
    alarmNotifyPeriod: number;
    /**
     * Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
     */
    alarmNotifyType: number;
    /**
     * The ID of this event metric, refer to `data.tencentcloud_monitor_policy_conditions(event_id).
     */
    eventId: number;
}

export interface MonitorPolicyGroupReceiver {
    endTime: number;
    needSendNotice: number;
    notifyWays: string[];
    personInterval: number;
    receiveLanguage: string;
    receiverGroupLists: number[];
    receiverType: string;
    receiverUserLists: number[];
    recoverNotifies: string[];
    roundInterval: number;
    roundNumber: number;
    sendFors: string[];
    startTime: number;
    uidLists: number[];
}

export interface MonitorTmpAlertGroupCustomReceiver {
    /**
     * Time ranges which allow alert message send.
     */
    allowedTimeRanges?: outputs.MonitorTmpAlertGroupCustomReceiverAllowedTimeRange[];
    /**
     * Only effect when alertmanager in user cluster, this cluster id.
     */
    clusterId?: string;
    /**
     * Only effect when alertmanager in user cluster, this cluster type (tke|eks|tdcc).
     */
    clusterType?: string;
    /**
     * Custom receiver type, webhook|alertmanager.
     */
    type?: string;
    /**
     * Custom receiver address, can be accessed by process in prometheus instance subnet.
     */
    url?: string;
}

export interface MonitorTmpAlertGroupCustomReceiverAllowedTimeRange {
    /**
     * Time range end, seconds since 0 o'clock.
     */
    end?: string;
    /**
     * Time range start, seconds since 0 o'clock.
     */
    start?: string;
}

export interface MonitorTmpAlertGroupRule {
    /**
     * Annotation of alert rule. `summary`, `description` is special annotation in prometheus, mapping `Alarm Object`, `Alarm Information` in alarm message.
     */
    annotations?: {[key: string]: string};
    /**
     * Rule alarm duration.
     */
    duration?: string;
    /**
     * Prometheus alert expression.
     */
    expr?: string;
    /**
     * Labels of alert rule.
     */
    labels?: {[key: string]: string};
    /**
     * Alert rule name.
     */
    ruleName?: string;
    /**
     * Rule state. `2`-enable, `3`-disable, default `2`.
     */
    state?: number;
}

export interface MonitorTmpAlertRuleAnnotation {
    /**
     * key.
     */
    key: string;
    /**
     * value.
     */
    value: string;
}

export interface MonitorTmpAlertRuleLabel {
    /**
     * key.
     */
    key: string;
    /**
     * value.
     */
    value: string;
}

export interface MonitorTmpTkeAlertPolicyAlertRule {
    /**
     * If the alarm policy is derived from the CRD resource definition of the user cluster, the ClusterId is the cluster ID to which it belongs.
     */
    clusterId?: string;
    /**
     * Alarm policy ID. Note: This field may return null, indicating that a valid value could not be retrieved.
     */
    id?: string;
    /**
     * Policy name.
     */
    name: string;
    /**
     * Alarm channels, which may be returned using null in the template.
     */
    notification?: outputs.MonitorTmpTkeAlertPolicyAlertRuleNotification;
    /**
     * A list of rules.
     */
    rules: outputs.MonitorTmpTkeAlertPolicyAlertRuleRule[];
    /**
     * If the alarm is sent from a template, the TemplateId is the template id.
     */
    templateId?: string;
    /**
     * Last modified time.
     */
    updatedAt?: string;
}

export interface MonitorTmpTkeAlertPolicyAlertRuleNotification {
    /**
     * If Type is alertmanager, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved..
     */
    alertManager?: outputs.MonitorTmpTkeAlertPolicyAlertRuleNotificationAlertManager;
    /**
     * Whether it is enabled.
     */
    enabled: boolean;
    /**
     * Alarm notification method. At present, there are SMS, EMAIL, CALL, WECHAT methods.
     */
    notifyWays?: string[];
    /**
     * Telephone alerts reach notifications.
     */
    phoneArriveNotice?: boolean;
    /**
     * Effective end timeTelephone alarm wheel interval. Units: Seconds.
     */
    phoneCircleInterval?: number;
    /**
     * PhoneCircleTimes.
     */
    phoneCircleTimes?: number;
    /**
     * Telephone alarm wheel intervals. Units: Seconds.
     */
    phoneInnerInterval?: number;
    /**
     * Telephone alarm sequence.
     */
    phoneNotifyOrders?: number[];
    /**
     * Alert Receiving Group (User Group).
     */
    receiverGroups?: string[];
    /**
     * Convergence time.
     */
    repeatInterval?: string;
    /**
     * Effective end time.
     */
    timeRangeEnd?: string;
    /**
     * The time from which it takes effect.
     */
    timeRangeStart?: string;
    /**
     * The channel type, which defaults to amp, supports the following `amp`, `webhook`, `alertmanager`.
     */
    type: string;
    /**
     * If Type is webhook, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved.
     */
    webHook?: string;
}

export interface MonitorTmpTkeAlertPolicyAlertRuleNotificationAlertManager {
    /**
     * The ID of the cluster where the alertmanager is deployed. Note: This field may return null, indicating that a valid value could not be retrieved.
     */
    clusterId?: string;
    /**
     * Alertmanager is deployed in the cluster type. Note: This field may return null, indicating that a valid value could not be retrieved.
     */
    clusterType?: string;
    /**
     * Alertmanager url.
     */
    url: string;
}

export interface MonitorTmpTkeAlertPolicyAlertRuleRule {
    /**
     * Refer to annotations in prometheus rule.
     */
    annotations?: outputs.MonitorTmpTkeAlertPolicyAlertRuleRuleAnnotation[];
    /**
     * A description of the rule.
     */
    describe?: string;
    /**
     * Time of duration.
     */
    for: string;
    /**
     * Extra labels.
     */
    labels: outputs.MonitorTmpTkeAlertPolicyAlertRuleRuleLabel[];
    /**
     * Rule name.
     */
    name: string;
    /**
     * Prometheus statement.
     */
    rule: string;
    /**
     * Alarm rule status.
     */
    ruleState?: number;
    /**
     * Alert sending template.
     */
    template: string;
}

export interface MonitorTmpTkeAlertPolicyAlertRuleRuleAnnotation {
    /**
     * Name of map.
     */
    name: string;
    /**
     * Value of map.
     */
    value: string;
}

export interface MonitorTmpTkeAlertPolicyAlertRuleRuleLabel {
    /**
     * Name of map.
     */
    name: string;
    /**
     * Value of map.
     */
    value: string;
}

export interface MonitorTmpTkeClusterAgentAgents {
    /**
     * An id identify the cluster, like `cls-xxxxxx`.
     */
    clusterId: string;
    /**
     * the name of the cluster.
     */
    clusterName: string;
    /**
     * Type of cluster.
     */
    clusterType: string;
    /**
     * Whether to enable the public network CLB.
     */
    enableExternal: boolean;
    /**
     * All metrics collected by the cluster will carry these labels.
     */
    externalLabels?: outputs.MonitorTmpTkeClusterAgentAgentsExternalLabel[];
    /**
     * Pod configuration for components deployed in the cluster.
     */
    inClusterPodConfig?: outputs.MonitorTmpTkeClusterAgentAgentsInClusterPodConfig;
    /**
     * Whether to install the default collection configuration.
     */
    notInstallBasicScrape?: boolean;
    /**
     * Whether to collect indicators, true means drop all indicators, false means collect default indicators.
     */
    notScrape?: boolean;
    /**
     * Limitation of region.
     */
    region: string;
    /**
     * agent state, `normal`, `abnormal`.
     */
    status: string;
}

export interface MonitorTmpTkeClusterAgentAgentsExternalLabel {
    /**
     * Indicator name.
     */
    name: string;
    /**
     * Index value.
     */
    value?: string;
}

export interface MonitorTmpTkeClusterAgentAgentsInClusterPodConfig {
    /**
     * Whether to use HostNetWork.
     */
    hostNet: boolean;
    /**
     * Specify the pod to run the node.
     */
    nodeSelectors?: outputs.MonitorTmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector[];
    /**
     * Tolerate Stain.
     */
    tolerations?: outputs.MonitorTmpTkeClusterAgentAgentsInClusterPodConfigToleration[];
}

export interface MonitorTmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector {
    /**
     * The pod configuration name of the component deployed in the cluster.
     */
    name?: string;
    /**
     * Pod configuration values for components deployed in the cluster.
     */
    value?: string;
}

export interface MonitorTmpTkeClusterAgentAgentsInClusterPodConfigToleration {
    /**
     * blemish effect to match.
     */
    effect?: string;
    /**
     * The taint key to which the tolerance applies.
     */
    key?: string;
    /**
     * key-value relationship.
     */
    operator?: string;
}

export interface MonitorTmpTkeConfigPodMonitor {
    /**
     * Config.
     */
    config: string;
    /**
     * Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
     */
    name: string;
    /**
     * Used for output parameters, if the configuration comes from a template, it is the template id.
     */
    templateId?: string;
}

export interface MonitorTmpTkeConfigRawJob {
    /**
     * Config.
     */
    config: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Used for output parameters, if the configuration comes from a template, it is the template id.
     */
    templateId?: string;
}

export interface MonitorTmpTkeConfigServiceMonitor {
    /**
     * Config.
     */
    config: string;
    /**
     * Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
     */
    name: string;
    /**
     * Used for output parameters, if the configuration comes from a template, it is the template id.
     */
    templateId?: string;
}

export interface MonitorTmpTkeGlobalNotificationNotification {
    /**
     * Alert manager, if Type is `alertmanager`, this field is required.
     */
    alertManagers?: outputs.MonitorTmpTkeGlobalNotificationNotificationAlertManager[];
    /**
     * Alarm notification switch.
     */
    enabled: boolean;
    /**
     * Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
     */
    notifyWays?: string[];
    /**
     * Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
     */
    phoneArriveNotice?: boolean;
    /**
     * Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
     */
    phoneCircleInterval?: number;
    /**
     * Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
     */
    phoneCircleTimes?: number;
    /**
     * Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
     */
    phoneInnerInterval?: number;
    /**
     * Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
     */
    phoneNotifyOrders?: number[];
    /**
     * Alarm receiving group(user group).
     */
    receiverGroups?: string[];
    /**
     * Convergence time.
     */
    repeatInterval?: string;
    /**
     * Effective end time.
     */
    timeRangeEnd?: string;
    /**
     * Effective start time.
     */
    timeRangeStart?: string;
    /**
     * Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
     */
    type: string;
    /**
     * Web hook, if Type is `webhook`, this field is required.
     */
    webHook?: string;
}

export interface MonitorTmpTkeGlobalNotificationNotificationAlertManager {
    /**
     * Cluster id.
     */
    clusterId?: string;
    /**
     * Cluster type.
     */
    clusterType?: string;
    /**
     * Alert manager url.
     */
    url: string;
}

export interface MonitorTmpTkeTemplateAttachmentTargets {
    /**
     * ID of the cluster.
     */
    clusterId?: string;
    /**
     * Name the cluster.
     */
    clusterName?: string;
    /**
     * Cluster type.
     */
    clusterType?: string;
    /**
     * instance id.
     */
    instanceId: string;
    /**
     * Name of the prometheus instance.
     */
    instanceName?: string;
    /**
     * target area.
     */
    region: string;
    /**
     * Last sync template time.
     */
    syncTime?: string;
    /**
     * Template version currently in use.
     */
    version?: string;
}

export interface MonitorTmpTkeTemplateTemplate {
    /**
     * Template description.
     */
    describe: string;
    /**
     * Whether the system-supplied default template is used for outgoing references.
     */
    isDefault?: boolean;
    /**
     * Template dimensions, the following types are supported `instance` instance level, `cluster` cluster level.
     */
    level: string;
    /**
     * Template name.
     */
    name: string;
    /**
     * Effective when Level is a cluster, A list of PodMonitors rules in the template.
     */
    podMonitors?: outputs.MonitorTmpTkeTemplateTemplatePodMonitor[];
    /**
     * Effective when Level is a cluster, A list of RawJobs rules in the template.
     */
    rawJobs?: outputs.MonitorTmpTkeTemplateTemplateRawJob[];
    /**
     * Effective when Level is instance, A list of aggregation rules in the template.
     */
    recordRules?: outputs.MonitorTmpTkeTemplateTemplateRecordRule[];
    /**
     * Effective when Level is a cluster, A list of ServiceMonitor rules in the template.
     */
    serviceMonitors?: outputs.MonitorTmpTkeTemplateTemplateServiceMonitor[];
    /**
     * The ID of the template, which is used for the outgoing reference.
     */
    templateId?: string;
    /**
     * Last updated, for outgoing references.
     */
    updateTime?: string;
    /**
     * Whether the system-supplied default template is used for outgoing references.
     */
    version?: string;
}

export interface MonitorTmpTkeTemplateTemplatePodMonitor {
    /**
     * Config.
     */
    config: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Used for the argument, if the configuration comes to the template, the template id.
     */
    templateId?: string;
}

export interface MonitorTmpTkeTemplateTemplateRawJob {
    /**
     * Config.
     */
    config: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Used for the argument, if the configuration comes to the template, the template id.
     */
    templateId?: string;
}

export interface MonitorTmpTkeTemplateTemplateRecordRule {
    /**
     * Config.
     */
    config: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Used for the argument, if the configuration comes to the template, the template id.
     */
    templateId?: string;
}

export interface MonitorTmpTkeTemplateTemplateServiceMonitor {
    /**
     * Config.
     */
    config: string;
    /**
     * Name.
     */
    name: string;
    /**
     * Used for the argument, if the configuration comes to the template, the template id.
     */
    templateId?: string;
}

export interface MpsAdaptiveDynamicStreamingTemplateStreamInfo {
    /**
     * Audio parameter information.
     */
    audio: outputs.MpsAdaptiveDynamicStreamingTemplateStreamInfoAudio;
    /**
     * Whether to remove audio stream, value:0: reserved.1: remove.
     */
    removeAudio?: number;
    /**
     * Whether to remove video stream, value:0: reserved.1: remove.
     */
    removeVideo?: number;
    /**
     * Video parameter information.
     */
    video: outputs.MpsAdaptiveDynamicStreamingTemplateStreamInfoVideo;
}

export interface MpsAdaptiveDynamicStreamingTemplateStreamInfoAudio {
    /**
     * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
     */
    audioChannel?: number;
    /**
     * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
     */
    bitrate: number;
    /**
     * Encoding format of audio stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
     */
    codec: string;
    /**
     * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
     */
    sampleRate: number;
}

export interface MpsAdaptiveDynamicStreamingTemplateStreamInfoVideo {
    /**
     * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
     */
    bitrate: number;
    /**
     * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
     */
    codec: string;
    /**
     * Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and use Gaussian blur for the rest of the edge.Default value: black.Note: Adaptive stream only supports stretch, black.
     */
    fillType?: string;
    /**
     * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
     */
    fps: number;
    /**
     * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
     */
    gop?: number;
    /**
     * The maximum value of the height (or short side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
     */
    height?: number;
    /**
     * Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.Note: In adaptive mode, Width cannot be smaller than Height.
     */
    resolutionAdaptive?: string;
    /**
     * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
     */
    vcrf?: number;
    /**
     * The maximum value of the width (or long side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
     */
    width?: number;
}

export interface MpsAiAnalysisTemplateClassificationConfigure {
    /**
     * Ai classification task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiAnalysisTemplateCoverConfigure {
    /**
     * Ai cover task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiAnalysisTemplateFrameTagConfigure {
    /**
     * Ai frame tag task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiAnalysisTemplateTagConfigure {
    /**
     * Ai tag task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiRecognitionTemplateAsrFullTextConfigure {
    /**
     * Generated subtitle file format, if left blank or blank string means no subtitle file will be generated, optional value:vtt: Generate WebVTT subtitle files.
     */
    subtitleFormat?: string;
    /**
     * Asr full text recognition task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiRecognitionTemplateAsrWordsConfigure {
    /**
     * Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
     */
    labelSets?: string[];
    /**
     * Asr word recognition task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiRecognitionTemplateFaceConfigure {
    /**
     * Default face filter tag, specify the tag of the default face that needs to be returned. If not filled or empty, all default face results will be returned. Label optional value:entertainment, sport, politician.
     */
    defaultLibraryLabelSets?: string[];
    /**
     * Face library selection, optional value:Default, UserDefine, AllDefault value: All, use the system default face library and user-defined face library.
     */
    faceLibrary?: string;
    /**
     * Face recognition filter score, when the recognition result reaches the score above, the recognition result will be returned. The default is 95 points. Value range: 0 - 100.
     */
    score?: number;
    /**
     * Ai face recognition task switch, optional value:ON/OFF.
     */
    switch: string;
    /**
     * User-defined face filter tag, specify the tag of the user-defined face that needs to be returned. If not filled or empty, all custom face results will be returned.The maximum number of tags is 100, and the length of each tag is up to 16 characters.
     */
    userDefineLibraryLabelSets?: string[];
}

export interface MpsAiRecognitionTemplateOcrFullTextConfigure {
    /**
     * Ocr full text recognition task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsAiRecognitionTemplateOcrWordsConfigure {
    /**
     * Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
     */
    labelSets?: string[];
    /**
     * Ocr words recognition task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplatePoliticalConfigure {
    /**
     * Political asr control parameters.
     */
    asrReviewInfo?: outputs.MpsContentReviewTemplatePoliticalConfigureAsrReviewInfo;
    /**
     * Political image control parameters.
     */
    imgReviewInfo?: outputs.MpsContentReviewTemplatePoliticalConfigureImgReviewInfo;
    /**
     * Political ocr control parameters.
     */
    ocrReviewInfo?: outputs.MpsContentReviewTemplatePoliticalConfigureOcrReviewInfo;
}

export interface MpsContentReviewTemplatePoliticalConfigureAsrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Political asr task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplatePoliticalConfigureImgReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 97 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * Political image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:violation_photo, politician, entertainment, sport, entrepreneur, scholar, celebrity, military.
     */
    labelSets?: string[];
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 95 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Political image task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplatePoliticalConfigureOcrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Political ocr task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplatePornConfigure {
    /**
     * Voice pornography control parameters.
     */
    asrReviewInfo?: outputs.MpsContentReviewTemplatePornConfigureAsrReviewInfo;
    /**
     * Porn image Identification Control Parameters.
     */
    imgReviewInfo?: outputs.MpsContentReviewTemplatePornConfigureImgReviewInfo;
    /**
     * Ocr pornography control parameters.
     */
    ocrReviewInfo?: outputs.MpsContentReviewTemplatePornConfigureOcrReviewInfo;
}

export interface MpsContentReviewTemplatePornConfigureAsrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Voice pornography task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplatePornConfigureImgReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * Porn image filter label, if the review result contains the selected label, the result will be returned. If the filter label is empty, all the review results will be returned. The optional value is:porn, vulgar, intimacy, sexy.
     */
    labelSets?: string[];
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 0. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Porn screen task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplatePornConfigureOcrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Ocr pornography task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateProhibitedConfigure {
    /**
     * Voice Prohibition Control Parameters.Note: This field may return null, indicating that no valid value can be obtained.
     */
    asrReviewInfo?: outputs.MpsContentReviewTemplateProhibitedConfigureAsrReviewInfo;
    /**
     * Ocr Prohibition Control Parameters.Note: This field may return null, indicating that no valid value can be obtained.
     */
    ocrReviewInfo?: outputs.MpsContentReviewTemplateProhibitedConfigureOcrReviewInfo;
}

export interface MpsContentReviewTemplateProhibitedConfigureAsrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Voice Prohibition task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateProhibitedConfigureOcrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Ocr Prohibition task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateTerrorismConfigure {
    /**
     * Terrorism image task control parameters.
     */
    imgReviewInfo?: outputs.MpsContentReviewTemplateTerrorismConfigureImgReviewInfo;
    /**
     * Ocr terrorism task Control Parameters.
     */
    ocrReviewInfo: outputs.MpsContentReviewTemplateTerrorismConfigureOcrReviewInfo;
}

export interface MpsContentReviewTemplateTerrorismConfigureImgReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
     */
    labelSets?: string[];
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Terrorism image task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateTerrorismConfigureOcrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * Ocr terrorism image task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateUserDefineConfigure {
    /**
     * User-defined asr text review control parameters.
     */
    asrReviewInfo?: outputs.MpsContentReviewTemplateUserDefineConfigureAsrReviewInfo;
    /**
     * User-defined face review control parameters.
     */
    faceReviewInfo?: outputs.MpsContentReviewTemplateUserDefineConfigureFaceReviewInfo;
    /**
     * User-defined ocr text review control parameters.
     */
    ocrReviewInfo?: outputs.MpsContentReviewTemplateUserDefineConfigureOcrReviewInfo;
}

export interface MpsContentReviewTemplateUserDefineConfigureAsrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * User-defined asr tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a asr library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
     */
    labelSets?: string[];
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * User-defined asr review task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateUserDefineConfigureFaceReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * User-defined face review tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a face library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
     */
    labelSets?: string[];
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * User-defined face review task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsContentReviewTemplateUserDefineConfigureOcrReviewInfo {
    /**
     * The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
     */
    blockConfidence?: number;
    /**
     * User-defined ocr tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a ocr library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
     */
    labelSets?: string[];
    /**
     * The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
     */
    reviewConfidence?: number;
    /**
     * User-defined ocr text review task switch, optional value:ON/OFF.
     */
    switch: string;
}

export interface MpsEditMediaOperationFileInfo {
    /**
     * End time offset of video clipping in seconds.
     */
    endTimeOffset?: number;
    /**
     * Video input information.
     */
    inputInfo: outputs.MpsEditMediaOperationFileInfoInputInfo;
    /**
     * Start time offset of video clipping in seconds.
     */
    startTimeOffset?: number;
}

export interface MpsEditMediaOperationFileInfoInputInfo {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsEditMediaOperationFileInfoInputInfoCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsEditMediaOperationFileInfoInputInfoS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsEditMediaOperationFileInfoInputInfoUrlInputInfo;
}

export interface MpsEditMediaOperationFileInfoInputInfoCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsEditMediaOperationFileInfoInputInfoS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsEditMediaOperationFileInfoInputInfoUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsEditMediaOperationOutputConfig {
    /**
     * Format. Valid values: `mp4` (default), `hls`, `mov`, `flv`, `avi`.
     */
    container?: string;
    /**
     * The editing mode. Valid values are `normal` and `fast`. The default is `normal`, which indicates precise editing.
     */
    type?: string;
}

export interface MpsEditMediaOperationOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsEditMediaOperationOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsEditMediaOperationOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS. `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsEditMediaOperationOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsEditMediaOperationOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsEditMediaOperationTaskNotifyConfig {
    /**
     * The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
     */
    awsSqs?: outputs.MpsEditMediaOperationTaskNotifyConfigAwsSqs;
    /**
     * The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
     */
    cmqModel?: string;
    /**
     * The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
     */
    cmqRegion?: string;
    /**
     * Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
     */
    notifyMode?: string;
    /**
     * The notification type. Valid values: `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead. `TDMQ-CMQ`: Message queue. `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API. `SCF`: This notification type is not recommended. You need to configure it in the SCF console. `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket. If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
     */
    notifyType?: string;
    /**
     * HTTP callback URL, required if `NotifyType` is set to `URL`.
     */
    notifyUrl?: string;
    /**
     * The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
     */
    queueName?: string;
    /**
     * The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
     */
    topicName?: string;
}

export interface MpsEditMediaOperationTaskNotifyConfigAwsSqs {
    /**
     * The key ID required to read from/write to the SQS queue.
     */
    s3SecretId?: string;
    /**
     * The key required to read from/write to the SQS queue.
     */
    s3SecretKey?: string;
    /**
     * The name of the SQS queue.
     */
    sqsQueueName: string;
    /**
     * The region of the SQS queue.
     */
    sqsRegion: string;
}

export interface MpsFlowInputGroup {
    /**
     * The input IP whitelist, the format is CIDR.
     */
    allowIpLists?: string[];
    /**
     * Input description with a length of [0, 255].
     */
    description?: string;
    /**
     * The active/standby switch of the input, [OPEN|CLOSE] is optional, and the default is CLOSE.
     */
    failOver: string;
    /**
     * Input HLS_PULL configuration information.
     */
    hlsPullSettings?: outputs.MpsFlowInputGroupHlsPullSettings;
    /**
     * Input name, you can fill in uppercase and lowercase letters, numbers and underscores, and the length is [1, 32].
     */
    inputName: string;
    /**
     * Input protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
     */
    protocol: string;
    /**
     * Delay broadcast smooth streaming configuration information.
     */
    resilientStream?: outputs.MpsFlowInputGroupResilientStream;
    /**
     * Input RTMP_PULL configuration information.
     */
    rtmpPullSettings?: outputs.MpsFlowInputGroupRtmpPullSettings;
    /**
     * RTP configuration information.
     */
    rtpSettings?: outputs.MpsFlowInputGroupRtpSettings;
    /**
     * Input RTSP_PULL configuration information.
     */
    rtspPullSettings?: outputs.MpsFlowInputGroupRtspPullSettings;
    /**
     * The input SRT configuration information.
     */
    srtSettings?: outputs.MpsFlowInputGroupSrtSettings;
}

export interface MpsFlowInputGroupHlsPullSettings {
    /**
     * There is only one origin address of the HLS origin station.
     */
    sourceAddresses: outputs.MpsFlowInputGroupHlsPullSettingsSourceAddress[];
}

export interface MpsFlowInputGroupHlsPullSettingsSourceAddress {
    /**
     * The URL address of the HLS origin site.
     */
    url: string;
}

export interface MpsFlowInputGroupResilientStream {
    /**
     * Delay time, in seconds, currently supports a range of 10 to 300 seconds. Note: This field may return null, indicating that no valid value can be obtained.
     */
    bufferTime?: number;
    /**
     * Whether to enable the delayed broadcast smooth spit stream, true is enabled, false is not enabled, and the default is not enabled. Note: This field may return null, indicating that no valid value can be obtained.
     */
    enable?: boolean;
}

export interface MpsFlowInputGroupRtmpPullSettings {
    /**
     * The source site address of the RTMP source site, there can only be one.
     */
    sourceAddresses: outputs.MpsFlowInputGroupRtmpPullSettingsSourceAddress[];
}

export interface MpsFlowInputGroupRtmpPullSettingsSourceAddress {
    /**
     * StreamKey information of the RTMP source site.
     */
    streamKey: string;
    /**
     * TcUrl address of the RTMP source server.
     */
    tcUrl: string;
}

export interface MpsFlowInputGroupRtpSettings {
    /**
     * Defaults to none, optional values[none].
     */
    fec: string;
    /**
     * Idle timeout, the default is 5000, the unit is ms, and the range is [1000, 10000].
     */
    idleTimeout: number;
}

export interface MpsFlowInputGroupRtspPullSettings {
    /**
     * The source site address of the RTSP source site, there can only be one.
     */
    sourceAddresses: outputs.MpsFlowInputGroupRtspPullSettingsSourceAddress[];
}

export interface MpsFlowInputGroupRtspPullSettingsSourceAddress {
    /**
     * The URL address of the RTSP source site.
     */
    url: string;
}

export interface MpsFlowInputGroupSrtSettings {
    /**
     * Delay, default 0, unit ms, range [0, 3000].
     */
    latency: number;
    /**
     * SRT mode, optional [LISTENER|CALLER], default is LISTENER.
     */
    mode: string;
    /**
     * The decryption key, which is empty by default, means no encryption. Only ascii code values can be filled in, and the length is [10, 79].
     */
    passphrase: string;
    /**
     * Key length, default is 0, optional [0|16|24|32].
     */
    pbKeyLen: number;
    /**
     * Peer timeout, default is 5000, unit ms, range is [1000, 10000].
     */
    peerIdleTimeout: number;
    /**
     * Peer delay, the default is 0, the unit is ms, and the range is [0, 3000].
     */
    peerLatency: number;
    /**
     * Receiving delay, default is 120, unit ms, range is [0, 3000].
     */
    recvLatency: number;
    /**
     * SRT peer address, required when Mode is CALLER, and only 1 set can be filled in.
     */
    sourceAddresses?: outputs.MpsFlowInputGroupSrtSettingsSourceAddress[];
    /**
     * Stream ID, optional uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-), length 0~512. For specific format, please refer to:https://github.com/Haivision/srt/blob/master/docs/features/access-control.md#standard-keys.
     */
    streamId: string;
}

export interface MpsFlowInputGroupSrtSettingsSourceAddress {
    /**
     * Peer IP.
     */
    ip: string;
    /**
     * Peer port.
     */
    port: number;
}

export interface MpsInputInputGroup {
    /**
     * The input IP whitelist, the format is CIDR.
     */
    allowIpLists: string[];
    /**
     * The input description with a length of [0, 255].
     */
    description?: string;
    /**
     * The active/standby switch of the input, [OPEN|CLOSE] is optional, and the default is CLOSE.
     */
    failOver: string;
    /**
     * Input HLS_PULL configuration information.
     */
    hlsPullSettings?: outputs.MpsInputInputGroupHlsPullSettings;
    /**
     * The input name, you can fill in uppercase and lowercase letters, numbers and underscores, and the length is [1, 32].
     */
    inputName: string;
    /**
     * Input protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
     */
    protocol: string;
    /**
     * Delay broadcast smooth streaming configuration information.
     */
    resilientStream?: outputs.MpsInputInputGroupResilientStream;
    /**
     * Input RTMP_PULL configuration information.
     */
    rtmpPullSettings?: outputs.MpsInputInputGroupRtmpPullSettings;
    /**
     * Input RTP configuration information.
     */
    rtpSettings?: outputs.MpsInputInputGroupRtpSettings;
    /**
     * Input RTSP_PULL configuration information.
     */
    rtspPullSettings?: outputs.MpsInputInputGroupRtspPullSettings;
    /**
     * The input SRT configuration information.
     */
    srtSettings?: outputs.MpsInputInputGroupSrtSettings;
}

export interface MpsInputInputGroupHlsPullSettings {
    /**
     * There is only one origin address of the HLS origin station.
     */
    sourceAddresses: outputs.MpsInputInputGroupHlsPullSettingsSourceAddress[];
}

export interface MpsInputInputGroupHlsPullSettingsSourceAddress {
    /**
     * The URL address of the HLS origin site.
     */
    url: string;
}

export interface MpsInputInputGroupResilientStream {
    /**
     * Delay time, in seconds, currently supports a range of 10 to 300 seconds. Note: This field may return null, indicating that no valid value can be obtained.
     */
    bufferTime?: number;
    /**
     * Whether to enable the delayed broadcast smooth spit stream, true is enabled, false is not enabled, and the default is not enabled. Note: This field may return null, indicating that no valid value can be obtained.
     */
    enable?: boolean;
}

export interface MpsInputInputGroupRtmpPullSettings {
    /**
     * The source site address of the RTMP source site, there can only be one.
     */
    sourceAddresses: outputs.MpsInputInputGroupRtmpPullSettingsSourceAddress[];
}

export interface MpsInputInputGroupRtmpPullSettingsSourceAddress {
    /**
     * StreamKey information of the RTMP source site.
     */
    streamKey: string;
    /**
     * TcUrl address of the RTMP source server.
     */
    tcUrl: string;
}

export interface MpsInputInputGroupRtpSettings {
    /**
     * Defaults to &#39;none&#39;, optional values[&#39;none&#39;].
     */
    fec: string;
    /**
     * Idle timeout, the default is 5000, the unit is ms, and the range is [1000, 10000].
     */
    idleTimeout: number;
}

export interface MpsInputInputGroupRtspPullSettings {
    /**
     * The source site address of the RTSP source site, there can only be one.
     */
    sourceAddresses: outputs.MpsInputInputGroupRtspPullSettingsSourceAddress[];
}

export interface MpsInputInputGroupRtspPullSettingsSourceAddress {
    /**
     * The URL address of the RTSP source site.
     */
    url: string;
}

export interface MpsInputInputGroupSrtSettings {
    /**
     * Delay, default 0, unit ms, range [0, 3000].
     */
    latency: number;
    /**
     * SRT mode, optional [LISTENER|CALLER], default is LISTENER.
     */
    mode: string;
    /**
     * The decryption key, which is empty by default, means no encryption. Only ascii code values can be filled in, and the length is [10, 79].
     */
    passphrase: string;
    /**
     * Key length, default is 0, optional [0|16|24|32].
     */
    pbKeyLen: number;
    /**
     * Peer timeout, default is 5000, unit ms, range is [1000, 10000].
     */
    peerIdleTimeout: number;
    /**
     * Peer delay, the default is 0, the unit is ms, and the range is [0, 3000].
     */
    peerLatency: number;
    /**
     * Receiving delay, default is 120, unit ms, range is [0, 3000].
     */
    recvLatency: number;
    /**
     * SRT peer address, required when Mode is CALLER, and only 1 set can be filled in.
     */
    sourceAddresses?: outputs.MpsInputInputGroupSrtSettingsSourceAddress[];
    /**
     * Stream ID, optional uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-), length 0~512. Specific format can refer to:https://github.com/Haivision/srt/blob/master/docs/features/access-control.md#standard-keys.
     */
    streamId: string;
}

export interface MpsInputInputGroupSrtSettingsSourceAddress {
    /**
     * Peer IP.
     */
    ip: string;
    /**
     * Peer port.
     */
    port: number;
}

export interface MpsOutputOutput {
    /**
     * IP whitelist list, the format is CIDR, such as 0.0.0.0/0. When the Protocol is RTMP_PULL, it is valid, and if it is empty, it means that the client IP is not limited.
     */
    allowIpLists: string[];
    /**
     * Output description.
     */
    description: string;
    /**
     * The maximum number of concurrent pull streams, the maximum is 4, and the default is 4. Only SRT or RTMP_PULL can set this parameter.
     */
    maxConcurrent?: number;
    /**
     * The name of the output.
     */
    outputName: string;
    /**
     * Output region.
     */
    outputRegion: string;
    /**
     * Output protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
     */
    protocol: string;
    /**
     * Output RTMP configuration.
     */
    rtmpSettings?: outputs.MpsOutputOutputRtmpSettings;
    /**
     * Output RTP configuration.
     */
    rtpSettings?: outputs.MpsOutputOutputRtpSettings;
    /**
     * configuration of the output SRT.
     */
    srtSettings?: outputs.MpsOutputOutputSrtSettings;
}

export interface MpsOutputOutputRtmpSettings {
    /**
     * RTMP Chunk size, range is [4096, 40960].
     */
    chunkSize?: number;
    /**
     * The target address of the relay can be filled in 1~2.
     */
    destinations: outputs.MpsOutputOutputRtmpSettingsDestination[];
}

export interface MpsOutputOutputRtmpSettingsDestination {
    /**
     * relayed StreamKey, in the format: stream?key=value.
     */
    streamKey: string;
    /**
     * relayed URL, the format is: rtmp://domain/live.
     */
    url: string;
}

export interface MpsOutputOutputRtpSettings {
    /**
     * The target address of the relay can be filled in 1~2.
     */
    destinations: outputs.MpsOutputOutputRtpSettingsDestination[];
    /**
     * You can only fill in none.
     */
    fec: string;
    /**
     * Idle timeout, unit ms.
     */
    idleTimeout: number;
}

export interface MpsOutputOutputRtpSettingsDestination {
    /**
     * The target IP of the relay.
     */
    ip: string;
    /**
     * Destination port for relays.
     */
    port: number;
}

export interface MpsOutputOutputSrtSettings {
    /**
     * The target address of the relay is required when Mode is CALLER, and only one group can be filled in.
     */
    destinations: outputs.MpsOutputOutputSrtSettingsDestination[];
    /**
     * The total delay of relaying SRT, the default is 0, the unit is ms, and the range is [0, 3000].
     */
    latency: number;
    /**
     * SRT mode, optional [LISTENER|CALLER], default is CALLER.
     */
    mode: string;
    /**
     * The encryption key for relaying SRT, which is empty by default, indicating no encryption. Only ascii code values can be filled in, and the length is [10, 79].
     */
    passphrase: string;
    /**
     * The key length of relay SRT, the default is 0, optional [0|16|24|32].
     */
    pbKeyLen: number;
    /**
     * The peer idle timeout for relaying SRT, the default is 5000, the unit is ms, and the range is [1000, 10000].
     */
    peerIdleTimeout: number;
    /**
     * The peer delay of relaying SRT, the default is 0, the unit is ms, and the range is [0, 3000].
     */
    peerLatency: number;
    /**
     * The reception delay of relay SRT, the default is 120, the unit is ms, the range is [0, 3000].
     */
    recvLatency: number;
    /**
     * relay the stream ID of SRT. You can choose uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-). The length is 0~512.
     */
    streamId?: string;
}

export interface MpsOutputOutputSrtSettingsDestination {
    /**
     * Output IP.
     */
    ip: string;
    /**
     * output port.
     */
    port: number;
}

export interface MpsProcessLiveStreamOperationAiAnalysisTask {
    /**
     * Video content analysis template ID.
     */
    definition: number;
    /**
     * An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
     */
    extendedParameter?: string;
}

export interface MpsProcessLiveStreamOperationAiContentReviewTask {
    /**
     * Video content audit template ID.
     */
    definition: number;
}

export interface MpsProcessLiveStreamOperationAiQualityControlTask {
    /**
     * The channel extension parameter, which is a serialized JSON string.Note: This field may return null, indicating that no valid values can be obtained.
     */
    channelExtPara?: string;
    /**
     * The ID of the quality control template.Note: This field may return null, indicating that no valid values can be obtained.
     */
    definition?: number;
}

export interface MpsProcessLiveStreamOperationAiRecognitionTask {
    /**
     * Intelligent video recognition template ID.
     */
    definition: number;
}

export interface MpsProcessLiveStreamOperationOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessLiveStreamOperationOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessLiveStreamOperationOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS.`AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessLiveStreamOperationOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessLiveStreamOperationOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessLiveStreamOperationTaskNotifyConfig {
    /**
     * CMQ model. There are two types: `Queue` and `Topic`. Currently, only `Queue` is supported.
     */
    cmqModel?: string;
    /**
     * CMQ region, such as `sh` and `bj`.
     */
    cmqRegion?: string;
    /**
     * The notification type, `CMQ` by default. If this parameter is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
     */
    notifyType?: string;
    /**
     * HTTP callback URL, required if `NotifyType` is set to `URL`.
     */
    notifyUrl?: string;
    /**
     * This parameter is valid when the model is `Queue`, indicating the name of the CMQ queue for receiving event notifications.
     */
    queueName?: string;
    /**
     * This parameter is valid when the model is `Topic`, indicating the name of the CMQ topic for receiving event notifications.
     */
    topicName?: string;
}

export interface MpsProcessMediaOperationAiAnalysisTask {
    /**
     * Video content analysis template ID.
     */
    definition: number;
    /**
     * An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
     */
    extendedParameter?: string;
}

export interface MpsProcessMediaOperationAiContentReviewTask {
    /**
     * Video content audit template ID.
     */
    definition: number;
}

export interface MpsProcessMediaOperationAiQualityControlTask {
    /**
     * The channel extension parameter, which is a serialized JSON string.Note: This field may return null, indicating that no valid values can be obtained.
     */
    channelExtPara?: string;
    /**
     * The ID of the quality control template.Note: This field may return null, indicating that no valid values can be obtained.
     */
    definition?: number;
}

export interface MpsProcessMediaOperationAiRecognitionTask {
    /**
     * Intelligent video recognition template ID.
     */
    definition: number;
}

export interface MpsProcessMediaOperationInputInfo {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationInputInfoCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationInputInfoS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationInputInfoUrlInputInfo;
}

export interface MpsProcessMediaOperationInputInfoCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationInputInfoS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationInputInfoUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTask {
    /**
     * List of adaptive bitrate streaming tasks.
     */
    adaptiveDynamicStreamingTaskSets?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet[];
    /**
     * List of animated image generating tasks.
     */
    animatedGraphicTaskSets?: outputs.MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet[];
    /**
     * List of image sprite generating tasks.
     */
    imageSpriteTaskSets?: outputs.MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSet[];
    /**
     * List of sampled screencapturing tasks.
     */
    sampleSnapshotTaskSets?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet[];
    /**
     * List of time point screencapturing tasks.
     */
    snapshotByTimeOffsetTaskSets?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet[];
    /**
     * List of transcoding tasks.
     */
    transcodeTaskSets?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSet[];
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet {
    /**
     * The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
     */
    addOnSubtitles?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle[];
    /**
     * Adaptive bitrate streaming template ID.
     */
    definition: number;
    /**
     * The relative or absolute output path of the manifest file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of an output file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: this field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage;
    /**
     * The relative output path of the segment file after being transcoded to adaptive bitrate streaming (in HLS format only). If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
     */
    segmentObjectName?: string;
    /**
     * The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
     */
    subStreamObjectName?: string;
    /**
     * List of up to 10 image or text watermarks.
     */
    watermarkSets?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet[];
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle {
    /**
     * The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
     */
    subtitle?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle;
    /**
     * The mode. Valid values:`subtitle-stream`: Add a subtitle track.`close-caption-708`: Embed CEA-708 subtitles in SEI frames.`close-caption-608`: Embed CEA-608 subtitles in SEI frames.Note: This field may return null, indicating that no valid values can be obtained.
     */
    type?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet {
    /**
     * Animated image generating template ID.
     */
    definition: number;
    /**
     * End time of an animated image in a video in seconds.
     */
    endTimeOffset: number;
    /**
     * Output path to a generated animated image file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_animatedGraphic_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a generated animated image file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage;
    /**
     * Start time of an animated image in a video in seconds.
     */
    startTimeOffset: number;
}

export interface MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSet {
    /**
     * ID of an image sprite generating template.
     */
    definition: number;
    /**
     * Rule of the `{number}` variable in the image sprite output path.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat;
    /**
     * Output path to a generated image sprite file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a generated image sprite. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage;
    /**
     * Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
     */
    webVttObjectName?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet {
    /**
     * Sampled screencapturing template ID.
     */
    definition: number;
    /**
     * Rule of the `{number}` variable in the sampled screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat;
    /**
     * Output path to a generated sampled screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a sampled screenshot. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage;
    /**
     * List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
     */
    watermarkSets?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet[];
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet {
    /**
     * ID of a time point screencapturing template.
     */
    definition: number;
    /**
     * List of screenshot time points in the format of `s` or `%`:If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second;If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
     */
    extTimeOffsetSets?: string[];
    /**
     * Rule of the `{number}` variable in the time point screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat;
    /**
     * Output path to a generated time point screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a generated time point screenshot file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage;
    /**
     * List of time points of screenshots in &lt;font color=red&gt;seconds&lt;/font&gt;.
     */
    timeOffsetSets?: number[];
    /**
     * List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
     */
    watermarkSets?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet[];
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSet {
    /**
     * ID of a video transcoding template.
     */
    definition: number;
    /**
     * End time offset of a transcoded video, in seconds.If this parameter is left empty or set to 0, the transcoded video will end at the same time as the original video.If this parameter is set to a positive number (n for example), the transcoded video will end at the nth second of the original video.If this parameter is set to a negative number (-n for example), the transcoded video will end at the nth second before the end of the original video.
     */
    endTimeOffset?: number;
    /**
     * Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
     */
    headTailParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter;
    /**
     * List of blurs. Up to 10 ones can be supported.
     */
    mosaicSets?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet[];
    /**
     * Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat;
    /**
     * Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of an output file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage;
    /**
     * Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
     */
    overrideParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter;
    /**
     * Custom video transcoding parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the transcoding parameter preferably.
     */
    rawParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter;
    /**
     * Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
     */
    segmentObjectName?: string;
    /**
     * Start time offset of a transcoded video, in seconds.If this parameter is left empty or set to 0, the transcoded video will start at the same time as the original video.If this parameter is set to a positive number (n for example), the transcoded video will start at the nth second of the original video.If this parameter is set to a negative number (-n for example), the transcoded video will start at the nth second before the end of the original video.
     */
    startTimeOffset?: number;
    /**
     * List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
     */
    watermarkSets?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet[];
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter {
    /**
     * Opening credits list.
     */
    headSets?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet[];
    /**
     * Closing credits list.
     */
    tailSets?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet[];
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet {
    /**
     * Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * End time offset of blur in seconds.If this parameter is left empty or 0 is entered, the blur will exist till the last video frame;If this value is greater than 0 (e.g., n), the blur will exist till second n;If this value is smaller than 0 (e.g., -n), the blur will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Blur height. % and px formats are supported:If the string ends in %, the `Height` of the blur will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the blur will be in px; for example, `100px` means that `Height` is 100 px.Default value: 10%.
     */
    height?: string;
    /**
     * Start time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame.If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame;If this value is greater than 0 (e.g., n), the blur will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the blur will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * Blur width. % and px formats are supported:If the string ends in %, the `Width` of the blur will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the blur will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
    /**
     * The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the blur will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the blur will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported:If the string ends in %, the `YPos` of the blur will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the blur will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter {
    /**
     * The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
     */
    addOnSubtitles?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle[];
    /**
     * The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
     */
    addonAudioStreams?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream[];
    /**
     * Audio stream configuration parameter.
     */
    audioTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate;
    /**
     * Container format. Valid values: mp4, flv, hls, mp3, flac, ogg, and m4a; mp3, flac, ogg, and m4a are formats of audio files.
     */
    container?: string;
    /**
     * Whether to remove audio data. Valid values:0: retain1: remove.
     */
    removeAudio?: number;
    /**
     * Whether to remove video data. Valid values:0: retain1: remove.
     */
    removeVideo?: number;
    /**
     * An extended field for transcoding.Note: This field may return null, indicating that no valid values can be obtained.
     */
    stdExtInfo?: string;
    /**
     * The subtitle settings.Note: This field may return null, indicating that no valid values can be obtained.
     */
    subtitleTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate;
    /**
     * The TSC transcoding parameters.Note: This field may return null, indicating that no valid values can be obtained.
     */
    tehdConfig?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig;
    /**
     * Video stream configuration parameter.
     */
    videoTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle {
    /**
     * The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
     */
    subtitle?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle;
    /**
     * The mode. Valid values:`subtitle-stream`: Add a subtitle track.`close-caption-708`: Embed CEA-708 subtitles in SEI frames.`close-caption-608`: Embed CEA-608 subtitles in SEI frames.Note: This field may return null, indicating that no valid values can be obtained.
     */
    type?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate {
    /**
     * Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.
     */
    audioChannel?: number;
    /**
     * Audio stream bitrate in Kbps. Value range: 0 and [26, 256]. If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
     */
    bitrate?: number;
    /**
     * Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is:libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is:flac.When the outer `Container` parameter is `m4a`, the valid values include:libfdk_aac;libmp3lame;ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include:libfdk_aac: More suitable for mp4;libmp3lame: More suitable for flv;mp2.When the outer `Container` parameter is `hls`, the valid values include:libfdk_aac;libmp3lame.
     */
    codec?: string;
    /**
     * Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
     */
    sampleRate?: number;
    /**
     * The audio tracks to retain. All audio tracks are retained by default.
     */
    streamSelects?: number[];
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate {
    /**
     * The text transparency. Value range: 0-1.`0`: Fully transparent.`1`: Fully opaque.Default value: 1.Note: This field may return null, indicating that no valid values can be obtained.
     */
    fontAlpha?: number;
    /**
     * The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).Note: This field may return null, indicating that no valid values can be obtained.
     */
    fontColor?: string;
    /**
     * The font size (pixels). If this is not specified, the font size in the subtitle file will be used.Note: This field may return null, indicating that no valid values can be obtained.
     */
    fontSize?: string;
    /**
     * The font. Valid values:`hei.ttf`: Heiti.`song.ttf`: Songti.`simkai.ttf`: Kaiti.`arial.ttf`: Arial.The default is `hei.ttf`.Note: This field may return null, indicating that no valid values can be obtained.
     */
    fontType?: string;
    /**
     * The URL of the subtitles to add to the video.Note: This field may return null, indicating that no valid values can be obtained.
     */
    path?: string;
    /**
     * The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.Note: This field may return null, indicating that no valid values can be obtained.
     */
    streamIndex?: number;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig {
    /**
     * The maximum video bitrate. If this parameter is not specified, no modifications will be made.Note: This field may return null, indicating that no valid values can be obtained.
     */
    maxVideoBitrate?: number;
    /**
     * The TSC type. Valid values:`TEHD-100`: TSC-100 (video TSC). `TEHD-200`: TSC-200 (audio TSC). If this parameter is left blank, no modification will be made.Note: This field may return null, indicating that no valid values can be obtained.
     */
    type?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate {
    /**
     * Bitrate of a video stream in Kbps. Value range: 0 and [128, 35,000].If the value is 0, the bitrate of the video will be the same as that of the source video.
     */
    bitrate?: number;
    /**
     * The video codec. Valid values:libx264: H.264libx265: H.265av1: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
     */
    codec?: string;
    /**
     * Whether to enable adaptive encoding. Valid values:0: Disable1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
     */
    contentAdaptStream?: number;
    /**
     * Fill type. Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: stretch: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer;black: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks.white: fill with white. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with white color blocks.gauss: fill with Gaussian blur. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with Gaussian blur.
     */
    fillType?: string;
    /**
     * Video frame rate in Hz. Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.
     */
    fps?: number;
    /**
     * Frame interval between I keyframes. Value range: 0 and [1,100000]. If this parameter is 0, the system will automatically set the GOP length.
     */
    gop?: number;
    /**
     * Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].
     */
    height?: number;
    /**
     * Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
     */
    resolutionAdaptive?: string;
    /**
     * The control factor of video constant bitrate. Value range: [0, 51]. This parameter will be disabled if you enter `0`.It is not recommended to specify this parameter if there are no special requirements.
     */
    vcrf?: number;
    /**
     * Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.
     */
    width?: number;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter {
    /**
     * Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
     */
    audioTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate;
    /**
     * Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
     */
    container: string;
    /**
     * Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
     */
    removeAudio?: number;
    /**
     * Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
     */
    removeVideo?: number;
    /**
     * TESHD transcoding parameter.
     */
    tehdConfig?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig;
    /**
     * Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
     */
    videoTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate {
    /**
     * Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
     */
    audioChannel?: number;
    /**
     * Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
     */
    bitrate: number;
    /**
     * Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is:libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is:flac.When the outer `Container` parameter is `m4a`, the valid values include:libfdk_aac;libmp3lame;ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include:libfdk_aac: more suitable for mp4;libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include:libfdk_aac;libmp3lame.
     */
    codec: string;
    /**
     * Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
     */
    sampleRate: number;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig {
    /**
     * Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
     */
    maxVideoBitrate?: number;
    /**
     * TESHD type. Valid values:TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
     */
    type: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate {
    /**
     * The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
     */
    bitrate: number;
    /**
     * The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
     */
    codec: string;
    /**
     * The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image's original aspect ratio and fill the blank space with white bars.gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
     */
    fillType?: string;
    /**
     * The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
     */
    fps: number;
    /**
     * Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
     */
    gop?: number;
    /**
     * Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
     */
    height?: number;
    /**
     * Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
     */
    resolutionAdaptive?: string;
    /**
     * The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
     */
    vcrf?: number;
    /**
     * Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
     */
    width?: number;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsProcessMediaOperationOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsProcessMediaOperationOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsProcessMediaOperationOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsProcessMediaOperationOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsProcessMediaOperationOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsProcessMediaOperationTaskNotifyConfig {
    /**
     * The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
     */
    awsSqa?: outputs.MpsProcessMediaOperationTaskNotifyConfigAwsSqa;
    /**
     * The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
     */
    cmqModel?: string;
    /**
     * The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
     */
    cmqRegion?: string;
    /**
     * Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
     */
    notifyMode?: string;
    /**
     * The notification type. Valid values:`CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.`TDMQ-CMQ`: Message queue`URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.`SCF`: This notification type is not recommended. You need to configure it in the SCF console.`AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.&lt;font color=red&gt;Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.&lt;/font&gt;.
     */
    notifyType?: string;
    /**
     * HTTP callback URL, required if `NotifyType` is set to `URL`.
     */
    notifyUrl?: string;
    /**
     * The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
     */
    queueName?: string;
    /**
     * The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
     */
    topicName?: string;
}

export interface MpsProcessMediaOperationTaskNotifyConfigAwsSqa {
    /**
     * The key ID required to read from/write to the SQS queue.
     */
    s3SecretId?: string;
    /**
     * The key required to read from/write to the SQS queue.
     */
    s3SecretKey?: string;
    /**
     * The name of the SQS queue.
     */
    sqaQueueName: string;
    /**
     * The region of the SQS queue.
     */
    sqaRegion: string;
}

export interface MpsScheduleActivity {
    /**
     * The parameters of a subtask.Note: This field may return null, indicating that no valid values can be obtained.
     */
    activityPara?: outputs.MpsScheduleActivityActivityPara;
    /**
     * The subtask type. `input`: The start. `output`: The end. `action-trans`: Transcoding. `action-samplesnapshot`: Sampled screencapturing. `action-AIAnalysis`: Content analysis. `action-AIRecognition`: Content recognition. `action-aiReview`: Content moderation. `action-animated-graphics`: Animated screenshot generation. `action-image-sprite`: Image sprite generation. `action-snapshotByTimeOffset`: Time point screencapturing. `action-adaptive-substream`: Adaptive bitrate streaming.Note: This field may return null, indicating that no valid values can be obtained.
     */
    activityType: string;
    /**
     * The indexes of the subsequent actions. Note: This field may return null, indicating that no valid values can be obtained.
     */
    reardriveIndices: number[];
}

export interface MpsScheduleActivityActivityPara {
    /**
     * An adaptive bitrate streaming task.
     */
    adaptiveDynamicStreamingTask?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTask;
    /**
     * A content analysis task.
     */
    aiAnalysisTask?: outputs.MpsScheduleActivityActivityParaAiAnalysisTask;
    /**
     * A content moderation task.
     */
    aiContentReviewTask?: outputs.MpsScheduleActivityActivityParaAiContentReviewTask;
    /**
     * A content recognition task.
     */
    aiRecognitionTask?: outputs.MpsScheduleActivityActivityParaAiRecognitionTask;
    /**
     * An animated screenshot generation task.
     */
    animatedGraphicTask?: outputs.MpsScheduleActivityActivityParaAnimatedGraphicTask;
    /**
     * An image sprite generation task.
     */
    imageSpriteTask?: outputs.MpsScheduleActivityActivityParaImageSpriteTask;
    /**
     * A sampled screencapturing task.
     */
    sampleSnapshotTask?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTask;
    /**
     * A time point screencapturing task.
     */
    snapshotByTimeOffsetTask?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTask;
    /**
     * A transcoding task.
     */
    transcodeTask?: outputs.MpsScheduleActivityActivityParaTranscodeTask;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTask {
    /**
     * Subtitle files to insert.Note: This field may return null, indicating that no valid value can be obtained.
     */
    addOnSubtitles?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle[];
    /**
     * Adaptive bitrate streaming template ID.
     */
    definition: number;
    /**
     * The relative or absolute output path of the manifest file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of an output file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: this field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage;
    /**
     * The relative output path of the segment file after being transcoded to adaptive bitrate streaming (in HLS format only). If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
     */
    segmentObjectName?: string;
    /**
     * The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
     */
    subStreamObjectName?: string;
    /**
     * List of up to 10 image or text watermarks.
     */
    watermarkSets?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet[];
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle {
    /**
     * Subtitle file.Note: This field may return null, indicating that no valid value can be obtained.
     */
    subtitle?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle;
    /**
     * The inserting type. Valid values: subtitle-stream:Insert title track close-caption-708:CEA-708 subtitle encode to SEI frame close-caption-608:CEA-608 subtitle encode to SEI frameNote: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle {
    /**
     * The information of the COS object to process. This parameter is valid and required when Type is COS.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if Type is AWS-S3. Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo;
    /**
     * The input type. Valid values:  COS:A COS bucket address  URL:A URL  AWS-S3:An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when Type is URL.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo {
    /**
     * The COS bucket of the object to process, such as TopRankVideo-125xxx88.
     */
    bucket: string;
    /**
     * The path of the object to process, such as /movie/201907/WildAnimal.mov.
     */
    object: string;
    /**
     * The region of the COS bucket, such as ap-chongqing.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo {
    /**
     * S3 bucket.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket, support:  us-east-1  eu-west-3Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values: image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaAiAnalysisTask {
    /**
     * Video content analysis template ID.
     */
    definition: number;
    /**
     * An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
     */
    extendedParameter?: string;
}

export interface MpsScheduleActivityActivityParaAiContentReviewTask {
    /**
     * Video content audit template ID.
     */
    definition: number;
}

export interface MpsScheduleActivityActivityParaAiRecognitionTask {
    /**
     * Intelligent video recognition template ID.
     */
    definition: number;
}

export interface MpsScheduleActivityActivityParaAnimatedGraphicTask {
    /**
     * Animated image generating template ID.
     */
    definition: number;
    /**
     * End time of an animated image in a video in seconds.
     */
    endTimeOffset: number;
    /**
     * Output path to a generated animated image file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_animatedGraphic_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a generated animated image file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage;
    /**
     * Start time of an animated image in a video in seconds.
     */
    startTimeOffset: number;
}

export interface MpsScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaImageSpriteTask {
    /**
     * ID of an image sprite generating template.
     */
    definition: number;
    /**
     * Rule of the `{number}` variable in the image sprite output path.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat;
    /**
     * Output path to a generated image sprite file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a generated image sprite. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsScheduleActivityActivityParaImageSpriteTaskOutputStorage;
    /**
     * Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
     */
    webVttObjectName?: string;
}

export interface MpsScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsScheduleActivityActivityParaImageSpriteTaskOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTask {
    /**
     * Sampled screencapturing template ID.
     */
    definition: number;
    /**
     * Rule of the `{number}` variable in the sampled screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat;
    /**
     * Output path to a generated sampled screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a sampled screenshot. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskOutputStorage;
    /**
     * List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
     */
    watermarkSets?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet[];
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values: image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTask {
    /**
     * ID of a time point screencapturing template.
     */
    definition: number;
    /**
     * List of screenshot time points in the format of `s` or `%`: If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second; If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
     */
    extTimeOffsetSets?: string[];
    /**
     * Rule of the `{number}` variable in the time point screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat;
    /**
     * Output path to a generated time point screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of a generated time point screenshot file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage;
    /**
     * List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
     */
    watermarkSets?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet[];
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values: image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTask {
    /**
     * ID of a video transcoding template.
     */
    definition: number;
    /**
     * End time offset of a transcoded video, in seconds. If this parameter is left empty or set to 0, the transcoded video will end at the same time as the original video. If this parameter is set to a positive number (n for example), the transcoded video will end at the nth second of the original video. If this parameter is set to a negative number (-n for example), the transcoded video will end at the nth second before the end of the original video.
     */
    endTimeOffset?: number;
    /**
     * Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
     */
    headTailParameter?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameter;
    /**
     * List of blurs. Up to 10 ones can be supported.
     */
    mosaicSets?: outputs.MpsScheduleActivityActivityParaTranscodeTaskMosaicSet[];
    /**
     * Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
     */
    objectNumberFormat?: outputs.MpsScheduleActivityActivityParaTranscodeTaskObjectNumberFormat;
    /**
     * Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * Target bucket of an output file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
     */
    outputStorage?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOutputStorage;
    /**
     * Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
     */
    overrideParameter?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameter;
    /**
     * Custom video transcoding parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the transcoding parameter preferably.
     */
    rawParameter?: outputs.MpsScheduleActivityActivityParaTranscodeTaskRawParameter;
    /**
     * Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
     */
    segmentObjectName?: string;
    /**
     * Start time offset of a transcoded video, in seconds. If this parameter is left empty or set to 0, the transcoded video will start at the same time as the original video. If this parameter is set to a positive number (n for example), the transcoded video will start at the nth second of the original video. If this parameter is set to a negative number (-n for example), the transcoded video will start at the nth second before the end of the original video.
     */
    startTimeOffset?: number;
    /**
     * List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
     */
    watermarkSets?: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSet[];
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameter {
    /**
     * Opening credits list.
     */
    headSets?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet[];
    /**
     * Closing credits list.
     */
    tailSets?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet[];
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskMosaicSet {
    /**
     * Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * End time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will exist till the last video frame; If this value is greater than 0 (e.g., n), the blur will exist till second n; If this value is smaller than 0 (e.g., -n), the blur will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Blur height. % and px formats are supported: If the string ends in %, the `Height` of the blur will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the blur will be in px; for example, `100px` means that `Height` is 100 px.Default value: 10%.
     */
    height?: string;
    /**
     * Start time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame; If this value is greater than 0 (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the blur will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * Blur width. % and px formats are supported: If the string ends in %, the `Width` of the blur will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the blur will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
    /**
     * The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the blur will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the blur will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported: If the string ends in %, the `YPos` of the blur will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the blur will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskObjectNumberFormat {
    /**
     * Increment of the `{number}` variable. Default value: 1.
     */
    increment?: number;
    /**
     * Start value of the `{number}` variable. Default value: 0.
     */
    initialValue?: number;
    /**
     * Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
     */
    minLength?: number;
    /**
     * Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
     */
    placeHolder?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameter {
    /**
     * Subtitle files to insert.Note: This field may return null, indicating that no valid value can be obtained.
     */
    addOnSubtitles?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle[];
    /**
     * The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
     */
    addonAudioStreams?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream[];
    /**
     * Audio stream configuration parameter.
     */
    audioTemplate?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate;
    /**
     * Container format. Valid values: mp4, flv, hls, mp3, flac, ogg, and m4a; mp3, flac, ogg, and m4a are formats of audio files.
     */
    container?: string;
    /**
     * Whether to remove audio data. Valid values: 0: retain 1: remove.
     */
    removeAudio: number;
    /**
     * Whether to remove video data. Valid values: 0: retain 1: remove.
     */
    removeVideo: number;
    /**
     * Transcoding extension field.Note: This field may return null, indicating that no valid value can be obtained.
     */
    stdExtInfo?: string;
    /**
     * The subtitle settings.
     */
    subtitleTemplate?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate;
    /**
     * TESHD transcoding parameter.
     */
    tehdConfig?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig;
    /**
     * Video stream configuration parameter.
     */
    videoTemplate?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle {
    /**
     * Subtitle file.Note: This field may return null, indicating that no valid value can be obtained.
     */
    subtitle?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle;
    /**
     * The inserting type. Valid values: `subtitle-stream`:Insert title track. `close-caption-708`:CEA-708 subtitle encode to SEI frame. `close-caption-608`:CEA-608 subtitle encode to SEI frame. Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle {
    /**
     * The information of the COS object to process. This parameter is valid and required when Type is COS.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if Type is AWS-S3.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo;
    /**
     * The input type. Valid values:  `COS`:A COS bucket address. `URL`:A URL. `AWS-S3`:An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when Type is URL.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo {
    /**
     * The COS bucket of the object to process, such as TopRankVideo-125xxx88.
     */
    bucket: string;
    /**
     * The path of the object to process, such as /movie/201907/WildAnimal.mov.
     */
    object: string;
    /**
     * The region of the COS bucket, such as ap-chongqing.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo {
    /**
     * S3 bucket.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket, support:  us-east-1  eu-west-3Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate {
    /**
     * Audio channel system. Valid values: 1: Mono 2: Dual 6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.
     */
    audioChannel: number;
    /**
     * Audio stream bitrate in Kbps. Value range: 0 and [26, 256]. If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
     */
    bitrate: number;
    /**
     * Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is: libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is: flac.When the outer `Container` parameter is `m4a`, the valid values include: libfdk_aac; libmp3lame; ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include: libfdk_aac: More suitable for mp4; libmp3lame: More suitable for flv; mp2.When the outer `Container` parameter is `hls`, the valid values include: libfdk_aac; libmp3lame.
     */
    codec?: string;
    /**
     * Audio stream sample rate. Valid values: 32,000 44,100 48,000In Hz.
     */
    sampleRate: number;
    /**
     * The audio tracks to retain. All audio tracks are retained by default.
     */
    streamSelects?: number[];
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate {
    /**
     * The text transparency. Value range: 0-1. 0: Completely transparent 1: Completely opaqueDefault value: 1.
     */
    fontAlpha?: number;
    /**
     * The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).
     */
    fontColor?: string;
    /**
     * The font size (pixels). If this is not specified, the font size in the subtitle file will be used.
     */
    fontSize?: string;
    /**
     * The font type. Valid values: `hei.ttf` `song.ttf` `simkai.ttf` `arial.ttf` (for English only). The default is `hei.ttf`.
     */
    fontType?: string;
    /**
     * The URL of the subtitles to add to the video.
     */
    path?: string;
    /**
     * The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.
     */
    streamIndex?: number;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig {
    /**
     * Maximum bitrate. If this parameter is left empty, no modification will be made.
     */
    maxVideoBitrate: number;
    /**
     * TESHD type. Valid values: TEHD-100: TESHD-100.If this parameter is left blank, no modification will be made.
     */
    type?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate {
    /**
     * Bitrate of a video stream in Kbps. Value range: 0 and [128, 35,000].If the value is 0, the bitrate of the video will be the same as that of the source video.
     */
    bitrate: number;
    /**
     * The video codec. Valid values: libx264: H.264 libx265: H.265 av1: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
     */
    codec?: string;
    /**
     * Whether to enable adaptive encoding. Valid values: 0: Disable 1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
     */
    contentAdaptStream?: number;
    /**
     * Fill type. Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported:  stretch: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; black: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. white: fill with white. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with white color blocks. gauss: fill with Gaussian blur. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with Gaussian blur.
     */
    fillType?: string;
    /**
     * Video frame rate in Hz. Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.
     */
    fps: number;
    /**
     * Frame interval between I keyframes. Value range: 0 and [1,100000]. If this parameter is 0, the system will automatically set the GOP length.
     */
    gop: number;
    /**
     * Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].
     */
    height: number;
    /**
     * Resolution adaption. Valid values: open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side. close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
     */
    resolutionAdaptive?: string;
    /**
     * The control factor of video constant bitrate. Value range: [0, 51]. This parameter will be disabled if you enter `0`.It is not recommended to specify this parameter if there are no special requirements.
     */
    vcrf: number;
    /**
     * Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.
     */
    width: number;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskRawParameter {
    /**
     * Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
     */
    audioTemplate?: outputs.MpsScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate;
    /**
     * Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
     */
    container: string;
    /**
     * Whether to remove audio data. Valid values: 0: retain; 1: remove.Default value: 0.
     */
    removeAudio?: number;
    /**
     * Whether to remove video data. Valid values: 0: retain; 1: remove.Default value: 0.
     */
    removeVideo?: number;
    /**
     * TESHD transcoding parameter.
     */
    tehdConfig?: outputs.MpsScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig;
    /**
     * Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
     */
    videoTemplate?: outputs.MpsScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate {
    /**
     * Audio channel system. Valid values: 1: Mono 2: Dual 6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
     */
    audioChannel?: number;
    /**
     * Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
     */
    bitrate: number;
    /**
     * Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is: libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is: flac.When the outer `Container` parameter is `m4a`, the valid values include: libfdk_aac; libmp3lame; ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include: libfdk_aac: more suitable for mp4; libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include: libfdk_aac; libmp3lame.
     */
    codec: string;
    /**
     * Audio stream sample rate. Valid values: 32,000 44,100 48,000In Hz.
     */
    sampleRate: number;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig {
    /**
     * Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
     */
    maxVideoBitrate?: number;
    /**
     * TESHD type. Valid values: TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
     */
    type: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate {
    /**
     * The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
     */
    bitrate: number;
    /**
     * The video codec. Valid values: `libx264`: H.264 `libx265`: H.265 `av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
     */
    codec: string;
    /**
     * The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values: stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding. black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars. white: Keep the image's original aspect ratio and fill the blank space with white bars. gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
     */
    fillType?: string;
    /**
     * The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
     */
    fps: number;
    /**
     * Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
     */
    gop?: number;
    /**
     * Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
     */
    height?: number;
    /**
     * Resolution adaption. Valid values: open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side. close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
     */
    resolutionAdaptive?: string;
    /**
     * The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
     */
    vcrf?: number;
    /**
     * Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
     */
    width?: number;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSet {
    /**
     * ID of a watermarking template.
     */
    definition: number;
    /**
     * End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
     */
    rawParameter?: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
     */
    svgContent?: string;
    /**
     * Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
     */
    textContent?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter {
    /**
     * Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
     */
    imageTemplate?: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type. Valid values: image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
     */
    yPos?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate {
    /**
     * Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Input content of watermark image. JPEG and PNG images are supported.
     */
    imageContent: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
     */
    repeatType?: string;
    /**
     * Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
     */
    width?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsScheduleOutputStorage {
    /**
     * The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsScheduleOutputStorageCosOutputStorage;
    /**
     * The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3OutputStorage?: outputs.MpsScheduleOutputStorageS3OutputStorage;
    /**
     * The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
     */
    type: string;
}

export interface MpsScheduleOutputStorageCosOutputStorage {
    /**
     * The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    bucket?: string;
    /**
     * The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
     */
    region?: string;
}

export interface MpsScheduleOutputStorageS3OutputStorage {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to upload files to the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to upload files to the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleTaskNotifyConfig {
    /**
     * The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
     */
    awsSqs?: outputs.MpsScheduleTaskNotifyConfigAwsSqs;
    /**
     * The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
     */
    cmqModel?: string;
    /**
     * The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
     */
    cmqRegion?: string;
    /**
     * Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
     */
    notifyMode: string;
    /**
     * The notification type. Valid values: `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead. `TDMQ-CMQ`: Message queue `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API. `SCF`: This notification type is not recommended. You need to configure it in the SCF console. `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
     */
    notifyType: string;
    /**
     * HTTP callback URL, required if `NotifyType` is set to `URL`.
     */
    notifyUrl?: string;
    /**
     * The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
     */
    queueName?: string;
    /**
     * The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
     */
    topicName?: string;
}

export interface MpsScheduleTaskNotifyConfigAwsSqs {
    /**
     * The key ID required to read from/write to the SQS queue.
     */
    s3SecretId?: string;
    /**
     * The key required to read from/write to the SQS queue.
     */
    s3SecretKey?: string;
    /**
     * The name of the SQS queue.
     */
    sqsQueueName: string;
    /**
     * The region of the SQS queue.
     */
    sqsRegion: string;
}

export interface MpsScheduleTrigger {
    /**
     * The AWS S3 trigger. This parameter is valid and required if `Type` is `AwsS3FileUpload`.Note: Currently, the key for the AWS S3 bucket, the trigger SQS queue, and the callback SQS queue must be the same.Note: This field may return null, indicating that no valid values can be obtained.
     */
    awsS3FileUploadTrigger?: outputs.MpsScheduleTriggerAwsS3FileUploadTrigger;
    /**
     * This parameter is required and valid when `Type` is `CosFileUpload`, indicating the COS trigger rule.Note: This field may return null, indicating that no valid values can be obtained.
     */
    cosFileUploadTrigger?: outputs.MpsScheduleTriggerCosFileUploadTrigger;
    /**
     * The trigger type. Valid values: `CosFileUpload`: Tencent Cloud COS trigger. `AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
     */
    type: string;
}

export interface MpsScheduleTriggerAwsS3FileUploadTrigger {
    /**
     * The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
     */
    awsSqs?: outputs.MpsScheduleTriggerAwsS3FileUploadTriggerAwsSqs;
    /**
     * The bucket directory bound. It must be an absolute path that starts and ends with `/`, such as `/movie/201907/`. If you do not specify this, the root directory will be bound.	.
     */
    dir?: string;
    /**
     * The file formats that will trigger the scheme, such as [mp4, flv, mov]. If you do not specify this, the upload of files in any format will trigger the scheme.	.
     */
    formats?: string[];
    /**
     * The AWS S3 bucket bound to the scheme.
     */
    s3Bucket: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
     */
    s3SecretId?: string;
    /**
     * The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
     */
    s3SecretKey?: string;
}

export interface MpsScheduleTriggerAwsS3FileUploadTriggerAwsSqs {
    /**
     * The key ID required to read from/write to the SQS queue.
     */
    s3SecretId?: string;
    /**
     * The key required to read from/write to the SQS queue.
     */
    s3SecretKey?: string;
    /**
     * The name of the SQS queue.
     */
    sqsQueueName: string;
    /**
     * The region of the SQS queue.
     */
    sqsRegion: string;
}

export interface MpsScheduleTriggerCosFileUploadTrigger {
    /**
     * Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
     */
    dir?: string;
    /**
     * Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
     */
    formats?: string[];
    /**
     * Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
     */
    region: string;
}

export interface MpsTranscodeTemplateAudioTemplate {
    /**
     * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
     */
    audioChannel?: number;
    /**
     * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
     */
    bitrate: number;
    /**
     * Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
     */
    codec: string;
    /**
     * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
     */
    sampleRate: number;
}

export interface MpsTranscodeTemplateEnhanceConfig {
    /**
     * Video Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    videoEnhance?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhance;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhance {
    /**
     * De-artifact (glitch) configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    artifactRepair?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair;
    /**
     * Color Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    colorEnhance?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance;
    /**
     * Video Noise Reduction Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    denoise?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceDenoise;
    /**
     * Face Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    faceEnhance?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance;
    /**
     * Interpolation frame rate configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    frameRate?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceFrameRate;
    /**
     * HDR configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    hdr?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceHdr;
    /**
     * Comprehensive Enhanced Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    imageQualityEnhance?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance;
    /**
     * Low Light Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    lowLightEnhance?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance;
    /**
     * De-scratch configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    scratchRepair?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair;
    /**
     * Detail Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    sharpEnhance?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance;
    /**
     * Super resolution configuration.Note: This field may return null, indicating that no valid value can be obtained.
     */
    superResolution?: outputs.MpsTranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair {
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance {
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceDenoise {
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance {
    /**
     * Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
     */
    intensity?: number;
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceFrameRate {
    /**
     * Frame rate, value range: [0, 100], unit: Hz.Default value: 0.Note: For transcoding, this parameter will override the Fps inside the VideoTemplate.Note: This field may return null, indicating that no valid value can be obtained.
     */
    fps?: number;
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceHdr {
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value: HDR10/HLG.Default value: HDR10.Note: The encoding method of video needs to be libx265.Note: Video encoding bit depth is 10.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance {
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance {
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value: normal.Default value: normal.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair {
    /**
     * Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
     */
    intensity?: number;
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance {
    /**
     * Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
     */
    intensity?: number;
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
}

export interface MpsTranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution {
    /**
     * Super resolution multiple, optional value:2: currently only supports 2x super resolution.Default value: 2.Note: This field may return null, indicating that no valid value can be obtained.
     */
    size?: number;
    /**
     * Capability configuration switch, optional value: ON/OFF.Default value: ON.
     */
    switch?: string;
    /**
     * Type, optional value:lq: super-resolution for low-definition video with more noise.hq: super resolution for high-definition video.Default value: lq.Note: This field may return null, indicating that no valid value can be obtained.
     */
    type?: string;
}

export interface MpsTranscodeTemplateTehdConfig {
    /**
     * The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
     */
    maxVideoBitrate?: number;
    /**
     * Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
     */
    type: string;
}

export interface MpsTranscodeTemplateVideoTemplate {
    /**
     * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
     */
    bitrate: number;
    /**
     * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
     */
    codec: string;
    /**
     * Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
     */
    fillType?: string;
    /**
     * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
     */
    fps: number;
    /**
     * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
     */
    gop?: number;
    /**
     * The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
     */
    height?: number;
    /**
     * Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
     */
    resolutionAdaptive?: string;
    /**
     * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
     */
    vcrf?: number;
    /**
     * The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
     */
    width?: number;
}

export interface MpsWatermarkTemplateImageTemplate {
    /**
     * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels. The value range is 0 or [8, 4096].Default value: 0px. Indicates that Height is scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * Watermark image[Base64](https://tools.ietf.org/html/rfc4648) encoded string. Support jpeg, png image format.
     */
    imageContent: string;
    /**
     * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges:once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
     */
    repeatType?: string;
    /**
     * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixel, such as 100px means that the Width is 100 pixels. The value range is [8, 4096].Default value: 10%.
     */
    width?: string;
}

export interface MpsWatermarkTemplateSvgTemplate {
    /**
     * The height of the watermark, supports px, W%, H%, S%, L% six formats:When the string ends with px, it means that the watermark Height unit is pixels, such as 100px means that the Height is 100 pixels; when filling 0px and Width is not 0px, it means that the height of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the height of the watermark takes the height of the original SVG image.When the string ends with W%, it means that the watermark Height is a percentage of the video width, such as 10W% means that the Height is 10% of the video width.When the string ends with H%, it means that the watermark Height is the percentage size of the video height, such as 10H% means that the Height is 10% of the video height.When the string ends with S%, it means that the watermark Height is the percentage size of the short side of the video, such as 10S% means that the Height is 10% of the short side of the video.When the string ends with L%, it means that the watermark Height is the percentage size of the long side of the video, such as 10L% means that the Height is 10% of the long side of the video.When the string ends with %, the meaning is the same as H%.Default value: 0px.
     */
    height?: string;
    /**
     * The width of the watermark, supports px, %, W%, H%, S%, L% six formats.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels; when filling 0px and the Height is not 0px, it means that the width of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the width of the watermark takes the width of the original SVG image.When the string ends with W%, it means that the watermark Width is a percentage of the video width, such as 10W% means that the Width is 10% of the video width.When the string ends with H%, it means that the watermark Width is a percentage of the video height, such as 10H% means that the Width is 10% of the video height.When the string ends with S%, it means that the watermark Width is the percentage size of the short side of the video, such as 10S% means that the Width is 10% of the short side of the video.When the string ends with L%, it means that the watermark Width is the percentage size of the long side of the video, such as 10L% means that the Width is 10% of the long side of the video.When the string ends with %, it has the same meaning as W%.Default value: 10W%.
     */
    width?: string;
}

export interface MpsWatermarkTemplateTextTemplate {
    /**
     * Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default value: 1.
     */
    fontAlpha: number;
    /**
     * Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
     */
    fontColor: string;
    /**
     * Font size, format: Npx, N is a number.
     */
    fontSize: string;
    /**
     * Font type, currently supports two:simkai.ttf: can support Chinese and English.arial.ttf: English only.
     */
    fontType: string;
}

export interface MpsWithdrawsWatermarkOperationInputInfo {
    /**
     * The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
     */
    cosInputInfo?: outputs.MpsWithdrawsWatermarkOperationInputInfoCosInputInfo;
    /**
     * The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    s3InputInfo?: outputs.MpsWithdrawsWatermarkOperationInputInfoS3InputInfo;
    /**
     * The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks..
     */
    type: string;
    /**
     * The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWithdrawsWatermarkOperationInputInfoUrlInputInfo;
}

export interface MpsWithdrawsWatermarkOperationInputInfoCosInputInfo {
    /**
     * The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
     */
    bucket: string;
    /**
     * The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
     */
    object: string;
    /**
     * The region of the COS bucket, such as `ap-chongqing`.
     */
    region: string;
}

export interface MpsWithdrawsWatermarkOperationInputInfoS3InputInfo {
    /**
     * The AWS S3 bucket.
     */
    s3Bucket: string;
    /**
     * The path of the AWS S3 object.
     */
    s3Object: string;
    /**
     * The region of the AWS S3 bucket.
     */
    s3Region: string;
    /**
     * The key ID required to access the AWS S3 object.
     */
    s3SecretId?: string;
    /**
     * The key required to access the AWS S3 object.
     */
    s3SecretKey?: string;
}

export interface MpsWithdrawsWatermarkOperationInputInfoUrlInputInfo {
    /**
     * URL of a video.
     */
    url: string;
}

export interface MpsWithdrawsWatermarkOperationTaskNotifyConfig {
    /**
     * The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
     */
    awsSqs?: outputs.MpsWithdrawsWatermarkOperationTaskNotifyConfigAwsSqs;
    /**
     * The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
     */
    cmqModel?: string;
    /**
     * The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
     */
    cmqRegion?: string;
    /**
     * Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
     */
    notifyMode?: string;
    /**
     * The notification type. Valid values:  `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.  `TDMQ-CMQ`: Message queue  `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.  `SCF`: This notification type is not recommended. You need to configure it in the SCF console.  `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket. Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
     */
    notifyType?: string;
    /**
     * HTTP callback URL, required if `NotifyType` is set to `URL`.
     */
    notifyUrl?: string;
    /**
     * The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
     */
    queueName?: string;
    /**
     * The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
     */
    topicName?: string;
}

export interface MpsWithdrawsWatermarkOperationTaskNotifyConfigAwsSqs {
    /**
     * The key ID required to read from/write to the SQS queue.
     */
    s3SecretId?: string;
    /**
     * The key required to read from/write to the SQS queue.
     */
    s3SecretKey?: string;
    /**
     * The name of the SQS queue.
     */
    sqsQueueName: string;
    /**
     * The region of the SQS queue.
     */
    sqsRegion: string;
}

export interface MpsWorkflowAiAnalysisTask {
    /**
     * Video Content Analysis Template ID.
     */
    definition: number;
    /**
     * Extension parameter whose value is a serialized json string.Note: This parameter is a customized demand parameter, which requires offline docking.Note: This field may return null, indicating that no valid value can be obtained.
     */
    extendedParameter?: string;
}

export interface MpsWorkflowAiContentReviewTask {
    /**
     * Video Content Review Template ID.
     */
    definition: number;
}

export interface MpsWorkflowAiRecognitionTask {
    /**
     * Video Intelligent Recognition Template ID.
     */
    definition: number;
}

export interface MpsWorkflowMediaProcessTask {
    /**
     * Transfer Adaptive Code Stream Task List.
     */
    adaptiveDynamicStreamingTaskSets?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet[];
    /**
     * Video Rotation Map Task List.
     */
    animatedGraphicTaskSets?: outputs.MpsWorkflowMediaProcessTaskAnimatedGraphicTaskSet[];
    /**
     * Sprite image capture task list for video.
     */
    imageSpriteTaskSets?: outputs.MpsWorkflowMediaProcessTaskImageSpriteTaskSet[];
    /**
     * Screenshot task list for video sampling.
     */
    sampleSnapshotTaskSets?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSet[];
    /**
     * Screenshot the task list of the video according to the time point.
     */
    snapshotByTimeOffsetTaskSets?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet[];
    /**
     * Video Transcoding Task List.
     */
    transcodeTaskSets?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSet[];
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet {
    /**
     * Transfer Adaptive Code Stream Template ID.
     */
    definition: number;
    /**
     * After converting to an adaptive stream, the output path of the manifest file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * The target storage of the file after converting to the adaptive code stream, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
     */
    outputStorage?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage;
    /**
     * After converting to an adaptive stream (only HLS), the output path of the fragmented file can only be a relative path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
     */
    segmentObjectName?: string;
    /**
     * After converting to an adaptive stream, the output path of the sub-stream file can only be a relative path. If not filled, the default is a relative path: {inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
     */
    subStreamObjectName?: string;
    /**
     * Watermark list, support multiple pictures or text watermarks, up to 10.
     */
    watermarkSets?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet[];
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet {
    /**
     * Watermark Template ID.
     */
    definition: number;
    /**
     * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
     */
    endTimeOffset?: number;
    /**
     * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
     */
    rawParameter?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter;
    /**
     * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
     */
    startTimeOffset?: number;
    /**
     * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
     */
    svgContent?: string;
    /**
     * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
     */
    textContent?: string;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
     */
    imageTemplate?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type, optional value:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
     */
    yPos?: string;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * The input content of the watermark image. Support jpeg, png image format.
     */
    imageContent: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
     */
    repeatType?: string;
    /**
     * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
     */
    width?: string;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * Valid when Type is COS, this item is required, indicating media processing COS object information.
     */
    cosInputInfo?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * Enter the type of source object, which supports COS and URL.
     */
    type: string;
    /**
     * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The name of the COS Bucket where the media processing object file is located.
     */
    bucket: string;
    /**
     * Input path for media processing object files.
     */
    object: string;
    /**
     * The park to which the COS Bucket where the media processing target file resides belongs.
     */
    region: string;
}

export interface MpsWorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * Video URL.
     */
    url: string;
}

export interface MpsWorkflowMediaProcessTaskAnimatedGraphicTaskSet {
    /**
     * Video turntable template id.
     */
    definition: number;
    /**
     * The end time of the animation in the video, in seconds.
     */
    endTimeOffset: number;
    /**
     * The output path of the file after rotating the image, which can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_animatedGraphic_{definition}.{format}.
     */
    outputObjectPath?: string;
    /**
     * The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
     */
    outputStorage?: outputs.MpsWorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage;
    /**
     * The start time of the animation in the video, in seconds.
     */
    startTimeOffset: number;
}

export interface MpsWorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowMediaProcessTaskImageSpriteTaskSet {
    /**
     * Sprite Illustration Template ID.
     */
    definition: number;
    /**
     * Rules for the `{number}` variable in the output path after intercepting the Sprite image.Note: This field may return null, indicating that no valid value can be obtained.
     */
    objectNumberFormat?: outputs.MpsWorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat;
    /**
     * After capturing the sprite image, the output path of the sprite image file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * The target storage of the file after the sprite image is intercepted, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
     */
    outputStorage?: outputs.MpsWorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage;
    /**
     * After capturing the sprite image, the output path of the Web VTT file can only be a relative path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}.{format}`.
     */
    webVttObjectName?: string;
}

export interface MpsWorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat {
    /**
     * The growth step of the `{number}` variable, the default is 1.
     */
    increment?: number;
    /**
     * The starting value of `{number}` variable, the default is 0.
     */
    initialValue?: number;
    /**
     * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
     */
    minLength?: number;
    /**
     * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
     */
    placeHolder?: string;
}

export interface MpsWorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSet {
    /**
     * Sample screenshot template ID.
     */
    definition: number;
    /**
     * Rules for the `{number}` variable in the output path after sampling the screenshot.Note: This field may return null, indicating that no valid value can be obtained.
     */
    objectNumberFormat?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat;
    /**
     * The output path of the image file after sampling the screenshot, which can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
     */
    outputStorage?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage;
    /**
     * Watermark list, support multiple pictures or text watermarks, up to 10.
     */
    watermarkSets?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet[];
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat {
    /**
     * The growth step of the `{number}` variable, the default is 1.
     */
    increment?: number;
    /**
     * The starting value of `{number}` variable, the default is 0.
     */
    initialValue?: number;
    /**
     * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
     */
    minLength?: number;
    /**
     * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
     */
    placeHolder?: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet {
    /**
     * Watermark Template ID.
     */
    definition: number;
    /**
     * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
     */
    endTimeOffset?: number;
    /**
     * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
     */
    rawParameter?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter;
    /**
     * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
     */
    startTimeOffset?: number;
    /**
     * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
     */
    svgContent?: string;
    /**
     * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
     */
    textContent?: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
     */
    imageTemplate?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type, optional value:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
     */
    yPos?: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * The input content of the watermark image. Support jpeg, png image format.
     */
    imageContent: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
     */
    repeatType?: string;
    /**
     * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
     */
    width?: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * Valid when Type is COS, this item is required, indicating media processing COS object information.
     */
    cosInputInfo?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * Enter the type of source object, which supports COS and URL.
     */
    type: string;
    /**
     * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The name of the COS Bucket where the media processing object file is located.
     */
    bucket: string;
    /**
     * Input path for media processing object files.
     */
    object: string;
    /**
     * The park to which the COS Bucket where the media processing target file resides belongs.
     */
    region: string;
}

export interface MpsWorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * Video URL.
     */
    url: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet {
    /**
     * Specified time point screenshot template ID.
     */
    definition: number;
    /**
     * Screenshot time point list, the time point supports two formats: s and %:;When the string ends with s, it means that the time point is in seconds, such as 3.5s means that the time point is the 3.5th second.When the string ends with %, it means that the time point is the percentage of the video duration, such as 10% means that the time point is the first 10% of the time in the video.
     */
    extTimeOffsetSets?: string[];
    /**
     * Rules for the `{number}` variable in the output path after the screenshot at the time point.Note: This field may return null, indicating that no valid value can be obtained.
     */
    objectNumberFormat?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat;
    /**
     * The output path of the picture file after the snapshot at the time point can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
     */
    outputObjectPath?: string;
    /**
     * The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
     */
    outputStorage?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage;
    /**
     * Screenshot time point list, the unit is &lt;font color=red&gt;seconds&lt;/font&gt;. This parameter is no longer recommended, it is recommended that you use the ExtTimeOffsetSet parameter.
     */
    timeOffsetSets?: number[];
    /**
     * Watermark list, support multiple pictures or text watermarks, up to 10.
     */
    watermarkSets?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet[];
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat {
    /**
     * The growth step of `{number}` variable, default is 1.
     */
    increment?: number;
    /**
     * The starting value of `{number}` variable, the default is 0.
     */
    initialValue?: number;
    /**
     * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
     */
    minLength?: number;
    /**
     * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
     */
    placeHolder?: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet {
    /**
     * Watermark Template ID.
     */
    definition: number;
    /**
     * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
     */
    endTimeOffset?: number;
    /**
     * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
     */
    rawParameter?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter;
    /**
     * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
     */
    startTimeOffset?: number;
    /**
     * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
     */
    svgContent?: string;
    /**
     * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
     */
    textContent?: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
     */
    imageTemplate?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type, optional value:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
     */
    yPos?: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * The input content of the watermark image. Support jpeg, png image format.
     */
    imageContent: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
     */
    repeatType?: string;
    /**
     * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
     */
    width?: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * Valid when Type is COS, this item is required, indicating media processing COS object information.
     */
    cosInputInfo?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * Enter the type of source object, which supports COS and URL.
     */
    type: string;
    /**
     * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The name of the COS Bucket where the media processing object file is located.
     */
    bucket: string;
    /**
     * Input path for media processing object files.
     */
    object: string;
    /**
     * The park to which the COS Bucket where the media processing target file resides belongs.
     */
    region: string;
}

export interface MpsWorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * Video URL.
     */
    url: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSet {
    /**
     * Video Transcoding Template ID.
     */
    definition: number;
    /**
     * End time offset of video after transcoding, unit: second.Do not fill in or fill in 0, indicating that the transcoded video continues until the end of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video lasts until the nth second of the original video and terminates.When the value is less than 0 (assumed to be -n), it means that the transcoded video lasts until n seconds before the end of the original video.
     */
    endTimeOffset?: number;
    /**
     * Opening and ending parameters.Note: This field may return null, indicating that no valid value can be obtained.
     */
    headTailParameter?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter;
    /**
     * Mosaic list, up to 10 sheets can be supported.
     */
    mosaicSets?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetMosaicSet[];
    /**
     * Rules for the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid value can be obtained.
     */
    objectNumberFormat?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat;
    /**
     * The output path of the main file after transcoding can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_transcode_{definition}.{format}.
     */
    outputObjectPath?: string;
    /**
     * The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
     */
    outputStorage?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOutputStorage;
    /**
     * Video transcoding custom parameters, valid when Definition is not filled with 0.When some transcoding parameters in this structure are filled in, the parameters in the transcoding template will be overwritten with the filled parameters.This parameter is used in highly customized scenarios, it is recommended that you only use Definition to specify transcoding parameters.Note: This field may return null, indicating that no valid value can be obtained.
     */
    overrideParameter?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter;
    /**
     * Video transcoding custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios. It is recommended that you use Definition to specify transcoding parameters first.Note: This field may return null, indicating that no valid value can be obtained.
     */
    rawParameter?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameter;
    /**
     * The output path of the transcoded fragment file (the path of ts when transcoding HLS), can only be a relative path. If not filled, the default is: `{inputName}_transcode_{definition}_{number}.{format}.
     */
    segmentObjectName?: string;
    /**
     * The start time offset of the transcoded video, unit: second.Do not fill in or fill in 0, indicating that the transcoded video starts from the beginning of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video starts from the nth second position of the original video.When the value is less than 0 (assumed to be -n), it means that the transcoded video starts from the position n seconds before the end of the original video.
     */
    startTimeOffset?: number;
    /**
     * Watermark list, support multiple pictures or text watermarks, up to 10.Note: This field may return null, indicating that no valid value can be obtained.
     */
    watermarkSets?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet[];
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter {
    /**
     * Title list.
     */
    headSets?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet[];
    /**
     * Ending List.
     */
    tailSets?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet[];
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet {
    /**
     * Valid when Type is COS, this item is required, indicating media processing COS object information.
     */
    cosInputInfo?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo;
    /**
     * Enter the type of source object, which supports COS and URL.
     */
    type: string;
    /**
     * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo {
    /**
     * The name of the COS Bucket where the media processing object file is located.
     */
    bucket: string;
    /**
     * Input path for media processing object files.
     */
    object: string;
    /**
     * The park to which the COS Bucket where the media processing target file resides belongs.
     */
    region: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo {
    /**
     * Video URL.
     */
    url: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet {
    /**
     * Valid when Type is COS, this item is required, indicating media processing COS object information.
     */
    cosInputInfo?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo;
    /**
     * Enter the type of source object, which supports COS and URL.
     */
    type: string;
    /**
     * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo {
    /**
     * The name of the COS Bucket where the media processing object file is located.
     */
    bucket: string;
    /**
     * Input path for media processing object files.
     */
    object: string;
    /**
     * The park to which the COS Bucket where the media processing target file resides belongs.
     */
    region: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo {
    /**
     * Video URL.
     */
    url: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetMosaicSet {
    /**
     * Origin position, currently only supports:TopLeft: Indicates that the coordinate origin is located in the upper left corner of the video image, and the origin of the mosaic is the upper left corner of the picture or textDefault: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * The end time offset of the mosaic, unit: second.Fill in or fill in 0, indicating that the mosaic continues until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the mosaic lasts until it disappears n seconds before the end of the screen.
     */
    endTimeOffset?: number;
    /**
     * The height of the mosaic. Support %, px two formats.When the string ends with %, it means that the mosaic Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the mosaic Height unit is pixel, such as 100px means that the Height is 100 pixels.Default: 10%.
     */
    height?: string;
    /**
     * The start time offset of the mosaic, unit: second. Do not fill or fill in 0, which means that the mosaic will start to appear when the screen appears.Fill in or fill in 0, which means that the mosaic will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the mosaic starts to appear n seconds before the end of the screen.
     */
    startTimeOffset?: number;
    /**
     * The width of the mosaic. Support %, px two formats:When the string ends with %, it means that the mosaic Width is the percentage size of the video width, such as 10% means that the Width is 10% of the video width.The string ends with px, indicating that the mosaic Width unit is pixels, such as 100px indicates that the Width is 100 pixels.Default: 10%.
     */
    width?: string;
    /**
     * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
     */
    yPos?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat {
    /**
     * The growth step of the `{number}` variable, the default is 1.
     */
    increment?: number;
    /**
     * The starting value of `{number}` variable, the default is 0.
     */
    initialValue?: number;
    /**
     * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
     */
    minLength?: number;
    /**
     * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
     */
    placeHolder?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter {
    /**
     * Audio stream configuration parameters.
     */
    audioTemplate?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate;
    /**
     * Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
     */
    container?: string;
    /**
     * Whether to remove audio data, value:0: reserved.1: remove.
     */
    removeAudio?: number;
    /**
     * Whether to remove video data, value:0: reserved.1: remove.
     */
    removeVideo?: number;
    /**
     * Subtitle Stream Configuration Parameters.
     */
    subtitleTemplate?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate;
    /**
     * Ultra-fast HD transcoding parameters.
     */
    tehdConfig?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig;
    /**
     * Video streaming configuration parameters.
     */
    videoTemplate?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate {
    /**
     * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.
     */
    audioChannel?: number;
    /**
     * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
     */
    bitrate?: number;
    /**
     * Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
     */
    codec?: string;
    /**
     * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
     */
    sampleRate?: number;
    /**
     * Specifies the audio track to preserve for the output. The default is to keep all sources.
     */
    streamSelects?: number[];
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate {
    /**
     * Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default: 1.
     */
    fontAlpha?: number;
    /**
     * Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
     */
    fontColor?: string;
    /**
     * Font size, format: Npx, N is a value, if not specified, the subtitle file shall prevail.
     */
    fontSize?: string;
    /**
     * Font type.hei.ttf, song.ttf, simkai.ttf, arial.ttf.Default: hei.ttf.
     */
    fontType?: string;
    /**
     * The address of the subtitle file to be compressed into the video.
     */
    path?: string;
    /**
     * Specifies the subtitle track to be compressed into the video. If there is a specified Path, the Path has a higher priority. Path and StreamIndex specify at least one.
     */
    streamIndex?: number;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig {
    /**
     * The upper limit of the video bit rate, No filling means no modification.
     */
    maxVideoBitrate?: number;
    /**
     * Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
     */
    type?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate {
    /**
     * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
     */
    bitrate?: number;
    /**
     * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
     */
    codec?: string;
    /**
     * Content Adaptive Encoding. optional value:0: not open.1: open.Default: 0.When this parameter is turned on, multiple code streams with different resolutions and different bit rates will be adaptively generated. The width and height of the VideoTemplate are the maximum resolutions among the multiple code streams, and the bit rates in the VideoTemplate are multiple code rates. The highest bit rate in the stream, the vcrf in VideoTemplate is the highest quality among multiple bit streams. When the resolution, bit rate and vcrf are not set, the highest resolution generated by the ContentAdaptStream parameter is the resolution of the video source, and the video quality is close to vmaf95. To enable this parameter or learn about billing details, please contact your Tencent Cloud Business.
     */
    contentAdaptStream?: number;
    /**
     * Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling;. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched; black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.
     */
    fillType?: string;
    /**
     * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.
     */
    fps?: number;
    /**
     * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
     */
    gop?: number;
    /**
     * The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.
     */
    height?: number;
    /**
     * Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Note: In adaptive mode, Width cannot be smaller than Height.
     */
    resolutionAdaptive?: string;
    /**
     * Video constant bit rate control factor, the value range is [1, 51], Fill in 0 to disable this parameter.If there is no special requirement, it is not recommended to specify this parameter.
     */
    vcrf?: number;
    /**
     * The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.
     */
    width?: number;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameter {
    /**
     * Audio stream configuration parameters, when RemoveAudio is 0, this field is required.
     */
    audioTemplate?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate;
    /**
     * Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
     */
    container: string;
    /**
     * Whether to remove audio data, value:0: reserved.1: remove.Default: 0.
     */
    removeAudio?: number;
    /**
     * Whether to remove video data, value:0: reserved.1: remove.Default: 0.
     */
    removeVideo?: number;
    /**
     * Ultra-fast HD transcoding parameters.
     */
    tehdConfig?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig;
    /**
     * Video stream configuration parameters, when RemoveVideo is 0, this field is required.
     */
    videoTemplate?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate {
    /**
     * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
     */
    audioChannel?: number;
    /**
     * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
     */
    bitrate: number;
    /**
     * Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
     */
    codec: string;
    /**
     * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
     */
    sampleRate: number;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig {
    /**
     * The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
     */
    maxVideoBitrate?: number;
    /**
     * Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
     */
    type: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate {
    /**
     * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
     */
    bitrate: number;
    /**
     * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
     */
    codec: string;
    /**
     * Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
     */
    fillType?: string;
    /**
     * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
     */
    fps: number;
    /**
     * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
     */
    gop?: number;
    /**
     * The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
     */
    height?: number;
    /**
     * Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
     */
    resolutionAdaptive?: string;
    /**
     * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
     */
    vcrf?: number;
    /**
     * The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
     */
    width?: number;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet {
    /**
     * Watermark Template ID.
     */
    definition: number;
    /**
     * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
     */
    endTimeOffset?: number;
    /**
     * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
     */
    rawParameter?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter;
    /**
     * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
     */
    startTimeOffset?: number;
    /**
     * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
     */
    svgContent?: string;
    /**
     * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
     */
    textContent?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter {
    /**
     * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
     */
    imageTemplate?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate;
    /**
     * Watermark type, optional value:image: image watermark.
     */
    type: string;
    /**
     * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
     */
    xPos?: string;
    /**
     * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
     */
    yPos?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate {
    /**
     * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
     */
    height?: string;
    /**
     * The input content of the watermark image. Support jpeg, png image format.
     */
    imageContent: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent;
    /**
     * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
     */
    repeatType?: string;
    /**
     * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
     */
    width?: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent {
    /**
     * Valid when Type is COS, this item is required, indicating media processing COS object information.
     */
    cosInputInfo?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
    /**
     * Enter the type of source object, which supports COS and URL.
     */
    type: string;
    /**
     * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
     */
    urlInputInfo?: outputs.MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
    /**
     * The name of the COS Bucket where the media processing object file is located.
     */
    bucket: string;
    /**
     * Input path for media processing object files.
     */
    object: string;
    /**
     * The park to which the COS Bucket where the media processing target file resides belongs.
     */
    region: string;
}

export interface MpsWorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
    /**
     * Video URL.
     */
    url: string;
}

export interface MpsWorkflowOutputStorage {
    /**
     * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosOutputStorage?: outputs.MpsWorkflowOutputStorageCosOutputStorage;
    /**
     * The type of media processing output object storage location, now only supports COS.
     */
    type: string;
}

export interface MpsWorkflowOutputStorageCosOutputStorage {
    /**
     * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
     */
    bucket?: string;
    /**
     * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
     */
    region?: string;
}

export interface MpsWorkflowTaskNotifyConfig {
    /**
     * CMQ or TDMQ-CMQ model, there are two kinds of Queue and Topic.
     */
    cmqModel?: string;
    /**
     * Region of CMQ or TDMQ-CMQ, such as sh, bj, etc.
     */
    cmqRegion?: string;
    /**
     * The mode of the workflow notification, the possible values are Finish and Change, leaving blank means Finish.
     */
    notifyMode?: string;
    /**
     * Notification type, optional value:CMQ: offline, it is recommended to switch to TDMQ-CMQ.TDMQ-CMQ: message queue.URL: When the URL is specified, the HTTP callback is pushed to the address specified by NotifyUrl, the callback protocol is http+json, and the package body content is the same as the output parameters of the parsing event notification interface.SCF: not recommended, additional configuration of SCF in the console is required.Note: CMQ is the default when not filled or empty, if you need to use other types, you need to fill in the corresponding type value.
     */
    notifyType?: string;
    /**
     * HTTP callback address, required when NotifyType is URL.
     */
    notifyUrl?: string;
    /**
     * Valid when the model is Queue, indicating the queue name of the CMQ or TDMQ-CMQ that receives the event notification.
     */
    queueName?: string;
    /**
     * Valid when the model is a Topic, indicating the topic name of the CMQ or TDMQ-CMQ that receives event notifications.
     */
    topicName?: string;
}

export interface MpsWorkflowTrigger {
    /**
     * Mandatory and valid when Type is CosFileUpload, the rule is triggered for COS.Note: This field may return null, indicating that no valid value can be obtained.
     */
    cosFileUploadTrigger?: outputs.MpsWorkflowTriggerCosFileUploadTrigger;
    /**
     * The type of trigger, currently only supports CosFileUpload.
     */
    type: string;
}

export interface MpsWorkflowTriggerCosFileUploadTrigger {
    /**
     * The name of the COS Bucket bound to the workflow.
     */
    bucket: string;
    /**
     * The input path directory of the workflow binding must be an absolute path, that is, start and end with `/`.
     */
    dir?: string;
    /**
     * A list of file formats that are allowed to be triggered by the workflow, if not filled in, it means that files of all formats can trigger the workflow.
     */
    formats: string[];
    /**
     * The park to which the COS Bucket bound to the workflow belongs.
     */
    region: string;
}

export interface MysqlAuditLogFileFilter {
    /**
     * Affects the number of rows. Indicates to filter audit logs whose number of affected rows is greater than this value.
     */
    affectRows?: number;
    /**
     * Database name.
     */
    dbNames?: string[];
    /**
     * Execution time. The unit is: ms. Indicates to filter audit logs whose execution time is greater than this value.
     */
    execTime?: number;
    /**
     * Client address.
     */
    hosts?: string[];
    /**
     * The name of policy.
     */
    policyNames?: string[];
    /**
     * SQL statement. support fuzzy matching.
     */
    sql?: string;
    /**
     * SQL type. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
     */
    sqlType?: string;
    /**
     * SQL type. Supports simultaneous query of multiple types. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
     */
    sqlTypes?: string[];
    /**
     * SQL statement. Support passing multiple sql statements.
     */
    sqls?: string[];
    /**
     * Table name.
     */
    tableNames?: string[];
    /**
     * User name.
     */
    users?: string[];
}

export interface MysqlBackupDownloadRestrictionLimitVpc {
    /**
     * Restrict downloads from regions. Currently only the current region is supported.
     */
    region: string;
    /**
     * List of vpcs to limit downloads.
     */
    vpcLists: string[];
}

export interface MysqlParamTemplateParamList {
    /**
     * The value of parameter.
     */
    currentValue: string;
    /**
     * The name of parameter.
     */
    name: string;
}

export interface MysqlPasswordComplexityParamList {
    /**
     * Parameter value.
     */
    currentValue?: string;
    /**
     * Parameter name.
     */
    name?: string;
}

export interface MysqlPrivilegeColumn {
    /**
     * Column name.
     */
    columnName: string;
    /**
     * Database name.
     */
    databaseName: string;
    /**
     * Column privilege.available values for Privileges:SELECT,INSERT,UPDATE,REFERENCES.
     */
    privileges: string[];
    /**
     * Table name.
     */
    tableName: string;
}

export interface MysqlPrivilegeDatabase {
    /**
     * Database name.
     */
    databaseName: string;
    /**
     * Database privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER.
     */
    privileges: string[];
}

export interface MysqlPrivilegeTable {
    /**
     * Database name.
     */
    databaseName: string;
    /**
     * Table privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW,TRIGGER.
     */
    privileges: string[];
    /**
     * Table name.
     */
    tableName: string;
}

export interface MysqlProxyProxyNodeCustom {
    /**
     * Number of CPU cores.
     */
    cpu: number;
    /**
     * Memory size.
     */
    mem: number;
    /**
     * Number of nodes.
     */
    nodeCount: number;
    /**
     * Region.
     */
    region: string;
    /**
     * Zone.
     */
    zone: string;
}

export interface MysqlRoGroupRoGroupInfo {
    /**
     * The minimum number of reserved instances. It can be set to any value less than or equal to the number of RO instances under this RO group. Note that if the setting value is greater than the number of RO instances, it will not be removed; if it is set to 0, all instances whose latency exceeds the limit will be removed.
     */
    minRoInGroup?: number;
    /**
     * Delayed replication time.
     */
    replicationDelayTime?: number;
    /**
     * RO group name.
     */
    roGroupName?: string;
    /**
     * RO instance maximum latency threshold. The unit is seconds, the minimum value is 1. Note that the RO group must have enabled instance delay culling policy for this value to be valid.
     */
    roMaxDelayTime?: number;
    /**
     * Whether to enable delayed culling of instances. Supported values are: 1 - on; 0 - not on. Note that if you enable instance delay culling, you must set the delay threshold (RoMaxDelayTime) parameter.
     */
    roOfflineDelay?: number;
    /**
     * weight mode. Supported values include: `system` - automatically assigned by the system; `custom` - user-defined settings. Note that if the `custom` mode is set, the RO instance weight configuration (RoWeightValues) parameter must be set.
     */
    weightMode?: string;
}

export interface MysqlRoGroupRoWeightValue {
    /**
     * RO instance ID.
     */
    instanceId: string;
    /**
     * Weights. The value range is [0, 100].
     */
    weight: number;
}

export interface MysqlRollbackDatabase {
    /**
     * The original database name before rollback.
     */
    databaseName: string;
    /**
     * The new database name after rollback.
     */
    newDatabaseName: string;
}

export interface MysqlRollbackTable {
    /**
     * Database name.
     */
    database: string;
    /**
     * Database table details.
     */
    tables: outputs.MysqlRollbackTableTable[];
}

export interface MysqlRollbackTableTable {
    /**
     * New database table name after rollback.
     */
    newTableName: string;
    /**
     * The original database table name before rollback.
     */
    tableName: string;
}

export interface OceanusJobConfigClazzLevel {
    /**
     * Java class full pathNote: This field may return null, indicating that no valid value can be obtained.
     */
    clazz: string;
    /**
     * Log level TRACE, DEBUG, INFO, WARN, ERRORNote: This field may return null, indicating that no valid value can be obtained.
     */
    level: string;
}

export interface OceanusJobConfigExpertModeConfiguration {
    /**
     * Job graphNote: This field may return null, indicating that no valid value can be obtained.
     */
    jobGraph?: outputs.OceanusJobConfigExpertModeConfigurationJobGraph;
    /**
     * Node configurationNote: This field may return null, indicating that no valid value can be obtained.
     */
    nodeConfigs?: outputs.OceanusJobConfigExpertModeConfigurationNodeConfig[];
    /**
     * Slot sharing groupsNote: This field may return null, indicating that no valid value can be obtained.
     */
    slotSharingGroups?: outputs.OceanusJobConfigExpertModeConfigurationSlotSharingGroup[];
}

export interface OceanusJobConfigExpertModeConfigurationJobGraph {
    /**
     * Edge set of the running graphNote: This field may return null, indicating that no valid value can be obtained.
     */
    edges?: outputs.OceanusJobConfigExpertModeConfigurationJobGraphEdge[];
    /**
     * Point set of the running graphNote: This field may return null, indicating that no valid value can be obtained.
     */
    nodes?: outputs.OceanusJobConfigExpertModeConfigurationJobGraphNode[];
}

export interface OceanusJobConfigExpertModeConfigurationJobGraphEdge {
    /**
     * Starting node ID of the edgeNote: This field may return null, indicating that no valid value can be obtained.
     */
    source: number;
    /**
     * Target node ID of the edgeNote: This field may return null, indicating that no valid value can be obtained.
     */
    target: number;
}

export interface OceanusJobConfigExpertModeConfigurationJobGraphNode {
    /**
     * Node descriptionNote: This field may return null, indicating that no valid value can be obtained.
     */
    description: string;
    /**
     * Node IDNote: This field may return null, indicating that no valid value can be obtained.
     */
    id: number;
    /**
     * Node nameNote: This field may return null, indicating that no valid value can be obtained.
     */
    name: string;
    /**
     * Node parallelismNote: This field may return null, indicating that no valid value can be obtained.
     */
    parallelism: number;
}

export interface OceanusJobConfigExpertModeConfigurationNodeConfig {
    /**
     * Configuration propertiesNote: This field may return null, indicating that no valid value can be obtained.
     */
    configurations?: outputs.OceanusJobConfigExpertModeConfigurationNodeConfigConfiguration[];
    /**
     * Node IDNote: This field may return null, indicating that no valid value can be obtained.
     */
    id: number;
    /**
     * Node parallelismNote: This field may return null, indicating that no valid value can be obtained.
     */
    parallelism?: number;
    /**
     * Slot sharing groupNote: This field may return null, indicating that no valid value can be obtained.
     */
    slotSharingGroup?: string;
    /**
     * State TTL configuration of the node, separated by semicolonsNote: This field may return null, indicating that no valid value can be obtained.
     */
    stateTtl?: string;
}

export interface OceanusJobConfigExpertModeConfigurationNodeConfigConfiguration {
    /**
     * System configuration key.
     */
    key: string;
    /**
     * System configuration value.
     */
    value: string;
}

export interface OceanusJobConfigExpertModeConfigurationSlotSharingGroup {
    /**
     * Description of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
     */
    description?: string;
    /**
     * Name of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
     */
    name: string;
    /**
     * Specification of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
     */
    spec: outputs.OceanusJobConfigExpertModeConfigurationSlotSharingGroupSpec;
}

export interface OceanusJobConfigExpertModeConfigurationSlotSharingGroupSpec {
    /**
     * Applicable CPUNote: This field may return null, indicating that no valid value can be obtained.
     */
    cpu: number;
    /**
     * Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
     */
    heapMemory: string;
    /**
     * Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
     */
    managedMemory?: string;
    /**
     * Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
     */
    offHeapMemory?: string;
}

export interface OceanusJobConfigProperty {
    /**
     * System configuration key.
     */
    key: string;
    /**
     * System configuration value.
     */
    value: string;
}

export interface OceanusJobConfigResourceRef {
    /**
     * Resource ID.
     */
    resourceId: string;
    /**
     * Reference resource type, for example, setting the main resource to 1 represents the jar package where the main class is located.
     */
    type: number;
    /**
     * Resource version ID, -1 indicates the latest version.
     */
    version: number;
}

export interface OceanusResourceConfigResourceLoc {
    /**
     * Json to describe resource location.
     */
    param: outputs.OceanusResourceConfigResourceLocParam;
    /**
     * The available storage types for resource location are currently limited to 1:COS.
     */
    storageType: number;
}

export interface OceanusResourceConfigResourceLocParam {
    /**
     * Resource bucket.
     */
    bucket: string;
    /**
     * Resource path.
     */
    path: string;
    /**
     * Resource region, if not set, use resource region, note: this field may return null, indicating that no valid values can be obtained.
     */
    region?: string;
}

export interface OceanusResourceResourceLoc {
    /**
     * Json to describe resource location.
     */
    param: outputs.OceanusResourceResourceLocParam;
    /**
     * The available storage types for resource location are currently limited to 1:COS.
     */
    storageType: number;
}

export interface OceanusResourceResourceLocParam {
    /**
     * Resource bucket.
     */
    bucket: string;
    /**
     * Resource path.
     */
    path: string;
    /**
     * Resource region, if not set, use resource region, note: this field may return null, indicating that no valid values can be obtained.
     */
    region?: string;
}

export interface OceanusRunJobRunJobDescription {
    /**
     * Custom timestamp.
     */
    customTimestamp?: number;
    /**
     * A certain version of the current job(Not passed by default as a non-draft job version).
     */
    jobConfigVersion?: number;
    /**
     * Job ID.
     */
    jobId: string;
    /**
     * The type of the run. 1 indicates start, and 2 indicates resume.
     */
    runType: number;
    /**
     * Savepoint ID.
     */
    savepointId?: string;
    /**
     * Savepoint path.
     */
    savepointPath?: string;
    /**
     * Compatible with the startup parameters of the old SQL type job: specify the start time point of data source consumption (recommended to pass the value)Ensure that the parameter is LATEST, EARLIEST, T+Timestamp (example: T1557394288000).
     */
    startMode?: string;
    /**
     * Use the historical version of the system dependency.
     */
    useOldSystemConnector?: boolean;
}

export interface OceanusStopJobStopJobDescription {
    /**
     * Job Id.
     */
    jobId: string;
    /**
     * Stop type,1 stopped 2 paused.
     */
    stopType: number;
}

export interface OrganizationInstanceOrgPermission {
    id: number;
    name: string;
}

export interface OrganizationOrgIdentityIdentityPolicy {
    /**
     * Customize policy content and follow CAM policy syntax. Valid and required when PolicyType is the 1-custom policy.
     */
    policyDocument?: string;
    /**
     * CAM default policy ID. Valid and required when PolicyType is the 2-preset policy.
     */
    policyId?: number;
    /**
     * CAM default policy name. Valid and required when PolicyType is the 2-preset policy.
     */
    policyName?: string;
    /**
     * Policy type. Value 1-custom policy 2-preset policy; default value 2.
     */
    policyType?: number;
}

export interface OrganizationOrgMemberOrgPermission {
    id: number;
    name: string;
}

export interface OrganizationOrgShareUnitMemberMember {
    /**
     * Member uin.
     */
    shareMemberUin: number;
}

export interface PostgresqlInstanceBackupPlan {
    /**
     * List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
     */
    backupPeriods?: string[];
    /**
     * Specify days of the retention.
     */
    baseBackupRetentionPeriod?: number;
    /**
     * Specify latest backup start time, format `hh:mm:ss`.
     */
    maxBackupStartTime?: string;
    /**
     * Specify earliest backup start time, format `hh:mm:ss`.
     */
    minBackupStartTime?: string;
}

export interface PostgresqlInstanceDbNodeSet {
    /**
     * Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
     */
    role?: string;
    /**
     * Indicates the node available zone.
     */
    zone: string;
}

export interface PostgresqlParameterTemplateModifyParamEntrySet {
    /**
     * Modify the parameter value. The input parameters are passed in the form of strings, for example: decimal `0.1`, integer `1000`, enumeration `replica`.
     */
    expectedValue: string;
    /**
     * The parameter name.
     */
    name: string;
}

export interface PostgresqlReadonlyGroupNetInfoList {
    ip: string;
    port: number;
}

export interface PrivateDnsZoneAccountVpcSet {
    /**
     * Region.
     */
    region: string;
    /**
     * UIN of the VPC account.
     */
    uin: string;
    /**
     * VPC ID.
     */
    uniqVpcId: string;
    /**
     * VPC NAME.
     */
    vpcName: string;
}

export interface PrivateDnsZoneTagSet {
    /**
     * Key of Tag.
     */
    tagKey: string;
    /**
     * Value of Tag.
     */
    tagValue: string;
}

export interface PrivateDnsZoneVpcAttachmentAccountVpcSet {
    /**
     * Vpc region.
     */
    region: string;
    /**
     * Vpc owner uin. To grant role authorization to this account.
     */
    uin: string;
    /**
     * Uniq Vpc Id.
     */
    uniqVpcId: string;
}

export interface PrivateDnsZoneVpcAttachmentVpcSet {
    /**
     * Vpc region.
     */
    region: string;
    /**
     * Uniq Vpc Id.
     */
    uniqVpcId: string;
}

export interface PrivateDnsZoneVpcSet {
    /**
     * VPC REGION.
     */
    region: string;
    /**
     * VPC ID.
     */
    uniqVpcId: string;
}

export interface PtsFileFileInfo {
    /**
     * File id.
     */
    fileId?: string;
    /**
     * File name.
     */
    name?: string;
    /**
     * File size.
     */
    size?: number;
    /**
     * File type.
     */
    type?: string;
    /**
     * Update time.
     */
    updatedAt?: string;
}

export interface PtsJobDataset {
    fileId: string;
    headLines: string[];
    headerColumns: string[];
    headerInFile: boolean;
    lineCount: number;
    name: string;
    size: number;
    split: boolean;
    tailLines: string[];
    type: string;
    updatedAt: string;
}

export interface PtsJobDomainNameConfig {
    dnsConfigs: outputs.PtsJobDomainNameConfigDnsConfig[];
    hostAliases: outputs.PtsJobDomainNameConfigHostAlias[];
}

export interface PtsJobDomainNameConfigDnsConfig {
    nameservers: string[];
}

export interface PtsJobDomainNameConfigHostAlias {
    hostNames: string[];
    ip: string;
}

export interface PtsJobLoad {
    geoRegionsLoadDistributions: outputs.PtsJobLoadGeoRegionsLoadDistribution[];
    loadSpecs: outputs.PtsJobLoadLoadSpec[];
    vpcLoadDistributions: outputs.PtsJobLoadVpcLoadDistribution[];
}

export interface PtsJobLoadGeoRegionsLoadDistribution {
    percentage: number;
    region: string;
    regionId: number;
}

export interface PtsJobLoadLoadSpec {
    concurrencies: outputs.PtsJobLoadLoadSpecConcurrency[];
    requestsPerSeconds: outputs.PtsJobLoadLoadSpecRequestsPerSecond[];
    scriptOrigins: outputs.PtsJobLoadLoadSpecScriptOrigin[];
}

export interface PtsJobLoadLoadSpecConcurrency {
    gracefulStopSeconds: number;
    iterationCount: number;
    maxRequestsPerSecond: number;
    stages: outputs.PtsJobLoadLoadSpecConcurrencyStage[];
}

export interface PtsJobLoadLoadSpecConcurrencyStage {
    durationSeconds: number;
    targetVirtualUsers: number;
}

export interface PtsJobLoadLoadSpecRequestsPerSecond {
    durationSeconds: number;
    gracefulStopSeconds: number;
    maxRequestsPerSecond: number;
    resources: number;
    startRequestsPerSecond: number;
    targetRequestsPerSecond: number;
}

export interface PtsJobLoadLoadSpecScriptOrigin {
    durationSeconds: number;
    machineNumber: number;
    machineSpecification: string;
}

export interface PtsJobLoadVpcLoadDistribution {
    region: string;
    regionId: number;
    subnetIds: string[];
    vpcId: string;
}

export interface PtsJobPlugin {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface PtsJobProtocol {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface PtsJobRequestFile {
    fileId: string;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface PtsJobTestScript {
    encodedContent: string;
    encodedHttpArchive: string;
    loadWeight: number;
    name: string;
    size: number;
    type: string;
    updatedAt: string;
}

export interface PtsProjectTag {
    /**
     * tag key.
     */
    tagKey?: string;
    /**
     * tag value.
     */
    tagValue?: string;
}

export interface PtsScenarioDataset {
    /**
     * File ID.
     */
    fileId?: string;
    /**
     * Header data row.
     */
    headLines?: string[];
    /**
     * Parameter name array.
     */
    headerColumns?: string[];
    /**
     * Whether the first line is the parameter name.
     */
    headerInFile: boolean;
    /**
     * Number of file lines.
     */
    lineCount?: number;
    /**
     * The file name where the test dataset is located.
     */
    name: string;
    /**
     * Number of file bytes.
     */
    size?: number;
    /**
     * Test whether the dataset is fragmented.
     */
    split: boolean;
    /**
     * Trailing data row.
     */
    tailLines?: string[];
    /**
     * File type.
     */
    type?: string;
    /**
     * Update time.
     */
    updatedAt?: string;
}

export interface PtsScenarioDomainNameConfig {
    /**
     * DNS configuration.
     */
    dnsConfig?: outputs.PtsScenarioDomainNameConfigDnsConfig;
    /**
     * Domain name binding configuration.
     */
    hostAliases?: outputs.PtsScenarioDomainNameConfigHostAlias[];
}

export interface PtsScenarioDomainNameConfigDnsConfig {
    /**
     * DNS IP List.
     */
    nameservers?: string[];
}

export interface PtsScenarioDomainNameConfigHostAlias {
    /**
     * List of domain names to be bound.
     */
    hostNames?: string[];
    /**
     * The IP address to be bound.
     */
    ip?: string;
}

export interface PtsScenarioLoad {
    /**
     * Pressure distribution.
     */
    geoRegionsLoadDistributions?: outputs.PtsScenarioLoadGeoRegionsLoadDistribution[];
    /**
     * Pressure allocation.
     */
    loadSpec?: outputs.PtsScenarioLoadLoadSpec;
    /**
     * Source of stress.
     */
    vpcLoadDistribution?: outputs.PtsScenarioLoadVpcLoadDistribution;
}

export interface PtsScenarioLoadGeoRegionsLoadDistribution {
    /**
     * Percentage.
     */
    percentage?: number;
    /**
     * Region.
     */
    region?: string;
    /**
     * Regional ID.
     */
    regionId: number;
}

export interface PtsScenarioLoadLoadSpec {
    /**
     * Configuration of concurrent pressure mode.
     */
    concurrency?: outputs.PtsScenarioLoadLoadSpecConcurrency;
    /**
     * Configuration of RPS pressure mode.
     */
    requestsPerSecond?: outputs.PtsScenarioLoadLoadSpecRequestsPerSecond;
    /**
     * Built-in stress mode in script.
     */
    scriptOrigin?: outputs.PtsScenarioLoadLoadSpecScriptOrigin;
}

export interface PtsScenarioLoadLoadSpecConcurrency {
    /**
     * Wait time for graceful termination of the task.
     */
    gracefulStopSeconds?: number;
    /**
     * Number of runs.
     */
    iterationCount?: number;
    /**
     * Maximum RPS.
     */
    maxRequestsPerSecond?: number;
    /**
     * Multi-phase configuration array.
     */
    stages?: outputs.PtsScenarioLoadLoadSpecConcurrencyStage[];
}

export interface PtsScenarioLoadLoadSpecConcurrencyStage {
    /**
     * Pressure time.
     */
    durationSeconds?: number;
    /**
     * Number of virtual users.
     */
    targetVirtualUsers?: number;
}

export interface PtsScenarioLoadLoadSpecRequestsPerSecond {
    /**
     * Pressure time.
     */
    durationSeconds?: number;
    /**
     * Elegant shutdown waiting time.
     */
    gracefulStopSeconds?: number;
    /**
     * Maximum RPS.
     */
    maxRequestsPerSecond?: number;
    /**
     * Number of resources.
     */
    resources?: number;
    /**
     * Initial RPS.
     */
    startRequestsPerSecond?: number;
    /**
     * Target RPS, invalid input parameter.
     */
    targetRequestsPerSecond?: number;
}

export interface PtsScenarioLoadLoadSpecScriptOrigin {
    /**
     * Pressure testing time.
     */
    durationSeconds: number;
    /**
     * Number of machines.
     */
    machineNumber: number;
    /**
     * Machine specification.
     */
    machineSpecification: string;
}

export interface PtsScenarioLoadVpcLoadDistribution {
    /**
     * Region.
     */
    region?: string;
    /**
     * Regional ID.
     */
    regionId: number;
    /**
     * Subnet ID list.
     */
    subnetIds?: string[];
    /**
     * VPC ID.
     */
    vpcId?: string;
}

export interface PtsScenarioPlugin {
    /**
     * File id.
     */
    fileId?: string;
    /**
     * File name.
     */
    name?: string;
    /**
     * File size.
     */
    size?: number;
    /**
     * File type.
     */
    type?: string;
    /**
     * Update time.
     */
    updatedAt?: string;
}

export interface PtsScenarioProtocol {
    /**
     * File ID.
     */
    fileId?: string;
    /**
     * Protocol name.
     */
    name?: string;
    /**
     * File name.
     */
    size?: number;
    /**
     * File type.
     */
    type?: string;
    /**
     * Update time.
     */
    updatedAt?: string;
}

export interface PtsScenarioRequestFile {
    /**
     * File id.
     */
    fileId?: string;
    /**
     * File name.
     */
    name?: string;
    /**
     * File size.
     */
    size?: number;
    /**
     * File type.
     */
    type?: string;
    /**
     * Update time.
     */
    updatedAt?: string;
}

export interface PtsScenarioSlaPolicy {
    /**
     * Alarm notification channel.
     */
    alertChannel?: outputs.PtsScenarioSlaPolicyAlertChannel;
    /**
     * SLA rules.
     */
    slaRules?: outputs.PtsScenarioSlaPolicySlaRule[];
}

export interface PtsScenarioSlaPolicyAlertChannel {
    /**
     * AMP consumer ID.
     */
    ampConsumerId?: string;
    /**
     * Notification template ID.
     */
    noticeId?: string;
}

export interface PtsScenarioSlaPolicySlaRule {
    /**
     * Whether to stop the stress test task.
     */
    abortFlag?: boolean;
    /**
     * Aggregation method of pressure test index.
     */
    aggregation?: string;
    /**
     * Pressure test index condition judgment symbol.
     */
    condition?: string;
    /**
     * duraion.
     */
    for?: string;
    /**
     * tag.
     */
    labelFilters?: outputs.PtsScenarioSlaPolicySlaRuleLabelFilter[];
    /**
     * Pressure test index.
     */
    metric?: string;
    /**
     * Threshold value.
     */
    value?: number;
}

export interface PtsScenarioSlaPolicySlaRuleLabelFilter {
    /**
     * Label name.
     */
    labelName?: string;
    /**
     * Label value.
     */
    labelValue?: string;
}

export interface PtsScenarioTestScript {
    /**
     * Base64 encoded file content.
     */
    encodedContent?: string;
    /**
     * Base64 encoded har structure.
     */
    encodedHttpArchive?: string;
    /**
     * Script weight, range 1-100.
     */
    loadWeight?: number;
    /**
     * File name.
     */
    name?: string;
    /**
     * File size.
     */
    size?: number;
    /**
     * File type.
     */
    type?: string;
    /**
     * Update time.
     */
    updatedAt?: string;
}

export interface PtsTmpKeyGenerateCredential {
    tmpSecretId: string;
    tmpSecretKey: string;
    token: string;
}

export interface RedisBackupDownloadRestrictionLimitVpc {
    /**
     * Customize the region of the VPC to which the backup file is downloaded.
     */
    region: string;
    /**
     * Customize the list of VPCs to download backup files.
     */
    vpcLists: string[];
}

export interface RedisInstanceNodeInfo {
    id: number;
    master: boolean;
    zoneId: number;
}

export interface RedisParamTemplateParamDetail {
    currentValue: string;
    default: string;
    description: string;
    enumValues: string[];
    max: string;
    min: string;
    name: string;
    needReboot: number;
    paramType: string;
}

export interface RedisParamTemplateParamsOverride {
    /**
     * Parameter key e.g. `timeout`, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
     */
    key: string;
    /**
     * Parameter value, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
     */
    value: string;
}

export interface ScfFunctionAliasRoutingConfig {
    /**
     * Additional version with rule-based routing.
     */
    additionalVersionMatches?: outputs.ScfFunctionAliasRoutingConfigAdditionalVersionMatch[];
    /**
     * Additional version with random weight-based routing.
     */
    additionalVersionWeights?: outputs.ScfFunctionAliasRoutingConfigAdditionalVersionWeight[];
}

export interface ScfFunctionAliasRoutingConfigAdditionalVersionMatch {
    /**
     * Rule requirements for range match:It should be described in an open or closed range, i.e., (a,b) or [a,b], where both a and b are integersRule requirements for exact match:Exact string match.
     */
    expression: string;
    /**
     * Matching rule key. When the API is called, pass in the key to route the request to the specified version based on the matching ruleHeader method:Enter invoke.headers.User for key and pass in RoutingKey:{User:value} when invoking a function through invoke for invocation based on rule matching.
     */
    key: string;
    /**
     * Match method. Valid values:range: Range matchexact: exact string match.
     */
    method: string;
    /**
     * Function version name.
     */
    version: string;
}

export interface ScfFunctionAliasRoutingConfigAdditionalVersionWeight {
    /**
     * Function version name.
     */
    version: string;
    /**
     * Version weight.
     */
    weight: number;
}

export interface ScfFunctionCfsConfig {
    /**
     * File system instance ID.
     */
    cfsId: string;
    /**
     * (Readonly) File system ip address.
     */
    ipAddress: string;
    /**
     * Local mount directory.
     */
    localMountDir: string;
    /**
     * File system mount instance ID.
     */
    mountInsId: string;
    /**
     * (Readonly) File system subnet ID.
     */
    mountSubnetId: string;
    /**
     * (Readonly) File system virtual private network ID.
     */
    mountVpcId: string;
    /**
     * Remote mount directory.
     */
    remoteMountDir: string;
    /**
     * ID of user group.
     */
    userGroupId: string;
    /**
     * ID of user.
     */
    userId: string;
}

export interface ScfFunctionEventInvokeConfigAsyncTriggerConfig {
    /**
     * Message retention period.
     */
    msgTtl: number;
    /**
     * Async retry configuration of function upon user error.
     */
    retryConfigs: outputs.ScfFunctionEventInvokeConfigAsyncTriggerConfigRetryConfig[];
}

export interface ScfFunctionEventInvokeConfigAsyncTriggerConfigRetryConfig {
    /**
     * Number of retry attempts.
     */
    retryNum: number;
}

export interface ScfFunctionImageConfig {
    /**
     * the parameters of command.
     */
    args?: string;
    /**
     * The command of entrypoint.
     */
    command?: string;
    /**
     * Image accelerate switch.
     */
    containerImageAccelerate?: boolean;
    /**
     * The entrypoint of app.
     */
    entryPoint?: string;
    /**
     * Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
     */
    imagePort?: number;
    /**
     * The image type. personal or enterprise.
     */
    imageType: string;
    /**
     * The uri of image.
     */
    imageUri: string;
    /**
     * The registry id of TCR. When image type is enterprise, it must be set.
     */
    registryId?: string;
}

export interface ScfFunctionIntranetConfig {
    /**
     * If fixed intranet IP is enabled, this field returns the IP list used.
     */
    ipAddresses: string[];
    /**
     * Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
     */
    ipFixed: string;
}

export interface ScfFunctionLayer {
    /**
     * The name of Layer.
     */
    layerName: string;
    /**
     * The version of layer.
     */
    layerVersion: number;
}

export interface ScfFunctionTrigger {
    /**
     * Region of cos bucket. if `type` is `cos`, `cos_region` is required.
     */
    cosRegion?: string;
    /**
     * Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
     */
    name: string;
    /**
     * TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
     */
    triggerDesc: string;
    /**
     * Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
     */
    type: string;
}

export interface ScfFunctionTriggerInfo {
    createTime: string;
    customArgument: string;
    enable: boolean;
    modifyTime: string;
    name: string;
    triggerDesc: string;
    type: string;
}

export interface ScfLayerContent {
    /**
     * Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
     */
    cosBucketName?: string;
    /**
     * Cos bucket region of the SCF layer, conflict with `zip_file`.
     */
    cosBucketRegion?: string;
    /**
     * Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
     */
    cosObjectName?: string;
    /**
     * Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
     */
    zipFile?: string;
}

export interface ScfProvisionedConcurrencyConfigTriggerAction {
    /**
     * The provision type. Value: Default Note: This field may return null, indicating that no valid value can be found.
     */
    provisionedType?: string;
    /**
     * Trigger time of the scheduled action in Cron expression. Seven fields are required and should be separated with a space. Note: this field may return null, indicating that no valid values can be obtained.
     */
    triggerCronConfig: string;
    /**
     * Scheduled action name Note: this field may return null, indicating that no valid values can be obtained.
     */
    triggerName: string;
    /**
     * Target provisioned concurrency of the scheduled scaling action Note: this field may return null, indicating that no valid values can be obtained.
     */
    triggerProvisionedConcurrencyNum: number;
}

export interface SecurityGroupRuleAddressTemplate {
    /**
     * Address template group ID, conflicts with `template_id`.
     */
    groupId?: string;
    /**
     * Address template ID, conflicts with `group_id`.
     */
    templateId?: string;
}

export interface SecurityGroupRuleProtocolTemplate {
    /**
     * Address template group ID, conflicts with `template_id`.
     */
    groupId?: string;
    /**
     * Address template ID, conflicts with `group_id`.
     */
    templateId?: string;
}

export interface SecurityGroupRuleSetEgress {
    /**
     * Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
     */
    action: string;
    /**
     * Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`.
     */
    addressTemplateGroup?: string;
    /**
     * Specify Address template ID like `ipm-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`.
     */
    addressTemplateId?: string;
    /**
     * An IP address network or CIDR segment. NOTE: `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` are exclusive and cannot be set in the same time.
     */
    cidrBlock?: string;
    /**
     * Description of the security group rule.
     */
    description?: string;
    /**
     * An IPV6 address network or CIDR segment, and conflict with `source_security_id` and `address_template_*`.
     */
    ipv6CidrBlock?: string;
    /**
     * The security group rule index number, whose value dynamically changes with changes in security group rules.
     */
    policyIndex: number;
    /**
     * Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
     */
    port: string;
    /**
     * Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `service_template_*`.
     */
    protocol: string;
    /**
     * Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidr_block` and `port`.
     */
    serviceTemplateGroup?: string;
    /**
     * Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidr_block` and `port`.
     */
    serviceTemplateId?: string;
    /**
     * ID of the nested security group, and conflicts with `cidr_block` and `address_template_*`.
     */
    sourceSecurityId?: string;
}

export interface SecurityGroupRuleSetIngress {
    /**
     * Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
     */
    action: string;
    /**
     * Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`.
     */
    addressTemplateGroup?: string;
    /**
     * Specify Address template ID like `ipm-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`.
     */
    addressTemplateId?: string;
    /**
     * An IP address network or CIDR segment. NOTE: `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` are exclusive and cannot be set in the same time.
     */
    cidrBlock?: string;
    /**
     * Description of the security group rule.
     */
    description?: string;
    /**
     * An IPV6 address network or CIDR segment, and conflict with `source_security_id` and `address_template_*`.
     */
    ipv6CidrBlock?: string;
    /**
     * The security group rule index number, whose value dynamically changes with changes in security group rules.
     */
    policyIndex: number;
    /**
     * Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
     */
    port: string;
    /**
     * Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `service_template_*`.
     */
    protocol: string;
    /**
     * Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidr_block` and `port`.
     */
    serviceTemplateGroup?: string;
    /**
     * Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidr_block` and `port`.
     */
    serviceTemplateId?: string;
    /**
     * ID of the nested security group, and conflicts with `cidr_block` and `address_template_*`.
     */
    sourceSecurityId?: string;
}

export interface SesBatchSendEmailAttachment {
    /**
     * Base64-encoded attachment content. You can send attachments of up to 4 MB in the total size.Note: The TencentCloud API supports a request packet of up to 8 MB in size, and the size of the attachmentcontent will increase by 1.5 times after Base64 encoding. Therefore, you need to keep the total size of allattachments below 4 MB. If the entire request exceeds 8 MB, the API will return an error.
     */
    content: string;
    /**
     * Attachment name, which cannot exceed 255 characters. Some attachment types are not supported. For details, see [Attachment Types.](https://www.tencentcloud.com/document/product/1084/42373?has_map=1).
     */
    fileName: string;
}

export interface SesBatchSendEmailCycleParam {
    /**
     * Start time of the task.
     */
    beginTime: string;
    /**
     * Task recurrence in hours.
     */
    intervalTime: number;
    /**
     * Specifies whether to end the cycle. This parameter is used to update the task. Valid values: 0: No; 1: Yes.
     */
    termCycle?: number;
}

export interface SesBatchSendEmailTemplate {
    /**
     * Variable parameters in the template. Please use json.dump to format the JSON object into a string type.The object is a set of key-value pairs. Each key denotes a variable, which is represented by {{key}}. The key will be replaced with the correspondingvalue (represented by {{value}}) when sending the email.Note: The parameter value cannot be data of a complex type such as HTML.Example: {name:xxx,age:xx}.
     */
    templateData: string;
    /**
     * Template ID. If you do not have any template, please create one.
     */
    templateId: number;
}

export interface SesBatchSendEmailTimedParam {
    /**
     * Start time of a scheduled sending task.
     */
    beginTime: string;
}

export interface SesDomainAttribute {
    expectedValue: string;
    sendDomain: string;
    type: string;
}

export interface SesReceiverData {
    /**
     * Recipient email addresses.
     */
    email: string;
    /**
     * Variable parameters in the template, please use json.dump to format the JSON object as a string type. The object is a set of key-value pairs, where each key represents a variable in the template, and the variables in the template are represented by {{key}}, and the corresponding values will be replaced with {{value}} when sent.Note: Parameter values cannot be complex data such as HTML. The total length of TemplateData (the entire JSON structure) should be less than 800 bytes.
     */
    templateData?: string;
}

export interface SesSendEmailAttachment {
    /**
     * Base64-encoded attachment content. You can send attachments of up to 4 MB in the total size.Note: The TencentCloud API supports a request packet of up to 8 MB in size, and the size of the attachmentcontent will increase by 1.5 times after Base64 encoding. Therefore, you need to keep the total size of allattachments below 4 MB. If the entire request exceeds 8 MB, the API will return an error.
     */
    content: string;
    /**
     * Attachment name, which cannot exceed 255 characters. Some attachment types are not supported. For details, see [Attachment Types.](https://www.tencentcloud.com/document/product/1084/42373?has_map=1).
     */
    fileName: string;
}

export interface SesSendEmailTemplate {
    /**
     * Variable parameters in the template. Please use json.dump to format the JSON object into a string type.The object is a set of key-value pairs. Each key denotes a variable, which is represented by {{key}}. The key will be replaced with the correspondingvalue (represented by {{value}}) when sending the email.Note: The parameter value cannot be data of a complex type such as HTML.Example: {name:xxx,age:xx}.
     */
    templateData: string;
    /**
     * Template ID. If you do not have any template, please create one.
     */
    templateId: number;
}

export interface SesTemplateTemplateContent {
    /**
     * Html code after base64.
     */
    html?: string;
    /**
     * Text content after base64.
     */
    text?: string;
}

export interface SqlserverBusinessIntelligenceInstanceResourceTag {
    /**
     * Tag key.
     */
    tagKey?: string;
    /**
     * Tag value.
     */
    tagValue?: string;
}

export interface SqlserverConfigInstanceParamParamList {
    /**
     * Parameter value.
     */
    currentValue?: string;
    /**
     * Parameter name.
     */
    name?: string;
}

export interface SqlserverConfigInstanceRoGroupWeightPair {
    /**
     * Read-only instance ID, in the format: mssqlro-3l3fgqn7.
     */
    readOnlyInstanceId: string;
    /**
     * Read-only instance weight, the range is 0-100.
     */
    readOnlyWeight: number;
}

export interface SqlserverGeneralCloudInstanceResourceTag {
    /**
     * tag key.
     */
    tagKey?: string;
    /**
     * tag value.
     */
    tagValue?: string;
}

export interface SqlserverGeneralCloudRoInstanceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SqlserverMigrationMigrateDbSet {
    /**
     * Name of the migration database.
     */
    dbName?: string;
}

export interface SqlserverMigrationRenameRestore {
    /**
     * When the new name of the library is used for offline migration, if it is not filled in, it will be named according to OldName. OldName and NewName cannot be filled in at the same time. OldName and NewName must be filled in and cannot be duplicate when used for cloning database.
     */
    newName?: string;
    /**
     * The name of the library. If oldName does not exist, a failure is returned.It can be left blank when used for offline migration tasks.
     */
    oldName?: string;
}

export interface SqlserverMigrationSource {
    /**
     * ID of the migration source Cvm, used when MigrateType=2 (cloud server self-built SQL Server database).
     */
    cvmId?: string;
    /**
     * The ID of the migration source instance, which is used when MigrateType=1 (TencentDB for SQLServers). The format is mssql-si2823jyl.
     */
    instanceId?: string;
    /**
     * Migrate the intranet IP of the self-built database of the source Cvm, and use it when MigrateType=2 (self-built SQL Server database of the cloud server).
     */
    ip?: string;
    /**
     * Password, MigrateType=1 or MigrateType=2.
     */
    password?: string;
    /**
     * The port number of the self-built database of the migration source Cvm, which is used when MigrateType=2 (self-built SQL Server database of the cloud server).
     */
    port?: number;
    /**
     * The subnet ID under the Vpc of the source Cvm is used when MigrateType=2 (ECS self-built SQL Server database). The format is as follows subnet-h9extioi.
     */
    subnetId?: string;
    /**
     * The source backup password for offline migration, MigrateType=4 or MigrateType=5.
     */
    urlPassword?: string;
    /**
     * The source backup address for offline migration. MigrateType=4 or MigrateType=5.
     */
    urls?: string[];
    /**
     * User name, MigrateType=1 or MigrateType=2.
     */
    userName?: string;
    /**
     * The Vpc network ID of the migration source Cvm is used when MigrateType=2 (cloud server self-built SQL Server database). The format is as follows vpc-6ys9ont9.
     */
    vpcId: string;
}

export interface SqlserverMigrationTarget {
    /**
     * The ID of the migration target instance, in the format mssql-si2823jyl.
     */
    instanceId?: string;
    /**
     * Password of the migration target instance.
     */
    password?: string;
    /**
     * User name of the migration target instance.
     */
    userName?: string;
}

export interface SqlserverPublishSubscribeDatabaseTuple {
    /**
     * Publish the database.
     */
    publishDatabase: string;
    /**
     * Subscribe the database.
     */
    subscribeDatabase: string;
}

export interface SqlserverRestoreInstanceEncryption {
    dbName: string;
    status: string;
}

export interface SqlserverRestoreInstanceRenameRestore {
    /**
     * New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
     */
    newName: string;
    /**
     * Database name. If the OldName database does not exist, a failure will be returned.It can be left empty in offline migration tasks.
     */
    oldName: string;
}

export interface SqlserverRollbackInstanceEncryption {
    dbName: string;
    status: string;
}

export interface SqlserverRollbackInstanceRenameRestore {
    /**
     * New database name.
     */
    newName: string;
    /**
     * Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
     */
    oldName: string;
}

export interface SqlserverStartXeventEventConfig {
    /**
     * Event type. Valid values: slow (set threshold for slow SQL ), blocked (set threshold for the blocking and deadlock).
     */
    eventType: string;
    /**
     * Threshold in milliseconds. Valid values: 0(disable), non-zero (enable).
     */
    threshold: number;
}

export interface SslFreeCertificateDvAuth {
    dvAuthKey: string;
    dvAuthValue: string;
    dvAuthVerifyType: string;
}

export interface SslPayCertificateDvAuth {
    /**
     * DV authentication key.
     */
    dvAuthKey: string;
    /**
     * DV authentication value.
     */
    dvAuthValue: string;
    /**
     * DV authentication type.
     */
    dvAuthVerifyType: string;
}

export interface SslPayCertificateInformation {
    /**
     * The administrator's email address.
     */
    adminEmail: string;
    /**
     * The first name of the administrator.
     */
    adminFirstName: string;
    /**
     * The last name of the administrator.
     */
    adminLastName: string;
    /**
     * Manager mobile phone number.
     */
    adminPhoneNum: string;
    /**
     * Manager position.
     */
    adminPosition: string;
    /**
     * Domain name for binding certificate.
     */
    certificateDomain: string;
    /**
     * Contact email address.
     */
    contactEmail: string;
    /**
     * Contact first name.
     */
    contactFirstName: string;
    /**
     * Contact last name.
     */
    contactLastName: string;
    /**
     * Contact phone number.
     */
    contactNumber: string;
    /**
     * Contact position.
     */
    contactPosition: string;
    /**
     * CSR content uploaded.
     */
    csrContent?: string;
    /**
     * CSR generation method. Valid values: `online`, `parse`. `online` means online generation, `parse` means manual upload.
     */
    csrType?: string;
    /**
     * Array of uploaded domain names, multi-domain certificates can be uploaded.
     */
    domainLists?: string[];
    /**
     * Private key password.
     */
    keyPassword?: string;
    /**
     * Company address.
     */
    organizationAddress: string;
    /**
     * Company city.
     */
    organizationCity: string;
    /**
     * Country name, such as China: CN.
     */
    organizationCountry: string;
    /**
     * Department name.
     */
    organizationDivision: string;
    /**
     * Company name.
     */
    organizationName: string;
    /**
     * The province where the company is located.
     */
    organizationRegion: string;
    /**
     * Company landline area code.
     */
    phoneAreaCode: string;
    /**
     * Company landline number.
     */
    phoneNumber: string;
    /**
     * Company postal code.
     */
    postalCode: string;
    /**
     * Certificate verification method. Valid values: `DNS_AUTO`, `DNS`, `FILE`. `DNS_AUTO` means automatic DNS verification, this verification type is only supported for domain names resolved by Tencent Cloud and the resolution status is normal, `DNS` means manual DNS verification, `FILE` means file verification.
     */
    verifyType: string;
}

export interface SslUpdateCertificateInstanceOperationResourceTypesRegion {
    /**
     * Region list.
     */
    regions?: string[];
    /**
     * Cloud resource type.
     */
    resourceType?: string;
}

export interface SsmProductSecretPrivilegesList {
    /**
     * This value takes effect only when `PrivilegeName` is `ColumnPrivileges`, and the following parameters are required in this case:Database: explicitly indicate the database instance.TableName: explicitly indicate the table.
     */
    columnName?: string;
    /**
     * This value takes effect only when `PrivilegeName` is `DatabasePrivileges`.
     */
    database?: string;
    /**
     * Permission name. Valid values: `GlobalPrivileges`, `DatabasePrivileges`, `TablePrivileges`, `ColumnPrivileges`. When the permission is `DatabasePrivileges`, the database name must be specified by the `Database` parameter; When the permission is `TablePrivileges`, the database name and the table name in the database must be specified by the `Database` and `TableName` parameters; When the permission is `ColumnPrivileges`, the database name, table name in the database, and column name in the table must be specified by the `Database`, `TableName`, and `ColumnName` parameters.
     */
    privilegeName: string;
    /**
     * Permission list. For the `Mysql` service, optional permission values are: 1. Valid values of `GlobalPrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, PROCESS, DROP,REFERENCES,INDEX,ALTER,SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 2. Valid values of `DatabasePrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 3. Valid values of `TablePrivileges`: SELECT,INSERT,UPDATE,DELETE,CREATE, DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW, TRIGGER. Note: if this parameter is not passed in, it means to clear the permission. 4. Valid values of `ColumnPrivileges`: SELECT,INSERT,UPDATE,REFERENCES.Note: if this parameter is not passed in, it means to clear the permission.
     */
    privileges: string[];
    /**
     * This value takes effect only when `PrivilegeName` is `TablePrivileges`, and the `Database` parameter is required in this case to explicitly indicate the database instance.
     */
    tableName?: string;
}

export interface TatCommandTag {
    /**
     * Tag key.
     */
    key: string;
    /**
     * Tag value.
     */
    value: string;
}

export interface TatInvokerScheduleSettings {
    /**
     * The next execution time of the invoker. This field is required if Policy is ONCE.
     */
    invokeTime?: string;
    /**
     * Execution policy: `ONCE`: Execute once; `RECURRENCE`: Execute repeatedly.
     */
    policy: string;
    /**
     * Trigger the crontab expression. This field is required if `Policy` is `RECURRENCE`. The crontab expression is parsed in UTC+8.
     */
    recurrence?: string;
}

export interface TcaplusIdlTableInfo {
    error: string;
    indexKeySet: string;
    keyFields: string;
    sumKeyFieldSize: number;
    sumValueFieldSize: number;
    tableName: string;
    valueFields: string;
}

export interface TcmAccessLogConfigCls {
    /**
     * Whether enable CLS.
     */
    enable: boolean;
    /**
     * Log set of CLS.
     */
    logSet?: string;
    /**
     * Log topic of CLS.
     */
    topic?: string;
}

export interface TcmAccessLogConfigSelectedRange {
    /**
     * Select all if true, default false.
     */
    all?: boolean;
    /**
     * Items.
     */
    items?: outputs.TcmAccessLogConfigSelectedRangeItem[];
}

export interface TcmAccessLogConfigSelectedRangeItem {
    /**
     * Ingress gateway list.
     */
    gateways?: string[];
    /**
     * Namespace.
     */
    namespace?: string;
}

export interface TcmClusterAttachmentClusterList {
    /**
     * TKE Cluster id.
     */
    clusterId: string;
    /**
     * TKE cluster region.
     */
    region: string;
    /**
     * Cluster role in mesh, REMOTE or MASTER.
     */
    role: string;
    /**
     * Subnet id, only needed if it&#39;s standalone mesh.
     */
    subnetId: string;
    /**
     * Cluster type.
     */
    type: string;
    /**
     * Cluster&#39;s VpcId.
     */
    vpcId: string;
}

export interface TcmMeshConfig {
    /**
     * Sidecar inject configuration.
     */
    inject?: outputs.TcmMeshConfigInject;
    /**
     * Istio configuration.
     */
    istio?: outputs.TcmMeshConfigIstio;
    /**
     * Prometheus configuration.
     */
    prometheus?: outputs.TcmMeshConfigPrometheus;
    /**
     * Default sidecar requests and limits.
     */
    sidecarResources?: outputs.TcmMeshConfigSidecarResources;
    /**
     * Tracing config.
     */
    tracing?: outputs.TcmMeshConfigTracing;
}

export interface TcmMeshConfigInject {
    /**
     * IP ranges that should not be proxied.
     */
    excludeIpRanges?: string[];
    /**
     * Let istio-proxy(sidecar) start first, before app container.
     */
    holdApplicationUntilProxyStarts?: boolean;
    /**
     * Let istio-proxy(sidecar) stop last, after app container.
     */
    holdProxyUntilApplicationEnds?: boolean;
}

export interface TcmMeshConfigIstio {
    /**
     * Disable http retry.
     */
    disableHttpRetry?: boolean;
    /**
     * Disable policy checks.
     */
    disablePolicyChecks?: boolean;
    /**
     * Enable HTTP/1.0 support.
     */
    enablePilotHttp?: boolean;
    /**
     * Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
     */
    outboundTrafficPolicy: string;
    /**
     * SmartDNS configuration.
     */
    smartDns?: outputs.TcmMeshConfigIstioSmartDns;
    /**
     * Tracing config(Deprecated, please use MeshConfig.Tracing for configuration).
     */
    tracing?: outputs.TcmMeshConfigIstioTracing;
}

export interface TcmMeshConfigIstioSmartDns {
    /**
     * Enable auto allocate address.
     */
    istioMetaDnsAutoAllocate?: boolean;
    /**
     * Enable dns proxy.
     */
    istioMetaDnsCapture?: boolean;
}

export interface TcmMeshConfigIstioTracing {
    /**
     * APM config.
     */
    apm?: outputs.TcmMeshConfigIstioTracingApm;
    /**
     * Whether enable tracing.
     */
    enable?: boolean;
    /**
     * Tracing sampling, 0.0-1.0.
     */
    sampling: number;
    /**
     * Third party zipkin config.
     */
    zipkin?: outputs.TcmMeshConfigIstioTracingZipkin;
}

export interface TcmMeshConfigIstioTracingApm {
    /**
     * Whether enable APM.
     */
    enable: boolean;
    /**
     * Instance id of the APM.
     */
    instanceId?: string;
    /**
     * Region.
     */
    region?: string;
}

export interface TcmMeshConfigIstioTracingZipkin {
    /**
     * Zipkin address.
     */
    address: string;
}

export interface TcmMeshConfigPrometheus {
    /**
     * Custom prometheus.
     */
    customProm?: outputs.TcmMeshConfigPrometheusCustomProm;
    /**
     * Instance id.
     */
    instanceId: string;
    /**
     * Region.
     */
    region: string;
    /**
     * Subnet id.
     */
    subnetId: string;
    /**
     * Vpc id.
     */
    vpcId: string;
}

export interface TcmMeshConfigPrometheusCustomProm {
    /**
     * Authentication type of the prometheus.
     */
    authType: string;
    /**
     * Whether it is public address, default false.
     */
    isPublicAddr: boolean;
    /**
     * Password of the prometheus, used in basic authentication type.
     */
    password: string;
    /**
     * Url of the prometheus.
     */
    url: string;
    /**
     * Username of the prometheus, used in basic authentication type.
     */
    username: string;
    /**
     * Vpc id.
     */
    vpcId: string;
}

export interface TcmMeshConfigSidecarResources {
    /**
     * Sidecar limits.
     */
    limits?: outputs.TcmMeshConfigSidecarResourcesLimit[];
    /**
     * Sidecar requests.
     */
    requests?: outputs.TcmMeshConfigSidecarResourcesRequest[];
}

export interface TcmMeshConfigSidecarResourcesLimit {
    /**
     * Resource type name, `cpu/memory`.
     */
    name?: string;
    /**
     * Resource quantity, example: cpu-`100m`, memory-`1Gi`.
     */
    quantity?: string;
}

export interface TcmMeshConfigSidecarResourcesRequest {
    /**
     * Resource type name, `cpu/memory`.
     */
    name?: string;
    /**
     * Resource quantity, example: cpu-`100m`, memory-`1Gi`.
     */
    quantity?: string;
}

export interface TcmMeshConfigTracing {
    /**
     * APM config.
     */
    apm?: outputs.TcmMeshConfigTracingApm;
    /**
     * Whether enable tracing.
     */
    enable: boolean;
    /**
     * Tracing sampling, 0.0-1.0.
     */
    sampling: number;
    /**
     * Third party zipkin config.
     */
    zipkin?: outputs.TcmMeshConfigTracingZipkin;
}

export interface TcmMeshConfigTracingApm {
    /**
     * Whether enable APM.
     */
    enable: boolean;
    /**
     * Instance id of the APM.
     */
    instanceId: string;
    /**
     * Region.
     */
    region: string;
}

export interface TcmMeshConfigTracingZipkin {
    /**
     * Zipkin address.
     */
    address: string;
}

export interface TcmMeshTagList {
    /**
     * Tag key.
     */
    key: string;
    /**
     * Passthrough to other related product.
     */
    passthrough?: boolean;
    /**
     * Tag value.
     */
    value: string;
}

export interface TcmPrometheusAttachmentPrometheus {
    /**
     * Third party prometheus.
     */
    customProm?: outputs.TcmPrometheusAttachmentPrometheusCustomProm;
    /**
     * Existed TMP id, auto create TMP if empty.
     */
    instanceId: string;
    /**
     * Region for TMP.
     */
    region: string;
    /**
     * Subnet id for TMP.
     */
    subnetId: string;
    /**
     * Vpc id for TMP.
     */
    vpcId: string;
}

export interface TcmPrometheusAttachmentPrometheusCustomProm {
    /**
     * Authentication type of the prometheus.
     */
    authType: string;
    /**
     * Whether it is public address, default false.
     */
    isPublicAddr: boolean;
    /**
     * Password of the prometheus, used in basic authentication type.
     */
    password: string;
    /**
     * Url of the prometheus.
     */
    url: string;
    /**
     * Username of the prometheus, used in basic authentication type.
     */
    username: string;
    /**
     * Vpc id.
     */
    vpcId: string;
}

export interface TcmTracingConfigApm {
    /**
     * Whether enable APM.
     */
    enable?: boolean;
    /**
     * Instance id of the APM.
     */
    instanceId?: string;
    /**
     * Region.
     */
    region?: string;
}

export interface TcmTracingConfigZipkin {
    /**
     * Zipkin address.
     */
    address: string;
}

export interface TcrImmutableTagRuleRule {
    /**
     * disable rule.
     */
    disabled?: boolean;
    /**
     * rule id.
     */
    id: number;
    /**
     * namespace name.
     */
    nsName: string;
    /**
     * repository decoration type:repoMatches or repoExcludes.
     */
    repositoryDecoration: string;
    /**
     * repository matching rules.
     */
    repositoryPattern: string;
    /**
     * tag decoration type: matches or excludes.
     */
    tagDecoration: string;
    /**
     * tag matching rules.
     */
    tagPattern: string;
}

export interface TcrInstanceReplication {
    /**
     * Replication registry ID (readonly).
     */
    id: string;
    /**
     * Replication region ID, check the example at the top of page to find out id of region.
     */
    regionId?: number;
    /**
     * Replication region name.
     */
    regionName?: string;
    /**
     * Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
     */
    synTag?: boolean;
}

export interface TcrInstanceSecurityPolicy {
    /**
     * The public network IP address of the access source.
     */
    cidrBlock?: string;
    /**
     * Remarks of policy.
     */
    description?: string;
    /**
     * Index of policy.
     */
    index: number;
    /**
     * Version of policy.
     */
    version: string;
}

export interface TcrManageReplicationOperationPeerReplicationOption {
    /**
     * whether to enable cross-master account instance synchronization.
     */
    enablePeerReplication: boolean;
    /**
     * access permanent token of the instance to be synchronized.
     */
    peerRegistryToken: string;
    /**
     * uin of the instance to be synchronized.
     */
    peerRegistryUin: string;
}

export interface TcrManageReplicationOperationRule {
    /**
     * target namespace.
     */
    destNamespace: string;
    /**
     * sync filters.
     */
    filters: outputs.TcrManageReplicationOperationRuleFilter[];
    /**
     * synchronization rule names.
     */
    name: string;
    /**
     * whether to cover.
     */
    override: boolean;
}

export interface TcrManageReplicationOperationRuleFilter {
    /**
     * type (name, tag, and resource).
     */
    type: string;
    /**
     * empty by default.
     */
    value?: string;
}

export interface TcrNamespaceCveWhitelistItem {
    /**
     * Vulnerability Whitelist ID.
     */
    cveId?: string;
}

export interface TcrServiceAccountPermission {
    /**
     * Actions, currently support: `tcr:PushRepository`, `tcr:PullRepository`, `tcr:CreateRepository`, `tcr:CreateHelmChart`, `tcr:DescribeHelmCharts`. Note: This field may return null, indicating that no valid value can be obtained.
     */
    actions: string[];
    /**
     * resource path, currently only supports Namespace. Note: This field may return null, indicating that no valid value can be obtained.
     */
    resource: string;
}

export interface TcrTagRetentionRuleRetentionRule {
    /**
     * The supported policies are latestPushedK (retain the latest `k` pushed versions) and nDaysSinceLastPush (retain pushed versions within the last `n` days).
     */
    key: string;
    /**
     * corresponding values for rule settings.
     */
    value: number;
}

export interface TcrWebhookTriggerTrigger {
    /**
     * trigger rule.
     */
    condition: string;
    /**
     * trigger description.
     */
    description?: string;
    /**
     * enable trigger.
     */
    enabled: boolean;
    /**
     * trigger action.
     */
    eventTypes: string[];
    /**
     * trigger Id.
     */
    id: number;
    /**
     * trigger name.
     */
    name: string;
    /**
     * the namespace Id to which the trigger belongs.
     */
    namespaceId: number;
    /**
     * trigger target.
     */
    targets: outputs.TcrWebhookTriggerTriggerTarget[];
}

export interface TcrWebhookTriggerTriggerTarget {
    /**
     * target address.
     */
    address: string;
    /**
     * custom Headers.
     */
    headers?: outputs.TcrWebhookTriggerTriggerTargetHeader[];
}

export interface TcrWebhookTriggerTriggerTargetHeader {
    /**
     * Header Key.
     */
    key: string;
    /**
     * Header Values.
     */
    values: string[];
}

export interface TdmqNamespaceRetentionPolicy {
    /**
     * the size of message to retain.
     */
    sizeInMb: number;
    /**
     * the time of message to retain.
     */
    timeInMinutes: number;
}

export interface TdmqProfessionalClusterVpc {
    /**
     * Id of Subnet.
     */
    subnetId: string;
    /**
     * Id of VPC.
     */
    vpcId: string;
}

export interface TdmqRocketmqClusterVpc {
    subnetId: string;
    vpcId: string;
}

export interface TdmqRocketmqVipInstanceIpRule {
    /**
     * Whether to allow or deny.
     */
    allow: boolean;
    /**
     * IP address block information.
     */
    ipRule: string;
    /**
     * Remark.
     */
    remark: string;
}

export interface TdmqRocketmqVipInstanceVpcInfo {
    /**
     * Subnet ID.
     */
    subnetId: string;
    /**
     * VPC ID.
     */
    vpcId: string;
}

export interface TemAppConfigConfigData {
    /**
     * key.
     */
    key: string;
    /**
     * value.
     */
    value: string;
}

export interface TemApplicationServiceService {
    /**
     * ip address of application service.
     */
    ip: string;
    /**
     * port mapping item list.
     */
    portMappingItemLists?: outputs.TemApplicationServiceServicePortMappingItemList[];
    /**
     * application service name.
     */
    serviceName?: string;
    /**
     * ID of subnet instance, required when type is `VPC`.
     */
    subnetId?: string;
    /**
     * application service type: EXTERNAL | VPC | CLUSTER.
     */
    type?: string;
    /**
     * ID of vpc instance, required when type is `VPC`.
     */
    vpcId?: string;
}

export interface TemApplicationServiceServicePortMappingItemList {
    /**
     * container port.
     */
    port?: number;
    /**
     * UDP or TCP.
     */
    protocol?: string;
    /**
     * application listen port.
     */
    targetPort?: number;
}

export interface TemGatewayIngress {
    /**
     * ip version, support IPV4.
     */
    addressIpVersion: string;
    /**
     * related CLB ID, support binding existing clb, does not support modification.
     */
    clbId: string;
    /**
     * creation time.
     */
    createTime: string;
    /**
     * environment ID.
     */
    environmentId: string;
    /**
     * gateway name.
     */
    ingressName: string;
    /**
     * mixing HTTP and HTTPS.
     */
    mixed: boolean;
    /**
     * redirect mode, support AUTO and NONE.
     */
    rewriteType?: string;
    /**
     * proxy rules.
     */
    rules: outputs.TemGatewayIngressRule[];
    /**
     * ingress TLS configurations.
     */
    tls?: outputs.TemGatewayIngressTl[];
    /**
     * gateway vip.
     */
    vip: string;
}

export interface TemGatewayIngressRule {
    /**
     * host name.
     */
    host?: string;
    /**
     * rule payload.
     */
    http: outputs.TemGatewayIngressRuleHttp;
    /**
     * protocol.
     */
    protocol?: string;
}

export interface TemGatewayIngressRuleHttp {
    /**
     * path payload.
     */
    paths: outputs.TemGatewayIngressRuleHttpPath[];
}

export interface TemGatewayIngressRuleHttpPath {
    /**
     * backend payload.
     */
    backend: outputs.TemGatewayIngressRuleHttpPathBackend;
    /**
     * path.
     */
    path: string;
}

export interface TemGatewayIngressRuleHttpPathBackend {
    /**
     * backend name.
     */
    serviceName: string;
    /**
     * backend port.
     */
    servicePort: number;
}

export interface TemGatewayIngressTl {
    /**
     * certificate ID.
     */
    certificateId: string;
    /**
     * host names.
     */
    hosts: string[];
    /**
     * secret name, if you use a certificate, you don't need to fill in this field.
     */
    secretName: string;
}

export interface TemScaleRuleAutoscaler {
    /**
     * name.
     */
    autoscalerName: string;
    /**
     * scaler based on cron configuration.
     */
    cronHorizontalAutoscalers?: outputs.TemScaleRuleAutoscalerCronHorizontalAutoscaler[];
    /**
     * description.
     */
    description?: string;
    /**
     * enable AutoScaler.
     */
    enabled: boolean;
    /**
     * scaler based on metrics.
     */
    horizontalAutoscalers?: outputs.TemScaleRuleAutoscalerHorizontalAutoscaler[];
    /**
     * maximal replica number.
     */
    maxReplicas: number;
    /**
     * minimal replica number.
     */
    minReplicas: number;
}

export interface TemScaleRuleAutoscalerCronHorizontalAutoscaler {
    /**
     * enable scaler.
     */
    enabled: boolean;
    /**
     * name.
     */
    name: string;
    /**
     * period.
     */
    period: string;
    /**
     * priority.
     */
    priority: number;
    /**
     * schedule payload.
     */
    schedules: outputs.TemScaleRuleAutoscalerCronHorizontalAutoscalerSchedule[];
}

export interface TemScaleRuleAutoscalerCronHorizontalAutoscalerSchedule {
    /**
     * start time.
     */
    startAt: string;
    /**
     * target replica number.
     */
    targetReplicas: number;
}

export interface TemScaleRuleAutoscalerHorizontalAutoscaler {
    /**
     * enable scaler.
     */
    enabled: boolean;
    /**
     * maximal replica number.
     */
    maxReplicas: number;
    /**
     * metric name.
     */
    metrics: string;
    /**
     * minimal replica number.
     */
    minReplicas: number;
    /**
     * metric threshold.
     */
    threshold: number;
}

export interface TemWorkloadDeployStrategyConf {
    /**
     * interval between batches.
     */
    batchInterval?: number;
    /**
     * beta batch number.
     */
    betaBatchNum?: number;
    /**
     * strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
     */
    deployStrategyType: number;
    /**
     * force update.
     */
    force?: boolean;
    /**
     * minimal available instances duration deployment.
     */
    minAvailable?: number;
    /**
     * total batch number.
     */
    totalBatchCount: number;
}

export interface TemWorkloadEnvConf {
    /**
     * referenced config name when type=referenced.
     */
    config?: string;
    /**
     * env key.
     */
    key: string;
    /**
     * referenced secret name when type=referenced.
     */
    secret?: string;
    /**
     * env type, support default, referenced.
     */
    type?: string;
    /**
     * env value.
     */
    value: string;
}

export interface TemWorkloadLiveness {
    /**
     * script.
     */
    exec?: string;
    /**
     * initial delay seconds for liveness check.
     */
    initialDelaySeconds?: number;
    /**
     * path.
     */
    path?: string;
    /**
     * period seconds for liveness check.
     */
    periodSeconds?: number;
    /**
     * liveness check port.
     */
    port?: number;
    /**
     * protocol.
     */
    protocol?: string;
    /**
     * timeout seconds for liveness check.
     */
    timeoutSeconds?: number;
    /**
     * check type, support HttpGet, TcpSocket and Exec.
     */
    type: string;
}

export interface TemWorkloadReadiness {
    /**
     * script.
     */
    exec?: string;
    /**
     * initial delay seconds for readiness check.
     */
    initialDelaySeconds?: number;
    /**
     * path.
     */
    path?: string;
    /**
     * period seconds for readiness check.
     */
    periodSeconds?: number;
    /**
     * readiness check port.
     */
    port?: number;
    /**
     * protocol.
     */
    protocol?: string;
    /**
     * timeout seconds for readiness check.
     */
    timeoutSeconds?: number;
    /**
     * check type, support HttpGet, TcpSocket and Exec.
     */
    type: string;
}

export interface TemWorkloadStartupProbe {
    /**
     * script.
     */
    exec?: string;
    /**
     * initial delay seconds for startup check.
     */
    initialDelaySeconds?: number;
    /**
     * path.
     */
    path?: string;
    /**
     * period seconds for startup check.
     */
    periodSeconds?: number;
    /**
     * startup check port.
     */
    port?: number;
    /**
     * protocol.
     */
    protocol?: string;
    /**
     * timeout seconds for startup check.
     */
    timeoutSeconds?: number;
    /**
     * check type, support HttpGet, TcpSocket and Exec.
     */
    type: string;
}

export interface TemWorkloadStorageConf {
    /**
     * volume ip.
     */
    storageVolIp: string;
    /**
     * volume name.
     */
    storageVolName: string;
    /**
     * volume path.
     */
    storageVolPath: string;
}

export interface TemWorkloadStorageMountConf {
    /**
     * mount path.
     */
    mountPath: string;
    /**
     * volume name.
     */
    volumeName: string;
}

export interface TeoAccelerationDomainOriginInfo {
    /**
     * ID of the secondary origin group (valid when `OriginType=ORIGIN_GROUP`). If it is not specified, it indicates that secondary origins are not used.
     */
    backupOrigin?: string;
    /**
     * The origin address. Enter the origin group ID if `OriginType=ORIGIN_GROUP`.
     */
    origin: string;
    /**
     * The origin type. Values: `IP_DOMAIN`: IPv4/IPv6 address or domain name; `COS`: COS bucket address; `ORIGIN_GROUP`: Origin group; `AWS_S3`: AWS S3 bucket address; `SPACE`: EdgeOne Shield Space.
     */
    originType: string;
    /**
     * Whether to authenticate access to the private object storage origin (valid when `OriginType=COS/AWS_S3`). Values: `on`: Enable private authentication; `off`: Disable private authentication. If this field is not specified, the default value `off` is used.
     */
    privateAccess?: string;
    /**
     * The private authentication parameters. This field is valid when `PrivateAccess=on`.
     */
    privateParameters?: outputs.TeoAccelerationDomainOriginInfoPrivateParameter[];
}

export interface TeoAccelerationDomainOriginInfoPrivateParameter {
    /**
     * The parameter name. Valid values: `AccessKeyId`: Access Key ID; `SecretAccessKey`: Secret Access Key.
     */
    name: string;
    /**
     * The parameter value.
     */
    value: string;
}

export interface TeoApplicationProxyIpv6 {
    /**
     * - `on`: Enable.- `off`: Disable.
     */
    switch: string;
}

export interface TeoCertificateConfigServerCertInfo {
    /**
     * Alias of the certificate.Note: This field may return null, indicating that no valid values can be obtained.
     */
    alias: string;
    /**
     * ID of the server certificate.Note: This field may return null, indicating that no valid values can be obtained.
     */
    certId: string;
    /**
     * Domain name of the certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
     */
    commonName: string;
    /**
     * Time when the certificate is deployed. Note: This field may return null, indicating that no valid values can be obtained.
     */
    deployTime: string;
    /**
     * Time when the certificate expires. Note: This field may return null, indicating that no valid values can be obtained.
     */
    expireTime: string;
    /**
     * Signature algorithm. Note: This field may return null, indicating that no valid values can be obtained.
     */
    signAlgo: string;
    /**
     * Type of the certificate. Values: `default`: Default certificate; `upload`: Specified certificate; `managed`: Tencent Cloud-managed certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
     */
    type: string;
}

export interface TeoL4ProxyDdosProtectionConfig {
    /**
     * Exclusive DDoS protection specifications in the Chinese mainland. For details, see [Dedicated DDoS Mitigation Fee (Pay-as-You-Go)] (https://intl.cloud.tencent.com/document/product/1552/94162?from_cn_redirect=1). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `BASE30_MAX300`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 30 Gbps and an elastic protection bandwidth of up to 300 Gbps; `BASE60_MAX600`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 60 Gbps and an elastic protection bandwidth of up to 600 Gbps. If no parameters are filled, the default value PLATFORM is used.
     */
    levelMainland?: string;
    /**
     * Exclusive DDoS protection specifications in the worldwide region (excluding the Chinese mainland). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `ANYCAST300`: Exclusive DDoS protection enabled, offering a total maximum protection bandwidth of 300 Gbps; `ANYCAST_ALLIN`: Exclusive DDoS protection enabled, utilizing all available protection resources for protection. When no parameters are filled, the default value PLATFORM is used.
     */
    levelOverseas?: string;
    /**
     * Configuration of elastic protection bandwidth for exclusive DDoS protection in the Chinese mainland.Valid only when exclusive DDoS protection in the Chinese mainland is enabled (refer to the LevelMainland parameter configuration), and the value has the following limitations: When exclusive DDoS protection is enabled in the Chinese mainland and the 30 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE30_MAX300): the value range is 30 to 300 in Gbps; When exclusive DDoS protection is enabled in the Chinese mainland and the 60 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE60_MAX600): the value range is 60 to 600 in Gbps; When the default protection of the platform is used (the LevelMainland parameter value is PLATFORM): configuration is not supported, and the value of this parameter is invalid.
     */
    maxBandwidthMainland?: number;
}

export interface TeoOriginGroupRecord {
    /**
     * Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
     *   - `true`: Use private authentication.
     *   - `false`: Do not use private authentication.
     */
    private?: boolean;
    /**
     * Parameters for private authentication. Only valid when `Private` is `true`.
     */
    privateParameters?: outputs.TeoOriginGroupRecordPrivateParameter[];
    /**
     * Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
     */
    record: string;
    /**
     * Origin record ID.
     */
    recordId: string;
    /**
     * Origin site type, the values are:
     *   - `IP_DOMAIN`: IPV4, IPV6, domain name type origin site.
     *   - `COS`: COS source.
     *   - `AWS_S3`: AWS S3 object storage origin site.
     */
    type?: string;
    /**
     * The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
     */
    weight?: number;
}

export interface TeoOriginGroupRecordPrivateParameter {
    /**
     * Private authentication parameter name, the values are:
     *   - `AccessKeyId`: Authentication parameter Access Key ID.
     *   - `SecretAccessKey`: Authentication parameter Secret Access Key.
     *   - `SignatureVersion`: Authentication version, v2 or v4.
     *   - `Region`: Bucket region.
     */
    name: string;
    /**
     * Private authentication parameter value.
     */
    value: string;
}

export interface TeoOriginGroupReference {
    instanceId: string;
    instanceName: string;
    instanceType: string;
}

export interface TeoRealtimeLogDeliveryCls {
    /**
     * Tencent Cloud CLS log set ID.
     */
    logSetId: string;
    /**
     * The region where the Tencent Cloud CLS log set is located.
     */
    logSetRegion: string;
    /**
     * Tencent Cloud CLS log topic ID.
     */
    topicId: string;
}

export interface TeoRealtimeLogDeliveryCustomEndpoint {
    /**
     * Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
     */
    accessId?: string;
    /**
     * Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
     */
    accessKey?: string;
    /**
     * Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
     */
    compressType?: string;
    /**
     * The custom request header carried when delivering logs. If the header name you fill in is the default header carried by EdgeOne log push, such as Content-Type, then the header value you fill in will overwrite the default value. The header value references a single variable ${batchSize} to obtain the number of logs included in each POST request.
     */
    headers?: outputs.TeoRealtimeLogDeliveryCustomEndpointHeader[];
    /**
     * When sending logs via POST request, the application layer protocol type used can be: `http`: HTTP protocol; `https`: HTTPS protocol. If not filled in, the protocol type will be parsed according to the filled in URL address.
     */
    protocol?: string;
    /**
     * The custom HTTP interface address for real-time log delivery. Currently, only HTTP/HTTPS protocols are supported.
     */
    url: string;
}

export interface TeoRealtimeLogDeliveryCustomEndpointHeader {
    /**
     * HTTP header name.
     */
    name: string;
    /**
     * HTTP header value.
     */
    value: string;
}

export interface TeoRealtimeLogDeliveryCustomField {
    /**
     * Whether to deliver this field. If left blank, this field will not be delivered.
     */
    enabled?: boolean;
    /**
     * Extract data from the specified location in the HTTP request and response. The values are: `ReqHeader`: extract the specified field value from the HTTP request header; `RspHeader`: extract the specified field value from the HTTP response header; `Cookie`: extract the specified field value from the Cookie.
     */
    name: string;
    /**
     * The name of the parameter whose value needs to be extracted, for example: Accept-Language.
     */
    value: string;
}

export interface TeoRealtimeLogDeliveryDeliveryCondition {
    /**
     * Log filtering conditions, the detailed filtering conditions are as follows: - `EdgeResponseStatusCode`: filter according to the status code returned by the EdgeOne node to the client. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to 0; - `OriginResponseStatusCode`: filter according to the origin response status code. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to -1; - `SecurityAction`: filter according to the final disposal action after the request hits the security rule. Supported operators: `equal`; Optional options are as follows: `-`: unknown/miss; `Monitor`: observe; `JSChallenge`: JavaScript challenge; `Deny`: intercept; `Allow`: allow; `BlockIP`: IP ban; `Redirect`: redirect; `ReturnCustomPage`: return to a custom page; `ManagedChallenge`: managed challenge; `Silence`: silent; `LongDelay`: respond after a long wait; `ShortDelay`: respond after a short wait; -`SecurityModule`: filter according to the name of the security module that finally handles the request. Supported operators: `equal`; Optional options: `-`: unknown/missed; `CustomRule`: Web Protection - Custom Rules; `RateLimitingCustomRule`: Web Protection - Rate Limiting Rules; `ManagedRule`: Web Protection - Managed Rules; `L7DDoS`: Web Protection - CC Attack Protection; `BotManagement`: Bot Management - Bot Basic Management; `BotClientReputation`: Bot Management - Client Profile Analysis; `BotBehaviorAnalysis`: Bot Management - Bot Intelligent Analysis; `BotCustomRule`: Bot Management - Custom Bot Rules; `BotActiveDetection`: Bot Management - Active Feature Recognition.
     */
    conditions?: outputs.TeoRealtimeLogDeliveryDeliveryConditionCondition[];
}

export interface TeoRealtimeLogDeliveryDeliveryConditionCondition {
    /**
     * The key of the filter condition.
     */
    key: string;
    /**
     * Query condition operator, operation types are: `equals`: equal; `notEquals`: not equal; `include`: include; `notInclude`: not include; `startWith`: start with value; `notStartWith`: not start with value; `endWith`: end with value; `notEndWith`: not end with value.
     */
    operator: string;
    /**
     * The value of the filter condition.
     */
    values: string[];
}

export interface TeoRealtimeLogDeliveryLogFormat {
    /**
     * A string to be added before each log delivery batch. Each log delivery batch may contain multiple log records.
     */
    batchPrefix?: string;
    /**
     * A string to append after each log delivery batch.
     */
    batchSuffix?: string;
    /**
     * In a single log record, a string is inserted between fields as a separator. The possible values are: `	`: tab character; `,`: comma; `;`: semicolon.
     */
    fieldDelimiter?: string;
    /**
     * The default output format type for log delivery. The possible values are: `json`: Use the default log output format JSON Lines. The fields in a single log are presented as key-value pairs; `csv`: Use the default log output format csv. Only field values are presented in a single log, without field names.
     */
    formatType: string;
    /**
     * The string inserted between log records as a separator. The possible values are: `
     * `: newline character; `	`: tab character; `,`: comma.
     */
    recordDelimiter?: string;
    /**
     * A string to prepend to each log record.
     */
    recordPrefix?: string;
    /**
     * A string to append to each log record.
     */
    recordSuffix?: string;
}

export interface TeoRealtimeLogDeliveryS3 {
    /**
     * The Access Key ID used to access the bucket.
     */
    accessId: string;
    /**
     * The secret key used to access the bucket.
     */
    accessKey: string;
    /**
     * Bucket name and log storage directory, for example: `your_bucket_name/EO-logs/`. If this directory does not exist in the bucket, it will be created automatically.
     */
    bucket: string;
    /**
     * Data compression type, the values are: gzip: gzip compression. If it is not filled in, compression is not enabled.
     */
    compressType?: string;
    /**
     * URLs that do not include bucket names or paths, for example: `https://storage.googleapis.com`, `https://s3.ap-northeast-2.amazonaws.com`, `https://cos.ap-nanjing.myqcloud.com`.
     */
    endpoint: string;
    /**
     * The region where the bucket is located, for example: ap-northeast-2.
     */
    region: string;
}

export interface TeoRuleEngineRule {
    /**
     * Feature to be executed.
     */
    actions?: outputs.TeoRuleEngineRuleAction[];
    /**
     * OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
     */
    ors: outputs.TeoRuleEngineRuleOr[];
    /**
     * The nested rule.
     */
    subRules?: outputs.TeoRuleEngineRuleSubRule[];
}

export interface TeoRuleEngineRuleAction {
    /**
     * Feature operation with a status code. Features of this type include:
     *   - `ErrorPage`: Custom error page.
     *   - `StatusCodeCache`: Status code cache TTL.
     * Note: This field may return null, indicating that no valid values can be obtained.
     */
    codeAction?: outputs.TeoRuleEngineRuleActionCodeAction;
    /**
     * Common operation. Values:
     *   - `AccessUrlRedirect`: Access URL rewrite.
     *   - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
     *   - `QUIC`: QUIC.
     *   - `WebSocket`: WebSocket.
     *   - `VideoSeek`: Video dragging.
     *   - `Authentication`: Token authentication.
     *   - `CacheKey`: Custom cache key.
     *   - `Cache`: Node cache TTL.
     *   - `MaxAge`: Browser cache TTL.
     *   - `OfflineCache`: Offline cache.
     *   - `SmartRouting`: Smart acceleration.
     *   - `RangeOriginPull`: Range GETs.
     *   - `UpstreamHttp2`: HTTP/2 forwarding.
     *   - `HostHeader`: Host header rewrite.
     *   - `ForceRedirect`: Force HTTPS.
     *   - `OriginPullProtocol`: Origin-pull HTTPS.
     *   - `CachePrefresh`: Cache prefresh.
     *   - `Compression`: Smart compression.
     *   - `Hsts`.
     *   - `ClientIpHeader`.
     *   - `SslTlsSecureConf`.
     *   - `OcspStapling`.
     *   - `Http2`: HTTP/2 access.
     *   - `UpstreamFollowRedirect`: Follow origin redirect.
     *   - `Origin`: Origin.
     * Note: This field may return `null`, indicating that no valid value can be obtained.
     */
    normalAction?: outputs.TeoRuleEngineRuleActionNormalAction;
    /**
     * Feature operation with a request/response header. Features of this type include:
     *   - `RequestHeader`: HTTP request header modification.
     *   - `ResponseHeader`: HTTP response header modification.
     * Note: This field may return null, indicating that no valid values can be obtained.
     */
    rewriteAction?: outputs.TeoRuleEngineRuleActionRewriteAction;
}

export interface TeoRuleEngineRuleActionCodeAction {
    /**
     * Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
     */
    action: string;
    /**
     * Operation parameter.
     */
    parameters: outputs.TeoRuleEngineRuleActionCodeActionParameter[];
}

export interface TeoRuleEngineRuleActionCodeActionParameter {
    /**
     * The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
     */
    name: string;
    /**
     * The status code.
     */
    statusCode: number;
    /**
     * The parameter value.
     */
    values: string[];
}

export interface TeoRuleEngineRuleActionNormalAction {
    /**
     * Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
     */
    action: string;
    /**
     * Parameter.
     */
    parameters: outputs.TeoRuleEngineRuleActionNormalActionParameter[];
}

export interface TeoRuleEngineRuleActionNormalActionParameter {
    /**
     * Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
     */
    name: string;
    /**
     * The parameter value.
     */
    values: string[];
}

export interface TeoRuleEngineRuleActionRewriteAction {
    /**
     * Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
     */
    action: string;
    /**
     * Parameter.
     */
    parameters: outputs.TeoRuleEngineRuleActionRewriteActionParameter[];
}

export interface TeoRuleEngineRuleActionRewriteActionParameter {
    /**
     * Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
     *   - add: Add the HTTP header.
     *   - set: Rewrite the HTTP header.
     *   - del: Delete the HTTP header.
     */
    action: string;
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter value.
     */
    values: string[];
}

export interface TeoRuleEngineRuleOr {
    /**
     * AND Conditions list of the rule. Rule would be triggered if all conditions are true.
     */
    ands: outputs.TeoRuleEngineRuleOrAnd[];
}

export interface TeoRuleEngineRuleOrAnd {
    /**
     * Whether the parameter value is case insensitive. Default value: false.
     */
    ignoreCase?: boolean;
    /**
     * The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
     *   - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
     *   - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
     */
    name?: string;
    /**
     * Operator. Valid values:
     *   - `equals`: Equals.
     *   - `notEquals`: Does not equal.
     *   - `exist`: Exists.
     *   - `notexist`: Does not exist.
     */
    operator: string;
    /**
     * The match type. Values:
     *   - `filename`: File name.
     *   - `extension`: File extension.
     *   - `host`: Host.
     *   - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
     *   - `url`: Partial URL under the current site.
     *   - `client_country`: Country/Region of the client.
     *   - `query_string`: Query string in the request URL.
     *   - `request_header`: HTTP request header.
     */
    target: string;
    /**
     * The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
     *   - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
     *   - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
     *   - When `Target=all`, it indicates any site request.
     *   - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
     *   - When `Target=url`, enter the partial URL path under the current site, such as "/example".
     *   - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
     *   - When `Target=client_country`, enter the ISO-3166 country/region code.
     *   - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
     *   - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
     */
    values?: string[];
}

export interface TeoRuleEngineRuleSubRule {
    /**
     * Nested rule settings.
     */
    rules: outputs.TeoRuleEngineRuleSubRuleRule[];
    /**
     * Tag of the rule.
     */
    tags?: string[];
}

export interface TeoRuleEngineRuleSubRuleRule {
    /**
     * The feature to be executed.
     */
    actions?: outputs.TeoRuleEngineRuleSubRuleRuleAction[];
    /**
     * The condition that determines if a feature should run.
     * Note: If any condition in the array is met, the feature will run.
     */
    ors: outputs.TeoRuleEngineRuleSubRuleRuleOr[];
}

export interface TeoRuleEngineRuleSubRuleRuleAction {
    /**
     * Feature operation with a status code. Features of this type include:
     *   - `ErrorPage`: Custom error page.
     *   - `StatusCodeCache`: Status code cache TTL.
     * Note: This field may return null, indicating that no valid values can be obtained.
     */
    codeAction?: outputs.TeoRuleEngineRuleSubRuleRuleActionCodeAction;
    /**
     * Common operation. Values:
     *   - `AccessUrlRedirect`: Access URL rewrite.
     *   - `UpstreamUrlRedirect`: Origin-pull URL rewrite.
     *   - `QUIC`: QUIC.
     *   - `WebSocket`: WebSocket.
     *   - `VideoSeek`: Video dragging.
     *   - `Authentication`: Token authentication.
     *   - `CacheKey`: Custom cache key.
     *   - `Cache`: Node cache TTL.
     *   - `MaxAge`: Browser cache TTL.
     *   - `OfflineCache`: Offline cache.
     *   - `SmartRouting`: Smart acceleration.
     *   - `RangeOriginPull`: Range GETs.
     *   - `UpstreamHttp2`: HTTP/2 forwarding.
     *   - `HostHeader`: Host header rewrite.
     *   - `ForceRedirect`: Force HTTPS.
     *   - `OriginPullProtocol`: Origin-pull HTTPS.
     *   - `CachePrefresh`: Cache prefresh.
     *   - `Compression`: Smart compression.
     *   - `Hsts`.
     *   - `ClientIpHeader`.
     *   - `SslTlsSecureConf`.
     *   - `OcspStapling`.
     *   - `Http2`: HTTP/2 access.
     *   - `UpstreamFollowRedirect`: Follow origin redirect.
     *   - `Origin`: Origin.
     * Note: This field may return `null`, indicating that no valid value can be obtained.
     */
    normalAction?: outputs.TeoRuleEngineRuleSubRuleRuleActionNormalAction;
    /**
     * Feature operation with a request/response header. Features of this type include:
     *   - `RequestHeader`: HTTP request header modification.
     *   - `ResponseHeader`: HTTP response header modification.
     * Note: This field may return null, indicating that no valid values can be obtained.
     */
    rewriteAction?: outputs.TeoRuleEngineRuleSubRuleRuleActionRewriteAction;
}

export interface TeoRuleEngineRuleSubRuleRuleActionCodeAction {
    /**
     * Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
     */
    action: string;
    /**
     * Operation parameter.
     */
    parameters: outputs.TeoRuleEngineRuleSubRuleRuleActionCodeActionParameter[];
}

export interface TeoRuleEngineRuleSubRuleRuleActionCodeActionParameter {
    /**
     * The parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
     */
    name: string;
    /**
     * The status code.
     */
    statusCode: number;
    /**
     * The parameter value.
     */
    values: string[];
}

export interface TeoRuleEngineRuleSubRuleRuleActionNormalAction {
    /**
     * Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
     */
    action: string;
    /**
     * Parameter.
     */
    parameters: outputs.TeoRuleEngineRuleSubRuleRuleActionNormalActionParameter[];
}

export interface TeoRuleEngineRuleSubRuleRuleActionNormalActionParameter {
    /**
     * Parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name.
     */
    name: string;
    /**
     * The parameter value.
     */
    values: string[];
}

export interface TeoRuleEngineRuleSubRuleRuleActionRewriteAction {
    /**
     * Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
     */
    action: string;
    /**
     * Parameter.
     */
    parameters: outputs.TeoRuleEngineRuleSubRuleRuleActionRewriteActionParameter[];
}

export interface TeoRuleEngineRuleSubRuleRuleActionRewriteActionParameter {
    /**
     * Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
     *   - add: Add the HTTP header.
     *   - set: Rewrite the HTTP header.
     *   - del: Delete the HTTP header.
     */
    action: string;
    /**
     * Parameter name.
     */
    name: string;
    /**
     * Parameter value.
     */
    values: string[];
}

export interface TeoRuleEngineRuleSubRuleRuleOr {
    /**
     * Rule engine condition. This condition will be considered met if all items in the array are met.
     */
    ands: outputs.TeoRuleEngineRuleSubRuleRuleOrAnd[];
}

export interface TeoRuleEngineRuleSubRuleRuleOrAnd {
    /**
     * Whether the parameter value is case insensitive. Default value: false.
     */
    ignoreCase?: boolean;
    /**
     * The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
     *   - `query_string`: Name of the query string, such as "lang" and "version" in "lang=cn&version=1".
     *   - `request_header`: Name of the HTTP request header, such as "Accept-Language" in the "Accept-Language:zh-CN,zh;q=0.9" header.
     */
    name?: string;
    /**
     * Operator. Valid values:
     *   - `equals`: Equals.
     *   - `notEquals`: Does not equal.
     *   - `exist`: Exists.
     *   - `notexist`: Does not exist.
     */
    operator: string;
    /**
     * The match type. Values:
     *   - `filename`: File name.
     *   - `extension`: File extension.
     *   - `host`: Host.
     *   - `full_url`: Full URL, which indicates the complete URL path under the current site and must contain the HTTP protocol, host, and path.
     *   - `url`: Partial URL under the current site.  - `client_country`: Country/Region of the client.
     *   - `query_string`: Query string in the request URL.
     *   - `request_header`: HTTP request header.
     */
    target: string;
    /**
     * The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
     *   - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
     *   - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
     *   - When `Target=all`, it indicates any site request.
     *   - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
     *   - When `Target=url`, enter the partial URL path under the current site, such as "/example".
     *   - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
     *   - When `Target=client_country`, enter the ISO-3166 country/region code.
     *   - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
     *   - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
     */
    values?: string[];
}

export interface TeoZoneOwnershipVerification {
    dnsVerifications: outputs.TeoZoneOwnershipVerificationDnsVerification[];
}

export interface TeoZoneOwnershipVerificationDnsVerification {
    recordType: string;
    recordValue: string;
    subdomain: string;
}

export interface TeoZoneSettingCache {
    /**
     * Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cache?: outputs.TeoZoneSettingCacheCache;
    /**
     * Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
     */
    followOrigin?: outputs.TeoZoneSettingCacheFollowOrigin;
    /**
     * No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
     */
    noCache?: outputs.TeoZoneSettingCacheNoCache;
}

export interface TeoZoneSettingCacheCache {
    /**
     * Cache expiration time settings.
     * Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cacheTime: number;
    /**
     * Cache configuration switch.
     * - `on`: Enable.
     * - `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
     */
    switch: string;
}

export interface TeoZoneSettingCacheFollowOrigin {
    /**
     * Specifies whether to follow the origin server configuration.
     * - `on`: Enable.
     * - `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
     */
    switch: string;
}

export interface TeoZoneSettingCacheKey {
    /**
     * Specifies whether to enable full-path cache.
     * - `on`: Enable full-path cache (i.e., disable Ignore Query String).
     * - `off`: Disable full-path cache (i.e., enable Ignore Query String). Note: This field may return null, indicating that no valid value can be obtained.
     */
    fullUrlCache?: string;
    /**
     * Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ignoreCase?: string;
    /**
     * Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
     */
    queryString?: outputs.TeoZoneSettingCacheKeyQueryString;
}

export interface TeoZoneSettingCacheKeyQueryString {
    /**
     * - `includeCustom`: Include the specified query strings.
     * - `excludeCustom`: Exclude the specified query strings. Note: This field may return null, indicating that no valid value can be obtained.
     */
    action?: string;
    /**
     * Whether to use QueryString as part of CacheKey.
     * - `on`: Enable.
     * - `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
     */
    switch: string;
    /**
     * Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
     */
    values?: string[];
}

export interface TeoZoneSettingCacheNoCache {
    /**
     * Whether to cache the configuration.
     * - `on`: Do not cache.
     * - `off`: Cache. Note: This field may return null, indicating that no valid value can be obtained.
     */
    switch: string;
}

export interface TeoZoneSettingCachePrefresh {
    /**
     * Percentage of cache time before try to prefresh. Valid value range: 1-99.
     */
    percent?: number;
    /**
     * Specifies whether to enable cache prefresh.
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingClientIpHeader {
    /**
     * Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
     */
    headerName?: string;
    /**
     * Specifies whether to enable client IP header.
     * - `on`: Enable.
     * - `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
     */
    switch: string;
}

export interface TeoZoneSettingCompression {
    /**
     * Compression algorithms to select. Valid values: `brotli`, `gzip`.
     */
    algorithms: string[];
    /**
     * Whether to enable Smart compression.
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingForceRedirect {
    /**
     * Redirection status code.
     * - 301
     * - 302 Note: This field may return null, indicating that no valid value can be obtained.
     */
    redirectStatusCode?: number;
    /**
     * Whether to enable force redirect.
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingHttps {
    /**
     * HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
     */
    hsts?: outputs.TeoZoneSettingHttpsHsts;
    /**
     * HTTP2 configuration switch.
     * - `on`: Enable.
     * - `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
     */
    http2?: string;
    /**
     * OCSP configuration switch.
     * - `on`: Enable.
     * - `off`: Disable.
     * It is disabled by default. Note: This field may return null, indicating that no valid value can be obtained.
     */
    ocspStapling?: string;
    /**
     * TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.
     * Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
     */
    tlsVersions?: string[];
}

export interface TeoZoneSettingHttpsHsts {
    /**
     * Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
     */
    includeSubDomains?: string;
    /**
     * MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
     */
    maxAge?: number;
    /**
     * Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
     */
    preload?: string;
    /**
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingIpv6 {
    /**
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingMaxAge {
    /**
     * Specifies whether to follow the max cache age of the origin server.
     * - `on`: Enable.
     * - `off`: Disable.
     * If it's on, MaxAgeTime is ignored. Note: This field may return null, indicating that no valid value can be obtained.
     */
    followOrigin?: string;
    /**
     * Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
     */
    maxAgeTime?: number;
}

export interface TeoZoneSettingOfflineCache {
    /**
     * Whether to enable offline cache.
     * - `on`: Enable.
     * - `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
     */
    switch: string;
}

export interface TeoZoneSettingOrigin {
    /**
     * Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
     */
    backupOrigins: string[];
    /**
     * Origin-pull protocol.
     * - `http`: Switch HTTPS requests to HTTP.
     * - `follow`: Follow the protocol of the request.
     * - `https`: Switch HTTP requests to HTTPS. This only supports port 443 on the origin server. Note: This field may return null, indicating that no valid value can be obtained.
     */
    originPullProtocol: string;
    /**
     * Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
     */
    origins: string[];
}

export interface TeoZoneSettingPostMaxSize {
    /**
     * Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
     */
    maxSize?: number;
    /**
     * Specifies whether to enable custom setting of the maximum file size.
     * - `on`: Enable. You can set a custom max size.
     * - `off`: Disable. In this case, the max size defaults to 32 MB.
     */
    switch: string;
}

export interface TeoZoneSettingQuic {
    /**
     * Whether to enable QUIC.
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingSmartRouting {
    /**
     * Whether to enable smart acceleration.
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingUpstreamHttp2 {
    /**
     * Whether to enable HTTP2 origin-pull.
     * - `on`: Enable.
     * - `off`: Disable.
     */
    switch: string;
}

export interface TeoZoneSettingWebSocket {
    /**
     * Whether to enable custom WebSocket timeout setting. When it's off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
     */
    switch: string;
    /**
     * Sets timeout period in seconds. Maximum value: 120.
     */
    timeout?: number;
}

export interface TrocketRocketmqInstanceIpRule {
    /**
     * Whether to allow release or not.
     */
    allow: boolean;
    /**
     * IP.
     */
    ip: string;
    /**
     * Remark.
     */
    remark: string;
}

export interface TseCngwCanaryRuleCanaryRule {
    /**
     * service weight configuration.
     */
    balancedServiceLists?: outputs.TseCngwCanaryRuleCanaryRuleBalancedServiceList[];
    /**
     * parameter matching condition list.
     */
    conditionLists?: outputs.TseCngwCanaryRuleCanaryRuleConditionList[];
    /**
     * the status of canary rule.
     */
    enabled: boolean;
    /**
     * priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
     */
    priority: number;
    /**
     * service ID.
     */
    serviceId?: string;
    /**
     * service name.
     */
    serviceName?: string;
}

export interface TseCngwCanaryRuleCanaryRuleBalancedServiceList {
    /**
     * percent, 10 is 10%, valid values:0 to 100.
     */
    percent?: number;
    /**
     * service ID, required when used as an input parameter.
     */
    serviceId?: string;
    /**
     * service name, meaningless when used as an input parameter.
     */
    serviceName?: string;
    /**
     * upstream name, meaningless when used as an input parameter.
     */
    upstreamName: string;
}

export interface TseCngwCanaryRuleCanaryRuleConditionList {
    /**
     * delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\n`.
     */
    delimiter?: string;
    /**
     * global configuration ID.
     */
    globalConfigId?: string;
    /**
     * global configuration name.
     */
    globalConfigName?: string;
    /**
     * parameter name.
     */
    key?: string;
    /**
     * operator.Reference value:`le`,`eq`,`lt`,`ne`,`ge`,`gt`,`regex`,`exists`,`in`,`not in`,`prefix`,`exact`,`regex`.
     */
    operator?: string;
    /**
     * type.Reference value:`path`,`method`,`query`,`header`,`cookie`,`body`,`system`.
     */
    type: string;
    /**
     * parameter value.
     */
    value?: string;
}

export interface TseCngwGatewayInstancePort {
    httpPort: string;
    httpsPort: string;
    tcpPort: string;
    udpPort: string;
}

export interface TseCngwGatewayInternetConfig {
    /**
     * description of clb.
     */
    description?: string;
    /**
     * internet type. Reference value: `IPV4`(default value), `IPV6`.
     */
    internetAddressVersion?: string;
    /**
     * public network bandwidth.
     */
    internetMaxBandwidthOut?: number;
    /**
     * trade type of internet. Reference value: `BANDWIDTH`, `TRAFFIC`(default value).
     */
    internetPayMode?: string;
    /**
     * primary availability zone.
     */
    masterZoneId?: string;
    /**
     * Whether load balancing has multiple availability zones.
     */
    multiZoneFlag?: boolean;
    /**
     * specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
     */
    slaType?: string;
    /**
     * alternate availability zone.
     */
    slaveZoneId?: string;
}

export interface TseCngwGatewayNodeConfig {
    /**
     * node number, 2-50.
     */
    number: number;
    /**
     * specification, 1c2g|2c4g|4c8g|8c16g.
     */
    specification: string;
}

export interface TseCngwGatewayVpcConfig {
    /**
     * subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
     */
    subnetId?: string;
    /**
     * VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
     */
    vpcId?: string;
}

export interface TseCngwGroupInternetConfig {
    /**
     * description of clb.
     */
    description?: string;
    /**
     * internet type. Reference value:- IPV4 (default value)- IPV6.
     */
    internetAddressVersion?: string;
    /**
     * public network bandwidth.
     */
    internetMaxBandwidthOut?: number;
    /**
     * trade type of internet. Reference value:- BANDWIDTH- TRAFFIC (default value).
     */
    internetPayMode?: string;
    /**
     * primary availability zone.
     */
    masterZoneId?: string;
    /**
     * Whether load balancing has multiple availability zones.
     */
    multiZoneFlag?: boolean;
    /**
     * specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
     */
    slaType?: string;
    /**
     * alternate availability zone.
     */
    slaveZoneId?: string;
}

export interface TseCngwGroupNodeConfig {
    /**
     * group node number, 2-50.
     */
    number: number;
    /**
     * group specification, 1c2g|2c4g|4c8g|8c16g.
     */
    specification: string;
}

export interface TseCngwNetworkAccessControlAccessControl {
    /**
     * Black list.
     */
    cidrBlackLists?: string[];
    /**
     * White list.
     */
    cidrWhiteLists?: string[];
    /**
     * Access mode: `Whitelist`, `Blacklist`.
     */
    mode: string;
}

export interface TseCngwRouteHeader {
    /**
     * key of header.
     */
    key?: string;
    /**
     * value of header.
     */
    value?: string;
}

export interface TseCngwRouteRateLimitLimitDetail {
    /**
     * status of service rate limit.
     */
    enabled: boolean;
    /**
     * external redis information, maybe null.
     */
    externalRedis?: outputs.TseCngwRouteRateLimitLimitDetailExternalRedis;
    /**
     * request headers that require rate limit.
     */
    header?: string;
    /**
     * whether to hide the headers of client.
     */
    hideClientHeaders: boolean;
    /**
     * whether to enable request queuing.
     */
    isDelay: boolean;
    /**
     * basis for service rate limit.Reference value:`ip`,`service`,`consumer`,`credential`,`path`,`header`.
     */
    limitBy: string;
    /**
     * queue time.
     */
    lineUpTime?: number;
    /**
     * request paths that require rate limit.
     */
    path?: string;
    /**
     * counter policy.Reference value:`local`,`redis`,`external_redis`.
     */
    policy?: string;
    /**
     * qps threshold.
     */
    qpsThresholds: outputs.TseCngwRouteRateLimitLimitDetailQpsThreshold[];
    /**
     * response configuration, the response strategy is text, maybe null.
     */
    rateLimitResponse?: outputs.TseCngwRouteRateLimitLimitDetailRateLimitResponse;
    /**
     * request forwarding address, maybe null.
     */
    rateLimitResponseUrl?: string;
    /**
     * response strategy.Reference value:`url`: forward request according to url,`text`: response configuration,`default`: return directly.
     */
    responseType: string;
}

export interface TseCngwRouteRateLimitLimitDetailExternalRedis {
    /**
     * redis ip, maybe null.
     */
    redisHost: string;
    /**
     * redis password, maybe null.
     */
    redisPassword: string;
    /**
     * redis port, maybe null.
     */
    redisPort: number;
    /**
     * redis timeout, unit: `ms`, maybe null.
     */
    redisTimeout: number;
}

export interface TseCngwRouteRateLimitLimitDetailQpsThreshold {
    /**
     * the max threshold.
     */
    max: number;
    /**
     * qps threshold unit.Reference value:`second`,`minute`,`hour`,`day`,`month`,`year`.
     */
    unit: string;
}

export interface TseCngwRouteRateLimitLimitDetailRateLimitResponse {
    /**
     * custom response body, maybe bull.
     */
    body?: string;
    /**
     * headrs.
     */
    headers?: outputs.TseCngwRouteRateLimitLimitDetailRateLimitResponseHeader[];
    /**
     * http status code.
     */
    httpStatus?: number;
}

export interface TseCngwRouteRateLimitLimitDetailRateLimitResponseHeader {
    /**
     * key of header.
     */
    key?: string;
    /**
     * value of header.
     */
    value?: string;
}

export interface TseCngwServiceRateLimitLimitDetail {
    /**
     * status of service rate limit.
     */
    enabled: boolean;
    /**
     * external redis information, maybe null.
     */
    externalRedis?: outputs.TseCngwServiceRateLimitLimitDetailExternalRedis;
    /**
     * request headers that require rate limit.
     */
    header?: string;
    /**
     * whether to hide the headers of client.
     */
    hideClientHeaders: boolean;
    /**
     * whether to enable request queuing.
     */
    isDelay: boolean;
    /**
     * basis for service rate limit.Reference value: `ip`, `service`, `consumer`, `credential`, `path`, `header`.
     */
    limitBy: string;
    /**
     * queue time.
     */
    lineUpTime?: number;
    /**
     * request paths that require rate limit.
     */
    path?: string;
    /**
     * counter policy.Reference value: `local`, `redis`, `external_redis`.
     */
    policy?: string;
    /**
     * qps threshold.
     */
    qpsThresholds: outputs.TseCngwServiceRateLimitLimitDetailQpsThreshold[];
    /**
     * response configuration, the response strategy is text, maybe null.
     */
    rateLimitResponse?: outputs.TseCngwServiceRateLimitLimitDetailRateLimitResponse;
    /**
     * request forwarding address, maybe null.
     */
    rateLimitResponseUrl?: string;
    /**
     * response strategy.Reference value: `url`: forward request according to url, `text`: response configuration, `default`: return directly.
     */
    responseType: string;
}

export interface TseCngwServiceRateLimitLimitDetailExternalRedis {
    /**
     * redis ip, maybe null.
     */
    redisHost: string;
    /**
     * redis password, maybe null.
     */
    redisPassword: string;
    /**
     * redis port, maybe null.
     */
    redisPort: number;
    /**
     * redis timeout, unit: `ms`, maybe null.
     */
    redisTimeout: number;
}

export interface TseCngwServiceRateLimitLimitDetailQpsThreshold {
    /**
     * the max threshold.
     */
    max: number;
    /**
     * qps threshold unit.Reference value:`second`, `minute`, `hour`, `day`, `month`, `year`.
     */
    unit: string;
}

export interface TseCngwServiceRateLimitLimitDetailRateLimitResponse {
    /**
     * custom response body, maybe bull.
     */
    body?: string;
    /**
     * headrs.
     */
    headers?: outputs.TseCngwServiceRateLimitLimitDetailRateLimitResponseHeader[];
    /**
     * http status code.
     */
    httpStatus?: number;
}

export interface TseCngwServiceRateLimitLimitDetailRateLimitResponseHeader {
    /**
     * key of header.
     */
    key?: string;
    /**
     * value of header.
     */
    value?: string;
}

export interface TseCngwServiceUpstreamInfo {
    /**
     * load balance algorithm,default: `round-robin`, `least-connections` and `consisten_hashing` also support.
     */
    algorithm: string;
    /**
     * auto scaling group port of cvm.
     */
    autoScalingCvmPort?: number;
    /**
     * auto scaling group ID of cvm.
     */
    autoScalingGroupId?: string;
    /**
     * hook status in auto scaling group of cvm.
     */
    autoScalingHookStatus?: string;
    /**
     * tat cmd status in auto scaling group of cvm.
     */
    autoScalingTatCmdStatus?: string;
    /**
     * an IP address or domain name.
     */
    host: string;
    /**
     * namespace.
     */
    namespace?: string;
    /**
     * backend service port.valid values: `1` to `65535`.
     */
    port?: number;
    /**
     * exact source service type.
     */
    realSourceType?: string;
    /**
     * scf lambda name.
     */
    scfLambdaName?: string;
    /**
     * scf lambda version.
     */
    scfLambdaQualifier?: string;
    /**
     * scf lambda namespace.
     */
    scfNamespace?: string;
    /**
     * scf lambda type.
     */
    scfType?: string;
    /**
     * the name of the service in registry or kubernetes.
     */
    serviceName?: string;
    /**
     * slow start time, unit: `second`, when it is enabled, weight of the node is increased from 1 to the target value gradually.
     */
    slowStart?: number;
    /**
     * service source ID.
     */
    sourceId?: string;
    /**
     * the name of source service.
     */
    sourceName?: string;
    /**
     * source service type.
     */
    sourceType?: string;
    /**
     * provided when service type is IPList.
     */
    targets?: outputs.TseCngwServiceUpstreamInfoTarget[];
}

export interface TseCngwServiceUpstreamInfoTarget {
    /**
     * created time.
     */
    createdTime: string;
    /**
     * health.
     */
    health: string;
    /**
     * host.
     */
    host: string;
    /**
     * port.
     */
    port: number;
    /**
     * source of target.
     */
    source?: string;
    /**
     * weight.
     */
    weight: number;
}

export interface TseCngwStrategyConfig {
    /**
     * behavior configuration of metric
     * Note: This field may return null, indicating that a valid value is not available.
     */
    behavior?: outputs.TseCngwStrategyConfigBehavior;
    /**
     * create time
     * Note: This field may return null, indicating that a valid value is not available.
     */
    createTime?: string;
    /**
     * max number of replica for metric scaling.
     */
    maxReplicas?: number;
    /**
     * metric list.
     */
    metrics?: outputs.TseCngwStrategyConfigMetric[];
    /**
     * modify time
     * Note: This field may return null, indicating that a valid value is not available.
     */
    modifyTime?: string;
    /**
     * strategy ID
     * Note: This field may return null, indicating that a valid value is not available.
     */
    strategyId?: string;
}

export interface TseCngwStrategyConfigBehavior {
    /**
     * configuration of down scale
     * Note: This field may return null, indicating that a valid value is not available.
     */
    scaleDown?: outputs.TseCngwStrategyConfigBehaviorScaleDown;
    /**
     * configuration of up scale
     * Note: This field may return null, indicating that a valid value is not available.
     */
    scaleUp?: outputs.TseCngwStrategyConfigBehaviorScaleUp;
}

export interface TseCngwStrategyConfigBehaviorScaleDown {
    /**
     * policies of scale down
     * Note: This field may return null, indicating that a valid value is not available.
     */
    policies?: outputs.TseCngwStrategyConfigBehaviorScaleDownPolicy[];
    /**
     * type of policy, default value: max
     * Note: This field may return null, indicating that a valid value is not available.
     */
    selectPolicy?: string;
    /**
     * stability window time, unit:second, default 300 when scale down
     * Note: This field may return null, indicating that a valid value is not available.
     */
    stabilizationWindowSeconds?: number;
}

export interface TseCngwStrategyConfigBehaviorScaleDownPolicy {
    /**
     * period of scale down
     * Note: This field may return null, indicating that a valid value is not available.
     */
    periodSeconds?: number;
    /**
     * type, default value: Pods
     * Note: This field may return null, indicating that a valid value is not available.
     */
    type?: string;
    /**
     * value
     * Note: This field may return null, indicating that a valid value is not available.
     */
    value?: number;
}

export interface TseCngwStrategyConfigBehaviorScaleUp {
    /**
     * policies of scale up
     * Note: This field may return null, indicating that a valid value is not available.
     */
    policies?: outputs.TseCngwStrategyConfigBehaviorScaleUpPolicy[];
    /**
     * type of policy, default value: max
     * Note: This field may return null, indicating that a valid value is not available.
     */
    selectPolicy?: string;
    /**
     * stability window time, unit:second, default 0 when scale up
     * Note: This field may return null, indicating that a valid value is not available.
     */
    stabilizationWindowSeconds?: number;
}

export interface TseCngwStrategyConfigBehaviorScaleUpPolicy {
    /**
     * period of scale up
     * Note: This field may return null, indicating that a valid value is not available.
     */
    periodSeconds?: number;
    /**
     * type, default value: Pods
     * Note: This field may return null, indicating that a valid value is not available.
     */
    type?: string;
    /**
     * value
     * Note: This field may return null, indicating that a valid value is not available.
     */
    value?: number;
}

export interface TseCngwStrategyConfigMetric {
    /**
     * metric name. Reference value:
     * - cpu
     * - memory
     * Note: This field may return null, indicating that a valid value is not available.
     */
    resourceName?: string;
    /**
     * target type of metric, currently only supports `Utilization`
     * Note: This field may return null, indicating that a valid value is not available.
     */
    targetType: string;
    /**
     * target value of metric
     * Note: This field may return null, indicating that a valid value is not available.
     */
    targetValue?: number;
    /**
     * metric type. Deafault value
     * - Resource.
     */
    type?: string;
}

export interface TseCngwStrategyCronConfig {
    /**
     * parameter list of timed scaling
     * Note: This field may return null, indicating that a valid value is not available.
     */
    params?: outputs.TseCngwStrategyCronConfigParam[];
    /**
     * strategy ID
     * Note: This field may return null, indicating that a valid value is not available.
     */
    strategyId?: string;
}

export interface TseCngwStrategyCronConfigParam {
    /**
     * cron expression of timed scaling, no input required
     * Note: This field may return null, indicating that a valid value is not available.
     */
    crontab?: string;
    /**
     * period of timed scaling
     * Note: This field may return null, indicating that a valid value is not available.
     */
    period?: string;
    /**
     * start time of timed scaling
     * Note: This field may return null, indicating that a valid value is not available.
     */
    startAt?: string;
    /**
     * the number of target nodes for the timed scaling. Do not exceed the max number of replica for metric scaling
     * Note: This field may return null, indicating that a valid value is not available.
     */
    targetReplicas?: number;
}

export interface TseInstanceEngineRegionInfo {
    /**
     * Engine node region.
     */
    engineRegion: string;
    /**
     * The number of nodes allocated in this region.
     */
    replica: number;
    /**
     * Cluster network information.
     */
    vpcInfos: outputs.TseInstanceEngineRegionInfoVpcInfo[];
}

export interface TseInstanceEngineRegionInfoVpcInfo {
    /**
     * Intranet access addressNote: This field may return null, indicating that a valid value is not available..
     */
    intranetAddress?: string;
    /**
     * Subnet ID.
     */
    subnetId: string;
    /**
     * Vpc Id.
     */
    vpcId: string;
}

export interface TsfApiGroupBindedGatewayDeployGroup {
    applicationId: string;
    applicationName: string;
    applicationType: string;
    clusterType: string;
    deployGroupId: string;
    deployGroupName: string;
    groupStatus: string;
}

export interface TsfApplicationServiceConfigList {
    /**
     * Health check configuration.
     */
    healthCheck?: outputs.TsfApplicationServiceConfigListHealthCheck;
    /**
     * Service name.
     */
    name: string;
    /**
     * List of port information.
     */
    ports: outputs.TsfApplicationServiceConfigListPort[];
}

export interface TsfApplicationServiceConfigListHealthCheck {
    /**
     * Health check path.
     */
    path?: string;
}

export interface TsfApplicationServiceConfigListPort {
    /**
     * Port protocol.
     */
    protocol: string;
    /**
     * Service port.
     */
    targetPort: number;
}

export interface TsfClusterOperationInfo {
    addInstances: outputs.TsfClusterOperationInfoAddInstance[];
    destroys: outputs.TsfClusterOperationInfoDestroy[];
    inits: outputs.TsfClusterOperationInfoInit[];
}

export interface TsfClusterOperationInfoAddInstance {
    disabledReason: string;
    enabled: boolean;
    supported: boolean;
}

export interface TsfClusterOperationInfoDestroy {
    disabledReason: string;
    enabled: boolean;
    supported: boolean;
}

export interface TsfClusterOperationInfoInit {
    disabledReason: string;
    enabled: boolean;
    supported: boolean;
}

export interface TsfDeployContainerGroupAgentProfileList {
    /**
     * Agent type.
     */
    agentType: string;
    /**
     * Agent version.
     */
    agentVersion: string;
}

export interface TsfDeployContainerGroupEnv {
    /**
     * env param name.
     */
    name: string;
    /**
     * value of env.
     */
    value: string;
    /**
     * Kubernetes ValueFrom configuration. Note: This field may return null, indicating that no valid values can be obtained.
     */
    valueFrom?: outputs.TsfDeployContainerGroupEnvValueFrom;
}

export interface TsfDeployContainerGroupEnvValueFrom {
    /**
     * The FieldRef configuration of Kubernetes env. Note: This field may return null, indicating that no valid values can be obtained.
     */
    fieldRef?: outputs.TsfDeployContainerGroupEnvValueFromFieldRef;
    /**
     * The ResourceFieldRef configuration of Kubernetes env. Note: This field may return null, indicating that no valid values can be obtained.
     */
    resourceFieldRef?: outputs.TsfDeployContainerGroupEnvValueFromResourceFieldRef;
}

export interface TsfDeployContainerGroupEnvValueFromFieldRef {
    /**
     * The FieldPath configuration of Kubernetes. Note: This field may return null, indicating that no valid values can be obtained.
     */
    fieldPath: string;
}

export interface TsfDeployContainerGroupEnvValueFromResourceFieldRef {
    /**
     * The Resource configuration of Kubernetes. Note: This field may return null, indicating that no valid values can be obtained.
     */
    resource: string;
}

export interface TsfDeployContainerGroupHealthCheckSettings {
    /**
     * Liveness probe. Note: This field may return null, indicating that no valid values can be obtained.
     */
    livenessProbe?: outputs.TsfDeployContainerGroupHealthCheckSettingsLivenessProbe;
    /**
     * Readiness health check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    readinessProbe?: outputs.TsfDeployContainerGroupHealthCheckSettingsReadinessProbe;
}

export interface TsfDeployContainerGroupHealthCheckSettingsLivenessProbe {
    /**
     * The health check method. HTTP: checks through an HTTP interface; CMD: checks by executing a command; TCP: checks by establishing a TCP connection. Note: This field may return null, indicating that no valid values can be obtained.
     */
    actionType: string;
    /**
     * The command to be executed for command health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    commands?: string[];
    /**
     * The number of consecutive successful health checks required for the backend container to transition from success to failure. Note: This field may return null, indicating that no valid values can be obtained.
     */
    failureThreshold?: number;
    /**
     * The time delay for the container to start the health check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    initialDelaySeconds?: number;
    /**
     * The request path for HTTP health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    path?: string;
    /**
     * The time interval for performing health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    periodSeconds?: number;
    /**
     * The port used for health checks, ranging from 1 to 65535. Note: This field may return null, indicating that no valid values can be obtained.
     */
    port?: number;
    /**
     * The protocol used for HTTP health checks. HTTP and HTTPS are supported. Note: This field may return null, indicating that no valid values can be obtained.
     */
    scheme?: string;
    /**
     * The number of consecutive successful health checks required for the backend container to transition from failure to success. Note: This field may return null, indicating that no valid values can be obtained.
     */
    successThreshold?: number;
    /**
     * The maximum timeout period for each health check response. Note: This field may return null, indicating that no valid values can be obtained.
     */
    timeoutSeconds?: number;
    /**
     * The type of readiness probe. TSF_DEFAULT represents the default readiness probe of TSF, while K8S_NATIVE represents the native readiness probe of Kubernetes. If this field is not specified, the native readiness probe of Kubernetes is used by default. Note: This field may return null, indicating that no valid values can be obtained.
     */
    type?: string;
}

export interface TsfDeployContainerGroupHealthCheckSettingsReadinessProbe {
    /**
     * The health check method. HTTP indicates checking through an HTTP interface, CMD indicates checking through executing a command, and TCP indicates checking through establishing a TCP connection. Note: This field may return null, indicating that no valid values can be obtained.
     */
    actionType: string;
    /**
     * The command to be executed for command check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    commands?: string[];
    /**
     * The number of consecutive successful health checks required for the backend container to transition from success to failure. Note: This field may return null, indicating that no valid values can be obtained.
     */
    failureThreshold?: number;
    /**
     * The time to delay the start of the container health check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    initialDelaySeconds?: number;
    /**
     * The request path for HTTP health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    path?: string;
    /**
     * The time interval for performing health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    periodSeconds?: number;
    /**
     * The port used for health checks, ranging from 1 to 65535. Note: This field may return null, indicating that no valid values can be obtained.
     */
    port?: number;
    /**
     * The protocol used for HTTP health checks. HTTP and HTTPS are supported. Note: This field may return null, indicating that no valid values can be obtained.
     */
    scheme?: string;
    /**
     * The number of consecutive successful health checks required for the backend container to transition from failure to success. Note: This field may return null, indicating that no valid values can be obtained.
     */
    successThreshold?: number;
    /**
     * The maximum timeout period for each health check response. Note: This field may return null, indicating that no valid values can be obtained.
     */
    timeoutSeconds?: number;
    /**
     * The type of readiness probe. TSF_DEFAULT represents the default readiness probe of TSF, while K8S_NATIVE represents the native readiness probe of Kubernetes. If this field is not specified, the native readiness probe of Kubernetes is used by default. Note: This field may return null, indicating that no valid values can be obtained.
     */
    type?: string;
}

export interface TsfDeployContainerGroupSchedulingStrategy {
    /**
     * NONE: Do not use scheduling strategy; CROSS_AZ: Deploy across availability zones. Note: This field may return null, indicating that no valid values can be obtained.
     */
    type: string;
}

export interface TsfDeployContainerGroupServiceSetting {
    /**
     * 0: Public network, 1: Access within the cluster, 2: NodePort, 3: Access within VPC. Note: This field may return null, indicating that no valid values can be obtained.
     */
    accessType: number;
    /**
     * When set to true and DisableService is also true, the previously created service will be deleted. Please use with caution. Note: This field may return null, indicating that no valid values can be obtained.
     */
    allowDeleteService: boolean;
    /**
     * Whether to create a Kubernetes service. The default value is false. Note: This field may return null, indicating that no valid values can be obtained.
     */
    disableService: boolean;
    /**
     * Whether the service is of headless type. Note: This field may return null, indicating that no valid values can be obtained.
     */
    headlessService: boolean;
    /**
     * Enable session affinity. true means enabled, false means disabled. The default value is false. Note: This field may return null, indicating that no valid values can be obtained.
     */
    openSessionAffinity: boolean;
    /**
     * Container port mapping. Note: This field may return null, indicating that no valid values can be obtained.
     */
    protocolPorts: outputs.TsfDeployContainerGroupServiceSettingProtocolPort[];
    /**
     * Session affinity session time. The default value is 10800. Note: This field may return null, indicating that no valid values can be obtained.
     */
    sessionAffinityTimeoutSeconds: number;
    /**
     * subnet Id.
     */
    subnetId: string;
}

export interface TsfDeployContainerGroupServiceSettingProtocolPort {
    /**
     * node port.
     */
    nodePort: number;
    /**
     * port.
     */
    port: number;
    /**
     * TCP or UDP.
     */
    protocol: string;
    /**
     * container port.
     */
    targetPort: number;
}

export interface TsfDeployContainerGroupVolumeInfoList {
    /**
     * volume config.
     */
    volumeConfig: string;
    /**
     * volume name.
     */
    volumeName: string;
    /**
     * volume type.
     */
    volumeType: string;
}

export interface TsfDeployContainerGroupVolumeMountInfoList {
    /**
     * Read and write access mode. 1: Read-only. 2: Read-write.
     */
    readOrWrite: string;
    /**
     * mount volume name.
     */
    volumeMountName: string;
    /**
     * mount path.
     */
    volumeMountPath: string;
    /**
     * mount subPath.
     */
    volumeMountSubPath: string;
}

export interface TsfDeployContainerGroupWarmupSetting {
    /**
     * Preheating curvature, with a value between 1 and 5.
     */
    curvature: number;
    /**
     * Whether to enable preheating.
     */
    enabled: boolean;
    /**
     * Whether to enable preheating protection. If protection is enabled and more than 50% of nodes are in preheating state, preheating will be aborted.
     */
    enabledProtection: boolean;
    /**
     * warmup time.
     */
    warmupTime: number;
}

export interface TsfDeployVmGroupAgentProfileList {
    /**
     * Agent type.
     */
    agentType: string;
    /**
     * Agent version.
     */
    agentVersion: string;
}

export interface TsfDeployVmGroupHealthCheckSettings {
    /**
     * Survival health check. Note: This field may return null, indicating that no valid value was found.
     */
    livenessProbe?: outputs.TsfDeployVmGroupHealthCheckSettingsLivenessProbe;
    /**
     * Readiness health check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    readinessProbe?: outputs.TsfDeployVmGroupHealthCheckSettingsReadinessProbe;
}

export interface TsfDeployVmGroupHealthCheckSettingsLivenessProbe {
    /**
     * Health check method. HTTP: check through HTTP interface; CMD: check through executing command; TCP: check through establishing TCP connection. Note: This field may return null, indicating that no valid value was found.
     */
    actionType: string;
    /**
     * The command to be executed for command health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    commands: string[];
    /**
     * The number of consecutive successful health checks required for the backend container to transition from success to failure. Note: This field may return null, indicating that no valid values can be obtained.
     */
    failureThreshold: number;
    /**
     * The time delay for the container to start the health check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    initialDelaySeconds: number;
    /**
     * The request path for HTTP health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    path: string;
    /**
     * The time interval for performing health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    periodSeconds: number;
    /**
     * The port used for health checks, ranging from 1 to 65535. Note: This field may return null, indicating that no valid values can be obtained.
     */
    port: number;
    /**
     * The protocol used for HTTP health checks. HTTP and HTTPS are supported. Note: This field may return null, indicating that no valid values can be obtained.
     */
    scheme: string;
    /**
     * The number of consecutive successful health checks required for the backend container to transition from failure to success. Note: This field may return null, indicating that no valid values can be obtained.
     */
    successThreshold: number;
    /**
     * The maximum timeout period for each health check response. Note: This field may return null, indicating that no valid values can be obtained.
     */
    timeoutSeconds: number;
    /**
     * The type of readiness probe. TSF_DEFAULT represents the default readiness probe of TSF, while K8S_NATIVE represents the native readiness probe of Kubernetes. If this field is not specified, the native readiness probe of Kubernetes is used by default. Note: This field may return null, indicating that no valid values can be obtained.
     */
    type: string;
}

export interface TsfDeployVmGroupHealthCheckSettingsReadinessProbe {
    /**
     * The health check method. HTTP indicates checking through an HTTP interface, CMD indicates checking through executing a command, and TCP indicates checking through establishing a TCP connection. Note: This field may return null, indicating that no valid values can be obtained.
     */
    actionType: string;
    /**
     * The command to be executed for command check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    commands: string[];
    /**
     * The number of consecutive successful health checks required for the backend container to transition from success to failure. Note: This field may return null, indicating that no valid values can be obtained.
     */
    failureThreshold: number;
    /**
     * The time to delay the start of the container health check. Note: This field may return null, indicating that no valid values can be obtained.
     */
    initialDelaySeconds: number;
    /**
     * The request path for HTTP health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    path: string;
    /**
     * The time interval for performing health checks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    periodSeconds: number;
    /**
     * The port used for health checks, ranging from 1 to 65535. Note: This field may return null, indicating that no valid values can be obtained.
     */
    port: number;
    /**
     * The protocol used for HTTP health checks. HTTP and HTTPS are supported. Note: This field may return null, indicating that no valid values can be obtained.
     */
    scheme: string;
    /**
     * The number of consecutive successful health checks required for the backend container to transition from failure to success. Note: This field may return null, indicating that no valid values can be obtained.
     */
    successThreshold: number;
    /**
     * The maximum timeout period for each health check response. Note: This field may return null, indicating that no valid values can be obtained.
     */
    timeoutSeconds: number;
    /**
     * The type of readiness probe. TSF_DEFAULT represents the default readiness probe of TSF, while K8S_NATIVE represents the native readiness probe of Kubernetes. If this field is not specified, the native readiness probe of Kubernetes is used by default. Note: This field may return null, indicating that no valid values can be obtained.
     */
    type: string;
}

export interface TsfDeployVmGroupWarmupSetting {
    /**
     * Preheating curvature, with a value between 1 and 5.
     */
    curvature: number;
    /**
     * Whether to enable preheating.
     */
    enabled: boolean;
    /**
     * Whether to enable preheating protection. If protection is enabled and more than 50% of nodes are in preheating state, preheating will be aborted.
     */
    enabledProtection: boolean;
    /**
     * warmup time.
     */
    warmupTime: number;
}

export interface TsfInstancesAttachmentInstanceAdvancedSettings {
    /**
     * Dockerd --graph specifies the value, default is /var/lib/docker Note: This field may return null, indicating that no valid values can be obtained.
     */
    dockerGraphPath: string;
    /**
     * Data disk mount point, data disks are not mounted by default. Data disks with formatted ext3, ext4, xfs file systems will be mounted directly, other file systems or unformatted data disks will be automatically formatted as ext4 and mounted. Please back up your data! This setting does not take effect for cloud servers with no data disks or multiple data disks. Note: This field may return null, indicating that no valid values can be obtained.
     */
    mountTarget: string;
}

export interface TsfLaneLaneGroupList {
    /**
     * application ID.
     */
    applicationId?: string;
    /**
     * application name.
     */
    applicationName?: string;
    /**
     * cluster type.
     */
    clusterType?: string;
    /**
     * creation time.
     */
    createTime?: number;
    /**
     * Whether to enter the application.
     */
    entrance: boolean;
    /**
     * Deployment group ID.
     */
    groupId: string;
    /**
     * deployment group name.
     */
    groupName?: string;
    /**
     * Swimlane deployment group ID.
     */
    laneGroupId?: string;
    /**
     * Lane ID.
     */
    laneId?: string;
    /**
     * Namespace ID.
     */
    namespaceId?: string;
    /**
     * namespace name.
     */
    namespaceName?: string;
    /**
     * update time.
     */
    updateTime?: number;
}

export interface TsfLaneRuleRuleTagList {
    /**
     * creation time.
     */
    createTime: number;
    /**
     * lane rule ID.
     */
    laneRuleId: string;
    /**
     * label ID.
     */
    tagId: string;
    /**
     * label name.
     */
    tagName: string;
    /**
     * label operator.
     */
    tagOperator: string;
    /**
     * tag value.
     */
    tagValue: string;
    /**
     * update time.
     */
    updateTime: number;
}

export interface TsfTaskAdvanceSettings {
    /**
     * Subtask single-machine concurrency limit, the default value is 2.
     */
    subTaskConcurrency?: number;
}

export interface TsfTaskShardArgument {
    /**
     * Sharding parameter KEY, integer, range [1,1000].
     */
    shardKey: number;
    /**
     * Shard parameter VALUE.
     */
    shardValue: string;
}

export interface TsfTaskTaskRule {
    /**
     * Cron type rule, cron expression.
     */
    expression?: string;
    /**
     * time interval, in milliseconds.
     */
    repeatInterval?: number;
    /**
     * trigger rule type, Cron/Repeat.
     */
    ruleType: string;
}

export interface TsfUnitRuleUnitRuleItemList {
    /**
     * rule description.
     */
    description?: string;
    /**
     * destination namespace ID.
     */
    destNamespaceId: string;
    /**
     * destination namespace name.
     */
    destNamespaceName: string;
    /**
     * rule item name.
     */
    name: string;
    /**
     * rule order, the smaller the higher the priority: the default is 0.
     */
    priority?: number;
    /**
     * logical relationship: AND/OR.
     */
    relationship: string;
    /**
     * rule item ID.
     */
    ruleId: string;
    /**
     * Unitization rule ID.
     */
    unitRuleId: string;
    /**
     * list of rule labels.
     */
    unitRuleTagLists?: outputs.TsfUnitRuleUnitRuleItemListUnitRuleTagList[];
}

export interface TsfUnitRuleUnitRuleItemListUnitRuleTagList {
    /**
     * rule ID.
     */
    ruleId: string;
    /**
     * label name.
     */
    tagField: string;
    /**
     * Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
     */
    tagOperator: string;
    /**
     * Tag Type: U(User Tag).
     */
    tagType: string;
    /**
     * tag value.
     */
    tagValue: string;
    /**
     * Unitization rule item ID.
     */
    unitRuleItemId: string;
}

export interface VodAdaptiveDynamicStreamingTemplateStreamInfo {
    /**
     * Audio parameter information.
     */
    audio: outputs.VodAdaptiveDynamicStreamingTemplateStreamInfoAudio;
    /**
     * Whether to remove audio stream. Valid values: `false`: no, `true`: yes. `false` by default.
     */
    removeAudio?: boolean;
    /**
     * Whether to remove video stream. Valid values: `false`: no, `true`: yes. `false` by default.
     */
    removeVideo: boolean;
    /**
     * Extremely fast HD transcoding parameters.
     */
    tehdConfig?: outputs.VodAdaptiveDynamicStreamingTemplateStreamInfoTehdConfig;
    /**
     * Video parameter information.
     */
    video: outputs.VodAdaptiveDynamicStreamingTemplateStreamInfoVideo;
}

export interface VodAdaptiveDynamicStreamingTemplateStreamInfoAudio {
    /**
     * Audio channel system. Valid values: mono, dual, stereo. Default value: dual.
     */
    audioChannel?: string;
    /**
     * Audio stream bitrate in Kbps. Value range: `0` and `[26, 256]`. If the value is `0`, the bitrate of the audio stream will be the same as that of the original audio.
     */
    bitrate: number;
    /**
     * Audio stream encoder. Valid value are: `libfdk_aac` and `libmp3lame`. while `libfdk_aac` is recommended.
     */
    codec: string;
    /**
     * Audio stream sample rate. Valid values: `32000`, `44100`, `48000`Hz.
     */
    sampleRate: number;
}

export interface VodAdaptiveDynamicStreamingTemplateStreamInfoTehdConfig {
    /**
     * Video bitrate limit, which is valid when Type specifies extreme speed HD type. If you leave it empty or enter 0, there is no video bitrate limit.
     */
    maxVideoBitrate: number;
    /**
     * Extreme high-speed HD type, available values:
     * - TEHD-100: super high definition-100th;
     * - OFF: turn off Ultra High definition.
     */
    type: string;
}

export interface VodAdaptiveDynamicStreamingTemplateStreamInfoVideo {
    /**
     * Bitrate of video stream in Kbps. Value range: `0` and `[128, 35000]`. If the value is `0`, the bitrate of the video will be the same as that of the source video.
     */
    bitrate: number;
    /**
     * Video stream encoder. Valid values: `libx264`,`libx265`,`av1`. `libx264`: H.264, `libx265`: H.265, `av1`: AOMedia Video 1. Currently, a resolution within 640x480 must be specified for `H.265`. and the `av1` container only supports mp4.
     */
    codec: string;
    /**
     * Encoding label, valid only if the encoding format of the video stream is H.265 encoding. Available values:
     * - hvc1: stands for hvc1 tag;
     * - hev1: stands for the hev1 tag;
     * Default value: hvc1.
     */
    codecTag: string;
    /**
     * Fill type. Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: black. Note: this field may return null, indicating that no valid values can be obtained.
     */
    fillType?: string;
    /**
     * Video frame rate in Hz. Value range: `[0, 60]`. If the value is `0`, the frame rate will be the same as that of the source video.
     */
    fps: number;
    /**
     * Interval between Keyframe I frames, value range: 0 and [1, 100000], unit: number of frames. When you fill in 0 or leave it empty, the gop length is automatically set.
     */
    gop: number;
    /**
     * Maximum value of the height (or short side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    height?: number;
    /**
     * Whether the transcoding output still maintains HDR when the original video is HDR (High Dynamic Range). Value range:
     * - ON: if the original file is HDR, the transcoding output remains HDR;, otherwise the transcoding output is SDR (Standard Dynamic Range);
     * - OFF: regardless of whether the original file is HDR or SDR, the transcoding output is SDR;
     * Default value: OFF.
     */
    preserveHdrSwitch: string;
    /**
     * Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    resolutionAdaptive?: boolean;
    /**
     * Video constant bit rate control factor, value range is [1,51].
     * Note:
     * - If this parameter is specified, the bitrate control method of CRF will be used for transcoding (the video bitrate will no longer take effect);
     * - This field is required when the video stream encoding format is H.266. The recommended value is 28;
     * - If there are no special requirements, it is not recommended to specify this parameter.
     */
    vcrf: number;
    /**
     * Maximum value of the width (or long side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    width?: number;
}

export interface VodProcedureTemplateAiAnalysisTask {
    /**
     * Video content analysis template ID.
     */
    definition: string;
}

export interface VodProcedureTemplateAiRecognitionTask {
    /**
     * Intelligent video recognition template ID.
     */
    definition: string;
}

export interface VodProcedureTemplateMediaProcessTask {
    /**
     * List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    adaptiveDynamicStreamingTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskList[];
    /**
     * List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    animatedGraphicTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskAnimatedGraphicTaskList[];
    /**
     * List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    coverBySnapshotTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskCoverBySnapshotTaskList[];
    /**
     * List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    imageSpriteTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskImageSpriteTaskList[];
    /**
     * List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    sampleSnapshotTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskSampleSnapshotTaskList[];
    /**
     * List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    snapshotByTimeOffsetTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskList[];
    /**
     * List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    transcodeTaskLists?: outputs.VodProcedureTemplateMediaProcessTaskTranscodeTaskList[];
}

export interface VodProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskList {
    /**
     * Adaptive bitrate streaming template ID.
     */
    definition: string;
    /**
     * Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
     */
    subtitleLists: string[];
    /**
     * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    watermarkLists?: outputs.VodProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList[];
}

export interface VodProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList {
    /**
     * Watermarking template ID.
     */
    definition: string;
    /**
     * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    svgContent?: string;
    /**
     * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
     */
    textContent?: string;
}

export interface VodProcedureTemplateMediaProcessTaskAnimatedGraphicTaskList {
    /**
     * Animated image generating template ID.
     */
    definition: string;
    /**
     * End time of animated image in video in seconds.
     */
    endTimeOffset: number;
    /**
     * Start time of animated image in video in seconds.
     */
    startTimeOffset: number;
}

export interface VodProcedureTemplateMediaProcessTaskCoverBySnapshotTaskList {
    /**
     * Time point screen capturing template ID.
     */
    definition: string;
    /**
     * Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
     */
    positionType: string;
    /**
     * Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
     */
    positionValue: number;
    /**
     * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    watermarkLists?: outputs.VodProcedureTemplateMediaProcessTaskCoverBySnapshotTaskListWatermarkList[];
}

export interface VodProcedureTemplateMediaProcessTaskCoverBySnapshotTaskListWatermarkList {
    /**
     * Watermarking template ID.
     */
    definition: string;
    /**
     * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    svgContent?: string;
    /**
     * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
     */
    textContent?: string;
}

export interface VodProcedureTemplateMediaProcessTaskImageSpriteTaskList {
    /**
     * Image sprite generating template ID.
     */
    definition: string;
}

export interface VodProcedureTemplateMediaProcessTaskSampleSnapshotTaskList {
    /**
     * Sampled screen capturing template ID.
     */
    definition: string;
    /**
     * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    watermarkLists?: outputs.VodProcedureTemplateMediaProcessTaskSampleSnapshotTaskListWatermarkList[];
}

export interface VodProcedureTemplateMediaProcessTaskSampleSnapshotTaskListWatermarkList {
    /**
     * Watermarking template ID.
     */
    definition: string;
    /**
     * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    svgContent?: string;
    /**
     * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
     */
    textContent?: string;
}

export interface VodProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskList {
    /**
     * Time point screen capturing template ID.
     */
    definition: string;
    /**
     * The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
     */
    extTimeOffsetLists?: string[];
    /**
     * List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
     */
    timeOffsetLists: number[];
    /**
     * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    watermarkLists?: outputs.VodProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList[];
}

export interface VodProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList {
    /**
     * Watermarking template ID.
     */
    definition: string;
    /**
     * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    svgContent?: string;
    /**
     * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
     */
    textContent?: string;
}

export interface VodProcedureTemplateMediaProcessTaskTranscodeTaskList {
    /**
     * opyright watermark.
     */
    copyRightWatermark?: outputs.VodProcedureTemplateMediaProcessTaskTranscodeTaskListCopyRightWatermark;
    /**
     * Video transcoding template ID.
     */
    definition: string;
    /**
     * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
     */
    endTimeOffset: number;
    /**
     * List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
     */
    headTailLists?: outputs.VodProcedureTemplateMediaProcessTaskTranscodeTaskListHeadTailList[];
    /**
     * List of blurs. Up to 10 ones can be supported.
     */
    mosaicLists?: outputs.VodProcedureTemplateMediaProcessTaskTranscodeTaskListMosaicList[];
    /**
     * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
     */
    startTimeOffset: number;
    /**
     * Digital watermark.
     */
    traceWatermark?: outputs.VodProcedureTemplateMediaProcessTaskTranscodeTaskListTraceWatermark;
    /**
     * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
     */
    watermarkLists?: outputs.VodProcedureTemplateMediaProcessTaskTranscodeTaskListWatermarkList[];
}

export interface VodProcedureTemplateMediaProcessTaskTranscodeTaskListCopyRightWatermark {
    /**
     * Copyright information, maximum length is 200 characters.
     */
    text: string;
}

export interface VodProcedureTemplateMediaProcessTaskTranscodeTaskListHeadTailList {
    /**
     * Video opening/closing credits configuration template ID.
     */
    definition: string;
}

export interface VodProcedureTemplateMediaProcessTaskTranscodeTaskListMosaicList {
    /**
     * Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
     */
    coordinateOrigin?: string;
    /**
     * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px. Default value: `10%`.
     */
    height?: string;
    /**
     * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px. Default value: `10%`.
     */
    width?: string;
    /**
     * The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: `0px`.
     */
    xPos?: string;
    /**
     * Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: `0px`.
     */
    yPos?: string;
}

export interface VodProcedureTemplateMediaProcessTaskTranscodeTaskListTraceWatermark {
    /**
     * Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
     */
    switch: string;
}

export interface VodProcedureTemplateMediaProcessTaskTranscodeTaskListWatermarkList {
    /**
     * Watermarking template ID.
     */
    definition: string;
    /**
     * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
     */
    endTimeOffset?: number;
    /**
     * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
     */
    startTimeOffset?: number;
    /**
     * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
     */
    svgContent?: string;
    /**
     * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
     */
    textContent?: string;
}

export interface VodProcedureTemplateReviewAudioVideoTask {
    /**
     * Review template.
     */
    definition: string;
    /**
     * The type of moderated content. Valid values:
     * - `Media`: The original audio/video;
     * - `Cover`: Thumbnails.
     */
    reviewContents: string[];
}

export interface VodSuperPlayerConfigDrmStreamingInfo {
    /**
     * ID of the adaptive dynamic streaming template whose protection type is `SimpleAES`.
     */
    simpleAesDefinition?: string;
}

export interface VodSuperPlayerConfigResolutionName {
    /**
     * Length of video short side in px.
     */
    minEdgeLength: number;
    /**
     * Display name.
     */
    name: string;
}

export interface VodTranscodeTemplateAudioTemplate {
    /**
     * Audio channel system. Valid values:1: mono-channel2: dual-channel6: stereoYou cannot set the sound channel as stereo for media files in container formats for audios (FLAC, OGG, MP3, M4A).Default value: 2.
     */
    audioChannel?: number;
    /**
     * Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
     */
    bitrate: number;
    /**
     * The audio codec.If `Container` is `mp3`, the valid value is:`libmp3lame`If `Container` is `ogg` or `flac`, the valid value is:`flac`If `Container` is `m4a`, the valid values are:`libfdk_aac``libmp3lame``ac3`If `Container` is `mp4` or `flv`, the valid values are:`libfdk_aac` (Recommended for MP4)`libmp3lame` (Recommended for FLV)`mp2`If `Container` is `hls`, the valid value is:`libfdk_aac`If `Format` is `HLS` or `MPEG-DASH`, the valid value is:`libfdk_aac`If `Container` is `wav`, the valid value is:`pcm16`.
     */
    codec: string;
    /**
     * The audio sample rate. Valid values:`16000` (valid only if `Codec` is `pcm16`)`32000``44100``48000`Unit: Hz.
     */
    sampleRate: number;
}

export interface VodTranscodeTemplateTehdConfig {
    /**
     * Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left blank or 0 is entered, there will be no upper limit for bitrate.
     */
    maxVideoBitrate?: number;
    /**
     * TESHD transcoding type. Valid values: TEHD-100, OFF (default).
     */
    type: string;
}

export interface VodTranscodeTemplateVideoTemplate {
    /**
     * Bitrate of video stream in Kbps. Value range: 0 and [128, 35,000].If the value is 0, the bitrate of the video will be the same as that of the source video.
     */
    bitrate: number;
    /**
     * The video codec. Valid values:libx264: H.264; libx265: H.265; av1: AOMedia Video 1; H.266: H.266. The AOMedia Video 1 and H.266 codecs can only be used for MP4 files. Only CRF is supported for H.266 currently.
     */
    codec: string;
    /**
     * The codec tag. This parameter is valid only if the H.265 codec is used. Valid values:hvc1hev1Default value: hvc1.
     */
    codecTag?: string;
    /**
     * Fill type, the way of processing a screenshot when the configured aspect ratio is different from that of the source video. Valid values:stretch: stretches the video image frame by frame to fill the screen. The video image may become squashed or stretched after transcoding.black: fills the uncovered area with black color, without changing the image&#39;s aspect ratio.white: fills the uncovered area with white color, without changing the image&#39;s aspect ratio.gauss: applies Gaussian blur to the uncovered area, without changing the image&#39;s aspect ratio.Default value: black.
     */
    fillType?: string;
    /**
     * Video frame rate in Hz. Value range: [0,100].If the value is 0, the frame rate will be the same as that of the source video.
     */
    fps: number;
    /**
     * I-frame interval in frames. Valid values: 0 and 1-100000.When this parameter is set to 0 or left empty, `Gop` will be automatically set.
     */
    gop?: number;
    /**
     * The maximum video height (or short side) in pixels. Value range: 0 and [128, 8192].If both `Width` and `Height` are 0, the output resolution will be the same as that of the source video.If `Width` is 0 and `Height` is not, the video width will be proportionally scaled.If `Width` is not 0 and `Height` is, the video height will be proportionally scaled.If neither `Width` nor `Height` is 0, the specified width and height will be used.Default value: 0.
     */
    height?: number;
    /**
     * Whether to output an HDR (high dynamic range) video if the source video is HDR. Valid values:ON: If the source video is HDR, output an HDR video; if not, output an SDR (standard dynamic range) video.OFF: Output an SDR video regardless of whether the source video is HDR.Default value: OFF.
     */
    preserveHdrSwitch?: string;
    /**
     * Resolution adaption. Valid values:open: enabled. In this case, `Width` represents the long side of a video, while `Height` the short side;close: disabled. In this case, `Width` represents the width of a video, while `Height` the height.Default value: open.Note: this field may return null, indicating that no valid values can be obtained.
     */
    resolutionAdaptive?: string;
    /**
     * The video constant rate factor (CRF). Value range: 1-51.If this parameter is specified, CRF encoding will be used and the bitrate parameter will be ignored.If `Codec` is `H.266`, this parameter is required (`28` is recommended).We don't recommend using this parameter unless you have special requirements.
     */
    vcrf?: number;
    /**
     * The maximum video width (or long side) in pixels. Value range: 0 and [128, 8192].If both `Width` and `Height` are 0, the output resolution will be the same as that of the source video.If `Width` is 0 and `Height` is not, the video width will be proportionally scaled.If `Width` is not 0 and `Height` is, the video height will be proportionally scaled.If neither `Width` nor `Height` is 0, the specified width and height will be used.Default value: 0.
     */
    width?: number;
}

export interface VodWatermarkTemplateImageTemplate {
    /**
     * Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;  If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px. Valid values: 0 or [8,4096]. Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
     */
    height: string;
    /**
     * The [Base64](https://tools.ietf.org/html/rfc4648) encoded string of a watermark image. Only JPEG, PNG, and GIF images are supported.
     */
    imageContent: string;
    /**
     * Repeat type of an animated watermark. Valid values: once: no longer appears after watermark playback ends.  repeat_last_frame: stays on the last frame after watermark playback ends.  repeat (default): repeats the playback until the video ends.
     */
    repeatType: string;
    /**
     * Image watermark transparency: 0: completely opaque  100: completely transparent Default value: 0.
     */
    transparency: number;
    /**
     * Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width. For example, `10%` means that `Width` is 10% of the video width;  If the string ends in px, the `Width` of the watermark will be in pixels. For example, `100px` means that `Width` is 100 pixels. Value range: [8, 4096]. Default value: 10%.
     */
    width: string;
}

export interface VodWatermarkTemplateSvgTemplate {
    /**
     * Watermark height, which supports six formats of px, %, W%, H%, S%, and L%: If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px; if `0px` is entered and `Width` is not `0px`, the watermark height will be proportionally scaled based on the source SVG image; if `0px` is entered for both `Width` and `Height`, the watermark height will be the height of the source SVG image;  If the string ends in `W%`, the `Height` of the watermark will be the specified percentage of the video width; for example, `10W%` means that `Height` is 10% of the video width;  If the string ends in `H%`, the `Height` of the watermark will be the specified percentage of the video height; for example, `10H%` means that `Height` is 10% of the video height;  If the string ends in `S%`, the `Height` of the watermark will be the specified percentage of the short side of the video; for example, `10S%` means that `Height` is 10% of the short side of the video;  If the string ends in `L%`, the `Height` of the watermark will be the specified percentage of the long side of the video; for example, `10L%` means that `Height` is 10% of the long side of the video;  If the string ends in %, the meaning is the same as `H%`. Default value: 0 px.
     */
    height: string;
    /**
     * Watermark width, which supports six formats of px, %, W%, H%, S%, and L%: If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px; if `0px` is entered and `Height` is not `0px`, the watermark width will be proportionally scaled based on the source SVG image; if `0px` is entered for both `Width` and `Height`, the watermark width will be the width of the source SVG image;  If the string ends in `W%`, the `Width` of the watermark will be the specified percentage of the video width; for example, `10W%` means that `Width` is 10% of the video width;  If the string ends in `H%`, the `Width` of the watermark will be the specified percentage of the video height; for example, `10H%` means that `Width` is 10% of the video height;  If the string ends in `S%`, the `Width` of the watermark will be the specified percentage of the short side of the video; for example, `10S%` means that `Width` is 10% of the short side of the video;  If the string ends in `L%`, the `Width` of the watermark will be the specified percentage of the long side of the video; for example, `10L%` means that `Width` is 10% of the long side of the video;  If the string ends in %, the meaning is the same as `W%`. Default value: 10W%.
     */
    width: string;
}

export interface VodWatermarkTemplateTextTemplate {
    /**
     * Text transparency. Value range: (0, 1] 0: completely transparent  1: completely opaque Default value: 1.
     */
    fontAlpha: number;
    /**
     * Font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).
     */
    fontColor: string;
    /**
     * Font size in Npx format where N is a numeric value.
     */
    fontSize: string;
    /**
     * Font type. Currently, two types are supported: simkai.ttf: both Chinese and English are supported;  arial.ttf: only English is supported.
     */
    fontType: string;
}

export interface VpcFlowLogFlowLogStorage {
    /**
     * Specify storage instance id, required while `storage_type` is `ckafka`.
     */
    storageId: string;
    /**
     * Specify storage topic id, required while `storage_type` is `ckafka`.
     */
    storageTopic: string;
}

export interface VpcIpv6EniAddressIpv6Address {
    /**
     * `IPv6` address, in the form of: `3402:4e00:20:100:0:8cd9:2a67:71f3`.
     */
    address: string;
    /**
     * `EIP` instance `ID`, such as:`eip-hxlqja90`.
     */
    addressId?: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Whether the public network IP is blocked.
     */
    isWanIpBlocked?: boolean;
    /**
     * Whether to master `IP`.
     */
    primary?: boolean;
    /**
     * `IPv6` address status: `PENDING`: pending, `MIGRATING`: migrating, `DELETING`: deleting, `AVAILABLE`: available.
     */
    state?: string;
}

export interface VpcIpv6SubnetCidrBlockIpv6SubnetCidrBlocks {
    /**
     * `IPv6` subnet segment. Such as: `3402:4e00:20:1001::/64`.
     */
    ipv6CidrBlock: string;
    /**
     * Subnet instance `ID`. Such as:`subnet-pxir56ns`.
     */
    subnetId: string;
}

export interface VpcNetworkAclQuintupleNetworkAclQuintupleSet {
    /**
     * Network ACL quintuple outbound rule.
     */
    egresses?: outputs.VpcNetworkAclQuintupleNetworkAclQuintupleSetEgress[];
    /**
     * Network ACL quintuple inbound rule.
     */
    ingresses?: outputs.VpcNetworkAclQuintupleNetworkAclQuintupleSetIngress[];
}

export interface VpcNetworkAclQuintupleNetworkAclQuintupleSetEgress {
    /**
     * Action, ACCEPT or DROP.
     */
    action?: string;
    /**
     * Creation time, used as an output parameter of DescribeNetworkAclQuintupleEntries.
     */
    createTime?: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Destination CIDR.
     */
    destinationCidr?: string;
    /**
     * Destination port (all, single port, range). When Protocol is ALL or ICMP, Port cannot be specified.
     */
    destinationPort?: string;
    /**
     * Direction, INGRESS or EGRESS, is used as an output parameter of DescribeNetworkAclQuintupleEntries.
     */
    networkAclDirection?: string;
    /**
     * Unique ID of a network ACL entry.
     */
    networkAclQuintupleEntryId?: string;
    /**
     * Priority, starting from 1.
     */
    priority?: number;
    /**
     * Protocol, value: TCP,UDP, ICMP, ALL.
     */
    protocol?: string;
    /**
     * Source CIDR.
     */
    sourceCidr?: string;
    /**
     * Source port (all, single port, range). When Protocol is ALL or ICMP, Port cannot be specified.
     */
    sourcePort?: string;
}

export interface VpcNetworkAclQuintupleNetworkAclQuintupleSetIngress {
    /**
     * Action, ACCEPT or DROP.
     */
    action?: string;
    /**
     * Creation time, used as an output parameter of DescribeNetworkAclQuintupleEntries.
     */
    createTime?: string;
    /**
     * Description.
     */
    description?: string;
    /**
     * Destination CIDR.
     */
    destinationCidr?: string;
    /**
     * Destination port (all, single port, range). When Protocol is ALL or ICMP, Port cannot be specified.
     */
    destinationPort?: string;
    /**
     * Direction, INGRESS or EGRESS, is used as an output parameter of DescribeNetworkAclQuintupleEntries.
     */
    networkAclDirection?: string;
    /**
     * Unique ID of a network ACL entry.
     */
    networkAclQuintupleEntryId?: string;
    /**
     * Priority, starting from 1.
     */
    priority?: number;
    /**
     * Protocol, value: TCP,UDP, ICMP, ALL.
     */
    protocol?: string;
    /**
     * 源CIDR。.
     */
    sourceCidr?: string;
    /**
     * source port (all, single port, range). When the protocol is ALL or ICMP, the port cannot be specified.
     */
    sourcePort?: string;
}

export interface VpcSnapshotPolicyAttachmentInstance {
    /**
     * InstanceId.
     */
    instanceId: string;
    /**
     * Instance name.
     */
    instanceName: string;
    /**
     * The region where the instance is located.
     */
    instanceRegion: string;
    /**
     * Instance type, currently supports set: `securitygroup`.
     */
    instanceType: string;
    /**
     * Snapshot policy Id.
     */
    snapshotPolicyId: string;
}

export interface VpcSnapshotPolicyBackupPolicy {
    /**
     * Backup cycle time, the value can be monday, tuesday, wednesday, thursday, friday, saturday, sunday.
     */
    backupDay: string;
    /**
     * Backup time point, format:HH:mm:ss.
     */
    backupTime: string;
}

export interface VpnConnectionSecurityGroupPolicy {
    /**
     * Local cidr block.
     */
    localCidrBlock: string;
    /**
     * Remote cidr block list.
     */
    remoteCidrBlocks: string[];
}

export interface VpnCustomerGatewayConfigurationDownloadCustomerGatewayVendor {
    /**
     * Platform.
     */
    platform: string;
    /**
     * SoftwareVersion.
     */
    softwareVersion: string;
    /**
     * VendorName.
     */
    vendorName: string;
}

export interface WafAntiInfoLeakStrategy {
    /**
     * Matching Content. If field is returncode support: 400, 403, 404, 4xx, 500, 501, 502, 504, 5xx; If field is information support: idcard, phone, bankcard; If field is keywords users input matching content themselves.
     */
    content: string;
    /**
     * Matching Fields. support: returncode, keywords, information.
     */
    field: string;
}

export interface WafClbDomainLoadBalancerSet {
    /**
     * Unique ID of listener in LB.
     */
    listenerId: string;
    /**
     * Listener name.
     */
    listenerName: string;
    /**
     * LoadBalancer unique ID.
     */
    loadBalancerId: string;
    /**
     * LoadBalancer name.
     */
    loadBalancerName: string;
    /**
     * Network type for load balancer.
     */
    loadBalancerType?: string;
    /**
     * VPCID for load balancer, public network is -1, and internal network is filled in according to actual conditions.
     */
    numericalVpcId?: number;
    /**
     * Protocol of listener, http or https.
     */
    protocol: string;
    /**
     * LoadBalancer region.
     */
    region: string;
    /**
     * LoadBalancer IP.
     */
    vip: string;
    /**
     * LoadBalancer port.
     */
    vport: number;
    /**
     * LoadBalancer zone.
     */
    zone: string;
}

export interface WafCustomRuleStrategy {
    /**
     * Matching parameters.
     */
    arg: string;
    /**
     * Logical symbol.
     */
    compareFunc: string;
    /**
     * Matching Content.
     */
    content: string;
    /**
     * Matching Fields.
     */
    field: string;
}

export interface WafCustomWhiteRuleStrategy {
    /**
     * Matching parameters.
     */
    arg: string;
    /**
     * Logical symbol.
     */
    compareFunc: string;
    /**
     * Matching Content.
     */
    content: string;
    /**
     * Matching Fields.
     */
    field: string;
}

export interface WafIpAccessControlItem {
    /**
     * Action value 40 is whitelist, 42 is blacklist.
     */
    action: number;
    /**
     * Id.
     */
    id: string;
    /**
     * IP address.
     */
    ip: string;
    /**
     * Note info.
     */
    note: string;
    /**
     * Source.
     */
    source: string;
    /**
     * Valid status.
     */
    validStatus: number;
    /**
     * Effective date, with a second level timestamp value. For example, 1680570420 represents 2023-04-04 09:07:00; 2019571199 means permanently effective.
     */
    validTs: number;
}

export interface WafSaasDomainPort {
    /**
     * Nginx server ID.
     */
    nginxServerId: string;
    /**
     * Listening port.
     */
    port: string;
    /**
     * The listening protocol of listening port.
     */
    protocol: string;
    /**
     * The upstream port for listening port.
     */
    upstreamPort: string;
    /**
     * The upstream protocol for listening port.
     */
    upstreamProtocol: string;
}

export interface WedataBaselineAlarmRuleDto {
    /**
     * Important;Urgent;Normal.
     */
    alarmLevelType?: string;
    /**
     * Alarm Rule ID.
     */
    alarmRuleId?: string;
}

export interface WedataBaselineBaselineCreateAlarmRuleRequest {
    /**
     * Alarm Level, 1. Normal, 2. Important, 3. Urgent (default is 1. Normal)Note: This field may return null, indicating no valid value.
     */
    alarmLevel: number;
    /**
     * Alarm Recipient IDsNote: This field may return null, indicating no valid value.
     */
    alarmRecipientIds: string[];
    /**
     * Alarm Recipient Type: 1. Specified Personnel, 2. Task Owner, 3. Duty Roster (default is 1. Specified Personnel)Note: This field may return null, indicating no valid value.
     */
    alarmRecipientType: number;
    /**
     * Alarm RecipientsNote: This field may return null, indicating no valid value.
     */
    alarmRecipients: string[];
    /**
     * Alarm Types, 1. Failure Alarm, 2. Timeout Alarm, 3. Success Alarm, 4. Baseline Violation, 5. Baseline Warning, 6. Baseline Task Failure (default is 1. Failure Alarm)Note: This field may return null, indicating no valid value.
     */
    alarmTypes: string[];
    /**
     * Alarm Methods, 1. Email, 2. SMS, 3. WeChat, 4. Voice, 5. Enterprise WeChat, 6. HTTP, 7. Enterprise WeChat Group; Alarm method code list (default is 1. Email)Note: This field may return null, indicating no valid value.
     */
    alarmWays: string[];
    /**
     * Creator UINNote: This field may return null, indicating no valid value.
     */
    creator: string;
    /**
     * Creator NameNote: This field may return null, indicating no valid value.
     */
    creatorId: string;
    /**
     * Extended Information, 1. Estimated Runtime (default), 2. Estimated Completion Time, 3. Estimated Scheduling Time, 4. Incomplete within the Cycle; Value Types: 1. Specified Value, 2. Historical Average (default is 1. Specified Value)Note: This field may return null, indicating no valid value.
     */
    extInfo: string;
    /**
     * Monitoring ObjectsNote: This field may return null, indicating no valid value.
     */
    monitorObjectIds: string[];
    /**
     * Monitoring Type, 1. Task, 2. Workflow, 3. Project, 4. Baseline (default is 1. Task)Note: This field may return null, indicating no valid value.
     */
    monitorType: number;
    /**
     * Project NameNote: This field may return null, indicating no valid value.
     */
    projectId: string;
    /**
     * Rule NameNote: This field may return null, indicating no valid value.
     */
    ruleName: string;
}

export interface WedataBaselinePromiseTask {
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Task Scheduling Cycle.
     */
    taskCycle?: string;
    /**
     * Task ID.
     */
    taskId?: string;
    /**
     * Task Owner Name.
     */
    taskInChargeName?: string;
    /**
     * Task Owner ID.
     */
    taskInChargeUin?: string;
    /**
     * Task Name.
     */
    taskName?: string;
    /**
     * Workflow ID.
     */
    workflowId?: string;
    /**
     * Workflow Name.
     */
    workflowName?: string;
}

export interface WedataDqRuleCompareRule {
    /**
     * Periodic Indicates the default period of a template, in secondsNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    cycleStep?: number;
    /**
     * Comparison condition listNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    items?: outputs.WedataDqRuleCompareRuleItem[];
}

export interface WedataDqRuleCompareRuleItem {
    /**
     * Comparison type 1. Fixed value 2. Fluctuating value 3. Comparison of value range 4. Enumeration range comparison 5. Do not compareNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    compareType?: number;
    /**
     * Comparison operation type &amp;lt; &amp;lt;= == =&amp;gt; &amp;gt;Note: This field may return null, indicating that a valid value cannot be obtained.
     */
    operator?: string;
    /**
     * Quality statistics Type 1. Absolute value 2. Increase 3. Decrease 4. C contains 5. N C does not containNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    valueComputeType?: number;
    /**
     * Compare the threshold listNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    valueLists?: outputs.WedataDqRuleCompareRuleItemValueList[];
}

export interface WedataDqRuleCompareRuleItemValueList {
    /**
     * Threshold valueNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    value?: string;
    /**
     * Threshold type 1. Low threshold 2. High threshold 3. Common threshold 4. Enumerated valueNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    valueType?: number;
}

export interface WedataDqRuleFieldConfig {
    /**
     * Library table variableNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    tableConfigs?: outputs.WedataDqRuleFieldConfigTableConfig[];
    /**
     * Where variableNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    whereConfigs?: outputs.WedataDqRuleFieldConfigWhereConfig[];
}

export interface WedataDqRuleFieldConfigTableConfig {
    /**
     * Database idNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    databaseId?: string;
    /**
     * Database nameNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    databaseName?: string;
    /**
     * Field variableNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldConfigs?: outputs.WedataDqRuleFieldConfigTableConfigFieldConfig[];
    /**
     * Table idNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    tableId?: string;
    /**
     * Table keyNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    tableKey?: string;
    /**
     * Table nameNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    tableName?: string;
}

export interface WedataDqRuleFieldConfigTableConfigFieldConfig {
    /**
     * Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldDataType?: string;
    /**
     * Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldKey?: string;
    /**
     * Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldValue?: string;
}

export interface WedataDqRuleFieldConfigWhereConfig {
    /**
     * Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldDataType?: string;
    /**
     * Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldKey?: string;
    /**
     * Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
     */
    fieldValue?: string;
}

export interface WedataFunctionResourceList {
    /**
     * Resource ID.
     */
    id?: string;
    /**
     * Resource MD5 Value.
     */
    md5?: string;
    /**
     * Resource Name.
     */
    name: string;
    /**
     * Resource Path.
     */
    path: string;
    /**
     * Resource Type.
     */
    type?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfo {
    /**
     * User App Id.
     */
    appId?: string;
    /**
     * Task configuration.
     */
    configs?: outputs.WedataIntegrationOfflineTaskTaskInfoConfig[];
    /**
     * Create time.
     */
    createTime?: string;
    /**
     * Creator User ID.
     */
    creatorUin?: string;
    /**
     * Data proxy url.
     */
    dataProxyUrls?: string[];
    /**
     * Execute context.
     */
    executeContexts?: outputs.WedataIntegrationOfflineTaskTaskInfoExecuteContext[];
    /**
     * Executor group name.
     */
    executorGroupName?: string;
    /**
     * Executor resource ID.
     */
    executorId?: string;
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationOfflineTaskTaskInfoExtConfig[];
    /**
     * Whether the task been submitted.
     */
    hasVersion?: boolean;
    /**
     * InLong manager url.
     */
    inLongManagerUrl?: string;
    /**
     * InLong manager version.
     */
    inLongManagerVersion?: string;
    /**
     * InLong stream id.
     */
    inLongStreamId?: string;
    /**
     * Incharge user.
     */
    incharge?: string;
    /**
     * Input datasource type.
     */
    inputDatasourceType?: string;
    /**
     * Instance version.
     */
    instanceVersion?: number;
    /**
     * The last time the task was run.
     */
    lastRunTime?: string;
    /**
     * Whether the task been locked.
     */
    locked?: boolean;
    /**
     * User locked task.
     */
    locker?: string;
    /**
     * Node mapping.
     */
    mappings?: outputs.WedataIntegrationOfflineTaskTaskInfoMapping[];
    /**
     * Number of reads.
     */
    numRecordsIn?: number;
    /**
     * Number of writes.
     */
    numRecordsOut?: number;
    /**
     * Times of restarts.
     */
    numRestarts?: number;
    /**
     * Offline task scheduling configuration.
     */
    offlineTaskAddEntity?: outputs.WedataIntegrationOfflineTaskTaskInfoOfflineTaskAddEntity;
    /**
     * Operator User ID.
     */
    operatorUin?: string;
    /**
     * Output datasource type.
     */
    outputDatasourceType?: string;
    /**
     * Owner User ID.
     */
    ownerUin?: string;
    /**
     * Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
     */
    readPhase?: number;
    /**
     * Read latency.
     */
    readerDelay?: number;
    /**
     * The amount of resources consumed by real-time task.
     */
    runningCu?: number;
    /**
     * Task scheduling id (job id such as oceanus or us).
     */
    scheduleTaskId?: string;
    /**
     * Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
     */
    status?: number;
    /**
     * The time the task was stopped.
     */
    stopTime?: string;
    /**
     * Whether the task version has been submitted for operation and maintenance.
     */
    submit?: boolean;
    /**
     * Resource tiering status, 0: in progress, 1: successful, 2: failed.
     */
    switchResource?: number;
    /**
     * Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
     */
    syncType?: number;
    /**
     * Task alarm regular.
     */
    taskAlarmRegularLists?: string[];
    /**
     * Inlong Task Group ID.
     */
    taskGroupId?: string;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    taskMode?: string;
    /**
     * Update time.
     */
    updateTime?: string;
    /**
     * The workflow id to which the task belongs.
     */
    workflowId?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoExecuteContext {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoMapping {
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationOfflineTaskTaskInfoMappingExtConfig[];
    /**
     * Schema mapping information.
     */
    schemaMappings?: outputs.WedataIntegrationOfflineTaskTaskInfoMappingSchemaMapping[];
    /**
     * Sink node ID.
     */
    sinkId?: string;
    /**
     * Source node ID.
     */
    sourceId?: string;
    /**
     * Source node schema information.
     */
    sourceSchemas?: outputs.WedataIntegrationOfflineTaskTaskInfoMappingSourceSchema[];
}

export interface WedataIntegrationOfflineTaskTaskInfoMappingExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoMappingSchemaMapping {
    /**
     * Schema ID from sink node.
     */
    sinkSchemaId: string;
    /**
     * Schema ID from source node.
     */
    sourceSchemaId: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoMappingSourceSchema {
    /**
     * Schema alias.
     */
    alias?: string;
    /**
     * Schema comment.
     */
    comment?: string;
    /**
     * Schema ID.
     */
    id: string;
    /**
     * Schema name.
     */
    name: string;
    /**
     * Schema extended attributes.
     */
    properties?: outputs.WedataIntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty[];
    /**
     * Schema type.
     */
    type: string;
    /**
     * Schema value.
     */
    value?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty {
    /**
     * Attributes name.
     */
    name?: string;
    /**
     * Attributes value.
     */
    value?: string;
}

export interface WedataIntegrationOfflineTaskTaskInfoOfflineTaskAddEntity {
    /**
     * Crontab expression.
     */
    crontabExpression?: string;
    /**
     * Scheduling type, 0: crontab type, 1: minutes, 2: hours, 3: days, 4: weeks, 5: months, 6: one-time, 7: user-driven, 10: elastic period (week), 11: elastic period (month), 12: year, 13: instant trigger.
     */
    cycleType?: number;
    /**
     * Scheduling execution end time.
     */
    executionEndTime?: string;
    /**
     * Scheduling execution start time.
     */
    executionStartTime?: string;
    /**
     * Whether to retry.
     */
    retriable?: number;
    /**
     * Retry waiting time, unit is minutes.
     */
    retryWait?: number;
    /**
     * Self-dependent rules, 1: Ordered serial one at a time, queued execution, 2: Unordered serial one at a time, not queued execution, 3: Parallel, multiple at once.
     */
    selfDepend?: number;
    /**
     * Number of retries.
     */
    tryLimit?: number;
}

export interface WedataIntegrationRealtimeTaskTaskInfo {
    /**
     * User App Id.
     */
    appId: string;
    /**
     * Task configuration.
     */
    configs?: outputs.WedataIntegrationRealtimeTaskTaskInfoConfig[];
    /**
     * Create time.
     */
    createTime: string;
    /**
     * Creator User ID.
     */
    creatorUin: string;
    /**
     * Data proxy url.
     */
    dataProxyUrls: string[];
    /**
     * Execute context.
     */
    executeContexts?: outputs.WedataIntegrationRealtimeTaskTaskInfoExecuteContext[];
    /**
     * Executor group name.
     */
    executorGroupName: string;
    /**
     * Executor resource ID.
     */
    executorId?: string;
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationRealtimeTaskTaskInfoExtConfig[];
    /**
     * Whether the task been submitted.
     */
    hasVersion: boolean;
    /**
     * InLong manager url.
     */
    inLongManagerUrl: string;
    /**
     * InLong manager version.
     */
    inLongManagerVersion: string;
    /**
     * InLong stream id.
     */
    inLongStreamId: string;
    /**
     * Incharge user.
     */
    incharge?: string;
    /**
     * Input datasource type.
     */
    inputDatasourceType: string;
    /**
     * Instance version.
     */
    instanceVersion: number;
    /**
     * The last time the task was run.
     */
    lastRunTime: string;
    /**
     * Whether the task been locked.
     */
    locked: boolean;
    /**
     * User locked task.
     */
    locker: string;
    /**
     * Node mapping.
     */
    mappings?: outputs.WedataIntegrationRealtimeTaskTaskInfoMapping[];
    /**
     * Task Node Information.
     */
    nodes?: outputs.WedataIntegrationRealtimeTaskTaskInfoNode[];
    /**
     * Number of reads.
     */
    numRecordsIn: number;
    /**
     * Number of writes.
     */
    numRecordsOut: number;
    /**
     * Times of restarts.
     */
    numRestarts: number;
    /**
     * Operator User ID.
     */
    operatorUin: string;
    /**
     * Output datasource type.
     */
    outputDatasourceType: string;
    /**
     * Owner User ID.
     */
    ownerUin: string;
    /**
     * Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
     */
    readPhase: number;
    /**
     * Read latency.
     */
    readerDelay: number;
    /**
     * The amount of resources consumed by real-time task.
     */
    runningCu: number;
    /**
     * Task scheduling id (job id such as oceanus or us).
     */
    scheduleTaskId: string;
    /**
     * Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
     */
    status: number;
    /**
     * The time the task was stopped.
     */
    stopTime: string;
    /**
     * Whether the task version has been submitted for operation and maintenance.
     */
    submit: boolean;
    /**
     * Resource tiering status, 0: in progress, 1: successful, 2: failed.
     */
    switchResource: number;
    /**
     * Task alarm regular.
     */
    taskAlarmRegularLists: string[];
    /**
     * Inlong Task Group ID.
     */
    taskGroupId: string;
    /**
     * Update time.
     */
    updateTime: string;
    /**
     * The workflow id to which the task belongs.
     */
    workflowId: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoExecuteContext {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoMapping {
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationRealtimeTaskTaskInfoMappingExtConfig[];
    /**
     * Schema mapping information.
     */
    schemaMappings?: outputs.WedataIntegrationRealtimeTaskTaskInfoMappingSchemaMapping[];
    /**
     * Sink node ID.
     */
    sinkId?: string;
    /**
     * Source node ID.
     */
    sourceId?: string;
    /**
     * Source node schema information.
     */
    sourceSchemas?: outputs.WedataIntegrationRealtimeTaskTaskInfoMappingSourceSchema[];
}

export interface WedataIntegrationRealtimeTaskTaskInfoMappingExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoMappingSchemaMapping {
    /**
     * Schema ID from sink node.
     */
    sinkSchemaId: string;
    /**
     * Schema ID from source node.
     */
    sourceSchemaId: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoMappingSourceSchema {
    /**
     * Schema alias.
     */
    alias?: string;
    /**
     * Schema comment.
     */
    comment?: string;
    /**
     * Schema ID.
     */
    id: string;
    /**
     * Schema name.
     */
    name: string;
    /**
     * Schema extended attributes.
     */
    properties?: outputs.WedataIntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty[];
    /**
     * Schema type.
     */
    type: string;
    /**
     * Schema value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty {
    /**
     * Attributes name.
     */
    name?: string;
    /**
     * Attributes value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNode {
    /**
     * User App Id.
     */
    appId?: string;
    /**
     * Node configuration information.
     */
    configs?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeConfig[];
    /**
     * Create time.
     */
    createTime?: string;
    /**
     * Creator User ID.
     */
    creatorUin?: string;
    /**
     * Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
     */
    dataSourceType?: string;
    /**
     * Datasource ID.
     */
    datasourceId?: string;
    /**
     * Node Description.
     */
    description?: string;
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeExtConfig[];
    /**
     * Node ID.
     */
    id?: string;
    /**
     * Node Name.
     */
    name?: string;
    /**
     * Node mapping.
     */
    nodeMapping?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeNodeMapping;
    /**
     * Node type: INPUT,OUTPUT,JOIN,FILTER,TRANSFORM.
     */
    nodeType?: string;
    /**
     * Operator User ID.
     */
    operatorUin?: string;
    /**
     * Owner User ID.
     */
    ownerUin?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Schema information.
     */
    schemas?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeSchema[];
    /**
     * The task id to which the node belongs.
     */
    taskId?: string;
    /**
     * Update time.
     */
    updateTime?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeNodeMapping {
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig[];
    /**
     * Schema mapping information.
     */
    schemaMappings?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping[];
    /**
     * Sink node ID.
     */
    sinkId?: string;
    /**
     * Source node ID.
     */
    sourceId?: string;
    /**
     * Source node schema information.
     */
    sourceSchemas?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema[];
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping {
    /**
     * Schema ID from sink node.
     */
    sinkSchemaId: string;
    /**
     * Schema ID from source node.
     */
    sourceSchemaId: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema {
    /**
     * Schema alias.
     */
    alias?: string;
    /**
     * Schema comment.
     */
    comment?: string;
    /**
     * Schema ID.
     */
    id: string;
    /**
     * Schema name.
     */
    name: string;
    /**
     * Schema extended attributes.
     */
    properties?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty[];
    /**
     * Schema type.
     */
    type: string;
    /**
     * Schema value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty {
    /**
     * Attributes name.
     */
    name?: string;
    /**
     * Attributes value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeSchema {
    /**
     * Schema alias.
     */
    alias?: string;
    /**
     * Schema comment.
     */
    comment?: string;
    /**
     * Schema ID.
     */
    id: string;
    /**
     * Schema name.
     */
    name: string;
    /**
     * Schema extended attributes.
     */
    properties?: outputs.WedataIntegrationRealtimeTaskTaskInfoNodeSchemaProperty[];
    /**
     * Schema type.
     */
    type: string;
    /**
     * Schema value.
     */
    value?: string;
}

export interface WedataIntegrationRealtimeTaskTaskInfoNodeSchemaProperty {
    /**
     * Attributes name.
     */
    name?: string;
    /**
     * Attributes value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfo {
    /**
     * User App Id.
     */
    appId: string;
    /**
     * Node configuration information.
     */
    configs?: outputs.WedataIntegrationTaskNodeNodeInfoConfig[];
    /**
     * Create time.
     */
    createTime: string;
    /**
     * Creator User ID.
     */
    creatorUin: string;
    /**
     * Datasource ID.
     */
    datasourceId?: string;
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationTaskNodeNodeInfoExtConfig[];
    /**
     * Node mapping.
     */
    nodeMapping?: outputs.WedataIntegrationTaskNodeNodeInfoNodeMapping;
    /**
     * Operator User ID.
     */
    operatorUin: string;
    /**
     * Owner User ID.
     */
    ownerUin: string;
    /**
     * Schema information.
     */
    schemas?: outputs.WedataIntegrationTaskNodeNodeInfoSchema[];
    /**
     * Update time.
     */
    updateTime: string;
}

export interface WedataIntegrationTaskNodeNodeInfoConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfoExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfoNodeMapping {
    /**
     * Node extension configuration information.
     */
    extConfigs?: outputs.WedataIntegrationTaskNodeNodeInfoNodeMappingExtConfig[];
    /**
     * Schema mapping information.
     */
    schemaMappings?: outputs.WedataIntegrationTaskNodeNodeInfoNodeMappingSchemaMapping[];
    /**
     * Sink node ID.
     */
    sinkId?: string;
    /**
     * Source node ID.
     */
    sourceId?: string;
    /**
     * Source node schema information.
     */
    sourceSchemas?: outputs.WedataIntegrationTaskNodeNodeInfoNodeMappingSourceSchema[];
}

export interface WedataIntegrationTaskNodeNodeInfoNodeMappingExtConfig {
    /**
     * Configuration name.
     */
    name?: string;
    /**
     * Configuration value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfoNodeMappingSchemaMapping {
    /**
     * Schema ID from sink node.
     */
    sinkSchemaId: string;
    /**
     * Schema ID from source node.
     */
    sourceSchemaId: string;
}

export interface WedataIntegrationTaskNodeNodeInfoNodeMappingSourceSchema {
    /**
     * Schema alias.
     */
    alias?: string;
    /**
     * Schema comment.
     */
    comment?: string;
    /**
     * Schema ID.
     */
    id: string;
    /**
     * Schema name.
     */
    name: string;
    /**
     * Schema extended attributes.
     */
    properties?: outputs.WedataIntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty[];
    /**
     * Schema type.
     */
    type: string;
    /**
     * Schema value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty {
    /**
     * Attributes name.
     */
    name?: string;
    /**
     * Attributes value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfoSchema {
    /**
     * Schema alias.
     */
    alias?: string;
    /**
     * Schema comment.
     */
    comment?: string;
    /**
     * Schema ID.
     */
    id: string;
    /**
     * Schema name.
     */
    name: string;
    /**
     * Schema extended attributes.
     */
    properties?: outputs.WedataIntegrationTaskNodeNodeInfoSchemaProperty[];
    /**
     * Schema type.
     */
    type: string;
    /**
     * Schema value.
     */
    value?: string;
}

export interface WedataIntegrationTaskNodeNodeInfoSchemaProperty {
    /**
     * Attributes name.
     */
    name?: string;
    /**
     * Attributes value.
     */
    value?: string;
}

export namespace config {
    export interface AssumeRole {
        /**
         * A more restrictive policy when making the AssumeRole call. Its content must not contains `principal` elements. Notice: more syntax references, please refer to: [policies syntax logic](https://intl.cloud.tencent.com/document/product/598/10603).
         */
        policy?: string;
        /**
         * The ARN of the role to assume. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_ARN`.
         */
        roleArn: string;
        /**
         * The duration of the session when making the AssumeRole call. Its value ranges from 0 to 43200(seconds), and default is 7200 seconds. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_SESSION_DURATION`.
         */
        sessionDuration?: number;
        /**
         * The session name to use when making the AssumeRole call. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_SESSION_NAME`.
         */
        sessionName: string;
    }

    export interface AssumeRoleWithSaml {
        /**
         * Player Access Description Name. It can be sourced from the `PROVIDER_ASSUME_ROLE_PRINCIPAL_ARN`.
         */
        principalArn: string;
        /**
         * The ARN of the role to assume. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_ARN`.
         */
        roleArn: string;
        /**
         * SAML assertion information encoded in base64. It can be sourced from the `PROVIDER_ASSUME_ROLE_SAML_ASSERTION`.
         */
        samlAssertion: string;
        /**
         * The duration of the session when making the AssumeRoleWithSAML call. Its value ranges from 0 to 43200(seconds), and default is 7200 seconds. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_SESSION_DURATION`.
         */
        sessionDuration?: number;
        /**
         * The session name to use when making the AssumeRole call. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_SESSION_NAME`.
         */
        sessionName: string;
    }

    export interface AssumeRoleWithWebIdentity {
        /**
         * The ARN of the role to assume. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_ARN`.
         */
        roleArn: string;
        /**
         * The duration of the session when making the AssumeRoleWithWebIdentity call. Its value ranges from 0 to 43200(seconds), and default is 7200 seconds. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_SESSION_DURATION`.
         */
        sessionDuration?: number;
        /**
         * The session name to use when making the AssumeRole call. It can be sourced from the `TENCENTCLOUD_ASSUME_ROLE_SESSION_NAME`.
         */
        sessionName: string;
        /**
         * OIDC token issued by IdP. It can be sourced from the `PROVIDER_ASSUME_ROLE_WEB_IDENTITY_TOKEN`.
         */
        webIdentityToken: string;
    }

}
