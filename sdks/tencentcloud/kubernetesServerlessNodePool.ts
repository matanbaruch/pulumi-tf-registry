// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesServerlessNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesServerlessNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesServerlessNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesServerlessNodePool {
        return new KubernetesServerlessNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:index/kubernetesServerlessNodePool:KubernetesServerlessNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesServerlessNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesServerlessNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesServerlessNodePool.__pulumiType;
    }

    /**
     * cluster id of serverless node pool.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * labels of serverless node.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * life state of serverless node pool.
     */
    public /*out*/ readonly lifeState!: pulumi.Output<string>;
    /**
     * serverless node pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * security groups of serverless node pool.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * node list of serverless node pool.
     */
    public readonly serverlessNodes!: pulumi.Output<outputs.KubernetesServerlessNodePoolServerlessNode[]>;
    /**
     * taints of serverless node.
     */
    public readonly taints!: pulumi.Output<outputs.KubernetesServerlessNodePoolTaint[] | undefined>;

    /**
     * Create a KubernetesServerlessNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesServerlessNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesServerlessNodePoolArgs | KubernetesServerlessNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesServerlessNodePoolState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lifeState"] = state ? state.lifeState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serverlessNodes"] = state ? state.serverlessNodes : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as KubernetesServerlessNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.serverlessNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverlessNodes'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serverlessNodes"] = args ? args.serverlessNodes : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["lifeState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesServerlessNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesServerlessNodePool resources.
 */
export interface KubernetesServerlessNodePoolState {
    /**
     * cluster id of serverless node pool.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * labels of serverless node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * life state of serverless node pool.
     */
    lifeState?: pulumi.Input<string>;
    /**
     * serverless node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * security groups of serverless node pool.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * node list of serverless node pool.
     */
    serverlessNodes?: pulumi.Input<pulumi.Input<inputs.KubernetesServerlessNodePoolServerlessNode>[]>;
    /**
     * taints of serverless node.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.KubernetesServerlessNodePoolTaint>[]>;
}

/**
 * The set of arguments for constructing a KubernetesServerlessNodePool resource.
 */
export interface KubernetesServerlessNodePoolArgs {
    /**
     * cluster id of serverless node pool.
     */
    clusterId: pulumi.Input<string>;
    /**
     * labels of serverless node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * serverless node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * security groups of serverless node pool.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * node list of serverless node pool.
     */
    serverlessNodes: pulumi.Input<pulumi.Input<inputs.KubernetesServerlessNodePoolServerlessNode>[]>;
    /**
     * taints of serverless node.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.KubernetesServerlessNodePoolTaint>[]>;
}
