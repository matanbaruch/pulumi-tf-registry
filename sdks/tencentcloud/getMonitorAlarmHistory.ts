// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitorAlarmHistory(args: GetMonitorAlarmHistoryArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorAlarmHistoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getMonitorAlarmHistory:getMonitorAlarmHistory", {
        "alarmLevels": args.alarmLevels,
        "alarmObject": args.alarmObject,
        "alarmStatuses": args.alarmStatuses,
        "content": args.content,
        "endTime": args.endTime,
        "id": args.id,
        "instanceGroupIds": args.instanceGroupIds,
        "metricNames": args.metricNames,
        "module": args.module,
        "monitorTypes": args.monitorTypes,
        "namespaces": args.namespaces,
        "order": args.order,
        "policyIds": args.policyIds,
        "policyName": args.policyName,
        "projectIds": args.projectIds,
        "receiverGroups": args.receiverGroups,
        "receiverUids": args.receiverUids,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitorAlarmHistory.
 */
export interface GetMonitorAlarmHistoryArgs {
    alarmLevels?: string[];
    alarmObject?: string;
    alarmStatuses?: string[];
    content?: string;
    endTime?: number;
    id?: string;
    instanceGroupIds?: number[];
    metricNames?: string[];
    module: string;
    monitorTypes?: string[];
    namespaces?: inputs.GetMonitorAlarmHistoryNamespace[];
    order?: string;
    policyIds?: string[];
    policyName?: string;
    projectIds?: number[];
    receiverGroups?: number[];
    receiverUids?: number[];
    resultOutputFile?: string;
    startTime?: number;
}

/**
 * A collection of values returned by getMonitorAlarmHistory.
 */
export interface GetMonitorAlarmHistoryResult {
    readonly alarmLevels?: string[];
    readonly alarmObject?: string;
    readonly alarmStatuses?: string[];
    readonly content?: string;
    readonly endTime?: number;
    readonly histories: outputs.GetMonitorAlarmHistoryHistory[];
    readonly id: string;
    readonly instanceGroupIds?: number[];
    readonly metricNames?: string[];
    readonly module: string;
    readonly monitorTypes?: string[];
    readonly namespaces?: outputs.GetMonitorAlarmHistoryNamespace[];
    readonly order?: string;
    readonly policyIds?: string[];
    readonly policyName?: string;
    readonly projectIds?: number[];
    readonly receiverGroups?: number[];
    readonly receiverUids?: number[];
    readonly resultOutputFile?: string;
    readonly startTime?: number;
}
export function getMonitorAlarmHistoryOutput(args: GetMonitorAlarmHistoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorAlarmHistoryResult> {
    return pulumi.output(args).apply((a: any) => getMonitorAlarmHistory(a, opts))
}

/**
 * A collection of arguments for invoking getMonitorAlarmHistory.
 */
export interface GetMonitorAlarmHistoryOutputArgs {
    alarmLevels?: pulumi.Input<pulumi.Input<string>[]>;
    alarmObject?: pulumi.Input<string>;
    alarmStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    content?: pulumi.Input<string>;
    endTime?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    instanceGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    metricNames?: pulumi.Input<pulumi.Input<string>[]>;
    module: pulumi.Input<string>;
    monitorTypes?: pulumi.Input<pulumi.Input<string>[]>;
    namespaces?: pulumi.Input<pulumi.Input<inputs.GetMonitorAlarmHistoryNamespaceArgs>[]>;
    order?: pulumi.Input<string>;
    policyIds?: pulumi.Input<pulumi.Input<string>[]>;
    policyName?: pulumi.Input<string>;
    projectIds?: pulumi.Input<pulumi.Input<number>[]>;
    receiverGroups?: pulumi.Input<pulumi.Input<number>[]>;
    receiverUids?: pulumi.Input<pulumi.Input<number>[]>;
    resultOutputFile?: pulumi.Input<string>;
    startTime?: pulumi.Input<number>;
}
