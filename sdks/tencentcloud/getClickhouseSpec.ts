// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClickhouseSpec(args: GetClickhouseSpecArgs, opts?: pulumi.InvokeOptions): Promise<GetClickhouseSpecResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getClickhouseSpec:getClickhouseSpec", {
        "id": args.id,
        "isElastic": args.isElastic,
        "payMode": args.payMode,
        "resultOutputFile": args.resultOutputFile,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClickhouseSpec.
 */
export interface GetClickhouseSpecArgs {
    id?: string;
    isElastic?: boolean;
    payMode?: string;
    resultOutputFile?: string;
    zone: string;
}

/**
 * A collection of values returned by getClickhouseSpec.
 */
export interface GetClickhouseSpecResult {
    readonly attachCbsSpecs: outputs.GetClickhouseSpecAttachCbsSpec[];
    readonly commonSpecs: outputs.GetClickhouseSpecCommonSpec[];
    readonly dataSpecs: outputs.GetClickhouseSpecDataSpec[];
    readonly id: string;
    readonly isElastic?: boolean;
    readonly payMode?: string;
    readonly resultOutputFile?: string;
    readonly zone: string;
}
export function getClickhouseSpecOutput(args: GetClickhouseSpecOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClickhouseSpecResult> {
    return pulumi.output(args).apply((a: any) => getClickhouseSpec(a, opts))
}

/**
 * A collection of arguments for invoking getClickhouseSpec.
 */
export interface GetClickhouseSpecOutputArgs {
    id?: pulumi.Input<string>;
    isElastic?: pulumi.Input<boolean>;
    payMode?: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
