// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCkafkaConnectResource(args?: GetCkafkaConnectResourceArgs, opts?: pulumi.InvokeOptions): Promise<GetCkafkaConnectResourceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:index/getCkafkaConnectResource:getCkafkaConnectResource", {
        "id": args.id,
        "limit": args.limit,
        "offset": args.offset,
        "resourceRegion": args.resourceRegion,
        "resultOutputFile": args.resultOutputFile,
        "searchWord": args.searchWord,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCkafkaConnectResource.
 */
export interface GetCkafkaConnectResourceArgs {
    id?: string;
    limit?: number;
    offset?: number;
    resourceRegion?: string;
    resultOutputFile?: string;
    searchWord?: string;
    type?: string;
}

/**
 * A collection of values returned by getCkafkaConnectResource.
 */
export interface GetCkafkaConnectResourceResult {
    readonly id: string;
    readonly limit?: number;
    readonly offset?: number;
    readonly resourceRegion?: string;
    readonly resultOutputFile?: string;
    readonly results: outputs.GetCkafkaConnectResourceResult[];
    readonly searchWord?: string;
    readonly type?: string;
}
export function getCkafkaConnectResourceOutput(args?: GetCkafkaConnectResourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCkafkaConnectResourceResult> {
    return pulumi.output(args).apply((a: any) => getCkafkaConnectResource(a, opts))
}

/**
 * A collection of arguments for invoking getCkafkaConnectResource.
 */
export interface GetCkafkaConnectResourceOutputArgs {
    id?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    resourceRegion?: pulumi.Input<string>;
    resultOutputFile?: pulumi.Input<string>;
    searchWord?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
