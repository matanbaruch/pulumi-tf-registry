// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RecordSet extends pulumi.CustomResource {
    /**
     * Get an existing RecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordSetState, opts?: pulumi.CustomResourceOptions): RecordSet {
        return new RecordSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vinyldns:index/recordSet:RecordSet';

    /**
     * Returns true if the given object is an instance of RecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordSet.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    public readonly ownerGroupId!: pulumi.Output<string | undefined>;
    public readonly recordAddresses!: pulumi.Output<string[] | undefined>;
    public readonly recordCname!: pulumi.Output<string | undefined>;
    public readonly recordNsdnames!: pulumi.Output<string[] | undefined>;
    public readonly recordPtrdnames!: pulumi.Output<string[] | undefined>;
    public readonly recordTexts!: pulumi.Output<string[] | undefined>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a RecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordSetArgs | RecordSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordSetState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerGroupId"] = state ? state.ownerGroupId : undefined;
            resourceInputs["recordAddresses"] = state ? state.recordAddresses : undefined;
            resourceInputs["recordCname"] = state ? state.recordCname : undefined;
            resourceInputs["recordNsdnames"] = state ? state.recordNsdnames : undefined;
            resourceInputs["recordPtrdnames"] = state ? state.recordPtrdnames : undefined;
            resourceInputs["recordTexts"] = state ? state.recordTexts : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RecordSetArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerGroupId"] = args ? args.ownerGroupId : undefined;
            resourceInputs["recordAddresses"] = args ? args.recordAddresses : undefined;
            resourceInputs["recordCname"] = args ? args.recordCname : undefined;
            resourceInputs["recordNsdnames"] = args ? args.recordNsdnames : undefined;
            resourceInputs["recordPtrdnames"] = args ? args.recordPtrdnames : undefined;
            resourceInputs["recordTexts"] = args ? args.recordTexts : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecordSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RecordSet resources.
 */
export interface RecordSetState {
    name?: pulumi.Input<string>;
    ownerGroupId?: pulumi.Input<string>;
    recordAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    recordCname?: pulumi.Input<string>;
    recordNsdnames?: pulumi.Input<pulumi.Input<string>[]>;
    recordPtrdnames?: pulumi.Input<pulumi.Input<string>[]>;
    recordTexts?: pulumi.Input<pulumi.Input<string>[]>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecordSet resource.
 */
export interface RecordSetArgs {
    name?: pulumi.Input<string>;
    ownerGroupId?: pulumi.Input<string>;
    recordAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    recordCname?: pulumi.Input<string>;
    recordNsdnames?: pulumi.Input<pulumi.Input<string>[]>;
    recordPtrdnames?: pulumi.Input<pulumi.Input<string>[]>;
    recordTexts?: pulumi.Input<pulumi.Input<string>[]>;
    ttl?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
