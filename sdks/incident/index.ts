// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CatalogEntriesArgs, CatalogEntriesState } from "./catalogEntries";
export type CatalogEntries = import("./catalogEntries").CatalogEntries;
export const CatalogEntries: typeof import("./catalogEntries").CatalogEntries = null as any;
utilities.lazyLoad(exports, ["CatalogEntries"], () => require("./catalogEntries"));

export { CatalogEntryArgs, CatalogEntryState } from "./catalogEntry";
export type CatalogEntry = import("./catalogEntry").CatalogEntry;
export const CatalogEntry: typeof import("./catalogEntry").CatalogEntry = null as any;
utilities.lazyLoad(exports, ["CatalogEntry"], () => require("./catalogEntry"));

export { CatalogTypeArgs, CatalogTypeState } from "./catalogType";
export type CatalogType = import("./catalogType").CatalogType;
export const CatalogType: typeof import("./catalogType").CatalogType = null as any;
utilities.lazyLoad(exports, ["CatalogType"], () => require("./catalogType"));

export { CatalogTypeAttributeArgs, CatalogTypeAttributeState } from "./catalogTypeAttribute";
export type CatalogTypeAttribute = import("./catalogTypeAttribute").CatalogTypeAttribute;
export const CatalogTypeAttribute: typeof import("./catalogTypeAttribute").CatalogTypeAttribute = null as any;
utilities.lazyLoad(exports, ["CatalogTypeAttribute"], () => require("./catalogTypeAttribute"));

export { CustomFieldArgs, CustomFieldState } from "./customField";
export type CustomField = import("./customField").CustomField;
export const CustomField: typeof import("./customField").CustomField = null as any;
utilities.lazyLoad(exports, ["CustomField"], () => require("./customField"));

export { CustomFieldOptionArgs, CustomFieldOptionState } from "./customFieldOption";
export type CustomFieldOption = import("./customFieldOption").CustomFieldOption;
export const CustomFieldOption: typeof import("./customFieldOption").CustomFieldOption = null as any;
utilities.lazyLoad(exports, ["CustomFieldOption"], () => require("./customFieldOption"));

export { EscalationPathArgs, EscalationPathState } from "./escalationPath";
export type EscalationPath = import("./escalationPath").EscalationPath;
export const EscalationPath: typeof import("./escalationPath").EscalationPath = null as any;
utilities.lazyLoad(exports, ["EscalationPath"], () => require("./escalationPath"));

export { GetCatalogTypeArgs, GetCatalogTypeResult, GetCatalogTypeOutputArgs } from "./getCatalogType";
export const getCatalogType: typeof import("./getCatalogType").getCatalogType = null as any;
export const getCatalogTypeOutput: typeof import("./getCatalogType").getCatalogTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogType","getCatalogTypeOutput"], () => require("./getCatalogType"));

export { GetCustomFieldArgs, GetCustomFieldResult, GetCustomFieldOutputArgs } from "./getCustomField";
export const getCustomField: typeof import("./getCustomField").getCustomField = null as any;
export const getCustomFieldOutput: typeof import("./getCustomField").getCustomFieldOutput = null as any;
utilities.lazyLoad(exports, ["getCustomField","getCustomFieldOutput"], () => require("./getCustomField"));

export { GetCustomFieldOptionArgs, GetCustomFieldOptionResult, GetCustomFieldOptionOutputArgs } from "./getCustomFieldOption";
export const getCustomFieldOption: typeof import("./getCustomFieldOption").getCustomFieldOption = null as any;
export const getCustomFieldOptionOutput: typeof import("./getCustomFieldOption").getCustomFieldOptionOutput = null as any;
utilities.lazyLoad(exports, ["getCustomFieldOption","getCustomFieldOptionOutput"], () => require("./getCustomFieldOption"));

export { GetIncidentRoleArgs, GetIncidentRoleResult, GetIncidentRoleOutputArgs } from "./getIncidentRole";
export const getIncidentRole: typeof import("./getIncidentRole").getIncidentRole = null as any;
export const getIncidentRoleOutput: typeof import("./getIncidentRole").getIncidentRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentRole","getIncidentRoleOutput"], () => require("./getIncidentRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { IncidentRoleArgs, IncidentRoleState } from "./incidentRole";
export type IncidentRole = import("./incidentRole").IncidentRole;
export const IncidentRole: typeof import("./incidentRole").IncidentRole = null as any;
utilities.lazyLoad(exports, ["IncidentRole"], () => require("./incidentRole"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { SeverityArgs, SeverityState } from "./severity";
export type Severity = import("./severity").Severity;
export const Severity: typeof import("./severity").Severity = null as any;
utilities.lazyLoad(exports, ["Severity"], () => require("./severity"));

export { StatusArgs, StatusState } from "./status";
export type Status = import("./status").Status;
export const Status: typeof import("./status").Status = null as any;
utilities.lazyLoad(exports, ["Status"], () => require("./status"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "incident:index/catalogEntries:CatalogEntries":
                return new CatalogEntries(name, <any>undefined, { urn })
            case "incident:index/catalogEntry:CatalogEntry":
                return new CatalogEntry(name, <any>undefined, { urn })
            case "incident:index/catalogType:CatalogType":
                return new CatalogType(name, <any>undefined, { urn })
            case "incident:index/catalogTypeAttribute:CatalogTypeAttribute":
                return new CatalogTypeAttribute(name, <any>undefined, { urn })
            case "incident:index/customField:CustomField":
                return new CustomField(name, <any>undefined, { urn })
            case "incident:index/customFieldOption:CustomFieldOption":
                return new CustomFieldOption(name, <any>undefined, { urn })
            case "incident:index/escalationPath:EscalationPath":
                return new EscalationPath(name, <any>undefined, { urn })
            case "incident:index/incidentRole:IncidentRole":
                return new IncidentRole(name, <any>undefined, { urn })
            case "incident:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "incident:index/severity:Severity":
                return new Severity(name, <any>undefined, { urn })
            case "incident:index/status:Status":
                return new Status(name, <any>undefined, { urn })
            case "incident:index/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("incident", "index/catalogEntries", _module)
pulumi.runtime.registerResourceModule("incident", "index/catalogEntry", _module)
pulumi.runtime.registerResourceModule("incident", "index/catalogType", _module)
pulumi.runtime.registerResourceModule("incident", "index/catalogTypeAttribute", _module)
pulumi.runtime.registerResourceModule("incident", "index/customField", _module)
pulumi.runtime.registerResourceModule("incident", "index/customFieldOption", _module)
pulumi.runtime.registerResourceModule("incident", "index/escalationPath", _module)
pulumi.runtime.registerResourceModule("incident", "index/incidentRole", _module)
pulumi.runtime.registerResourceModule("incident", "index/schedule", _module)
pulumi.runtime.registerResourceModule("incident", "index/severity", _module)
pulumi.runtime.registerResourceModule("incident", "index/status", _module)
pulumi.runtime.registerResourceModule("incident", "index/workflow", _module)
pulumi.runtime.registerResourcePackage("incident", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:incident") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
