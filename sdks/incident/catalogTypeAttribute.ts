// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CatalogTypeAttribute extends pulumi.CustomResource {
    /**
     * Get an existing CatalogTypeAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogTypeAttributeState, opts?: pulumi.CustomResourceOptions): CatalogTypeAttribute {
        return new CatalogTypeAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'incident:index/catalogTypeAttribute:CatalogTypeAttribute';

    /**
     * Returns true if the given object is an instance of CatalogTypeAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogTypeAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogTypeAttribute.__pulumiType;
    }

    /**
     * Whether this attribute is an array or scalar.
     */
    public readonly array!: pulumi.Output<boolean>;
    /**
     * If this is a backlink, the id of the attribute that it's linked from
     */
    public readonly backlinkAttribute!: pulumi.Output<string | undefined>;
    /**
     * ID of this catalog type
     */
    public readonly catalogTypeId!: pulumi.Output<string>;
    /**
     * The name of this attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If this is a path attribute, the path that we should use to pull the data
     */
    public readonly paths!: pulumi.Output<string[] | undefined>;
    /**
     * The type of this attribute.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CatalogTypeAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogTypeAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogTypeAttributeArgs | CatalogTypeAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogTypeAttributeState | undefined;
            resourceInputs["array"] = state ? state.array : undefined;
            resourceInputs["backlinkAttribute"] = state ? state.backlinkAttribute : undefined;
            resourceInputs["catalogTypeId"] = state ? state.catalogTypeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CatalogTypeAttributeArgs | undefined;
            if ((!args || args.catalogTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogTypeId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["array"] = args ? args.array : undefined;
            resourceInputs["backlinkAttribute"] = args ? args.backlinkAttribute : undefined;
            resourceInputs["catalogTypeId"] = args ? args.catalogTypeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogTypeAttribute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CatalogTypeAttribute resources.
 */
export interface CatalogTypeAttributeState {
    /**
     * Whether this attribute is an array or scalar.
     */
    array?: pulumi.Input<boolean>;
    /**
     * If this is a backlink, the id of the attribute that it's linked from
     */
    backlinkAttribute?: pulumi.Input<string>;
    /**
     * ID of this catalog type
     */
    catalogTypeId?: pulumi.Input<string>;
    /**
     * The name of this attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * If this is a path attribute, the path that we should use to pull the data
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of this attribute.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogTypeAttribute resource.
 */
export interface CatalogTypeAttributeArgs {
    /**
     * Whether this attribute is an array or scalar.
     */
    array?: pulumi.Input<boolean>;
    /**
     * If this is a backlink, the id of the attribute that it's linked from
     */
    backlinkAttribute?: pulumi.Input<string>;
    /**
     * ID of this catalog type
     */
    catalogTypeId: pulumi.Input<string>;
    /**
     * The name of this attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * If this is a path attribute, the path that we should use to pull the data
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of this attribute.
     */
    type: pulumi.Input<string>;
}
