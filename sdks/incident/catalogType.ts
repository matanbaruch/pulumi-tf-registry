// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CatalogType extends pulumi.CustomResource {
    /**
     * Get an existing CatalogType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogTypeState, opts?: pulumi.CustomResourceOptions): CatalogType {
        return new CatalogType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'incident:index/catalogType:CatalogType';

    /**
     * Returns true if the given object is an instance of CatalogType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogType.__pulumiType;
    }

    /**
     * The categories that this type belongs to, to be shown in the web dashboard. Possible values are: `customer`,
     * `issue-tracker`, `product-feature`, `service`, `on-call`, `team`, `user`.
     */
    public readonly categories!: pulumi.Output<string[] | undefined>;
    /**
     * Human readble description of this type
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name is the human readable name of this type
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The url of the external repository where this type is managed. When set, users will not be able to edit the catalog type
     * (or its entries) via the UI, and will instead be provided a link to this URL.
     */
    public readonly sourceRepoUrl!: pulumi.Output<string | undefined>;
    /**
     * The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been
     * created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
     */
    public readonly typeName!: pulumi.Output<string>;

    /**
     * Create a CatalogType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogTypeArgs | CatalogTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogTypeState | undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceRepoUrl"] = state ? state.sourceRepoUrl : undefined;
            resourceInputs["typeName"] = state ? state.typeName : undefined;
        } else {
            const args = argsOrState as CatalogTypeArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceRepoUrl"] = args ? args.sourceRepoUrl : undefined;
            resourceInputs["typeName"] = args ? args.typeName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CatalogType resources.
 */
export interface CatalogTypeState {
    /**
     * The categories that this type belongs to, to be shown in the web dashboard. Possible values are: `customer`,
     * `issue-tracker`, `product-feature`, `service`, `on-call`, `team`, `user`.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human readble description of this type
     */
    description?: pulumi.Input<string>;
    /**
     * Name is the human readable name of this type
     */
    name?: pulumi.Input<string>;
    /**
     * The url of the external repository where this type is managed. When set, users will not be able to edit the catalog type
     * (or its entries) via the UI, and will instead be provided a link to this URL.
     */
    sourceRepoUrl?: pulumi.Input<string>;
    /**
     * The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been
     * created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
     */
    typeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogType resource.
 */
export interface CatalogTypeArgs {
    /**
     * The categories that this type belongs to, to be shown in the web dashboard. Possible values are: `customer`,
     * `issue-tracker`, `product-feature`, `service`, `on-call`, `team`, `user`.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human readble description of this type
     */
    description: pulumi.Input<string>;
    /**
     * Name is the human readable name of this type
     */
    name?: pulumi.Input<string>;
    /**
     * The url of the external repository where this type is managed. When set, users will not be able to edit the catalog type
     * (or its entries) via the UI, and will instead be provided a link to this URL.
     */
    sourceRepoUrl?: pulumi.Input<string>;
    /**
     * The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been
     * created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
     */
    typeName?: pulumi.Input<string>;
}
