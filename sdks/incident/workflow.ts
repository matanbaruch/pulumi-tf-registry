// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'incident:index/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * Groups of prerequisite conditions. All conditions in at least one group must be satisfied
     */
    public readonly conditionGroups!: pulumi.Output<outputs.WorkflowConditionGroup[]>;
    /**
     * Whether to continue executing the workflow if a step fails
     */
    public readonly continueOnStepError!: pulumi.Output<boolean>;
    /**
     * Configuration controlling workflow delay behaviour
     */
    public readonly delay!: pulumi.Output<outputs.WorkflowDelay | undefined>;
    /**
     * The expressions to be prepared for use by steps and conditions
     */
    public readonly expressions!: pulumi.Output<outputs.WorkflowExpression[]>;
    /**
     * Folder to display the workflow in
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * Whether to include private incidents
     */
    public readonly includePrivateIncidents!: pulumi.Output<boolean>;
    /**
     * The human-readable name of the workflow
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This workflow will run 'once for' a list of references
     */
    public readonly onceFors!: pulumi.Output<string[]>;
    /**
     * Incidents in these modes will be affected by the workflow
     */
    public readonly runsOnIncidentModes!: pulumi.Output<string[]>;
    /**
     * Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
     */
    public readonly runsOnIncidents!: pulumi.Output<string>;
    /**
     * Shortform used to trigger manual workflows in Slack - e.g. `/inc workflows page-ceo`
     */
    public readonly shortform!: pulumi.Output<string | undefined>;
    /**
     * The state of the workflow (e.g. is it draft, or disabled)
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Steps that are executed as part of the workflow
     */
    public readonly steps!: pulumi.Output<outputs.WorkflowStep[]>;
    /**
     * Unique name of the trigger
     */
    public readonly trigger!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            resourceInputs["conditionGroups"] = state ? state.conditionGroups : undefined;
            resourceInputs["continueOnStepError"] = state ? state.continueOnStepError : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["expressions"] = state ? state.expressions : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["includePrivateIncidents"] = state ? state.includePrivateIncidents : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onceFors"] = state ? state.onceFors : undefined;
            resourceInputs["runsOnIncidentModes"] = state ? state.runsOnIncidentModes : undefined;
            resourceInputs["runsOnIncidents"] = state ? state.runsOnIncidents : undefined;
            resourceInputs["shortform"] = state ? state.shortform : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            if ((!args || args.conditionGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditionGroups'");
            }
            if ((!args || args.continueOnStepError === undefined) && !opts.urn) {
                throw new Error("Missing required property 'continueOnStepError'");
            }
            if ((!args || args.expressions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expressions'");
            }
            if ((!args || args.includePrivateIncidents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includePrivateIncidents'");
            }
            if ((!args || args.onceFors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onceFors'");
            }
            if ((!args || args.runsOnIncidentModes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runsOnIncidentModes'");
            }
            if ((!args || args.runsOnIncidents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runsOnIncidents'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            if ((!args || args.steps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'steps'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["conditionGroups"] = args ? args.conditionGroups : undefined;
            resourceInputs["continueOnStepError"] = args ? args.continueOnStepError : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["expressions"] = args ? args.expressions : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["includePrivateIncidents"] = args ? args.includePrivateIncidents : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onceFors"] = args ? args.onceFors : undefined;
            resourceInputs["runsOnIncidentModes"] = args ? args.runsOnIncidentModes : undefined;
            resourceInputs["runsOnIncidents"] = args ? args.runsOnIncidents : undefined;
            resourceInputs["shortform"] = args ? args.shortform : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    /**
     * Groups of prerequisite conditions. All conditions in at least one group must be satisfied
     */
    conditionGroups?: pulumi.Input<pulumi.Input<inputs.WorkflowConditionGroup>[]>;
    /**
     * Whether to continue executing the workflow if a step fails
     */
    continueOnStepError?: pulumi.Input<boolean>;
    /**
     * Configuration controlling workflow delay behaviour
     */
    delay?: pulumi.Input<inputs.WorkflowDelay>;
    /**
     * The expressions to be prepared for use by steps and conditions
     */
    expressions?: pulumi.Input<pulumi.Input<inputs.WorkflowExpression>[]>;
    /**
     * Folder to display the workflow in
     */
    folder?: pulumi.Input<string>;
    /**
     * Whether to include private incidents
     */
    includePrivateIncidents?: pulumi.Input<boolean>;
    /**
     * The human-readable name of the workflow
     */
    name?: pulumi.Input<string>;
    /**
     * This workflow will run 'once for' a list of references
     */
    onceFors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Incidents in these modes will be affected by the workflow
     */
    runsOnIncidentModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
     */
    runsOnIncidents?: pulumi.Input<string>;
    /**
     * Shortform used to trigger manual workflows in Slack - e.g. `/inc workflows page-ceo`
     */
    shortform?: pulumi.Input<string>;
    /**
     * The state of the workflow (e.g. is it draft, or disabled)
     */
    state?: pulumi.Input<string>;
    /**
     * Steps that are executed as part of the workflow
     */
    steps?: pulumi.Input<pulumi.Input<inputs.WorkflowStep>[]>;
    /**
     * Unique name of the trigger
     */
    trigger?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * Groups of prerequisite conditions. All conditions in at least one group must be satisfied
     */
    conditionGroups: pulumi.Input<pulumi.Input<inputs.WorkflowConditionGroup>[]>;
    /**
     * Whether to continue executing the workflow if a step fails
     */
    continueOnStepError: pulumi.Input<boolean>;
    /**
     * Configuration controlling workflow delay behaviour
     */
    delay?: pulumi.Input<inputs.WorkflowDelay>;
    /**
     * The expressions to be prepared for use by steps and conditions
     */
    expressions: pulumi.Input<pulumi.Input<inputs.WorkflowExpression>[]>;
    /**
     * Folder to display the workflow in
     */
    folder?: pulumi.Input<string>;
    /**
     * Whether to include private incidents
     */
    includePrivateIncidents: pulumi.Input<boolean>;
    /**
     * The human-readable name of the workflow
     */
    name?: pulumi.Input<string>;
    /**
     * This workflow will run 'once for' a list of references
     */
    onceFors: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Incidents in these modes will be affected by the workflow
     */
    runsOnIncidentModes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
     */
    runsOnIncidents: pulumi.Input<string>;
    /**
     * Shortform used to trigger manual workflows in Slack - e.g. `/inc workflows page-ceo`
     */
    shortform?: pulumi.Input<string>;
    /**
     * The state of the workflow (e.g. is it draft, or disabled)
     */
    state: pulumi.Input<string>;
    /**
     * Steps that are executed as part of the workflow
     */
    steps: pulumi.Input<pulumi.Input<inputs.WorkflowStep>[]>;
    /**
     * Unique name of the trigger
     */
    trigger: pulumi.Input<string>;
}
