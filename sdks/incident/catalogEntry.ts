// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CatalogEntry extends pulumi.CustomResource {
    /**
     * Get an existing CatalogEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogEntryState, opts?: pulumi.CustomResourceOptions): CatalogEntry {
        return new CatalogEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'incident:index/catalogEntry:CatalogEntry';

    /**
     * Returns true if the given object is an instance of CatalogEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogEntry.__pulumiType;
    }

    /**
     * Optional aliases that can be used to reference this entry
     */
    public readonly aliases!: pulumi.Output<string[]>;
    public readonly attributeValues!: pulumi.Output<outputs.CatalogEntryAttributeValue[]>;
    /**
     * ID of this catalog type
     */
    public readonly catalogTypeId!: pulumi.Output<string>;
    /**
     * Name is the human readable name of this entry
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * When catalog type is ranked, this is used to help order things
     */
    public readonly rank!: pulumi.Output<number>;

    /**
     * Create a CatalogEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogEntryArgs | CatalogEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogEntryState | undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["attributeValues"] = state ? state.attributeValues : undefined;
            resourceInputs["catalogTypeId"] = state ? state.catalogTypeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
        } else {
            const args = argsOrState as CatalogEntryArgs | undefined;
            if ((!args || args.attributeValues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributeValues'");
            }
            if ((!args || args.catalogTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogTypeId'");
            }
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["attributeValues"] = args ? args.attributeValues : undefined;
            resourceInputs["catalogTypeId"] = args ? args.catalogTypeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CatalogEntry resources.
 */
export interface CatalogEntryState {
    /**
     * Optional aliases that can be used to reference this entry
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    attributeValues?: pulumi.Input<pulumi.Input<inputs.CatalogEntryAttributeValue>[]>;
    /**
     * ID of this catalog type
     */
    catalogTypeId?: pulumi.Input<string>;
    /**
     * Name is the human readable name of this entry
     */
    name?: pulumi.Input<string>;
    /**
     * When catalog type is ranked, this is used to help order things
     */
    rank?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CatalogEntry resource.
 */
export interface CatalogEntryArgs {
    /**
     * Optional aliases that can be used to reference this entry
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    attributeValues: pulumi.Input<pulumi.Input<inputs.CatalogEntryAttributeValue>[]>;
    /**
     * ID of this catalog type
     */
    catalogTypeId: pulumi.Input<string>;
    /**
     * Name is the human readable name of this entry
     */
    name?: pulumi.Input<string>;
    /**
     * When catalog type is ranked, this is used to help order things
     */
    rank?: pulumi.Input<number>;
}
