// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing PolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyRuleState, opts?: pulumi.CustomResourceOptions): PolicyRule {
        return new PolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clumio:index/policyRule:PolicyRule';

    /**
     * Returns true if the given object is an instance of PolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyRule.__pulumiType;
    }

    /**
     * The policy rule ID before which this policy rule should be inserted. Each policy rule must have a unique before_rule_id.
     * If the same before_rule_id is set for more than one policy rule, then only one will have that before_rule_id. The other
     * rules will have a different before_rule_id assigned to them automatically. An empty value will set the rule to have
     * lowest priority. - NOTE: In the Global Organizational Unit, rules can also be prioritized against two virtual rules
     * maintained by the system: `asset-level-rule` and `child-ou-rule`. `asset-level-rule` corresponds to the priority of
     * Direct Assignments (when a policy is applied directly to an asset) whereas `child-ou-rule` corresponds to the priority
     * of rules created by child organizational units.
     */
    public readonly beforeRuleId!: pulumi.Output<string>;
    /**
     * The condition of the policy rule. Possible conditions include: 1) `entity_type` is required and supports `$eq` and `$in`
     * filters. `entity_type` must be one of `aws_rds_instance`, `aws_ebs_volume`, `aws_ec2_instance`, `aws_dynamodb_table` or
     * `aws_rds_cluster`. 2) `aws_account_native_id` and `aws_region` are optional and both support `$eq` and `$in` filters. 3)
     * `aws_tag` is optional and supports `$eq`, `$in`, `$all`, and `$contains` filters.
     */
    public readonly condition!: pulumi.Output<string>;
    /**
     * The name of the policy rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Clumio-assigned ID of the organizational unit to use as the context for assigning the policy.
     *
     * @deprecated Deprecated
     */
    public readonly organizationalUnitId!: pulumi.Output<string>;
    /**
     * The Clumio-assigned ID of the policy.
     */
    public readonly policyId!: pulumi.Output<string>;

    /**
     * Create a PolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyRuleArgs | PolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyRuleState | undefined;
            resourceInputs["beforeRuleId"] = state ? state.beforeRuleId : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationalUnitId"] = state ? state.organizationalUnitId : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
        } else {
            const args = argsOrState as PolicyRuleArgs | undefined;
            if ((!args || args.beforeRuleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'beforeRuleId'");
            }
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["beforeRuleId"] = args ? args.beforeRuleId : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationalUnitId"] = args ? args.organizationalUnitId : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyRule resources.
 */
export interface PolicyRuleState {
    /**
     * The policy rule ID before which this policy rule should be inserted. Each policy rule must have a unique before_rule_id.
     * If the same before_rule_id is set for more than one policy rule, then only one will have that before_rule_id. The other
     * rules will have a different before_rule_id assigned to them automatically. An empty value will set the rule to have
     * lowest priority. - NOTE: In the Global Organizational Unit, rules can also be prioritized against two virtual rules
     * maintained by the system: `asset-level-rule` and `child-ou-rule`. `asset-level-rule` corresponds to the priority of
     * Direct Assignments (when a policy is applied directly to an asset) whereas `child-ou-rule` corresponds to the priority
     * of rules created by child organizational units.
     */
    beforeRuleId?: pulumi.Input<string>;
    /**
     * The condition of the policy rule. Possible conditions include: 1) `entity_type` is required and supports `$eq` and `$in`
     * filters. `entity_type` must be one of `aws_rds_instance`, `aws_ebs_volume`, `aws_ec2_instance`, `aws_dynamodb_table` or
     * `aws_rds_cluster`. 2) `aws_account_native_id` and `aws_region` are optional and both support `$eq` and `$in` filters. 3)
     * `aws_tag` is optional and supports `$eq`, `$in`, `$all`, and `$contains` filters.
     */
    condition?: pulumi.Input<string>;
    /**
     * The name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The Clumio-assigned ID of the organizational unit to use as the context for assigning the policy.
     *
     * @deprecated Deprecated
     */
    organizationalUnitId?: pulumi.Input<string>;
    /**
     * The Clumio-assigned ID of the policy.
     */
    policyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyRule resource.
 */
export interface PolicyRuleArgs {
    /**
     * The policy rule ID before which this policy rule should be inserted. Each policy rule must have a unique before_rule_id.
     * If the same before_rule_id is set for more than one policy rule, then only one will have that before_rule_id. The other
     * rules will have a different before_rule_id assigned to them automatically. An empty value will set the rule to have
     * lowest priority. - NOTE: In the Global Organizational Unit, rules can also be prioritized against two virtual rules
     * maintained by the system: `asset-level-rule` and `child-ou-rule`. `asset-level-rule` corresponds to the priority of
     * Direct Assignments (when a policy is applied directly to an asset) whereas `child-ou-rule` corresponds to the priority
     * of rules created by child organizational units.
     */
    beforeRuleId: pulumi.Input<string>;
    /**
     * The condition of the policy rule. Possible conditions include: 1) `entity_type` is required and supports `$eq` and `$in`
     * filters. `entity_type` must be one of `aws_rds_instance`, `aws_ebs_volume`, `aws_ec2_instance`, `aws_dynamodb_table` or
     * `aws_rds_cluster`. 2) `aws_account_native_id` and `aws_region` are optional and both support `$eq` and `$in` filters. 3)
     * `aws_tag` is optional and supports `$eq`, `$in`, `$all`, and `$contains` filters.
     */
    condition: pulumi.Input<string>;
    /**
     * The name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The Clumio-assigned ID of the organizational unit to use as the context for assigning the policy.
     *
     * @deprecated Deprecated
     */
    organizationalUnitId?: pulumi.Input<string>;
    /**
     * The Clumio-assigned ID of the policy.
     */
    policyId: pulumi.Input<string>;
}
