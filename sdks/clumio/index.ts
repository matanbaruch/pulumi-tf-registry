// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AutoUserProvisioningRuleArgs, AutoUserProvisioningRuleState } from "./autoUserProvisioningRule";
export type AutoUserProvisioningRule = import("./autoUserProvisioningRule").AutoUserProvisioningRule;
export const AutoUserProvisioningRule: typeof import("./autoUserProvisioningRule").AutoUserProvisioningRule = null as any;
utilities.lazyLoad(exports, ["AutoUserProvisioningRule"], () => require("./autoUserProvisioningRule"));

export { AutoUserProvisioningSettingArgs, AutoUserProvisioningSettingState } from "./autoUserProvisioningSetting";
export type AutoUserProvisioningSetting = import("./autoUserProvisioningSetting").AutoUserProvisioningSetting;
export const AutoUserProvisioningSetting: typeof import("./autoUserProvisioningSetting").AutoUserProvisioningSetting = null as any;
utilities.lazyLoad(exports, ["AutoUserProvisioningSetting"], () => require("./autoUserProvisioningSetting"));

export { AwsConnectionArgs, AwsConnectionState } from "./awsConnection";
export type AwsConnection = import("./awsConnection").AwsConnection;
export const AwsConnection: typeof import("./awsConnection").AwsConnection = null as any;
utilities.lazyLoad(exports, ["AwsConnection"], () => require("./awsConnection"));

export { AwsManualConnectionArgs, AwsManualConnectionState } from "./awsManualConnection";
export type AwsManualConnection = import("./awsManualConnection").AwsManualConnection;
export const AwsManualConnection: typeof import("./awsManualConnection").AwsManualConnection = null as any;
utilities.lazyLoad(exports, ["AwsManualConnection"], () => require("./awsManualConnection"));

export { GetAwsConnectionArgs, GetAwsConnectionResult, GetAwsConnectionOutputArgs } from "./getAwsConnection";
export const getAwsConnection: typeof import("./getAwsConnection").getAwsConnection = null as any;
export const getAwsConnectionOutput: typeof import("./getAwsConnection").getAwsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAwsConnection","getAwsConnectionOutput"], () => require("./getAwsConnection"));

export { GetAwsManualConnectionResourcesArgs, GetAwsManualConnectionResourcesResult, GetAwsManualConnectionResourcesOutputArgs } from "./getAwsManualConnectionResources";
export const getAwsManualConnectionResources: typeof import("./getAwsManualConnectionResources").getAwsManualConnectionResources = null as any;
export const getAwsManualConnectionResourcesOutput: typeof import("./getAwsManualConnectionResources").getAwsManualConnectionResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getAwsManualConnectionResources","getAwsManualConnectionResourcesOutput"], () => require("./getAwsManualConnectionResources"));

export { GetDynamodbTablesArgs, GetDynamodbTablesResult, GetDynamodbTablesOutputArgs } from "./getDynamodbTables";
export const getDynamodbTables: typeof import("./getDynamodbTables").getDynamodbTables = null as any;
export const getDynamodbTablesOutput: typeof import("./getDynamodbTables").getDynamodbTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbTables","getDynamodbTablesOutput"], () => require("./getDynamodbTables"));

export { GetOrganizationalUnitArgs, GetOrganizationalUnitResult, GetOrganizationalUnitOutputArgs } from "./getOrganizationalUnit";
export const getOrganizationalUnit: typeof import("./getOrganizationalUnit").getOrganizationalUnit = null as any;
export const getOrganizationalUnitOutput: typeof import("./getOrganizationalUnit").getOrganizationalUnitOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationalUnit","getOrganizationalUnitOutput"], () => require("./getOrganizationalUnit"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetPolicyRuleArgs, GetPolicyRuleResult, GetPolicyRuleOutputArgs } from "./getPolicyRule";
export const getPolicyRule: typeof import("./getPolicyRule").getPolicyRule = null as any;
export const getPolicyRuleOutput: typeof import("./getPolicyRule").getPolicyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyRule","getPolicyRuleOutput"], () => require("./getPolicyRule"));

export { GetProtectionGroupArgs, GetProtectionGroupResult, GetProtectionGroupOutputArgs } from "./getProtectionGroup";
export const getProtectionGroup: typeof import("./getProtectionGroup").getProtectionGroup = null as any;
export const getProtectionGroupOutput: typeof import("./getProtectionGroup").getProtectionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionGroup","getProtectionGroupOutput"], () => require("./getProtectionGroup"));

export { GetProtectionGroupAssetArgs, GetProtectionGroupAssetResult, GetProtectionGroupAssetOutputArgs } from "./getProtectionGroupAsset";
export const getProtectionGroupAsset: typeof import("./getProtectionGroupAsset").getProtectionGroupAsset = null as any;
export const getProtectionGroupAssetOutput: typeof import("./getProtectionGroupAsset").getProtectionGroupAssetOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionGroupAsset","getProtectionGroupAssetOutput"], () => require("./getProtectionGroupAsset"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { OrganizationalUnitArgs, OrganizationalUnitState } from "./organizationalUnit";
export type OrganizationalUnit = import("./organizationalUnit").OrganizationalUnit;
export const OrganizationalUnit: typeof import("./organizationalUnit").OrganizationalUnit = null as any;
utilities.lazyLoad(exports, ["OrganizationalUnit"], () => require("./organizationalUnit"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyAssignmentArgs, PolicyAssignmentState } from "./policyAssignment";
export type PolicyAssignment = import("./policyAssignment").PolicyAssignment;
export const PolicyAssignment: typeof import("./policyAssignment").PolicyAssignment = null as any;
utilities.lazyLoad(exports, ["PolicyAssignment"], () => require("./policyAssignment"));

export { PolicyRuleArgs, PolicyRuleState } from "./policyRule";
export type PolicyRule = import("./policyRule").PolicyRule;
export const PolicyRule: typeof import("./policyRule").PolicyRule = null as any;
utilities.lazyLoad(exports, ["PolicyRule"], () => require("./policyRule"));

export { PostProcessAwsConnectionArgs, PostProcessAwsConnectionState } from "./postProcessAwsConnection";
export type PostProcessAwsConnection = import("./postProcessAwsConnection").PostProcessAwsConnection;
export const PostProcessAwsConnection: typeof import("./postProcessAwsConnection").PostProcessAwsConnection = null as any;
utilities.lazyLoad(exports, ["PostProcessAwsConnection"], () => require("./postProcessAwsConnection"));

export { PostProcessKmsArgs, PostProcessKmsState } from "./postProcessKms";
export type PostProcessKms = import("./postProcessKms").PostProcessKms;
export const PostProcessKms: typeof import("./postProcessKms").PostProcessKms = null as any;
utilities.lazyLoad(exports, ["PostProcessKms"], () => require("./postProcessKms"));

export { ProtectionGroupArgs, ProtectionGroupState } from "./protectionGroup";
export type ProtectionGroup = import("./protectionGroup").ProtectionGroup;
export const ProtectionGroup: typeof import("./protectionGroup").ProtectionGroup = null as any;
utilities.lazyLoad(exports, ["ProtectionGroup"], () => require("./protectionGroup"));

export { ProtectionGroupBucketArgs, ProtectionGroupBucketState } from "./protectionGroupBucket";
export type ProtectionGroupBucket = import("./protectionGroupBucket").ProtectionGroupBucket;
export const ProtectionGroupBucket: typeof import("./protectionGroupBucket").ProtectionGroupBucket = null as any;
utilities.lazyLoad(exports, ["ProtectionGroupBucket"], () => require("./protectionGroupBucket"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { S3BucketPropertiesArgs, S3BucketPropertiesState } from "./s3bucketProperties";
export type S3BucketProperties = import("./s3bucketProperties").S3BucketProperties;
export const S3BucketProperties: typeof import("./s3bucketProperties").S3BucketProperties = null as any;
utilities.lazyLoad(exports, ["S3BucketProperties"], () => require("./s3bucketProperties"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WalletArgs, WalletState } from "./wallet";
export type Wallet = import("./wallet").Wallet;
export const Wallet: typeof import("./wallet").Wallet = null as any;
utilities.lazyLoad(exports, ["Wallet"], () => require("./wallet"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "clumio:index/autoUserProvisioningRule:AutoUserProvisioningRule":
                return new AutoUserProvisioningRule(name, <any>undefined, { urn })
            case "clumio:index/autoUserProvisioningSetting:AutoUserProvisioningSetting":
                return new AutoUserProvisioningSetting(name, <any>undefined, { urn })
            case "clumio:index/awsConnection:AwsConnection":
                return new AwsConnection(name, <any>undefined, { urn })
            case "clumio:index/awsManualConnection:AwsManualConnection":
                return new AwsManualConnection(name, <any>undefined, { urn })
            case "clumio:index/organizationalUnit:OrganizationalUnit":
                return new OrganizationalUnit(name, <any>undefined, { urn })
            case "clumio:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "clumio:index/policyAssignment:PolicyAssignment":
                return new PolicyAssignment(name, <any>undefined, { urn })
            case "clumio:index/policyRule:PolicyRule":
                return new PolicyRule(name, <any>undefined, { urn })
            case "clumio:index/postProcessAwsConnection:PostProcessAwsConnection":
                return new PostProcessAwsConnection(name, <any>undefined, { urn })
            case "clumio:index/postProcessKms:PostProcessKms":
                return new PostProcessKms(name, <any>undefined, { urn })
            case "clumio:index/protectionGroup:ProtectionGroup":
                return new ProtectionGroup(name, <any>undefined, { urn })
            case "clumio:index/protectionGroupBucket:ProtectionGroupBucket":
                return new ProtectionGroupBucket(name, <any>undefined, { urn })
            case "clumio:index/s3BucketProperties:S3BucketProperties":
                return new S3BucketProperties(name, <any>undefined, { urn })
            case "clumio:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "clumio:index/wallet:Wallet":
                return new Wallet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("clumio", "index/autoUserProvisioningRule", _module)
pulumi.runtime.registerResourceModule("clumio", "index/autoUserProvisioningSetting", _module)
pulumi.runtime.registerResourceModule("clumio", "index/awsConnection", _module)
pulumi.runtime.registerResourceModule("clumio", "index/awsManualConnection", _module)
pulumi.runtime.registerResourceModule("clumio", "index/organizationalUnit", _module)
pulumi.runtime.registerResourceModule("clumio", "index/policy", _module)
pulumi.runtime.registerResourceModule("clumio", "index/policyAssignment", _module)
pulumi.runtime.registerResourceModule("clumio", "index/policyRule", _module)
pulumi.runtime.registerResourceModule("clumio", "index/postProcessAwsConnection", _module)
pulumi.runtime.registerResourceModule("clumio", "index/postProcessKms", _module)
pulumi.runtime.registerResourceModule("clumio", "index/protectionGroup", _module)
pulumi.runtime.registerResourceModule("clumio", "index/protectionGroupBucket", _module)
pulumi.runtime.registerResourceModule("clumio", "index/s3BucketProperties", _module)
pulumi.runtime.registerResourceModule("clumio", "index/user", _module)
pulumi.runtime.registerResourceModule("clumio", "index/wallet", _module)
pulumi.runtime.registerResourcePackage("clumio", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:clumio") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
