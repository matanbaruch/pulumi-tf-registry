// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrganizationalUnit extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationalUnit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationalUnitState, opts?: pulumi.CustomResourceOptions): OrganizationalUnit {
        return new OrganizationalUnit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clumio:index/organizationalUnit:OrganizationalUnit';

    /**
     * Returns true if the given object is an instance of OrganizationalUnit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationalUnit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationalUnit.__pulumiType;
    }

    /**
     * Number of immediate children of the organizational unit.
     */
    public /*out*/ readonly childrenCount!: pulumi.Output<number>;
    /**
     * Datasource types configured in this organizational unit. Possible values include aws, microsoft365, vmware, or mssql.
     */
    public /*out*/ readonly configuredDatasourceTypes!: pulumi.Output<string[]>;
    /**
     * List of all recursive descendent organizational units.
     */
    public /*out*/ readonly descendantIds!: pulumi.Output<string[]>;
    /**
     * Brief description to denote details of the organizational unit.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique name assigned to the organizational unit.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The identifier of the parent organizational unit under which the new organizational unit is to be created. If not
     * provided, the resource will be created under the default organizational unit associated with the credentials used to
     * create the organizational unit.
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * Number of users to whom this organizational unit or any of its descendants have been assigned.
     */
    public /*out*/ readonly userCount!: pulumi.Output<number>;
    /**
     * List of user ids to assign this organizational unit.
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly users!: pulumi.Output<string[]>;
    /**
     * List of user ids, with role, to assign this organizational unit.
     */
    public /*out*/ readonly usersWithRoles!: pulumi.Output<outputs.OrganizationalUnitUsersWithRole[]>;

    /**
     * Create a OrganizationalUnit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrganizationalUnitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationalUnitArgs | OrganizationalUnitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationalUnitState | undefined;
            resourceInputs["childrenCount"] = state ? state.childrenCount : undefined;
            resourceInputs["configuredDatasourceTypes"] = state ? state.configuredDatasourceTypes : undefined;
            resourceInputs["descendantIds"] = state ? state.descendantIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["userCount"] = state ? state.userCount : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["usersWithRoles"] = state ? state.usersWithRoles : undefined;
        } else {
            const args = argsOrState as OrganizationalUnitArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["childrenCount"] = undefined /*out*/;
            resourceInputs["configuredDatasourceTypes"] = undefined /*out*/;
            resourceInputs["descendantIds"] = undefined /*out*/;
            resourceInputs["userCount"] = undefined /*out*/;
            resourceInputs["users"] = undefined /*out*/;
            resourceInputs["usersWithRoles"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationalUnit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationalUnit resources.
 */
export interface OrganizationalUnitState {
    /**
     * Number of immediate children of the organizational unit.
     */
    childrenCount?: pulumi.Input<number>;
    /**
     * Datasource types configured in this organizational unit. Possible values include aws, microsoft365, vmware, or mssql.
     */
    configuredDatasourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of all recursive descendent organizational units.
     */
    descendantIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Brief description to denote details of the organizational unit.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique name assigned to the organizational unit.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifier of the parent organizational unit under which the new organizational unit is to be created. If not
     * provided, the resource will be created under the default organizational unit associated with the credentials used to
     * create the organizational unit.
     */
    parentId?: pulumi.Input<string>;
    /**
     * Number of users to whom this organizational unit or any of its descendants have been assigned.
     */
    userCount?: pulumi.Input<number>;
    /**
     * List of user ids to assign this organizational unit.
     *
     * @deprecated Deprecated
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user ids, with role, to assign this organizational unit.
     */
    usersWithRoles?: pulumi.Input<pulumi.Input<inputs.OrganizationalUnitUsersWithRole>[]>;
}

/**
 * The set of arguments for constructing a OrganizationalUnit resource.
 */
export interface OrganizationalUnitArgs {
    /**
     * Brief description to denote details of the organizational unit.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique name assigned to the organizational unit.
     */
    name?: pulumi.Input<string>;
    /**
     * The identifier of the parent organizational unit under which the new organizational unit is to be created. If not
     * provided, the resource will be created under the default organizational unit associated with the credentials used to
     * create the organizational unit.
     */
    parentId?: pulumi.Input<string>;
}
