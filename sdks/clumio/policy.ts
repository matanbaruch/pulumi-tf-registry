// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clumio:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * The status of the policy. Valid values are: `activated` and `deactivated`. `activated` backups will take place regularly
     * according to the policy SLA. `deactivated` backups will not begin until the policy is reactivated. The assets associated
     * with the policy will have their compliance status set to deactivated.
     */
    public readonly activationStatus!: pulumi.Output<string>;
    /**
     * Policy Lock Status.
     */
    public /*out*/ readonly lockStatus!: pulumi.Output<string>;
    /**
     * The user-assigned name of the policy. Note that having identical names for different policies is permissible.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Each data source to be protected should have details provided in the list of operations. These details include
     * information such as how often to protect the data source, whether a backup window is desired, which type of protection
     * to perform, etc.
     */
    public readonly operations!: pulumi.Output<outputs.PolicyOperation[] | undefined>;
    /**
     * Identifier of the Clumio organizational unit associated with the policy. If not provided, the policy will be associated
     * with the default organizational unit associated with the credentials used to create the policy.
     *
     * @deprecated Deprecated
     */
    public readonly organizationalUnitId!: pulumi.Output<string>;
    /**
     * The time zone for the policy, in IANA format. For example: `America/Los_Angeles`, `America/New_York`, `Etc/UTC`, etc.
     * For more information, see the Time Zone Database (https://www.iana.org/time-zones) on the IANA website.
     *
     * @deprecated Deprecated
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["activationStatus"] = state ? state.activationStatus : undefined;
            resourceInputs["lockStatus"] = state ? state.lockStatus : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["organizationalUnitId"] = state ? state.organizationalUnitId : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["activationStatus"] = args ? args.activationStatus : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operations"] = args ? args.operations : undefined;
            resourceInputs["organizationalUnitId"] = args ? args.organizationalUnitId : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["lockStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * The status of the policy. Valid values are: `activated` and `deactivated`. `activated` backups will take place regularly
     * according to the policy SLA. `deactivated` backups will not begin until the policy is reactivated. The assets associated
     * with the policy will have their compliance status set to deactivated.
     */
    activationStatus?: pulumi.Input<string>;
    /**
     * Policy Lock Status.
     */
    lockStatus?: pulumi.Input<string>;
    /**
     * The user-assigned name of the policy. Note that having identical names for different policies is permissible.
     */
    name?: pulumi.Input<string>;
    /**
     * Each data source to be protected should have details provided in the list of operations. These details include
     * information such as how often to protect the data source, whether a backup window is desired, which type of protection
     * to perform, etc.
     */
    operations?: pulumi.Input<pulumi.Input<inputs.PolicyOperation>[]>;
    /**
     * Identifier of the Clumio organizational unit associated with the policy. If not provided, the policy will be associated
     * with the default organizational unit associated with the credentials used to create the policy.
     *
     * @deprecated Deprecated
     */
    organizationalUnitId?: pulumi.Input<string>;
    /**
     * The time zone for the policy, in IANA format. For example: `America/Los_Angeles`, `America/New_York`, `Etc/UTC`, etc.
     * For more information, see the Time Zone Database (https://www.iana.org/time-zones) on the IANA website.
     *
     * @deprecated Deprecated
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * The status of the policy. Valid values are: `activated` and `deactivated`. `activated` backups will take place regularly
     * according to the policy SLA. `deactivated` backups will not begin until the policy is reactivated. The assets associated
     * with the policy will have their compliance status set to deactivated.
     */
    activationStatus?: pulumi.Input<string>;
    /**
     * The user-assigned name of the policy. Note that having identical names for different policies is permissible.
     */
    name?: pulumi.Input<string>;
    /**
     * Each data source to be protected should have details provided in the list of operations. These details include
     * information such as how often to protect the data source, whether a backup window is desired, which type of protection
     * to perform, etc.
     */
    operations?: pulumi.Input<pulumi.Input<inputs.PolicyOperation>[]>;
    /**
     * Identifier of the Clumio organizational unit associated with the policy. If not provided, the policy will be associated
     * with the default organizational unit associated with the credentials used to create the policy.
     *
     * @deprecated Deprecated
     */
    organizationalUnitId?: pulumi.Input<string>;
    /**
     * The time zone for the policy, in IANA format. For example: `America/Los_Angeles`, `America/New_York`, `Etc/UTC`, etc.
     * For more information, see the Time Zone Database (https://www.iana.org/time-zones) on the IANA website.
     *
     * @deprecated Deprecated
     */
    timezone?: pulumi.Input<string>;
}
