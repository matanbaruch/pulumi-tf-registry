// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class S3BucketProperties extends pulumi.CustomResource {
    /**
     * Get an existing S3BucketProperties resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketPropertiesState, opts?: pulumi.CustomResourceOptions): S3BucketProperties {
        return new S3BucketProperties(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'clumio:index/s3BucketProperties:S3BucketProperties';

    /**
     * Returns true if the given object is an instance of S3BucketProperties.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3BucketProperties {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3BucketProperties.__pulumiType;
    }

    /**
     * Unique Clumio assigned identifier for the S3 bucket.
     */
    public readonly bucketId!: pulumi.Output<string>;
    /**
     * Determines if continuous backup is enabled for the S3 bucket.
     */
    public readonly eventBridgeEnabled!: pulumi.Output<boolean>;
    /**
     * If true, tries to disable EventBridge notification for the given bucket. This may override the existing bucket
     * notification configuration in the AWS account. Defaults to true if not specified.
     */
    public readonly eventBridgeNotificationDisabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a S3BucketProperties resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketPropertiesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketPropertiesArgs | S3BucketPropertiesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketPropertiesState | undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["eventBridgeEnabled"] = state ? state.eventBridgeEnabled : undefined;
            resourceInputs["eventBridgeNotificationDisabled"] = state ? state.eventBridgeNotificationDisabled : undefined;
        } else {
            const args = argsOrState as S3BucketPropertiesArgs | undefined;
            if ((!args || args.bucketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if ((!args || args.eventBridgeEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventBridgeEnabled'");
            }
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["eventBridgeEnabled"] = args ? args.eventBridgeEnabled : undefined;
            resourceInputs["eventBridgeNotificationDisabled"] = args ? args.eventBridgeNotificationDisabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3BucketProperties.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3BucketProperties resources.
 */
export interface S3BucketPropertiesState {
    /**
     * Unique Clumio assigned identifier for the S3 bucket.
     */
    bucketId?: pulumi.Input<string>;
    /**
     * Determines if continuous backup is enabled for the S3 bucket.
     */
    eventBridgeEnabled?: pulumi.Input<boolean>;
    /**
     * If true, tries to disable EventBridge notification for the given bucket. This may override the existing bucket
     * notification configuration in the AWS account. Defaults to true if not specified.
     */
    eventBridgeNotificationDisabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a S3BucketProperties resource.
 */
export interface S3BucketPropertiesArgs {
    /**
     * Unique Clumio assigned identifier for the S3 bucket.
     */
    bucketId: pulumi.Input<string>;
    /**
     * Determines if continuous backup is enabled for the S3 bucket.
     */
    eventBridgeEnabled: pulumi.Input<boolean>;
    /**
     * If true, tries to disable EventBridge notification for the given bucket. This may override the existing bucket
     * notification configuration in the AWS account. Defaults to true if not specified.
     */
    eventBridgeNotificationDisabled?: pulumi.Input<boolean>;
}
