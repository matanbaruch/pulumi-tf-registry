// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BaremetalAddress {
    nets: pulumi.Input<pulumi.Input<inputs.BaremetalAddressNet>[]>;
}

export interface BaremetalAddressNet {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BaremetalInterface {
    existingFipId?: pulumi.Input<string>;
    fipSource?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    /**
     * If not set will be calculated after creation. Trunk interface always attached first. Can't detach interface if is_parent true. Fields affect only on creation
     */
    isParent?: pulumi.Input<boolean>;
    /**
     * required if type is 'subnet' or 'any_subnet'
     */
    networkId?: pulumi.Input<string>;
    /**
     * Order of attaching interface. Trunk interface always attached first, fields affect only on creation
     */
    order?: pulumi.Input<number>;
    /**
     * required if type is  'reserved_fixed_ip'
     */
    portId?: pulumi.Input<string>;
    /**
     * required if type is 'subnet'
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Available value is 'subnet', 'any_subnet', 'external', 'reserved_fixed_ip'
     */
    type: pulumi.Input<string>;
}

export interface BaremetalMetadata {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface BaremetalTimeouts {
    create?: pulumi.Input<string>;
}

export interface CdnOrigingroupOrigin {
    /**
     * true — The option is active. The origin will not be used until one of active origins become unavailable. false — The option is disabled.
     */
    backup?: pulumi.Input<boolean>;
    /**
     * The setting allows to enable or disable an Origin source in the Origins group
     */
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<number>;
    /**
     * IP address or Domain name of your origin and the port if custom
     */
    source: pulumi.Input<string>;
}

export interface CdnResourceOptions {
    browserCacheSettings?: pulumi.Input<inputs.CdnResourceOptionsBrowserCacheSettings>;
    cors?: pulumi.Input<inputs.CdnResourceOptionsCors>;
    /**
     * The cache expiration time for CDN servers.
     */
    edgeCacheSettings?: pulumi.Input<inputs.CdnResourceOptionsEdgeCacheSettings>;
    gzipOn?: pulumi.Input<inputs.CdnResourceOptionsGzipOn>;
    /**
     * Specify the Host header that CDN servers use when request content from an origin server. Your server must be able to process requests with the chosen header. If the option is in NULL state Host Header value is taken from the CNAME field.
     */
    hostHeader?: pulumi.Input<inputs.CdnResourceOptionsHostHeader>;
    ignoreQueryString?: pulumi.Input<inputs.CdnResourceOptionsIgnoreQueryString>;
    queryParamsBlacklist?: pulumi.Input<inputs.CdnResourceOptionsQueryParamsBlacklist>;
    queryParamsWhitelist?: pulumi.Input<inputs.CdnResourceOptionsQueryParamsWhitelist>;
    /**
     * Sets redirect from HTTP protocol to HTTPS for all resource requests.
     */
    redirectHttpToHttps?: pulumi.Input<inputs.CdnResourceOptionsRedirectHttpToHttps>;
    rewrite?: pulumi.Input<inputs.CdnResourceOptionsRewrite>;
    sni?: pulumi.Input<inputs.CdnResourceOptionsSni>;
    staticHeaders?: pulumi.Input<inputs.CdnResourceOptionsStaticHeaders>;
    staticRequestHeaders?: pulumi.Input<inputs.CdnResourceOptionsStaticRequestHeaders>;
    tlsVersions?: pulumi.Input<inputs.CdnResourceOptionsTlsVersions>;
    webp?: pulumi.Input<inputs.CdnResourceOptionsWebp>;
    websockets?: pulumi.Input<inputs.CdnResourceOptionsWebsockets>;
}

export interface CdnResourceOptionsBrowserCacheSettings {
    enabled?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface CdnResourceOptionsCors {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnResourceOptionsEdgeCacheSettings {
    /**
     * Caching time for a response with specific codes. These settings have a higher priority than the value field. Response code ('304', '404' for example). Use 'any' to specify caching time for all response codes. Caching time in seconds ('0s', '600s' for example). Use '0s' to disable caching for a specific response code.
     */
    customValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
     */
    default?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * Caching time for a response with codes 200, 206, 301, 302. Responses with codes 4xx, 5xx will not be cached. Use '0s' disable to caching. Use custom_values field to specify a custom caching time for a response with specific codes.
     */
    value?: pulumi.Input<string>;
}

export interface CdnResourceOptionsGzipOn {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnResourceOptionsHostHeader {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface CdnResourceOptionsIgnoreQueryString {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnResourceOptionsQueryParamsBlacklist {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnResourceOptionsQueryParamsWhitelist {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnResourceOptionsRedirectHttpToHttps {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnResourceOptionsRewrite {
    body: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    flag?: pulumi.Input<string>;
}

export interface CdnResourceOptionsSni {
    /**
     * Required to set custom hostname in case sni-type='custom'
     */
    customHostname?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * Available values 'dynamic' or 'custom'
     */
    sniType?: pulumi.Input<string>;
}

export interface CdnResourceOptionsStaticHeaders {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CdnResourceOptionsStaticRequestHeaders {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CdnResourceOptionsTlsVersions {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnResourceOptionsWebp {
    enabled?: pulumi.Input<boolean>;
    jpgQuality: pulumi.Input<number>;
    pngLossless?: pulumi.Input<boolean>;
    pngQuality: pulumi.Input<number>;
}

export interface CdnResourceOptionsWebsockets {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnRuleOptions {
    browserCacheSettings?: pulumi.Input<inputs.CdnRuleOptionsBrowserCacheSettings>;
    cors?: pulumi.Input<inputs.CdnRuleOptionsCors>;
    /**
     * The cache expiration time for CDN servers.
     */
    edgeCacheSettings?: pulumi.Input<inputs.CdnRuleOptionsEdgeCacheSettings>;
    gzipOn?: pulumi.Input<inputs.CdnRuleOptionsGzipOn>;
    /**
     * Specify the Host header that CDN servers use when request content from an origin server. Your server must be able to process requests with the chosen header. If the option is in NULL state Host Header value is taken from the CNAME field.
     */
    hostHeader?: pulumi.Input<inputs.CdnRuleOptionsHostHeader>;
    ignoreQueryString?: pulumi.Input<inputs.CdnRuleOptionsIgnoreQueryString>;
    queryParamsBlacklist?: pulumi.Input<inputs.CdnRuleOptionsQueryParamsBlacklist>;
    queryParamsWhitelist?: pulumi.Input<inputs.CdnRuleOptionsQueryParamsWhitelist>;
    /**
     * Sets redirect from HTTP protocol to HTTPS for all resource requests.
     */
    redirectHttpToHttps?: pulumi.Input<inputs.CdnRuleOptionsRedirectHttpToHttps>;
    rewrite?: pulumi.Input<inputs.CdnRuleOptionsRewrite>;
    sni?: pulumi.Input<inputs.CdnRuleOptionsSni>;
    staticHeaders?: pulumi.Input<inputs.CdnRuleOptionsStaticHeaders>;
    staticRequestHeaders?: pulumi.Input<inputs.CdnRuleOptionsStaticRequestHeaders>;
    tlsVersions?: pulumi.Input<inputs.CdnRuleOptionsTlsVersions>;
    webp?: pulumi.Input<inputs.CdnRuleOptionsWebp>;
    websockets?: pulumi.Input<inputs.CdnRuleOptionsWebsockets>;
}

export interface CdnRuleOptionsBrowserCacheSettings {
    enabled?: pulumi.Input<boolean>;
    value?: pulumi.Input<string>;
}

export interface CdnRuleOptionsCors {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnRuleOptionsEdgeCacheSettings {
    /**
     * Caching time for a response with specific codes. These settings have a higher priority than the value field. Response code ('304', '404' for example). Use 'any' to specify caching time for all response codes. Caching time in seconds ('0s', '600s' for example). Use '0s' to disable caching for a specific response code.
     */
    customValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
     */
    default?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * Caching time for a response with codes 200, 206, 301, 302. Responses with codes 4xx, 5xx will not be cached. Use '0s' disable to caching. Use custom_values field to specify a custom caching time for a response with specific codes.
     */
    value?: pulumi.Input<string>;
}

export interface CdnRuleOptionsGzipOn {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnRuleOptionsHostHeader {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface CdnRuleOptionsIgnoreQueryString {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnRuleOptionsQueryParamsBlacklist {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnRuleOptionsQueryParamsWhitelist {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnRuleOptionsRedirectHttpToHttps {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface CdnRuleOptionsRewrite {
    body: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    flag?: pulumi.Input<string>;
}

export interface CdnRuleOptionsSni {
    /**
     * Required to set custom hostname in case sni-type='custom'
     */
    customHostname?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * Available values 'dynamic' or 'custom'
     */
    sniType?: pulumi.Input<string>;
}

export interface CdnRuleOptionsStaticHeaders {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CdnRuleOptionsStaticRequestHeaders {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CdnRuleOptionsTlsVersions {
    enabled?: pulumi.Input<boolean>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CdnRuleOptionsWebp {
    enabled?: pulumi.Input<boolean>;
    jpgQuality: pulumi.Input<number>;
    pngLossless?: pulumi.Input<boolean>;
    pngQuality: pulumi.Input<number>;
}

export interface CdnRuleOptionsWebsockets {
    enabled?: pulumi.Input<boolean>;
    value: pulumi.Input<boolean>;
}

export interface DdosProtectionField {
    baseField: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    /**
     * Field description
     */
    description?: pulumi.Input<string>;
    fieldType?: pulumi.Input<string>;
    /**
     * Complex value. Only one of 'value' or 'field_value' must be specified.
     */
    fieldValue?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    required?: pulumi.Input<boolean>;
    /**
     * Json schema to validate field_values
     */
    validationSchema?: pulumi.Input<string>;
    /**
     * Basic type value. Only one of 'value' or 'field_value' must be specified.
     */
    value?: pulumi.Input<string>;
}

export interface DdosProtectionProtocol {
    port: pulumi.Input<string>;
    protocols: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DnsZoneRecordFilter {
    /**
     * A DNS Zone Record filter option that describe how many records will be percolated.
     */
    limit?: pulumi.Input<number>;
    /**
     * A DNS Zone Record filter option that describe possibility to return answers if no records were percolated through filter.
     */
    strict?: pulumi.Input<boolean>;
    /**
     * A DNS Zone Record filter option that describe a name of filter.
     */
    type: pulumi.Input<string>;
}

export interface DnsZoneRecordResourceRecord {
    /**
     * A content of DNS Zone Record resource. (TXT: 'anyString', MX: '50 mail.company.io.', CAA: '0 issue "company.org; account=12345"')
     */
    content: pulumi.Input<string>;
    /**
     * Manage of public appearing of DNS Zone Record resource.
     */
    enabled?: pulumi.Input<boolean>;
    meta?: pulumi.Input<inputs.DnsZoneRecordResourceRecordMeta>;
}

export interface DnsZoneRecordResourceRecordMeta {
    /**
     * An asn meta (e.g. 12345) of DNS Zone Record resource.
     */
    asns?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Continents meta (e.g. Asia) of DNS Zone Record resource.
     */
    continents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Countries meta (e.g. USA) of DNS Zone Record resource.
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fallback meta equals true marks records which are used as a default answer (when nothing was selected by specified meta fields).
     */
    default?: pulumi.Input<boolean>;
    /**
     * An ip meta (e.g. 127.0.0.0) of DNS Zone Record resource.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A latlong meta (e.g. 27.988056, 86.925278) of DNS Zone Record resource.
     */
    latlongs?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A notes meta (e.g. Miami DC) of DNS Zone Record resource.
     */
    notes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DnsZoneRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DnsZoneTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface FloatingipMetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface InstanceAddress {
    nets: pulumi.Input<pulumi.Input<inputs.InstanceAddressNet>[]>;
}

export interface InstanceAddressNet {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface InstanceConfiguration {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface InstanceInterface {
    existingFipId?: pulumi.Input<string>;
    fipSource?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    /**
     * required if type is 'subnet' or 'any_subnet'
     */
    networkId?: pulumi.Input<string>;
    /**
     * Order of attaching interface
     */
    order?: pulumi.Input<number>;
    /**
     * required if type is  'reserved_fixed_ip'
     */
    portId?: pulumi.Input<string>;
    /**
     * list of security group IDs
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * required if type is 'subnet'
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Available value is 'subnet', 'any_subnet', 'external', 'reserved_fixed_ip'
     */
    type?: pulumi.Input<string>;
}

export interface InstanceMetadata {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface InstanceSecurityGroup {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface InstanceVolume {
    attachmentTag?: pulumi.Input<string>;
    /**
     * If boot_index==0 volumes can not detached
     */
    bootIndex?: pulumi.Input<number>;
    deleteOnTermination?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    /**
     * Currently available only 'existing-volume' value
     */
    source: pulumi.Input<string>;
    typeName?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
}

export interface K8sPool {
    createdAt?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    /**
     * Available value is 'standard', 'ssd_hiiops', 'cold', 'ultra'.
     */
    dockerVolumeType?: pulumi.Input<string>;
    flavorId: pulumi.Input<string>;
    maxNodeCount: pulumi.Input<number>;
    minNodeCount: pulumi.Input<number>;
    name: pulumi.Input<string>;
    nodeCount: pulumi.Input<number>;
    stackId?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface K8sPoolTimeouts {
    create?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface K8sTimeouts {
    create?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LblistenerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LbmemberTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LbpoolHealthMonitor {
    delay: pulumi.Input<number>;
    expectedCodes?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    maxRetries: pulumi.Input<number>;
    maxRetriesDown?: pulumi.Input<number>;
    timeout: pulumi.Input<number>;
    /**
     * Available values is 'HTTP', 'HTTPS', 'PING', 'TCP', 'TLS-HELLO', 'UDP-CONNECT
     */
    type: pulumi.Input<string>;
    urlPath?: pulumi.Input<string>;
}

export interface LbpoolSessionPersistence {
    cookieName?: pulumi.Input<string>;
    persistenceGranularity?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface LbpoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LifecyclepolicySchedule {
    /**
     * Use for taking actions at specified moments of time. Exactly one of interval and cron blocks should be provided
     */
    cron?: pulumi.Input<inputs.LifecyclepolicyScheduleCron>;
    id?: pulumi.Input<string>;
    /**
     * Use for taking actions with equal time intervals between them. Exactly one of interval and cron blocks should be provided
     */
    interval?: pulumi.Input<inputs.LifecyclepolicyScheduleInterval>;
    /**
     * Maximum number of stored resources
     */
    maxQuantity: pulumi.Input<number>;
    /**
     * Used to name snapshots. {volume_id} is substituted with volume.id on creation
     */
    resourceNameTemplate?: pulumi.Input<string>;
    /**
     * If it is set, new resource will be deleted after time
     */
    retentionTime?: pulumi.Input<inputs.LifecyclepolicyScheduleRetentionTime>;
    type?: pulumi.Input<string>;
}

export interface LifecyclepolicyScheduleCron {
    /**
     * Either single asterisk or comma-separated list of integers (1-31)
     */
    day?: pulumi.Input<string>;
    /**
     * Either single asterisk or comma-separated list of integers (0-6)
     */
    dayOfWeek?: pulumi.Input<string>;
    /**
     * Either single asterisk or comma-separated list of integers (0-23)
     */
    hour?: pulumi.Input<string>;
    /**
     * Either single asterisk or comma-separated list of integers (0-59)
     */
    minute?: pulumi.Input<string>;
    /**
     * Either single asterisk or comma-separated list of integers (1-12)
     */
    month?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    /**
     * Either single asterisk or comma-separated list of integers (1-53)
     */
    week?: pulumi.Input<string>;
}

export interface LifecyclepolicyScheduleInterval {
    /**
     * Number of days to wait between actions
     */
    days?: pulumi.Input<number>;
    /**
     * Number of hours to wait between actions
     */
    hours?: pulumi.Input<number>;
    /**
     * Number of minutes to wait between actions
     */
    minutes?: pulumi.Input<number>;
    /**
     * Number of weeks to wait between actions
     */
    weeks?: pulumi.Input<number>;
}

export interface LifecyclepolicyScheduleRetentionTime {
    /**
     * Number of days to wait before deleting snapshot
     */
    days?: pulumi.Input<number>;
    /**
     * Number of hours to wait before deleting snapshot
     */
    hours?: pulumi.Input<number>;
    /**
     * Number of minutes to wait before deleting snapshot
     */
    minutes?: pulumi.Input<number>;
    /**
     * Number of weeks to wait before deleting snapshot
     */
    weeks?: pulumi.Input<number>;
}

export interface LifecyclepolicyVolume {
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface LoadbalancerListener {
    certificate?: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    insertXForwarded?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * Available values is 'HTTP' (currently work, other do not work on ed-8), 'HTTPS', 'TCP', 'UDP'
     */
    protocol: pulumi.Input<string>;
    protocolPort: pulumi.Input<number>;
    secretId?: pulumi.Input<string>;
    sniSecretIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LoadbalancerMetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface LoadbalancerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface Loadbalancerv2MetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface Loadbalancerv2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkMetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface ReservedfixedipAllowedAddressPair {
    ipAddress?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface RouterExternalGatewayInfo {
    enableSnat?: pulumi.Input<boolean>;
    externalFixedIps?: pulumi.Input<pulumi.Input<inputs.RouterExternalGatewayInfoExternalFixedIp>[]>;
    /**
     * Id of the external network
     */
    networkId?: pulumi.Input<string>;
    /**
     * Must be 'manual' or 'default'
     */
    type?: pulumi.Input<string>;
}

export interface RouterExternalGatewayInfoExternalFixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface RouterInterface {
    ipAddress?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    /**
     * Subnet for router interface must have a gateway IP
     */
    subnetId: pulumi.Input<string>;
    /**
     * must be 'subnet'
     */
    type: pulumi.Input<string>;
}

export interface RouterRoute {
    destination: pulumi.Input<string>;
    /**
     * IPv4 address to forward traffic to if it's destination IP matches 'destination' CIDR
     */
    nexthop: pulumi.Input<string>;
}

export interface SecuritygroupMetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface SecuritygroupSecurityGroupRule {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Available value is 'ingress', 'egress'
     */
    direction: pulumi.Input<string>;
    /**
     * Available value is 'IPv4', 'IPv6'
     */
    ethertype: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    /**
     * Available value is udp,tcp,any,icmp,ah,dccp,egp,esp,gre,igmp,ospf,pgm,rsvp,sctp,udplite,vrrp,51,50,112,0,4,ipip,ipencap
     */
    protocol: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

export interface ServergroupInstance {
    instanceId: pulumi.Input<string>;
    instanceName: pulumi.Input<string>;
}

export interface SubnetHostRoute {
    destination: pulumi.Input<string>;
    /**
     * IPv4 address to forward traffic to if it's destination IP matches 'destination' CIDR
     */
    nexthop: pulumi.Input<string>;
}

export interface SubnetMetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface VolumeMetadataReadOnly {
    key: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}
