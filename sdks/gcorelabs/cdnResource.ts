// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnResource extends pulumi.CustomResource {
    /**
     * Get an existing CdnResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnResourceState, opts?: pulumi.CustomResourceOptions): CdnResource {
        return new CdnResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/cdnResource:CdnResource';

    /**
     * Returns true if the given object is an instance of CdnResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnResource.__pulumiType;
    }

    /**
     * The setting allows to enable or disable a CDN Resource
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * A CNAME that will be used to deliver content though a CDN. If you update this field new resource will be created.
     */
    public readonly cname!: pulumi.Output<string>;
    /**
     * Custom client description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Generate LE certificate.
     */
    public readonly issueLeCert!: pulumi.Output<boolean>;
    /**
     * Each option in CDN resource settings. Each option added to CDN resource settings should have the following mandatory
     * request fields: enabled, value.
     */
    public readonly options!: pulumi.Output<outputs.CdnResourceOptions | undefined>;
    /**
     * A domain name or IP of your origin source. Specify a port if custom. You can use either 'origin' parameter or
     * 'originGroup' in the resource definition.
     */
    public readonly origin!: pulumi.Output<string>;
    /**
     * ID of the Origins Group. Use one of your Origins Group or create a new one. You can use either 'origin' parameter or
     * 'originGroup' in the resource definition.
     */
    public readonly originGroup!: pulumi.Output<number>;
    /**
     * This option defines the protocol that will be used by CDN servers to request content from an origin source. If not
     * specified, we will use HTTP to connect to an origin server. Possible values are: HTTPS, HTTP, MATCH.
     */
    public readonly originProtocol!: pulumi.Output<string>;
    /**
     * List of additional CNAMEs.
     */
    public readonly secondaryHostnames!: pulumi.Output<string[]>;
    /**
     * generate LE certificate automatically.
     */
    public readonly sslAutomated!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the SSL Certificate ID which should be used for the CDN Resource.
     */
    public readonly sslData!: pulumi.Output<number | undefined>;
    /**
     * Use HTTPS protocol for content delivery.
     */
    public readonly sslEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Status of a CDN resource content availability. Possible values are: Active, Suspended, Processed.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a CdnResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnResourceArgs | CdnResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnResourceState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["issueLeCert"] = state ? state.issueLeCert : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["originGroup"] = state ? state.originGroup : undefined;
            resourceInputs["originProtocol"] = state ? state.originProtocol : undefined;
            resourceInputs["secondaryHostnames"] = state ? state.secondaryHostnames : undefined;
            resourceInputs["sslAutomated"] = state ? state.sslAutomated : undefined;
            resourceInputs["sslData"] = state ? state.sslData : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as CdnResourceArgs | undefined;
            if ((!args || args.cname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cname'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["cname"] = args ? args.cname : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["issueLeCert"] = args ? args.issueLeCert : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["originGroup"] = args ? args.originGroup : undefined;
            resourceInputs["originProtocol"] = args ? args.originProtocol : undefined;
            resourceInputs["secondaryHostnames"] = args ? args.secondaryHostnames : undefined;
            resourceInputs["sslAutomated"] = args ? args.sslAutomated : undefined;
            resourceInputs["sslData"] = args ? args.sslData : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnResource resources.
 */
export interface CdnResourceState {
    /**
     * The setting allows to enable or disable a CDN Resource
     */
    active?: pulumi.Input<boolean>;
    /**
     * A CNAME that will be used to deliver content though a CDN. If you update this field new resource will be created.
     */
    cname?: pulumi.Input<string>;
    /**
     * Custom client description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Generate LE certificate.
     */
    issueLeCert?: pulumi.Input<boolean>;
    /**
     * Each option in CDN resource settings. Each option added to CDN resource settings should have the following mandatory
     * request fields: enabled, value.
     */
    options?: pulumi.Input<inputs.CdnResourceOptions>;
    /**
     * A domain name or IP of your origin source. Specify a port if custom. You can use either 'origin' parameter or
     * 'originGroup' in the resource definition.
     */
    origin?: pulumi.Input<string>;
    /**
     * ID of the Origins Group. Use one of your Origins Group or create a new one. You can use either 'origin' parameter or
     * 'originGroup' in the resource definition.
     */
    originGroup?: pulumi.Input<number>;
    /**
     * This option defines the protocol that will be used by CDN servers to request content from an origin source. If not
     * specified, we will use HTTP to connect to an origin server. Possible values are: HTTPS, HTTP, MATCH.
     */
    originProtocol?: pulumi.Input<string>;
    /**
     * List of additional CNAMEs.
     */
    secondaryHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * generate LE certificate automatically.
     */
    sslAutomated?: pulumi.Input<boolean>;
    /**
     * Specify the SSL Certificate ID which should be used for the CDN Resource.
     */
    sslData?: pulumi.Input<number>;
    /**
     * Use HTTPS protocol for content delivery.
     */
    sslEnabled?: pulumi.Input<boolean>;
    /**
     * Status of a CDN resource content availability. Possible values are: Active, Suspended, Processed.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CdnResource resource.
 */
export interface CdnResourceArgs {
    /**
     * The setting allows to enable or disable a CDN Resource
     */
    active?: pulumi.Input<boolean>;
    /**
     * A CNAME that will be used to deliver content though a CDN. If you update this field new resource will be created.
     */
    cname: pulumi.Input<string>;
    /**
     * Custom client description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Generate LE certificate.
     */
    issueLeCert?: pulumi.Input<boolean>;
    /**
     * Each option in CDN resource settings. Each option added to CDN resource settings should have the following mandatory
     * request fields: enabled, value.
     */
    options?: pulumi.Input<inputs.CdnResourceOptions>;
    /**
     * A domain name or IP of your origin source. Specify a port if custom. You can use either 'origin' parameter or
     * 'originGroup' in the resource definition.
     */
    origin?: pulumi.Input<string>;
    /**
     * ID of the Origins Group. Use one of your Origins Group or create a new one. You can use either 'origin' parameter or
     * 'originGroup' in the resource definition.
     */
    originGroup?: pulumi.Input<number>;
    /**
     * This option defines the protocol that will be used by CDN servers to request content from an origin source. If not
     * specified, we will use HTTP to connect to an origin server. Possible values are: HTTPS, HTTP, MATCH.
     */
    originProtocol?: pulumi.Input<string>;
    /**
     * List of additional CNAMEs.
     */
    secondaryHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * generate LE certificate automatically.
     */
    sslAutomated?: pulumi.Input<boolean>;
    /**
     * Specify the SSL Certificate ID which should be used for the CDN Resource.
     */
    sslData?: pulumi.Input<number>;
    /**
     * Use HTTPS protocol for content delivery.
     */
    sslEnabled?: pulumi.Input<boolean>;
}
