// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lbpool extends pulumi.CustomResource {
    /**
     * Get an existing Lbpool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbpoolState, opts?: pulumi.CustomResourceOptions): Lbpool {
        return new Lbpool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/lbpool:Lbpool';

    /**
     * Returns true if the given object is an instance of Lbpool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lbpool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lbpool.__pulumiType;
    }

    public readonly healthMonitor!: pulumi.Output<outputs.LbpoolHealthMonitor | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Available values is 'ROUND_ROBIN', 'LEAST_CONNECTIONS', 'SOURCE_IP', 'SOURCE_IP_PORT'
     */
    public readonly lbAlgorithm!: pulumi.Output<string>;
    public readonly listenerId!: pulumi.Output<string | undefined>;
    public readonly loadbalancerId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * Available values is 'HTTP' (currently work, other do not work on ed-8), 'HTTPS', 'TCP', 'UDP'
     */
    public readonly protocol!: pulumi.Output<string>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public readonly sessionPersistence!: pulumi.Output<outputs.LbpoolSessionPersistence | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LbpoolTimeouts | undefined>;

    /**
     * Create a Lbpool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbpoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbpoolArgs | LbpoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbpoolState | undefined;
            resourceInputs["healthMonitor"] = state ? state.healthMonitor : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["lbAlgorithm"] = state ? state.lbAlgorithm : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["sessionPersistence"] = state ? state.sessionPersistence : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbpoolArgs | undefined;
            if ((!args || args.lbAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbAlgorithm'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["healthMonitor"] = args ? args.healthMonitor : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["lbAlgorithm"] = args ? args.lbAlgorithm : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["sessionPersistence"] = args ? args.sessionPersistence : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lbpool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lbpool resources.
 */
export interface LbpoolState {
    healthMonitor?: pulumi.Input<inputs.LbpoolHealthMonitor>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Available values is 'ROUND_ROBIN', 'LEAST_CONNECTIONS', 'SOURCE_IP', 'SOURCE_IP_PORT'
     */
    lbAlgorithm?: pulumi.Input<string>;
    listenerId?: pulumi.Input<string>;
    loadbalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    /**
     * Available values is 'HTTP' (currently work, other do not work on ed-8), 'HTTPS', 'TCP', 'UDP'
     */
    protocol?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    sessionPersistence?: pulumi.Input<inputs.LbpoolSessionPersistence>;
    timeouts?: pulumi.Input<inputs.LbpoolTimeouts>;
}

/**
 * The set of arguments for constructing a Lbpool resource.
 */
export interface LbpoolArgs {
    healthMonitor?: pulumi.Input<inputs.LbpoolHealthMonitor>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Available values is 'ROUND_ROBIN', 'LEAST_CONNECTIONS', 'SOURCE_IP', 'SOURCE_IP_PORT'
     */
    lbAlgorithm: pulumi.Input<string>;
    listenerId?: pulumi.Input<string>;
    loadbalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    /**
     * Available values is 'HTTP' (currently work, other do not work on ed-8), 'HTTPS', 'TCP', 'UDP'
     */
    protocol: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    sessionPersistence?: pulumi.Input<inputs.LbpoolSessionPersistence>;
    timeouts?: pulumi.Input<inputs.LbpoolTimeouts>;
}
