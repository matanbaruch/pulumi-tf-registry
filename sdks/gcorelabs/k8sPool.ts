// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sPool extends pulumi.CustomResource {
    /**
     * Get an existing K8sPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sPoolState, opts?: pulumi.CustomResourceOptions): K8sPool {
        return new K8sPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/k8sPool:K8sPool';

    /**
     * Returns true if the given object is an instance of K8sPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sPool.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dockerVolumeSize!: pulumi.Output<number | undefined>;
    /**
     * Available value is 'standard', 'ssd_hiiops', 'cold', 'ultra'.
     */
    public readonly dockerVolumeType!: pulumi.Output<string>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly maxNodeCount!: pulumi.Output<number>;
    public readonly minNodeCount!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly stackId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.K8sPoolTimeouts | undefined>;

    /**
     * Create a K8sPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sPoolArgs | K8sPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sPoolState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dockerVolumeSize"] = state ? state.dockerVolumeSize : undefined;
            resourceInputs["dockerVolumeType"] = state ? state.dockerVolumeType : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as K8sPoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.maxNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxNodeCount'");
            }
            if ((!args || args.minNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minNodeCount'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dockerVolumeSize"] = args ? args.dockerVolumeSize : undefined;
            resourceInputs["dockerVolumeType"] = args ? args.dockerVolumeType : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["stackId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8sPool resources.
 */
export interface K8sPoolState {
    clusterId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    /**
     * Available value is 'standard', 'ssd_hiiops', 'cold', 'ultra'.
     */
    dockerVolumeType?: pulumi.Input<string>;
    flavorId?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    maxNodeCount?: pulumi.Input<number>;
    minNodeCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    stackId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sPoolTimeouts>;
}

/**
 * The set of arguments for constructing a K8sPool resource.
 */
export interface K8sPoolArgs {
    clusterId: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    /**
     * Available value is 'standard', 'ssd_hiiops', 'cold', 'ultra'.
     */
    dockerVolumeType?: pulumi.Input<string>;
    flavorId: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    maxNodeCount: pulumi.Input<number>;
    minNodeCount: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeCount: pulumi.Input<number>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sPoolTimeouts>;
}
