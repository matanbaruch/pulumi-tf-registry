// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CdnSslcert extends pulumi.CustomResource {
    /**
     * Get an existing CdnSslcert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnSslcertState, opts?: pulumi.CustomResourceOptions): CdnSslcert {
        return new CdnSslcert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/cdnSslcert:CdnSslcert';

    /**
     * Returns true if the given object is an instance of CdnSslcert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnSslcert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnSslcert.__pulumiType;
    }

    /**
     * The way SSL certificate was issued.
     */
    public /*out*/ readonly automated!: pulumi.Output<boolean>;
    /**
     * The public part of the SSL certificate. All chain of the SSL certificate should be added.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * It shows if the SSL certificate is used by a CDN resource.
     */
    public /*out*/ readonly hasRelatedResources!: pulumi.Output<boolean>;
    /**
     * Name of the SSL certificate. Must be unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The private key of the SSL certificate.
     */
    public readonly privateKey!: pulumi.Output<string>;

    /**
     * Create a CdnSslcert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnSslcertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnSslcertArgs | CdnSslcertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnSslcertState | undefined;
            resourceInputs["automated"] = state ? state.automated : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["hasRelatedResources"] = state ? state.hasRelatedResources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
        } else {
            const args = argsOrState as CdnSslcertArgs | undefined;
            if ((!args || args.cert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cert'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["cert"] = args?.cert ? pulumi.secret(args.cert) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["automated"] = undefined /*out*/;
            resourceInputs["hasRelatedResources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cert", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CdnSslcert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnSslcert resources.
 */
export interface CdnSslcertState {
    /**
     * The way SSL certificate was issued.
     */
    automated?: pulumi.Input<boolean>;
    /**
     * The public part of the SSL certificate. All chain of the SSL certificate should be added.
     */
    cert?: pulumi.Input<string>;
    /**
     * It shows if the SSL certificate is used by a CDN resource.
     */
    hasRelatedResources?: pulumi.Input<boolean>;
    /**
     * Name of the SSL certificate. Must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The private key of the SSL certificate.
     */
    privateKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CdnSslcert resource.
 */
export interface CdnSslcertArgs {
    /**
     * The public part of the SSL certificate. All chain of the SSL certificate should be added.
     */
    cert: pulumi.Input<string>;
    /**
     * Name of the SSL certificate. Must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The private key of the SSL certificate.
     */
    privateKey: pulumi.Input<string>;
}
