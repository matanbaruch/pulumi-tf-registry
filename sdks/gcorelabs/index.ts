// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BaremetalArgs, BaremetalState } from "./baremetal";
export type Baremetal = import("./baremetal").Baremetal;
export const Baremetal: typeof import("./baremetal").Baremetal = null as any;
utilities.lazyLoad(exports, ["Baremetal"], () => require("./baremetal"));

export { CdnOrigingroupArgs, CdnOrigingroupState } from "./cdnOrigingroup";
export type CdnOrigingroup = import("./cdnOrigingroup").CdnOrigingroup;
export const CdnOrigingroup: typeof import("./cdnOrigingroup").CdnOrigingroup = null as any;
utilities.lazyLoad(exports, ["CdnOrigingroup"], () => require("./cdnOrigingroup"));

export { CdnResourceArgs, CdnResourceState } from "./cdnResource";
export type CdnResource = import("./cdnResource").CdnResource;
export const CdnResource: typeof import("./cdnResource").CdnResource = null as any;
utilities.lazyLoad(exports, ["CdnResource"], () => require("./cdnResource"));

export { CdnRuleArgs, CdnRuleState } from "./cdnRule";
export type CdnRule = import("./cdnRule").CdnRule;
export const CdnRule: typeof import("./cdnRule").CdnRule = null as any;
utilities.lazyLoad(exports, ["CdnRule"], () => require("./cdnRule"));

export { CdnSslcertArgs, CdnSslcertState } from "./cdnSslcert";
export type CdnSslcert = import("./cdnSslcert").CdnSslcert;
export const CdnSslcert: typeof import("./cdnSslcert").CdnSslcert = null as any;
utilities.lazyLoad(exports, ["CdnSslcert"], () => require("./cdnSslcert"));

export { DdosProtectionArgs, DdosProtectionState } from "./ddosProtection";
export type DdosProtection = import("./ddosProtection").DdosProtection;
export const DdosProtection: typeof import("./ddosProtection").DdosProtection = null as any;
utilities.lazyLoad(exports, ["DdosProtection"], () => require("./ddosProtection"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { DnsZoneRecordArgs, DnsZoneRecordState } from "./dnsZoneRecord";
export type DnsZoneRecord = import("./dnsZoneRecord").DnsZoneRecord;
export const DnsZoneRecord: typeof import("./dnsZoneRecord").DnsZoneRecord = null as any;
utilities.lazyLoad(exports, ["DnsZoneRecord"], () => require("./dnsZoneRecord"));

export { FaasFunctionArgs, FaasFunctionState } from "./faasFunction";
export type FaasFunction = import("./faasFunction").FaasFunction;
export const FaasFunction: typeof import("./faasFunction").FaasFunction = null as any;
utilities.lazyLoad(exports, ["FaasFunction"], () => require("./faasFunction"));

export { FaasNamespaceArgs, FaasNamespaceState } from "./faasNamespace";
export type FaasNamespace = import("./faasNamespace").FaasNamespace;
export const FaasNamespace: typeof import("./faasNamespace").FaasNamespace = null as any;
utilities.lazyLoad(exports, ["FaasNamespace"], () => require("./faasNamespace"));

export { FloatingipArgs, FloatingipState } from "./floatingip";
export type Floatingip = import("./floatingip").Floatingip;
export const Floatingip: typeof import("./floatingip").Floatingip = null as any;
utilities.lazyLoad(exports, ["Floatingip"], () => require("./floatingip"));

export { GetDdosProfileTemplateArgs, GetDdosProfileTemplateResult, GetDdosProfileTemplateOutputArgs } from "./getDdosProfileTemplate";
export const getDdosProfileTemplate: typeof import("./getDdosProfileTemplate").getDdosProfileTemplate = null as any;
export const getDdosProfileTemplateOutput: typeof import("./getDdosProfileTemplate").getDdosProfileTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getDdosProfileTemplate","getDdosProfileTemplateOutput"], () => require("./getDdosProfileTemplate"));

export { GetFaasFunctionArgs, GetFaasFunctionResult, GetFaasFunctionOutputArgs } from "./getFaasFunction";
export const getFaasFunction: typeof import("./getFaasFunction").getFaasFunction = null as any;
export const getFaasFunctionOutput: typeof import("./getFaasFunction").getFaasFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFaasFunction","getFaasFunctionOutput"], () => require("./getFaasFunction"));

export { GetFaasNamespaceArgs, GetFaasNamespaceResult, GetFaasNamespaceOutputArgs } from "./getFaasNamespace";
export const getFaasNamespace: typeof import("./getFaasNamespace").getFaasNamespace = null as any;
export const getFaasNamespaceOutput: typeof import("./getFaasNamespace").getFaasNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getFaasNamespace","getFaasNamespaceOutput"], () => require("./getFaasNamespace"));

export { GetFloatingipArgs, GetFloatingipResult, GetFloatingipOutputArgs } from "./getFloatingip";
export const getFloatingip: typeof import("./getFloatingip").getFloatingip = null as any;
export const getFloatingipOutput: typeof import("./getFloatingip").getFloatingipOutput = null as any;
utilities.lazyLoad(exports, ["getFloatingip","getFloatingipOutput"], () => require("./getFloatingip"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetK8sArgs, GetK8sResult, GetK8sOutputArgs } from "./getK8s";
export const getK8s: typeof import("./getK8s").getK8s = null as any;
export const getK8sOutput: typeof import("./getK8s").getK8sOutput = null as any;
utilities.lazyLoad(exports, ["getK8s","getK8sOutput"], () => require("./getK8s"));

export { GetK8sPoolArgs, GetK8sPoolResult, GetK8sPoolOutputArgs } from "./getK8sPool";
export const getK8sPool: typeof import("./getK8sPool").getK8sPool = null as any;
export const getK8sPoolOutput: typeof import("./getK8sPool").getK8sPoolOutput = null as any;
utilities.lazyLoad(exports, ["getK8sPool","getK8sPoolOutput"], () => require("./getK8sPool"));

export { GetLaasHostsArgs, GetLaasHostsResult, GetLaasHostsOutputArgs } from "./getLaasHosts";
export const getLaasHosts: typeof import("./getLaasHosts").getLaasHosts = null as any;
export const getLaasHostsOutput: typeof import("./getLaasHosts").getLaasHostsOutput = null as any;
utilities.lazyLoad(exports, ["getLaasHosts","getLaasHostsOutput"], () => require("./getLaasHosts"));

export { GetLaasStatusArgs, GetLaasStatusResult, GetLaasStatusOutputArgs } from "./getLaasStatus";
export const getLaasStatus: typeof import("./getLaasStatus").getLaasStatus = null as any;
export const getLaasStatusOutput: typeof import("./getLaasStatus").getLaasStatusOutput = null as any;
utilities.lazyLoad(exports, ["getLaasStatus","getLaasStatusOutput"], () => require("./getLaasStatus"));

export { GetLblistenerArgs, GetLblistenerResult, GetLblistenerOutputArgs } from "./getLblistener";
export const getLblistener: typeof import("./getLblistener").getLblistener = null as any;
export const getLblistenerOutput: typeof import("./getLblistener").getLblistenerOutput = null as any;
utilities.lazyLoad(exports, ["getLblistener","getLblistenerOutput"], () => require("./getLblistener"));

export { GetLbpoolArgs, GetLbpoolResult, GetLbpoolOutputArgs } from "./getLbpool";
export const getLbpool: typeof import("./getLbpool").getLbpool = null as any;
export const getLbpoolOutput: typeof import("./getLbpool").getLbpoolOutput = null as any;
utilities.lazyLoad(exports, ["getLbpool","getLbpoolOutput"], () => require("./getLbpool"));

export { GetLoadbalancerArgs, GetLoadbalancerResult, GetLoadbalancerOutputArgs } from "./getLoadbalancer";
export const getLoadbalancer: typeof import("./getLoadbalancer").getLoadbalancer = null as any;
export const getLoadbalancerOutput: typeof import("./getLoadbalancer").getLoadbalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancer","getLoadbalancerOutput"], () => require("./getLoadbalancer"));

export { GetLoadbalancerv2Args, GetLoadbalancerv2Result, GetLoadbalancerv2OutputArgs } from "./getLoadbalancerv2";
export const getLoadbalancerv2: typeof import("./getLoadbalancerv2").getLoadbalancerv2 = null as any;
export const getLoadbalancerv2Output: typeof import("./getLoadbalancerv2").getLoadbalancerv2Output = null as any;
utilities.lazyLoad(exports, ["getLoadbalancerv2","getLoadbalancerv2Output"], () => require("./getLoadbalancerv2"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetReservedfixedipArgs, GetReservedfixedipResult, GetReservedfixedipOutputArgs } from "./getReservedfixedip";
export const getReservedfixedip: typeof import("./getReservedfixedip").getReservedfixedip = null as any;
export const getReservedfixedipOutput: typeof import("./getReservedfixedip").getReservedfixedipOutput = null as any;
utilities.lazyLoad(exports, ["getReservedfixedip","getReservedfixedipOutput"], () => require("./getReservedfixedip"));

export { GetRouterArgs, GetRouterResult, GetRouterOutputArgs } from "./getRouter";
export const getRouter: typeof import("./getRouter").getRouter = null as any;
export const getRouterOutput: typeof import("./getRouter").getRouterOutput = null as any;
utilities.lazyLoad(exports, ["getRouter","getRouterOutput"], () => require("./getRouter"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecuritygroupArgs, GetSecuritygroupResult, GetSecuritygroupOutputArgs } from "./getSecuritygroup";
export const getSecuritygroup: typeof import("./getSecuritygroup").getSecuritygroup = null as any;
export const getSecuritygroupOutput: typeof import("./getSecuritygroup").getSecuritygroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritygroup","getSecuritygroupOutput"], () => require("./getSecuritygroup"));

export { GetServergroupArgs, GetServergroupResult, GetServergroupOutputArgs } from "./getServergroup";
export const getServergroup: typeof import("./getServergroup").getServergroup = null as any;
export const getServergroupOutput: typeof import("./getServergroup").getServergroupOutput = null as any;
utilities.lazyLoad(exports, ["getServergroup","getServergroupOutput"], () => require("./getServergroup"));

export { GetStorageS3Args, GetStorageS3Result, GetStorageS3OutputArgs } from "./getStorageS3";
export const getStorageS3: typeof import("./getStorageS3").getStorageS3 = null as any;
export const getStorageS3Output: typeof import("./getStorageS3").getStorageS3Output = null as any;
utilities.lazyLoad(exports, ["getStorageS3","getStorageS3Output"], () => require("./getStorageS3"));

export { GetStorageS3BucketArgs, GetStorageS3BucketResult, GetStorageS3BucketOutputArgs } from "./getStorageS3Bucket";
export const getStorageS3Bucket: typeof import("./getStorageS3Bucket").getStorageS3Bucket = null as any;
export const getStorageS3BucketOutput: typeof import("./getStorageS3Bucket").getStorageS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getStorageS3Bucket","getStorageS3BucketOutput"], () => require("./getStorageS3Bucket"));

export { GetStorageSftpArgs, GetStorageSftpResult, GetStorageSftpOutputArgs } from "./getStorageSftp";
export const getStorageSftp: typeof import("./getStorageSftp").getStorageSftp = null as any;
export const getStorageSftpOutput: typeof import("./getStorageSftp").getStorageSftpOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSftp","getStorageSftpOutput"], () => require("./getStorageSftp"));

export { GetStorageSftpKeyArgs, GetStorageSftpKeyResult, GetStorageSftpKeyOutputArgs } from "./getStorageSftpKey";
export const getStorageSftpKey: typeof import("./getStorageSftpKey").getStorageSftpKey = null as any;
export const getStorageSftpKeyOutput: typeof import("./getStorageSftpKey").getStorageSftpKeyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSftpKey","getStorageSftpKeyOutput"], () => require("./getStorageSftpKey"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { K8sArgs, K8sState } from "./k8s";
export type K8s = import("./k8s").K8s;
export const K8s: typeof import("./k8s").K8s = null as any;
utilities.lazyLoad(exports, ["K8s"], () => require("./k8s"));

export { K8sPoolArgs, K8sPoolState } from "./k8sPool";
export type K8sPool = import("./k8sPool").K8sPool;
export const K8sPool: typeof import("./k8sPool").K8sPool = null as any;
utilities.lazyLoad(exports, ["K8sPool"], () => require("./k8sPool"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));

export { LaasTopicArgs, LaasTopicState } from "./laasTopic";
export type LaasTopic = import("./laasTopic").LaasTopic;
export const LaasTopic: typeof import("./laasTopic").LaasTopic = null as any;
utilities.lazyLoad(exports, ["LaasTopic"], () => require("./laasTopic"));

export { LblistenerArgs, LblistenerState } from "./lblistener";
export type Lblistener = import("./lblistener").Lblistener;
export const Lblistener: typeof import("./lblistener").Lblistener = null as any;
utilities.lazyLoad(exports, ["Lblistener"], () => require("./lblistener"));

export { LbmemberArgs, LbmemberState } from "./lbmember";
export type Lbmember = import("./lbmember").Lbmember;
export const Lbmember: typeof import("./lbmember").Lbmember = null as any;
utilities.lazyLoad(exports, ["Lbmember"], () => require("./lbmember"));

export { LbpoolArgs, LbpoolState } from "./lbpool";
export type Lbpool = import("./lbpool").Lbpool;
export const Lbpool: typeof import("./lbpool").Lbpool = null as any;
utilities.lazyLoad(exports, ["Lbpool"], () => require("./lbpool"));

export { LifecyclepolicyArgs, LifecyclepolicyState } from "./lifecyclepolicy";
export type Lifecyclepolicy = import("./lifecyclepolicy").Lifecyclepolicy;
export const Lifecyclepolicy: typeof import("./lifecyclepolicy").Lifecyclepolicy = null as any;
utilities.lazyLoad(exports, ["Lifecyclepolicy"], () => require("./lifecyclepolicy"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { Loadbalancerv2Args, Loadbalancerv2State } from "./loadbalancerv2";
export type Loadbalancerv2 = import("./loadbalancerv2").Loadbalancerv2;
export const Loadbalancerv2: typeof import("./loadbalancerv2").Loadbalancerv2 = null as any;
utilities.lazyLoad(exports, ["Loadbalancerv2"], () => require("./loadbalancerv2"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReservedfixedipArgs, ReservedfixedipState } from "./reservedfixedip";
export type Reservedfixedip = import("./reservedfixedip").Reservedfixedip;
export const Reservedfixedip: typeof import("./reservedfixedip").Reservedfixedip = null as any;
utilities.lazyLoad(exports, ["Reservedfixedip"], () => require("./reservedfixedip"));

export { RouterArgs, RouterState } from "./router";
export type Router = import("./router").Router;
export const Router: typeof import("./router").Router = null as any;
utilities.lazyLoad(exports, ["Router"], () => require("./router"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecuritygroupArgs, SecuritygroupState } from "./securitygroup";
export type Securitygroup = import("./securitygroup").Securitygroup;
export const Securitygroup: typeof import("./securitygroup").Securitygroup = null as any;
utilities.lazyLoad(exports, ["Securitygroup"], () => require("./securitygroup"));

export { ServergroupArgs, ServergroupState } from "./servergroup";
export type Servergroup = import("./servergroup").Servergroup;
export const Servergroup: typeof import("./servergroup").Servergroup = null as any;
utilities.lazyLoad(exports, ["Servergroup"], () => require("./servergroup"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { StorageS3Args, StorageS3State } from "./storageS3";
export type StorageS3 = import("./storageS3").StorageS3;
export const StorageS3: typeof import("./storageS3").StorageS3 = null as any;
utilities.lazyLoad(exports, ["StorageS3"], () => require("./storageS3"));

export { StorageS3BucketArgs, StorageS3BucketState } from "./storageS3Bucket";
export type StorageS3Bucket = import("./storageS3Bucket").StorageS3Bucket;
export const StorageS3Bucket: typeof import("./storageS3Bucket").StorageS3Bucket = null as any;
utilities.lazyLoad(exports, ["StorageS3Bucket"], () => require("./storageS3Bucket"));

export { StorageSftpArgs, StorageSftpState } from "./storageSftp";
export type StorageSftp = import("./storageSftp").StorageSftp;
export const StorageSftp: typeof import("./storageSftp").StorageSftp = null as any;
utilities.lazyLoad(exports, ["StorageSftp"], () => require("./storageSftp"));

export { StorageSftpKeyArgs, StorageSftpKeyState } from "./storageSftpKey";
export type StorageSftpKey = import("./storageSftpKey").StorageSftpKey;
export const StorageSftpKey: typeof import("./storageSftpKey").StorageSftpKey = null as any;
utilities.lazyLoad(exports, ["StorageSftpKey"], () => require("./storageSftpKey"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gcorelabs:index/baremetal:Baremetal":
                return new Baremetal(name, <any>undefined, { urn })
            case "gcorelabs:index/cdnOrigingroup:CdnOrigingroup":
                return new CdnOrigingroup(name, <any>undefined, { urn })
            case "gcorelabs:index/cdnResource:CdnResource":
                return new CdnResource(name, <any>undefined, { urn })
            case "gcorelabs:index/cdnRule:CdnRule":
                return new CdnRule(name, <any>undefined, { urn })
            case "gcorelabs:index/cdnSslcert:CdnSslcert":
                return new CdnSslcert(name, <any>undefined, { urn })
            case "gcorelabs:index/ddosProtection:DdosProtection":
                return new DdosProtection(name, <any>undefined, { urn })
            case "gcorelabs:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "gcorelabs:index/dnsZoneRecord:DnsZoneRecord":
                return new DnsZoneRecord(name, <any>undefined, { urn })
            case "gcorelabs:index/faasFunction:FaasFunction":
                return new FaasFunction(name, <any>undefined, { urn })
            case "gcorelabs:index/faasNamespace:FaasNamespace":
                return new FaasNamespace(name, <any>undefined, { urn })
            case "gcorelabs:index/floatingip:Floatingip":
                return new Floatingip(name, <any>undefined, { urn })
            case "gcorelabs:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "gcorelabs:index/k8s:K8s":
                return new K8s(name, <any>undefined, { urn })
            case "gcorelabs:index/k8sPool:K8sPool":
                return new K8sPool(name, <any>undefined, { urn })
            case "gcorelabs:index/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "gcorelabs:index/laasTopic:LaasTopic":
                return new LaasTopic(name, <any>undefined, { urn })
            case "gcorelabs:index/lblistener:Lblistener":
                return new Lblistener(name, <any>undefined, { urn })
            case "gcorelabs:index/lbmember:Lbmember":
                return new Lbmember(name, <any>undefined, { urn })
            case "gcorelabs:index/lbpool:Lbpool":
                return new Lbpool(name, <any>undefined, { urn })
            case "gcorelabs:index/lifecyclepolicy:Lifecyclepolicy":
                return new Lifecyclepolicy(name, <any>undefined, { urn })
            case "gcorelabs:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "gcorelabs:index/loadbalancerv2:Loadbalancerv2":
                return new Loadbalancerv2(name, <any>undefined, { urn })
            case "gcorelabs:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "gcorelabs:index/reservedfixedip:Reservedfixedip":
                return new Reservedfixedip(name, <any>undefined, { urn })
            case "gcorelabs:index/router:Router":
                return new Router(name, <any>undefined, { urn })
            case "gcorelabs:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "gcorelabs:index/securitygroup:Securitygroup":
                return new Securitygroup(name, <any>undefined, { urn })
            case "gcorelabs:index/servergroup:Servergroup":
                return new Servergroup(name, <any>undefined, { urn })
            case "gcorelabs:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "gcorelabs:index/storageS3:StorageS3":
                return new StorageS3(name, <any>undefined, { urn })
            case "gcorelabs:index/storageS3Bucket:StorageS3Bucket":
                return new StorageS3Bucket(name, <any>undefined, { urn })
            case "gcorelabs:index/storageSftp:StorageSftp":
                return new StorageSftp(name, <any>undefined, { urn })
            case "gcorelabs:index/storageSftpKey:StorageSftpKey":
                return new StorageSftpKey(name, <any>undefined, { urn })
            case "gcorelabs:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "gcorelabs:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcorelabs", "index/baremetal", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/cdnOrigingroup", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/cdnResource", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/cdnRule", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/cdnSslcert", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/ddosProtection", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/dnsZoneRecord", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/faasFunction", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/faasNamespace", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/floatingip", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/instance", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/k8s", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/k8sPool", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/keypair", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/laasTopic", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/lblistener", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/lbmember", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/lbpool", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/lifecyclepolicy", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/loadbalancerv2", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/network", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/reservedfixedip", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/router", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/secret", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/securitygroup", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/servergroup", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/storageS3", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/storageS3Bucket", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/storageSftp", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/storageSftpKey", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/subnet", _module)
pulumi.runtime.registerResourceModule("gcorelabs", "index/volume", _module)
pulumi.runtime.registerResourcePackage("gcorelabs", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gcorelabs") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
