// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StorageSftp extends pulumi.CustomResource {
    /**
     * Get an existing StorageSftp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageSftpState, opts?: pulumi.CustomResourceOptions): StorageSftp {
        return new StorageSftp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/storageSftp:StorageSftp';

    /**
     * Returns true if the given object is an instance of StorageSftp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageSftp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageSftp.__pulumiType;
    }

    /**
     * An client id of new storage resource.
     */
    public readonly clientId!: pulumi.Output<number>;
    /**
     * A http sftp entry point for new storage resource.
     */
    public readonly generatedHttpEndpoint!: pulumi.Output<string>;
    /**
     * An auto generated sftp password for new storage resource.
     */
    public readonly generatedPassword!: pulumi.Output<boolean | undefined>;
    /**
     * A ssh sftp entry point for new storage resource.
     */
    public readonly generatedSftpEndpoint!: pulumi.Output<string>;
    /**
     * A expires date of storage resource.
     */
    public readonly httpExpiresHeaderValue!: pulumi.Output<string | undefined>;
    /**
     * An alias of storage resource.
     */
    public readonly httpServernameAlias!: pulumi.Output<string | undefined>;
    /**
     * A location of new storage resource. One of (ams, sin, fra, mia)
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * A name of new storage resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A sftp password for new storage resource.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * An ssh keys IDs to link with new sftp storage resource only. https://storage.gcorelabs.com/ssh-key/list
     */
    public readonly sshKeyIds!: pulumi.Output<number[] | undefined>;
    /**
     * An id of new storage resource.
     */
    public readonly storageId!: pulumi.Output<number>;
    /**
     * A temporary flag. An internal cheat, to skip update ssh keys. Skip it.
     */
    public readonly updateAfterCreate!: pulumi.Output<boolean>;

    /**
     * Create a StorageSftp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageSftpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageSftpArgs | StorageSftpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageSftpState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["generatedHttpEndpoint"] = state ? state.generatedHttpEndpoint : undefined;
            resourceInputs["generatedPassword"] = state ? state.generatedPassword : undefined;
            resourceInputs["generatedSftpEndpoint"] = state ? state.generatedSftpEndpoint : undefined;
            resourceInputs["httpExpiresHeaderValue"] = state ? state.httpExpiresHeaderValue : undefined;
            resourceInputs["httpServernameAlias"] = state ? state.httpServernameAlias : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["sshKeyIds"] = state ? state.sshKeyIds : undefined;
            resourceInputs["storageId"] = state ? state.storageId : undefined;
            resourceInputs["updateAfterCreate"] = state ? state.updateAfterCreate : undefined;
        } else {
            const args = argsOrState as StorageSftpArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["generatedHttpEndpoint"] = args ? args.generatedHttpEndpoint : undefined;
            resourceInputs["generatedPassword"] = args ? args.generatedPassword : undefined;
            resourceInputs["generatedSftpEndpoint"] = args ? args.generatedSftpEndpoint : undefined;
            resourceInputs["httpExpiresHeaderValue"] = args ? args.httpExpiresHeaderValue : undefined;
            resourceInputs["httpServernameAlias"] = args ? args.httpServernameAlias : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["sshKeyIds"] = args ? args.sshKeyIds : undefined;
            resourceInputs["storageId"] = args ? args.storageId : undefined;
            resourceInputs["updateAfterCreate"] = args ? args.updateAfterCreate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageSftp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageSftp resources.
 */
export interface StorageSftpState {
    /**
     * An client id of new storage resource.
     */
    clientId?: pulumi.Input<number>;
    /**
     * A http sftp entry point for new storage resource.
     */
    generatedHttpEndpoint?: pulumi.Input<string>;
    /**
     * An auto generated sftp password for new storage resource.
     */
    generatedPassword?: pulumi.Input<boolean>;
    /**
     * A ssh sftp entry point for new storage resource.
     */
    generatedSftpEndpoint?: pulumi.Input<string>;
    /**
     * A expires date of storage resource.
     */
    httpExpiresHeaderValue?: pulumi.Input<string>;
    /**
     * An alias of storage resource.
     */
    httpServernameAlias?: pulumi.Input<string>;
    /**
     * A location of new storage resource. One of (ams, sin, fra, mia)
     */
    location?: pulumi.Input<string>;
    /**
     * A name of new storage resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A sftp password for new storage resource.
     */
    password?: pulumi.Input<string>;
    /**
     * An ssh keys IDs to link with new sftp storage resource only. https://storage.gcorelabs.com/ssh-key/list
     */
    sshKeyIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * An id of new storage resource.
     */
    storageId?: pulumi.Input<number>;
    /**
     * A temporary flag. An internal cheat, to skip update ssh keys. Skip it.
     */
    updateAfterCreate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a StorageSftp resource.
 */
export interface StorageSftpArgs {
    /**
     * An client id of new storage resource.
     */
    clientId?: pulumi.Input<number>;
    /**
     * A http sftp entry point for new storage resource.
     */
    generatedHttpEndpoint?: pulumi.Input<string>;
    /**
     * An auto generated sftp password for new storage resource.
     */
    generatedPassword?: pulumi.Input<boolean>;
    /**
     * A ssh sftp entry point for new storage resource.
     */
    generatedSftpEndpoint?: pulumi.Input<string>;
    /**
     * A expires date of storage resource.
     */
    httpExpiresHeaderValue?: pulumi.Input<string>;
    /**
     * An alias of storage resource.
     */
    httpServernameAlias?: pulumi.Input<string>;
    /**
     * A location of new storage resource. One of (ams, sin, fra, mia)
     */
    location: pulumi.Input<string>;
    /**
     * A name of new storage resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A sftp password for new storage resource.
     */
    password?: pulumi.Input<string>;
    /**
     * An ssh keys IDs to link with new sftp storage resource only. https://storage.gcorelabs.com/ssh-key/list
     */
    sshKeyIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * An id of new storage resource.
     */
    storageId?: pulumi.Input<number>;
    /**
     * A temporary flag. An internal cheat, to skip update ssh keys. Skip it.
     */
    updateAfterCreate?: pulumi.Input<boolean>;
}
