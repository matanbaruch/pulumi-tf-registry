// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8s extends pulumi.CustomResource {
    /**
     * Get an existing K8s resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sState, opts?: pulumi.CustomResourceOptions): K8s {
        return new K8s(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/k8s:K8s';

    /**
     * Returns true if the given object is an instance of K8s.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8s {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8s.__pulumiType;
    }

    public /*out*/ readonly apiAddress!: pulumi.Output<string>;
    public readonly autoHealingEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly clusterTemplateId!: pulumi.Output<string>;
    public /*out*/ readonly containerVersion!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly discoveryUrl!: pulumi.Output<string>;
    public readonly externalDnsEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly faults!: pulumi.Output<{[key: string]: string}>;
    public readonly fixedNetwork!: pulumi.Output<string>;
    /**
     * Subnet should has router
     */
    public readonly fixedSubnet!: pulumi.Output<string>;
    public /*out*/ readonly healthStatus!: pulumi.Output<string>;
    public /*out*/ readonly healthStatusReason!: pulumi.Output<{[key: string]: string}>;
    public readonly keypair!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public /*out*/ readonly masterAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly masterFlavorId!: pulumi.Output<string>;
    public readonly masterLbFloatingIpEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nodeAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly nodeCount!: pulumi.Output<number>;
    public readonly podsIpPool!: pulumi.Output<string | undefined>;
    public readonly pool!: pulumi.Output<outputs.K8sPool>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public readonly servicesIpPool!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusReason!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.K8sTimeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly userId!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a K8s resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sArgs | K8sState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sState | undefined;
            resourceInputs["apiAddress"] = state ? state.apiAddress : undefined;
            resourceInputs["autoHealingEnabled"] = state ? state.autoHealingEnabled : undefined;
            resourceInputs["clusterTemplateId"] = state ? state.clusterTemplateId : undefined;
            resourceInputs["containerVersion"] = state ? state.containerVersion : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["discoveryUrl"] = state ? state.discoveryUrl : undefined;
            resourceInputs["externalDnsEnabled"] = state ? state.externalDnsEnabled : undefined;
            resourceInputs["faults"] = state ? state.faults : undefined;
            resourceInputs["fixedNetwork"] = state ? state.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = state ? state.fixedSubnet : undefined;
            resourceInputs["healthStatus"] = state ? state.healthStatus : undefined;
            resourceInputs["healthStatusReason"] = state ? state.healthStatusReason : undefined;
            resourceInputs["keypair"] = state ? state.keypair : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["masterAddresses"] = state ? state.masterAddresses : undefined;
            resourceInputs["masterFlavorId"] = state ? state.masterFlavorId : undefined;
            resourceInputs["masterLbFloatingIpEnabled"] = state ? state.masterLbFloatingIpEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeAddresses"] = state ? state.nodeAddresses : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["podsIpPool"] = state ? state.podsIpPool : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["servicesIpPool"] = state ? state.servicesIpPool : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as K8sArgs | undefined;
            if ((!args || args.fixedNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fixedNetwork'");
            }
            if ((!args || args.fixedSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fixedSubnet'");
            }
            if ((!args || args.keypair === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keypair'");
            }
            if ((!args || args.pool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pool'");
            }
            resourceInputs["autoHealingEnabled"] = args ? args.autoHealingEnabled : undefined;
            resourceInputs["externalDnsEnabled"] = args ? args.externalDnsEnabled : undefined;
            resourceInputs["fixedNetwork"] = args ? args.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = args ? args.fixedSubnet : undefined;
            resourceInputs["keypair"] = args ? args.keypair : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["masterLbFloatingIpEnabled"] = args ? args.masterLbFloatingIpEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["podsIpPool"] = args ? args.podsIpPool : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["servicesIpPool"] = args ? args.servicesIpPool : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["apiAddress"] = undefined /*out*/;
            resourceInputs["clusterTemplateId"] = undefined /*out*/;
            resourceInputs["containerVersion"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["discoveryUrl"] = undefined /*out*/;
            resourceInputs["faults"] = undefined /*out*/;
            resourceInputs["healthStatus"] = undefined /*out*/;
            resourceInputs["healthStatusReason"] = undefined /*out*/;
            resourceInputs["masterAddresses"] = undefined /*out*/;
            resourceInputs["masterFlavorId"] = undefined /*out*/;
            resourceInputs["nodeAddresses"] = undefined /*out*/;
            resourceInputs["nodeCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8s.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8s resources.
 */
export interface K8sState {
    apiAddress?: pulumi.Input<string>;
    autoHealingEnabled?: pulumi.Input<boolean>;
    clusterTemplateId?: pulumi.Input<string>;
    containerVersion?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    discoveryUrl?: pulumi.Input<string>;
    externalDnsEnabled?: pulumi.Input<boolean>;
    faults?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fixedNetwork?: pulumi.Input<string>;
    /**
     * Subnet should has router
     */
    fixedSubnet?: pulumi.Input<string>;
    healthStatus?: pulumi.Input<string>;
    healthStatusReason?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    keypair?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    masterAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    masterFlavorId?: pulumi.Input<string>;
    masterLbFloatingIpEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nodeAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    nodeCount?: pulumi.Input<number>;
    podsIpPool?: pulumi.Input<string>;
    pool?: pulumi.Input<inputs.K8sPool>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    servicesIpPool?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusReason?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sTimeouts>;
    updatedAt?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8s resource.
 */
export interface K8sArgs {
    autoHealingEnabled?: pulumi.Input<boolean>;
    externalDnsEnabled?: pulumi.Input<boolean>;
    fixedNetwork: pulumi.Input<string>;
    /**
     * Subnet should has router
     */
    fixedSubnet: pulumi.Input<string>;
    keypair: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    masterLbFloatingIpEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    podsIpPool?: pulumi.Input<string>;
    pool: pulumi.Input<inputs.K8sPool>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    servicesIpPool?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sTimeouts>;
}
