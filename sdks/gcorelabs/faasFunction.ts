// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FaasFunction extends pulumi.CustomResource {
    /**
     * Get an existing FaasFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FaasFunctionState, opts?: pulumi.CustomResourceOptions): FaasFunction {
        return new FaasFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcorelabs:index/faasFunction:FaasFunction';

    /**
     * Returns true if the given object is an instance of FaasFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FaasFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FaasFunction.__pulumiType;
    }

    public /*out*/ readonly buildMessage!: pulumi.Output<string>;
    public /*out*/ readonly buildStatus!: pulumi.Output<string>;
    public readonly codeText!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly deployStatus!: pulumi.Output<{[key: string]: number}>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly envs!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly flavor!: pulumi.Output<string>;
    /**
     * Main startup method name
     */
    public readonly mainMethod!: pulumi.Output<string>;
    /**
     * Autoscaling max number of instances
     */
    public readonly maxInstances!: pulumi.Output<number>;
    /**
     * Autoscaling min number of instances
     */
    public readonly minInstances!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace of the function
     */
    public readonly namespace!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public readonly runtime!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a FaasFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FaasFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FaasFunctionArgs | FaasFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FaasFunctionState | undefined;
            resourceInputs["buildMessage"] = state ? state.buildMessage : undefined;
            resourceInputs["buildStatus"] = state ? state.buildStatus : undefined;
            resourceInputs["codeText"] = state ? state.codeText : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deployStatus"] = state ? state.deployStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["mainMethod"] = state ? state.mainMethod : undefined;
            resourceInputs["maxInstances"] = state ? state.maxInstances : undefined;
            resourceInputs["minInstances"] = state ? state.minInstances : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as FaasFunctionArgs | undefined;
            if ((!args || args.codeText === undefined) && !opts.urn) {
                throw new Error("Missing required property 'codeText'");
            }
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.mainMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainMethod'");
            }
            if ((!args || args.maxInstances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxInstances'");
            }
            if ((!args || args.minInstances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minInstances'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            resourceInputs["codeText"] = args ? args.codeText : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envs"] = args ? args.envs : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["mainMethod"] = args ? args.mainMethod : undefined;
            resourceInputs["maxInstances"] = args ? args.maxInstances : undefined;
            resourceInputs["minInstances"] = args ? args.minInstances : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["buildMessage"] = undefined /*out*/;
            resourceInputs["buildStatus"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deployStatus"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FaasFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FaasFunction resources.
 */
export interface FaasFunctionState {
    buildMessage?: pulumi.Input<string>;
    buildStatus?: pulumi.Input<string>;
    codeText?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    deployStatus?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    description?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    envs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flavor?: pulumi.Input<string>;
    /**
     * Main startup method name
     */
    mainMethod?: pulumi.Input<string>;
    /**
     * Autoscaling max number of instances
     */
    maxInstances?: pulumi.Input<number>;
    /**
     * Autoscaling min number of instances
     */
    minInstances?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Namespace of the function
     */
    namespace?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FaasFunction resource.
 */
export interface FaasFunctionArgs {
    codeText: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    envs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flavor: pulumi.Input<string>;
    /**
     * Main startup method name
     */
    mainMethod: pulumi.Input<string>;
    /**
     * Autoscaling max number of instances
     */
    maxInstances: pulumi.Input<number>;
    /**
     * Autoscaling min number of instances
     */
    minInstances: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Namespace of the function
     */
    namespace: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    runtime: pulumi.Input<string>;
    timeout: pulumi.Input<number>;
}
