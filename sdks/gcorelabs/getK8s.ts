// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getK8s(args: GetK8sArgs, opts?: pulumi.InvokeOptions): Promise<GetK8sResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcorelabs:index/getK8s:getK8s", {
        "clusterId": args.clusterId,
        "id": args.id,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "regionName": args.regionName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getK8s.
 */
export interface GetK8sArgs {
    clusterId: string;
    id?: string;
    projectId?: number;
    projectName?: string;
    regionId?: number;
    regionName?: string;
}

/**
 * A collection of values returned by getK8s.
 */
export interface GetK8sResult {
    readonly apiAddress: string;
    readonly autoHealingEnabled: boolean;
    readonly clusterId: string;
    readonly clusterTemplateId: string;
    readonly containerVersion: string;
    readonly createdAt: string;
    readonly discoveryUrl: string;
    readonly externalDnsEnabled: boolean;
    readonly faults: {[key: string]: string};
    readonly fixedNetwork: string;
    readonly fixedSubnet: string;
    readonly healthStatus: string;
    readonly healthStatusReason: {[key: string]: string};
    readonly id: string;
    readonly keypair: string;
    readonly masterAddresses: string[];
    readonly masterFlavorId: string;
    readonly masterLbFloatingIpEnabled: boolean;
    readonly name: string;
    readonly nodeAddresses: string[];
    readonly nodeCount: number;
    readonly pools: outputs.GetK8sPool[];
    readonly projectId?: number;
    readonly projectName?: string;
    readonly regionId?: number;
    readonly regionName?: string;
    readonly status: string;
    readonly statusReason: string;
    readonly updatedAt: string;
    readonly userId: string;
    readonly version: string;
}
export function getK8sOutput(args: GetK8sOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetK8sResult> {
    return pulumi.output(args).apply((a: any) => getK8s(a, opts))
}

/**
 * A collection of arguments for invoking getK8s.
 */
export interface GetK8sOutputArgs {
    clusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
