// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSecretManager(args?: GetSecretManagerArgs, opts?: pulumi.InvokeOptions): Promise<GetSecretManagerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getSecretManager:getSecretManager", {
        "default": args.default,
        "id": args.id,
        "name": args.name,
        "usageScopes": args.usageScopes,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSecretManager.
 */
export interface GetSecretManagerArgs {
    default?: boolean;
    id?: string;
    name?: string;
    usageScopes?: inputs.GetSecretManagerUsageScope[];
}

/**
 * A collection of values returned by getSecretManager.
 */
export interface GetSecretManagerResult {
    readonly default?: boolean;
    readonly id?: string;
    readonly name?: string;
    readonly usageScopes?: outputs.GetSecretManagerUsageScope[];
}
export function getSecretManagerOutput(args?: GetSecretManagerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecretManagerResult> {
    return pulumi.output(args).apply((a: any) => getSecretManager(a, opts))
}

/**
 * A collection of arguments for invoking getSecretManager.
 */
export interface GetSecretManagerOutputArgs {
    default?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    usageScopes?: pulumi.Input<pulumi.Input<inputs.GetSecretManagerUsageScopeArgs>[]>;
}
