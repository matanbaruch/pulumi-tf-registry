// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPlatformRepo(args: GetPlatformRepoArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformRepoResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformRepo:getPlatformRepo", {
        "defaultBranch": args.defaultBranch,
        "description": args.description,
        "gitIgnore": args.gitIgnore,
        "identifier": args.identifier,
        "license": args.license,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "readme": args.readme,
        "sources": args.sources,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformRepo.
 */
export interface GetPlatformRepoArgs {
    defaultBranch?: string;
    description?: string;
    gitIgnore?: string;
    identifier: string;
    license?: string;
    orgId?: string;
    projectId?: string;
    readme?: boolean;
    sources?: inputs.GetPlatformRepoSource[];
}

/**
 * A collection of values returned by getPlatformRepo.
 */
export interface GetPlatformRepoResult {
    readonly created: number;
    readonly createdBy: number;
    readonly defaultBranch?: string;
    readonly description?: string;
    readonly gitIgnore?: string;
    readonly gitUrl: string;
    readonly id: string;
    readonly identifier: string;
    readonly license?: string;
    readonly name: string;
    readonly orgId?: string;
    readonly path: string;
    readonly projectId?: string;
    readonly readme?: boolean;
    readonly sources?: outputs.GetPlatformRepoSource[];
    readonly updated: number;
}
export function getPlatformRepoOutput(args: GetPlatformRepoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformRepoResult> {
    return pulumi.output(args).apply((a: any) => getPlatformRepo(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformRepo.
 */
export interface GetPlatformRepoOutputArgs {
    defaultBranch?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    gitIgnore?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    readme?: pulumi.Input<boolean>;
    sources?: pulumi.Input<pulumi.Input<inputs.GetPlatformRepoSourceArgs>[]>;
}
