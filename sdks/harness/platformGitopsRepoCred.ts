// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlatformGitopsRepoCred extends pulumi.CustomResource {
    /**
     * Get an existing PlatformGitopsRepoCred resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformGitopsRepoCredState, opts?: pulumi.CustomResourceOptions): PlatformGitopsRepoCred {
        return new PlatformGitopsRepoCred(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformGitopsRepoCred:PlatformGitopsRepoCred';

    /**
     * Returns true if the given object is an instance of PlatformGitopsRepoCred.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformGitopsRepoCred {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformGitopsRepoCred.__pulumiType;
    }

    /**
     * Account identifier of the Repository Credentials.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Agent identifier of the Repository Credentials.
     */
    public readonly agentId!: pulumi.Output<string>;
    /**
     * credential details.
     */
    public readonly creds!: pulumi.Output<outputs.PlatformGitopsRepoCredCred[] | undefined>;
    /**
     * Identifier of the Repository Credentials.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Organization identifier of the Repository Credentials.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Project identifier of the Repository Credentials.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Indicates if the GitOps repository credential should be updated if existing and inserted if not.
     */
    public readonly upsert!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PlatformGitopsRepoCred resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformGitopsRepoCredArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformGitopsRepoCredArgs | PlatformGitopsRepoCredState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformGitopsRepoCredState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["creds"] = state ? state.creds : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["upsert"] = state ? state.upsert : undefined;
        } else {
            const args = argsOrState as PlatformGitopsRepoCredArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.agentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["creds"] = args ? args.creds : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["upsert"] = args ? args.upsert : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformGitopsRepoCred.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformGitopsRepoCred resources.
 */
export interface PlatformGitopsRepoCredState {
    /**
     * Account identifier of the Repository Credentials.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Agent identifier of the Repository Credentials.
     */
    agentId?: pulumi.Input<string>;
    /**
     * credential details.
     */
    creds?: pulumi.Input<pulumi.Input<inputs.PlatformGitopsRepoCredCred>[]>;
    /**
     * Identifier of the Repository Credentials.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Organization identifier of the Repository Credentials.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the Repository Credentials.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Indicates if the GitOps repository credential should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PlatformGitopsRepoCred resource.
 */
export interface PlatformGitopsRepoCredArgs {
    /**
     * Account identifier of the Repository Credentials.
     */
    accountId: pulumi.Input<string>;
    /**
     * Agent identifier of the Repository Credentials.
     */
    agentId: pulumi.Input<string>;
    /**
     * credential details.
     */
    creds?: pulumi.Input<pulumi.Input<inputs.PlatformGitopsRepoCredCred>[]>;
    /**
     * Identifier of the Repository Credentials.
     */
    identifier: pulumi.Input<string>;
    /**
     * Organization identifier of the Repository Credentials.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the Repository Credentials.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Indicates if the GitOps repository credential should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
}
