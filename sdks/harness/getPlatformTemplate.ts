// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPlatformTemplate(args?: GetPlatformTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformTemplate:getPlatformTemplate", {
        "branchName": args.branchName,
        "childType": args.childType,
        "gitDetails": args.gitDetails,
        "id": args.id,
        "identifier": args.identifier,
        "isStable": args.isStable,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "scope": args.scope,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformTemplate.
 */
export interface GetPlatformTemplateArgs {
    branchName?: string;
    childType?: string;
    gitDetails?: inputs.GetPlatformTemplateGitDetails;
    id?: string;
    identifier?: string;
    isStable?: boolean;
    name?: string;
    orgId?: string;
    projectId?: string;
    scope?: string;
    version?: string;
}

/**
 * A collection of values returned by getPlatformTemplate.
 */
export interface GetPlatformTemplateResult {
    readonly branchName?: string;
    readonly childType?: string;
    readonly connectorRef: string;
    readonly description: string;
    readonly gitDetails?: outputs.GetPlatformTemplateGitDetails;
    readonly id: string;
    readonly identifier?: string;
    readonly isStable?: boolean;
    readonly name?: string;
    readonly orgId?: string;
    readonly projectId?: string;
    readonly scope?: string;
    readonly storeType: string;
    readonly tags: string[];
    readonly templateYaml: string;
    readonly version?: string;
}
export function getPlatformTemplateOutput(args?: GetPlatformTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformTemplateResult> {
    return pulumi.output(args).apply((a: any) => getPlatformTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformTemplate.
 */
export interface GetPlatformTemplateOutputArgs {
    branchName?: pulumi.Input<string>;
    childType?: pulumi.Input<string>;
    gitDetails?: pulumi.Input<inputs.GetPlatformTemplateGitDetailsArgs>;
    id?: pulumi.Input<string>;
    identifier?: pulumi.Input<string>;
    isStable?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
