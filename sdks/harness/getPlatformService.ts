// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPlatformService(args: GetPlatformServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformService:getPlatformService", {
        "gitDetails": args.gitDetails,
        "id": args.id,
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformService.
 */
export interface GetPlatformServiceArgs {
    gitDetails?: inputs.GetPlatformServiceGitDetails;
    id?: string;
    identifier: string;
    name?: string;
    orgId?: string;
    projectId?: string;
}

/**
 * A collection of values returned by getPlatformService.
 */
export interface GetPlatformServiceResult {
    readonly description: string;
    readonly gitDetails?: outputs.GetPlatformServiceGitDetails;
    readonly id: string;
    readonly identifier: string;
    readonly name?: string;
    readonly orgId?: string;
    readonly projectId?: string;
    readonly tags: string[];
    readonly yaml: string;
}
export function getPlatformServiceOutput(args: GetPlatformServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformServiceResult> {
    return pulumi.output(args).apply((a: any) => getPlatformService(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformService.
 */
export interface GetPlatformServiceOutputArgs {
    gitDetails?: pulumi.Input<inputs.GetPlatformServiceGitDetailsArgs>;
    id?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
}
