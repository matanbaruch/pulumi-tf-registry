// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPlatformRepoRuleBranch(args: GetPlatformRepoRuleBranchArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformRepoRuleBranchResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformRepoRuleBranch:getPlatformRepoRuleBranch", {
        "bypasses": args.bypasses,
        "description": args.description,
        "id": args.id,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "patterns": args.patterns,
        "policies": args.policies,
        "projectId": args.projectId,
        "repoIdentifier": args.repoIdentifier,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformRepoRuleBranch.
 */
export interface GetPlatformRepoRuleBranchArgs {
    bypasses: inputs.GetPlatformRepoRuleBranchBypass[];
    description?: string;
    id?: string;
    identifier: string;
    orgId?: string;
    patterns?: inputs.GetPlatformRepoRuleBranchPattern[];
    policies: inputs.GetPlatformRepoRuleBranchPolicy[];
    projectId?: string;
    repoIdentifier: string;
    state: string;
}

/**
 * A collection of values returned by getPlatformRepoRuleBranch.
 */
export interface GetPlatformRepoRuleBranchResult {
    readonly bypasses: outputs.GetPlatformRepoRuleBranchBypass[];
    readonly created: number;
    readonly createdBy: number;
    readonly description?: string;
    readonly id: string;
    readonly identifier: string;
    readonly orgId?: string;
    readonly patterns?: outputs.GetPlatformRepoRuleBranchPattern[];
    readonly policies: outputs.GetPlatformRepoRuleBranchPolicy[];
    readonly projectId?: string;
    readonly repoIdentifier: string;
    readonly state: string;
    readonly updated: number;
    readonly updatedBy: number;
}
export function getPlatformRepoRuleBranchOutput(args: GetPlatformRepoRuleBranchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformRepoRuleBranchResult> {
    return pulumi.output(args).apply((a: any) => getPlatformRepoRuleBranch(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformRepoRuleBranch.
 */
export interface GetPlatformRepoRuleBranchOutputArgs {
    bypasses: pulumi.Input<pulumi.Input<inputs.GetPlatformRepoRuleBranchBypassArgs>[]>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    patterns?: pulumi.Input<pulumi.Input<inputs.GetPlatformRepoRuleBranchPatternArgs>[]>;
    policies: pulumi.Input<pulumi.Input<inputs.GetPlatformRepoRuleBranchPolicyArgs>[]>;
    projectId?: pulumi.Input<string>;
    repoIdentifier: pulumi.Input<string>;
    state: pulumi.Input<string>;
}
