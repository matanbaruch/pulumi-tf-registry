// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlatformMonitoredService extends pulumi.CustomResource {
    /**
     * Get an existing PlatformMonitoredService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformMonitoredServiceState, opts?: pulumi.CustomResourceOptions): PlatformMonitoredService {
        return new PlatformMonitoredService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformMonitoredService:PlatformMonitoredService';

    /**
     * Returns true if the given object is an instance of PlatformMonitoredService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformMonitoredService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformMonitoredService.__pulumiType;
    }

    /**
     * Identifier of the monitored service.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Identifier of the organization in which the monitored service is configured.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Identifier of the project in which the monitored service is configured.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Request for creating or updating a monitored service.
     */
    public readonly request!: pulumi.Output<outputs.PlatformMonitoredServiceRequest | undefined>;

    /**
     * Create a PlatformMonitoredService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformMonitoredServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformMonitoredServiceArgs | PlatformMonitoredServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformMonitoredServiceState | undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["request"] = state ? state.request : undefined;
        } else {
            const args = argsOrState as PlatformMonitoredServiceArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["request"] = args ? args.request : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformMonitoredService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformMonitoredService resources.
 */
export interface PlatformMonitoredServiceState {
    /**
     * Identifier of the monitored service.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Identifier of the organization in which the monitored service is configured.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Identifier of the project in which the monitored service is configured.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Request for creating or updating a monitored service.
     */
    request?: pulumi.Input<inputs.PlatformMonitoredServiceRequest>;
}

/**
 * The set of arguments for constructing a PlatformMonitoredService resource.
 */
export interface PlatformMonitoredServiceArgs {
    /**
     * Identifier of the monitored service.
     */
    identifier: pulumi.Input<string>;
    /**
     * Identifier of the organization in which the monitored service is configured.
     */
    orgId: pulumi.Input<string>;
    /**
     * Identifier of the project in which the monitored service is configured.
     */
    projectId: pulumi.Input<string>;
    /**
     * Request for creating or updating a monitored service.
     */
    request?: pulumi.Input<inputs.PlatformMonitoredServiceRequest>;
}
