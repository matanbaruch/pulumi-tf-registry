// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlatformTemplate extends pulumi.CustomResource {
    /**
     * Get an existing PlatformTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformTemplateState, opts?: pulumi.CustomResourceOptions): PlatformTemplate {
        return new PlatformTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformTemplate:PlatformTemplate';

    /**
     * Returns true if the given object is an instance of PlatformTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformTemplate.__pulumiType;
    }

    /**
     * Specify comment with respect to changes.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Description of the entity. Description field is deprecated
     *
     * @deprecated Deprecated
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other
     * entities reference it
     */
    public readonly forceDelete!: pulumi.Output<string>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    public readonly gitDetails!: pulumi.Output<outputs.PlatformTemplateGitDetails | undefined>;
    /**
     * Contains Git Information for importing entities from Git
     */
    public readonly gitImportDetails!: pulumi.Output<outputs.PlatformTemplateGitImportDetails | undefined>;
    /**
     * Unique identifier of the resource
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Flag to set if importing from Git
     */
    public readonly importFromGit!: pulumi.Output<boolean | undefined>;
    /**
     * True if given version for template to be set as stable.
     */
    public readonly isStable!: pulumi.Output<boolean>;
    /**
     * Name of the Variable
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization Identifier for the Entity
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Project Identifier for the Entity
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Contains parameters for importing template.
     */
    public readonly templateImportRequest!: pulumi.Output<outputs.PlatformTemplateTemplateImportRequest | undefined>;
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the
     * expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression:
     * account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a
     * stage mention it as connectorRef: org.connectorId.
     */
    public readonly templateYaml!: pulumi.Output<string>;
    /**
     * Version Label for Template.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a PlatformTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformTemplateArgs | PlatformTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformTemplateState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["gitDetails"] = state ? state.gitDetails : undefined;
            resourceInputs["gitImportDetails"] = state ? state.gitImportDetails : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["importFromGit"] = state ? state.importFromGit : undefined;
            resourceInputs["isStable"] = state ? state.isStable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateImportRequest"] = state ? state.templateImportRequest : undefined;
            resourceInputs["templateYaml"] = state ? state.templateYaml : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as PlatformTemplateArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["gitDetails"] = args ? args.gitDetails : undefined;
            resourceInputs["gitImportDetails"] = args ? args.gitImportDetails : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["importFromGit"] = args ? args.importFromGit : undefined;
            resourceInputs["isStable"] = args ? args.isStable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateImportRequest"] = args ? args.templateImportRequest : undefined;
            resourceInputs["templateYaml"] = args ? args.templateYaml : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformTemplate resources.
 */
export interface PlatformTemplateState {
    /**
     * Specify comment with respect to changes.
     */
    comments?: pulumi.Input<string>;
    /**
     * Description of the entity. Description field is deprecated
     *
     * @deprecated Deprecated
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other
     * entities reference it
     */
    forceDelete?: pulumi.Input<string>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.PlatformTemplateGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    gitImportDetails?: pulumi.Input<inputs.PlatformTemplateGitImportDetails>;
    /**
     * Unique identifier of the resource
     */
    identifier?: pulumi.Input<string>;
    /**
     * Flag to set if importing from Git
     */
    importFromGit?: pulumi.Input<boolean>;
    /**
     * True if given version for template to be set as stable.
     */
    isStable?: pulumi.Input<boolean>;
    /**
     * Name of the Variable
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains parameters for importing template.
     */
    templateImportRequest?: pulumi.Input<inputs.PlatformTemplateTemplateImportRequest>;
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the
     * expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression:
     * account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a
     * stage mention it as connectorRef: org.connectorId.
     */
    templateYaml?: pulumi.Input<string>;
    /**
     * Version Label for Template.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlatformTemplate resource.
 */
export interface PlatformTemplateArgs {
    /**
     * Specify comment with respect to changes.
     */
    comments?: pulumi.Input<string>;
    /**
     * Description of the entity. Description field is deprecated
     *
     * @deprecated Deprecated
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other
     * entities reference it
     */
    forceDelete?: pulumi.Input<string>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.PlatformTemplateGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    gitImportDetails?: pulumi.Input<inputs.PlatformTemplateGitImportDetails>;
    /**
     * Unique identifier of the resource
     */
    identifier: pulumi.Input<string>;
    /**
     * Flag to set if importing from Git
     */
    importFromGit?: pulumi.Input<boolean>;
    /**
     * True if given version for template to be set as stable.
     */
    isStable?: pulumi.Input<boolean>;
    /**
     * Name of the Variable
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Identifier for the Entity
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project Identifier for the Entity
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains parameters for importing template.
     */
    templateImportRequest?: pulumi.Input<inputs.PlatformTemplateTemplateImportRequest>;
    /**
     * Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the
     * expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression:
     * account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a
     * stage mention it as connectorRef: org.connectorId.
     */
    templateYaml?: pulumi.Input<string>;
    /**
     * Version Label for Template.
     */
    version: pulumi.Input<string>;
}
