// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPlatformUser(args: GetPlatformUserArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformUser:getPlatformUser", {
        "email": args.email,
        "id": args.id,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformUser.
 */
export interface GetPlatformUserArgs {
    email: string;
    id?: string;
    orgId?: string;
    projectId?: string;
}

/**
 * A collection of values returned by getPlatformUser.
 */
export interface GetPlatformUserResult {
    readonly disabled: boolean;
    readonly email: string;
    readonly externallyManaged: boolean;
    readonly id: string;
    readonly identifier: string;
    readonly locked: boolean;
    readonly name: string;
    readonly orgId?: string;
    readonly projectId?: string;
}
export function getPlatformUserOutput(args: GetPlatformUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformUserResult> {
    return pulumi.output(args).apply((a: any) => getPlatformUser(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformUser.
 */
export interface GetPlatformUserOutputArgs {
    email: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
}
