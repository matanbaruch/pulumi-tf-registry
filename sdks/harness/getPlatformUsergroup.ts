// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPlatformUsergroup(args?: GetPlatformUsergroupArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformUsergroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformUsergroup:getPlatformUsergroup", {
        "id": args.id,
        "identifier": args.identifier,
        "name": args.name,
        "notificationConfigs": args.notificationConfigs,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformUsergroup.
 */
export interface GetPlatformUsergroupArgs {
    id?: string;
    identifier?: string;
    name?: string;
    notificationConfigs?: inputs.GetPlatformUsergroupNotificationConfig[];
    orgId?: string;
    projectId?: string;
}

/**
 * A collection of values returned by getPlatformUsergroup.
 */
export interface GetPlatformUsergroupResult {
    readonly description: string;
    readonly externallyManaged: boolean;
    readonly id: string;
    readonly identifier?: string;
    readonly linkedSsoDisplayName: string;
    readonly linkedSsoId: string;
    readonly linkedSsoType: string;
    readonly name?: string;
    readonly notificationConfigs?: outputs.GetPlatformUsergroupNotificationConfig[];
    readonly orgId?: string;
    readonly projectId?: string;
    readonly ssoGroupId: string;
    readonly ssoGroupName: string;
    readonly ssoLinked: boolean;
    readonly tags: string[];
    readonly users: string[];
}
export function getPlatformUsergroupOutput(args?: GetPlatformUsergroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformUsergroupResult> {
    return pulumi.output(args).apply((a: any) => getPlatformUsergroup(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformUsergroup.
 */
export interface GetPlatformUsergroupOutputArgs {
    id?: pulumi.Input<string>;
    identifier?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationConfigs?: pulumi.Input<pulumi.Input<inputs.GetPlatformUsergroupNotificationConfigArgs>[]>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
}
