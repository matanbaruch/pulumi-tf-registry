// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlatformRoleAssignments extends pulumi.CustomResource {
    /**
     * Get an existing PlatformRoleAssignments resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformRoleAssignmentsState, opts?: pulumi.CustomResourceOptions): PlatformRoleAssignments {
        return new PlatformRoleAssignments(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformRoleAssignments:PlatformRoleAssignments';

    /**
     * Returns true if the given object is an instance of PlatformRoleAssignments.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformRoleAssignments {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformRoleAssignments.__pulumiType;
    }

    /**
     * Disabled or not.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Identifier for role assignment.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Managed or not.
     */
    public readonly managed!: pulumi.Output<boolean | undefined>;
    /**
     * Org identifier.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Principal.
     */
    public readonly principals!: pulumi.Output<outputs.PlatformRoleAssignmentsPrincipal[]>;
    /**
     * Project Identifier
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Resource group identifier.
     */
    public readonly resourceGroupIdentifier!: pulumi.Output<string>;
    /**
     * Role identifier.
     */
    public readonly roleIdentifier!: pulumi.Output<string>;

    /**
     * Create a PlatformRoleAssignments resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformRoleAssignmentsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformRoleAssignmentsArgs | PlatformRoleAssignmentsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformRoleAssignmentsState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["principals"] = state ? state.principals : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["resourceGroupIdentifier"] = state ? state.resourceGroupIdentifier : undefined;
            resourceInputs["roleIdentifier"] = state ? state.roleIdentifier : undefined;
        } else {
            const args = argsOrState as PlatformRoleAssignmentsArgs | undefined;
            if ((!args || args.principals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principals'");
            }
            if ((!args || args.resourceGroupIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupIdentifier'");
            }
            if ((!args || args.roleIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleIdentifier'");
            }
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["principals"] = args ? args.principals : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["resourceGroupIdentifier"] = args ? args.resourceGroupIdentifier : undefined;
            resourceInputs["roleIdentifier"] = args ? args.roleIdentifier : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformRoleAssignments.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformRoleAssignments resources.
 */
export interface PlatformRoleAssignmentsState {
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Identifier for role assignment.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Managed or not.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Org identifier.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Principal.
     */
    principals?: pulumi.Input<pulumi.Input<inputs.PlatformRoleAssignmentsPrincipal>[]>;
    /**
     * Project Identifier
     */
    projectId?: pulumi.Input<string>;
    /**
     * Resource group identifier.
     */
    resourceGroupIdentifier?: pulumi.Input<string>;
    /**
     * Role identifier.
     */
    roleIdentifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlatformRoleAssignments resource.
 */
export interface PlatformRoleAssignmentsArgs {
    /**
     * Disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Identifier for role assignment.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Managed or not.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Org identifier.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Principal.
     */
    principals: pulumi.Input<pulumi.Input<inputs.PlatformRoleAssignmentsPrincipal>[]>;
    /**
     * Project Identifier
     */
    projectId?: pulumi.Input<string>;
    /**
     * Resource group identifier.
     */
    resourceGroupIdentifier: pulumi.Input<string>;
    /**
     * Role identifier.
     */
    roleIdentifier: pulumi.Input<string>;
}
