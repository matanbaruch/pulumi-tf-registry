// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlatformManualFreeze extends pulumi.CustomResource {
    /**
     * Get an existing PlatformManualFreeze resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformManualFreezeState, opts?: pulumi.CustomResourceOptions): PlatformManualFreeze {
        return new PlatformManualFreeze(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformManualFreeze:PlatformManualFreeze';

    /**
     * Returns true if the given object is an instance of PlatformManualFreeze.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformManualFreeze {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformManualFreeze.__pulumiType;
    }

    /**
     * Account Identifier of the freeze
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Current or upcoming windows
     */
    public /*out*/ readonly currentOrUpcomingWindows!: pulumi.Output<outputs.PlatformManualFreezeCurrentOrUpcomingWindow[]>;
    /**
     * Description of the freeze
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * Freeze windows in the freeze response
     */
    public /*out*/ readonly freezeWindows!: pulumi.Output<outputs.PlatformManualFreezeFreezeWindow[]>;
    /**
     * Identifier of the freeze
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Name of the freeze
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Organization identifier of the freeze
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Project identifier of the freeze
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Scope of the freeze
     */
    public /*out*/ readonly scope!: pulumi.Output<string>;
    /**
     * Status of the freeze
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags associated with the freeze
     */
    public /*out*/ readonly tags!: pulumi.Output<string[]>;
    /**
     * Type of freeze
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Yaml of the freeze
     */
    public readonly yaml!: pulumi.Output<string>;

    /**
     * Create a PlatformManualFreeze resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformManualFreezeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformManualFreezeArgs | PlatformManualFreezeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformManualFreezeState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["currentOrUpcomingWindows"] = state ? state.currentOrUpcomingWindows : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["freezeWindows"] = state ? state.freezeWindows : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["yaml"] = state ? state.yaml : undefined;
        } else {
            const args = argsOrState as PlatformManualFreezeArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.yaml === undefined) && !opts.urn) {
                throw new Error("Missing required property 'yaml'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["yaml"] = args ? args.yaml : undefined;
            resourceInputs["currentOrUpcomingWindows"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["freezeWindows"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformManualFreeze.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformManualFreeze resources.
 */
export interface PlatformManualFreezeState {
    /**
     * Account Identifier of the freeze
     */
    accountId?: pulumi.Input<string>;
    /**
     * Current or upcoming windows
     */
    currentOrUpcomingWindows?: pulumi.Input<pulumi.Input<inputs.PlatformManualFreezeCurrentOrUpcomingWindow>[]>;
    /**
     * Description of the freeze
     */
    description?: pulumi.Input<string>;
    /**
     * Freeze windows in the freeze response
     */
    freezeWindows?: pulumi.Input<pulumi.Input<inputs.PlatformManualFreezeFreezeWindow>[]>;
    /**
     * Identifier of the freeze
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the freeze
     */
    name?: pulumi.Input<string>;
    /**
     * Organization identifier of the freeze
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the freeze
     */
    projectId?: pulumi.Input<string>;
    /**
     * Scope of the freeze
     */
    scope?: pulumi.Input<string>;
    /**
     * Status of the freeze
     */
    status?: pulumi.Input<string>;
    /**
     * Tags associated with the freeze
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of freeze
     */
    type?: pulumi.Input<string>;
    /**
     * Yaml of the freeze
     */
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlatformManualFreeze resource.
 */
export interface PlatformManualFreezeArgs {
    /**
     * Account Identifier of the freeze
     */
    accountId: pulumi.Input<string>;
    /**
     * Identifier of the freeze
     */
    identifier: pulumi.Input<string>;
    /**
     * Organization identifier of the freeze
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the freeze
     */
    projectId?: pulumi.Input<string>;
    /**
     * Yaml of the freeze
     */
    yaml: pulumi.Input<string>;
}
