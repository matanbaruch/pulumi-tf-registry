// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPlatformWorkspace(args: GetPlatformWorkspaceArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformWorkspaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:index/getPlatformWorkspace:getPlatformWorkspace", {
        "description": args.description,
        "environmentVariables": args.environmentVariables,
        "id": args.id,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "repositoryBranch": args.repositoryBranch,
        "repositoryCommit": args.repositoryCommit,
        "terraformVariableFiles": args.terraformVariableFiles,
        "terraformVariables": args.terraformVariables,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPlatformWorkspace.
 */
export interface GetPlatformWorkspaceArgs {
    description?: string;
    environmentVariables?: inputs.GetPlatformWorkspaceEnvironmentVariable[];
    id?: string;
    identifier: string;
    orgId: string;
    projectId: string;
    repositoryBranch?: string;
    repositoryCommit?: string;
    terraformVariableFiles?: inputs.GetPlatformWorkspaceTerraformVariableFile[];
    terraformVariables?: inputs.GetPlatformWorkspaceTerraformVariable[];
}

/**
 * A collection of values returned by getPlatformWorkspace.
 */
export interface GetPlatformWorkspaceResult {
    readonly costEstimationEnabled: boolean;
    readonly defaultPipelines: {[key: string]: string};
    readonly description: string;
    readonly environmentVariables?: outputs.GetPlatformWorkspaceEnvironmentVariable[];
    readonly id: string;
    readonly identifier: string;
    readonly name: string;
    readonly orgId: string;
    readonly projectId: string;
    readonly providerConnector: string;
    readonly provisionerType: string;
    readonly provisionerVersion: string;
    readonly repository: string;
    readonly repositoryBranch: string;
    readonly repositoryCommit: string;
    readonly repositoryConnector: string;
    readonly repositoryPath: string;
    readonly terraformVariableFiles?: outputs.GetPlatformWorkspaceTerraformVariableFile[];
    readonly terraformVariables?: outputs.GetPlatformWorkspaceTerraformVariable[];
}
export function getPlatformWorkspaceOutput(args: GetPlatformWorkspaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlatformWorkspaceResult> {
    return pulumi.output(args).apply((a: any) => getPlatformWorkspace(a, opts))
}

/**
 * A collection of arguments for invoking getPlatformWorkspace.
 */
export interface GetPlatformWorkspaceOutputArgs {
    description?: pulumi.Input<string>;
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.GetPlatformWorkspaceEnvironmentVariableArgs>[]>;
    id?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    repositoryBranch?: pulumi.Input<string>;
    repositoryCommit?: pulumi.Input<string>;
    terraformVariableFiles?: pulumi.Input<pulumi.Input<inputs.GetPlatformWorkspaceTerraformVariableFileArgs>[]>;
    terraformVariables?: pulumi.Input<pulumi.Input<inputs.GetPlatformWorkspaceTerraformVariableArgs>[]>;
}
