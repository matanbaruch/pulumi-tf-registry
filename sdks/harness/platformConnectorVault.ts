// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PlatformConnectorVault extends pulumi.CustomResource {
    /**
     * Get an existing PlatformConnectorVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformConnectorVaultState, opts?: pulumi.CustomResourceOptions): PlatformConnectorVault {
        return new PlatformConnectorVault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformConnectorVault:PlatformConnectorVault';

    /**
     * Returns true if the given object is an instance of PlatformConnectorVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformConnectorVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformConnectorVault.__pulumiType;
    }

    /**
     * Access type.
     */
    public readonly accessType!: pulumi.Output<string | undefined>;
    /**
     * ID of App Role.
     */
    public readonly appRoleId!: pulumi.Output<string | undefined>;
    /**
     * Authentication token for Vault.
     */
    public readonly authToken!: pulumi.Output<string>;
    /**
     * AWS region where the AWS IAM authentication will happen.
     */
    public readonly awsRegion!: pulumi.Output<string | undefined>;
    /**
     * Location of the Vault directory where the secret will be stored.
     */
    public readonly basePath!: pulumi.Output<string | undefined>;
    /**
     * Is default or not.
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    public readonly delegateSelectors!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the resource.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Is default or not.
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Read only or not.
     */
    public readonly isReadOnly!: pulumi.Output<boolean | undefined>;
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     */
    public readonly k8sAuthEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Vault namespace where the Secret will be created.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Read only.
     */
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     */
    public readonly renewAppRoleToken!: pulumi.Output<boolean>;
    /**
     * The time interval for the token renewal.
     */
    public readonly renewalIntervalMinutes!: pulumi.Output<number>;
    /**
     * Manually entered Secret Engine.
     */
    public readonly secretEngineManuallyConfigured!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the Secret Engine.
     */
    public readonly secretEngineName!: pulumi.Output<string | undefined>;
    /**
     * Version of Secret Engine.
     */
    public readonly secretEngineVersion!: pulumi.Output<number | undefined>;
    /**
     * ID of the Secret.
     */
    public readonly secretId!: pulumi.Output<string | undefined>;
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     */
    public readonly serviceAccountTokenPath!: pulumi.Output<string | undefined>;
    /**
     * The location from which the authentication token should be read.
     */
    public readonly sinkPath!: pulumi.Output<string | undefined>;
    /**
     * Tags to associate with the resource.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    public readonly useAwsIam!: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    public readonly useK8sAuth!: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    public readonly useVaultAgent!: pulumi.Output<boolean | undefined>;
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     */
    public readonly vaultAwsIamRole!: pulumi.Output<string | undefined>;
    /**
     * The role where K8s Auth will happen.
     */
    public readonly vaultK8sAuthRole!: pulumi.Output<string | undefined>;
    /**
     * URL of the HashiCorp Vault.
     */
    public readonly vaultUrl!: pulumi.Output<string>;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    public readonly xvaultAwsIamServerId!: pulumi.Output<string | undefined>;

    /**
     * Create a PlatformConnectorVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformConnectorVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformConnectorVaultArgs | PlatformConnectorVaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformConnectorVaultState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["appRoleId"] = state ? state.appRoleId : undefined;
            resourceInputs["authToken"] = state ? state.authToken : undefined;
            resourceInputs["awsRegion"] = state ? state.awsRegion : undefined;
            resourceInputs["basePath"] = state ? state.basePath : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["delegateSelectors"] = state ? state.delegateSelectors : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["isReadOnly"] = state ? state.isReadOnly : undefined;
            resourceInputs["k8sAuthEndpoint"] = state ? state.k8sAuthEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["renewAppRoleToken"] = state ? state.renewAppRoleToken : undefined;
            resourceInputs["renewalIntervalMinutes"] = state ? state.renewalIntervalMinutes : undefined;
            resourceInputs["secretEngineManuallyConfigured"] = state ? state.secretEngineManuallyConfigured : undefined;
            resourceInputs["secretEngineName"] = state ? state.secretEngineName : undefined;
            resourceInputs["secretEngineVersion"] = state ? state.secretEngineVersion : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["serviceAccountTokenPath"] = state ? state.serviceAccountTokenPath : undefined;
            resourceInputs["sinkPath"] = state ? state.sinkPath : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useAwsIam"] = state ? state.useAwsIam : undefined;
            resourceInputs["useK8sAuth"] = state ? state.useK8sAuth : undefined;
            resourceInputs["useVaultAgent"] = state ? state.useVaultAgent : undefined;
            resourceInputs["vaultAwsIamRole"] = state ? state.vaultAwsIamRole : undefined;
            resourceInputs["vaultK8sAuthRole"] = state ? state.vaultK8sAuthRole : undefined;
            resourceInputs["vaultUrl"] = state ? state.vaultUrl : undefined;
            resourceInputs["xvaultAwsIamServerId"] = state ? state.xvaultAwsIamServerId : undefined;
        } else {
            const args = argsOrState as PlatformConnectorVaultArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.renewalIntervalMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'renewalIntervalMinutes'");
            }
            if ((!args || args.vaultUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultUrl'");
            }
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["appRoleId"] = args ? args.appRoleId : undefined;
            resourceInputs["authToken"] = args ? args.authToken : undefined;
            resourceInputs["awsRegion"] = args ? args.awsRegion : undefined;
            resourceInputs["basePath"] = args ? args.basePath : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["delegateSelectors"] = args ? args.delegateSelectors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["isReadOnly"] = args ? args.isReadOnly : undefined;
            resourceInputs["k8sAuthEndpoint"] = args ? args.k8sAuthEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["renewAppRoleToken"] = args ? args.renewAppRoleToken : undefined;
            resourceInputs["renewalIntervalMinutes"] = args ? args.renewalIntervalMinutes : undefined;
            resourceInputs["secretEngineManuallyConfigured"] = args ? args.secretEngineManuallyConfigured : undefined;
            resourceInputs["secretEngineName"] = args ? args.secretEngineName : undefined;
            resourceInputs["secretEngineVersion"] = args ? args.secretEngineVersion : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["serviceAccountTokenPath"] = args ? args.serviceAccountTokenPath : undefined;
            resourceInputs["sinkPath"] = args ? args.sinkPath : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useAwsIam"] = args ? args.useAwsIam : undefined;
            resourceInputs["useK8sAuth"] = args ? args.useK8sAuth : undefined;
            resourceInputs["useVaultAgent"] = args ? args.useVaultAgent : undefined;
            resourceInputs["vaultAwsIamRole"] = args ? args.vaultAwsIamRole : undefined;
            resourceInputs["vaultK8sAuthRole"] = args ? args.vaultK8sAuthRole : undefined;
            resourceInputs["vaultUrl"] = args ? args.vaultUrl : undefined;
            resourceInputs["xvaultAwsIamServerId"] = args ? args.xvaultAwsIamServerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformConnectorVault.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformConnectorVault resources.
 */
export interface PlatformConnectorVaultState {
    /**
     * Access type.
     */
    accessType?: pulumi.Input<string>;
    /**
     * ID of App Role.
     */
    appRoleId?: pulumi.Input<string>;
    /**
     * Authentication token for Vault.
     */
    authToken?: pulumi.Input<string>;
    /**
     * AWS region where the AWS IAM authentication will happen.
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Location of the Vault directory where the secret will be stored.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    default?: pulumi.Input<boolean>;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Read only or not.
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     */
    k8sAuthEndpoint?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Vault namespace where the Secret will be created.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Read only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     */
    renewAppRoleToken?: pulumi.Input<boolean>;
    /**
     * The time interval for the token renewal.
     */
    renewalIntervalMinutes?: pulumi.Input<number>;
    /**
     * Manually entered Secret Engine.
     */
    secretEngineManuallyConfigured?: pulumi.Input<boolean>;
    /**
     * Name of the Secret Engine.
     */
    secretEngineName?: pulumi.Input<string>;
    /**
     * Version of Secret Engine.
     */
    secretEngineVersion?: pulumi.Input<number>;
    /**
     * ID of the Secret.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     */
    serviceAccountTokenPath?: pulumi.Input<string>;
    /**
     * The location from which the authentication token should be read.
     */
    sinkPath?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    useAwsIam?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    useK8sAuth?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    useVaultAgent?: pulumi.Input<boolean>;
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     */
    vaultAwsIamRole?: pulumi.Input<string>;
    /**
     * The role where K8s Auth will happen.
     */
    vaultK8sAuthRole?: pulumi.Input<string>;
    /**
     * URL of the HashiCorp Vault.
     */
    vaultUrl?: pulumi.Input<string>;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    xvaultAwsIamServerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlatformConnectorVault resource.
 */
export interface PlatformConnectorVaultArgs {
    /**
     * Access type.
     */
    accessType?: pulumi.Input<string>;
    /**
     * ID of App Role.
     */
    appRoleId?: pulumi.Input<string>;
    /**
     * Authentication token for Vault.
     */
    authToken?: pulumi.Input<string>;
    /**
     * AWS region where the AWS IAM authentication will happen.
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Location of the Vault directory where the secret will be stored.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    default?: pulumi.Input<boolean>;
    /**
     * List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.
     */
    delegateSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Is default or not.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Read only or not.
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * The path where Kubernetes Auth is enabled in Vault.
     */
    k8sAuthEndpoint?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Vault namespace where the Secret will be created.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Read only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if AppRole token renewal is enabled or not.
     */
    renewAppRoleToken?: pulumi.Input<boolean>;
    /**
     * The time interval for the token renewal.
     */
    renewalIntervalMinutes: pulumi.Input<number>;
    /**
     * Manually entered Secret Engine.
     */
    secretEngineManuallyConfigured?: pulumi.Input<boolean>;
    /**
     * Name of the Secret Engine.
     */
    secretEngineName?: pulumi.Input<string>;
    /**
     * Version of Secret Engine.
     */
    secretEngineVersion?: pulumi.Input<number>;
    /**
     * ID of the Secret.
     */
    secretId?: pulumi.Input<string>;
    /**
     * The Service Account token path in the K8s pod where the token is mounted.
     */
    serviceAccountTokenPath?: pulumi.Input<string>;
    /**
     * The location from which the authentication token should be read.
     */
    sinkPath?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean value to indicate if AWS IAM is used for authentication.
     */
    useAwsIam?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if K8s Auth is used for authentication.
     */
    useK8sAuth?: pulumi.Input<boolean>;
    /**
     * Boolean value to indicate if Vault Agent is used for authentication.
     */
    useVaultAgent?: pulumi.Input<boolean>;
    /**
     * The Vault role defined to bind to aws iam account/role being accessed.
     */
    vaultAwsIamRole?: pulumi.Input<string>;
    /**
     * The role where K8s Auth will happen.
     */
    vaultK8sAuthRole?: pulumi.Input<string>;
    /**
     * URL of the HashiCorp Vault.
     */
    vaultUrl: pulumi.Input<string>;
    /**
     * The AWS IAM Header Server ID that has been configured for this AWS IAM instance.
     */
    xvaultAwsIamServerId?: pulumi.Input<string>;
}
