// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutostoppingRuleEcs extends pulumi.CustomResource {
    /**
     * Get an existing AutostoppingRuleEcs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutostoppingRuleEcsState, opts?: pulumi.CustomResourceOptions): AutostoppingRuleEcs {
        return new AutostoppingRuleEcs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/autostoppingRuleEcs:AutostoppingRuleEcs';

    /**
     * Returns true if the given object is an instance of AutostoppingRuleEcs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutostoppingRuleEcs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutostoppingRuleEcs.__pulumiType;
    }

    /**
     * Id of the cloud connector
     */
    public readonly cloudConnectorId!: pulumi.Output<string>;
    public readonly container!: pulumi.Output<outputs.AutostoppingRuleEcsContainer | undefined>;
    /**
     * Custom URLs used to access the instances
     */
    public readonly customDomains!: pulumi.Output<string[] | undefined>;
    /**
     * Dependent rules
     */
    public readonly depends!: pulumi.Output<outputs.AutostoppingRuleEcsDepend[] | undefined>;
    /**
     * Http routing configuration
     */
    public readonly https!: pulumi.Output<outputs.AutostoppingRuleEcsHttp[] | undefined>;
    /**
     * Unique identifier of the resource
     */
    public /*out*/ readonly identifier!: pulumi.Output<number>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    public readonly idleTimeMins!: pulumi.Output<number | undefined>;
    /**
     * Name of the rule
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AutostoppingRuleEcs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutostoppingRuleEcsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutostoppingRuleEcsArgs | AutostoppingRuleEcsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutostoppingRuleEcsState | undefined;
            resourceInputs["cloudConnectorId"] = state ? state.cloudConnectorId : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["customDomains"] = state ? state.customDomains : undefined;
            resourceInputs["depends"] = state ? state.depends : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["idleTimeMins"] = state ? state.idleTimeMins : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AutostoppingRuleEcsArgs | undefined;
            if ((!args || args.cloudConnectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudConnectorId'");
            }
            resourceInputs["cloudConnectorId"] = args ? args.cloudConnectorId : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["customDomains"] = args ? args.customDomains : undefined;
            resourceInputs["depends"] = args ? args.depends : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["idleTimeMins"] = args ? args.idleTimeMins : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["identifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutostoppingRuleEcs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutostoppingRuleEcs resources.
 */
export interface AutostoppingRuleEcsState {
    /**
     * Id of the cloud connector
     */
    cloudConnectorId?: pulumi.Input<string>;
    container?: pulumi.Input<inputs.AutostoppingRuleEcsContainer>;
    /**
     * Custom URLs used to access the instances
     */
    customDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dependent rules
     */
    depends?: pulumi.Input<pulumi.Input<inputs.AutostoppingRuleEcsDepend>[]>;
    /**
     * Http routing configuration
     */
    https?: pulumi.Input<pulumi.Input<inputs.AutostoppingRuleEcsHttp>[]>;
    /**
     * Unique identifier of the resource
     */
    identifier?: pulumi.Input<number>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    idleTimeMins?: pulumi.Input<number>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutostoppingRuleEcs resource.
 */
export interface AutostoppingRuleEcsArgs {
    /**
     * Id of the cloud connector
     */
    cloudConnectorId: pulumi.Input<string>;
    container?: pulumi.Input<inputs.AutostoppingRuleEcsContainer>;
    /**
     * Custom URLs used to access the instances
     */
    customDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dependent rules
     */
    depends?: pulumi.Input<pulumi.Input<inputs.AutostoppingRuleEcsDepend>[]>;
    /**
     * Http routing configuration
     */
    https?: pulumi.Input<pulumi.Input<inputs.AutostoppingRuleEcsHttp>[]>;
    /**
     * Idle time in minutes. This is the time that the AutoStopping rule waits before stopping the idle instances.
     */
    idleTimeMins?: pulumi.Input<number>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
}
