// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PlatformPipeline extends pulumi.CustomResource {
    /**
     * Get an existing PlatformPipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformPipelineState, opts?: pulumi.CustomResourceOptions): PlatformPipeline {
        return new PlatformPipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:index/platformPipeline:PlatformPipeline';

    /**
     * Returns true if the given object is an instance of PlatformPipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformPipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformPipeline.__pulumiType;
    }

    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    public readonly gitDetails!: pulumi.Output<outputs.PlatformPipelineGitDetails | undefined>;
    /**
     * Contains Git Information for importing entities from Git
     */
    public readonly gitImportInfo!: pulumi.Output<outputs.PlatformPipelineGitImportInfo | undefined>;
    /**
     * Unique identifier of the resource.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * Flag to set if importing from Git
     */
    public readonly importFromGit!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique identifier of the organization.
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Contains parameters for importing a pipeline
     */
    public readonly pipelineImportRequest!: pulumi.Output<outputs.PlatformPipelinePipelineImportRequest | undefined>;
    /**
     * Unique identifier of the project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or
     * not passed, the tags specified in YAML should also be null.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * If true, returns Pipeline YAML with Templates applied on it.
     */
    public readonly templateApplied!: pulumi.Output<boolean | undefined>;
    /**
     * Pipeline YAML after resolving Templates (returned as a String).
     */
    public readonly templateAppliedPipelineYaml!: pulumi.Output<string | undefined>;
    /**
     * YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression:
     * org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}.
     * For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as
     * connectorRef: org.connectorId.
     */
    public readonly yaml!: pulumi.Output<string>;

    /**
     * Create a PlatformPipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformPipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformPipelineArgs | PlatformPipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformPipelineState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gitDetails"] = state ? state.gitDetails : undefined;
            resourceInputs["gitImportInfo"] = state ? state.gitImportInfo : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["importFromGit"] = state ? state.importFromGit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["pipelineImportRequest"] = state ? state.pipelineImportRequest : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateApplied"] = state ? state.templateApplied : undefined;
            resourceInputs["templateAppliedPipelineYaml"] = state ? state.templateAppliedPipelineYaml : undefined;
            resourceInputs["yaml"] = state ? state.yaml : undefined;
        } else {
            const args = argsOrState as PlatformPipelineArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gitDetails"] = args ? args.gitDetails : undefined;
            resourceInputs["gitImportInfo"] = args ? args.gitImportInfo : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["importFromGit"] = args ? args.importFromGit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["pipelineImportRequest"] = args ? args.pipelineImportRequest : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateApplied"] = args ? args.templateApplied : undefined;
            resourceInputs["templateAppliedPipelineYaml"] = args ? args.templateAppliedPipelineYaml : undefined;
            resourceInputs["yaml"] = args ? args.yaml : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformPipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlatformPipeline resources.
 */
export interface PlatformPipelineState {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.PlatformPipelineGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    gitImportInfo?: pulumi.Input<inputs.PlatformPipelineGitImportInfo>;
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Flag to set if importing from Git
     */
    importFromGit?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Contains parameters for importing a pipeline
     */
    pipelineImportRequest?: pulumi.Input<inputs.PlatformPipelinePipelineImportRequest>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or
     * not passed, the tags specified in YAML should also be null.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, returns Pipeline YAML with Templates applied on it.
     */
    templateApplied?: pulumi.Input<boolean>;
    /**
     * Pipeline YAML after resolving Templates (returned as a String).
     */
    templateAppliedPipelineYaml?: pulumi.Input<string>;
    /**
     * YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression:
     * org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}.
     * For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as
     * connectorRef: org.connectorId.
     */
    yaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlatformPipeline resource.
 */
export interface PlatformPipelineArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Contains parameters related to creating an Entity for Git Experience.
     */
    gitDetails?: pulumi.Input<inputs.PlatformPipelineGitDetails>;
    /**
     * Contains Git Information for importing entities from Git
     */
    gitImportInfo?: pulumi.Input<inputs.PlatformPipelineGitImportInfo>;
    /**
     * Unique identifier of the resource.
     */
    identifier: pulumi.Input<string>;
    /**
     * Flag to set if importing from Git
     */
    importFromGit?: pulumi.Input<boolean>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId: pulumi.Input<string>;
    /**
     * Contains parameters for importing a pipeline
     */
    pipelineImportRequest?: pulumi.Input<inputs.PlatformPipelinePipelineImportRequest>;
    /**
     * Unique identifier of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags to associate with the resource. These should match the tag value passed in the YAML; if this parameter is null or
     * not passed, the tags specified in YAML should also be null.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, returns Pipeline YAML with Templates applied on it.
     */
    templateApplied?: pulumi.Input<boolean>;
    /**
     * Pipeline YAML after resolving Templates (returned as a String).
     */
    templateAppliedPipelineYaml?: pulumi.Input<string>;
    /**
     * YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression:
     * org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}.
     * For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as
     * connectorRef: org.connectorId.
     */
    yaml?: pulumi.Input<string>;
}
