// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BackupUnitTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface DatacenterTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface FirewallTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetDatacenterTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetImageTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetK8sClusterTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetK8sNodePoolAutoScaling {
    maxNodeCount: number;
    minNodeCount: number;
}

export interface GetK8sNodePoolMaintenanceWindow {
    dayOfTheWeek: string;
    time: string;
}

export interface GetK8sNodePoolTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetLanIpFailover {
    ip: string;
    nicUuid: string;
}

export interface GetLanTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetLocationTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetPrivateCrossconnectConnectableDatacenter {
    id: string;
    location: string;
    name: string;
}

export interface GetPrivateCrossconnectPeer {
    datacenterId: string;
    datacenterName: string;
    lanId: string;
    lanName: string;
    location: string;
}

export interface GetPrivateCrossconnectTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetResourceTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetServerCdrom {
    cpuHotPlug: boolean;
    cpuHotUnplug: boolean;
    description: string;
    discScsiHotPlug: boolean;
    discScsiHotUnplug: boolean;
    discVirtioHotPlug: boolean;
    discVirtioHotUnplug: boolean;
    id: string;
    imageAliases: string[];
    imageType: string;
    licenceType: string;
    location: string;
    name: string;
    nicHotPlug: boolean;
    nicHotUnplug: boolean;
    public: boolean;
    ramHotPlug: boolean;
    ramHotUnplug: boolean;
    size: number;
}

export interface GetServerNic {
    dhcp: boolean;
    firewallActive: boolean;
    firewallRules: outputs.GetServerNicFirewallRule[];
    id: string;
    ips: string[];
    lan: number;
    mac: string;
    name: string;
    nat: boolean;
}

export interface GetServerNicFirewallRule {
    icmpCode: number;
    icmpType: number;
    id: string;
    name: string;
    portRangeEnd: number;
    portRangeStart: number;
    protocol: string;
    sourceIp: string;
    sourceMac: string;
    targetIp: string;
}

export interface GetServerTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetServerVolume {
    availabilityZone: string;
    bus: string;
    cpuHotPlug: boolean;
    cpuHotUnplug: boolean;
    deviceNumber: number;
    discScsiHotPlug: boolean;
    discScsiHotUnplug: boolean;
    discVirtioHotPlug: boolean;
    discVirtioHotUnplug: boolean;
    id: string;
    image: string;
    imageAlias: string;
    imagePassword: string;
    licenceType: string;
    name: string;
    nicHotPlug: boolean;
    nicHotUnplug: boolean;
    ramHotPlug: boolean;
    ramHotUnplug: boolean;
    size: number;
    sshKeys: string[];
    type: string;
}

export interface GetSnapshotTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GroupTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GroupUser {
    administrator: boolean;
    email: string;
    firstName: string;
    forceSecAuth: boolean;
    lastName: string;
    password: string;
}

export interface IpblockTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface IpfailoverTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface K8sClusterMaintenanceWindow {
    /**
     * Day of the week when maintenance is allowed
     */
    dayOfTheWeek: string;
    /**
     * A clock time in the day when maintenance is allowed
     */
    time: string;
}

export interface K8sClusterTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface K8sNodePoolAutoScaling {
    /**
     * The maximum number of worker nodes that the node pool can scale to. Should be greater than min_node_count
     */
    maxNodeCount: number;
    /**
     * The minimum number of worker nodes the node pool can scale down to. Should be less than max_node_count
     */
    minNodeCount: number;
}

export interface K8sNodePoolMaintenanceWindow {
    /**
     * Day of the week when maintenance is allowed
     */
    dayOfTheWeek: string;
    /**
     * A clock time in the day when maintenance is allowed
     */
    time: string;
}

export interface K8sNodePoolTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface LanTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface LoadbalancerTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface NicTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface PrivateCrossconnectConnectableDatacenter {
    id: string;
    location: string;
    name: string;
}

export interface PrivateCrossconnectPeer {
    datacenterId: string;
    datacenterName: string;
    lanId: string;
    lanName: string;
    location: string;
}

export interface PrivateCrossconnectTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface S3KeyTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface ServerNic {
    dhcp?: boolean;
    firewall?: outputs.ServerNicFirewall;
    firewallActive?: boolean;
    ip?: string;
    ips: string[];
    lan: number;
    mac: string;
    name?: string;
    nat?: boolean;
}

export interface ServerNicFirewall {
    icmpCode?: string;
    icmpType?: string;
    ip: string;
    ips?: string[];
    name?: string;
    portRangeEnd?: number;
    portRangeStart?: number;
    protocol: string;
    sourceIp?: string;
    sourceMac?: string;
    targetIp?: string;
}

export interface ServerTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface ServerVolume {
    availabilityZone: string;
    bus: string;
    diskType: string;
    imageAliases: string[];
    /**
     * @deprecated Deprecated
     */
    imageName?: string;
    /**
     * @deprecated Deprecated
     */
    imagePassword?: string;
    licenceType: string;
    name?: string;
    size: number;
    /**
     * @deprecated Deprecated
     */
    sshKeyPaths?: string[];
}

export interface ShareTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface SnapshotTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface UserTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface VolumeTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

