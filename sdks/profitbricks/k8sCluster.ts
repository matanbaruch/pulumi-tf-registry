// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sCluster extends pulumi.CustomResource {
    /**
     * Get an existing K8sCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sClusterState, opts?: pulumi.CustomResourceOptions): K8sCluster {
        return new K8sCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'profitbricks:index/k8sCluster:K8sCluster';

    /**
     * Returns true if the given object is an instance of K8sCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sCluster.__pulumiType;
    }

    /**
     * The desired kubernetes version
     */
    public readonly k8sVersion!: pulumi.Output<string | undefined>;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.K8sClusterMaintenanceWindow | undefined>;
    /**
     * The desired name for the cluster
     */
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.K8sClusterTimeouts | undefined>;

    /**
     * Create a K8sCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: K8sClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sClusterArgs | K8sClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sClusterState | undefined;
            resourceInputs["k8sVersion"] = state ? state.k8sVersion : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as K8sClusterArgs | undefined;
            resourceInputs["k8sVersion"] = args ? args.k8sVersion : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8sCluster resources.
 */
export interface K8sClusterState {
    /**
     * The desired kubernetes version
     */
    k8sVersion?: pulumi.Input<string>;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    maintenanceWindow?: pulumi.Input<inputs.K8sClusterMaintenanceWindow>;
    /**
     * The desired name for the cluster
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sClusterTimeouts>;
}

/**
 * The set of arguments for constructing a K8sCluster resource.
 */
export interface K8sClusterArgs {
    /**
     * The desired kubernetes version
     */
    k8sVersion?: pulumi.Input<string>;
    /**
     * A maintenance window comprise of a day of the week and a time for maintenance to be allowed
     */
    maintenanceWindow?: pulumi.Input<inputs.K8sClusterMaintenanceWindow>;
    /**
     * The desired name for the cluster
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sClusterTimeouts>;
}
