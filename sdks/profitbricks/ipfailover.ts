// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ipfailover extends pulumi.CustomResource {
    /**
     * Get an existing Ipfailover resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpfailoverState, opts?: pulumi.CustomResourceOptions): Ipfailover {
        return new Ipfailover(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'profitbricks:index/ipfailover:Ipfailover';

    /**
     * Returns true if the given object is an instance of Ipfailover.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipfailover {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipfailover.__pulumiType;
    }

    public readonly datacenterId!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly lanId!: pulumi.Output<string>;
    public readonly nicuuid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IpfailoverTimeouts | undefined>;

    /**
     * Create a Ipfailover resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpfailoverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpfailoverArgs | IpfailoverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpfailoverState | undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["lanId"] = state ? state.lanId : undefined;
            resourceInputs["nicuuid"] = state ? state.nicuuid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IpfailoverArgs | undefined;
            if ((!args || args.datacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenterId'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.lanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lanId'");
            }
            if ((!args || args.nicuuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nicuuid'");
            }
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["lanId"] = args ? args.lanId : undefined;
            resourceInputs["nicuuid"] = args ? args.nicuuid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipfailover.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ipfailover resources.
 */
export interface IpfailoverState {
    datacenterId?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    lanId?: pulumi.Input<string>;
    nicuuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IpfailoverTimeouts>;
}

/**
 * The set of arguments for constructing a Ipfailover resource.
 */
export interface IpfailoverArgs {
    datacenterId: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    lanId: pulumi.Input<string>;
    nicuuid: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IpfailoverTimeouts>;
}
