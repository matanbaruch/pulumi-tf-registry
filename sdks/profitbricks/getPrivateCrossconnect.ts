// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPrivateCrossconnect(args?: GetPrivateCrossconnectArgs, opts?: pulumi.InvokeOptions): Promise<GetPrivateCrossconnectResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("profitbricks:index/getPrivateCrossconnect:getPrivateCrossconnect", {
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPrivateCrossconnect.
 */
export interface GetPrivateCrossconnectArgs {
    description?: string;
    id?: string;
    name?: string;
    timeouts?: inputs.GetPrivateCrossconnectTimeouts;
}

/**
 * A collection of values returned by getPrivateCrossconnect.
 */
export interface GetPrivateCrossconnectResult {
    readonly connectableDatacenters: outputs.GetPrivateCrossconnectConnectableDatacenter[];
    readonly description?: string;
    readonly id?: string;
    readonly name?: string;
    readonly peers: outputs.GetPrivateCrossconnectPeer[];
    readonly timeouts?: outputs.GetPrivateCrossconnectTimeouts;
}
export function getPrivateCrossconnectOutput(args?: GetPrivateCrossconnectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPrivateCrossconnectResult> {
    return pulumi.output(args).apply((a: any) => getPrivateCrossconnect(a, opts))
}

/**
 * A collection of arguments for invoking getPrivateCrossconnect.
 */
export interface GetPrivateCrossconnectOutputArgs {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetPrivateCrossconnectTimeoutsArgs>;
}
