// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BackupUnitArgs, BackupUnitState } from "./backupUnit";
export type BackupUnit = import("./backupUnit").BackupUnit;
export const BackupUnit: typeof import("./backupUnit").BackupUnit = null as any;
utilities.lazyLoad(exports, ["BackupUnit"], () => require("./backupUnit"));

export { DatacenterArgs, DatacenterState } from "./datacenter";
export type Datacenter = import("./datacenter").Datacenter;
export const Datacenter: typeof import("./datacenter").Datacenter = null as any;
utilities.lazyLoad(exports, ["Datacenter"], () => require("./datacenter"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { GetDatacenterArgs, GetDatacenterResult, GetDatacenterOutputArgs } from "./getDatacenter";
export const getDatacenter: typeof import("./getDatacenter").getDatacenter = null as any;
export const getDatacenterOutput: typeof import("./getDatacenter").getDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenter","getDatacenterOutput"], () => require("./getDatacenter"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetK8sClusterArgs, GetK8sClusterResult, GetK8sClusterOutputArgs } from "./getK8sCluster";
export const getK8sCluster: typeof import("./getK8sCluster").getK8sCluster = null as any;
export const getK8sClusterOutput: typeof import("./getK8sCluster").getK8sClusterOutput = null as any;
utilities.lazyLoad(exports, ["getK8sCluster","getK8sClusterOutput"], () => require("./getK8sCluster"));

export { GetK8sNodePoolArgs, GetK8sNodePoolResult, GetK8sNodePoolOutputArgs } from "./getK8sNodePool";
export const getK8sNodePool: typeof import("./getK8sNodePool").getK8sNodePool = null as any;
export const getK8sNodePoolOutput: typeof import("./getK8sNodePool").getK8sNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getK8sNodePool","getK8sNodePoolOutput"], () => require("./getK8sNodePool"));

export { GetLanArgs, GetLanResult, GetLanOutputArgs } from "./getLan";
export const getLan: typeof import("./getLan").getLan = null as any;
export const getLanOutput: typeof import("./getLan").getLanOutput = null as any;
utilities.lazyLoad(exports, ["getLan","getLanOutput"], () => require("./getLan"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetPrivateCrossconnectArgs, GetPrivateCrossconnectResult, GetPrivateCrossconnectOutputArgs } from "./getPrivateCrossconnect";
export const getPrivateCrossconnect: typeof import("./getPrivateCrossconnect").getPrivateCrossconnect = null as any;
export const getPrivateCrossconnectOutput: typeof import("./getPrivateCrossconnect").getPrivateCrossconnectOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateCrossconnect","getPrivateCrossconnectOutput"], () => require("./getPrivateCrossconnect"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { IpblockArgs, IpblockState } from "./ipblock";
export type Ipblock = import("./ipblock").Ipblock;
export const Ipblock: typeof import("./ipblock").Ipblock = null as any;
utilities.lazyLoad(exports, ["Ipblock"], () => require("./ipblock"));

export { IpfailoverArgs, IpfailoverState } from "./ipfailover";
export type Ipfailover = import("./ipfailover").Ipfailover;
export const Ipfailover: typeof import("./ipfailover").Ipfailover = null as any;
utilities.lazyLoad(exports, ["Ipfailover"], () => require("./ipfailover"));

export { K8sClusterArgs, K8sClusterState } from "./k8sCluster";
export type K8sCluster = import("./k8sCluster").K8sCluster;
export const K8sCluster: typeof import("./k8sCluster").K8sCluster = null as any;
utilities.lazyLoad(exports, ["K8sCluster"], () => require("./k8sCluster"));

export { K8sNodePoolArgs, K8sNodePoolState } from "./k8sNodePool";
export type K8sNodePool = import("./k8sNodePool").K8sNodePool;
export const K8sNodePool: typeof import("./k8sNodePool").K8sNodePool = null as any;
utilities.lazyLoad(exports, ["K8sNodePool"], () => require("./k8sNodePool"));

export { LanArgs, LanState } from "./lan";
export type Lan = import("./lan").Lan;
export const Lan: typeof import("./lan").Lan = null as any;
utilities.lazyLoad(exports, ["Lan"], () => require("./lan"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { NicArgs, NicState } from "./nic";
export type Nic = import("./nic").Nic;
export const Nic: typeof import("./nic").Nic = null as any;
utilities.lazyLoad(exports, ["Nic"], () => require("./nic"));

export { PrivateCrossconnectArgs, PrivateCrossconnectState } from "./privateCrossconnect";
export type PrivateCrossconnect = import("./privateCrossconnect").PrivateCrossconnect;
export const PrivateCrossconnect: typeof import("./privateCrossconnect").PrivateCrossconnect = null as any;
utilities.lazyLoad(exports, ["PrivateCrossconnect"], () => require("./privateCrossconnect"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { S3KeyArgs, S3KeyState } from "./s3key";
export type S3Key = import("./s3key").S3Key;
export const S3Key: typeof import("./s3key").S3Key = null as any;
utilities.lazyLoad(exports, ["S3Key"], () => require("./s3key"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ShareArgs, ShareState } from "./share";
export type Share = import("./share").Share;
export const Share: typeof import("./share").Share = null as any;
utilities.lazyLoad(exports, ["Share"], () => require("./share"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "profitbricks:index/backupUnit:BackupUnit":
                return new BackupUnit(name, <any>undefined, { urn })
            case "profitbricks:index/datacenter:Datacenter":
                return new Datacenter(name, <any>undefined, { urn })
            case "profitbricks:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "profitbricks:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "profitbricks:index/ipblock:Ipblock":
                return new Ipblock(name, <any>undefined, { urn })
            case "profitbricks:index/ipfailover:Ipfailover":
                return new Ipfailover(name, <any>undefined, { urn })
            case "profitbricks:index/k8sCluster:K8sCluster":
                return new K8sCluster(name, <any>undefined, { urn })
            case "profitbricks:index/k8sNodePool:K8sNodePool":
                return new K8sNodePool(name, <any>undefined, { urn })
            case "profitbricks:index/lan:Lan":
                return new Lan(name, <any>undefined, { urn })
            case "profitbricks:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "profitbricks:index/nic:Nic":
                return new Nic(name, <any>undefined, { urn })
            case "profitbricks:index/privateCrossconnect:PrivateCrossconnect":
                return new PrivateCrossconnect(name, <any>undefined, { urn })
            case "profitbricks:index/s3Key:S3Key":
                return new S3Key(name, <any>undefined, { urn })
            case "profitbricks:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "profitbricks:index/share:Share":
                return new Share(name, <any>undefined, { urn })
            case "profitbricks:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "profitbricks:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "profitbricks:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("profitbricks", "index/backupUnit", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/datacenter", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/firewall", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/group", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/ipblock", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/ipfailover", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/k8sCluster", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/k8sNodePool", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/lan", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/nic", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/privateCrossconnect", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/s3Key", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/server", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/share", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/user", _module)
pulumi.runtime.registerResourceModule("profitbricks", "index/volume", _module)
pulumi.runtime.registerResourcePackage("profitbricks", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:profitbricks") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
