// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyState, opts?: pulumi.CustomResourceOptions): ApiKey {
        return new ApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycombio:index/apiKey:ApiKey';

    /**
     * Returns true if the given object is an instance of ApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiKey.__pulumiType;
    }

    /**
     * Whether the API key is disabled.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * The Environment ID the API key is scoped to.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The name of the API Key.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Permissions control what actions the API key can perform.
     */
    public readonly permissions!: pulumi.Output<outputs.ApiKeyPermission[] | undefined>;
    /**
     * The secret portion of the API key. This is only available when creating a new key.
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;
    /**
     * The type of the API key.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiKeyArgs | ApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiKeyState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ApiKeyArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiKey resources.
 */
export interface ApiKeyState {
    /**
     * Whether the API key is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The Environment ID the API key is scoped to.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The name of the API Key.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions control what actions the API key can perform.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.ApiKeyPermission>[]>;
    /**
     * The secret portion of the API key. This is only available when creating a new key.
     */
    secret?: pulumi.Input<string>;
    /**
     * The type of the API key.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiKey resource.
 */
export interface ApiKeyArgs {
    /**
     * Whether the API key is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The Environment ID the API key is scoped to.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The name of the API Key.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions control what actions the API key can perform.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.ApiKeyPermission>[]>;
    /**
     * The type of the API key.
     */
    type: pulumi.Input<string>;
}
