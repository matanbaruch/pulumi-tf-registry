// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerState, opts?: pulumi.CustomResourceOptions): Trigger {
        return new Trigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycombio:index/trigger:Trigger';

    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }

    /**
     * Control when the Trigger will send a notification.
     */
    public readonly alertType!: pulumi.Output<string>;
    /**
     * The dataset this Trigger is associated with.
     */
    public readonly dataset!: pulumi.Output<string>;
    /**
     * A description of the Trigger.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The state of the Trigger. If true, the Trigger will not be run.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * The schedule that determines when the trigger is run. When the time is within the scheduled window, the trigger will be
     * run at the specified frequency. Outside of the window, the trigger will not be run.If no schedule is specified, the
     * trigger will be run at the specified frequency at all times.
     */
    public readonly evaluationSchedules!: pulumi.Output<outputs.TriggerEvaluationSchedule[] | undefined>;
    /**
     * The interval (in seconds) in which to check the results of the query's calculation against the threshold. This value
     * must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's
     * duration.
     */
    public readonly frequency!: pulumi.Output<number>;
    /**
     * The name of the Trigger.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Query that the Trigger will execute.
     */
    public readonly queryId!: pulumi.Output<string | undefined>;
    /**
     * The QuerySpec JSON for the query that the Trigger will execute. Providing the QuerySpec JSON directly allows for
     * additional validation that the QuerySpec is valid as a Trigger Query. While the JSON can be constructed manually, it is
     * easiest to use the `honeycombio.getQuerySpecification` data source.
     */
    public readonly queryJson!: pulumi.Output<string | undefined>;
    /**
     * Zero or more recipients to notify when the resource fires.
     */
    public readonly recipients!: pulumi.Output<outputs.TriggerRecipient[] | undefined>;
    /**
     * A block describing the threshold for the Trigger to fire.
     */
    public readonly thresholds!: pulumi.Output<outputs.TriggerThreshold[] | undefined>;

    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerArgs | TriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerState | undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["evaluationSchedules"] = state ? state.evaluationSchedules : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryId"] = state ? state.queryId : undefined;
            resourceInputs["queryJson"] = state ? state.queryJson : undefined;
            resourceInputs["recipients"] = state ? state.recipients : undefined;
            resourceInputs["thresholds"] = state ? state.thresholds : undefined;
        } else {
            const args = argsOrState as TriggerArgs | undefined;
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["evaluationSchedules"] = args ? args.evaluationSchedules : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryId"] = args ? args.queryId : undefined;
            resourceInputs["queryJson"] = args ? args.queryJson : undefined;
            resourceInputs["recipients"] = args ? args.recipients : undefined;
            resourceInputs["thresholds"] = args ? args.thresholds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Trigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Trigger resources.
 */
export interface TriggerState {
    /**
     * Control when the Trigger will send a notification.
     */
    alertType?: pulumi.Input<string>;
    /**
     * The dataset this Trigger is associated with.
     */
    dataset?: pulumi.Input<string>;
    /**
     * A description of the Trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the Trigger. If true, the Trigger will not be run.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The schedule that determines when the trigger is run. When the time is within the scheduled window, the trigger will be
     * run at the specified frequency. Outside of the window, the trigger will not be run.If no schedule is specified, the
     * trigger will be run at the specified frequency at all times.
     */
    evaluationSchedules?: pulumi.Input<pulumi.Input<inputs.TriggerEvaluationSchedule>[]>;
    /**
     * The interval (in seconds) in which to check the results of the query's calculation against the threshold. This value
     * must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's
     * duration.
     */
    frequency?: pulumi.Input<number>;
    /**
     * The name of the Trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Query that the Trigger will execute.
     */
    queryId?: pulumi.Input<string>;
    /**
     * The QuerySpec JSON for the query that the Trigger will execute. Providing the QuerySpec JSON directly allows for
     * additional validation that the QuerySpec is valid as a Trigger Query. While the JSON can be constructed manually, it is
     * easiest to use the `honeycombio.getQuerySpecification` data source.
     */
    queryJson?: pulumi.Input<string>;
    /**
     * Zero or more recipients to notify when the resource fires.
     */
    recipients?: pulumi.Input<pulumi.Input<inputs.TriggerRecipient>[]>;
    /**
     * A block describing the threshold for the Trigger to fire.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.TriggerThreshold>[]>;
}

/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    /**
     * Control when the Trigger will send a notification.
     */
    alertType?: pulumi.Input<string>;
    /**
     * The dataset this Trigger is associated with.
     */
    dataset: pulumi.Input<string>;
    /**
     * A description of the Trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * The state of the Trigger. If true, the Trigger will not be run.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The schedule that determines when the trigger is run. When the time is within the scheduled window, the trigger will be
     * run at the specified frequency. Outside of the window, the trigger will not be run.If no schedule is specified, the
     * trigger will be run at the specified frequency at all times.
     */
    evaluationSchedules?: pulumi.Input<pulumi.Input<inputs.TriggerEvaluationSchedule>[]>;
    /**
     * The interval (in seconds) in which to check the results of the query's calculation against the threshold. This value
     * must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's
     * duration.
     */
    frequency?: pulumi.Input<number>;
    /**
     * The name of the Trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Query that the Trigger will execute.
     */
    queryId?: pulumi.Input<string>;
    /**
     * The QuerySpec JSON for the query that the Trigger will execute. Providing the QuerySpec JSON directly allows for
     * additional validation that the QuerySpec is valid as a Trigger Query. While the JSON can be constructed manually, it is
     * easiest to use the `honeycombio.getQuerySpecification` data source.
     */
    queryJson?: pulumi.Input<string>;
    /**
     * Zero or more recipients to notify when the resource fires.
     */
    recipients?: pulumi.Input<pulumi.Input<inputs.TriggerRecipient>[]>;
    /**
     * A block describing the threshold for the Trigger to fire.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.TriggerThreshold>[]>;
}
