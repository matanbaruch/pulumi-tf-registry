// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getQuerySpecification(args?: GetQuerySpecificationArgs, opts?: pulumi.InvokeOptions): Promise<GetQuerySpecificationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("honeycombio:index/getQuerySpecification:getQuerySpecification", {
        "breakdowns": args.breakdowns,
        "calculations": args.calculations,
        "endTime": args.endTime,
        "filterCombination": args.filterCombination,
        "filters": args.filters,
        "granularity": args.granularity,
        "havings": args.havings,
        "limit": args.limit,
        "orders": args.orders,
        "startTime": args.startTime,
        "timeRange": args.timeRange,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getQuerySpecification.
 */
export interface GetQuerySpecificationArgs {
    breakdowns?: string[];
    calculations?: inputs.GetQuerySpecificationCalculation[];
    endTime?: number;
    filterCombination?: string;
    filters?: inputs.GetQuerySpecificationFilter[];
    granularity?: number;
    havings?: inputs.GetQuerySpecificationHaving[];
    limit?: number;
    orders?: inputs.GetQuerySpecificationOrder[];
    startTime?: number;
    timeRange?: number;
}

/**
 * A collection of values returned by getQuerySpecification.
 */
export interface GetQuerySpecificationResult {
    readonly breakdowns?: string[];
    readonly calculations?: outputs.GetQuerySpecificationCalculation[];
    readonly endTime?: number;
    readonly filterCombination?: string;
    readonly filters?: outputs.GetQuerySpecificationFilter[];
    readonly granularity?: number;
    readonly havings?: outputs.GetQuerySpecificationHaving[];
    /**
     * @deprecated Deprecated
     */
    readonly id: string;
    readonly json: string;
    readonly limit?: number;
    readonly orders?: outputs.GetQuerySpecificationOrder[];
    readonly startTime?: number;
    readonly timeRange?: number;
}
export function getQuerySpecificationOutput(args?: GetQuerySpecificationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQuerySpecificationResult> {
    return pulumi.output(args).apply((a: any) => getQuerySpecification(a, opts))
}

/**
 * A collection of arguments for invoking getQuerySpecification.
 */
export interface GetQuerySpecificationOutputArgs {
    breakdowns?: pulumi.Input<pulumi.Input<string>[]>;
    calculations?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationCalculationArgs>[]>;
    endTime?: pulumi.Input<number>;
    filterCombination?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationFilterArgs>[]>;
    granularity?: pulumi.Input<number>;
    havings?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationHavingArgs>[]>;
    limit?: pulumi.Input<number>;
    orders?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationOrderArgs>[]>;
    startTime?: pulumi.Input<number>;
    timeRange?: pulumi.Input<number>;
}
