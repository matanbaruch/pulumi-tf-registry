// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetAgentProvider {
    /**
     * Agent provider id
     */
    id: number;
    /**
     * Agent provider name
     */
    name: string;
}

export interface GetAgentSearchAgent {
    /**
     * A unique agent identifier. Usually machine id or other unique UUID with a workspace id prefix (to scope this agent to workspace).
     */
    deviceId: string;
    /**
     * Unique identifier for the agent
     */
    id: number;
    /**
     * Current status of the agent.
     */
    isOnline: boolean;
    /**
     * Indicates if it's a virtual agent.
     */
    isVirtual: boolean;
    /**
     * City, where your agent is based
     */
    locationCity: string;
    /**
     * Agent's location country two-letter code.
     */
    locationCountry: string;
    /**
     * Date and time when this agent was modified. Formatted as an ISO 8601 date time string.
     */
    modifiedAt: string;
    /**
     * Name of the agent as it appears in Platform UI
     */
    name: string;
    /**
     * Returns provider of agent's endpoint
     */
    provider: outputs.GetAgentSearchAgentProvider;
    /**
     * IP address of the agent in IPv4 format
     */
    publicIpv4: string;
    /**
     * Current status of the agent.
     */
    status: string;
    /**
     * Agent specific words that can help you to create some rules around specific tags.
     */
    tags: outputs.GetAgentSearchAgentTag[];
    /**
     * Possible types: LINUX, MACOS, WINDOWS, VIRTUAL
     */
    type: string;
    /**
     * Version of the agent.
     */
    version: string;
}

export interface GetAgentSearchAgentProvider {
    /**
     * Agent provider id
     */
    id: number;
    /**
     * Agent provider name
     */
    name: string;
}

export interface GetAgentSearchAgentTag {
    /**
     * Agent tag id
     */
    id: number;
    /**
     * Agent tag name
     */
    name: string;
}

export interface GetAgentSearchFilter {
    /**
     * Filter by agent ID
     */
    ids?: number[];
    /**
     * Filter by agent location country
     */
    locationCountries?: string[];
    /**
     * Filter by agent modified at from date
     */
    modifiedAtFrom?: string;
    /**
     * Filter by agent modified at to date
     */
    modifiedAtTo?: string;
    /**
     * Filter by agent name
     */
    name?: string;
    /**
     * Filter by agent provider ID
     */
    providerIds?: number[];
    /**
     * Filter by agent status
     */
    statuses?: string[];
    /**
     * Filter by agent tag ID
     */
    tagIds?: number[];
    /**
     * Filter by agent tag name
     */
    tagNames?: string[];
    /**
     * Filter by agent type
     */
    types?: string[];
    /**
     * Filter by agent version
     */
    versions?: string[];
}

export interface GetAgentTag {
    /**
     * Agent tag id
     */
    id: number;
    /**
     * Agent tag name
     */
    name: string;
}

export interface GetNetworkConnectionServicesFilter {
    /**
     * Filter service list by agent ID
     */
    agentId?: number;
    /**
     * Filter service list by subnet ID
     */
    serviceId?: number;
    /**
     * Filter service list by connection service name substring that is running on agent
     */
    serviceNameSubstring?: string;
    /**
     * Filter service list by connection service type that is running on agent
     */
    serviceType?: string;
}

export interface GetNetworkConnectionServicesService {
    /**
     * Network connection agent ID that service is created
     */
    agentId: number;
    /**
     * Is network connection service enabled?
     */
    enabled: boolean;
    /**
     * Network connection service ID
     */
    id: number;
    /**
     * Network connection service IP
     */
    ip: string;
    /**
     * Network connection service name
     */
    name: string;
    /**
     * Network connection service type (Kubernetes, Docker, etc.)
     */
    type: string;
}

export interface NetworkConnectionMeshConnection {
    /**
     * Agent 1 ID
     */
    agent1Id: number;
    /**
     * Agent 2 ID
     */
    agent2Id: number;
    /**
     * Unique identifier for the connection
     */
    connectionGroupId: number;
    /**
     * List of services inside in network connection mesh
     */
    services: outputs.NetworkConnectionMeshConnectionService[];
}

export interface NetworkConnectionMeshConnectionService {
    /**
     * Network connection agent ID that service is created
     */
    agentId: number;
    /**
     * Is network connection service enabled?
     */
    enabled: boolean;
    /**
     * Network connection service ID
     */
    id: number;
    /**
     * Network connection service IP
     */
    ip: string;
    /**
     * Network connection service name
     */
    name: string;
    /**
     * Network connection service type (Kubernetes, Docker, etc.)
     */
    type: string;
}

export interface NetworkConnectionService {
    /**
     * Network connection agent ID that service is created
     */
    agentId: number;
    /**
     * Is network connection service enabled?
     */
    enabled: boolean;
    /**
     * Network connection service ID
     */
    id: number;
    /**
     * Network connection service IP
     */
    ip: string;
    /**
     * Network connection service name
     */
    name: string;
    /**
     * Network connection service type (Kubernetes, Docker, etc.)
     */
    type: string;
}

export interface NetworkConnectionServicesService {
    /**
     * Should network connection service be enabled?
     */
    enabled: boolean;
    /**
     * Network connection service ID
     */
    id: number;
}

