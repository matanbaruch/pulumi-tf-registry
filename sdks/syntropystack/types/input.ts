// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetAgentSearchFilter {
    /**
     * Filter by agent ID
     */
    ids?: number[];
    /**
     * Filter by agent location country
     */
    locationCountries?: string[];
    /**
     * Filter by agent modified at from date
     */
    modifiedAtFrom?: string;
    /**
     * Filter by agent modified at to date
     */
    modifiedAtTo?: string;
    /**
     * Filter by agent name
     */
    name?: string;
    /**
     * Filter by agent provider ID
     */
    providerIds?: number[];
    /**
     * Filter by agent status
     */
    statuses?: string[];
    /**
     * Filter by agent tag ID
     */
    tagIds?: number[];
    /**
     * Filter by agent tag name
     */
    tagNames?: string[];
    /**
     * Filter by agent type
     */
    types?: string[];
    /**
     * Filter by agent version
     */
    versions?: string[];
}

export interface GetAgentSearchFilterArgs {
    /**
     * Filter by agent ID
     */
    ids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Filter by agent location country
     */
    locationCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by agent modified at from date
     */
    modifiedAtFrom?: pulumi.Input<string>;
    /**
     * Filter by agent modified at to date
     */
    modifiedAtTo?: pulumi.Input<string>;
    /**
     * Filter by agent name
     */
    name?: pulumi.Input<string>;
    /**
     * Filter by agent provider ID
     */
    providerIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Filter by agent status
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by agent tag ID
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Filter by agent tag name
     */
    tagNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by agent type
     */
    types?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by agent version
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetNetworkConnectionServicesFilter {
    /**
     * Filter service list by agent ID
     */
    agentId?: number;
    /**
     * Filter service list by subnet ID
     */
    serviceId?: number;
    /**
     * Filter service list by connection service name substring that is running on agent
     */
    serviceNameSubstring?: string;
    /**
     * Filter service list by connection service type that is running on agent
     */
    serviceType?: string;
}

export interface GetNetworkConnectionServicesFilterArgs {
    /**
     * Filter service list by agent ID
     */
    agentId?: pulumi.Input<number>;
    /**
     * Filter service list by subnet ID
     */
    serviceId?: pulumi.Input<number>;
    /**
     * Filter service list by connection service name substring that is running on agent
     */
    serviceNameSubstring?: pulumi.Input<string>;
    /**
     * Filter service list by connection service type that is running on agent
     */
    serviceType?: pulumi.Input<string>;
}

export interface NetworkConnectionMeshConnection {
    /**
     * Agent 1 ID
     */
    agent1Id?: pulumi.Input<number>;
    /**
     * Agent 2 ID
     */
    agent2Id?: pulumi.Input<number>;
    /**
     * Unique identifier for the connection
     */
    connectionGroupId?: pulumi.Input<number>;
    /**
     * List of services inside in network connection mesh
     */
    services?: pulumi.Input<pulumi.Input<inputs.NetworkConnectionMeshConnectionService>[]>;
}

export interface NetworkConnectionMeshConnectionService {
    /**
     * Network connection agent ID that service is created
     */
    agentId?: pulumi.Input<number>;
    /**
     * Is network connection service enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Network connection service ID
     */
    id?: pulumi.Input<number>;
    /**
     * Network connection service IP
     */
    ip?: pulumi.Input<string>;
    /**
     * Network connection service name
     */
    name?: pulumi.Input<string>;
    /**
     * Network connection service type (Kubernetes, Docker, etc.)
     */
    type?: pulumi.Input<string>;
}

export interface NetworkConnectionService {
    /**
     * Network connection agent ID that service is created
     */
    agentId?: pulumi.Input<number>;
    /**
     * Is network connection service enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Network connection service ID
     */
    id?: pulumi.Input<number>;
    /**
     * Network connection service IP
     */
    ip?: pulumi.Input<string>;
    /**
     * Network connection service name
     */
    name?: pulumi.Input<string>;
    /**
     * Network connection service type (Kubernetes, Docker, etc.)
     */
    type?: pulumi.Input<string>;
}

export interface NetworkConnectionServicesService {
    /**
     * Should network connection service be enabled?
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Network connection service ID
     */
    id: pulumi.Input<number>;
}
