// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentArgs, AgentState } from "./agent";
export type Agent = import("./agent").Agent;
export const Agent: typeof import("./agent").Agent = null as any;
utilities.lazyLoad(exports, ["Agent"], () => require("./agent"));

export { GetAgentArgs, GetAgentResult, GetAgentOutputArgs } from "./getAgent";
export const getAgent: typeof import("./getAgent").getAgent = null as any;
export const getAgentOutput: typeof import("./getAgent").getAgentOutput = null as any;
utilities.lazyLoad(exports, ["getAgent","getAgentOutput"], () => require("./getAgent"));

export { GetAgentSearchArgs, GetAgentSearchResult, GetAgentSearchOutputArgs } from "./getAgentSearch";
export const getAgentSearch: typeof import("./getAgentSearch").getAgentSearch = null as any;
export const getAgentSearchOutput: typeof import("./getAgentSearch").getAgentSearchOutput = null as any;
utilities.lazyLoad(exports, ["getAgentSearch","getAgentSearchOutput"], () => require("./getAgentSearch"));

export { GetNetworkConnectionServicesArgs, GetNetworkConnectionServicesResult, GetNetworkConnectionServicesOutputArgs } from "./getNetworkConnectionServices";
export const getNetworkConnectionServices: typeof import("./getNetworkConnectionServices").getNetworkConnectionServices = null as any;
export const getNetworkConnectionServicesOutput: typeof import("./getNetworkConnectionServices").getNetworkConnectionServicesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkConnectionServices","getNetworkConnectionServicesOutput"], () => require("./getNetworkConnectionServices"));

export { NetworkConnectionArgs, NetworkConnectionState } from "./networkConnection";
export type NetworkConnection = import("./networkConnection").NetworkConnection;
export const NetworkConnection: typeof import("./networkConnection").NetworkConnection = null as any;
utilities.lazyLoad(exports, ["NetworkConnection"], () => require("./networkConnection"));

export { NetworkConnectionMeshArgs, NetworkConnectionMeshState } from "./networkConnectionMesh";
export type NetworkConnectionMesh = import("./networkConnectionMesh").NetworkConnectionMesh;
export const NetworkConnectionMesh: typeof import("./networkConnectionMesh").NetworkConnectionMesh = null as any;
utilities.lazyLoad(exports, ["NetworkConnectionMesh"], () => require("./networkConnectionMesh"));

export { NetworkConnectionServicesArgs, NetworkConnectionServicesState } from "./networkConnectionServices";
export type NetworkConnectionServices = import("./networkConnectionServices").NetworkConnectionServices;
export const NetworkConnectionServices: typeof import("./networkConnectionServices").NetworkConnectionServices = null as any;
utilities.lazyLoad(exports, ["NetworkConnectionServices"], () => require("./networkConnectionServices"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "syntropystack:index/agent:Agent":
                return new Agent(name, <any>undefined, { urn })
            case "syntropystack:index/networkConnection:NetworkConnection":
                return new NetworkConnection(name, <any>undefined, { urn })
            case "syntropystack:index/networkConnectionMesh:NetworkConnectionMesh":
                return new NetworkConnectionMesh(name, <any>undefined, { urn })
            case "syntropystack:index/networkConnectionServices:NetworkConnectionServices":
                return new NetworkConnectionServices(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("syntropystack", "index/agent", _module)
pulumi.runtime.registerResourceModule("syntropystack", "index/networkConnection", _module)
pulumi.runtime.registerResourceModule("syntropystack", "index/networkConnectionMesh", _module)
pulumi.runtime.registerResourceModule("syntropystack", "index/networkConnectionServices", _module)
pulumi.runtime.registerResourcePackage("syntropystack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:syntropystack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
