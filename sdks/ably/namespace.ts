// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace {
        return new Namespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ably:index/namespace:Namespace';

    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Namespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }

    /**
     * The application ID.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Require clients to be authenticated to use channels in this namespace.
     */
    public readonly authenticated!: pulumi.Output<boolean>;
    /**
     * If true, channels within this namespace will start batching inbound messages instead of sending them out immediately to
     * subscribers as per the configured policy.
     */
    public readonly batchingEnabled!: pulumi.Output<boolean>;
    /**
     * When configured, sets the maximium batching interval in the channel.
     */
    public readonly batchingInterval!: pulumi.Output<number>;
    /**
     * When configured, sets the policy for message batching.
     */
    public readonly batchingPolicy!: pulumi.Output<string>;
    /**
     * If true, messages received on a channel will contain a unique timeserial that can be referenced by later messages for
     * use with message interactions.
     */
    public readonly exposeTimeserial!: pulumi.Output<boolean>;
    /**
     * If true, the last message on each channel will persist for 365 days.
     */
    public readonly persistLast!: pulumi.Output<boolean>;
    /**
     * If true, messages will be stored for 24 hours.
     */
    public readonly persisted!: pulumi.Output<boolean>;
    /**
     * If true, publishing messages with a push payload in the extras field is permitted.
     */
    public readonly pushEnabled!: pulumi.Output<boolean>;
    /**
     * If true, only clients that are connected using TLS will be permitted to subscribe.
     */
    public readonly tlsOnly!: pulumi.Output<boolean>;

    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceArgs | NamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["authenticated"] = state ? state.authenticated : undefined;
            resourceInputs["batchingEnabled"] = state ? state.batchingEnabled : undefined;
            resourceInputs["batchingInterval"] = state ? state.batchingInterval : undefined;
            resourceInputs["batchingPolicy"] = state ? state.batchingPolicy : undefined;
            resourceInputs["exposeTimeserial"] = state ? state.exposeTimeserial : undefined;
            resourceInputs["persistLast"] = state ? state.persistLast : undefined;
            resourceInputs["persisted"] = state ? state.persisted : undefined;
            resourceInputs["pushEnabled"] = state ? state.pushEnabled : undefined;
            resourceInputs["tlsOnly"] = state ? state.tlsOnly : undefined;
        } else {
            const args = argsOrState as NamespaceArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["authenticated"] = args ? args.authenticated : undefined;
            resourceInputs["batchingEnabled"] = args ? args.batchingEnabled : undefined;
            resourceInputs["batchingInterval"] = args ? args.batchingInterval : undefined;
            resourceInputs["batchingPolicy"] = args ? args.batchingPolicy : undefined;
            resourceInputs["exposeTimeserial"] = args ? args.exposeTimeserial : undefined;
            resourceInputs["persistLast"] = args ? args.persistLast : undefined;
            resourceInputs["persisted"] = args ? args.persisted : undefined;
            resourceInputs["pushEnabled"] = args ? args.pushEnabled : undefined;
            resourceInputs["tlsOnly"] = args ? args.tlsOnly : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Namespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * The application ID.
     */
    appId?: pulumi.Input<string>;
    /**
     * Require clients to be authenticated to use channels in this namespace.
     */
    authenticated?: pulumi.Input<boolean>;
    /**
     * If true, channels within this namespace will start batching inbound messages instead of sending them out immediately to
     * subscribers as per the configured policy.
     */
    batchingEnabled?: pulumi.Input<boolean>;
    /**
     * When configured, sets the maximium batching interval in the channel.
     */
    batchingInterval?: pulumi.Input<number>;
    /**
     * When configured, sets the policy for message batching.
     */
    batchingPolicy?: pulumi.Input<string>;
    /**
     * If true, messages received on a channel will contain a unique timeserial that can be referenced by later messages for
     * use with message interactions.
     */
    exposeTimeserial?: pulumi.Input<boolean>;
    /**
     * If true, the last message on each channel will persist for 365 days.
     */
    persistLast?: pulumi.Input<boolean>;
    /**
     * If true, messages will be stored for 24 hours.
     */
    persisted?: pulumi.Input<boolean>;
    /**
     * If true, publishing messages with a push payload in the extras field is permitted.
     */
    pushEnabled?: pulumi.Input<boolean>;
    /**
     * If true, only clients that are connected using TLS will be permitted to subscribe.
     */
    tlsOnly?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * The application ID.
     */
    appId: pulumi.Input<string>;
    /**
     * Require clients to be authenticated to use channels in this namespace.
     */
    authenticated?: pulumi.Input<boolean>;
    /**
     * If true, channels within this namespace will start batching inbound messages instead of sending them out immediately to
     * subscribers as per the configured policy.
     */
    batchingEnabled?: pulumi.Input<boolean>;
    /**
     * When configured, sets the maximium batching interval in the channel.
     */
    batchingInterval?: pulumi.Input<number>;
    /**
     * When configured, sets the policy for message batching.
     */
    batchingPolicy?: pulumi.Input<string>;
    /**
     * If true, messages received on a channel will contain a unique timeserial that can be referenced by later messages for
     * use with message interactions.
     */
    exposeTimeserial?: pulumi.Input<boolean>;
    /**
     * If true, the last message on each channel will persist for 365 days.
     */
    persistLast?: pulumi.Input<boolean>;
    /**
     * If true, messages will be stored for 24 hours.
     */
    persisted?: pulumi.Input<boolean>;
    /**
     * If true, publishing messages with a push payload in the extras field is permitted.
     */
    pushEnabled?: pulumi.Input<boolean>;
    /**
     * If true, only clients that are connected using TLS will be permitted to subscribe.
     */
    tlsOnly?: pulumi.Input<boolean>;
}
