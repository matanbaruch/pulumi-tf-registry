// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { RuleAmqpArgs, RuleAmqpState } from "./ruleAmqp";
export type RuleAmqp = import("./ruleAmqp").RuleAmqp;
export const RuleAmqp: typeof import("./ruleAmqp").RuleAmqp = null as any;
utilities.lazyLoad(exports, ["RuleAmqp"], () => require("./ruleAmqp"));

export { RuleAmqpExternalArgs, RuleAmqpExternalState } from "./ruleAmqpExternal";
export type RuleAmqpExternal = import("./ruleAmqpExternal").RuleAmqpExternal;
export const RuleAmqpExternal: typeof import("./ruleAmqpExternal").RuleAmqpExternal = null as any;
utilities.lazyLoad(exports, ["RuleAmqpExternal"], () => require("./ruleAmqpExternal"));

export { RuleAzureFunctionArgs, RuleAzureFunctionState } from "./ruleAzureFunction";
export type RuleAzureFunction = import("./ruleAzureFunction").RuleAzureFunction;
export const RuleAzureFunction: typeof import("./ruleAzureFunction").RuleAzureFunction = null as any;
utilities.lazyLoad(exports, ["RuleAzureFunction"], () => require("./ruleAzureFunction"));

export { RuleCloudflareWorkerArgs, RuleCloudflareWorkerState } from "./ruleCloudflareWorker";
export type RuleCloudflareWorker = import("./ruleCloudflareWorker").RuleCloudflareWorker;
export const RuleCloudflareWorker: typeof import("./ruleCloudflareWorker").RuleCloudflareWorker = null as any;
utilities.lazyLoad(exports, ["RuleCloudflareWorker"], () => require("./ruleCloudflareWorker"));

export { RuleGoogleFunctionArgs, RuleGoogleFunctionState } from "./ruleGoogleFunction";
export type RuleGoogleFunction = import("./ruleGoogleFunction").RuleGoogleFunction;
export const RuleGoogleFunction: typeof import("./ruleGoogleFunction").RuleGoogleFunction = null as any;
utilities.lazyLoad(exports, ["RuleGoogleFunction"], () => require("./ruleGoogleFunction"));

export { RuleHttpArgs, RuleHttpState } from "./ruleHttp";
export type RuleHttp = import("./ruleHttp").RuleHttp;
export const RuleHttp: typeof import("./ruleHttp").RuleHttp = null as any;
utilities.lazyLoad(exports, ["RuleHttp"], () => require("./ruleHttp"));

export { RuleIftttArgs, RuleIftttState } from "./ruleIfttt";
export type RuleIfttt = import("./ruleIfttt").RuleIfttt;
export const RuleIfttt: typeof import("./ruleIfttt").RuleIfttt = null as any;
utilities.lazyLoad(exports, ["RuleIfttt"], () => require("./ruleIfttt"));

export { RuleKafkaArgs, RuleKafkaState } from "./ruleKafka";
export type RuleKafka = import("./ruleKafka").RuleKafka;
export const RuleKafka: typeof import("./ruleKafka").RuleKafka = null as any;
utilities.lazyLoad(exports, ["RuleKafka"], () => require("./ruleKafka"));

export { RuleKinesisArgs, RuleKinesisState } from "./ruleKinesis";
export type RuleKinesis = import("./ruleKinesis").RuleKinesis;
export const RuleKinesis: typeof import("./ruleKinesis").RuleKinesis = null as any;
utilities.lazyLoad(exports, ["RuleKinesis"], () => require("./ruleKinesis"));

export { RuleLambdaArgs, RuleLambdaState } from "./ruleLambda";
export type RuleLambda = import("./ruleLambda").RuleLambda;
export const RuleLambda: typeof import("./ruleLambda").RuleLambda = null as any;
utilities.lazyLoad(exports, ["RuleLambda"], () => require("./ruleLambda"));

export { RulePulsarArgs, RulePulsarState } from "./rulePulsar";
export type RulePulsar = import("./rulePulsar").RulePulsar;
export const RulePulsar: typeof import("./rulePulsar").RulePulsar = null as any;
utilities.lazyLoad(exports, ["RulePulsar"], () => require("./rulePulsar"));

export { RuleSqsArgs, RuleSqsState } from "./ruleSqs";
export type RuleSqs = import("./ruleSqs").RuleSqs;
export const RuleSqs: typeof import("./ruleSqs").RuleSqs = null as any;
utilities.lazyLoad(exports, ["RuleSqs"], () => require("./ruleSqs"));

export { RuleZapierArgs, RuleZapierState } from "./ruleZapier";
export type RuleZapier = import("./ruleZapier").RuleZapier;
export const RuleZapier: typeof import("./ruleZapier").RuleZapier = null as any;
utilities.lazyLoad(exports, ["RuleZapier"], () => require("./ruleZapier"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ably:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "ably:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "ably:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "ably:index/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "ably:index/ruleAmqp:RuleAmqp":
                return new RuleAmqp(name, <any>undefined, { urn })
            case "ably:index/ruleAmqpExternal:RuleAmqpExternal":
                return new RuleAmqpExternal(name, <any>undefined, { urn })
            case "ably:index/ruleAzureFunction:RuleAzureFunction":
                return new RuleAzureFunction(name, <any>undefined, { urn })
            case "ably:index/ruleCloudflareWorker:RuleCloudflareWorker":
                return new RuleCloudflareWorker(name, <any>undefined, { urn })
            case "ably:index/ruleGoogleFunction:RuleGoogleFunction":
                return new RuleGoogleFunction(name, <any>undefined, { urn })
            case "ably:index/ruleHttp:RuleHttp":
                return new RuleHttp(name, <any>undefined, { urn })
            case "ably:index/ruleIfttt:RuleIfttt":
                return new RuleIfttt(name, <any>undefined, { urn })
            case "ably:index/ruleKafka:RuleKafka":
                return new RuleKafka(name, <any>undefined, { urn })
            case "ably:index/ruleKinesis:RuleKinesis":
                return new RuleKinesis(name, <any>undefined, { urn })
            case "ably:index/ruleLambda:RuleLambda":
                return new RuleLambda(name, <any>undefined, { urn })
            case "ably:index/rulePulsar:RulePulsar":
                return new RulePulsar(name, <any>undefined, { urn })
            case "ably:index/ruleSqs:RuleSqs":
                return new RuleSqs(name, <any>undefined, { urn })
            case "ably:index/ruleZapier:RuleZapier":
                return new RuleZapier(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ably", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("ably", "index/app", _module)
pulumi.runtime.registerResourceModule("ably", "index/namespace", _module)
pulumi.runtime.registerResourceModule("ably", "index/queue", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleAmqp", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleAmqpExternal", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleAzureFunction", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleCloudflareWorker", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleGoogleFunction", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleHttp", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleIfttt", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleKafka", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleKinesis", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleLambda", _module)
pulumi.runtime.registerResourceModule("ably", "index/rulePulsar", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleSqs", _module)
pulumi.runtime.registerResourceModule("ably", "index/ruleZapier", _module)
pulumi.runtime.registerResourcePackage("ably", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ably") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
