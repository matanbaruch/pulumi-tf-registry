// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Queue extends pulumi.CustomResource {
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueueState, opts?: pulumi.CustomResourceOptions): Queue {
        return new Queue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ably:index/queue:Queue';

    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Queue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }

    /**
     * Name of the Ably queue.
     */
    public /*out*/ readonly amqpQueueName!: pulumi.Output<string>;
    /**
     * URI for the AMQP queue interface.
     */
    public /*out*/ readonly amqpUri!: pulumi.Output<string>;
    /**
     * The application ID.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * A boolean that indicates whether this is a dead letter queue or not.
     */
    public /*out*/ readonly deadletter!: pulumi.Output<boolean>;
    /**
     * The ID of the dead letter queue.
     */
    public /*out*/ readonly deadletterId!: pulumi.Output<string>;
    /**
     * Message limit in number of messages.
     */
    public readonly maxLength!: pulumi.Output<number>;
    /**
     * The number of ready messages in the queue.
     */
    public /*out*/ readonly messagesReady!: pulumi.Output<number>;
    /**
     * The total number of messages in the queue.
     */
    public /*out*/ readonly messagesTotal!: pulumi.Output<number>;
    /**
     * The number of unacknowledged messages in the queue.
     */
    public /*out*/ readonly messagesUnacknowledged!: pulumi.Output<number>;
    /**
     * The name of the queue.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The data center region. US East (Virginia) or EU West (Ireland). Values are us-east-1-a or eu-west-1-a.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The current state of the queue.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The rate at which messages are acknowledged. Rate is messages per minute.
     */
    public /*out*/ readonly statsAcknowledgementRate!: pulumi.Output<number>;
    /**
     * The rate at which messages are delivered from the queue. Rate is messages per minute.
     */
    public /*out*/ readonly statsDeliveryRate!: pulumi.Output<number>;
    /**
     * The rate at which messages are published to the queue. Rate is messages per minute.
     */
    public /*out*/ readonly statsPublishRate!: pulumi.Output<number>;
    /**
     * Destination queue.
     */
    public /*out*/ readonly stompDestination!: pulumi.Output<string>;
    /**
     * The host type for the queue.
     */
    public /*out*/ readonly stompHost!: pulumi.Output<string>;
    /**
     * URI for the STOMP queue interface.
     */
    public /*out*/ readonly stompUri!: pulumi.Output<string>;
    /**
     * Time to live in minutes.
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a Queue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QueueArgs | QueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QueueState | undefined;
            resourceInputs["amqpQueueName"] = state ? state.amqpQueueName : undefined;
            resourceInputs["amqpUri"] = state ? state.amqpUri : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["deadletter"] = state ? state.deadletter : undefined;
            resourceInputs["deadletterId"] = state ? state.deadletterId : undefined;
            resourceInputs["maxLength"] = state ? state.maxLength : undefined;
            resourceInputs["messagesReady"] = state ? state.messagesReady : undefined;
            resourceInputs["messagesTotal"] = state ? state.messagesTotal : undefined;
            resourceInputs["messagesUnacknowledged"] = state ? state.messagesUnacknowledged : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statsAcknowledgementRate"] = state ? state.statsAcknowledgementRate : undefined;
            resourceInputs["statsDeliveryRate"] = state ? state.statsDeliveryRate : undefined;
            resourceInputs["statsPublishRate"] = state ? state.statsPublishRate : undefined;
            resourceInputs["stompDestination"] = state ? state.stompDestination : undefined;
            resourceInputs["stompHost"] = state ? state.stompHost : undefined;
            resourceInputs["stompUri"] = state ? state.stompUri : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as QueueArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.maxLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxLength'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["maxLength"] = args ? args.maxLength : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["amqpQueueName"] = undefined /*out*/;
            resourceInputs["amqpUri"] = undefined /*out*/;
            resourceInputs["deadletter"] = undefined /*out*/;
            resourceInputs["deadletterId"] = undefined /*out*/;
            resourceInputs["messagesReady"] = undefined /*out*/;
            resourceInputs["messagesTotal"] = undefined /*out*/;
            resourceInputs["messagesUnacknowledged"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["statsAcknowledgementRate"] = undefined /*out*/;
            resourceInputs["statsDeliveryRate"] = undefined /*out*/;
            resourceInputs["statsPublishRate"] = undefined /*out*/;
            resourceInputs["stompDestination"] = undefined /*out*/;
            resourceInputs["stompHost"] = undefined /*out*/;
            resourceInputs["stompUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Queue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Queue resources.
 */
export interface QueueState {
    /**
     * Name of the Ably queue.
     */
    amqpQueueName?: pulumi.Input<string>;
    /**
     * URI for the AMQP queue interface.
     */
    amqpUri?: pulumi.Input<string>;
    /**
     * The application ID.
     */
    appId?: pulumi.Input<string>;
    /**
     * A boolean that indicates whether this is a dead letter queue or not.
     */
    deadletter?: pulumi.Input<boolean>;
    /**
     * The ID of the dead letter queue.
     */
    deadletterId?: pulumi.Input<string>;
    /**
     * Message limit in number of messages.
     */
    maxLength?: pulumi.Input<number>;
    /**
     * The number of ready messages in the queue.
     */
    messagesReady?: pulumi.Input<number>;
    /**
     * The total number of messages in the queue.
     */
    messagesTotal?: pulumi.Input<number>;
    /**
     * The number of unacknowledged messages in the queue.
     */
    messagesUnacknowledged?: pulumi.Input<number>;
    /**
     * The name of the queue.
     */
    name?: pulumi.Input<string>;
    /**
     * The data center region. US East (Virginia) or EU West (Ireland). Values are us-east-1-a or eu-west-1-a.
     */
    region?: pulumi.Input<string>;
    /**
     * The current state of the queue.
     */
    state?: pulumi.Input<string>;
    /**
     * The rate at which messages are acknowledged. Rate is messages per minute.
     */
    statsAcknowledgementRate?: pulumi.Input<number>;
    /**
     * The rate at which messages are delivered from the queue. Rate is messages per minute.
     */
    statsDeliveryRate?: pulumi.Input<number>;
    /**
     * The rate at which messages are published to the queue. Rate is messages per minute.
     */
    statsPublishRate?: pulumi.Input<number>;
    /**
     * Destination queue.
     */
    stompDestination?: pulumi.Input<string>;
    /**
     * The host type for the queue.
     */
    stompHost?: pulumi.Input<string>;
    /**
     * URI for the STOMP queue interface.
     */
    stompUri?: pulumi.Input<string>;
    /**
     * Time to live in minutes.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Queue resource.
 */
export interface QueueArgs {
    /**
     * The application ID.
     */
    appId: pulumi.Input<string>;
    /**
     * Message limit in number of messages.
     */
    maxLength: pulumi.Input<number>;
    /**
     * The name of the queue.
     */
    name?: pulumi.Input<string>;
    /**
     * The data center region. US East (Virginia) or EU West (Ireland). Values are us-east-1-a or eu-west-1-a.
     */
    region: pulumi.Input<string>;
    /**
     * Time to live in minutes.
     */
    ttl: pulumi.Input<number>;
}
