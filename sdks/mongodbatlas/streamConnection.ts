// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamConnection extends pulumi.CustomResource {
    /**
     * Get an existing StreamConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamConnectionState, opts?: pulumi.CustomResourceOptions): StreamConnection {
        return new StreamConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/streamConnection:StreamConnection';

    /**
     * Returns true if the given object is an instance of StreamConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamConnection.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<outputs.StreamConnectionAuthentication | undefined>;
    public readonly bootstrapServers!: pulumi.Output<string | undefined>;
    public readonly clusterName!: pulumi.Output<string | undefined>;
    public readonly config!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly connectionName!: pulumi.Output<string>;
    public readonly dbRoleToExecute!: pulumi.Output<outputs.StreamConnectionDbRoleToExecute | undefined>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly security!: pulumi.Output<outputs.StreamConnectionSecurity | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a StreamConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamConnectionArgs | StreamConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamConnectionState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["bootstrapServers"] = state ? state.bootstrapServers : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["dbRoleToExecute"] = state ? state.dbRoleToExecute : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as StreamConnectionArgs | undefined;
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["bootstrapServers"] = args ? args.bootstrapServers : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["dbRoleToExecute"] = args ? args.dbRoleToExecute : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamConnection resources.
 */
export interface StreamConnectionState {
    authentication?: pulumi.Input<inputs.StreamConnectionAuthentication>;
    bootstrapServers?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    connectionName?: pulumi.Input<string>;
    dbRoleToExecute?: pulumi.Input<inputs.StreamConnectionDbRoleToExecute>;
    instanceName?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    security?: pulumi.Input<inputs.StreamConnectionSecurity>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamConnection resource.
 */
export interface StreamConnectionArgs {
    authentication?: pulumi.Input<inputs.StreamConnectionAuthentication>;
    bootstrapServers?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    connectionName: pulumi.Input<string>;
    dbRoleToExecute?: pulumi.Input<inputs.StreamConnectionDbRoleToExecute>;
    instanceName: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    security?: pulumi.Input<inputs.StreamConnectionSecurity>;
    type: pulumi.Input<string>;
}
