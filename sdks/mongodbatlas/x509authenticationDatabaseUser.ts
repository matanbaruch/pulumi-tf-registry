// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class X509AuthenticationDatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing X509AuthenticationDatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: X509AuthenticationDatabaseUserState, opts?: pulumi.CustomResourceOptions): X509AuthenticationDatabaseUser {
        return new X509AuthenticationDatabaseUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser';

    /**
     * Returns true if the given object is an instance of X509AuthenticationDatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is X509AuthenticationDatabaseUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === X509AuthenticationDatabaseUser.__pulumiType;
    }

    public /*out*/ readonly certificates!: pulumi.Output<outputs.X509AuthenticationDatabaseUserCertificate[]>;
    public /*out*/ readonly currentCertificate!: pulumi.Output<string>;
    public readonly customerX509Cas!: pulumi.Output<string | undefined>;
    public readonly monthsUntilExpiration!: pulumi.Output<number | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a X509AuthenticationDatabaseUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: X509AuthenticationDatabaseUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: X509AuthenticationDatabaseUserArgs | X509AuthenticationDatabaseUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as X509AuthenticationDatabaseUserState | undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["currentCertificate"] = state ? state.currentCertificate : undefined;
            resourceInputs["customerX509Cas"] = state ? state.customerX509Cas : undefined;
            resourceInputs["monthsUntilExpiration"] = state ? state.monthsUntilExpiration : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as X509AuthenticationDatabaseUserArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["customerX509Cas"] = args?.customerX509Cas ? pulumi.secret(args.customerX509Cas) : undefined;
            resourceInputs["monthsUntilExpiration"] = args ? args.monthsUntilExpiration : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["certificates"] = undefined /*out*/;
            resourceInputs["currentCertificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["currentCertificate", "customerX509Cas"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(X509AuthenticationDatabaseUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering X509AuthenticationDatabaseUser resources.
 */
export interface X509AuthenticationDatabaseUserState {
    certificates?: pulumi.Input<pulumi.Input<inputs.X509AuthenticationDatabaseUserCertificate>[]>;
    currentCertificate?: pulumi.Input<string>;
    customerX509Cas?: pulumi.Input<string>;
    monthsUntilExpiration?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a X509AuthenticationDatabaseUser resource.
 */
export interface X509AuthenticationDatabaseUserArgs {
    customerX509Cas?: pulumi.Input<string>;
    monthsUntilExpiration?: pulumi.Input<number>;
    projectId: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}
