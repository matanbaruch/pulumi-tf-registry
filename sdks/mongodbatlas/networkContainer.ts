// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkContainer extends pulumi.CustomResource {
    /**
     * Get an existing NetworkContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkContainerState, opts?: pulumi.CustomResourceOptions): NetworkContainer {
        return new NetworkContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/networkContainer:NetworkContainer';

    /**
     * Returns true if the given object is an instance of NetworkContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkContainer.__pulumiType;
    }

    public readonly atlasCidrBlock!: pulumi.Output<string>;
    public /*out*/ readonly azureSubscriptionId!: pulumi.Output<string>;
    public /*out*/ readonly containerId!: pulumi.Output<string>;
    public /*out*/ readonly gcpProjectId!: pulumi.Output<string>;
    public /*out*/ readonly networkName!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly providerName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly provisioned!: pulumi.Output<boolean>;
    public readonly region!: pulumi.Output<string>;
    public readonly regionName!: pulumi.Output<string>;
    public readonly regions!: pulumi.Output<string[]>;
    public /*out*/ readonly vnetName!: pulumi.Output<string>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a NetworkContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkContainerArgs | NetworkContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkContainerState | undefined;
            resourceInputs["atlasCidrBlock"] = state ? state.atlasCidrBlock : undefined;
            resourceInputs["azureSubscriptionId"] = state ? state.azureSubscriptionId : undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["gcpProjectId"] = state ? state.gcpProjectId : undefined;
            resourceInputs["networkName"] = state ? state.networkName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["provisioned"] = state ? state.provisioned : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["vnetName"] = state ? state.vnetName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as NetworkContainerArgs | undefined;
            if ((!args || args.atlasCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'atlasCidrBlock'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["atlasCidrBlock"] = args ? args.atlasCidrBlock : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["azureSubscriptionId"] = undefined /*out*/;
            resourceInputs["containerId"] = undefined /*out*/;
            resourceInputs["gcpProjectId"] = undefined /*out*/;
            resourceInputs["networkName"] = undefined /*out*/;
            resourceInputs["provisioned"] = undefined /*out*/;
            resourceInputs["vnetName"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkContainer resources.
 */
export interface NetworkContainerState {
    atlasCidrBlock?: pulumi.Input<string>;
    azureSubscriptionId?: pulumi.Input<string>;
    containerId?: pulumi.Input<string>;
    gcpProjectId?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    providerName?: pulumi.Input<string>;
    provisioned?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    regionName?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    vnetName?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkContainer resource.
 */
export interface NetworkContainerArgs {
    atlasCidrBlock: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    providerName?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    regionName?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
}
