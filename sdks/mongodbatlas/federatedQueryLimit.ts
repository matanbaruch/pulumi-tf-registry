// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FederatedQueryLimit extends pulumi.CustomResource {
    /**
     * Get an existing FederatedQueryLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FederatedQueryLimitState, opts?: pulumi.CustomResourceOptions): FederatedQueryLimit {
        return new FederatedQueryLimit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/federatedQueryLimit:FederatedQueryLimit';

    /**
     * Returns true if the given object is an instance of FederatedQueryLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FederatedQueryLimit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedQueryLimit.__pulumiType;
    }

    public /*out*/ readonly currentUsage!: pulumi.Output<number>;
    public readonly defaultLimit!: pulumi.Output<number | undefined>;
    public /*out*/ readonly lastModifiedDate!: pulumi.Output<string>;
    public readonly limitName!: pulumi.Output<string>;
    public readonly maximumLimit!: pulumi.Output<number | undefined>;
    public readonly overrunPolicy!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly tenantName!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<number>;

    /**
     * Create a FederatedQueryLimit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FederatedQueryLimitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FederatedQueryLimitArgs | FederatedQueryLimitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FederatedQueryLimitState | undefined;
            resourceInputs["currentUsage"] = state ? state.currentUsage : undefined;
            resourceInputs["defaultLimit"] = state ? state.defaultLimit : undefined;
            resourceInputs["lastModifiedDate"] = state ? state.lastModifiedDate : undefined;
            resourceInputs["limitName"] = state ? state.limitName : undefined;
            resourceInputs["maximumLimit"] = state ? state.maximumLimit : undefined;
            resourceInputs["overrunPolicy"] = state ? state.overrunPolicy : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as FederatedQueryLimitArgs | undefined;
            if ((!args || args.limitName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limitName'");
            }
            if ((!args || args.overrunPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overrunPolicy'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.tenantName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["defaultLimit"] = args ? args.defaultLimit : undefined;
            resourceInputs["limitName"] = args ? args.limitName : undefined;
            resourceInputs["maximumLimit"] = args ? args.maximumLimit : undefined;
            resourceInputs["overrunPolicy"] = args ? args.overrunPolicy : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["currentUsage"] = undefined /*out*/;
            resourceInputs["lastModifiedDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedQueryLimit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FederatedQueryLimit resources.
 */
export interface FederatedQueryLimitState {
    currentUsage?: pulumi.Input<number>;
    defaultLimit?: pulumi.Input<number>;
    lastModifiedDate?: pulumi.Input<string>;
    limitName?: pulumi.Input<string>;
    maximumLimit?: pulumi.Input<number>;
    overrunPolicy?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FederatedQueryLimit resource.
 */
export interface FederatedQueryLimitArgs {
    defaultLimit?: pulumi.Input<number>;
    limitName: pulumi.Input<string>;
    maximumLimit?: pulumi.Input<number>;
    overrunPolicy: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    tenantName: pulumi.Input<string>;
    value: pulumi.Input<number>;
}
