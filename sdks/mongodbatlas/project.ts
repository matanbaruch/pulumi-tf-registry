// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    public /*out*/ readonly clusterCount!: pulumi.Output<number>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public /*out*/ readonly ipAddresses!: pulumi.Output<outputs.ProjectIpAddresses>;
    public readonly isCollectDatabaseSpecificsStatisticsEnabled!: pulumi.Output<boolean>;
    public readonly isDataExplorerEnabled!: pulumi.Output<boolean>;
    public readonly isExtendedStorageSizesEnabled!: pulumi.Output<boolean>;
    public readonly isPerformanceAdvisorEnabled!: pulumi.Output<boolean>;
    public readonly isRealtimePerformancePanelEnabled!: pulumi.Output<boolean>;
    public readonly isSchemaAdvisorEnabled!: pulumi.Output<boolean>;
    public readonly limits!: pulumi.Output<outputs.ProjectLimit[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    public readonly projectOwnerId!: pulumi.Output<string | undefined>;
    public readonly regionUsageRestrictions!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly teams!: pulumi.Output<outputs.ProjectTeam[] | undefined>;
    public readonly withDefaultAlertsSettings!: pulumi.Output<boolean>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["clusterCount"] = state ? state.clusterCount : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["isCollectDatabaseSpecificsStatisticsEnabled"] = state ? state.isCollectDatabaseSpecificsStatisticsEnabled : undefined;
            resourceInputs["isDataExplorerEnabled"] = state ? state.isDataExplorerEnabled : undefined;
            resourceInputs["isExtendedStorageSizesEnabled"] = state ? state.isExtendedStorageSizesEnabled : undefined;
            resourceInputs["isPerformanceAdvisorEnabled"] = state ? state.isPerformanceAdvisorEnabled : undefined;
            resourceInputs["isRealtimePerformancePanelEnabled"] = state ? state.isRealtimePerformancePanelEnabled : undefined;
            resourceInputs["isSchemaAdvisorEnabled"] = state ? state.isSchemaAdvisorEnabled : undefined;
            resourceInputs["limits"] = state ? state.limits : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectOwnerId"] = state ? state.projectOwnerId : undefined;
            resourceInputs["regionUsageRestrictions"] = state ? state.regionUsageRestrictions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["withDefaultAlertsSettings"] = state ? state.withDefaultAlertsSettings : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["isCollectDatabaseSpecificsStatisticsEnabled"] = args ? args.isCollectDatabaseSpecificsStatisticsEnabled : undefined;
            resourceInputs["isDataExplorerEnabled"] = args ? args.isDataExplorerEnabled : undefined;
            resourceInputs["isExtendedStorageSizesEnabled"] = args ? args.isExtendedStorageSizesEnabled : undefined;
            resourceInputs["isPerformanceAdvisorEnabled"] = args ? args.isPerformanceAdvisorEnabled : undefined;
            resourceInputs["isRealtimePerformancePanelEnabled"] = args ? args.isRealtimePerformancePanelEnabled : undefined;
            resourceInputs["isSchemaAdvisorEnabled"] = args ? args.isSchemaAdvisorEnabled : undefined;
            resourceInputs["limits"] = args ? args.limits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectOwnerId"] = args ? args.projectOwnerId : undefined;
            resourceInputs["regionUsageRestrictions"] = args ? args.regionUsageRestrictions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["withDefaultAlertsSettings"] = args ? args.withDefaultAlertsSettings : undefined;
            resourceInputs["clusterCount"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    clusterCount?: pulumi.Input<number>;
    created?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<inputs.ProjectIpAddresses>;
    isCollectDatabaseSpecificsStatisticsEnabled?: pulumi.Input<boolean>;
    isDataExplorerEnabled?: pulumi.Input<boolean>;
    isExtendedStorageSizesEnabled?: pulumi.Input<boolean>;
    isPerformanceAdvisorEnabled?: pulumi.Input<boolean>;
    isRealtimePerformancePanelEnabled?: pulumi.Input<boolean>;
    isSchemaAdvisorEnabled?: pulumi.Input<boolean>;
    limits?: pulumi.Input<pulumi.Input<inputs.ProjectLimit>[]>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectOwnerId?: pulumi.Input<string>;
    regionUsageRestrictions?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    teams?: pulumi.Input<pulumi.Input<inputs.ProjectTeam>[]>;
    withDefaultAlertsSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    isCollectDatabaseSpecificsStatisticsEnabled?: pulumi.Input<boolean>;
    isDataExplorerEnabled?: pulumi.Input<boolean>;
    isExtendedStorageSizesEnabled?: pulumi.Input<boolean>;
    isPerformanceAdvisorEnabled?: pulumi.Input<boolean>;
    isRealtimePerformancePanelEnabled?: pulumi.Input<boolean>;
    isSchemaAdvisorEnabled?: pulumi.Input<boolean>;
    limits?: pulumi.Input<pulumi.Input<inputs.ProjectLimit>[]>;
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    projectOwnerId?: pulumi.Input<string>;
    regionUsageRestrictions?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    teams?: pulumi.Input<pulumi.Input<inputs.ProjectTeam>[]>;
    withDefaultAlertsSettings?: pulumi.Input<boolean>;
}
