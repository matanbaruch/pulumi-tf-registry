// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SearchIndex extends pulumi.CustomResource {
    /**
     * Get an existing SearchIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SearchIndexState, opts?: pulumi.CustomResourceOptions): SearchIndex {
        return new SearchIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/searchIndex:SearchIndex';

    /**
     * Returns true if the given object is an instance of SearchIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SearchIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SearchIndex.__pulumiType;
    }

    public readonly analyzer!: pulumi.Output<string | undefined>;
    public readonly analyzers!: pulumi.Output<string | undefined>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly collectionName!: pulumi.Output<string>;
    public readonly database!: pulumi.Output<string>;
    public readonly fields!: pulumi.Output<string | undefined>;
    public /*out*/ readonly indexId!: pulumi.Output<string>;
    public readonly mappingsDynamic!: pulumi.Output<boolean | undefined>;
    public readonly mappingsFields!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly searchAnalyzer!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storedSource!: pulumi.Output<string | undefined>;
    public readonly synonyms!: pulumi.Output<outputs.SearchIndexSynonym[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SearchIndexTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly waitForIndexBuildCompletion!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SearchIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SearchIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SearchIndexArgs | SearchIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SearchIndexState | undefined;
            resourceInputs["analyzer"] = state ? state.analyzer : undefined;
            resourceInputs["analyzers"] = state ? state.analyzers : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["collectionName"] = state ? state.collectionName : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["mappingsDynamic"] = state ? state.mappingsDynamic : undefined;
            resourceInputs["mappingsFields"] = state ? state.mappingsFields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["searchAnalyzer"] = state ? state.searchAnalyzer : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storedSource"] = state ? state.storedSource : undefined;
            resourceInputs["synonyms"] = state ? state.synonyms : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["waitForIndexBuildCompletion"] = state ? state.waitForIndexBuildCompletion : undefined;
        } else {
            const args = argsOrState as SearchIndexArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.collectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionName'");
            }
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["analyzer"] = args ? args.analyzer : undefined;
            resourceInputs["analyzers"] = args ? args.analyzers : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["collectionName"] = args ? args.collectionName : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["mappingsDynamic"] = args ? args.mappingsDynamic : undefined;
            resourceInputs["mappingsFields"] = args ? args.mappingsFields : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["searchAnalyzer"] = args ? args.searchAnalyzer : undefined;
            resourceInputs["storedSource"] = args ? args.storedSource : undefined;
            resourceInputs["synonyms"] = args ? args.synonyms : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["waitForIndexBuildCompletion"] = args ? args.waitForIndexBuildCompletion : undefined;
            resourceInputs["indexId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SearchIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SearchIndex resources.
 */
export interface SearchIndexState {
    analyzer?: pulumi.Input<string>;
    analyzers?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    collectionName?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    fields?: pulumi.Input<string>;
    indexId?: pulumi.Input<string>;
    mappingsDynamic?: pulumi.Input<boolean>;
    mappingsFields?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    searchAnalyzer?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storedSource?: pulumi.Input<string>;
    synonyms?: pulumi.Input<pulumi.Input<inputs.SearchIndexSynonym>[]>;
    timeouts?: pulumi.Input<inputs.SearchIndexTimeouts>;
    type?: pulumi.Input<string>;
    waitForIndexBuildCompletion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SearchIndex resource.
 */
export interface SearchIndexArgs {
    analyzer?: pulumi.Input<string>;
    analyzers?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    collectionName: pulumi.Input<string>;
    database: pulumi.Input<string>;
    fields?: pulumi.Input<string>;
    mappingsDynamic?: pulumi.Input<boolean>;
    mappingsFields?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    searchAnalyzer?: pulumi.Input<string>;
    storedSource?: pulumi.Input<string>;
    synonyms?: pulumi.Input<pulumi.Input<inputs.SearchIndexSynonym>[]>;
    timeouts?: pulumi.Input<inputs.SearchIndexTimeouts>;
    type?: pulumi.Input<string>;
    waitForIndexBuildCompletion?: pulumi.Input<boolean>;
}
