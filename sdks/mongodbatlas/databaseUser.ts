// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseUserState, opts?: pulumi.CustomResourceOptions): DatabaseUser {
        return new DatabaseUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/databaseUser:DatabaseUser';

    /**
     * Returns true if the given object is an instance of DatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseUser.__pulumiType;
    }

    public readonly authDatabaseName!: pulumi.Output<string>;
    public readonly awsIamType!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<outputs.DatabaseUserLabel[] | undefined>;
    public readonly ldapAuthType!: pulumi.Output<string>;
    public readonly oidcAuthType!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly roles!: pulumi.Output<outputs.DatabaseUserRole[] | undefined>;
    public readonly scopes!: pulumi.Output<outputs.DatabaseUserScope[] | undefined>;
    public readonly username!: pulumi.Output<string>;
    public readonly x509Type!: pulumi.Output<string>;

    /**
     * Create a DatabaseUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseUserArgs | DatabaseUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseUserState | undefined;
            resourceInputs["authDatabaseName"] = state ? state.authDatabaseName : undefined;
            resourceInputs["awsIamType"] = state ? state.awsIamType : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["ldapAuthType"] = state ? state.ldapAuthType : undefined;
            resourceInputs["oidcAuthType"] = state ? state.oidcAuthType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["x509Type"] = state ? state.x509Type : undefined;
        } else {
            const args = argsOrState as DatabaseUserArgs | undefined;
            if ((!args || args.authDatabaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authDatabaseName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authDatabaseName"] = args ? args.authDatabaseName : undefined;
            resourceInputs["awsIamType"] = args ? args.awsIamType : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["ldapAuthType"] = args ? args.ldapAuthType : undefined;
            resourceInputs["oidcAuthType"] = args ? args.oidcAuthType : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["x509Type"] = args ? args.x509Type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseUser resources.
 */
export interface DatabaseUserState {
    authDatabaseName?: pulumi.Input<string>;
    awsIamType?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.DatabaseUserLabel>[]>;
    ldapAuthType?: pulumi.Input<string>;
    oidcAuthType?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<inputs.DatabaseUserRole>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.DatabaseUserScope>[]>;
    username?: pulumi.Input<string>;
    x509Type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseUser resource.
 */
export interface DatabaseUserArgs {
    authDatabaseName: pulumi.Input<string>;
    awsIamType?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.DatabaseUserLabel>[]>;
    ldapAuthType?: pulumi.Input<string>;
    oidcAuthType?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<inputs.DatabaseUserRole>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.DatabaseUserScope>[]>;
    username: pulumi.Input<string>;
    x509Type?: pulumi.Input<string>;
}
