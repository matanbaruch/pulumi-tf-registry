// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudBackupSnapshotExportBucket extends pulumi.CustomResource {
    /**
     * Get an existing CloudBackupSnapshotExportBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudBackupSnapshotExportBucketState, opts?: pulumi.CustomResourceOptions): CloudBackupSnapshotExportBucket {
        return new CloudBackupSnapshotExportBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/cloudBackupSnapshotExportBucket:CloudBackupSnapshotExportBucket';

    /**
     * Returns true if the given object is an instance of CloudBackupSnapshotExportBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudBackupSnapshotExportBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudBackupSnapshotExportBucket.__pulumiType;
    }

    public readonly bucketName!: pulumi.Output<string>;
    public readonly cloudProvider!: pulumi.Output<string>;
    public /*out*/ readonly exportBucketId!: pulumi.Output<string>;
    public readonly iamRoleId!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly roleId!: pulumi.Output<string | undefined>;
    public readonly serviceUrl!: pulumi.Output<string | undefined>;
    public readonly tenantId!: pulumi.Output<string | undefined>;

    /**
     * Create a CloudBackupSnapshotExportBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudBackupSnapshotExportBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudBackupSnapshotExportBucketArgs | CloudBackupSnapshotExportBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudBackupSnapshotExportBucketState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["exportBucketId"] = state ? state.exportBucketId : undefined;
            resourceInputs["iamRoleId"] = state ? state.iamRoleId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["serviceUrl"] = state ? state.serviceUrl : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as CloudBackupSnapshotExportBucketArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["iamRoleId"] = args ? args.iamRoleId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["serviceUrl"] = args ? args.serviceUrl : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["exportBucketId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudBackupSnapshotExportBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudBackupSnapshotExportBucket resources.
 */
export interface CloudBackupSnapshotExportBucketState {
    bucketName?: pulumi.Input<string>;
    cloudProvider?: pulumi.Input<string>;
    exportBucketId?: pulumi.Input<string>;
    iamRoleId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    roleId?: pulumi.Input<string>;
    serviceUrl?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudBackupSnapshotExportBucket resource.
 */
export interface CloudBackupSnapshotExportBucketArgs {
    bucketName: pulumi.Input<string>;
    cloudProvider: pulumi.Input<string>;
    iamRoleId?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    roleId?: pulumi.Input<string>;
    serviceUrl?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}
