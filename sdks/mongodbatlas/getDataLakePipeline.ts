// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataLakePipeline(args: GetDataLakePipelineArgs, opts?: pulumi.InvokeOptions): Promise<GetDataLakePipelineResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataLakePipeline.
 */
export interface GetDataLakePipelineArgs {
    name: string;
    projectId: string;
}

/**
 * A collection of values returned by getDataLakePipeline.
 */
export interface GetDataLakePipelineResult {
    readonly createdDate: string;
    readonly id: string;
    readonly ingestionSchedules: outputs.GetDataLakePipelineIngestionSchedule[];
    readonly lastUpdatedDate: string;
    readonly name: string;
    readonly projectId: string;
    readonly sinks: outputs.GetDataLakePipelineSink[];
    readonly snapshots: outputs.GetDataLakePipelineSnapshot[];
    readonly sources: outputs.GetDataLakePipelineSource[];
    readonly state: string;
    readonly transformations: outputs.GetDataLakePipelineTransformation[];
}
export function getDataLakePipelineOutput(args: GetDataLakePipelineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataLakePipelineResult> {
    return pulumi.output(args).apply((a: any) => getDataLakePipeline(a, opts))
}

/**
 * A collection of arguments for invoking getDataLakePipeline.
 */
export interface GetDataLakePipelineOutputArgs {
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
