// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAlertConfigurations(args: GetAlertConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertConfigurationsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", {
        "listOptions": args.listOptions,
        "outputTypes": args.outputTypes,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAlertConfigurations.
 */
export interface GetAlertConfigurationsArgs {
    listOptions?: inputs.GetAlertConfigurationsListOption[];
    outputTypes?: string[];
    projectId: string;
}

/**
 * A collection of values returned by getAlertConfigurations.
 */
export interface GetAlertConfigurationsResult {
    readonly id: string;
    readonly listOptions?: outputs.GetAlertConfigurationsListOption[];
    readonly outputTypes?: string[];
    readonly projectId: string;
    readonly results: outputs.GetAlertConfigurationsResult[];
    readonly totalCount: number;
}
export function getAlertConfigurationsOutput(args: GetAlertConfigurationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAlertConfigurationsResult> {
    return pulumi.output(args).apply((a: any) => getAlertConfigurations(a, opts))
}

/**
 * A collection of arguments for invoking getAlertConfigurations.
 */
export interface GetAlertConfigurationsOutputArgs {
    listOptions?: pulumi.Input<pulumi.Input<inputs.GetAlertConfigurationsListOptionArgs>[]>;
    outputTypes?: pulumi.Input<pulumi.Input<string>[]>;
    projectId: pulumi.Input<string>;
}
