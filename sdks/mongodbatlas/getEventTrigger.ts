// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEventTrigger(args: GetEventTriggerArgs, opts?: pulumi.InvokeOptions): Promise<GetEventTriggerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getEventTrigger:getEventTrigger", {
        "appId": args.appId,
        "id": args.id,
        "projectId": args.projectId,
        "triggerId": args.triggerId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEventTrigger.
 */
export interface GetEventTriggerArgs {
    appId: string;
    id?: string;
    projectId: string;
    triggerId: string;
}

/**
 * A collection of values returned by getEventTrigger.
 */
export interface GetEventTriggerResult {
    readonly appId: string;
    readonly configCollection: string;
    readonly configDatabase: string;
    readonly configFullDocument: boolean;
    readonly configFullDocumentBefore: boolean;
    readonly configMatch: string;
    readonly configOperationType: string;
    readonly configOperationTypes: string[];
    readonly configProject: string;
    readonly configProviders: string[];
    readonly configSchedule: string;
    readonly configScheduleType: string;
    readonly configServiceId: string;
    readonly disabled: boolean;
    readonly eventProcessors: outputs.GetEventTriggerEventProcessor[];
    readonly functionId: string;
    readonly functionName: string;
    readonly id: string;
    readonly name: string;
    readonly projectId: string;
    readonly triggerId: string;
    readonly type: string;
    readonly unordered: boolean;
}
export function getEventTriggerOutput(args: GetEventTriggerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventTriggerResult> {
    return pulumi.output(args).apply((a: any) => getEventTrigger(a, opts))
}

/**
 * A collection of arguments for invoking getEventTrigger.
 */
export interface GetEventTriggerOutputArgs {
    appId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    triggerId: pulumi.Input<string>;
}
