// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFederatedQueryLimit(args: GetFederatedQueryLimitArgs, opts?: pulumi.InvokeOptions): Promise<GetFederatedQueryLimitResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getFederatedQueryLimit:getFederatedQueryLimit", {
        "id": args.id,
        "limitName": args.limitName,
        "projectId": args.projectId,
        "tenantName": args.tenantName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFederatedQueryLimit.
 */
export interface GetFederatedQueryLimitArgs {
    id?: string;
    limitName: string;
    projectId: string;
    tenantName: string;
}

/**
 * A collection of values returned by getFederatedQueryLimit.
 */
export interface GetFederatedQueryLimitResult {
    readonly currentUsage: number;
    readonly defaultLimit: number;
    readonly id: string;
    readonly lastModifiedDate: string;
    readonly limitName: string;
    readonly maximumLimit: number;
    readonly overrunPolicy: string;
    readonly projectId: string;
    readonly tenantName: string;
    readonly value: number;
}
export function getFederatedQueryLimitOutput(args: GetFederatedQueryLimitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFederatedQueryLimitResult> {
    return pulumi.output(args).apply((a: any) => getFederatedQueryLimit(a, opts))
}

/**
 * A collection of arguments for invoking getFederatedQueryLimit.
 */
export interface GetFederatedQueryLimitOutputArgs {
    id?: pulumi.Input<string>;
    limitName: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    tenantName: pulumi.Input<string>;
}
