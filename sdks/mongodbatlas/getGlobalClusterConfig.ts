// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGlobalClusterConfig(args: GetGlobalClusterConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetGlobalClusterConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getGlobalClusterConfig:getGlobalClusterConfig", {
        "clusterName": args.clusterName,
        "id": args.id,
        "managedNamespaces": args.managedNamespaces,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGlobalClusterConfig.
 */
export interface GetGlobalClusterConfigArgs {
    clusterName: string;
    id?: string;
    managedNamespaces?: inputs.GetGlobalClusterConfigManagedNamespace[];
    projectId: string;
}

/**
 * A collection of values returned by getGlobalClusterConfig.
 */
export interface GetGlobalClusterConfigResult {
    readonly clusterName: string;
    readonly customZoneMapping: {[key: string]: string};
    readonly id: string;
    readonly managedNamespaces?: outputs.GetGlobalClusterConfigManagedNamespace[];
    readonly projectId: string;
}
export function getGlobalClusterConfigOutput(args: GetGlobalClusterConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGlobalClusterConfigResult> {
    return pulumi.output(args).apply((a: any) => getGlobalClusterConfig(a, opts))
}

/**
 * A collection of arguments for invoking getGlobalClusterConfig.
 */
export interface GetGlobalClusterConfigOutputArgs {
    clusterName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    managedNamespaces?: pulumi.Input<pulumi.Input<inputs.GetGlobalClusterConfigManagedNamespaceArgs>[]>;
    projectId: pulumi.Input<string>;
}
