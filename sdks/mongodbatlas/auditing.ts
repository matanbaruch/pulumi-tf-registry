// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Auditing extends pulumi.CustomResource {
    /**
     * Get an existing Auditing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditingState, opts?: pulumi.CustomResourceOptions): Auditing {
        return new Auditing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/auditing:Auditing';

    /**
     * Returns true if the given object is an instance of Auditing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Auditing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Auditing.__pulumiType;
    }

    public readonly auditAuthorizationSuccess!: pulumi.Output<boolean>;
    public readonly auditFilter!: pulumi.Output<string>;
    public /*out*/ readonly configurationType!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a Auditing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditingArgs | AuditingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditingState | undefined;
            resourceInputs["auditAuthorizationSuccess"] = state ? state.auditAuthorizationSuccess : undefined;
            resourceInputs["auditFilter"] = state ? state.auditFilter : undefined;
            resourceInputs["configurationType"] = state ? state.configurationType : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as AuditingArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["auditAuthorizationSuccess"] = args ? args.auditAuthorizationSuccess : undefined;
            resourceInputs["auditFilter"] = args ? args.auditFilter : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["configurationType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Auditing.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Auditing resources.
 */
export interface AuditingState {
    auditAuthorizationSuccess?: pulumi.Input<boolean>;
    auditFilter?: pulumi.Input<string>;
    configurationType?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Auditing resource.
 */
export interface AuditingArgs {
    auditAuthorizationSuccess?: pulumi.Input<boolean>;
    auditFilter?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    projectId: pulumi.Input<string>;
}
