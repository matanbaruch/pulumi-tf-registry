// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdvancedCluster(args: GetAdvancedClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetAdvancedClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAdvancedCluster:getAdvancedCluster", {
        "id": args.id,
        "name": args.name,
        "pitEnabled": args.pitEnabled,
        "projectId": args.projectId,
        "useReplicationSpecPerShard": args.useReplicationSpecPerShard,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdvancedCluster.
 */
export interface GetAdvancedClusterArgs {
    id?: string;
    name: string;
    pitEnabled?: boolean;
    projectId: string;
    useReplicationSpecPerShard?: boolean;
}

/**
 * A collection of values returned by getAdvancedCluster.
 */
export interface GetAdvancedClusterResult {
    readonly advancedConfigurations: outputs.GetAdvancedClusterAdvancedConfiguration[];
    readonly backupEnabled: boolean;
    readonly biConnectorConfigs: outputs.GetAdvancedClusterBiConnectorConfig[];
    readonly clusterType: string;
    readonly connectionStrings: outputs.GetAdvancedClusterConnectionString[];
    readonly createDate: string;
    /**
     * @deprecated Deprecated
     */
    readonly diskSizeGb: number;
    readonly encryptionAtRestProvider: string;
    readonly globalClusterSelfManagedSharding: boolean;
    readonly id: string;
    /**
     * @deprecated Deprecated
     */
    readonly labels: outputs.GetAdvancedClusterLabel[];
    readonly mongoDbMajorVersion: string;
    readonly mongoDbVersion: string;
    readonly name: string;
    readonly paused: boolean;
    readonly pitEnabled: boolean;
    readonly projectId: string;
    readonly replicationSpecs: outputs.GetAdvancedClusterReplicationSpec[];
    readonly rootCertType: string;
    readonly stateName: string;
    readonly tags: outputs.GetAdvancedClusterTag[];
    readonly terminationProtectionEnabled: boolean;
    readonly useReplicationSpecPerShard?: boolean;
    readonly versionReleaseSystem: string;
}
export function getAdvancedClusterOutput(args: GetAdvancedClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdvancedClusterResult> {
    return pulumi.output(args).apply((a: any) => getAdvancedCluster(a, opts))
}

/**
 * A collection of arguments for invoking getAdvancedCluster.
 */
export interface GetAdvancedClusterOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    pitEnabled?: pulumi.Input<boolean>;
    projectId: pulumi.Input<string>;
    useReplicationSpecPerShard?: pulumi.Input<boolean>;
}
