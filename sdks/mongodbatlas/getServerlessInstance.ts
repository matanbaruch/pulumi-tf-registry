// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServerlessInstance(args: GetServerlessInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetServerlessInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getServerlessInstance:getServerlessInstance", {
        "autoIndexing": args.autoIndexing,
        "continuousBackupEnabled": args.continuousBackupEnabled,
        "links": args.links,
        "name": args.name,
        "projectId": args.projectId,
        "stateName": args.stateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServerlessInstance.
 */
export interface GetServerlessInstanceArgs {
    autoIndexing?: boolean;
    continuousBackupEnabled?: boolean;
    links?: inputs.GetServerlessInstanceLink[];
    name: string;
    projectId: string;
    stateName?: string;
}

/**
 * A collection of values returned by getServerlessInstance.
 */
export interface GetServerlessInstanceResult {
    readonly autoIndexing: boolean;
    readonly connectionStringsPrivateEndpointSrvs: string[];
    readonly connectionStringsStandardSrv: string;
    readonly continuousBackupEnabled: boolean;
    readonly createDate: string;
    readonly id: string;
    readonly links?: outputs.GetServerlessInstanceLink[];
    readonly mongoDbVersion: string;
    readonly name: string;
    readonly projectId: string;
    readonly providerSettingsBackingProviderName: string;
    readonly providerSettingsProviderName: string;
    readonly providerSettingsRegionName: string;
    readonly stateName: string;
    readonly tags: outputs.GetServerlessInstanceTag[];
    readonly terminationProtectionEnabled: boolean;
}
export function getServerlessInstanceOutput(args: GetServerlessInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerlessInstanceResult> {
    return pulumi.output(args).apply((a: any) => getServerlessInstance(a, opts))
}

/**
 * A collection of arguments for invoking getServerlessInstance.
 */
export interface GetServerlessInstanceOutputArgs {
    autoIndexing?: pulumi.Input<boolean>;
    continuousBackupEnabled?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.GetServerlessInstanceLinkArgs>[]>;
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    stateName?: pulumi.Input<string>;
}
