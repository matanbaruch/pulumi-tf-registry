// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudBackupSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing CloudBackupSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudBackupSnapshotState, opts?: pulumi.CustomResourceOptions): CloudBackupSnapshot {
        return new CloudBackupSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/cloudBackupSnapshot:CloudBackupSnapshot';

    /**
     * Returns true if the given object is an instance of CloudBackupSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudBackupSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudBackupSnapshot.__pulumiType;
    }

    public /*out*/ readonly cloudProvider!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    public /*out*/ readonly masterKeyUuid!: pulumi.Output<string>;
    public /*out*/ readonly members!: pulumi.Output<outputs.CloudBackupSnapshotMember[]>;
    public /*out*/ readonly mongodVersion!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly replicaSetName!: pulumi.Output<string>;
    public readonly retentionInDays!: pulumi.Output<number>;
    public /*out*/ readonly snapshotId!: pulumi.Output<string>;
    public /*out*/ readonly snapshotIds!: pulumi.Output<string[]>;
    public /*out*/ readonly snapshotType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly storageSizeBytes!: pulumi.Output<number>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a CloudBackupSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudBackupSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudBackupSnapshotArgs | CloudBackupSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudBackupSnapshotState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["masterKeyUuid"] = state ? state.masterKeyUuid : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["mongodVersion"] = state ? state.mongodVersion : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["replicaSetName"] = state ? state.replicaSetName : undefined;
            resourceInputs["retentionInDays"] = state ? state.retentionInDays : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["snapshotIds"] = state ? state.snapshotIds : undefined;
            resourceInputs["snapshotType"] = state ? state.snapshotType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageSizeBytes"] = state ? state.storageSizeBytes : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CloudBackupSnapshotArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.retentionInDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionInDays'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["retentionInDays"] = args ? args.retentionInDays : undefined;
            resourceInputs["cloudProvider"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["masterKeyUuid"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
            resourceInputs["mongodVersion"] = undefined /*out*/;
            resourceInputs["replicaSetName"] = undefined /*out*/;
            resourceInputs["snapshotId"] = undefined /*out*/;
            resourceInputs["snapshotIds"] = undefined /*out*/;
            resourceInputs["snapshotType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storageSizeBytes"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudBackupSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudBackupSnapshot resources.
 */
export interface CloudBackupSnapshotState {
    cloudProvider?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    masterKeyUuid?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.CloudBackupSnapshotMember>[]>;
    mongodVersion?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    replicaSetName?: pulumi.Input<string>;
    retentionInDays?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    snapshotIds?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageSizeBytes?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudBackupSnapshot resource.
 */
export interface CloudBackupSnapshotArgs {
    clusterName: pulumi.Input<string>;
    description: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    retentionInDays: pulumi.Input<number>;
}
