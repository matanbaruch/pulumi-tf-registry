// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationState, opts?: pulumi.CustomResourceOptions): Organization {
        return new Organization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/organization:Organization';

    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Organization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Organization.__pulumiType;
    }

    public readonly apiAccessListRequired!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public readonly federationSettingsId!: pulumi.Output<string | undefined>;
    public readonly multiFactorAuthRequired!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    public readonly orgOwnerId!: pulumi.Output<string>;
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    public readonly restrictEmployeeAccess!: pulumi.Output<boolean>;
    public readonly roleNames!: pulumi.Output<string[]>;

    /**
     * Create a Organization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationArgs | OrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationState | undefined;
            resourceInputs["apiAccessListRequired"] = state ? state.apiAccessListRequired : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["federationSettingsId"] = state ? state.federationSettingsId : undefined;
            resourceInputs["multiFactorAuthRequired"] = state ? state.multiFactorAuthRequired : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["orgOwnerId"] = state ? state.orgOwnerId : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["restrictEmployeeAccess"] = state ? state.restrictEmployeeAccess : undefined;
            resourceInputs["roleNames"] = state ? state.roleNames : undefined;
        } else {
            const args = argsOrState as OrganizationArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.orgOwnerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgOwnerId'");
            }
            if ((!args || args.roleNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleNames'");
            }
            resourceInputs["apiAccessListRequired"] = args ? args.apiAccessListRequired : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["federationSettingsId"] = args ? args.federationSettingsId : undefined;
            resourceInputs["multiFactorAuthRequired"] = args ? args.multiFactorAuthRequired : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgOwnerId"] = args ? args.orgOwnerId : undefined;
            resourceInputs["restrictEmployeeAccess"] = args ? args.restrictEmployeeAccess : undefined;
            resourceInputs["roleNames"] = args ? args.roleNames : undefined;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey", "publicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Organization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Organization resources.
 */
export interface OrganizationState {
    apiAccessListRequired?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    federationSettingsId?: pulumi.Input<string>;
    multiFactorAuthRequired?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    orgOwnerId?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    restrictEmployeeAccess?: pulumi.Input<boolean>;
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Organization resource.
 */
export interface OrganizationArgs {
    apiAccessListRequired?: pulumi.Input<boolean>;
    description: pulumi.Input<string>;
    federationSettingsId?: pulumi.Input<string>;
    multiFactorAuthRequired?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    orgOwnerId: pulumi.Input<string>;
    restrictEmployeeAccess?: pulumi.Input<boolean>;
    roleNames: pulumi.Input<pulumi.Input<string>[]>;
}
