// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LdapConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LdapConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapConfigurationState, opts?: pulumi.CustomResourceOptions): LdapConfiguration {
        return new LdapConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/ldapConfiguration:LdapConfiguration';

    /**
     * Returns true if the given object is an instance of LdapConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapConfiguration.__pulumiType;
    }

    public readonly authenticationEnabled!: pulumi.Output<boolean>;
    public readonly authorizationEnabled!: pulumi.Output<boolean>;
    public readonly authzQueryTemplate!: pulumi.Output<string>;
    public readonly bindPassword!: pulumi.Output<string>;
    public readonly bindUsername!: pulumi.Output<string>;
    public readonly caCertificate!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly userToDnMappings!: pulumi.Output<outputs.LdapConfigurationUserToDnMapping[] | undefined>;

    /**
     * Create a LdapConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapConfigurationArgs | LdapConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapConfigurationState | undefined;
            resourceInputs["authenticationEnabled"] = state ? state.authenticationEnabled : undefined;
            resourceInputs["authorizationEnabled"] = state ? state.authorizationEnabled : undefined;
            resourceInputs["authzQueryTemplate"] = state ? state.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["bindUsername"] = state ? state.bindUsername : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["userToDnMappings"] = state ? state.userToDnMappings : undefined;
        } else {
            const args = argsOrState as LdapConfigurationArgs | undefined;
            if ((!args || args.authenticationEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationEnabled'");
            }
            if ((!args || args.bindPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindPassword'");
            }
            if ((!args || args.bindUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindUsername'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authenticationEnabled"] = args ? args.authenticationEnabled : undefined;
            resourceInputs["authorizationEnabled"] = args ? args.authorizationEnabled : undefined;
            resourceInputs["authzQueryTemplate"] = args ? args.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = args?.bindPassword ? pulumi.secret(args.bindPassword) : undefined;
            resourceInputs["bindUsername"] = args ? args.bindUsername : undefined;
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["userToDnMappings"] = args ? args.userToDnMappings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bindPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LdapConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapConfiguration resources.
 */
export interface LdapConfigurationState {
    authenticationEnabled?: pulumi.Input<boolean>;
    authorizationEnabled?: pulumi.Input<boolean>;
    authzQueryTemplate?: pulumi.Input<string>;
    bindPassword?: pulumi.Input<string>;
    bindUsername?: pulumi.Input<string>;
    caCertificate?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    userToDnMappings?: pulumi.Input<pulumi.Input<inputs.LdapConfigurationUserToDnMapping>[]>;
}

/**
 * The set of arguments for constructing a LdapConfiguration resource.
 */
export interface LdapConfigurationArgs {
    authenticationEnabled: pulumi.Input<boolean>;
    authorizationEnabled?: pulumi.Input<boolean>;
    authzQueryTemplate?: pulumi.Input<string>;
    bindPassword: pulumi.Input<string>;
    bindUsername: pulumi.Input<string>;
    caCertificate?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    projectId: pulumi.Input<string>;
    userToDnMappings?: pulumi.Input<pulumi.Input<inputs.LdapConfigurationUserToDnMapping>[]>;
}
