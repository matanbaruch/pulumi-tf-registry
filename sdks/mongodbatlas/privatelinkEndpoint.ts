// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PrivatelinkEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing PrivatelinkEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivatelinkEndpointState, opts?: pulumi.CustomResourceOptions): PrivatelinkEndpoint {
        return new PrivatelinkEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/privatelinkEndpoint:PrivatelinkEndpoint';

    /**
     * Returns true if the given object is an instance of PrivatelinkEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivatelinkEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivatelinkEndpoint.__pulumiType;
    }

    public /*out*/ readonly endpointGroupNames!: pulumi.Output<string[]>;
    public /*out*/ readonly endpointServiceName!: pulumi.Output<string>;
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    public /*out*/ readonly interfaceEndpoints!: pulumi.Output<string[]>;
    public /*out*/ readonly privateEndpoints!: pulumi.Output<string[]>;
    public /*out*/ readonly privateLinkId!: pulumi.Output<string>;
    public /*out*/ readonly privateLinkServiceName!: pulumi.Output<string>;
    public /*out*/ readonly privateLinkServiceResourceId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly providerName!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly regionName!: pulumi.Output<string>;
    public /*out*/ readonly serviceAttachmentNames!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.PrivatelinkEndpointTimeouts | undefined>;

    /**
     * Create a PrivatelinkEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivatelinkEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivatelinkEndpointArgs | PrivatelinkEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivatelinkEndpointState | undefined;
            resourceInputs["endpointGroupNames"] = state ? state.endpointGroupNames : undefined;
            resourceInputs["endpointServiceName"] = state ? state.endpointServiceName : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["interfaceEndpoints"] = state ? state.interfaceEndpoints : undefined;
            resourceInputs["privateEndpoints"] = state ? state.privateEndpoints : undefined;
            resourceInputs["privateLinkId"] = state ? state.privateLinkId : undefined;
            resourceInputs["privateLinkServiceName"] = state ? state.privateLinkServiceName : undefined;
            resourceInputs["privateLinkServiceResourceId"] = state ? state.privateLinkServiceResourceId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["serviceAttachmentNames"] = state ? state.serviceAttachmentNames : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PrivatelinkEndpointArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpointGroupNames"] = undefined /*out*/;
            resourceInputs["endpointServiceName"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["interfaceEndpoints"] = undefined /*out*/;
            resourceInputs["privateEndpoints"] = undefined /*out*/;
            resourceInputs["privateLinkId"] = undefined /*out*/;
            resourceInputs["privateLinkServiceName"] = undefined /*out*/;
            resourceInputs["privateLinkServiceResourceId"] = undefined /*out*/;
            resourceInputs["regionName"] = undefined /*out*/;
            resourceInputs["serviceAttachmentNames"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivatelinkEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivatelinkEndpoint resources.
 */
export interface PrivatelinkEndpointState {
    endpointGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    endpointServiceName?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    interfaceEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    privateEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    privateLinkId?: pulumi.Input<string>;
    privateLinkServiceName?: pulumi.Input<string>;
    privateLinkServiceResourceId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    providerName?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    regionName?: pulumi.Input<string>;
    serviceAttachmentNames?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivatelinkEndpointTimeouts>;
}

/**
 * The set of arguments for constructing a PrivatelinkEndpoint resource.
 */
export interface PrivatelinkEndpointArgs {
    projectId: pulumi.Input<string>;
    providerName: pulumi.Input<string>;
    region: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivatelinkEndpointTimeouts>;
}
