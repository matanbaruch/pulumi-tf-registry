// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLdapConfiguration(args: GetLdapConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetLdapConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", {
        "id": args.id,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLdapConfiguration.
 */
export interface GetLdapConfigurationArgs {
    id?: string;
    projectId: string;
}

/**
 * A collection of values returned by getLdapConfiguration.
 */
export interface GetLdapConfigurationResult {
    readonly authenticationEnabled: boolean;
    readonly authorizationEnabled: boolean;
    readonly authzQueryTemplate: string;
    readonly bindPassword: string;
    readonly bindUsername: string;
    readonly caCertificate: string;
    readonly hostname: string;
    readonly id: string;
    readonly port: number;
    readonly projectId: string;
    readonly userToDnMappings: outputs.GetLdapConfigurationUserToDnMapping[];
}
export function getLdapConfigurationOutput(args: GetLdapConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLdapConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getLdapConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getLdapConfiguration.
 */
export interface GetLdapConfigurationOutputArgs {
    id?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
