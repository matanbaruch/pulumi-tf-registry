// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventTrigger extends pulumi.CustomResource {
    /**
     * Get an existing EventTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventTriggerState, opts?: pulumi.CustomResourceOptions): EventTrigger {
        return new EventTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/eventTrigger:EventTrigger';

    /**
     * Returns true if the given object is an instance of EventTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventTrigger.__pulumiType;
    }

    public readonly appId!: pulumi.Output<string>;
    public readonly configCollection!: pulumi.Output<string>;
    public readonly configDatabase!: pulumi.Output<string>;
    public readonly configFullDocument!: pulumi.Output<boolean>;
    public readonly configFullDocumentBefore!: pulumi.Output<boolean>;
    public readonly configMatch!: pulumi.Output<string>;
    public readonly configOperationType!: pulumi.Output<string>;
    public readonly configOperationTypes!: pulumi.Output<string[]>;
    public readonly configProject!: pulumi.Output<string>;
    public readonly configProviders!: pulumi.Output<string[]>;
    public readonly configSchedule!: pulumi.Output<string>;
    public /*out*/ readonly configScheduleType!: pulumi.Output<string>;
    public readonly configServiceId!: pulumi.Output<string>;
    public readonly disabled!: pulumi.Output<boolean>;
    public readonly eventProcessors!: pulumi.Output<outputs.EventTriggerEventProcessors | undefined>;
    public readonly functionId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly functionName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly triggerId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly unordered!: pulumi.Output<boolean>;

    /**
     * Create a EventTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventTriggerArgs | EventTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventTriggerState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["configCollection"] = state ? state.configCollection : undefined;
            resourceInputs["configDatabase"] = state ? state.configDatabase : undefined;
            resourceInputs["configFullDocument"] = state ? state.configFullDocument : undefined;
            resourceInputs["configFullDocumentBefore"] = state ? state.configFullDocumentBefore : undefined;
            resourceInputs["configMatch"] = state ? state.configMatch : undefined;
            resourceInputs["configOperationType"] = state ? state.configOperationType : undefined;
            resourceInputs["configOperationTypes"] = state ? state.configOperationTypes : undefined;
            resourceInputs["configProject"] = state ? state.configProject : undefined;
            resourceInputs["configProviders"] = state ? state.configProviders : undefined;
            resourceInputs["configSchedule"] = state ? state.configSchedule : undefined;
            resourceInputs["configScheduleType"] = state ? state.configScheduleType : undefined;
            resourceInputs["configServiceId"] = state ? state.configServiceId : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["eventProcessors"] = state ? state.eventProcessors : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unordered"] = state ? state.unordered : undefined;
        } else {
            const args = argsOrState as EventTriggerArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["configCollection"] = args ? args.configCollection : undefined;
            resourceInputs["configDatabase"] = args ? args.configDatabase : undefined;
            resourceInputs["configFullDocument"] = args ? args.configFullDocument : undefined;
            resourceInputs["configFullDocumentBefore"] = args ? args.configFullDocumentBefore : undefined;
            resourceInputs["configMatch"] = args ? args.configMatch : undefined;
            resourceInputs["configOperationType"] = args ? args.configOperationType : undefined;
            resourceInputs["configOperationTypes"] = args ? args.configOperationTypes : undefined;
            resourceInputs["configProject"] = args ? args.configProject : undefined;
            resourceInputs["configProviders"] = args ? args.configProviders : undefined;
            resourceInputs["configSchedule"] = args ? args.configSchedule : undefined;
            resourceInputs["configServiceId"] = args ? args.configServiceId : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["eventProcessors"] = args ? args.eventProcessors : undefined;
            resourceInputs["functionId"] = args ? args.functionId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unordered"] = args ? args.unordered : undefined;
            resourceInputs["configScheduleType"] = undefined /*out*/;
            resourceInputs["functionName"] = undefined /*out*/;
            resourceInputs["triggerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventTrigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventTrigger resources.
 */
export interface EventTriggerState {
    appId?: pulumi.Input<string>;
    configCollection?: pulumi.Input<string>;
    configDatabase?: pulumi.Input<string>;
    configFullDocument?: pulumi.Input<boolean>;
    configFullDocumentBefore?: pulumi.Input<boolean>;
    configMatch?: pulumi.Input<string>;
    configOperationType?: pulumi.Input<string>;
    configOperationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    configProject?: pulumi.Input<string>;
    configProviders?: pulumi.Input<pulumi.Input<string>[]>;
    configSchedule?: pulumi.Input<string>;
    configScheduleType?: pulumi.Input<string>;
    configServiceId?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    eventProcessors?: pulumi.Input<inputs.EventTriggerEventProcessors>;
    functionId?: pulumi.Input<string>;
    functionName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    triggerId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unordered?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EventTrigger resource.
 */
export interface EventTriggerArgs {
    appId: pulumi.Input<string>;
    configCollection?: pulumi.Input<string>;
    configDatabase?: pulumi.Input<string>;
    configFullDocument?: pulumi.Input<boolean>;
    configFullDocumentBefore?: pulumi.Input<boolean>;
    configMatch?: pulumi.Input<string>;
    configOperationType?: pulumi.Input<string>;
    configOperationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    configProject?: pulumi.Input<string>;
    configProviders?: pulumi.Input<pulumi.Input<string>[]>;
    configSchedule?: pulumi.Input<string>;
    configServiceId?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    eventProcessors?: pulumi.Input<inputs.EventTriggerEventProcessors>;
    functionId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    type: pulumi.Input<string>;
    unordered?: pulumi.Input<boolean>;
}
