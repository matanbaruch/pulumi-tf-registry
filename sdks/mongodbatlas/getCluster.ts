// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getCluster:getCluster", {
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    id?: string;
    name: string;
    projectId: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly advancedConfigurations: outputs.GetClusterAdvancedConfiguration[];
    readonly autoScalingComputeEnabled: boolean;
    readonly autoScalingComputeScaleDownEnabled: boolean;
    readonly autoScalingDiskGbEnabled: boolean;
    readonly backingProviderName: string;
    readonly backupEnabled: boolean;
    readonly biConnectorConfigs: outputs.GetClusterBiConnectorConfig[];
    readonly clusterType: string;
    readonly connectionStrings: outputs.GetClusterConnectionString[];
    readonly containerId: string;
    readonly diskSizeGb: number;
    readonly encryptionAtRestProvider: string;
    readonly id: string;
    /**
     * @deprecated Deprecated
     */
    readonly labels: outputs.GetClusterLabel[];
    readonly mongoDbMajorVersion: string;
    readonly mongoDbVersion: string;
    readonly mongoUri: string;
    readonly mongoUriUpdated: string;
    readonly mongoUriWithOptions: string;
    readonly name: string;
    readonly numShards: number;
    readonly paused: boolean;
    readonly pitEnabled: boolean;
    readonly projectId: string;
    readonly providerAutoScalingComputeMaxInstanceSize: string;
    readonly providerAutoScalingComputeMinInstanceSize: string;
    readonly providerBackupEnabled: boolean;
    readonly providerDiskIops: number;
    readonly providerDiskTypeName: string;
    readonly providerEncryptEbsVolume: boolean;
    readonly providerEncryptEbsVolumeFlag: boolean;
    readonly providerInstanceSizeName: string;
    readonly providerName: string;
    readonly providerRegionName: string;
    readonly providerVolumeType: string;
    readonly replicationFactor: number;
    readonly replicationSpecs: outputs.GetClusterReplicationSpec[];
    readonly snapshotBackupPolicies: outputs.GetClusterSnapshotBackupPolicy[];
    readonly srvAddress: string;
    readonly stateName: string;
    readonly tags: outputs.GetClusterTag[];
    readonly terminationProtectionEnabled: boolean;
    readonly versionReleaseSystem: string;
}
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
