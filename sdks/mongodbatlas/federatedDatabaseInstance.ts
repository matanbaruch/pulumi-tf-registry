// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FederatedDatabaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing FederatedDatabaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FederatedDatabaseInstanceState, opts?: pulumi.CustomResourceOptions): FederatedDatabaseInstance {
        return new FederatedDatabaseInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/federatedDatabaseInstance:FederatedDatabaseInstance';

    /**
     * Returns true if the given object is an instance of FederatedDatabaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FederatedDatabaseInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedDatabaseInstance.__pulumiType;
    }

    public readonly cloudProviderConfig!: pulumi.Output<outputs.FederatedDatabaseInstanceCloudProviderConfig | undefined>;
    public readonly dataProcessRegion!: pulumi.Output<outputs.FederatedDatabaseInstanceDataProcessRegion | undefined>;
    public /*out*/ readonly hostnames!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageDatabases!: pulumi.Output<outputs.FederatedDatabaseInstanceStorageDatabase[] | undefined>;
    public readonly storageStores!: pulumi.Output<outputs.FederatedDatabaseInstanceStorageStore[] | undefined>;

    /**
     * Create a FederatedDatabaseInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FederatedDatabaseInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FederatedDatabaseInstanceArgs | FederatedDatabaseInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FederatedDatabaseInstanceState | undefined;
            resourceInputs["cloudProviderConfig"] = state ? state.cloudProviderConfig : undefined;
            resourceInputs["dataProcessRegion"] = state ? state.dataProcessRegion : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageDatabases"] = state ? state.storageDatabases : undefined;
            resourceInputs["storageStores"] = state ? state.storageStores : undefined;
        } else {
            const args = argsOrState as FederatedDatabaseInstanceArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["cloudProviderConfig"] = args ? args.cloudProviderConfig : undefined;
            resourceInputs["dataProcessRegion"] = args ? args.dataProcessRegion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["storageDatabases"] = args ? args.storageDatabases : undefined;
            resourceInputs["storageStores"] = args ? args.storageStores : undefined;
            resourceInputs["hostnames"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedDatabaseInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FederatedDatabaseInstance resources.
 */
export interface FederatedDatabaseInstanceState {
    cloudProviderConfig?: pulumi.Input<inputs.FederatedDatabaseInstanceCloudProviderConfig>;
    dataProcessRegion?: pulumi.Input<inputs.FederatedDatabaseInstanceDataProcessRegion>;
    hostnames?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageDatabases?: pulumi.Input<pulumi.Input<inputs.FederatedDatabaseInstanceStorageDatabase>[]>;
    storageStores?: pulumi.Input<pulumi.Input<inputs.FederatedDatabaseInstanceStorageStore>[]>;
}

/**
 * The set of arguments for constructing a FederatedDatabaseInstance resource.
 */
export interface FederatedDatabaseInstanceArgs {
    cloudProviderConfig?: pulumi.Input<inputs.FederatedDatabaseInstanceCloudProviderConfig>;
    dataProcessRegion?: pulumi.Input<inputs.FederatedDatabaseInstanceDataProcessRegion>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    storageDatabases?: pulumi.Input<pulumi.Input<inputs.FederatedDatabaseInstanceStorageDatabase>[]>;
    storageStores?: pulumi.Input<pulumi.Input<inputs.FederatedDatabaseInstanceStorageStore>[]>;
}
