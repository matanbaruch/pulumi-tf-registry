// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ThirdPartyIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ThirdPartyIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThirdPartyIntegrationState, opts?: pulumi.CustomResourceOptions): ThirdPartyIntegration {
        return new ThirdPartyIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration';

    /**
     * Returns true if the given object is an instance of ThirdPartyIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThirdPartyIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThirdPartyIntegration.__pulumiType;
    }

    public readonly apiKey!: pulumi.Output<string>;
    public readonly channelName!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly microsoftTeamsWebhookUrl!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly routingKey!: pulumi.Output<string>;
    public readonly secret!: pulumi.Output<string | undefined>;
    public readonly serviceDiscovery!: pulumi.Output<string>;
    public readonly serviceKey!: pulumi.Output<string>;
    public readonly teamName!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a ThirdPartyIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThirdPartyIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThirdPartyIntegrationArgs | ThirdPartyIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThirdPartyIntegrationState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["microsoftTeamsWebhookUrl"] = state ? state.microsoftTeamsWebhookUrl : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routingKey"] = state ? state.routingKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["serviceDiscovery"] = state ? state.serviceDiscovery : undefined;
            resourceInputs["serviceKey"] = state ? state.serviceKey : undefined;
            resourceInputs["teamName"] = state ? state.teamName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as ThirdPartyIntegrationArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["microsoftTeamsWebhookUrl"] = args?.microsoftTeamsWebhookUrl ? pulumi.secret(args.microsoftTeamsWebhookUrl) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingKey"] = args?.routingKey ? pulumi.secret(args.routingKey) : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["serviceDiscovery"] = args?.serviceDiscovery ? pulumi.secret(args.serviceDiscovery) : undefined;
            resourceInputs["serviceKey"] = args?.serviceKey ? pulumi.secret(args.serviceKey) : undefined;
            resourceInputs["teamName"] = args ? args.teamName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["userName"] = args?.userName ? pulumi.secret(args.userName) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "microsoftTeamsWebhookUrl", "password", "routingKey", "secret", "serviceDiscovery", "serviceKey", "userName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ThirdPartyIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThirdPartyIntegration resources.
 */
export interface ThirdPartyIntegrationState {
    apiKey?: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    microsoftTeamsWebhookUrl?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingKey?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    serviceDiscovery?: pulumi.Input<string>;
    serviceKey?: pulumi.Input<string>;
    teamName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ThirdPartyIntegration resource.
 */
export interface ThirdPartyIntegrationArgs {
    apiKey?: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    microsoftTeamsWebhookUrl?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingKey?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    serviceDiscovery?: pulumi.Input<string>;
    serviceKey?: pulumi.Input<string>;
    teamName?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}
