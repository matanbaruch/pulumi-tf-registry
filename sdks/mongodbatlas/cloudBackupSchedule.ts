// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudBackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing CloudBackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudBackupScheduleState, opts?: pulumi.CustomResourceOptions): CloudBackupSchedule {
        return new CloudBackupSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule';

    /**
     * Returns true if the given object is an instance of CloudBackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudBackupSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudBackupSchedule.__pulumiType;
    }

    public readonly autoExportEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly copySettings!: pulumi.Output<outputs.CloudBackupScheduleCopySetting[] | undefined>;
    public readonly export!: pulumi.Output<outputs.CloudBackupScheduleExport | undefined>;
    public /*out*/ readonly idPolicy!: pulumi.Output<string>;
    public /*out*/ readonly nextSnapshot!: pulumi.Output<string>;
    public readonly policyItemDaily!: pulumi.Output<outputs.CloudBackupSchedulePolicyItemDaily | undefined>;
    public readonly policyItemHourly!: pulumi.Output<outputs.CloudBackupSchedulePolicyItemHourly | undefined>;
    public readonly policyItemMonthlies!: pulumi.Output<outputs.CloudBackupSchedulePolicyItemMonthly[] | undefined>;
    public readonly policyItemWeeklies!: pulumi.Output<outputs.CloudBackupSchedulePolicyItemWeekly[] | undefined>;
    public readonly policyItemYearlies!: pulumi.Output<outputs.CloudBackupSchedulePolicyItemYearly[] | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly referenceHourOfDay!: pulumi.Output<number>;
    public readonly referenceMinuteOfHour!: pulumi.Output<number>;
    public readonly restoreWindowDays!: pulumi.Output<number>;
    public readonly updateSnapshots!: pulumi.Output<boolean>;
    public readonly useOrgAndGroupNamesInExportPrefix!: pulumi.Output<boolean>;

    /**
     * Create a CloudBackupSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudBackupScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudBackupScheduleArgs | CloudBackupScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudBackupScheduleState | undefined;
            resourceInputs["autoExportEnabled"] = state ? state.autoExportEnabled : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["copySettings"] = state ? state.copySettings : undefined;
            resourceInputs["export"] = state ? state.export : undefined;
            resourceInputs["idPolicy"] = state ? state.idPolicy : undefined;
            resourceInputs["nextSnapshot"] = state ? state.nextSnapshot : undefined;
            resourceInputs["policyItemDaily"] = state ? state.policyItemDaily : undefined;
            resourceInputs["policyItemHourly"] = state ? state.policyItemHourly : undefined;
            resourceInputs["policyItemMonthlies"] = state ? state.policyItemMonthlies : undefined;
            resourceInputs["policyItemWeeklies"] = state ? state.policyItemWeeklies : undefined;
            resourceInputs["policyItemYearlies"] = state ? state.policyItemYearlies : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["referenceHourOfDay"] = state ? state.referenceHourOfDay : undefined;
            resourceInputs["referenceMinuteOfHour"] = state ? state.referenceMinuteOfHour : undefined;
            resourceInputs["restoreWindowDays"] = state ? state.restoreWindowDays : undefined;
            resourceInputs["updateSnapshots"] = state ? state.updateSnapshots : undefined;
            resourceInputs["useOrgAndGroupNamesInExportPrefix"] = state ? state.useOrgAndGroupNamesInExportPrefix : undefined;
        } else {
            const args = argsOrState as CloudBackupScheduleArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["autoExportEnabled"] = args ? args.autoExportEnabled : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["copySettings"] = args ? args.copySettings : undefined;
            resourceInputs["export"] = args ? args.export : undefined;
            resourceInputs["policyItemDaily"] = args ? args.policyItemDaily : undefined;
            resourceInputs["policyItemHourly"] = args ? args.policyItemHourly : undefined;
            resourceInputs["policyItemMonthlies"] = args ? args.policyItemMonthlies : undefined;
            resourceInputs["policyItemWeeklies"] = args ? args.policyItemWeeklies : undefined;
            resourceInputs["policyItemYearlies"] = args ? args.policyItemYearlies : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["referenceHourOfDay"] = args ? args.referenceHourOfDay : undefined;
            resourceInputs["referenceMinuteOfHour"] = args ? args.referenceMinuteOfHour : undefined;
            resourceInputs["restoreWindowDays"] = args ? args.restoreWindowDays : undefined;
            resourceInputs["updateSnapshots"] = args ? args.updateSnapshots : undefined;
            resourceInputs["useOrgAndGroupNamesInExportPrefix"] = args ? args.useOrgAndGroupNamesInExportPrefix : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["idPolicy"] = undefined /*out*/;
            resourceInputs["nextSnapshot"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudBackupSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudBackupSchedule resources.
 */
export interface CloudBackupScheduleState {
    autoExportEnabled?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    copySettings?: pulumi.Input<pulumi.Input<inputs.CloudBackupScheduleCopySetting>[]>;
    export?: pulumi.Input<inputs.CloudBackupScheduleExport>;
    idPolicy?: pulumi.Input<string>;
    nextSnapshot?: pulumi.Input<string>;
    policyItemDaily?: pulumi.Input<inputs.CloudBackupSchedulePolicyItemDaily>;
    policyItemHourly?: pulumi.Input<inputs.CloudBackupSchedulePolicyItemHourly>;
    policyItemMonthlies?: pulumi.Input<pulumi.Input<inputs.CloudBackupSchedulePolicyItemMonthly>[]>;
    policyItemWeeklies?: pulumi.Input<pulumi.Input<inputs.CloudBackupSchedulePolicyItemWeekly>[]>;
    policyItemYearlies?: pulumi.Input<pulumi.Input<inputs.CloudBackupSchedulePolicyItemYearly>[]>;
    projectId?: pulumi.Input<string>;
    referenceHourOfDay?: pulumi.Input<number>;
    referenceMinuteOfHour?: pulumi.Input<number>;
    restoreWindowDays?: pulumi.Input<number>;
    updateSnapshots?: pulumi.Input<boolean>;
    useOrgAndGroupNamesInExportPrefix?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CloudBackupSchedule resource.
 */
export interface CloudBackupScheduleArgs {
    autoExportEnabled?: pulumi.Input<boolean>;
    clusterName: pulumi.Input<string>;
    copySettings?: pulumi.Input<pulumi.Input<inputs.CloudBackupScheduleCopySetting>[]>;
    export?: pulumi.Input<inputs.CloudBackupScheduleExport>;
    policyItemDaily?: pulumi.Input<inputs.CloudBackupSchedulePolicyItemDaily>;
    policyItemHourly?: pulumi.Input<inputs.CloudBackupSchedulePolicyItemHourly>;
    policyItemMonthlies?: pulumi.Input<pulumi.Input<inputs.CloudBackupSchedulePolicyItemMonthly>[]>;
    policyItemWeeklies?: pulumi.Input<pulumi.Input<inputs.CloudBackupSchedulePolicyItemWeekly>[]>;
    policyItemYearlies?: pulumi.Input<pulumi.Input<inputs.CloudBackupSchedulePolicyItemYearly>[]>;
    projectId: pulumi.Input<string>;
    referenceHourOfDay?: pulumi.Input<number>;
    referenceMinuteOfHour?: pulumi.Input<number>;
    restoreWindowDays?: pulumi.Input<number>;
    updateSnapshots?: pulumi.Input<boolean>;
    useOrgAndGroupNamesInExportPrefix?: pulumi.Input<boolean>;
}
