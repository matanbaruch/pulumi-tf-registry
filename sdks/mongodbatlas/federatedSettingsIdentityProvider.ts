// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FederatedSettingsIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing FederatedSettingsIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FederatedSettingsIdentityProviderState, opts?: pulumi.CustomResourceOptions): FederatedSettingsIdentityProvider {
        return new FederatedSettingsIdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider';

    /**
     * Returns true if the given object is an instance of FederatedSettingsIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FederatedSettingsIdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedSettingsIdentityProvider.__pulumiType;
    }

    public readonly associatedDomains!: pulumi.Output<string[] | undefined>;
    public readonly audience!: pulumi.Output<string | undefined>;
    public readonly authorizationType!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly federationSettingsId!: pulumi.Output<string>;
    public readonly groupsClaim!: pulumi.Output<string | undefined>;
    public /*out*/ readonly idpId!: pulumi.Output<string>;
    public readonly idpType!: pulumi.Output<string>;
    public readonly issuerUri!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly oktaIdpId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly requestBinding!: pulumi.Output<string | undefined>;
    public readonly requestedScopes!: pulumi.Output<string[] | undefined>;
    public readonly responseSignatureAlgorithm!: pulumi.Output<string | undefined>;
    public readonly ssoDebugEnabled!: pulumi.Output<boolean | undefined>;
    public readonly ssoUrl!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly userClaim!: pulumi.Output<string | undefined>;

    /**
     * Create a FederatedSettingsIdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FederatedSettingsIdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FederatedSettingsIdentityProviderArgs | FederatedSettingsIdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FederatedSettingsIdentityProviderState | undefined;
            resourceInputs["associatedDomains"] = state ? state.associatedDomains : undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["authorizationType"] = state ? state.authorizationType : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["federationSettingsId"] = state ? state.federationSettingsId : undefined;
            resourceInputs["groupsClaim"] = state ? state.groupsClaim : undefined;
            resourceInputs["idpId"] = state ? state.idpId : undefined;
            resourceInputs["idpType"] = state ? state.idpType : undefined;
            resourceInputs["issuerUri"] = state ? state.issuerUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oktaIdpId"] = state ? state.oktaIdpId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["requestBinding"] = state ? state.requestBinding : undefined;
            resourceInputs["requestedScopes"] = state ? state.requestedScopes : undefined;
            resourceInputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            resourceInputs["ssoDebugEnabled"] = state ? state.ssoDebugEnabled : undefined;
            resourceInputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userClaim"] = state ? state.userClaim : undefined;
        } else {
            const args = argsOrState as FederatedSettingsIdentityProviderArgs | undefined;
            if ((!args || args.federationSettingsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'federationSettingsId'");
            }
            if ((!args || args.issuerUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUri'");
            }
            resourceInputs["associatedDomains"] = args ? args.associatedDomains : undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["authorizationType"] = args ? args.authorizationType : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["federationSettingsId"] = args ? args.federationSettingsId : undefined;
            resourceInputs["groupsClaim"] = args ? args.groupsClaim : undefined;
            resourceInputs["idpType"] = args ? args.idpType : undefined;
            resourceInputs["issuerUri"] = args ? args.issuerUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["requestBinding"] = args ? args.requestBinding : undefined;
            resourceInputs["requestedScopes"] = args ? args.requestedScopes : undefined;
            resourceInputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            resourceInputs["ssoDebugEnabled"] = args ? args.ssoDebugEnabled : undefined;
            resourceInputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userClaim"] = args ? args.userClaim : undefined;
            resourceInputs["idpId"] = undefined /*out*/;
            resourceInputs["oktaIdpId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedSettingsIdentityProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FederatedSettingsIdentityProvider resources.
 */
export interface FederatedSettingsIdentityProviderState {
    associatedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    audience?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    federationSettingsId?: pulumi.Input<string>;
    groupsClaim?: pulumi.Input<string>;
    idpId?: pulumi.Input<string>;
    idpType?: pulumi.Input<string>;
    issuerUri?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oktaIdpId?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    requestBinding?: pulumi.Input<string>;
    requestedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    responseSignatureAlgorithm?: pulumi.Input<string>;
    ssoDebugEnabled?: pulumi.Input<boolean>;
    ssoUrl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userClaim?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FederatedSettingsIdentityProvider resource.
 */
export interface FederatedSettingsIdentityProviderArgs {
    associatedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    audience?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    federationSettingsId: pulumi.Input<string>;
    groupsClaim?: pulumi.Input<string>;
    idpType?: pulumi.Input<string>;
    issuerUri: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    requestBinding?: pulumi.Input<string>;
    requestedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    responseSignatureAlgorithm?: pulumi.Input<string>;
    ssoDebugEnabled?: pulumi.Input<boolean>;
    ssoUrl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userClaim?: pulumi.Input<string>;
}
