// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataLakePipeline extends pulumi.CustomResource {
    /**
     * Get an existing DataLakePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataLakePipelineState, opts?: pulumi.CustomResourceOptions): DataLakePipeline {
        return new DataLakePipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/dataLakePipeline:DataLakePipeline';

    /**
     * Returns true if the given object is an instance of DataLakePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataLakePipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLakePipeline.__pulumiType;
    }

    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public /*out*/ readonly ingestionSchedules!: pulumi.Output<outputs.DataLakePipelineIngestionSchedule[]>;
    public /*out*/ readonly lastUpdatedDate!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly sink!: pulumi.Output<outputs.DataLakePipelineSink | undefined>;
    public /*out*/ readonly snapshots!: pulumi.Output<outputs.DataLakePipelineSnapshot[]>;
    public readonly source!: pulumi.Output<outputs.DataLakePipelineSource | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly transformations!: pulumi.Output<outputs.DataLakePipelineTransformation[] | undefined>;

    /**
     * Create a DataLakePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataLakePipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataLakePipelineArgs | DataLakePipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataLakePipelineState | undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["ingestionSchedules"] = state ? state.ingestionSchedules : undefined;
            resourceInputs["lastUpdatedDate"] = state ? state.lastUpdatedDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sink"] = state ? state.sink : undefined;
            resourceInputs["snapshots"] = state ? state.snapshots : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["transformations"] = state ? state.transformations : undefined;
        } else {
            const args = argsOrState as DataLakePipelineArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sink"] = args ? args.sink : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["transformations"] = args ? args.transformations : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["ingestionSchedules"] = undefined /*out*/;
            resourceInputs["lastUpdatedDate"] = undefined /*out*/;
            resourceInputs["snapshots"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataLakePipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataLakePipeline resources.
 */
export interface DataLakePipelineState {
    createdDate?: pulumi.Input<string>;
    ingestionSchedules?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineIngestionSchedule>[]>;
    lastUpdatedDate?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    sink?: pulumi.Input<inputs.DataLakePipelineSink>;
    snapshots?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineSnapshot>[]>;
    source?: pulumi.Input<inputs.DataLakePipelineSource>;
    state?: pulumi.Input<string>;
    transformations?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineTransformation>[]>;
}

/**
 * The set of arguments for constructing a DataLakePipeline resource.
 */
export interface DataLakePipelineArgs {
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    sink?: pulumi.Input<inputs.DataLakePipelineSink>;
    source?: pulumi.Input<inputs.DataLakePipelineSource>;
    transformations?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineTransformation>[]>;
}
