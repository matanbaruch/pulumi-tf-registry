// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GlobalPermissionMapping extends pulumi.CustomResource {
    /**
     * Get an existing GlobalPermissionMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalPermissionMappingState, opts?: pulumi.CustomResourceOptions): GlobalPermissionMapping {
        return new GlobalPermissionMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/globalPermissionMapping:GlobalPermissionMapping';

    /**
     * Returns true if the given object is an instance of GlobalPermissionMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalPermissionMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalPermissionMapping.__pulumiType;
    }

    /**
     * Application role ID for the permission mapping.
     */
    public readonly appRoleId!: pulumi.Output<number>;
    /**
     * Set of user group IDs for the permission mapping.
     */
    public readonly userGroupsIds!: pulumi.Output<number[]>;
    /**
     * Set of user IDs for the permission mapping.
     */
    public readonly userIds!: pulumi.Output<number[]>;

    /**
     * Create a GlobalPermissionMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalPermissionMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalPermissionMappingArgs | GlobalPermissionMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalPermissionMappingState | undefined;
            resourceInputs["appRoleId"] = state ? state.appRoleId : undefined;
            resourceInputs["userGroupsIds"] = state ? state.userGroupsIds : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as GlobalPermissionMappingArgs | undefined;
            if ((!args || args.appRoleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appRoleId'");
            }
            if ((!args || args.userGroupsIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userGroupsIds'");
            }
            if ((!args || args.userIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userIds'");
            }
            resourceInputs["appRoleId"] = args ? args.appRoleId : undefined;
            resourceInputs["userGroupsIds"] = args ? args.userGroupsIds : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalPermissionMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlobalPermissionMapping resources.
 */
export interface GlobalPermissionMappingState {
    /**
     * Application role ID for the permission mapping.
     */
    appRoleId?: pulumi.Input<number>;
    /**
     * Set of user group IDs for the permission mapping.
     */
    userGroupsIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Set of user IDs for the permission mapping.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a GlobalPermissionMapping resource.
 */
export interface GlobalPermissionMappingArgs {
    /**
     * Application role ID for the permission mapping.
     */
    appRoleId: pulumi.Input<number>;
    /**
     * Set of user group IDs for the permission mapping.
     */
    userGroupsIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Set of user IDs for the permission mapping.
     */
    userIds: pulumi.Input<pulumi.Input<number>[]>;
}
