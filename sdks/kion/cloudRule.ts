// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudRule extends pulumi.CustomResource {
    /**
     * Get an existing CloudRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudRuleState, opts?: pulumi.CustomResourceOptions): CloudRule {
        return new CloudRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/cloudRule:CloudRule';

    /**
     * Returns true if the given object is an instance of CloudRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudRule.__pulumiType;
    }

    public readonly awsCloudformationTemplates!: pulumi.Output<outputs.CloudRuleAwsCloudformationTemplate[] | undefined>;
    public readonly awsIamPolicies!: pulumi.Output<outputs.CloudRuleAwsIamPolicy[] | undefined>;
    public readonly azureArmTemplateDefinitions!: pulumi.Output<outputs.CloudRuleAzureArmTemplateDefinition[] | undefined>;
    public readonly azurePolicyDefinitions!: pulumi.Output<outputs.CloudRuleAzurePolicyDefinition[] | undefined>;
    public readonly azureRoleDefinitions!: pulumi.Output<outputs.CloudRuleAzureRoleDefinition[] | undefined>;
    public /*out*/ readonly builtIn!: pulumi.Output<boolean>;
    public readonly complianceStandards!: pulumi.Output<outputs.CloudRuleComplianceStandard[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly gcpIamRoles!: pulumi.Output<outputs.CloudRuleGcpIamRole[] | undefined>;
    public readonly internalAwsAmis!: pulumi.Output<outputs.CloudRuleInternalAwsAmi[] | undefined>;
    public readonly internalAwsServiceCatalogPortfolios!: pulumi.Output<outputs.CloudRuleInternalAwsServiceCatalogPortfolio[] | undefined>;
    /**
     * A map of labels to assign to the cloud rule. The labels must already exist in Kion.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ouses!: pulumi.Output<outputs.CloudRuleOuse[] | undefined>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUserGroups!: pulumi.Output<outputs.CloudRuleOwnerUserGroup[] | undefined>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUsers!: pulumi.Output<outputs.CloudRuleOwnerUser[] | undefined>;
    public readonly postWebhookId!: pulumi.Output<number | undefined>;
    public readonly preWebhookId!: pulumi.Output<number | undefined>;
    public readonly projects!: pulumi.Output<outputs.CloudRuleProject[] | undefined>;
    public readonly serviceControlPolicies!: pulumi.Output<outputs.CloudRuleServiceControlPolicy[] | undefined>;

    /**
     * Create a CloudRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudRuleArgs | CloudRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudRuleState | undefined;
            resourceInputs["awsCloudformationTemplates"] = state ? state.awsCloudformationTemplates : undefined;
            resourceInputs["awsIamPolicies"] = state ? state.awsIamPolicies : undefined;
            resourceInputs["azureArmTemplateDefinitions"] = state ? state.azureArmTemplateDefinitions : undefined;
            resourceInputs["azurePolicyDefinitions"] = state ? state.azurePolicyDefinitions : undefined;
            resourceInputs["azureRoleDefinitions"] = state ? state.azureRoleDefinitions : undefined;
            resourceInputs["builtIn"] = state ? state.builtIn : undefined;
            resourceInputs["complianceStandards"] = state ? state.complianceStandards : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gcpIamRoles"] = state ? state.gcpIamRoles : undefined;
            resourceInputs["internalAwsAmis"] = state ? state.internalAwsAmis : undefined;
            resourceInputs["internalAwsServiceCatalogPortfolios"] = state ? state.internalAwsServiceCatalogPortfolios : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ouses"] = state ? state.ouses : undefined;
            resourceInputs["ownerUserGroups"] = state ? state.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = state ? state.ownerUsers : undefined;
            resourceInputs["postWebhookId"] = state ? state.postWebhookId : undefined;
            resourceInputs["preWebhookId"] = state ? state.preWebhookId : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["serviceControlPolicies"] = state ? state.serviceControlPolicies : undefined;
        } else {
            const args = argsOrState as CloudRuleArgs | undefined;
            resourceInputs["awsCloudformationTemplates"] = args ? args.awsCloudformationTemplates : undefined;
            resourceInputs["awsIamPolicies"] = args ? args.awsIamPolicies : undefined;
            resourceInputs["azureArmTemplateDefinitions"] = args ? args.azureArmTemplateDefinitions : undefined;
            resourceInputs["azurePolicyDefinitions"] = args ? args.azurePolicyDefinitions : undefined;
            resourceInputs["azureRoleDefinitions"] = args ? args.azureRoleDefinitions : undefined;
            resourceInputs["complianceStandards"] = args ? args.complianceStandards : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gcpIamRoles"] = args ? args.gcpIamRoles : undefined;
            resourceInputs["internalAwsAmis"] = args ? args.internalAwsAmis : undefined;
            resourceInputs["internalAwsServiceCatalogPortfolios"] = args ? args.internalAwsServiceCatalogPortfolios : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ouses"] = args ? args.ouses : undefined;
            resourceInputs["ownerUserGroups"] = args ? args.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = args ? args.ownerUsers : undefined;
            resourceInputs["postWebhookId"] = args ? args.postWebhookId : undefined;
            resourceInputs["preWebhookId"] = args ? args.preWebhookId : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["serviceControlPolicies"] = args ? args.serviceControlPolicies : undefined;
            resourceInputs["builtIn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudRule resources.
 */
export interface CloudRuleState {
    awsCloudformationTemplates?: pulumi.Input<pulumi.Input<inputs.CloudRuleAwsCloudformationTemplate>[]>;
    awsIamPolicies?: pulumi.Input<pulumi.Input<inputs.CloudRuleAwsIamPolicy>[]>;
    azureArmTemplateDefinitions?: pulumi.Input<pulumi.Input<inputs.CloudRuleAzureArmTemplateDefinition>[]>;
    azurePolicyDefinitions?: pulumi.Input<pulumi.Input<inputs.CloudRuleAzurePolicyDefinition>[]>;
    azureRoleDefinitions?: pulumi.Input<pulumi.Input<inputs.CloudRuleAzureRoleDefinition>[]>;
    builtIn?: pulumi.Input<boolean>;
    complianceStandards?: pulumi.Input<pulumi.Input<inputs.CloudRuleComplianceStandard>[]>;
    description?: pulumi.Input<string>;
    gcpIamRoles?: pulumi.Input<pulumi.Input<inputs.CloudRuleGcpIamRole>[]>;
    internalAwsAmis?: pulumi.Input<pulumi.Input<inputs.CloudRuleInternalAwsAmi>[]>;
    internalAwsServiceCatalogPortfolios?: pulumi.Input<pulumi.Input<inputs.CloudRuleInternalAwsServiceCatalogPortfolio>[]>;
    /**
     * A map of labels to assign to the cloud rule. The labels must already exist in Kion.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouses?: pulumi.Input<pulumi.Input<inputs.CloudRuleOuse>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.CloudRuleOwnerUserGroup>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.CloudRuleOwnerUser>[]>;
    postWebhookId?: pulumi.Input<number>;
    preWebhookId?: pulumi.Input<number>;
    projects?: pulumi.Input<pulumi.Input<inputs.CloudRuleProject>[]>;
    serviceControlPolicies?: pulumi.Input<pulumi.Input<inputs.CloudRuleServiceControlPolicy>[]>;
}

/**
 * The set of arguments for constructing a CloudRule resource.
 */
export interface CloudRuleArgs {
    awsCloudformationTemplates?: pulumi.Input<pulumi.Input<inputs.CloudRuleAwsCloudformationTemplate>[]>;
    awsIamPolicies?: pulumi.Input<pulumi.Input<inputs.CloudRuleAwsIamPolicy>[]>;
    azureArmTemplateDefinitions?: pulumi.Input<pulumi.Input<inputs.CloudRuleAzureArmTemplateDefinition>[]>;
    azurePolicyDefinitions?: pulumi.Input<pulumi.Input<inputs.CloudRuleAzurePolicyDefinition>[]>;
    azureRoleDefinitions?: pulumi.Input<pulumi.Input<inputs.CloudRuleAzureRoleDefinition>[]>;
    complianceStandards?: pulumi.Input<pulumi.Input<inputs.CloudRuleComplianceStandard>[]>;
    description?: pulumi.Input<string>;
    gcpIamRoles?: pulumi.Input<pulumi.Input<inputs.CloudRuleGcpIamRole>[]>;
    internalAwsAmis?: pulumi.Input<pulumi.Input<inputs.CloudRuleInternalAwsAmi>[]>;
    internalAwsServiceCatalogPortfolios?: pulumi.Input<pulumi.Input<inputs.CloudRuleInternalAwsServiceCatalogPortfolio>[]>;
    /**
     * A map of labels to assign to the cloud rule. The labels must already exist in Kion.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouses?: pulumi.Input<pulumi.Input<inputs.CloudRuleOuse>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.CloudRuleOwnerUserGroup>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.CloudRuleOwnerUser>[]>;
    postWebhookId?: pulumi.Input<number>;
    preWebhookId?: pulumi.Input<number>;
    projects?: pulumi.Input<pulumi.Input<inputs.CloudRuleProject>[]>;
    serviceControlPolicies?: pulumi.Input<pulumi.Input<inputs.CloudRuleServiceControlPolicy>[]>;
}
