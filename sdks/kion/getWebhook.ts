// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getWebhook(args: GetWebhookArgs, opts?: pulumi.InvokeOptions): Promise<GetWebhookResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("kion:index/getWebhook:getWebhook", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWebhook.
 */
export interface GetWebhookArgs {
    id: string;
}

/**
 * A collection of values returned by getWebhook.
 */
export interface GetWebhookResult {
    readonly calloutUrl: string;
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly ownerUserGroupIds: number[];
    readonly ownerUserIds: number[];
    readonly requestBody: string;
    readonly requestHeaders: string;
    readonly requestMethod: string;
    readonly shouldSendSecureInfo: boolean;
    readonly skipSsl: boolean;
    readonly timeoutInSeconds: number;
    readonly useRequestHeaders: boolean;
}
export function getWebhookOutput(args: GetWebhookOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWebhookResult> {
    return pulumi.output(args).apply((a: any) => getWebhook(a, opts))
}

/**
 * A collection of arguments for invoking getWebhook.
 */
export interface GetWebhookOutputArgs {
    id: pulumi.Input<string>;
}
