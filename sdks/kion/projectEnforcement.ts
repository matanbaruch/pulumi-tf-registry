// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProjectEnforcement extends pulumi.CustomResource {
    /**
     * Get an existing ProjectEnforcement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectEnforcementState, opts?: pulumi.CustomResourceOptions): ProjectEnforcement {
        return new ProjectEnforcement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/projectEnforcement:ProjectEnforcement';

    /**
     * Returns true if the given object is an instance of ProjectEnforcement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectEnforcement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectEnforcement.__pulumiType;
    }

    /**
     * Type of the amount. Valid values are 'custom', 'last_month'.
     */
    public readonly amountType!: pulumi.Output<string | undefined>;
    /**
     * Defines a Cloud Rule ID associated with the enforcement.
     */
    public readonly cloudRuleId!: pulumi.Output<number | undefined>;
    /**
     * Optional, user-provided description of the enforcement.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Flag that specifies if the enforcement is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Frequency at which notifications are sent for this enforcement.
     */
    public readonly notificationFrequency!: pulumi.Output<string | undefined>;
    /**
     * Flag that specifies if enforcement will place project in an overburn state when triggered.
     */
    public readonly overburn!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the project under enforcement.
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * ID of the service related to the enforcement.
     */
    public readonly serviceId!: pulumi.Output<number | undefined>;
    /**
     * Type of spend option. Valid values are 'spend', 'remaining'.
     */
    public readonly spendOption!: pulumi.Output<string | undefined>;
    /**
     * Threshold value. Either a dollar amount or a percentage, depending on the threshold type.
     */
    public readonly threshold!: pulumi.Output<number>;
    /**
     * Type of the threshold value. Valid values are 'dollar', 'percent'.
     */
    public readonly thresholdType!: pulumi.Output<string | undefined>;
    /**
     * Timeframe of the enforcement. Valid values are 'lifetime', 'month', 'year', 'funding_source'.
     */
    public readonly timeframe!: pulumi.Output<string>;
    /**
     * Flag that specifies if the enforcement is currently triggered.
     */
    public /*out*/ readonly triggered!: pulumi.Output<boolean>;
    /**
     * List of user group IDs that will receive notifications from the enforcement.
     */
    public readonly userGroupIds!: pulumi.Output<number[] | undefined>;
    /**
     * List of user IDs that will receive notifications from the enforcement.
     */
    public readonly userIds!: pulumi.Output<number[] | undefined>;

    /**
     * Create a ProjectEnforcement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectEnforcementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectEnforcementArgs | ProjectEnforcementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectEnforcementState | undefined;
            resourceInputs["amountType"] = state ? state.amountType : undefined;
            resourceInputs["cloudRuleId"] = state ? state.cloudRuleId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["notificationFrequency"] = state ? state.notificationFrequency : undefined;
            resourceInputs["overburn"] = state ? state.overburn : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["spendOption"] = state ? state.spendOption : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["thresholdType"] = state ? state.thresholdType : undefined;
            resourceInputs["timeframe"] = state ? state.timeframe : undefined;
            resourceInputs["triggered"] = state ? state.triggered : undefined;
            resourceInputs["userGroupIds"] = state ? state.userGroupIds : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as ProjectEnforcementArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.timeframe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeframe'");
            }
            resourceInputs["amountType"] = args ? args.amountType : undefined;
            resourceInputs["cloudRuleId"] = args ? args.cloudRuleId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["notificationFrequency"] = args ? args.notificationFrequency : undefined;
            resourceInputs["overburn"] = args ? args.overburn : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["spendOption"] = args ? args.spendOption : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["thresholdType"] = args ? args.thresholdType : undefined;
            resourceInputs["timeframe"] = args ? args.timeframe : undefined;
            resourceInputs["userGroupIds"] = args ? args.userGroupIds : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
            resourceInputs["triggered"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectEnforcement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectEnforcement resources.
 */
export interface ProjectEnforcementState {
    /**
     * Type of the amount. Valid values are 'custom', 'last_month'.
     */
    amountType?: pulumi.Input<string>;
    /**
     * Defines a Cloud Rule ID associated with the enforcement.
     */
    cloudRuleId?: pulumi.Input<number>;
    /**
     * Optional, user-provided description of the enforcement.
     */
    description?: pulumi.Input<string>;
    /**
     * Flag that specifies if the enforcement is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Frequency at which notifications are sent for this enforcement.
     */
    notificationFrequency?: pulumi.Input<string>;
    /**
     * Flag that specifies if enforcement will place project in an overburn state when triggered.
     */
    overburn?: pulumi.Input<boolean>;
    /**
     * ID of the project under enforcement.
     */
    projectId?: pulumi.Input<number>;
    /**
     * ID of the service related to the enforcement.
     */
    serviceId?: pulumi.Input<number>;
    /**
     * Type of spend option. Valid values are 'spend', 'remaining'.
     */
    spendOption?: pulumi.Input<string>;
    /**
     * Threshold value. Either a dollar amount or a percentage, depending on the threshold type.
     */
    threshold?: pulumi.Input<number>;
    /**
     * Type of the threshold value. Valid values are 'dollar', 'percent'.
     */
    thresholdType?: pulumi.Input<string>;
    /**
     * Timeframe of the enforcement. Valid values are 'lifetime', 'month', 'year', 'funding_source'.
     */
    timeframe?: pulumi.Input<string>;
    /**
     * Flag that specifies if the enforcement is currently triggered.
     */
    triggered?: pulumi.Input<boolean>;
    /**
     * List of user group IDs that will receive notifications from the enforcement.
     */
    userGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of user IDs that will receive notifications from the enforcement.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ProjectEnforcement resource.
 */
export interface ProjectEnforcementArgs {
    /**
     * Type of the amount. Valid values are 'custom', 'last_month'.
     */
    amountType?: pulumi.Input<string>;
    /**
     * Defines a Cloud Rule ID associated with the enforcement.
     */
    cloudRuleId?: pulumi.Input<number>;
    /**
     * Optional, user-provided description of the enforcement.
     */
    description?: pulumi.Input<string>;
    /**
     * Flag that specifies if the enforcement is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Frequency at which notifications are sent for this enforcement.
     */
    notificationFrequency?: pulumi.Input<string>;
    /**
     * Flag that specifies if enforcement will place project in an overburn state when triggered.
     */
    overburn?: pulumi.Input<boolean>;
    /**
     * ID of the project under enforcement.
     */
    projectId: pulumi.Input<number>;
    /**
     * ID of the service related to the enforcement.
     */
    serviceId?: pulumi.Input<number>;
    /**
     * Type of spend option. Valid values are 'spend', 'remaining'.
     */
    spendOption?: pulumi.Input<string>;
    /**
     * Threshold value. Either a dollar amount or a percentage, depending on the threshold type.
     */
    threshold: pulumi.Input<number>;
    /**
     * Type of the threshold value. Valid values are 'dollar', 'percent'.
     */
    thresholdType?: pulumi.Input<string>;
    /**
     * Timeframe of the enforcement. Valid values are 'lifetime', 'month', 'year', 'funding_source'.
     */
    timeframe: pulumi.Input<string>;
    /**
     * List of user group IDs that will receive notifications from the enforcement.
     */
    userGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of user IDs that will receive notifications from the enforcement.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}
