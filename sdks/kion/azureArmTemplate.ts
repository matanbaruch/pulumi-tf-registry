// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureArmTemplate extends pulumi.CustomResource {
    /**
     * Get an existing AzureArmTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureArmTemplateState, opts?: pulumi.CustomResourceOptions): AzureArmTemplate {
        return new AzureArmTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/azureArmTemplate:AzureArmTemplate';

    /**
     * Returns true if the given object is an instance of AzureArmTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureArmTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureArmTemplate.__pulumiType;
    }

    public /*out*/ readonly ctManaged!: pulumi.Output<boolean>;
    public readonly deploymentMode!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUserGroups!: pulumi.Output<outputs.AzureArmTemplateOwnerUserGroup[] | undefined>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUsers!: pulumi.Output<outputs.AzureArmTemplateOwnerUser[] | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly resourceGroupRegionId!: pulumi.Output<number>;
    public readonly template!: pulumi.Output<string>;
    public readonly templateParameters!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a AzureArmTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureArmTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureArmTemplateArgs | AzureArmTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureArmTemplateState | undefined;
            resourceInputs["ctManaged"] = state ? state.ctManaged : undefined;
            resourceInputs["deploymentMode"] = state ? state.deploymentMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerUserGroups"] = state ? state.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = state ? state.ownerUsers : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["resourceGroupRegionId"] = state ? state.resourceGroupRegionId : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateParameters"] = state ? state.templateParameters : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AzureArmTemplateArgs | undefined;
            if ((!args || args.deploymentMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentMode'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.resourceGroupRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupRegionId'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["deploymentMode"] = args ? args.deploymentMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerUserGroups"] = args ? args.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = args ? args.ownerUsers : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resourceGroupRegionId"] = args ? args.resourceGroupRegionId : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateParameters"] = args ? args.templateParameters : undefined;
            resourceInputs["ctManaged"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureArmTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureArmTemplate resources.
 */
export interface AzureArmTemplateState {
    ctManaged?: pulumi.Input<boolean>;
    deploymentMode?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.AzureArmTemplateOwnerUserGroup>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.AzureArmTemplateOwnerUser>[]>;
    resourceGroupName?: pulumi.Input<string>;
    resourceGroupRegionId?: pulumi.Input<number>;
    template?: pulumi.Input<string>;
    templateParameters?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AzureArmTemplate resource.
 */
export interface AzureArmTemplateArgs {
    deploymentMode: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.AzureArmTemplateOwnerUserGroup>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.AzureArmTemplateOwnerUser>[]>;
    resourceGroupName: pulumi.Input<string>;
    resourceGroupRegionId: pulumi.Input<number>;
    template: pulumi.Input<string>;
    templateParameters?: pulumi.Input<string>;
}
