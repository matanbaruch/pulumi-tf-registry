// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * The URL to which the webhook will send requests.
     */
    public readonly calloutUrl!: pulumi.Output<string>;
    /**
     * Description of the webhook.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the webhook.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set of user group IDs that own the webhook.
     */
    public readonly ownerUserGroupIds!: pulumi.Output<number[] | undefined>;
    /**
     * Set of user IDs that own the webhook.
     */
    public readonly ownerUserIds!: pulumi.Output<number[] | undefined>;
    /**
     * The request body to be sent with the webhook.
     */
    public readonly requestBody!: pulumi.Output<string | undefined>;
    /**
     * HTTP headers to use when the webhook is triggered
     */
    public readonly requestHeaders!: pulumi.Output<string | undefined>;
    /**
     * HTTP method to be used for the webhook (GET, POST, etc.).
     */
    public readonly requestMethod!: pulumi.Output<string>;
    /**
     * Whether the webhook should send secure information.
     */
    public readonly shouldSendSecureInfo!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to skip SSL verification.
     */
    public readonly skipSsl!: pulumi.Output<boolean | undefined>;
    /**
     * The number of seconds the application will wait before considering the webhook 'timed out'
     */
    public readonly timeoutInSeconds!: pulumi.Output<number>;
    /**
     * Whether to use request headers in the webhook request.
     */
    public readonly useRequestHeaders!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["calloutUrl"] = state ? state.calloutUrl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerUserGroupIds"] = state ? state.ownerUserGroupIds : undefined;
            resourceInputs["ownerUserIds"] = state ? state.ownerUserIds : undefined;
            resourceInputs["requestBody"] = state ? state.requestBody : undefined;
            resourceInputs["requestHeaders"] = state ? state.requestHeaders : undefined;
            resourceInputs["requestMethod"] = state ? state.requestMethod : undefined;
            resourceInputs["shouldSendSecureInfo"] = state ? state.shouldSendSecureInfo : undefined;
            resourceInputs["skipSsl"] = state ? state.skipSsl : undefined;
            resourceInputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            resourceInputs["useRequestHeaders"] = state ? state.useRequestHeaders : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.calloutUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'calloutUrl'");
            }
            if ((!args || args.requestMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestMethod'");
            }
            if ((!args || args.timeoutInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeoutInSeconds'");
            }
            resourceInputs["calloutUrl"] = args ? args.calloutUrl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerUserGroupIds"] = args ? args.ownerUserGroupIds : undefined;
            resourceInputs["ownerUserIds"] = args ? args.ownerUserIds : undefined;
            resourceInputs["requestBody"] = args ? args.requestBody : undefined;
            resourceInputs["requestHeaders"] = args ? args.requestHeaders : undefined;
            resourceInputs["requestMethod"] = args ? args.requestMethod : undefined;
            resourceInputs["shouldSendSecureInfo"] = args ? args.shouldSendSecureInfo : undefined;
            resourceInputs["skipSsl"] = args ? args.skipSsl : undefined;
            resourceInputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            resourceInputs["useRequestHeaders"] = args ? args.useRequestHeaders : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * The URL to which the webhook will send requests.
     */
    calloutUrl?: pulumi.Input<string>;
    /**
     * Description of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * Set of user group IDs that own the webhook.
     */
    ownerUserGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Set of user IDs that own the webhook.
     */
    ownerUserIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The request body to be sent with the webhook.
     */
    requestBody?: pulumi.Input<string>;
    /**
     * HTTP headers to use when the webhook is triggered
     */
    requestHeaders?: pulumi.Input<string>;
    /**
     * HTTP method to be used for the webhook (GET, POST, etc.).
     */
    requestMethod?: pulumi.Input<string>;
    /**
     * Whether the webhook should send secure information.
     */
    shouldSendSecureInfo?: pulumi.Input<boolean>;
    /**
     * Whether to skip SSL verification.
     */
    skipSsl?: pulumi.Input<boolean>;
    /**
     * The number of seconds the application will wait before considering the webhook 'timed out'
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * Whether to use request headers in the webhook request.
     */
    useRequestHeaders?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * The URL to which the webhook will send requests.
     */
    calloutUrl: pulumi.Input<string>;
    /**
     * Description of the webhook.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * Set of user group IDs that own the webhook.
     */
    ownerUserGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Set of user IDs that own the webhook.
     */
    ownerUserIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The request body to be sent with the webhook.
     */
    requestBody?: pulumi.Input<string>;
    /**
     * HTTP headers to use when the webhook is triggered
     */
    requestHeaders?: pulumi.Input<string>;
    /**
     * HTTP method to be used for the webhook (GET, POST, etc.).
     */
    requestMethod: pulumi.Input<string>;
    /**
     * Whether the webhook should send secure information.
     */
    shouldSendSecureInfo?: pulumi.Input<boolean>;
    /**
     * Whether to skip SSL verification.
     */
    skipSsl?: pulumi.Input<boolean>;
    /**
     * The number of seconds the application will wait before considering the webhook 'timed out'
     */
    timeoutInSeconds: pulumi.Input<number>;
    /**
     * Whether to use request headers in the webhook request.
     */
    useRequestHeaders?: pulumi.Input<boolean>;
}
