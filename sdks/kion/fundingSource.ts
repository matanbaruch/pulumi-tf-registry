// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FundingSource extends pulumi.CustomResource {
    /**
     * Get an existing FundingSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FundingSourceState, opts?: pulumi.CustomResourceOptions): FundingSource {
        return new FundingSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/fundingSource:FundingSource';

    /**
     * Returns true if the given object is an instance of FundingSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FundingSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FundingSource.__pulumiType;
    }

    public readonly amount!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endDatecode!: pulumi.Output<string>;
    /**
     * A map of labels to assign to the funding source. The labels must already exist in Kion.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ouId!: pulumi.Output<number>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUserGroups!: pulumi.Output<outputs.FundingSourceOwnerUserGroup[] | undefined>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUsers!: pulumi.Output<outputs.FundingSourceOwnerUser[] | undefined>;
    public readonly permissionSchemeId!: pulumi.Output<number>;
    public readonly startDatecode!: pulumi.Output<string>;

    /**
     * Create a FundingSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FundingSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FundingSourceArgs | FundingSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FundingSourceState | undefined;
            resourceInputs["amount"] = state ? state.amount : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endDatecode"] = state ? state.endDatecode : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ouId"] = state ? state.ouId : undefined;
            resourceInputs["ownerUserGroups"] = state ? state.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = state ? state.ownerUsers : undefined;
            resourceInputs["permissionSchemeId"] = state ? state.permissionSchemeId : undefined;
            resourceInputs["startDatecode"] = state ? state.startDatecode : undefined;
        } else {
            const args = argsOrState as FundingSourceArgs | undefined;
            if ((!args || args.amount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'amount'");
            }
            if ((!args || args.endDatecode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endDatecode'");
            }
            if ((!args || args.ouId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ouId'");
            }
            if ((!args || args.permissionSchemeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionSchemeId'");
            }
            if ((!args || args.startDatecode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startDatecode'");
            }
            resourceInputs["amount"] = args ? args.amount : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endDatecode"] = args ? args.endDatecode : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ouId"] = args ? args.ouId : undefined;
            resourceInputs["ownerUserGroups"] = args ? args.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = args ? args.ownerUsers : undefined;
            resourceInputs["permissionSchemeId"] = args ? args.permissionSchemeId : undefined;
            resourceInputs["startDatecode"] = args ? args.startDatecode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FundingSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FundingSource resources.
 */
export interface FundingSourceState {
    amount?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    endDatecode?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the funding source. The labels must already exist in Kion.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouId?: pulumi.Input<number>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.FundingSourceOwnerUserGroup>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.FundingSourceOwnerUser>[]>;
    permissionSchemeId?: pulumi.Input<number>;
    startDatecode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FundingSource resource.
 */
export interface FundingSourceArgs {
    amount: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    endDatecode: pulumi.Input<string>;
    /**
     * A map of labels to assign to the funding source. The labels must already exist in Kion.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouId: pulumi.Input<number>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.FundingSourceOwnerUserGroup>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.FundingSourceOwnerUser>[]>;
    permissionSchemeId: pulumi.Input<number>;
    startDatecode: pulumi.Input<string>;
}
