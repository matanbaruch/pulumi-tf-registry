// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kion:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    public /*out*/ readonly archived!: pulumi.Output<boolean>;
    public readonly autoPay!: pulumi.Output<boolean | undefined>;
    public readonly budgets!: pulumi.Output<outputs.ProjectBudget[] | undefined>;
    public readonly defaultAwsRegion!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A map of labels to assign to the project. The labels must already exist in Kion.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ouId!: pulumi.Output<number>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUserGroupIds!: pulumi.Output<outputs.ProjectOwnerUserGroupId[] | undefined>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    public readonly ownerUserIds!: pulumi.Output<outputs.ProjectOwnerUserId[] | undefined>;
    public readonly permissionSchemeId!: pulumi.Output<number>;
    public readonly projectFundings!: pulumi.Output<outputs.ProjectProjectFunding[] | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["budgets"] = state ? state.budgets : undefined;
            resourceInputs["defaultAwsRegion"] = state ? state.defaultAwsRegion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ouId"] = state ? state.ouId : undefined;
            resourceInputs["ownerUserGroupIds"] = state ? state.ownerUserGroupIds : undefined;
            resourceInputs["ownerUserIds"] = state ? state.ownerUserIds : undefined;
            resourceInputs["permissionSchemeId"] = state ? state.permissionSchemeId : undefined;
            resourceInputs["projectFundings"] = state ? state.projectFundings : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.ouId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ouId'");
            }
            if ((!args || args.permissionSchemeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionSchemeId'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["budgets"] = args ? args.budgets : undefined;
            resourceInputs["defaultAwsRegion"] = args ? args.defaultAwsRegion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ouId"] = args ? args.ouId : undefined;
            resourceInputs["ownerUserGroupIds"] = args ? args.ownerUserGroupIds : undefined;
            resourceInputs["ownerUserIds"] = args ? args.ownerUserIds : undefined;
            resourceInputs["permissionSchemeId"] = args ? args.permissionSchemeId : undefined;
            resourceInputs["projectFundings"] = args ? args.projectFundings : undefined;
            resourceInputs["archived"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    archived?: pulumi.Input<boolean>;
    autoPay?: pulumi.Input<boolean>;
    budgets?: pulumi.Input<pulumi.Input<inputs.ProjectBudget>[]>;
    defaultAwsRegion?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the project. The labels must already exist in Kion.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouId?: pulumi.Input<number>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroupIds?: pulumi.Input<pulumi.Input<inputs.ProjectOwnerUserGroupId>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserIds?: pulumi.Input<pulumi.Input<inputs.ProjectOwnerUserId>[]>;
    permissionSchemeId?: pulumi.Input<number>;
    projectFundings?: pulumi.Input<pulumi.Input<inputs.ProjectProjectFunding>[]>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    autoPay?: pulumi.Input<boolean>;
    budgets?: pulumi.Input<pulumi.Input<inputs.ProjectBudget>[]>;
    defaultAwsRegion?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the project. The labels must already exist in Kion.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouId: pulumi.Input<number>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserGroupIds?: pulumi.Input<pulumi.Input<inputs.ProjectOwnerUserGroupId>[]>;
    /**
     * Must provide at least the owner_user_groups field or the owner_users field.
     */
    ownerUserIds?: pulumi.Input<pulumi.Input<inputs.ProjectOwnerUserId>[]>;
    permissionSchemeId: pulumi.Input<number>;
    projectFundings?: pulumi.Input<pulumi.Input<inputs.ProjectProjectFunding>[]>;
}
