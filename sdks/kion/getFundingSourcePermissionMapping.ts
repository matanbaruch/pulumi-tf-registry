// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFundingSourcePermissionMapping(args: GetFundingSourcePermissionMappingArgs, opts?: pulumi.InvokeOptions): Promise<GetFundingSourcePermissionMappingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("kion:index/getFundingSourcePermissionMapping:getFundingSourcePermissionMapping", {
        "fundingSourceId": args.fundingSourceId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFundingSourcePermissionMapping.
 */
export interface GetFundingSourcePermissionMappingArgs {
    fundingSourceId: number;
    id?: string;
}

/**
 * A collection of values returned by getFundingSourcePermissionMapping.
 */
export interface GetFundingSourcePermissionMappingResult {
    readonly fundingSourceId: number;
    readonly id: string;
    readonly lists: outputs.GetFundingSourcePermissionMappingList[];
}
export function getFundingSourcePermissionMappingOutput(args: GetFundingSourcePermissionMappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFundingSourcePermissionMappingResult> {
    return pulumi.output(args).apply((a: any) => getFundingSourcePermissionMapping(a, opts))
}

/**
 * A collection of arguments for invoking getFundingSourcePermissionMapping.
 */
export interface GetFundingSourcePermissionMappingOutputArgs {
    fundingSourceId: pulumi.Input<number>;
    id?: pulumi.Input<string>;
}
