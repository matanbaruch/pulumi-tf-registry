// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsAccountArgs, AwsAccountState } from "./awsAccount";
export type AwsAccount = import("./awsAccount").AwsAccount;
export const AwsAccount: typeof import("./awsAccount").AwsAccount = null as any;
utilities.lazyLoad(exports, ["AwsAccount"], () => require("./awsAccount"));

export { AwsCloudformationTemplateArgs, AwsCloudformationTemplateState } from "./awsCloudformationTemplate";
export type AwsCloudformationTemplate = import("./awsCloudformationTemplate").AwsCloudformationTemplate;
export const AwsCloudformationTemplate: typeof import("./awsCloudformationTemplate").AwsCloudformationTemplate = null as any;
utilities.lazyLoad(exports, ["AwsCloudformationTemplate"], () => require("./awsCloudformationTemplate"));

export { AwsIamPolicyArgs, AwsIamPolicyState } from "./awsIamPolicy";
export type AwsIamPolicy = import("./awsIamPolicy").AwsIamPolicy;
export const AwsIamPolicy: typeof import("./awsIamPolicy").AwsIamPolicy = null as any;
utilities.lazyLoad(exports, ["AwsIamPolicy"], () => require("./awsIamPolicy"));

export { AzureAccountArgs, AzureAccountState } from "./azureAccount";
export type AzureAccount = import("./azureAccount").AzureAccount;
export const AzureAccount: typeof import("./azureAccount").AzureAccount = null as any;
utilities.lazyLoad(exports, ["AzureAccount"], () => require("./azureAccount"));

export { AzureArmTemplateArgs, AzureArmTemplateState } from "./azureArmTemplate";
export type AzureArmTemplate = import("./azureArmTemplate").AzureArmTemplate;
export const AzureArmTemplate: typeof import("./azureArmTemplate").AzureArmTemplate = null as any;
utilities.lazyLoad(exports, ["AzureArmTemplate"], () => require("./azureArmTemplate"));

export { AzurePolicyArgs, AzurePolicyState } from "./azurePolicy";
export type AzurePolicy = import("./azurePolicy").AzurePolicy;
export const AzurePolicy: typeof import("./azurePolicy").AzurePolicy = null as any;
utilities.lazyLoad(exports, ["AzurePolicy"], () => require("./azurePolicy"));

export { AzureRoleArgs, AzureRoleState } from "./azureRole";
export type AzureRole = import("./azureRole").AzureRole;
export const AzureRole: typeof import("./azureRole").AzureRole = null as any;
utilities.lazyLoad(exports, ["AzureRole"], () => require("./azureRole"));

export { CloudRuleArgs, CloudRuleState } from "./cloudRule";
export type CloudRule = import("./cloudRule").CloudRule;
export const CloudRule: typeof import("./cloudRule").CloudRule = null as any;
utilities.lazyLoad(exports, ["CloudRule"], () => require("./cloudRule"));

export { ComplianceCheckArgs, ComplianceCheckState } from "./complianceCheck";
export type ComplianceCheck = import("./complianceCheck").ComplianceCheck;
export const ComplianceCheck: typeof import("./complianceCheck").ComplianceCheck = null as any;
utilities.lazyLoad(exports, ["ComplianceCheck"], () => require("./complianceCheck"));

export { ComplianceStandardArgs, ComplianceStandardState } from "./complianceStandard";
export type ComplianceStandard = import("./complianceStandard").ComplianceStandard;
export const ComplianceStandard: typeof import("./complianceStandard").ComplianceStandard = null as any;
utilities.lazyLoad(exports, ["ComplianceStandard"], () => require("./complianceStandard"));

export { FundingSourceArgs, FundingSourceState } from "./fundingSource";
export type FundingSource = import("./fundingSource").FundingSource;
export const FundingSource: typeof import("./fundingSource").FundingSource = null as any;
utilities.lazyLoad(exports, ["FundingSource"], () => require("./fundingSource"));

export { FundingSourcePermissionMappingArgs, FundingSourcePermissionMappingState } from "./fundingSourcePermissionMapping";
export type FundingSourcePermissionMapping = import("./fundingSourcePermissionMapping").FundingSourcePermissionMapping;
export const FundingSourcePermissionMapping: typeof import("./fundingSourcePermissionMapping").FundingSourcePermissionMapping = null as any;
utilities.lazyLoad(exports, ["FundingSourcePermissionMapping"], () => require("./fundingSourcePermissionMapping"));

export { GcpAccountArgs, GcpAccountState } from "./gcpAccount";
export type GcpAccount = import("./gcpAccount").GcpAccount;
export const GcpAccount: typeof import("./gcpAccount").GcpAccount = null as any;
utilities.lazyLoad(exports, ["GcpAccount"], () => require("./gcpAccount"));

export { GcpIamRoleArgs, GcpIamRoleState } from "./gcpIamRole";
export type GcpIamRole = import("./gcpIamRole").GcpIamRole;
export const GcpIamRole: typeof import("./gcpIamRole").GcpIamRole = null as any;
utilities.lazyLoad(exports, ["GcpIamRole"], () => require("./gcpIamRole"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAwsCloudformationTemplateArgs, GetAwsCloudformationTemplateResult, GetAwsCloudformationTemplateOutputArgs } from "./getAwsCloudformationTemplate";
export const getAwsCloudformationTemplate: typeof import("./getAwsCloudformationTemplate").getAwsCloudformationTemplate = null as any;
export const getAwsCloudformationTemplateOutput: typeof import("./getAwsCloudformationTemplate").getAwsCloudformationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCloudformationTemplate","getAwsCloudformationTemplateOutput"], () => require("./getAwsCloudformationTemplate"));

export { GetAwsIamPolicyArgs, GetAwsIamPolicyResult, GetAwsIamPolicyOutputArgs } from "./getAwsIamPolicy";
export const getAwsIamPolicy: typeof import("./getAwsIamPolicy").getAwsIamPolicy = null as any;
export const getAwsIamPolicyOutput: typeof import("./getAwsIamPolicy").getAwsIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAwsIamPolicy","getAwsIamPolicyOutput"], () => require("./getAwsIamPolicy"));

export { GetAzureArmTemplateArgs, GetAzureArmTemplateResult, GetAzureArmTemplateOutputArgs } from "./getAzureArmTemplate";
export const getAzureArmTemplate: typeof import("./getAzureArmTemplate").getAzureArmTemplate = null as any;
export const getAzureArmTemplateOutput: typeof import("./getAzureArmTemplate").getAzureArmTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getAzureArmTemplate","getAzureArmTemplateOutput"], () => require("./getAzureArmTemplate"));

export { GetAzurePolicyArgs, GetAzurePolicyResult, GetAzurePolicyOutputArgs } from "./getAzurePolicy";
export const getAzurePolicy: typeof import("./getAzurePolicy").getAzurePolicy = null as any;
export const getAzurePolicyOutput: typeof import("./getAzurePolicy").getAzurePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAzurePolicy","getAzurePolicyOutput"], () => require("./getAzurePolicy"));

export { GetAzureRoleArgs, GetAzureRoleResult, GetAzureRoleOutputArgs } from "./getAzureRole";
export const getAzureRole: typeof import("./getAzureRole").getAzureRole = null as any;
export const getAzureRoleOutput: typeof import("./getAzureRole").getAzureRoleOutput = null as any;
utilities.lazyLoad(exports, ["getAzureRole","getAzureRoleOutput"], () => require("./getAzureRole"));

export { GetCachedAccountArgs, GetCachedAccountResult, GetCachedAccountOutputArgs } from "./getCachedAccount";
export const getCachedAccount: typeof import("./getCachedAccount").getCachedAccount = null as any;
export const getCachedAccountOutput: typeof import("./getCachedAccount").getCachedAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCachedAccount","getCachedAccountOutput"], () => require("./getCachedAccount"));

export { GetCloudRuleArgs, GetCloudRuleResult, GetCloudRuleOutputArgs } from "./getCloudRule";
export const getCloudRule: typeof import("./getCloudRule").getCloudRule = null as any;
export const getCloudRuleOutput: typeof import("./getCloudRule").getCloudRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRule","getCloudRuleOutput"], () => require("./getCloudRule"));

export { GetComplianceCheckArgs, GetComplianceCheckResult, GetComplianceCheckOutputArgs } from "./getComplianceCheck";
export const getComplianceCheck: typeof import("./getComplianceCheck").getComplianceCheck = null as any;
export const getComplianceCheckOutput: typeof import("./getComplianceCheck").getComplianceCheckOutput = null as any;
utilities.lazyLoad(exports, ["getComplianceCheck","getComplianceCheckOutput"], () => require("./getComplianceCheck"));

export { GetComplianceStandardArgs, GetComplianceStandardResult, GetComplianceStandardOutputArgs } from "./getComplianceStandard";
export const getComplianceStandard: typeof import("./getComplianceStandard").getComplianceStandard = null as any;
export const getComplianceStandardOutput: typeof import("./getComplianceStandard").getComplianceStandardOutput = null as any;
utilities.lazyLoad(exports, ["getComplianceStandard","getComplianceStandardOutput"], () => require("./getComplianceStandard"));

export { GetFundingSourceArgs, GetFundingSourceResult, GetFundingSourceOutputArgs } from "./getFundingSource";
export const getFundingSource: typeof import("./getFundingSource").getFundingSource = null as any;
export const getFundingSourceOutput: typeof import("./getFundingSource").getFundingSourceOutput = null as any;
utilities.lazyLoad(exports, ["getFundingSource","getFundingSourceOutput"], () => require("./getFundingSource"));

export { GetFundingSourcePermissionMappingArgs, GetFundingSourcePermissionMappingResult, GetFundingSourcePermissionMappingOutputArgs } from "./getFundingSourcePermissionMapping";
export const getFundingSourcePermissionMapping: typeof import("./getFundingSourcePermissionMapping").getFundingSourcePermissionMapping = null as any;
export const getFundingSourcePermissionMappingOutput: typeof import("./getFundingSourcePermissionMapping").getFundingSourcePermissionMappingOutput = null as any;
utilities.lazyLoad(exports, ["getFundingSourcePermissionMapping","getFundingSourcePermissionMappingOutput"], () => require("./getFundingSourcePermissionMapping"));

export { GetGcpIamRoleArgs, GetGcpIamRoleResult, GetGcpIamRoleOutputArgs } from "./getGcpIamRole";
export const getGcpIamRole: typeof import("./getGcpIamRole").getGcpIamRole = null as any;
export const getGcpIamRoleOutput: typeof import("./getGcpIamRole").getGcpIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getGcpIamRole","getGcpIamRoleOutput"], () => require("./getGcpIamRole"));

export { GetGlobalPermissionMappingArgs, GetGlobalPermissionMappingResult, GetGlobalPermissionMappingOutputArgs } from "./getGlobalPermissionMapping";
export const getGlobalPermissionMapping: typeof import("./getGlobalPermissionMapping").getGlobalPermissionMapping = null as any;
export const getGlobalPermissionMappingOutput: typeof import("./getGlobalPermissionMapping").getGlobalPermissionMappingOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalPermissionMapping","getGlobalPermissionMappingOutput"], () => require("./getGlobalPermissionMapping"));

export { GetLabelArgs, GetLabelResult, GetLabelOutputArgs } from "./getLabel";
export const getLabel: typeof import("./getLabel").getLabel = null as any;
export const getLabelOutput: typeof import("./getLabel").getLabelOutput = null as any;
utilities.lazyLoad(exports, ["getLabel","getLabelOutput"], () => require("./getLabel"));

export { GetOuArgs, GetOuResult, GetOuOutputArgs } from "./getOu";
export const getOu: typeof import("./getOu").getOu = null as any;
export const getOuOutput: typeof import("./getOu").getOuOutput = null as any;
utilities.lazyLoad(exports, ["getOu","getOuOutput"], () => require("./getOu"));

export { GetOuPermissionMappingArgs, GetOuPermissionMappingResult, GetOuPermissionMappingOutputArgs } from "./getOuPermissionMapping";
export const getOuPermissionMapping: typeof import("./getOuPermissionMapping").getOuPermissionMapping = null as any;
export const getOuPermissionMappingOutput: typeof import("./getOuPermissionMapping").getOuPermissionMappingOutput = null as any;
utilities.lazyLoad(exports, ["getOuPermissionMapping","getOuPermissionMappingOutput"], () => require("./getOuPermissionMapping"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectEnforcementArgs, GetProjectEnforcementResult, GetProjectEnforcementOutputArgs } from "./getProjectEnforcement";
export const getProjectEnforcement: typeof import("./getProjectEnforcement").getProjectEnforcement = null as any;
export const getProjectEnforcementOutput: typeof import("./getProjectEnforcement").getProjectEnforcementOutput = null as any;
utilities.lazyLoad(exports, ["getProjectEnforcement","getProjectEnforcementOutput"], () => require("./getProjectEnforcement"));

export { GetProjectPermissionMappingArgs, GetProjectPermissionMappingResult, GetProjectPermissionMappingOutputArgs } from "./getProjectPermissionMapping";
export const getProjectPermissionMapping: typeof import("./getProjectPermissionMapping").getProjectPermissionMapping = null as any;
export const getProjectPermissionMappingOutput: typeof import("./getProjectPermissionMapping").getProjectPermissionMappingOutput = null as any;
utilities.lazyLoad(exports, ["getProjectPermissionMapping","getProjectPermissionMappingOutput"], () => require("./getProjectPermissionMapping"));

export { GetSamlGroupAssociationArgs, GetSamlGroupAssociationResult, GetSamlGroupAssociationOutputArgs } from "./getSamlGroupAssociation";
export const getSamlGroupAssociation: typeof import("./getSamlGroupAssociation").getSamlGroupAssociation = null as any;
export const getSamlGroupAssociationOutput: typeof import("./getSamlGroupAssociation").getSamlGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSamlGroupAssociation","getSamlGroupAssociationOutput"], () => require("./getSamlGroupAssociation"));

export { GetServiceControlPolicyArgs, GetServiceControlPolicyResult, GetServiceControlPolicyOutputArgs } from "./getServiceControlPolicy";
export const getServiceControlPolicy: typeof import("./getServiceControlPolicy").getServiceControlPolicy = null as any;
export const getServiceControlPolicyOutput: typeof import("./getServiceControlPolicy").getServiceControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceControlPolicy","getServiceControlPolicyOutput"], () => require("./getServiceControlPolicy"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GlobalPermissionMappingArgs, GlobalPermissionMappingState } from "./globalPermissionMapping";
export type GlobalPermissionMapping = import("./globalPermissionMapping").GlobalPermissionMapping;
export const GlobalPermissionMapping: typeof import("./globalPermissionMapping").GlobalPermissionMapping = null as any;
utilities.lazyLoad(exports, ["GlobalPermissionMapping"], () => require("./globalPermissionMapping"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { OuArgs, OuState } from "./ou";
export type Ou = import("./ou").Ou;
export const Ou: typeof import("./ou").Ou = null as any;
utilities.lazyLoad(exports, ["Ou"], () => require("./ou"));

export { OuCloudAccessRoleArgs, OuCloudAccessRoleState } from "./ouCloudAccessRole";
export type OuCloudAccessRole = import("./ouCloudAccessRole").OuCloudAccessRole;
export const OuCloudAccessRole: typeof import("./ouCloudAccessRole").OuCloudAccessRole = null as any;
utilities.lazyLoad(exports, ["OuCloudAccessRole"], () => require("./ouCloudAccessRole"));

export { OuPermissionMappingArgs, OuPermissionMappingState } from "./ouPermissionMapping";
export type OuPermissionMapping = import("./ouPermissionMapping").OuPermissionMapping;
export const OuPermissionMapping: typeof import("./ouPermissionMapping").OuPermissionMapping = null as any;
utilities.lazyLoad(exports, ["OuPermissionMapping"], () => require("./ouPermissionMapping"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectCloudAccessRoleArgs, ProjectCloudAccessRoleState } from "./projectCloudAccessRole";
export type ProjectCloudAccessRole = import("./projectCloudAccessRole").ProjectCloudAccessRole;
export const ProjectCloudAccessRole: typeof import("./projectCloudAccessRole").ProjectCloudAccessRole = null as any;
utilities.lazyLoad(exports, ["ProjectCloudAccessRole"], () => require("./projectCloudAccessRole"));

export { ProjectEnforcementArgs, ProjectEnforcementState } from "./projectEnforcement";
export type ProjectEnforcement = import("./projectEnforcement").ProjectEnforcement;
export const ProjectEnforcement: typeof import("./projectEnforcement").ProjectEnforcement = null as any;
utilities.lazyLoad(exports, ["ProjectEnforcement"], () => require("./projectEnforcement"));

export { ProjectPermissionMappingArgs, ProjectPermissionMappingState } from "./projectPermissionMapping";
export type ProjectPermissionMapping = import("./projectPermissionMapping").ProjectPermissionMapping;
export const ProjectPermissionMapping: typeof import("./projectPermissionMapping").ProjectPermissionMapping = null as any;
utilities.lazyLoad(exports, ["ProjectPermissionMapping"], () => require("./projectPermissionMapping"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SamlGroupAssociationArgs, SamlGroupAssociationState } from "./samlGroupAssociation";
export type SamlGroupAssociation = import("./samlGroupAssociation").SamlGroupAssociation;
export const SamlGroupAssociation: typeof import("./samlGroupAssociation").SamlGroupAssociation = null as any;
utilities.lazyLoad(exports, ["SamlGroupAssociation"], () => require("./samlGroupAssociation"));

export { ServiceControlPolicyArgs, ServiceControlPolicyState } from "./serviceControlPolicy";
export type ServiceControlPolicy = import("./serviceControlPolicy").ServiceControlPolicy;
export const ServiceControlPolicy: typeof import("./serviceControlPolicy").ServiceControlPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceControlPolicy"], () => require("./serviceControlPolicy"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kion:index/awsAccount:AwsAccount":
                return new AwsAccount(name, <any>undefined, { urn })
            case "kion:index/awsCloudformationTemplate:AwsCloudformationTemplate":
                return new AwsCloudformationTemplate(name, <any>undefined, { urn })
            case "kion:index/awsIamPolicy:AwsIamPolicy":
                return new AwsIamPolicy(name, <any>undefined, { urn })
            case "kion:index/azureAccount:AzureAccount":
                return new AzureAccount(name, <any>undefined, { urn })
            case "kion:index/azureArmTemplate:AzureArmTemplate":
                return new AzureArmTemplate(name, <any>undefined, { urn })
            case "kion:index/azurePolicy:AzurePolicy":
                return new AzurePolicy(name, <any>undefined, { urn })
            case "kion:index/azureRole:AzureRole":
                return new AzureRole(name, <any>undefined, { urn })
            case "kion:index/cloudRule:CloudRule":
                return new CloudRule(name, <any>undefined, { urn })
            case "kion:index/complianceCheck:ComplianceCheck":
                return new ComplianceCheck(name, <any>undefined, { urn })
            case "kion:index/complianceStandard:ComplianceStandard":
                return new ComplianceStandard(name, <any>undefined, { urn })
            case "kion:index/fundingSource:FundingSource":
                return new FundingSource(name, <any>undefined, { urn })
            case "kion:index/fundingSourcePermissionMapping:FundingSourcePermissionMapping":
                return new FundingSourcePermissionMapping(name, <any>undefined, { urn })
            case "kion:index/gcpAccount:GcpAccount":
                return new GcpAccount(name, <any>undefined, { urn })
            case "kion:index/gcpIamRole:GcpIamRole":
                return new GcpIamRole(name, <any>undefined, { urn })
            case "kion:index/globalPermissionMapping:GlobalPermissionMapping":
                return new GlobalPermissionMapping(name, <any>undefined, { urn })
            case "kion:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "kion:index/ou:Ou":
                return new Ou(name, <any>undefined, { urn })
            case "kion:index/ouCloudAccessRole:OuCloudAccessRole":
                return new OuCloudAccessRole(name, <any>undefined, { urn })
            case "kion:index/ouPermissionMapping:OuPermissionMapping":
                return new OuPermissionMapping(name, <any>undefined, { urn })
            case "kion:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "kion:index/projectCloudAccessRole:ProjectCloudAccessRole":
                return new ProjectCloudAccessRole(name, <any>undefined, { urn })
            case "kion:index/projectEnforcement:ProjectEnforcement":
                return new ProjectEnforcement(name, <any>undefined, { urn })
            case "kion:index/projectPermissionMapping:ProjectPermissionMapping":
                return new ProjectPermissionMapping(name, <any>undefined, { urn })
            case "kion:index/samlGroupAssociation:SamlGroupAssociation":
                return new SamlGroupAssociation(name, <any>undefined, { urn })
            case "kion:index/serviceControlPolicy:ServiceControlPolicy":
                return new ServiceControlPolicy(name, <any>undefined, { urn })
            case "kion:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "kion:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "kion:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kion", "index/awsAccount", _module)
pulumi.runtime.registerResourceModule("kion", "index/awsCloudformationTemplate", _module)
pulumi.runtime.registerResourceModule("kion", "index/awsIamPolicy", _module)
pulumi.runtime.registerResourceModule("kion", "index/azureAccount", _module)
pulumi.runtime.registerResourceModule("kion", "index/azureArmTemplate", _module)
pulumi.runtime.registerResourceModule("kion", "index/azurePolicy", _module)
pulumi.runtime.registerResourceModule("kion", "index/azureRole", _module)
pulumi.runtime.registerResourceModule("kion", "index/cloudRule", _module)
pulumi.runtime.registerResourceModule("kion", "index/complianceCheck", _module)
pulumi.runtime.registerResourceModule("kion", "index/complianceStandard", _module)
pulumi.runtime.registerResourceModule("kion", "index/fundingSource", _module)
pulumi.runtime.registerResourceModule("kion", "index/fundingSourcePermissionMapping", _module)
pulumi.runtime.registerResourceModule("kion", "index/gcpAccount", _module)
pulumi.runtime.registerResourceModule("kion", "index/gcpIamRole", _module)
pulumi.runtime.registerResourceModule("kion", "index/globalPermissionMapping", _module)
pulumi.runtime.registerResourceModule("kion", "index/label", _module)
pulumi.runtime.registerResourceModule("kion", "index/ou", _module)
pulumi.runtime.registerResourceModule("kion", "index/ouCloudAccessRole", _module)
pulumi.runtime.registerResourceModule("kion", "index/ouPermissionMapping", _module)
pulumi.runtime.registerResourceModule("kion", "index/project", _module)
pulumi.runtime.registerResourceModule("kion", "index/projectCloudAccessRole", _module)
pulumi.runtime.registerResourceModule("kion", "index/projectEnforcement", _module)
pulumi.runtime.registerResourceModule("kion", "index/projectPermissionMapping", _module)
pulumi.runtime.registerResourceModule("kion", "index/samlGroupAssociation", _module)
pulumi.runtime.registerResourceModule("kion", "index/serviceControlPolicy", _module)
pulumi.runtime.registerResourceModule("kion", "index/user", _module)
pulumi.runtime.registerResourceModule("kion", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("kion", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("kion", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kion") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
