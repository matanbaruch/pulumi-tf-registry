// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DemoArgs, DemoState } from "./demo";
export type Demo = import("./demo").Demo;
export const Demo: typeof import("./demo").Demo = null as any;
utilities.lazyLoad(exports, ["Demo"], () => require("./demo"));

export { GrantKitArgs, GrantKitState } from "./grantKit";
export type GrantKit = import("./grantKit").GrantKit;
export const GrantKit: typeof import("./grantKit").GrantKit = null as any;
utilities.lazyLoad(exports, ["GrantKit"], () => require("./grantKit"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "abbey:index/demo:Demo":
                return new Demo(name, <any>undefined, { urn })
            case "abbey:index/grantKit:GrantKit":
                return new GrantKit(name, <any>undefined, { urn })
            case "abbey:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("abbey", "index/demo", _module)
pulumi.runtime.registerResourceModule("abbey", "index/grantKit", _module)
pulumi.runtime.registerResourceModule("abbey", "index/identity", _module)
pulumi.runtime.registerResourcePackage("abbey", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:abbey") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
