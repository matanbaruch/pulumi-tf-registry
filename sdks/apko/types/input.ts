// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BuildConfig {
    accounts: pulumi.Input<inputs.BuildConfigAccounts>;
    annotations: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    archs: pulumi.Input<pulumi.Input<string>[]>;
    cmd: pulumi.Input<string>;
    contents: pulumi.Input<inputs.BuildConfigContents>;
    entrypoint: pulumi.Input<inputs.BuildConfigEntrypoint>;
    environment: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    include: pulumi.Input<string>;
    paths: pulumi.Input<pulumi.Input<inputs.BuildConfigPath>[]>;
    stop-signal: pulumi.Input<string>;
    vcs-url: pulumi.Input<string>;
    volumes: pulumi.Input<pulumi.Input<string>[]>;
    work-dir: pulumi.Input<string>;
}

export interface BuildConfigAccounts {
    groups: pulumi.Input<pulumi.Input<inputs.BuildConfigAccountsGroup>[]>;
    run-as: pulumi.Input<string>;
    users: pulumi.Input<pulumi.Input<inputs.BuildConfigAccountsUser>[]>;
}

export interface BuildConfigAccountsGroup {
    gid: pulumi.Input<number>;
    groupname: pulumi.Input<string>;
    members: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BuildConfigAccountsUser {
    gid: pulumi.Input<number>;
    homedir: pulumi.Input<string>;
    shell: pulumi.Input<string>;
    uid: pulumi.Input<number>;
    username: pulumi.Input<string>;
}

export interface BuildConfigContents {
    buildRepositories: pulumi.Input<pulumi.Input<string>[]>;
    keyrings: pulumi.Input<pulumi.Input<string>[]>;
    packages: pulumi.Input<pulumi.Input<string>[]>;
    repositories: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BuildConfigEntrypoint {
    command: pulumi.Input<string>;
    services: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    shell-fragment: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BuildConfigPath {
    gid: pulumi.Input<number>;
    path: pulumi.Input<string>;
    permissions: pulumi.Input<number>;
    recursive: pulumi.Input<boolean>;
    source: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uid: pulumi.Input<number>;
}

export interface BuildSboms {
    /**
     * The digest of the index or image.
     */
    digest?: pulumi.Input<string>;
    /**
     * The path to the SBOM contents.
     */
    predicatePath?: pulumi.Input<string>;
    /**
     * The hex-encoded SHA256 hash of the SBOM contents.
     */
    predicateSha256?: pulumi.Input<string>;
    /**
     * The predicate type of the SBOM.
     */
    predicateType?: pulumi.Input<string>;
}

export interface GetTagsConfig {
    accounts: inputs.GetTagsConfigAccounts;
    annotations: {[key: string]: string};
    archs: string[];
    cmd: string;
    contents: inputs.GetTagsConfigContents;
    entrypoint: inputs.GetTagsConfigEntrypoint;
    environment: {[key: string]: string};
    include: string;
    paths: inputs.GetTagsConfigPath[];
    stop-signal: string;
    vcs-url: string;
    volumes: string[];
    work-dir: string;
}

export interface GetTagsConfigArgs {
    accounts: pulumi.Input<inputs.GetTagsConfigAccountsArgs>;
    annotations: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    archs: pulumi.Input<pulumi.Input<string>[]>;
    cmd: pulumi.Input<string>;
    contents: pulumi.Input<inputs.GetTagsConfigContentsArgs>;
    entrypoint: pulumi.Input<inputs.GetTagsConfigEntrypointArgs>;
    environment: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    include: pulumi.Input<string>;
    paths: pulumi.Input<pulumi.Input<inputs.GetTagsConfigPathArgs>[]>;
    stop-signal: pulumi.Input<string>;
    vcs-url: pulumi.Input<string>;
    volumes: pulumi.Input<pulumi.Input<string>[]>;
    work-dir: pulumi.Input<string>;
}

export interface GetTagsConfigAccounts {
    groups: inputs.GetTagsConfigAccountsGroup[];
    run-as: string;
    users: inputs.GetTagsConfigAccountsUser[];
}

export interface GetTagsConfigAccountsArgs {
    groups: pulumi.Input<pulumi.Input<inputs.GetTagsConfigAccountsGroupArgs>[]>;
    run-as: pulumi.Input<string>;
    users: pulumi.Input<pulumi.Input<inputs.GetTagsConfigAccountsUserArgs>[]>;
}

export interface GetTagsConfigAccountsGroup {
    gid: number;
    groupname: string;
    members: string[];
}

export interface GetTagsConfigAccountsGroupArgs {
    gid: pulumi.Input<number>;
    groupname: pulumi.Input<string>;
    members: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTagsConfigAccountsUser {
    gid: number;
    homedir: string;
    shell: string;
    uid: number;
    username: string;
}

export interface GetTagsConfigAccountsUserArgs {
    gid: pulumi.Input<number>;
    homedir: pulumi.Input<string>;
    shell: pulumi.Input<string>;
    uid: pulumi.Input<number>;
    username: pulumi.Input<string>;
}

export interface GetTagsConfigContents {
    buildRepositories: string[];
    keyrings: string[];
    packages: string[];
    repositories: string[];
}

export interface GetTagsConfigContentsArgs {
    buildRepositories: pulumi.Input<pulumi.Input<string>[]>;
    keyrings: pulumi.Input<pulumi.Input<string>[]>;
    packages: pulumi.Input<pulumi.Input<string>[]>;
    repositories: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTagsConfigEntrypoint {
    command: string;
    services: {[key: string]: string};
    shell-fragment: string;
    type: string;
}

export interface GetTagsConfigEntrypointArgs {
    command: pulumi.Input<string>;
    services: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    shell-fragment: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GetTagsConfigPath {
    gid: number;
    path: string;
    permissions: number;
    recursive: boolean;
    source: string;
    type: string;
    uid: number;
}

export interface GetTagsConfigPathArgs {
    gid: pulumi.Input<number>;
    path: pulumi.Input<string>;
    permissions: pulumi.Input<number>;
    recursive: pulumi.Input<boolean>;
    source: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uid: pulumi.Input<number>;
}
