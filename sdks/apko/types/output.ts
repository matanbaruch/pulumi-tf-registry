// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BuildConfig {
    accounts: outputs.BuildConfigAccounts;
    annotations: {[key: string]: string};
    archs: string[];
    cmd: string;
    contents: outputs.BuildConfigContents;
    entrypoint: outputs.BuildConfigEntrypoint;
    environment: {[key: string]: string};
    include: string;
    paths: outputs.BuildConfigPath[];
    stop-signal: string;
    vcs-url: string;
    volumes: string[];
    work-dir: string;
}

export interface BuildConfigAccounts {
    groups: outputs.BuildConfigAccountsGroup[];
    run-as: string;
    users: outputs.BuildConfigAccountsUser[];
}

export interface BuildConfigAccountsGroup {
    gid: number;
    groupname: string;
    members: string[];
}

export interface BuildConfigAccountsUser {
    gid: number;
    homedir: string;
    shell: string;
    uid: number;
    username: string;
}

export interface BuildConfigContents {
    buildRepositories: string[];
    keyrings: string[];
    packages: string[];
    repositories: string[];
}

export interface BuildConfigEntrypoint {
    command: string;
    services: {[key: string]: string};
    shell-fragment: string;
    type: string;
}

export interface BuildConfigPath {
    gid: number;
    path: string;
    permissions: number;
    recursive: boolean;
    source: string;
    type: string;
    uid: number;
}

export interface BuildSboms {
    /**
     * The digest of the index or image.
     */
    digest: string;
    /**
     * The path to the SBOM contents.
     */
    predicatePath: string;
    /**
     * The hex-encoded SHA256 hash of the SBOM contents.
     */
    predicateSha256: string;
    /**
     * The predicate type of the SBOM.
     */
    predicateType: string;
}

export interface GetConfigConfig {
    accounts: outputs.GetConfigConfigAccounts;
    annotations: {[key: string]: string};
    archs: string[];
    cmd: string;
    contents: outputs.GetConfigConfigContents;
    entrypoint: outputs.GetConfigConfigEntrypoint;
    environment: {[key: string]: string};
    include: string;
    paths: outputs.GetConfigConfigPath[];
    stop-signal: string;
    vcs-url: string;
    volumes: string[];
    work-dir: string;
}

export interface GetConfigConfigAccounts {
    groups: outputs.GetConfigConfigAccountsGroup[];
    run-as: string;
    users: outputs.GetConfigConfigAccountsUser[];
}

export interface GetConfigConfigAccountsGroup {
    gid: number;
    groupname: string;
    members: string[];
}

export interface GetConfigConfigAccountsUser {
    gid: number;
    homedir: string;
    shell: string;
    uid: number;
    username: string;
}

export interface GetConfigConfigContents {
    buildRepositories: string[];
    keyrings: string[];
    packages: string[];
    repositories: string[];
}

export interface GetConfigConfigEntrypoint {
    command: string;
    services: {[key: string]: string};
    shell-fragment: string;
    type: string;
}

export interface GetConfigConfigPath {
    gid: number;
    path: string;
    permissions: number;
    recursive: boolean;
    source: string;
    type: string;
    uid: number;
}

export interface GetTagsConfig {
    accounts: outputs.GetTagsConfigAccounts;
    annotations: {[key: string]: string};
    archs: string[];
    cmd: string;
    contents: outputs.GetTagsConfigContents;
    entrypoint: outputs.GetTagsConfigEntrypoint;
    environment: {[key: string]: string};
    include: string;
    paths: outputs.GetTagsConfigPath[];
    stop-signal: string;
    vcs-url: string;
    volumes: string[];
    work-dir: string;
}

export interface GetTagsConfigAccounts {
    groups: outputs.GetTagsConfigAccountsGroup[];
    run-as: string;
    users: outputs.GetTagsConfigAccountsUser[];
}

export interface GetTagsConfigAccountsGroup {
    gid: number;
    groupname: string;
    members: string[];
}

export interface GetTagsConfigAccountsUser {
    gid: number;
    homedir: string;
    shell: string;
    uid: number;
    username: string;
}

export interface GetTagsConfigContents {
    buildRepositories: string[];
    keyrings: string[];
    packages: string[];
    repositories: string[];
}

export interface GetTagsConfigEntrypoint {
    command: string;
    services: {[key: string]: string};
    shell-fragment: string;
    type: string;
}

export interface GetTagsConfigPath {
    gid: number;
    path: string;
    permissions: number;
    recursive: boolean;
    source: string;
    type: string;
    uid: number;
}

