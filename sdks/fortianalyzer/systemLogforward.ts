// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemLogforward extends pulumi.CustomResource {
    /**
     * Get an existing SystemLogforward resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLogforwardState, opts?: pulumi.CustomResourceOptions): SystemLogforward {
        return new SystemLogforward(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortianalyzer:index/systemLogforward:SystemLogforward';

    /**
     * Returns true if the given object is an instance of SystemLogforward.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLogforward {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLogforward.__pulumiType;
    }

    public readonly aggArchiveTypes!: pulumi.Output<string[]>;
    public readonly aggDataEndTimes!: pulumi.Output<string[]>;
    public readonly aggDataStartTimes!: pulumi.Output<string[]>;
    public readonly aggLogtypes!: pulumi.Output<string[]>;
    public readonly aggPasswords!: pulumi.Output<string[]>;
    public readonly aggSchedule!: pulumi.Output<string>;
    public readonly aggTime!: pulumi.Output<number | undefined>;
    public readonly aggUser!: pulumi.Output<string | undefined>;
    public readonly deviceFilters!: pulumi.Output<outputs.SystemLogforwardDeviceFilter[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly fwdArchiveTypes!: pulumi.Output<string[]>;
    public readonly fwdArchives!: pulumi.Output<string>;
    public readonly fwdCompression!: pulumi.Output<string>;
    public readonly fwdFacility!: pulumi.Output<string>;
    public readonly fwdHaBindVip!: pulumi.Output<string>;
    public readonly fwdLogSourceIp!: pulumi.Output<string>;
    public readonly fwdMaxDelay!: pulumi.Output<string>;
    public readonly fwdOutputPluginId!: pulumi.Output<string | undefined>;
    public readonly fwdReliable!: pulumi.Output<string>;
    public readonly fwdSecure!: pulumi.Output<string>;
    public readonly fwdServerType!: pulumi.Output<string>;
    public readonly fwdSyslogFormat!: pulumi.Output<string>;
    public readonly fwdSyslogTransparent!: pulumi.Output<string>;
    public readonly logFieldExclusionStatus!: pulumi.Output<string>;
    public readonly logFieldExclusions!: pulumi.Output<outputs.SystemLogforwardLogFieldExclusion[] | undefined>;
    public readonly logFilterLogic!: pulumi.Output<string>;
    public readonly logFilterStatus!: pulumi.Output<string>;
    public readonly logFilters!: pulumi.Output<outputs.SystemLogforwardLogFilter[] | undefined>;
    public readonly logMaskingCustomPriority!: pulumi.Output<string>;
    public readonly logMaskingCustoms!: pulumi.Output<outputs.SystemLogforwardLogMaskingCustom[] | undefined>;
    public readonly logMaskingFields!: pulumi.Output<string[] | undefined>;
    public readonly logMaskingKeys!: pulumi.Output<string[]>;
    public readonly logMaskingStatus!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly pcapurlDomainIp!: pulumi.Output<string | undefined>;
    public readonly pcapurlEnrich!: pulumi.Output<string>;
    public readonly peerCertCn!: pulumi.Output<string | undefined>;
    public readonly proxyService!: pulumi.Output<string>;
    public readonly proxyServicePriority!: pulumi.Output<number>;
    public readonly serverAddr!: pulumi.Output<string | undefined>;
    public readonly serverDevice!: pulumi.Output<string | undefined>;
    public readonly serverName!: pulumi.Output<string | undefined>;
    public readonly serverPort!: pulumi.Output<number>;
    public readonly signature!: pulumi.Output<number>;
    public readonly syncMetadatas!: pulumi.Output<string[]>;

    /**
     * Create a SystemLogforward resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLogforwardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLogforwardArgs | SystemLogforwardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLogforwardState | undefined;
            resourceInputs["aggArchiveTypes"] = state ? state.aggArchiveTypes : undefined;
            resourceInputs["aggDataEndTimes"] = state ? state.aggDataEndTimes : undefined;
            resourceInputs["aggDataStartTimes"] = state ? state.aggDataStartTimes : undefined;
            resourceInputs["aggLogtypes"] = state ? state.aggLogtypes : undefined;
            resourceInputs["aggPasswords"] = state ? state.aggPasswords : undefined;
            resourceInputs["aggSchedule"] = state ? state.aggSchedule : undefined;
            resourceInputs["aggTime"] = state ? state.aggTime : undefined;
            resourceInputs["aggUser"] = state ? state.aggUser : undefined;
            resourceInputs["deviceFilters"] = state ? state.deviceFilters : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["fwdArchiveTypes"] = state ? state.fwdArchiveTypes : undefined;
            resourceInputs["fwdArchives"] = state ? state.fwdArchives : undefined;
            resourceInputs["fwdCompression"] = state ? state.fwdCompression : undefined;
            resourceInputs["fwdFacility"] = state ? state.fwdFacility : undefined;
            resourceInputs["fwdHaBindVip"] = state ? state.fwdHaBindVip : undefined;
            resourceInputs["fwdLogSourceIp"] = state ? state.fwdLogSourceIp : undefined;
            resourceInputs["fwdMaxDelay"] = state ? state.fwdMaxDelay : undefined;
            resourceInputs["fwdOutputPluginId"] = state ? state.fwdOutputPluginId : undefined;
            resourceInputs["fwdReliable"] = state ? state.fwdReliable : undefined;
            resourceInputs["fwdSecure"] = state ? state.fwdSecure : undefined;
            resourceInputs["fwdServerType"] = state ? state.fwdServerType : undefined;
            resourceInputs["fwdSyslogFormat"] = state ? state.fwdSyslogFormat : undefined;
            resourceInputs["fwdSyslogTransparent"] = state ? state.fwdSyslogTransparent : undefined;
            resourceInputs["logFieldExclusionStatus"] = state ? state.logFieldExclusionStatus : undefined;
            resourceInputs["logFieldExclusions"] = state ? state.logFieldExclusions : undefined;
            resourceInputs["logFilterLogic"] = state ? state.logFilterLogic : undefined;
            resourceInputs["logFilterStatus"] = state ? state.logFilterStatus : undefined;
            resourceInputs["logFilters"] = state ? state.logFilters : undefined;
            resourceInputs["logMaskingCustomPriority"] = state ? state.logMaskingCustomPriority : undefined;
            resourceInputs["logMaskingCustoms"] = state ? state.logMaskingCustoms : undefined;
            resourceInputs["logMaskingFields"] = state ? state.logMaskingFields : undefined;
            resourceInputs["logMaskingKeys"] = state ? state.logMaskingKeys : undefined;
            resourceInputs["logMaskingStatus"] = state ? state.logMaskingStatus : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["pcapurlDomainIp"] = state ? state.pcapurlDomainIp : undefined;
            resourceInputs["pcapurlEnrich"] = state ? state.pcapurlEnrich : undefined;
            resourceInputs["peerCertCn"] = state ? state.peerCertCn : undefined;
            resourceInputs["proxyService"] = state ? state.proxyService : undefined;
            resourceInputs["proxyServicePriority"] = state ? state.proxyServicePriority : undefined;
            resourceInputs["serverAddr"] = state ? state.serverAddr : undefined;
            resourceInputs["serverDevice"] = state ? state.serverDevice : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["serverPort"] = state ? state.serverPort : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["syncMetadatas"] = state ? state.syncMetadatas : undefined;
        } else {
            const args = argsOrState as SystemLogforwardArgs | undefined;
            resourceInputs["aggArchiveTypes"] = args ? args.aggArchiveTypes : undefined;
            resourceInputs["aggDataEndTimes"] = args ? args.aggDataEndTimes : undefined;
            resourceInputs["aggDataStartTimes"] = args ? args.aggDataStartTimes : undefined;
            resourceInputs["aggLogtypes"] = args ? args.aggLogtypes : undefined;
            resourceInputs["aggPasswords"] = args ? args.aggPasswords : undefined;
            resourceInputs["aggSchedule"] = args ? args.aggSchedule : undefined;
            resourceInputs["aggTime"] = args ? args.aggTime : undefined;
            resourceInputs["aggUser"] = args ? args.aggUser : undefined;
            resourceInputs["deviceFilters"] = args ? args.deviceFilters : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["fwdArchiveTypes"] = args ? args.fwdArchiveTypes : undefined;
            resourceInputs["fwdArchives"] = args ? args.fwdArchives : undefined;
            resourceInputs["fwdCompression"] = args ? args.fwdCompression : undefined;
            resourceInputs["fwdFacility"] = args ? args.fwdFacility : undefined;
            resourceInputs["fwdHaBindVip"] = args ? args.fwdHaBindVip : undefined;
            resourceInputs["fwdLogSourceIp"] = args ? args.fwdLogSourceIp : undefined;
            resourceInputs["fwdMaxDelay"] = args ? args.fwdMaxDelay : undefined;
            resourceInputs["fwdOutputPluginId"] = args ? args.fwdOutputPluginId : undefined;
            resourceInputs["fwdReliable"] = args ? args.fwdReliable : undefined;
            resourceInputs["fwdSecure"] = args ? args.fwdSecure : undefined;
            resourceInputs["fwdServerType"] = args ? args.fwdServerType : undefined;
            resourceInputs["fwdSyslogFormat"] = args ? args.fwdSyslogFormat : undefined;
            resourceInputs["fwdSyslogTransparent"] = args ? args.fwdSyslogTransparent : undefined;
            resourceInputs["logFieldExclusionStatus"] = args ? args.logFieldExclusionStatus : undefined;
            resourceInputs["logFieldExclusions"] = args ? args.logFieldExclusions : undefined;
            resourceInputs["logFilterLogic"] = args ? args.logFilterLogic : undefined;
            resourceInputs["logFilterStatus"] = args ? args.logFilterStatus : undefined;
            resourceInputs["logFilters"] = args ? args.logFilters : undefined;
            resourceInputs["logMaskingCustomPriority"] = args ? args.logMaskingCustomPriority : undefined;
            resourceInputs["logMaskingCustoms"] = args ? args.logMaskingCustoms : undefined;
            resourceInputs["logMaskingFields"] = args ? args.logMaskingFields : undefined;
            resourceInputs["logMaskingKeys"] = args ? args.logMaskingKeys : undefined;
            resourceInputs["logMaskingStatus"] = args ? args.logMaskingStatus : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["pcapurlDomainIp"] = args ? args.pcapurlDomainIp : undefined;
            resourceInputs["pcapurlEnrich"] = args ? args.pcapurlEnrich : undefined;
            resourceInputs["peerCertCn"] = args ? args.peerCertCn : undefined;
            resourceInputs["proxyService"] = args ? args.proxyService : undefined;
            resourceInputs["proxyServicePriority"] = args ? args.proxyServicePriority : undefined;
            resourceInputs["serverAddr"] = args ? args.serverAddr : undefined;
            resourceInputs["serverDevice"] = args ? args.serverDevice : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["serverPort"] = args ? args.serverPort : undefined;
            resourceInputs["signature"] = args ? args.signature : undefined;
            resourceInputs["syncMetadatas"] = args ? args.syncMetadatas : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemLogforward.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemLogforward resources.
 */
export interface SystemLogforwardState {
    aggArchiveTypes?: pulumi.Input<pulumi.Input<string>[]>;
    aggDataEndTimes?: pulumi.Input<pulumi.Input<string>[]>;
    aggDataStartTimes?: pulumi.Input<pulumi.Input<string>[]>;
    aggLogtypes?: pulumi.Input<pulumi.Input<string>[]>;
    aggPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    aggSchedule?: pulumi.Input<string>;
    aggTime?: pulumi.Input<number>;
    aggUser?: pulumi.Input<string>;
    deviceFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardDeviceFilter>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    fwdArchiveTypes?: pulumi.Input<pulumi.Input<string>[]>;
    fwdArchives?: pulumi.Input<string>;
    fwdCompression?: pulumi.Input<string>;
    fwdFacility?: pulumi.Input<string>;
    fwdHaBindVip?: pulumi.Input<string>;
    fwdLogSourceIp?: pulumi.Input<string>;
    fwdMaxDelay?: pulumi.Input<string>;
    fwdOutputPluginId?: pulumi.Input<string>;
    fwdReliable?: pulumi.Input<string>;
    fwdSecure?: pulumi.Input<string>;
    fwdServerType?: pulumi.Input<string>;
    fwdSyslogFormat?: pulumi.Input<string>;
    fwdSyslogTransparent?: pulumi.Input<string>;
    logFieldExclusionStatus?: pulumi.Input<string>;
    logFieldExclusions?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardLogFieldExclusion>[]>;
    logFilterLogic?: pulumi.Input<string>;
    logFilterStatus?: pulumi.Input<string>;
    logFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardLogFilter>[]>;
    logMaskingCustomPriority?: pulumi.Input<string>;
    logMaskingCustoms?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardLogMaskingCustom>[]>;
    logMaskingFields?: pulumi.Input<pulumi.Input<string>[]>;
    logMaskingKeys?: pulumi.Input<pulumi.Input<string>[]>;
    logMaskingStatus?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    pcapurlDomainIp?: pulumi.Input<string>;
    pcapurlEnrich?: pulumi.Input<string>;
    peerCertCn?: pulumi.Input<string>;
    proxyService?: pulumi.Input<string>;
    proxyServicePriority?: pulumi.Input<number>;
    serverAddr?: pulumi.Input<string>;
    serverDevice?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    serverPort?: pulumi.Input<number>;
    signature?: pulumi.Input<number>;
    syncMetadatas?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SystemLogforward resource.
 */
export interface SystemLogforwardArgs {
    aggArchiveTypes?: pulumi.Input<pulumi.Input<string>[]>;
    aggDataEndTimes?: pulumi.Input<pulumi.Input<string>[]>;
    aggDataStartTimes?: pulumi.Input<pulumi.Input<string>[]>;
    aggLogtypes?: pulumi.Input<pulumi.Input<string>[]>;
    aggPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    aggSchedule?: pulumi.Input<string>;
    aggTime?: pulumi.Input<number>;
    aggUser?: pulumi.Input<string>;
    deviceFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardDeviceFilter>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    fwdArchiveTypes?: pulumi.Input<pulumi.Input<string>[]>;
    fwdArchives?: pulumi.Input<string>;
    fwdCompression?: pulumi.Input<string>;
    fwdFacility?: pulumi.Input<string>;
    fwdHaBindVip?: pulumi.Input<string>;
    fwdLogSourceIp?: pulumi.Input<string>;
    fwdMaxDelay?: pulumi.Input<string>;
    fwdOutputPluginId?: pulumi.Input<string>;
    fwdReliable?: pulumi.Input<string>;
    fwdSecure?: pulumi.Input<string>;
    fwdServerType?: pulumi.Input<string>;
    fwdSyslogFormat?: pulumi.Input<string>;
    fwdSyslogTransparent?: pulumi.Input<string>;
    logFieldExclusionStatus?: pulumi.Input<string>;
    logFieldExclusions?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardLogFieldExclusion>[]>;
    logFilterLogic?: pulumi.Input<string>;
    logFilterStatus?: pulumi.Input<string>;
    logFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardLogFilter>[]>;
    logMaskingCustomPriority?: pulumi.Input<string>;
    logMaskingCustoms?: pulumi.Input<pulumi.Input<inputs.SystemLogforwardLogMaskingCustom>[]>;
    logMaskingFields?: pulumi.Input<pulumi.Input<string>[]>;
    logMaskingKeys?: pulumi.Input<pulumi.Input<string>[]>;
    logMaskingStatus?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    pcapurlDomainIp?: pulumi.Input<string>;
    pcapurlEnrich?: pulumi.Input<string>;
    peerCertCn?: pulumi.Input<string>;
    proxyService?: pulumi.Input<string>;
    proxyServicePriority?: pulumi.Input<number>;
    serverAddr?: pulumi.Input<string>;
    serverDevice?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    serverPort?: pulumi.Input<number>;
    signature?: pulumi.Input<number>;
    syncMetadatas?: pulumi.Input<pulumi.Input<string>[]>;
}
