// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemHa extends pulumi.CustomResource {
    /**
     * Get an existing SystemHa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemHaState, opts?: pulumi.CustomResourceOptions): SystemHa {
        return new SystemHa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortianalyzer:index/systemHa:SystemHa';

    /**
     * Returns true if the given object is an instance of SystemHa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemHa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemHa.__pulumiType;
    }

    public readonly cfgSyncHbInterval!: pulumi.Output<number>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly groupId!: pulumi.Output<number | undefined>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly hbInterface!: pulumi.Output<string | undefined>;
    public readonly hbInterval!: pulumi.Output<number>;
    public readonly healthchecks!: pulumi.Output<string[] | undefined>;
    public readonly initialSync!: pulumi.Output<string>;
    public readonly initialSyncThreads!: pulumi.Output<number>;
    public readonly loadBalance!: pulumi.Output<string>;
    public readonly localCert!: pulumi.Output<string | undefined>;
    public readonly logSync!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly passwords!: pulumi.Output<string[] | undefined>;
    public readonly peers!: pulumi.Output<outputs.SystemHaPeer[] | undefined>;
    public readonly preferredRole!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly privateClusterid!: pulumi.Output<number>;
    public readonly privateFileQuota!: pulumi.Output<number>;
    public readonly privateHbInterval!: pulumi.Output<number>;
    public readonly privateHbLostThreshold!: pulumi.Output<number>;
    public readonly privateMode!: pulumi.Output<string>;
    public readonly privatePasswords!: pulumi.Output<string[] | undefined>;
    public readonly privatePeers!: pulumi.Output<outputs.SystemHaPrivatePeer[] | undefined>;
    public readonly unicast!: pulumi.Output<string>;
    public readonly vip!: pulumi.Output<string | undefined>;
    public readonly vipBlocks!: pulumi.Output<outputs.SystemHaVipBlock[] | undefined>;
    public readonly vipInterface!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemHa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemHaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemHaArgs | SystemHaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemHaState | undefined;
            resourceInputs["cfgSyncHbInterval"] = state ? state.cfgSyncHbInterval : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["hbInterface"] = state ? state.hbInterface : undefined;
            resourceInputs["hbInterval"] = state ? state.hbInterval : undefined;
            resourceInputs["healthchecks"] = state ? state.healthchecks : undefined;
            resourceInputs["initialSync"] = state ? state.initialSync : undefined;
            resourceInputs["initialSyncThreads"] = state ? state.initialSyncThreads : undefined;
            resourceInputs["loadBalance"] = state ? state.loadBalance : undefined;
            resourceInputs["localCert"] = state ? state.localCert : undefined;
            resourceInputs["logSync"] = state ? state.logSync : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["passwords"] = state ? state.passwords : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
            resourceInputs["preferredRole"] = state ? state.preferredRole : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["privateClusterid"] = state ? state.privateClusterid : undefined;
            resourceInputs["privateFileQuota"] = state ? state.privateFileQuota : undefined;
            resourceInputs["privateHbInterval"] = state ? state.privateHbInterval : undefined;
            resourceInputs["privateHbLostThreshold"] = state ? state.privateHbLostThreshold : undefined;
            resourceInputs["privateMode"] = state ? state.privateMode : undefined;
            resourceInputs["privatePasswords"] = state ? state.privatePasswords : undefined;
            resourceInputs["privatePeers"] = state ? state.privatePeers : undefined;
            resourceInputs["unicast"] = state ? state.unicast : undefined;
            resourceInputs["vip"] = state ? state.vip : undefined;
            resourceInputs["vipBlocks"] = state ? state.vipBlocks : undefined;
            resourceInputs["vipInterface"] = state ? state.vipInterface : undefined;
        } else {
            const args = argsOrState as SystemHaArgs | undefined;
            resourceInputs["cfgSyncHbInterval"] = args ? args.cfgSyncHbInterval : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["hbInterface"] = args ? args.hbInterface : undefined;
            resourceInputs["hbInterval"] = args ? args.hbInterval : undefined;
            resourceInputs["healthchecks"] = args ? args.healthchecks : undefined;
            resourceInputs["initialSync"] = args ? args.initialSync : undefined;
            resourceInputs["initialSyncThreads"] = args ? args.initialSyncThreads : undefined;
            resourceInputs["loadBalance"] = args ? args.loadBalance : undefined;
            resourceInputs["localCert"] = args ? args.localCert : undefined;
            resourceInputs["logSync"] = args ? args.logSync : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
            resourceInputs["preferredRole"] = args ? args.preferredRole : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["privateClusterid"] = args ? args.privateClusterid : undefined;
            resourceInputs["privateFileQuota"] = args ? args.privateFileQuota : undefined;
            resourceInputs["privateHbInterval"] = args ? args.privateHbInterval : undefined;
            resourceInputs["privateHbLostThreshold"] = args ? args.privateHbLostThreshold : undefined;
            resourceInputs["privateMode"] = args ? args.privateMode : undefined;
            resourceInputs["privatePasswords"] = args?.privatePasswords ? pulumi.secret(args.privatePasswords) : undefined;
            resourceInputs["privatePeers"] = args ? args.privatePeers : undefined;
            resourceInputs["unicast"] = args ? args.unicast : undefined;
            resourceInputs["vip"] = args ? args.vip : undefined;
            resourceInputs["vipBlocks"] = args ? args.vipBlocks : undefined;
            resourceInputs["vipInterface"] = args ? args.vipInterface : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwords", "privatePasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemHa.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemHa resources.
 */
export interface SystemHaState {
    cfgSyncHbInterval?: pulumi.Input<number>;
    dynamicSortSubtable?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    groupName?: pulumi.Input<string>;
    hbInterface?: pulumi.Input<string>;
    hbInterval?: pulumi.Input<number>;
    healthchecks?: pulumi.Input<pulumi.Input<string>[]>;
    initialSync?: pulumi.Input<string>;
    initialSyncThreads?: pulumi.Input<number>;
    loadBalance?: pulumi.Input<string>;
    localCert?: pulumi.Input<string>;
    logSync?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peers?: pulumi.Input<pulumi.Input<inputs.SystemHaPeer>[]>;
    preferredRole?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    privateClusterid?: pulumi.Input<number>;
    privateFileQuota?: pulumi.Input<number>;
    privateHbInterval?: pulumi.Input<number>;
    privateHbLostThreshold?: pulumi.Input<number>;
    privateMode?: pulumi.Input<string>;
    privatePasswords?: pulumi.Input<pulumi.Input<string>[]>;
    privatePeers?: pulumi.Input<pulumi.Input<inputs.SystemHaPrivatePeer>[]>;
    unicast?: pulumi.Input<string>;
    vip?: pulumi.Input<string>;
    vipBlocks?: pulumi.Input<pulumi.Input<inputs.SystemHaVipBlock>[]>;
    vipInterface?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemHa resource.
 */
export interface SystemHaArgs {
    cfgSyncHbInterval?: pulumi.Input<number>;
    dynamicSortSubtable?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    groupName?: pulumi.Input<string>;
    hbInterface?: pulumi.Input<string>;
    hbInterval?: pulumi.Input<number>;
    healthchecks?: pulumi.Input<pulumi.Input<string>[]>;
    initialSync?: pulumi.Input<string>;
    initialSyncThreads?: pulumi.Input<number>;
    loadBalance?: pulumi.Input<string>;
    localCert?: pulumi.Input<string>;
    logSync?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peers?: pulumi.Input<pulumi.Input<inputs.SystemHaPeer>[]>;
    preferredRole?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    privateClusterid?: pulumi.Input<number>;
    privateFileQuota?: pulumi.Input<number>;
    privateHbInterval?: pulumi.Input<number>;
    privateHbLostThreshold?: pulumi.Input<number>;
    privateMode?: pulumi.Input<string>;
    privatePasswords?: pulumi.Input<pulumi.Input<string>[]>;
    privatePeers?: pulumi.Input<pulumi.Input<inputs.SystemHaPrivatePeer>[]>;
    unicast?: pulumi.Input<string>;
    vip?: pulumi.Input<string>;
    vipBlocks?: pulumi.Input<pulumi.Input<inputs.SystemHaVipBlock>[]>;
    vipInterface?: pulumi.Input<string>;
}
