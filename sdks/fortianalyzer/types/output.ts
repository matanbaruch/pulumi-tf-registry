// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DvmCmdAddDeviceDevice {
    admPass?: string;
    admUsr?: string;
    desc?: string;
    deviceaction?: string;
    fazquota?: number;
    ip?: string;
    metafields?: string;
    mgmtMode?: string;
    mr?: number;
    name?: string;
    osType?: string;
    osVer?: string;
    patch?: number;
    platformStr?: string;
    sn?: string;
}

export interface DvmCmdAddDeviceGroup {
    name?: string;
    vdom?: string;
}

export interface FmupdateFdssettingPushOverride {
    ip: string;
    port: number;
    status: string;
}

export interface FmupdateFdssettingPushOverrideToClient {
    announceIps?: outputs.FmupdateFdssettingPushOverrideToClientAnnounceIp[];
    status: string;
}

export interface FmupdateFdssettingPushOverrideToClientAnnounceIp {
    id?: number;
    ip: string;
    port: number;
}

export interface FmupdateFdssettingPushoverridetoclientAnnounceIp {
    id?: number;
    ip: string;
    port: number;
}

export interface FmupdateFdssettingServerOverride {
    servlists?: outputs.FmupdateFdssettingServerOverrideServlist[];
    status: string;
}

export interface FmupdateFdssettingServerOverrideServlist {
    id?: number;
    ip: string;
    ip6: string;
    port: number;
    serviceType: string;
}

export interface FmupdateFdssettingServeroverrideServlist {
    id?: number;
    ip: string;
    ip6: string;
    port: number;
    serviceType: string;
}

export interface FmupdateFdssettingUpdateSchedule {
    day: string;
    frequency: string;
    status: string;
    times: string[];
}

export interface FmupdateFwmsettingUpgradeTimeout {
    checkStatusTimeout: number;
    ctrlCheckStatusTimeout: number;
    ctrlPutImageByFdsTimeout: number;
    haSyncTimeout: number;
    healthCheckTimeout: number;
    licenseCheckTimeout: number;
    prepareImageTimeout: number;
    putImageByFdsTimeout: number;
    putImageTimeout: number;
    rebootOfFsckTimeout: number;
    rebootOfUpgradeTimeout: number;
    retrieveTimeout: number;
    rpcTimeout: number;
    totalTimeout: number;
}

export interface FmupdateServeraccessprioritiesPrivateServer {
    id?: number;
    ip: string;
    ip6: string;
    timeZone: number;
}

export interface FmupdateWebspamFgdsettingServerOverride {
    servlists?: outputs.FmupdateWebspamFgdsettingServerOverrideServlist[];
    status: string;
}

export interface FmupdateWebspamFgdsettingServerOverrideServlist {
    id?: number;
    ip: string;
    ip6: string;
    port: number;
    serviceType: string;
}

export interface SystemAdminGroupMember {
    name?: string;
}

export interface SystemAdminLdapFazadom {
    adomName?: string;
}

export interface SystemAdminProfileDatamaskCustomField {
    fieldCategories?: string[];
    fieldName?: string;
    fieldStatus: string;
    fieldType: string;
}

export interface SystemAdminProfileWritePasswdProfile {
    profileid?: string;
}

export interface SystemAdminProfileWritePasswdUserList {
    userid?: string;
}

export interface SystemAdminUserAdomExclude {
    adomName?: string;
}

export interface SystemAdminUserDashboard {
    column?: number;
    diskioContentType: string;
    diskioPeriod: string;
    logRatePeriod?: string;
    logRateTopn: string;
    logRateType: string;
    moduleid?: number;
    name?: string;
    numEntries: number;
    refreshInterval: number;
    resCpuDisplay: string;
    resPeriod: string;
    resViewType: string;
    status: string;
    tabid?: number;
    timePeriod: string;
    widgetType?: string;
}

export interface SystemAdminUserDashboardTab {
    name?: string;
    tabid?: number;
}

export interface SystemAdminUserFazadom {
    adomName?: string;
}

export interface SystemAdminUserMetaData {
    fieldlength?: number;
    fieldname?: string;
    fieldvalue?: string;
    importance: string;
    status: string;
}

export interface SystemAdminUserPolicyBlock {
    policyBlockName?: string;
}

export interface SystemAdminUserPolicyPackage {
    policyPackageName?: string;
}

export interface SystemAlerteventAlertDestination {
    from?: string;
    smtpName?: string;
    snmpName?: string;
    syslogName?: string;
    to?: string;
    type: string;
}

export interface SystemAutodeleteDlpFilesAutoDeletion {
    retention: string;
    runat?: number;
    status: string;
    value?: number;
}

export interface SystemAutodeleteLogAutoDeletion {
    retention: string;
    runat?: number;
    status: string;
    value?: number;
}

export interface SystemAutodeleteQuarantineFilesAutoDeletion {
    retention: string;
    runat?: number;
    status: string;
    value?: number;
}

export interface SystemAutodeleteReportAutoDeletion {
    retention: string;
    runat?: number;
    status: string;
    value?: number;
}

export interface SystemCsfFabricConnector {
    accprofile?: string;
    configurationWriteAccess: string;
    serial?: string;
}

export interface SystemCsfTrustedList {
    action: string;
    authorizationType: string;
    certificate?: string;
    downstreamAuthorization: string;
    haMembers?: string;
    index?: number;
    name?: string;
    serial?: string;
}

export interface SystemGlobalSslCipherSuite {
    cipher?: string;
    priority?: number;
    version: string;
}

export interface SystemHaPeer {
    addr?: string;
    addrHb?: string;
    id?: number;
    ip?: string;
    ipHb?: string;
    serialNumber?: string;
    status: string;
}

export interface SystemHaPrivatePeer {
    id?: number;
    ip?: string;
    ip6: string;
    serialNumber?: string;
    status: string;
}

export interface SystemHaVipBlock {
    id?: number;
    status: string;
    vip?: string;
    vipInterface?: string;
}

export interface SystemInterfaceIpv6 {
    ip6Address: string;
    ip6Allowaccesses?: string[];
    ip6Autoconf: string;
}

export interface SystemInterfaceMember {
    interfaceName?: string;
}

export interface SystemLogRatelimitDevice {
    device?: string;
    filterType: string;
    id?: number;
    ratelimit?: number;
}

export interface SystemLogRatelimitRatelimit {
    filter?: string;
    filterType: string;
    id?: number;
    ratelimit?: number;
}

export interface SystemLogSettingsRollingAnalyzer {
    days?: string[];
    delFiles: string;
    directory?: string;
    fileSize: number;
    gzipFormat: string;
    hour?: number;
    ip: string;
    ip2: string;
    ip3: string;
    logFormat: string;
    min?: number;
    password2s: string[];
    password3s: string[];
    passwords: string[];
    port?: number;
    port2?: number;
    port3?: number;
    rollingUpgradeStatus?: number;
    server?: string;
    server2?: string;
    server3?: string;
    serverType: string;
    upload: string;
    uploadHour?: number;
    uploadMode: string;
    uploadTrigger: string;
    username?: string;
    username2?: string;
    username3?: string;
    when: string;
}

export interface SystemLogSettingsRollingLocal {
    days?: string[];
    delFiles: string;
    directory?: string;
    fileSize: number;
    gzipFormat: string;
    hour?: number;
    ip: string;
    ip2: string;
    ip3: string;
    logFormat: string;
    min?: number;
    password2s: string[];
    password3s: string[];
    passwords: string[];
    port?: number;
    port2?: number;
    port3?: number;
    rollingUpgradeStatus?: number;
    server?: string;
    server2?: string;
    server3?: string;
    serverType: string;
    upload: string;
    uploadHour?: number;
    uploadMode: string;
    uploadTrigger: string;
    username?: string;
    username2?: string;
    username3?: string;
    when: string;
}

export interface SystemLogSettingsRollingRegular {
    days: string[];
    delFiles: string;
    directory?: string;
    fileSize: number;
    gzipFormat: string;
    hour?: number;
    ip: string;
    ip2: string;
    ip3: string;
    logFormat: string;
    min?: number;
    password2s: string[];
    password3s: string[];
    passwords: string[];
    port?: number;
    port2?: number;
    port3?: number;
    rollingUpgradeStatus: number;
    server?: string;
    server2?: string;
    server3?: string;
    serverType: string;
    upload: string;
    uploadHour?: number;
    uploadMode: string;
    uploadTrigger: string;
    username?: string;
    username2?: string;
    username3?: string;
    when: string;
}

export interface SystemLogfetchClientprofileDeviceFilter {
    adom: string;
    device: string;
    id?: number;
    vdom: string;
}

export interface SystemLogfetchClientprofileLogFilter {
    field?: string;
    id?: number;
    oper: string;
    value?: string;
}

export interface SystemLogforwardDeviceFilter {
    action: string;
    adom?: string;
    device?: string;
    id?: number;
}

export interface SystemLogforwardLogFieldExclusion {
    devType: string;
    fieldList?: string;
    id?: number;
    logType: string;
}

export interface SystemLogforwardLogFilter {
    field: string;
    id?: number;
    oper: string;
    value: string;
}

export interface SystemLogforwardLogMaskingCustom {
    fieldName?: string;
    fieldType: string;
    id?: number;
}

export interface SystemNtpNtpserver {
    authentication: string;
    id?: number;
    keyId?: number;
    keys: string[];
    maxpoll: number;
    minpoll: number;
    ntpv3: string;
    server?: string;
}

export interface SystemSamlFabricIdp {
    devId?: string;
    idpCert?: string;
    idpEntityId?: string;
    idpSingleLogoutUrl?: string;
    idpSingleSignOnUrl?: string;
    idpStatus: string;
}

export interface SystemSamlServiceProvider {
    idpEntityId?: string;
    idpSingleLogoutUrl?: string;
    idpSingleSignOnUrl?: string;
    name?: string;
    prefix?: string;
    spAdom?: string;
    spCert?: string;
    spEntityId?: string;
    spProfile?: string;
    spSingleLogoutUrl?: string;
    spSingleSignOnUrl?: string;
}

export interface SystemSnmpCommunityHost {
    id?: number;
    interface?: string;
    ips: string[];
}

export interface SystemSnmpCommunityHosts6 {
    id?: number;
    interface?: string;
    ip: string;
}

export interface SystemSocfabricTrustedList {
    id?: number;
    serial?: string;
}

export interface SystemSqlCustomIndex {
    caseSensitive: string;
    deviceType: string;
    id?: number;
    indexField?: string;
    logType: string;
}

export interface SystemSqlCustomSkipidx {
    deviceType: string;
    id?: number;
    indexField?: string;
    logType: string;
}

export interface SystemSqlTsIndexField {
    category?: string;
    value?: string;
}

export interface SystemWorkflowApprovalmatrixApprover {
    member?: string;
    seqNum?: number;
}

