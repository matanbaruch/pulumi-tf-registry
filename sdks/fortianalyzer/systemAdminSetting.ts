// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemAdminSetting extends pulumi.CustomResource {
    /**
     * Get an existing SystemAdminSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemAdminSettingState, opts?: pulumi.CustomResourceOptions): SystemAdminSetting {
        return new SystemAdminSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortianalyzer:index/systemAdminSetting:SystemAdminSetting';

    /**
     * Returns true if the given object is an instance of SystemAdminSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemAdminSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemAdminSetting.__pulumiType;
    }

    public readonly accessBanner!: pulumi.Output<string>;
    public readonly adminHttpsRedirect!: pulumi.Output<string>;
    public readonly adminLoginMax!: pulumi.Output<number>;
    public readonly adminServerCert!: pulumi.Output<string>;
    public readonly authAddr!: pulumi.Output<string | undefined>;
    public readonly authPort!: pulumi.Output<number>;
    public readonly bannerMessage!: pulumi.Output<string | undefined>;
    public readonly fgtGuiProxy!: pulumi.Output<string>;
    public readonly fgtGuiProxyPort!: pulumi.Output<number>;
    public readonly firmwareUpgradeCheck!: pulumi.Output<string>;
    public readonly fswIgnorePlatformCheck!: pulumi.Output<string>;
    public readonly guiTheme!: pulumi.Output<string>;
    public readonly httpPort!: pulumi.Output<number>;
    public readonly httpsPort!: pulumi.Output<number>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public readonly idleTimeoutApi!: pulumi.Output<number>;
    public readonly idleTimeoutGui!: pulumi.Output<number>;
    public readonly idleTimeoutSso!: pulumi.Output<number>;
    public readonly objectsForceDeletion!: pulumi.Output<string>;
    public readonly preferredFgfmIntf!: pulumi.Output<string | undefined>;
    public readonly shellAccess!: pulumi.Output<string>;
    public readonly shellPasswords!: pulumi.Output<string[] | undefined>;
    public readonly showAddMultiple!: pulumi.Output<string>;
    public readonly showCheckboxInTable!: pulumi.Output<string>;
    public readonly showDeviceImportExport!: pulumi.Output<string>;
    public readonly showFctManager!: pulumi.Output<string>;
    public readonly showHostname!: pulumi.Output<string>;
    public readonly showLogForwarding!: pulumi.Output<string>;
    public readonly unregDevOpt!: pulumi.Output<string>;
    public readonly webadminLanguage!: pulumi.Output<string>;

    /**
     * Create a SystemAdminSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemAdminSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemAdminSettingArgs | SystemAdminSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemAdminSettingState | undefined;
            resourceInputs["accessBanner"] = state ? state.accessBanner : undefined;
            resourceInputs["adminHttpsRedirect"] = state ? state.adminHttpsRedirect : undefined;
            resourceInputs["adminLoginMax"] = state ? state.adminLoginMax : undefined;
            resourceInputs["adminServerCert"] = state ? state.adminServerCert : undefined;
            resourceInputs["authAddr"] = state ? state.authAddr : undefined;
            resourceInputs["authPort"] = state ? state.authPort : undefined;
            resourceInputs["bannerMessage"] = state ? state.bannerMessage : undefined;
            resourceInputs["fgtGuiProxy"] = state ? state.fgtGuiProxy : undefined;
            resourceInputs["fgtGuiProxyPort"] = state ? state.fgtGuiProxyPort : undefined;
            resourceInputs["firmwareUpgradeCheck"] = state ? state.firmwareUpgradeCheck : undefined;
            resourceInputs["fswIgnorePlatformCheck"] = state ? state.fswIgnorePlatformCheck : undefined;
            resourceInputs["guiTheme"] = state ? state.guiTheme : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["idleTimeoutApi"] = state ? state.idleTimeoutApi : undefined;
            resourceInputs["idleTimeoutGui"] = state ? state.idleTimeoutGui : undefined;
            resourceInputs["idleTimeoutSso"] = state ? state.idleTimeoutSso : undefined;
            resourceInputs["objectsForceDeletion"] = state ? state.objectsForceDeletion : undefined;
            resourceInputs["preferredFgfmIntf"] = state ? state.preferredFgfmIntf : undefined;
            resourceInputs["shellAccess"] = state ? state.shellAccess : undefined;
            resourceInputs["shellPasswords"] = state ? state.shellPasswords : undefined;
            resourceInputs["showAddMultiple"] = state ? state.showAddMultiple : undefined;
            resourceInputs["showCheckboxInTable"] = state ? state.showCheckboxInTable : undefined;
            resourceInputs["showDeviceImportExport"] = state ? state.showDeviceImportExport : undefined;
            resourceInputs["showFctManager"] = state ? state.showFctManager : undefined;
            resourceInputs["showHostname"] = state ? state.showHostname : undefined;
            resourceInputs["showLogForwarding"] = state ? state.showLogForwarding : undefined;
            resourceInputs["unregDevOpt"] = state ? state.unregDevOpt : undefined;
            resourceInputs["webadminLanguage"] = state ? state.webadminLanguage : undefined;
        } else {
            const args = argsOrState as SystemAdminSettingArgs | undefined;
            resourceInputs["accessBanner"] = args ? args.accessBanner : undefined;
            resourceInputs["adminHttpsRedirect"] = args ? args.adminHttpsRedirect : undefined;
            resourceInputs["adminLoginMax"] = args ? args.adminLoginMax : undefined;
            resourceInputs["adminServerCert"] = args ? args.adminServerCert : undefined;
            resourceInputs["authAddr"] = args ? args.authAddr : undefined;
            resourceInputs["authPort"] = args ? args.authPort : undefined;
            resourceInputs["bannerMessage"] = args ? args.bannerMessage : undefined;
            resourceInputs["fgtGuiProxy"] = args ? args.fgtGuiProxy : undefined;
            resourceInputs["fgtGuiProxyPort"] = args ? args.fgtGuiProxyPort : undefined;
            resourceInputs["firmwareUpgradeCheck"] = args ? args.firmwareUpgradeCheck : undefined;
            resourceInputs["fswIgnorePlatformCheck"] = args ? args.fswIgnorePlatformCheck : undefined;
            resourceInputs["guiTheme"] = args ? args.guiTheme : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["idleTimeoutApi"] = args ? args.idleTimeoutApi : undefined;
            resourceInputs["idleTimeoutGui"] = args ? args.idleTimeoutGui : undefined;
            resourceInputs["idleTimeoutSso"] = args ? args.idleTimeoutSso : undefined;
            resourceInputs["objectsForceDeletion"] = args ? args.objectsForceDeletion : undefined;
            resourceInputs["preferredFgfmIntf"] = args ? args.preferredFgfmIntf : undefined;
            resourceInputs["shellAccess"] = args ? args.shellAccess : undefined;
            resourceInputs["shellPasswords"] = args?.shellPasswords ? pulumi.secret(args.shellPasswords) : undefined;
            resourceInputs["showAddMultiple"] = args ? args.showAddMultiple : undefined;
            resourceInputs["showCheckboxInTable"] = args ? args.showCheckboxInTable : undefined;
            resourceInputs["showDeviceImportExport"] = args ? args.showDeviceImportExport : undefined;
            resourceInputs["showFctManager"] = args ? args.showFctManager : undefined;
            resourceInputs["showHostname"] = args ? args.showHostname : undefined;
            resourceInputs["showLogForwarding"] = args ? args.showLogForwarding : undefined;
            resourceInputs["unregDevOpt"] = args ? args.unregDevOpt : undefined;
            resourceInputs["webadminLanguage"] = args ? args.webadminLanguage : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["shellPasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemAdminSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemAdminSetting resources.
 */
export interface SystemAdminSettingState {
    accessBanner?: pulumi.Input<string>;
    adminHttpsRedirect?: pulumi.Input<string>;
    adminLoginMax?: pulumi.Input<number>;
    adminServerCert?: pulumi.Input<string>;
    authAddr?: pulumi.Input<string>;
    authPort?: pulumi.Input<number>;
    bannerMessage?: pulumi.Input<string>;
    fgtGuiProxy?: pulumi.Input<string>;
    fgtGuiProxyPort?: pulumi.Input<number>;
    firmwareUpgradeCheck?: pulumi.Input<string>;
    fswIgnorePlatformCheck?: pulumi.Input<string>;
    guiTheme?: pulumi.Input<string>;
    httpPort?: pulumi.Input<number>;
    httpsPort?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    idleTimeoutApi?: pulumi.Input<number>;
    idleTimeoutGui?: pulumi.Input<number>;
    idleTimeoutSso?: pulumi.Input<number>;
    objectsForceDeletion?: pulumi.Input<string>;
    preferredFgfmIntf?: pulumi.Input<string>;
    shellAccess?: pulumi.Input<string>;
    shellPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    showAddMultiple?: pulumi.Input<string>;
    showCheckboxInTable?: pulumi.Input<string>;
    showDeviceImportExport?: pulumi.Input<string>;
    showFctManager?: pulumi.Input<string>;
    showHostname?: pulumi.Input<string>;
    showLogForwarding?: pulumi.Input<string>;
    unregDevOpt?: pulumi.Input<string>;
    webadminLanguage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemAdminSetting resource.
 */
export interface SystemAdminSettingArgs {
    accessBanner?: pulumi.Input<string>;
    adminHttpsRedirect?: pulumi.Input<string>;
    adminLoginMax?: pulumi.Input<number>;
    adminServerCert?: pulumi.Input<string>;
    authAddr?: pulumi.Input<string>;
    authPort?: pulumi.Input<number>;
    bannerMessage?: pulumi.Input<string>;
    fgtGuiProxy?: pulumi.Input<string>;
    fgtGuiProxyPort?: pulumi.Input<number>;
    firmwareUpgradeCheck?: pulumi.Input<string>;
    fswIgnorePlatformCheck?: pulumi.Input<string>;
    guiTheme?: pulumi.Input<string>;
    httpPort?: pulumi.Input<number>;
    httpsPort?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    idleTimeoutApi?: pulumi.Input<number>;
    idleTimeoutGui?: pulumi.Input<number>;
    idleTimeoutSso?: pulumi.Input<number>;
    objectsForceDeletion?: pulumi.Input<string>;
    preferredFgfmIntf?: pulumi.Input<string>;
    shellAccess?: pulumi.Input<string>;
    shellPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    showAddMultiple?: pulumi.Input<string>;
    showCheckboxInTable?: pulumi.Input<string>;
    showDeviceImportExport?: pulumi.Input<string>;
    showFctManager?: pulumi.Input<string>;
    showHostname?: pulumi.Input<string>;
    showLogForwarding?: pulumi.Input<string>;
    unregDevOpt?: pulumi.Input<string>;
    webadminLanguage?: pulumi.Input<string>;
}
