// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FmupdateWebspamFgdsetting extends pulumi.CustomResource {
    /**
     * Get an existing FmupdateWebspamFgdsetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FmupdateWebspamFgdsettingState, opts?: pulumi.CustomResourceOptions): FmupdateWebspamFgdsetting {
        return new FmupdateWebspamFgdsetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortianalyzer:index/fmupdateWebspamFgdsetting:FmupdateWebspamFgdsetting';

    /**
     * Returns true if the given object is an instance of FmupdateWebspamFgdsetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FmupdateWebspamFgdsetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FmupdateWebspamFgdsetting.__pulumiType;
    }

    public readonly asCache!: pulumi.Output<number>;
    public readonly asLog!: pulumi.Output<string>;
    public readonly asPreload!: pulumi.Output<string>;
    public readonly av2Cache!: pulumi.Output<number>;
    public readonly av2Log!: pulumi.Output<string>;
    public readonly av2Preload!: pulumi.Output<string>;
    public readonly avCache!: pulumi.Output<number>;
    public readonly avLog!: pulumi.Output<string>;
    public readonly avPreload!: pulumi.Output<string>;
    public readonly eventlogQuery!: pulumi.Output<string>;
    public readonly fgdPullInterval!: pulumi.Output<number>;
    public readonly fqCache!: pulumi.Output<number>;
    public readonly fqLog!: pulumi.Output<string>;
    public readonly fqPreload!: pulumi.Output<string>;
    public readonly iotCache!: pulumi.Output<number>;
    public readonly iotLog!: pulumi.Output<string>;
    public readonly iotPreload!: pulumi.Output<string>;
    public readonly iotvPreload!: pulumi.Output<string>;
    public readonly linkdLog!: pulumi.Output<string>;
    public readonly maxClientWorker!: pulumi.Output<number | undefined>;
    public readonly maxLogQuota!: pulumi.Output<number>;
    public readonly maxUnratedSite!: pulumi.Output<number>;
    public readonly restrictAs1Dbver!: pulumi.Output<string | undefined>;
    public readonly restrictAs2Dbver!: pulumi.Output<string | undefined>;
    public readonly restrictAs4Dbver!: pulumi.Output<string | undefined>;
    public readonly restrictAv2Dbver!: pulumi.Output<string | undefined>;
    public readonly restrictAvDbver!: pulumi.Output<string | undefined>;
    public readonly restrictFqDbver!: pulumi.Output<string | undefined>;
    public readonly restrictIotsDbver!: pulumi.Output<string | undefined>;
    public readonly restrictWfDbver!: pulumi.Output<string | undefined>;
    public readonly serverOverride!: pulumi.Output<outputs.FmupdateWebspamFgdsettingServerOverride | undefined>;
    public readonly statLog!: pulumi.Output<string>;
    public readonly statLogInterval!: pulumi.Output<number>;
    public readonly statSyncInterval!: pulumi.Output<number>;
    public readonly updateInterval!: pulumi.Output<number>;
    public readonly updateLog!: pulumi.Output<string>;
    public readonly wfCache!: pulumi.Output<number>;
    public readonly wfDnCacheExpireTime!: pulumi.Output<number>;
    public readonly wfDnCacheMaxNumber!: pulumi.Output<number>;
    public readonly wfLog!: pulumi.Output<string>;
    public readonly wfPreload!: pulumi.Output<string>;

    /**
     * Create a FmupdateWebspamFgdsetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FmupdateWebspamFgdsettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FmupdateWebspamFgdsettingArgs | FmupdateWebspamFgdsettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FmupdateWebspamFgdsettingState | undefined;
            resourceInputs["asCache"] = state ? state.asCache : undefined;
            resourceInputs["asLog"] = state ? state.asLog : undefined;
            resourceInputs["asPreload"] = state ? state.asPreload : undefined;
            resourceInputs["av2Cache"] = state ? state.av2Cache : undefined;
            resourceInputs["av2Log"] = state ? state.av2Log : undefined;
            resourceInputs["av2Preload"] = state ? state.av2Preload : undefined;
            resourceInputs["avCache"] = state ? state.avCache : undefined;
            resourceInputs["avLog"] = state ? state.avLog : undefined;
            resourceInputs["avPreload"] = state ? state.avPreload : undefined;
            resourceInputs["eventlogQuery"] = state ? state.eventlogQuery : undefined;
            resourceInputs["fgdPullInterval"] = state ? state.fgdPullInterval : undefined;
            resourceInputs["fqCache"] = state ? state.fqCache : undefined;
            resourceInputs["fqLog"] = state ? state.fqLog : undefined;
            resourceInputs["fqPreload"] = state ? state.fqPreload : undefined;
            resourceInputs["iotCache"] = state ? state.iotCache : undefined;
            resourceInputs["iotLog"] = state ? state.iotLog : undefined;
            resourceInputs["iotPreload"] = state ? state.iotPreload : undefined;
            resourceInputs["iotvPreload"] = state ? state.iotvPreload : undefined;
            resourceInputs["linkdLog"] = state ? state.linkdLog : undefined;
            resourceInputs["maxClientWorker"] = state ? state.maxClientWorker : undefined;
            resourceInputs["maxLogQuota"] = state ? state.maxLogQuota : undefined;
            resourceInputs["maxUnratedSite"] = state ? state.maxUnratedSite : undefined;
            resourceInputs["restrictAs1Dbver"] = state ? state.restrictAs1Dbver : undefined;
            resourceInputs["restrictAs2Dbver"] = state ? state.restrictAs2Dbver : undefined;
            resourceInputs["restrictAs4Dbver"] = state ? state.restrictAs4Dbver : undefined;
            resourceInputs["restrictAv2Dbver"] = state ? state.restrictAv2Dbver : undefined;
            resourceInputs["restrictAvDbver"] = state ? state.restrictAvDbver : undefined;
            resourceInputs["restrictFqDbver"] = state ? state.restrictFqDbver : undefined;
            resourceInputs["restrictIotsDbver"] = state ? state.restrictIotsDbver : undefined;
            resourceInputs["restrictWfDbver"] = state ? state.restrictWfDbver : undefined;
            resourceInputs["serverOverride"] = state ? state.serverOverride : undefined;
            resourceInputs["statLog"] = state ? state.statLog : undefined;
            resourceInputs["statLogInterval"] = state ? state.statLogInterval : undefined;
            resourceInputs["statSyncInterval"] = state ? state.statSyncInterval : undefined;
            resourceInputs["updateInterval"] = state ? state.updateInterval : undefined;
            resourceInputs["updateLog"] = state ? state.updateLog : undefined;
            resourceInputs["wfCache"] = state ? state.wfCache : undefined;
            resourceInputs["wfDnCacheExpireTime"] = state ? state.wfDnCacheExpireTime : undefined;
            resourceInputs["wfDnCacheMaxNumber"] = state ? state.wfDnCacheMaxNumber : undefined;
            resourceInputs["wfLog"] = state ? state.wfLog : undefined;
            resourceInputs["wfPreload"] = state ? state.wfPreload : undefined;
        } else {
            const args = argsOrState as FmupdateWebspamFgdsettingArgs | undefined;
            resourceInputs["asCache"] = args ? args.asCache : undefined;
            resourceInputs["asLog"] = args ? args.asLog : undefined;
            resourceInputs["asPreload"] = args ? args.asPreload : undefined;
            resourceInputs["av2Cache"] = args ? args.av2Cache : undefined;
            resourceInputs["av2Log"] = args ? args.av2Log : undefined;
            resourceInputs["av2Preload"] = args ? args.av2Preload : undefined;
            resourceInputs["avCache"] = args ? args.avCache : undefined;
            resourceInputs["avLog"] = args ? args.avLog : undefined;
            resourceInputs["avPreload"] = args ? args.avPreload : undefined;
            resourceInputs["eventlogQuery"] = args ? args.eventlogQuery : undefined;
            resourceInputs["fgdPullInterval"] = args ? args.fgdPullInterval : undefined;
            resourceInputs["fqCache"] = args ? args.fqCache : undefined;
            resourceInputs["fqLog"] = args ? args.fqLog : undefined;
            resourceInputs["fqPreload"] = args ? args.fqPreload : undefined;
            resourceInputs["iotCache"] = args ? args.iotCache : undefined;
            resourceInputs["iotLog"] = args ? args.iotLog : undefined;
            resourceInputs["iotPreload"] = args ? args.iotPreload : undefined;
            resourceInputs["iotvPreload"] = args ? args.iotvPreload : undefined;
            resourceInputs["linkdLog"] = args ? args.linkdLog : undefined;
            resourceInputs["maxClientWorker"] = args ? args.maxClientWorker : undefined;
            resourceInputs["maxLogQuota"] = args ? args.maxLogQuota : undefined;
            resourceInputs["maxUnratedSite"] = args ? args.maxUnratedSite : undefined;
            resourceInputs["restrictAs1Dbver"] = args ? args.restrictAs1Dbver : undefined;
            resourceInputs["restrictAs2Dbver"] = args ? args.restrictAs2Dbver : undefined;
            resourceInputs["restrictAs4Dbver"] = args ? args.restrictAs4Dbver : undefined;
            resourceInputs["restrictAv2Dbver"] = args ? args.restrictAv2Dbver : undefined;
            resourceInputs["restrictAvDbver"] = args ? args.restrictAvDbver : undefined;
            resourceInputs["restrictFqDbver"] = args ? args.restrictFqDbver : undefined;
            resourceInputs["restrictIotsDbver"] = args ? args.restrictIotsDbver : undefined;
            resourceInputs["restrictWfDbver"] = args ? args.restrictWfDbver : undefined;
            resourceInputs["serverOverride"] = args ? args.serverOverride : undefined;
            resourceInputs["statLog"] = args ? args.statLog : undefined;
            resourceInputs["statLogInterval"] = args ? args.statLogInterval : undefined;
            resourceInputs["statSyncInterval"] = args ? args.statSyncInterval : undefined;
            resourceInputs["updateInterval"] = args ? args.updateInterval : undefined;
            resourceInputs["updateLog"] = args ? args.updateLog : undefined;
            resourceInputs["wfCache"] = args ? args.wfCache : undefined;
            resourceInputs["wfDnCacheExpireTime"] = args ? args.wfDnCacheExpireTime : undefined;
            resourceInputs["wfDnCacheMaxNumber"] = args ? args.wfDnCacheMaxNumber : undefined;
            resourceInputs["wfLog"] = args ? args.wfLog : undefined;
            resourceInputs["wfPreload"] = args ? args.wfPreload : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FmupdateWebspamFgdsetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FmupdateWebspamFgdsetting resources.
 */
export interface FmupdateWebspamFgdsettingState {
    asCache?: pulumi.Input<number>;
    asLog?: pulumi.Input<string>;
    asPreload?: pulumi.Input<string>;
    av2Cache?: pulumi.Input<number>;
    av2Log?: pulumi.Input<string>;
    av2Preload?: pulumi.Input<string>;
    avCache?: pulumi.Input<number>;
    avLog?: pulumi.Input<string>;
    avPreload?: pulumi.Input<string>;
    eventlogQuery?: pulumi.Input<string>;
    fgdPullInterval?: pulumi.Input<number>;
    fqCache?: pulumi.Input<number>;
    fqLog?: pulumi.Input<string>;
    fqPreload?: pulumi.Input<string>;
    iotCache?: pulumi.Input<number>;
    iotLog?: pulumi.Input<string>;
    iotPreload?: pulumi.Input<string>;
    iotvPreload?: pulumi.Input<string>;
    linkdLog?: pulumi.Input<string>;
    maxClientWorker?: pulumi.Input<number>;
    maxLogQuota?: pulumi.Input<number>;
    maxUnratedSite?: pulumi.Input<number>;
    restrictAs1Dbver?: pulumi.Input<string>;
    restrictAs2Dbver?: pulumi.Input<string>;
    restrictAs4Dbver?: pulumi.Input<string>;
    restrictAv2Dbver?: pulumi.Input<string>;
    restrictAvDbver?: pulumi.Input<string>;
    restrictFqDbver?: pulumi.Input<string>;
    restrictIotsDbver?: pulumi.Input<string>;
    restrictWfDbver?: pulumi.Input<string>;
    serverOverride?: pulumi.Input<inputs.FmupdateWebspamFgdsettingServerOverride>;
    statLog?: pulumi.Input<string>;
    statLogInterval?: pulumi.Input<number>;
    statSyncInterval?: pulumi.Input<number>;
    updateInterval?: pulumi.Input<number>;
    updateLog?: pulumi.Input<string>;
    wfCache?: pulumi.Input<number>;
    wfDnCacheExpireTime?: pulumi.Input<number>;
    wfDnCacheMaxNumber?: pulumi.Input<number>;
    wfLog?: pulumi.Input<string>;
    wfPreload?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FmupdateWebspamFgdsetting resource.
 */
export interface FmupdateWebspamFgdsettingArgs {
    asCache?: pulumi.Input<number>;
    asLog?: pulumi.Input<string>;
    asPreload?: pulumi.Input<string>;
    av2Cache?: pulumi.Input<number>;
    av2Log?: pulumi.Input<string>;
    av2Preload?: pulumi.Input<string>;
    avCache?: pulumi.Input<number>;
    avLog?: pulumi.Input<string>;
    avPreload?: pulumi.Input<string>;
    eventlogQuery?: pulumi.Input<string>;
    fgdPullInterval?: pulumi.Input<number>;
    fqCache?: pulumi.Input<number>;
    fqLog?: pulumi.Input<string>;
    fqPreload?: pulumi.Input<string>;
    iotCache?: pulumi.Input<number>;
    iotLog?: pulumi.Input<string>;
    iotPreload?: pulumi.Input<string>;
    iotvPreload?: pulumi.Input<string>;
    linkdLog?: pulumi.Input<string>;
    maxClientWorker?: pulumi.Input<number>;
    maxLogQuota?: pulumi.Input<number>;
    maxUnratedSite?: pulumi.Input<number>;
    restrictAs1Dbver?: pulumi.Input<string>;
    restrictAs2Dbver?: pulumi.Input<string>;
    restrictAs4Dbver?: pulumi.Input<string>;
    restrictAv2Dbver?: pulumi.Input<string>;
    restrictAvDbver?: pulumi.Input<string>;
    restrictFqDbver?: pulumi.Input<string>;
    restrictIotsDbver?: pulumi.Input<string>;
    restrictWfDbver?: pulumi.Input<string>;
    serverOverride?: pulumi.Input<inputs.FmupdateWebspamFgdsettingServerOverride>;
    statLog?: pulumi.Input<string>;
    statLogInterval?: pulumi.Input<number>;
    statSyncInterval?: pulumi.Input<number>;
    updateInterval?: pulumi.Input<number>;
    updateLog?: pulumi.Input<string>;
    wfCache?: pulumi.Input<number>;
    wfDnCacheExpireTime?: pulumi.Input<number>;
    wfDnCacheMaxNumber?: pulumi.Input<number>;
    wfLog?: pulumi.Input<string>;
    wfPreload?: pulumi.Input<string>;
}
