// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DvmCmdAddDeviceArgs, DvmCmdAddDeviceState } from "./dvmCmdAddDevice";
export type DvmCmdAddDevice = import("./dvmCmdAddDevice").DvmCmdAddDevice;
export const DvmCmdAddDevice: typeof import("./dvmCmdAddDevice").DvmCmdAddDevice = null as any;
utilities.lazyLoad(exports, ["DvmCmdAddDevice"], () => require("./dvmCmdAddDevice"));

export { DvmCmdDelDeviceArgs, DvmCmdDelDeviceState } from "./dvmCmdDelDevice";
export type DvmCmdDelDevice = import("./dvmCmdDelDevice").DvmCmdDelDevice;
export const DvmCmdDelDevice: typeof import("./dvmCmdDelDevice").DvmCmdDelDevice = null as any;
utilities.lazyLoad(exports, ["DvmCmdDelDevice"], () => require("./dvmCmdDelDevice"));

export { DvmdbAdomArgs, DvmdbAdomState } from "./dvmdbAdom";
export type DvmdbAdom = import("./dvmdbAdom").DvmdbAdom;
export const DvmdbAdom: typeof import("./dvmdbAdom").DvmdbAdom = null as any;
utilities.lazyLoad(exports, ["DvmdbAdom"], () => require("./dvmdbAdom"));

export { DvmdbGroupArgs, DvmdbGroupState } from "./dvmdbGroup";
export type DvmdbGroup = import("./dvmdbGroup").DvmdbGroup;
export const DvmdbGroup: typeof import("./dvmdbGroup").DvmdbGroup = null as any;
utilities.lazyLoad(exports, ["DvmdbGroup"], () => require("./dvmdbGroup"));

export { FmupdateAnalyzerVirusreportArgs, FmupdateAnalyzerVirusreportState } from "./fmupdateAnalyzerVirusreport";
export type FmupdateAnalyzerVirusreport = import("./fmupdateAnalyzerVirusreport").FmupdateAnalyzerVirusreport;
export const FmupdateAnalyzerVirusreport: typeof import("./fmupdateAnalyzerVirusreport").FmupdateAnalyzerVirusreport = null as any;
utilities.lazyLoad(exports, ["FmupdateAnalyzerVirusreport"], () => require("./fmupdateAnalyzerVirusreport"));

export { FmupdateAvipsAdvancedlogArgs, FmupdateAvipsAdvancedlogState } from "./fmupdateAvipsAdvancedlog";
export type FmupdateAvipsAdvancedlog = import("./fmupdateAvipsAdvancedlog").FmupdateAvipsAdvancedlog;
export const FmupdateAvipsAdvancedlog: typeof import("./fmupdateAvipsAdvancedlog").FmupdateAvipsAdvancedlog = null as any;
utilities.lazyLoad(exports, ["FmupdateAvipsAdvancedlog"], () => require("./fmupdateAvipsAdvancedlog"));

export { FmupdateAvipsWebproxyArgs, FmupdateAvipsWebproxyState } from "./fmupdateAvipsWebproxy";
export type FmupdateAvipsWebproxy = import("./fmupdateAvipsWebproxy").FmupdateAvipsWebproxy;
export const FmupdateAvipsWebproxy: typeof import("./fmupdateAvipsWebproxy").FmupdateAvipsWebproxy = null as any;
utilities.lazyLoad(exports, ["FmupdateAvipsWebproxy"], () => require("./fmupdateAvipsWebproxy"));

export { FmupdateCustomurllistArgs, FmupdateCustomurllistState } from "./fmupdateCustomurllist";
export type FmupdateCustomurllist = import("./fmupdateCustomurllist").FmupdateCustomurllist;
export const FmupdateCustomurllist: typeof import("./fmupdateCustomurllist").FmupdateCustomurllist = null as any;
utilities.lazyLoad(exports, ["FmupdateCustomurllist"], () => require("./fmupdateCustomurllist"));

export { FmupdateDiskquotaArgs, FmupdateDiskquotaState } from "./fmupdateDiskquota";
export type FmupdateDiskquota = import("./fmupdateDiskquota").FmupdateDiskquota;
export const FmupdateDiskquota: typeof import("./fmupdateDiskquota").FmupdateDiskquota = null as any;
utilities.lazyLoad(exports, ["FmupdateDiskquota"], () => require("./fmupdateDiskquota"));

export { FmupdateFctservicesArgs, FmupdateFctservicesState } from "./fmupdateFctservices";
export type FmupdateFctservices = import("./fmupdateFctservices").FmupdateFctservices;
export const FmupdateFctservices: typeof import("./fmupdateFctservices").FmupdateFctservices = null as any;
utilities.lazyLoad(exports, ["FmupdateFctservices"], () => require("./fmupdateFctservices"));

export { FmupdateFdssettingArgs, FmupdateFdssettingState } from "./fmupdateFdssetting";
export type FmupdateFdssetting = import("./fmupdateFdssetting").FmupdateFdssetting;
export const FmupdateFdssetting: typeof import("./fmupdateFdssetting").FmupdateFdssetting = null as any;
utilities.lazyLoad(exports, ["FmupdateFdssetting"], () => require("./fmupdateFdssetting"));

export { FmupdateFdssettingPushoverrideArgs, FmupdateFdssettingPushoverrideState } from "./fmupdateFdssettingPushoverride";
export type FmupdateFdssettingPushoverride = import("./fmupdateFdssettingPushoverride").FmupdateFdssettingPushoverride;
export const FmupdateFdssettingPushoverride: typeof import("./fmupdateFdssettingPushoverride").FmupdateFdssettingPushoverride = null as any;
utilities.lazyLoad(exports, ["FmupdateFdssettingPushoverride"], () => require("./fmupdateFdssettingPushoverride"));

export { FmupdateFdssettingPushoverridetoclientArgs, FmupdateFdssettingPushoverridetoclientState } from "./fmupdateFdssettingPushoverridetoclient";
export type FmupdateFdssettingPushoverridetoclient = import("./fmupdateFdssettingPushoverridetoclient").FmupdateFdssettingPushoverridetoclient;
export const FmupdateFdssettingPushoverridetoclient: typeof import("./fmupdateFdssettingPushoverridetoclient").FmupdateFdssettingPushoverridetoclient = null as any;
utilities.lazyLoad(exports, ["FmupdateFdssettingPushoverridetoclient"], () => require("./fmupdateFdssettingPushoverridetoclient"));

export { FmupdateFdssettingServeroverrideArgs, FmupdateFdssettingServeroverrideState } from "./fmupdateFdssettingServeroverride";
export type FmupdateFdssettingServeroverride = import("./fmupdateFdssettingServeroverride").FmupdateFdssettingServeroverride;
export const FmupdateFdssettingServeroverride: typeof import("./fmupdateFdssettingServeroverride").FmupdateFdssettingServeroverride = null as any;
utilities.lazyLoad(exports, ["FmupdateFdssettingServeroverride"], () => require("./fmupdateFdssettingServeroverride"));

export { FmupdateFdssettingUpdatescheduleArgs, FmupdateFdssettingUpdatescheduleState } from "./fmupdateFdssettingUpdateschedule";
export type FmupdateFdssettingUpdateschedule = import("./fmupdateFdssettingUpdateschedule").FmupdateFdssettingUpdateschedule;
export const FmupdateFdssettingUpdateschedule: typeof import("./fmupdateFdssettingUpdateschedule").FmupdateFdssettingUpdateschedule = null as any;
utilities.lazyLoad(exports, ["FmupdateFdssettingUpdateschedule"], () => require("./fmupdateFdssettingUpdateschedule"));

export { FmupdateFwmsettingArgs, FmupdateFwmsettingState } from "./fmupdateFwmsetting";
export type FmupdateFwmsetting = import("./fmupdateFwmsetting").FmupdateFwmsetting;
export const FmupdateFwmsetting: typeof import("./fmupdateFwmsetting").FmupdateFwmsetting = null as any;
utilities.lazyLoad(exports, ["FmupdateFwmsetting"], () => require("./fmupdateFwmsetting"));

export { FmupdateFwmsettingUpgradetimeoutArgs, FmupdateFwmsettingUpgradetimeoutState } from "./fmupdateFwmsettingUpgradetimeout";
export type FmupdateFwmsettingUpgradetimeout = import("./fmupdateFwmsettingUpgradetimeout").FmupdateFwmsettingUpgradetimeout;
export const FmupdateFwmsettingUpgradetimeout: typeof import("./fmupdateFwmsettingUpgradetimeout").FmupdateFwmsettingUpgradetimeout = null as any;
utilities.lazyLoad(exports, ["FmupdateFwmsettingUpgradetimeout"], () => require("./fmupdateFwmsettingUpgradetimeout"));

export { FmupdateMultilayerArgs, FmupdateMultilayerState } from "./fmupdateMultilayer";
export type FmupdateMultilayer = import("./fmupdateMultilayer").FmupdateMultilayer;
export const FmupdateMultilayer: typeof import("./fmupdateMultilayer").FmupdateMultilayer = null as any;
utilities.lazyLoad(exports, ["FmupdateMultilayer"], () => require("./fmupdateMultilayer"));

export { FmupdatePublicnetworkArgs, FmupdatePublicnetworkState } from "./fmupdatePublicnetwork";
export type FmupdatePublicnetwork = import("./fmupdatePublicnetwork").FmupdatePublicnetwork;
export const FmupdatePublicnetwork: typeof import("./fmupdatePublicnetwork").FmupdatePublicnetwork = null as any;
utilities.lazyLoad(exports, ["FmupdatePublicnetwork"], () => require("./fmupdatePublicnetwork"));

export { FmupdateServeraccessprioritiesArgs, FmupdateServeraccessprioritiesState } from "./fmupdateServeraccesspriorities";
export type FmupdateServeraccesspriorities = import("./fmupdateServeraccesspriorities").FmupdateServeraccesspriorities;
export const FmupdateServeraccesspriorities: typeof import("./fmupdateServeraccesspriorities").FmupdateServeraccesspriorities = null as any;
utilities.lazyLoad(exports, ["FmupdateServeraccesspriorities"], () => require("./fmupdateServeraccesspriorities"));

export { FmupdateServeroverridestatusArgs, FmupdateServeroverridestatusState } from "./fmupdateServeroverridestatus";
export type FmupdateServeroverridestatus = import("./fmupdateServeroverridestatus").FmupdateServeroverridestatus;
export const FmupdateServeroverridestatus: typeof import("./fmupdateServeroverridestatus").FmupdateServeroverridestatus = null as any;
utilities.lazyLoad(exports, ["FmupdateServeroverridestatus"], () => require("./fmupdateServeroverridestatus"));

export { FmupdateServiceArgs, FmupdateServiceState } from "./fmupdateService";
export type FmupdateService = import("./fmupdateService").FmupdateService;
export const FmupdateService: typeof import("./fmupdateService").FmupdateService = null as any;
utilities.lazyLoad(exports, ["FmupdateService"], () => require("./fmupdateService"));

export { FmupdateWebspamFgdsettingArgs, FmupdateWebspamFgdsettingState } from "./fmupdateWebspamFgdsetting";
export type FmupdateWebspamFgdsetting = import("./fmupdateWebspamFgdsetting").FmupdateWebspamFgdsetting;
export const FmupdateWebspamFgdsetting: typeof import("./fmupdateWebspamFgdsetting").FmupdateWebspamFgdsetting = null as any;
utilities.lazyLoad(exports, ["FmupdateWebspamFgdsetting"], () => require("./fmupdateWebspamFgdsetting"));

export { FmupdateWebspamWebproxyArgs, FmupdateWebspamWebproxyState } from "./fmupdateWebspamWebproxy";
export type FmupdateWebspamWebproxy = import("./fmupdateWebspamWebproxy").FmupdateWebspamWebproxy;
export const FmupdateWebspamWebproxy: typeof import("./fmupdateWebspamWebproxy").FmupdateWebspamWebproxy = null as any;
utilities.lazyLoad(exports, ["FmupdateWebspamWebproxy"], () => require("./fmupdateWebspamWebproxy"));

export { JsonGenericApiArgs, JsonGenericApiState } from "./jsonGenericApi";
export type JsonGenericApi = import("./jsonGenericApi").JsonGenericApi;
export const JsonGenericApi: typeof import("./jsonGenericApi").JsonGenericApi = null as any;
utilities.lazyLoad(exports, ["JsonGenericApi"], () => require("./jsonGenericApi"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SystemAdminGroupArgs, SystemAdminGroupState } from "./systemAdminGroup";
export type SystemAdminGroup = import("./systemAdminGroup").SystemAdminGroup;
export const SystemAdminGroup: typeof import("./systemAdminGroup").SystemAdminGroup = null as any;
utilities.lazyLoad(exports, ["SystemAdminGroup"], () => require("./systemAdminGroup"));

export { SystemAdminLdapArgs, SystemAdminLdapState } from "./systemAdminLdap";
export type SystemAdminLdap = import("./systemAdminLdap").SystemAdminLdap;
export const SystemAdminLdap: typeof import("./systemAdminLdap").SystemAdminLdap = null as any;
utilities.lazyLoad(exports, ["SystemAdminLdap"], () => require("./systemAdminLdap"));

export { SystemAdminProfileArgs, SystemAdminProfileState } from "./systemAdminProfile";
export type SystemAdminProfile = import("./systemAdminProfile").SystemAdminProfile;
export const SystemAdminProfile: typeof import("./systemAdminProfile").SystemAdminProfile = null as any;
utilities.lazyLoad(exports, ["SystemAdminProfile"], () => require("./systemAdminProfile"));

export { SystemAdminRadiusArgs, SystemAdminRadiusState } from "./systemAdminRadius";
export type SystemAdminRadius = import("./systemAdminRadius").SystemAdminRadius;
export const SystemAdminRadius: typeof import("./systemAdminRadius").SystemAdminRadius = null as any;
utilities.lazyLoad(exports, ["SystemAdminRadius"], () => require("./systemAdminRadius"));

export { SystemAdminSettingArgs, SystemAdminSettingState } from "./systemAdminSetting";
export type SystemAdminSetting = import("./systemAdminSetting").SystemAdminSetting;
export const SystemAdminSetting: typeof import("./systemAdminSetting").SystemAdminSetting = null as any;
utilities.lazyLoad(exports, ["SystemAdminSetting"], () => require("./systemAdminSetting"));

export { SystemAdminTacacsArgs, SystemAdminTacacsState } from "./systemAdminTacacs";
export type SystemAdminTacacs = import("./systemAdminTacacs").SystemAdminTacacs;
export const SystemAdminTacacs: typeof import("./systemAdminTacacs").SystemAdminTacacs = null as any;
utilities.lazyLoad(exports, ["SystemAdminTacacs"], () => require("./systemAdminTacacs"));

export { SystemAdminUserArgs, SystemAdminUserState } from "./systemAdminUser";
export type SystemAdminUser = import("./systemAdminUser").SystemAdminUser;
export const SystemAdminUser: typeof import("./systemAdminUser").SystemAdminUser = null as any;
utilities.lazyLoad(exports, ["SystemAdminUser"], () => require("./systemAdminUser"));

export { SystemAlertconsoleArgs, SystemAlertconsoleState } from "./systemAlertconsole";
export type SystemAlertconsole = import("./systemAlertconsole").SystemAlertconsole;
export const SystemAlertconsole: typeof import("./systemAlertconsole").SystemAlertconsole = null as any;
utilities.lazyLoad(exports, ["SystemAlertconsole"], () => require("./systemAlertconsole"));

export { SystemAlertemailArgs, SystemAlertemailState } from "./systemAlertemail";
export type SystemAlertemail = import("./systemAlertemail").SystemAlertemail;
export const SystemAlertemail: typeof import("./systemAlertemail").SystemAlertemail = null as any;
utilities.lazyLoad(exports, ["SystemAlertemail"], () => require("./systemAlertemail"));

export { SystemAlerteventArgs, SystemAlerteventState } from "./systemAlertevent";
export type SystemAlertevent = import("./systemAlertevent").SystemAlertevent;
export const SystemAlertevent: typeof import("./systemAlertevent").SystemAlertevent = null as any;
utilities.lazyLoad(exports, ["SystemAlertevent"], () => require("./systemAlertevent"));

export { SystemAutodeleteArgs, SystemAutodeleteState } from "./systemAutodelete";
export type SystemAutodelete = import("./systemAutodelete").SystemAutodelete;
export const SystemAutodelete: typeof import("./systemAutodelete").SystemAutodelete = null as any;
utilities.lazyLoad(exports, ["SystemAutodelete"], () => require("./systemAutodelete"));

export { SystemAutodeleteDlpfilesautodeletionArgs, SystemAutodeleteDlpfilesautodeletionState } from "./systemAutodeleteDlpfilesautodeletion";
export type SystemAutodeleteDlpfilesautodeletion = import("./systemAutodeleteDlpfilesautodeletion").SystemAutodeleteDlpfilesautodeletion;
export const SystemAutodeleteDlpfilesautodeletion: typeof import("./systemAutodeleteDlpfilesautodeletion").SystemAutodeleteDlpfilesautodeletion = null as any;
utilities.lazyLoad(exports, ["SystemAutodeleteDlpfilesautodeletion"], () => require("./systemAutodeleteDlpfilesautodeletion"));

export { SystemAutodeleteLogautodeletionArgs, SystemAutodeleteLogautodeletionState } from "./systemAutodeleteLogautodeletion";
export type SystemAutodeleteLogautodeletion = import("./systemAutodeleteLogautodeletion").SystemAutodeleteLogautodeletion;
export const SystemAutodeleteLogautodeletion: typeof import("./systemAutodeleteLogautodeletion").SystemAutodeleteLogautodeletion = null as any;
utilities.lazyLoad(exports, ["SystemAutodeleteLogautodeletion"], () => require("./systemAutodeleteLogautodeletion"));

export { SystemAutodeleteQuarantinefilesautodeletionArgs, SystemAutodeleteQuarantinefilesautodeletionState } from "./systemAutodeleteQuarantinefilesautodeletion";
export type SystemAutodeleteQuarantinefilesautodeletion = import("./systemAutodeleteQuarantinefilesautodeletion").SystemAutodeleteQuarantinefilesautodeletion;
export const SystemAutodeleteQuarantinefilesautodeletion: typeof import("./systemAutodeleteQuarantinefilesautodeletion").SystemAutodeleteQuarantinefilesautodeletion = null as any;
utilities.lazyLoad(exports, ["SystemAutodeleteQuarantinefilesautodeletion"], () => require("./systemAutodeleteQuarantinefilesautodeletion"));

export { SystemAutodeleteReportautodeletionArgs, SystemAutodeleteReportautodeletionState } from "./systemAutodeleteReportautodeletion";
export type SystemAutodeleteReportautodeletion = import("./systemAutodeleteReportautodeletion").SystemAutodeleteReportautodeletion;
export const SystemAutodeleteReportautodeletion: typeof import("./systemAutodeleteReportautodeletion").SystemAutodeleteReportautodeletion = null as any;
utilities.lazyLoad(exports, ["SystemAutodeleteReportautodeletion"], () => require("./systemAutodeleteReportautodeletion"));

export { SystemBackupAllsettingsArgs, SystemBackupAllsettingsState } from "./systemBackupAllsettings";
export type SystemBackupAllsettings = import("./systemBackupAllsettings").SystemBackupAllsettings;
export const SystemBackupAllsettings: typeof import("./systemBackupAllsettings").SystemBackupAllsettings = null as any;
utilities.lazyLoad(exports, ["SystemBackupAllsettings"], () => require("./systemBackupAllsettings"));

export { SystemCentralmanagementArgs, SystemCentralmanagementState } from "./systemCentralmanagement";
export type SystemCentralmanagement = import("./systemCentralmanagement").SystemCentralmanagement;
export const SystemCentralmanagement: typeof import("./systemCentralmanagement").SystemCentralmanagement = null as any;
utilities.lazyLoad(exports, ["SystemCentralmanagement"], () => require("./systemCentralmanagement"));

export { SystemCertificateCaArgs, SystemCertificateCaState } from "./systemCertificateCa";
export type SystemCertificateCa = import("./systemCertificateCa").SystemCertificateCa;
export const SystemCertificateCa: typeof import("./systemCertificateCa").SystemCertificateCa = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCa"], () => require("./systemCertificateCa"));

export { SystemCertificateCrlArgs, SystemCertificateCrlState } from "./systemCertificateCrl";
export type SystemCertificateCrl = import("./systemCertificateCrl").SystemCertificateCrl;
export const SystemCertificateCrl: typeof import("./systemCertificateCrl").SystemCertificateCrl = null as any;
utilities.lazyLoad(exports, ["SystemCertificateCrl"], () => require("./systemCertificateCrl"));

export { SystemCertificateLocalArgs, SystemCertificateLocalState } from "./systemCertificateLocal";
export type SystemCertificateLocal = import("./systemCertificateLocal").SystemCertificateLocal;
export const SystemCertificateLocal: typeof import("./systemCertificateLocal").SystemCertificateLocal = null as any;
utilities.lazyLoad(exports, ["SystemCertificateLocal"], () => require("./systemCertificateLocal"));

export { SystemCertificateOftpArgs, SystemCertificateOftpState } from "./systemCertificateOftp";
export type SystemCertificateOftp = import("./systemCertificateOftp").SystemCertificateOftp;
export const SystemCertificateOftp: typeof import("./systemCertificateOftp").SystemCertificateOftp = null as any;
utilities.lazyLoad(exports, ["SystemCertificateOftp"], () => require("./systemCertificateOftp"));

export { SystemCertificateRemoteArgs, SystemCertificateRemoteState } from "./systemCertificateRemote";
export type SystemCertificateRemote = import("./systemCertificateRemote").SystemCertificateRemote;
export const SystemCertificateRemote: typeof import("./systemCertificateRemote").SystemCertificateRemote = null as any;
utilities.lazyLoad(exports, ["SystemCertificateRemote"], () => require("./systemCertificateRemote"));

export { SystemCertificateSshArgs, SystemCertificateSshState } from "./systemCertificateSsh";
export type SystemCertificateSsh = import("./systemCertificateSsh").SystemCertificateSsh;
export const SystemCertificateSsh: typeof import("./systemCertificateSsh").SystemCertificateSsh = null as any;
utilities.lazyLoad(exports, ["SystemCertificateSsh"], () => require("./systemCertificateSsh"));

export { SystemConnectorArgs, SystemConnectorState } from "./systemConnector";
export type SystemConnector = import("./systemConnector").SystemConnector;
export const SystemConnector: typeof import("./systemConnector").SystemConnector = null as any;
utilities.lazyLoad(exports, ["SystemConnector"], () => require("./systemConnector"));

export { SystemCsfArgs, SystemCsfState } from "./systemCsf";
export type SystemCsf = import("./systemCsf").SystemCsf;
export const SystemCsf: typeof import("./systemCsf").SystemCsf = null as any;
utilities.lazyLoad(exports, ["SystemCsf"], () => require("./systemCsf"));

export { SystemCsfFabricconnectorArgs, SystemCsfFabricconnectorState } from "./systemCsfFabricconnector";
export type SystemCsfFabricconnector = import("./systemCsfFabricconnector").SystemCsfFabricconnector;
export const SystemCsfFabricconnector: typeof import("./systemCsfFabricconnector").SystemCsfFabricconnector = null as any;
utilities.lazyLoad(exports, ["SystemCsfFabricconnector"], () => require("./systemCsfFabricconnector"));

export { SystemCsfTrustedlistArgs, SystemCsfTrustedlistState } from "./systemCsfTrustedlist";
export type SystemCsfTrustedlist = import("./systemCsfTrustedlist").SystemCsfTrustedlist;
export const SystemCsfTrustedlist: typeof import("./systemCsfTrustedlist").SystemCsfTrustedlist = null as any;
utilities.lazyLoad(exports, ["SystemCsfTrustedlist"], () => require("./systemCsfTrustedlist"));

export { SystemDnsArgs, SystemDnsState } from "./systemDns";
export type SystemDns = import("./systemDns").SystemDns;
export const SystemDns: typeof import("./systemDns").SystemDns = null as any;
utilities.lazyLoad(exports, ["SystemDns"], () => require("./systemDns"));

export { SystemDockerArgs, SystemDockerState } from "./systemDocker";
export type SystemDocker = import("./systemDocker").SystemDocker;
export const SystemDocker: typeof import("./systemDocker").SystemDocker = null as any;
utilities.lazyLoad(exports, ["SystemDocker"], () => require("./systemDocker"));

export { SystemFipsArgs, SystemFipsState } from "./systemFips";
export type SystemFips = import("./systemFips").SystemFips;
export const SystemFips: typeof import("./systemFips").SystemFips = null as any;
utilities.lazyLoad(exports, ["SystemFips"], () => require("./systemFips"));

export { SystemFortiviewAutocacheArgs, SystemFortiviewAutocacheState } from "./systemFortiviewAutocache";
export type SystemFortiviewAutocache = import("./systemFortiviewAutocache").SystemFortiviewAutocache;
export const SystemFortiviewAutocache: typeof import("./systemFortiviewAutocache").SystemFortiviewAutocache = null as any;
utilities.lazyLoad(exports, ["SystemFortiviewAutocache"], () => require("./systemFortiviewAutocache"));

export { SystemFortiviewSettingArgs, SystemFortiviewSettingState } from "./systemFortiviewSetting";
export type SystemFortiviewSetting = import("./systemFortiviewSetting").SystemFortiviewSetting;
export const SystemFortiviewSetting: typeof import("./systemFortiviewSetting").SystemFortiviewSetting = null as any;
utilities.lazyLoad(exports, ["SystemFortiviewSetting"], () => require("./systemFortiviewSetting"));

export { SystemGlobalArgs, SystemGlobalState } from "./systemGlobal";
export type SystemGlobal = import("./systemGlobal").SystemGlobal;
export const SystemGlobal: typeof import("./systemGlobal").SystemGlobal = null as any;
utilities.lazyLoad(exports, ["SystemGlobal"], () => require("./systemGlobal"));

export { SystemGlobalSslciphersuitesArgs, SystemGlobalSslciphersuitesState } from "./systemGlobalSslciphersuites";
export type SystemGlobalSslciphersuites = import("./systemGlobalSslciphersuites").SystemGlobalSslciphersuites;
export const SystemGlobalSslciphersuites: typeof import("./systemGlobalSslciphersuites").SystemGlobalSslciphersuites = null as any;
utilities.lazyLoad(exports, ["SystemGlobalSslciphersuites"], () => require("./systemGlobalSslciphersuites"));

export { SystemGuiactArgs, SystemGuiactState } from "./systemGuiact";
export type SystemGuiact = import("./systemGuiact").SystemGuiact;
export const SystemGuiact: typeof import("./systemGuiact").SystemGuiact = null as any;
utilities.lazyLoad(exports, ["SystemGuiact"], () => require("./systemGuiact"));

export { SystemHaArgs, SystemHaState } from "./systemHa";
export type SystemHa = import("./systemHa").SystemHa;
export const SystemHa: typeof import("./systemHa").SystemHa = null as any;
utilities.lazyLoad(exports, ["SystemHa"], () => require("./systemHa"));

export { SystemHaPeerArgs, SystemHaPeerState } from "./systemHaPeer";
export type SystemHaPeer = import("./systemHaPeer").SystemHaPeer;
export const SystemHaPeer: typeof import("./systemHaPeer").SystemHaPeer = null as any;
utilities.lazyLoad(exports, ["SystemHaPeer"], () => require("./systemHaPeer"));

export { SystemHaPrivatepeerArgs, SystemHaPrivatepeerState } from "./systemHaPrivatepeer";
export type SystemHaPrivatepeer = import("./systemHaPrivatepeer").SystemHaPrivatepeer;
export const SystemHaPrivatepeer: typeof import("./systemHaPrivatepeer").SystemHaPrivatepeer = null as any;
utilities.lazyLoad(exports, ["SystemHaPrivatepeer"], () => require("./systemHaPrivatepeer"));

export { SystemHaVipArgs, SystemHaVipState } from "./systemHaVip";
export type SystemHaVip = import("./systemHaVip").SystemHaVip;
export const SystemHaVip: typeof import("./systemHaVip").SystemHaVip = null as any;
utilities.lazyLoad(exports, ["SystemHaVip"], () => require("./systemHaVip"));

export { SystemInterfaceArgs, SystemInterfaceState } from "./systemInterface";
export type SystemInterface = import("./systemInterface").SystemInterface;
export const SystemInterface: typeof import("./systemInterface").SystemInterface = null as any;
utilities.lazyLoad(exports, ["SystemInterface"], () => require("./systemInterface"));

export { SystemLocalinpolicyArgs, SystemLocalinpolicyState } from "./systemLocalinpolicy";
export type SystemLocalinpolicy = import("./systemLocalinpolicy").SystemLocalinpolicy;
export const SystemLocalinpolicy: typeof import("./systemLocalinpolicy").SystemLocalinpolicy = null as any;
utilities.lazyLoad(exports, ["SystemLocalinpolicy"], () => require("./systemLocalinpolicy"));

export { SystemLocalinpolicy6Args, SystemLocalinpolicy6State } from "./systemLocalinpolicy6";
export type SystemLocalinpolicy6 = import("./systemLocalinpolicy6").SystemLocalinpolicy6;
export const SystemLocalinpolicy6: typeof import("./systemLocalinpolicy6").SystemLocalinpolicy6 = null as any;
utilities.lazyLoad(exports, ["SystemLocalinpolicy6"], () => require("./systemLocalinpolicy6"));

export { SystemLocallogDiskFilterArgs, SystemLocallogDiskFilterState } from "./systemLocallogDiskFilter";
export type SystemLocallogDiskFilter = import("./systemLocallogDiskFilter").SystemLocallogDiskFilter;
export const SystemLocallogDiskFilter: typeof import("./systemLocallogDiskFilter").SystemLocallogDiskFilter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogDiskFilter"], () => require("./systemLocallogDiskFilter"));

export { SystemLocallogDiskSettingArgs, SystemLocallogDiskSettingState } from "./systemLocallogDiskSetting";
export type SystemLocallogDiskSetting = import("./systemLocallogDiskSetting").SystemLocallogDiskSetting;
export const SystemLocallogDiskSetting: typeof import("./systemLocallogDiskSetting").SystemLocallogDiskSetting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogDiskSetting"], () => require("./systemLocallogDiskSetting"));

export { SystemLocallogFortianalyzer2FilterArgs, SystemLocallogFortianalyzer2FilterState } from "./systemLocallogFortianalyzer2Filter";
export type SystemLocallogFortianalyzer2Filter = import("./systemLocallogFortianalyzer2Filter").SystemLocallogFortianalyzer2Filter;
export const SystemLocallogFortianalyzer2Filter: typeof import("./systemLocallogFortianalyzer2Filter").SystemLocallogFortianalyzer2Filter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogFortianalyzer2Filter"], () => require("./systemLocallogFortianalyzer2Filter"));

export { SystemLocallogFortianalyzer2SettingArgs, SystemLocallogFortianalyzer2SettingState } from "./systemLocallogFortianalyzer2Setting";
export type SystemLocallogFortianalyzer2Setting = import("./systemLocallogFortianalyzer2Setting").SystemLocallogFortianalyzer2Setting;
export const SystemLocallogFortianalyzer2Setting: typeof import("./systemLocallogFortianalyzer2Setting").SystemLocallogFortianalyzer2Setting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogFortianalyzer2Setting"], () => require("./systemLocallogFortianalyzer2Setting"));

export { SystemLocallogFortianalyzer3FilterArgs, SystemLocallogFortianalyzer3FilterState } from "./systemLocallogFortianalyzer3Filter";
export type SystemLocallogFortianalyzer3Filter = import("./systemLocallogFortianalyzer3Filter").SystemLocallogFortianalyzer3Filter;
export const SystemLocallogFortianalyzer3Filter: typeof import("./systemLocallogFortianalyzer3Filter").SystemLocallogFortianalyzer3Filter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogFortianalyzer3Filter"], () => require("./systemLocallogFortianalyzer3Filter"));

export { SystemLocallogFortianalyzer3SettingArgs, SystemLocallogFortianalyzer3SettingState } from "./systemLocallogFortianalyzer3Setting";
export type SystemLocallogFortianalyzer3Setting = import("./systemLocallogFortianalyzer3Setting").SystemLocallogFortianalyzer3Setting;
export const SystemLocallogFortianalyzer3Setting: typeof import("./systemLocallogFortianalyzer3Setting").SystemLocallogFortianalyzer3Setting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogFortianalyzer3Setting"], () => require("./systemLocallogFortianalyzer3Setting"));

export { SystemLocallogFortianalyzerFilterArgs, SystemLocallogFortianalyzerFilterState } from "./systemLocallogFortianalyzerFilter";
export type SystemLocallogFortianalyzerFilter = import("./systemLocallogFortianalyzerFilter").SystemLocallogFortianalyzerFilter;
export const SystemLocallogFortianalyzerFilter: typeof import("./systemLocallogFortianalyzerFilter").SystemLocallogFortianalyzerFilter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogFortianalyzerFilter"], () => require("./systemLocallogFortianalyzerFilter"));

export { SystemLocallogFortianalyzerSettingArgs, SystemLocallogFortianalyzerSettingState } from "./systemLocallogFortianalyzerSetting";
export type SystemLocallogFortianalyzerSetting = import("./systemLocallogFortianalyzerSetting").SystemLocallogFortianalyzerSetting;
export const SystemLocallogFortianalyzerSetting: typeof import("./systemLocallogFortianalyzerSetting").SystemLocallogFortianalyzerSetting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogFortianalyzerSetting"], () => require("./systemLocallogFortianalyzerSetting"));

export { SystemLocallogMemoryFilterArgs, SystemLocallogMemoryFilterState } from "./systemLocallogMemoryFilter";
export type SystemLocallogMemoryFilter = import("./systemLocallogMemoryFilter").SystemLocallogMemoryFilter;
export const SystemLocallogMemoryFilter: typeof import("./systemLocallogMemoryFilter").SystemLocallogMemoryFilter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogMemoryFilter"], () => require("./systemLocallogMemoryFilter"));

export { SystemLocallogMemorySettingArgs, SystemLocallogMemorySettingState } from "./systemLocallogMemorySetting";
export type SystemLocallogMemorySetting = import("./systemLocallogMemorySetting").SystemLocallogMemorySetting;
export const SystemLocallogMemorySetting: typeof import("./systemLocallogMemorySetting").SystemLocallogMemorySetting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogMemorySetting"], () => require("./systemLocallogMemorySetting"));

export { SystemLocallogSettingArgs, SystemLocallogSettingState } from "./systemLocallogSetting";
export type SystemLocallogSetting = import("./systemLocallogSetting").SystemLocallogSetting;
export const SystemLocallogSetting: typeof import("./systemLocallogSetting").SystemLocallogSetting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSetting"], () => require("./systemLocallogSetting"));

export { SystemLocallogSyslogd2FilterArgs, SystemLocallogSyslogd2FilterState } from "./systemLocallogSyslogd2Filter";
export type SystemLocallogSyslogd2Filter = import("./systemLocallogSyslogd2Filter").SystemLocallogSyslogd2Filter;
export const SystemLocallogSyslogd2Filter: typeof import("./systemLocallogSyslogd2Filter").SystemLocallogSyslogd2Filter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSyslogd2Filter"], () => require("./systemLocallogSyslogd2Filter"));

export { SystemLocallogSyslogd2SettingArgs, SystemLocallogSyslogd2SettingState } from "./systemLocallogSyslogd2Setting";
export type SystemLocallogSyslogd2Setting = import("./systemLocallogSyslogd2Setting").SystemLocallogSyslogd2Setting;
export const SystemLocallogSyslogd2Setting: typeof import("./systemLocallogSyslogd2Setting").SystemLocallogSyslogd2Setting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSyslogd2Setting"], () => require("./systemLocallogSyslogd2Setting"));

export { SystemLocallogSyslogd3FilterArgs, SystemLocallogSyslogd3FilterState } from "./systemLocallogSyslogd3Filter";
export type SystemLocallogSyslogd3Filter = import("./systemLocallogSyslogd3Filter").SystemLocallogSyslogd3Filter;
export const SystemLocallogSyslogd3Filter: typeof import("./systemLocallogSyslogd3Filter").SystemLocallogSyslogd3Filter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSyslogd3Filter"], () => require("./systemLocallogSyslogd3Filter"));

export { SystemLocallogSyslogd3SettingArgs, SystemLocallogSyslogd3SettingState } from "./systemLocallogSyslogd3Setting";
export type SystemLocallogSyslogd3Setting = import("./systemLocallogSyslogd3Setting").SystemLocallogSyslogd3Setting;
export const SystemLocallogSyslogd3Setting: typeof import("./systemLocallogSyslogd3Setting").SystemLocallogSyslogd3Setting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSyslogd3Setting"], () => require("./systemLocallogSyslogd3Setting"));

export { SystemLocallogSyslogdFilterArgs, SystemLocallogSyslogdFilterState } from "./systemLocallogSyslogdFilter";
export type SystemLocallogSyslogdFilter = import("./systemLocallogSyslogdFilter").SystemLocallogSyslogdFilter;
export const SystemLocallogSyslogdFilter: typeof import("./systemLocallogSyslogdFilter").SystemLocallogSyslogdFilter = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSyslogdFilter"], () => require("./systemLocallogSyslogdFilter"));

export { SystemLocallogSyslogdSettingArgs, SystemLocallogSyslogdSettingState } from "./systemLocallogSyslogdSetting";
export type SystemLocallogSyslogdSetting = import("./systemLocallogSyslogdSetting").SystemLocallogSyslogdSetting;
export const SystemLocallogSyslogdSetting: typeof import("./systemLocallogSyslogdSetting").SystemLocallogSyslogdSetting = null as any;
utilities.lazyLoad(exports, ["SystemLocallogSyslogdSetting"], () => require("./systemLocallogSyslogdSetting"));

export { SystemLogAlertArgs, SystemLogAlertState } from "./systemLogAlert";
export type SystemLogAlert = import("./systemLogAlert").SystemLogAlert;
export const SystemLogAlert: typeof import("./systemLogAlert").SystemLogAlert = null as any;
utilities.lazyLoad(exports, ["SystemLogAlert"], () => require("./systemLogAlert"));

export { SystemLogDevicedisableArgs, SystemLogDevicedisableState } from "./systemLogDevicedisable";
export type SystemLogDevicedisable = import("./systemLogDevicedisable").SystemLogDevicedisable;
export const SystemLogDevicedisable: typeof import("./systemLogDevicedisable").SystemLogDevicedisable = null as any;
utilities.lazyLoad(exports, ["SystemLogDevicedisable"], () => require("./systemLogDevicedisable"));

export { SystemLogFospolicystatsArgs, SystemLogFospolicystatsState } from "./systemLogFospolicystats";
export type SystemLogFospolicystats = import("./systemLogFospolicystats").SystemLogFospolicystats;
export const SystemLogFospolicystats: typeof import("./systemLogFospolicystats").SystemLogFospolicystats = null as any;
utilities.lazyLoad(exports, ["SystemLogFospolicystats"], () => require("./systemLogFospolicystats"));

export { SystemLogInterfacestatsArgs, SystemLogInterfacestatsState } from "./systemLogInterfacestats";
export type SystemLogInterfacestats = import("./systemLogInterfacestats").SystemLogInterfacestats;
export const SystemLogInterfacestats: typeof import("./systemLogInterfacestats").SystemLogInterfacestats = null as any;
utilities.lazyLoad(exports, ["SystemLogInterfacestats"], () => require("./systemLogInterfacestats"));

export { SystemLogIocArgs, SystemLogIocState } from "./systemLogIoc";
export type SystemLogIoc = import("./systemLogIoc").SystemLogIoc;
export const SystemLogIoc: typeof import("./systemLogIoc").SystemLogIoc = null as any;
utilities.lazyLoad(exports, ["SystemLogIoc"], () => require("./systemLogIoc"));

export { SystemLogMaildomainArgs, SystemLogMaildomainState } from "./systemLogMaildomain";
export type SystemLogMaildomain = import("./systemLogMaildomain").SystemLogMaildomain;
export const SystemLogMaildomain: typeof import("./systemLogMaildomain").SystemLogMaildomain = null as any;
utilities.lazyLoad(exports, ["SystemLogMaildomain"], () => require("./systemLogMaildomain"));

export { SystemLogPcapfileArgs, SystemLogPcapfileState } from "./systemLogPcapfile";
export type SystemLogPcapfile = import("./systemLogPcapfile").SystemLogPcapfile;
export const SystemLogPcapfile: typeof import("./systemLogPcapfile").SystemLogPcapfile = null as any;
utilities.lazyLoad(exports, ["SystemLogPcapfile"], () => require("./systemLogPcapfile"));

export { SystemLogRatelimitArgs, SystemLogRatelimitState } from "./systemLogRatelimit";
export type SystemLogRatelimit = import("./systemLogRatelimit").SystemLogRatelimit;
export const SystemLogRatelimit: typeof import("./systemLogRatelimit").SystemLogRatelimit = null as any;
utilities.lazyLoad(exports, ["SystemLogRatelimit"], () => require("./systemLogRatelimit"));

export { SystemLogRatelimitDeviceArgs, SystemLogRatelimitDeviceState } from "./systemLogRatelimitDevice";
export type SystemLogRatelimitDevice = import("./systemLogRatelimitDevice").SystemLogRatelimitDevice;
export const SystemLogRatelimitDevice: typeof import("./systemLogRatelimitDevice").SystemLogRatelimitDevice = null as any;
utilities.lazyLoad(exports, ["SystemLogRatelimitDevice"], () => require("./systemLogRatelimitDevice"));

export { SystemLogRatelimitRatelimitsArgs, SystemLogRatelimitRatelimitsState } from "./systemLogRatelimitRatelimits";
export type SystemLogRatelimitRatelimits = import("./systemLogRatelimitRatelimits").SystemLogRatelimitRatelimits;
export const SystemLogRatelimitRatelimits: typeof import("./systemLogRatelimitRatelimits").SystemLogRatelimitRatelimits = null as any;
utilities.lazyLoad(exports, ["SystemLogRatelimitRatelimits"], () => require("./systemLogRatelimitRatelimits"));

export { SystemLogSettingsArgs, SystemLogSettingsState } from "./systemLogSettings";
export type SystemLogSettings = import("./systemLogSettings").SystemLogSettings;
export const SystemLogSettings: typeof import("./systemLogSettings").SystemLogSettings = null as any;
utilities.lazyLoad(exports, ["SystemLogSettings"], () => require("./systemLogSettings"));

export { SystemLogSettingsRollinganalyzerArgs, SystemLogSettingsRollinganalyzerState } from "./systemLogSettingsRollinganalyzer";
export type SystemLogSettingsRollinganalyzer = import("./systemLogSettingsRollinganalyzer").SystemLogSettingsRollinganalyzer;
export const SystemLogSettingsRollinganalyzer: typeof import("./systemLogSettingsRollinganalyzer").SystemLogSettingsRollinganalyzer = null as any;
utilities.lazyLoad(exports, ["SystemLogSettingsRollinganalyzer"], () => require("./systemLogSettingsRollinganalyzer"));

export { SystemLogSettingsRollinglocalArgs, SystemLogSettingsRollinglocalState } from "./systemLogSettingsRollinglocal";
export type SystemLogSettingsRollinglocal = import("./systemLogSettingsRollinglocal").SystemLogSettingsRollinglocal;
export const SystemLogSettingsRollinglocal: typeof import("./systemLogSettingsRollinglocal").SystemLogSettingsRollinglocal = null as any;
utilities.lazyLoad(exports, ["SystemLogSettingsRollinglocal"], () => require("./systemLogSettingsRollinglocal"));

export { SystemLogSettingsRollingregularArgs, SystemLogSettingsRollingregularState } from "./systemLogSettingsRollingregular";
export type SystemLogSettingsRollingregular = import("./systemLogSettingsRollingregular").SystemLogSettingsRollingregular;
export const SystemLogSettingsRollingregular: typeof import("./systemLogSettingsRollingregular").SystemLogSettingsRollingregular = null as any;
utilities.lazyLoad(exports, ["SystemLogSettingsRollingregular"], () => require("./systemLogSettingsRollingregular"));

export { SystemLogTopologyArgs, SystemLogTopologyState } from "./systemLogTopology";
export type SystemLogTopology = import("./systemLogTopology").SystemLogTopology;
export const SystemLogTopology: typeof import("./systemLogTopology").SystemLogTopology = null as any;
utilities.lazyLoad(exports, ["SystemLogTopology"], () => require("./systemLogTopology"));

export { SystemLogUebaArgs, SystemLogUebaState } from "./systemLogUeba";
export type SystemLogUeba = import("./systemLogUeba").SystemLogUeba;
export const SystemLogUeba: typeof import("./systemLogUeba").SystemLogUeba = null as any;
utilities.lazyLoad(exports, ["SystemLogUeba"], () => require("./systemLogUeba"));

export { SystemLogfetchClientprofileArgs, SystemLogfetchClientprofileState } from "./systemLogfetchClientprofile";
export type SystemLogfetchClientprofile = import("./systemLogfetchClientprofile").SystemLogfetchClientprofile;
export const SystemLogfetchClientprofile: typeof import("./systemLogfetchClientprofile").SystemLogfetchClientprofile = null as any;
utilities.lazyLoad(exports, ["SystemLogfetchClientprofile"], () => require("./systemLogfetchClientprofile"));

export { SystemLogfetchServersettingsArgs, SystemLogfetchServersettingsState } from "./systemLogfetchServersettings";
export type SystemLogfetchServersettings = import("./systemLogfetchServersettings").SystemLogfetchServersettings;
export const SystemLogfetchServersettings: typeof import("./systemLogfetchServersettings").SystemLogfetchServersettings = null as any;
utilities.lazyLoad(exports, ["SystemLogfetchServersettings"], () => require("./systemLogfetchServersettings"));

export { SystemLogforwardArgs, SystemLogforwardState } from "./systemLogforward";
export type SystemLogforward = import("./systemLogforward").SystemLogforward;
export const SystemLogforward: typeof import("./systemLogforward").SystemLogforward = null as any;
utilities.lazyLoad(exports, ["SystemLogforward"], () => require("./systemLogforward"));

export { SystemLogforwardserviceArgs, SystemLogforwardserviceState } from "./systemLogforwardservice";
export type SystemLogforwardservice = import("./systemLogforwardservice").SystemLogforwardservice;
export const SystemLogforwardservice: typeof import("./systemLogforwardservice").SystemLogforwardservice = null as any;
utilities.lazyLoad(exports, ["SystemLogforwardservice"], () => require("./systemLogforwardservice"));

export { SystemMailArgs, SystemMailState } from "./systemMail";
export type SystemMail = import("./systemMail").SystemMail;
export const SystemMail: typeof import("./systemMail").SystemMail = null as any;
utilities.lazyLoad(exports, ["SystemMail"], () => require("./systemMail"));

export { SystemMetadataAdminsArgs, SystemMetadataAdminsState } from "./systemMetadataAdmins";
export type SystemMetadataAdmins = import("./systemMetadataAdmins").SystemMetadataAdmins;
export const SystemMetadataAdmins: typeof import("./systemMetadataAdmins").SystemMetadataAdmins = null as any;
utilities.lazyLoad(exports, ["SystemMetadataAdmins"], () => require("./systemMetadataAdmins"));

export { SystemNtpArgs, SystemNtpState } from "./systemNtp";
export type SystemNtp = import("./systemNtp").SystemNtp;
export const SystemNtp: typeof import("./systemNtp").SystemNtp = null as any;
utilities.lazyLoad(exports, ["SystemNtp"], () => require("./systemNtp"));

export { SystemNtpNtpserverArgs, SystemNtpNtpserverState } from "./systemNtpNtpserver";
export type SystemNtpNtpserver = import("./systemNtpNtpserver").SystemNtpNtpserver;
export const SystemNtpNtpserver: typeof import("./systemNtpNtpserver").SystemNtpNtpserver = null as any;
utilities.lazyLoad(exports, ["SystemNtpNtpserver"], () => require("./systemNtpNtpserver"));

export { SystemPasswordpolicyArgs, SystemPasswordpolicyState } from "./systemPasswordpolicy";
export type SystemPasswordpolicy = import("./systemPasswordpolicy").SystemPasswordpolicy;
export const SystemPasswordpolicy: typeof import("./systemPasswordpolicy").SystemPasswordpolicy = null as any;
utilities.lazyLoad(exports, ["SystemPasswordpolicy"], () => require("./systemPasswordpolicy"));

export { SystemReportAutocacheArgs, SystemReportAutocacheState } from "./systemReportAutocache";
export type SystemReportAutocache = import("./systemReportAutocache").SystemReportAutocache;
export const SystemReportAutocache: typeof import("./systemReportAutocache").SystemReportAutocache = null as any;
utilities.lazyLoad(exports, ["SystemReportAutocache"], () => require("./systemReportAutocache"));

export { SystemReportEstbrowsetimeArgs, SystemReportEstbrowsetimeState } from "./systemReportEstbrowsetime";
export type SystemReportEstbrowsetime = import("./systemReportEstbrowsetime").SystemReportEstbrowsetime;
export const SystemReportEstbrowsetime: typeof import("./systemReportEstbrowsetime").SystemReportEstbrowsetime = null as any;
utilities.lazyLoad(exports, ["SystemReportEstbrowsetime"], () => require("./systemReportEstbrowsetime"));

export { SystemReportSettingArgs, SystemReportSettingState } from "./systemReportSetting";
export type SystemReportSetting = import("./systemReportSetting").SystemReportSetting;
export const SystemReportSetting: typeof import("./systemReportSetting").SystemReportSetting = null as any;
utilities.lazyLoad(exports, ["SystemReportSetting"], () => require("./systemReportSetting"));

export { SystemRouteArgs, SystemRouteState } from "./systemRoute";
export type SystemRoute = import("./systemRoute").SystemRoute;
export const SystemRoute: typeof import("./systemRoute").SystemRoute = null as any;
utilities.lazyLoad(exports, ["SystemRoute"], () => require("./systemRoute"));

export { SystemRoute6Args, SystemRoute6State } from "./systemRoute6";
export type SystemRoute6 = import("./systemRoute6").SystemRoute6;
export const SystemRoute6: typeof import("./systemRoute6").SystemRoute6 = null as any;
utilities.lazyLoad(exports, ["SystemRoute6"], () => require("./systemRoute6"));

export { SystemSamlArgs, SystemSamlState } from "./systemSaml";
export type SystemSaml = import("./systemSaml").SystemSaml;
export const SystemSaml: typeof import("./systemSaml").SystemSaml = null as any;
utilities.lazyLoad(exports, ["SystemSaml"], () => require("./systemSaml"));

export { SystemSamlFabricidpArgs, SystemSamlFabricidpState } from "./systemSamlFabricidp";
export type SystemSamlFabricidp = import("./systemSamlFabricidp").SystemSamlFabricidp;
export const SystemSamlFabricidp: typeof import("./systemSamlFabricidp").SystemSamlFabricidp = null as any;
utilities.lazyLoad(exports, ["SystemSamlFabricidp"], () => require("./systemSamlFabricidp"));

export { SystemSamlServiceprovidersArgs, SystemSamlServiceprovidersState } from "./systemSamlServiceproviders";
export type SystemSamlServiceproviders = import("./systemSamlServiceproviders").SystemSamlServiceproviders;
export const SystemSamlServiceproviders: typeof import("./systemSamlServiceproviders").SystemSamlServiceproviders = null as any;
utilities.lazyLoad(exports, ["SystemSamlServiceproviders"], () => require("./systemSamlServiceproviders"));

export { SystemSnifferArgs, SystemSnifferState } from "./systemSniffer";
export type SystemSniffer = import("./systemSniffer").SystemSniffer;
export const SystemSniffer: typeof import("./systemSniffer").SystemSniffer = null as any;
utilities.lazyLoad(exports, ["SystemSniffer"], () => require("./systemSniffer"));

export { SystemSnmpCommunityArgs, SystemSnmpCommunityState } from "./systemSnmpCommunity";
export type SystemSnmpCommunity = import("./systemSnmpCommunity").SystemSnmpCommunity;
export const SystemSnmpCommunity: typeof import("./systemSnmpCommunity").SystemSnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SystemSnmpCommunity"], () => require("./systemSnmpCommunity"));

export { SystemSnmpSysinfoArgs, SystemSnmpSysinfoState } from "./systemSnmpSysinfo";
export type SystemSnmpSysinfo = import("./systemSnmpSysinfo").SystemSnmpSysinfo;
export const SystemSnmpSysinfo: typeof import("./systemSnmpSysinfo").SystemSnmpSysinfo = null as any;
utilities.lazyLoad(exports, ["SystemSnmpSysinfo"], () => require("./systemSnmpSysinfo"));

export { SystemSnmpUserArgs, SystemSnmpUserState } from "./systemSnmpUser";
export type SystemSnmpUser = import("./systemSnmpUser").SystemSnmpUser;
export const SystemSnmpUser: typeof import("./systemSnmpUser").SystemSnmpUser = null as any;
utilities.lazyLoad(exports, ["SystemSnmpUser"], () => require("./systemSnmpUser"));

export { SystemSocfabricArgs, SystemSocfabricState } from "./systemSocfabric";
export type SystemSocfabric = import("./systemSocfabric").SystemSocfabric;
export const SystemSocfabric: typeof import("./systemSocfabric").SystemSocfabric = null as any;
utilities.lazyLoad(exports, ["SystemSocfabric"], () => require("./systemSocfabric"));

export { SystemSocfabricTrustedlistArgs, SystemSocfabricTrustedlistState } from "./systemSocfabricTrustedlist";
export type SystemSocfabricTrustedlist = import("./systemSocfabricTrustedlist").SystemSocfabricTrustedlist;
export const SystemSocfabricTrustedlist: typeof import("./systemSocfabricTrustedlist").SystemSocfabricTrustedlist = null as any;
utilities.lazyLoad(exports, ["SystemSocfabricTrustedlist"], () => require("./systemSocfabricTrustedlist"));

export { SystemSqlArgs, SystemSqlState } from "./systemSql";
export type SystemSql = import("./systemSql").SystemSql;
export const SystemSql: typeof import("./systemSql").SystemSql = null as any;
utilities.lazyLoad(exports, ["SystemSql"], () => require("./systemSql"));

export { SystemSqlCustomindexArgs, SystemSqlCustomindexState } from "./systemSqlCustomindex";
export type SystemSqlCustomindex = import("./systemSqlCustomindex").SystemSqlCustomindex;
export const SystemSqlCustomindex: typeof import("./systemSqlCustomindex").SystemSqlCustomindex = null as any;
utilities.lazyLoad(exports, ["SystemSqlCustomindex"], () => require("./systemSqlCustomindex"));

export { SystemSqlCustomskipidxArgs, SystemSqlCustomskipidxState } from "./systemSqlCustomskipidx";
export type SystemSqlCustomskipidx = import("./systemSqlCustomskipidx").SystemSqlCustomskipidx;
export const SystemSqlCustomskipidx: typeof import("./systemSqlCustomskipidx").SystemSqlCustomskipidx = null as any;
utilities.lazyLoad(exports, ["SystemSqlCustomskipidx"], () => require("./systemSqlCustomskipidx"));

export { SystemSqlTsindexfieldArgs, SystemSqlTsindexfieldState } from "./systemSqlTsindexfield";
export type SystemSqlTsindexfield = import("./systemSqlTsindexfield").SystemSqlTsindexfield;
export const SystemSqlTsindexfield: typeof import("./systemSqlTsindexfield").SystemSqlTsindexfield = null as any;
utilities.lazyLoad(exports, ["SystemSqlTsindexfield"], () => require("./systemSqlTsindexfield"));

export { SystemSyslogArgs, SystemSyslogState } from "./systemSyslog";
export type SystemSyslog = import("./systemSyslog").SystemSyslog;
export const SystemSyslog: typeof import("./systemSyslog").SystemSyslog = null as any;
utilities.lazyLoad(exports, ["SystemSyslog"], () => require("./systemSyslog"));

export { SystemWebproxyArgs, SystemWebproxyState } from "./systemWebproxy";
export type SystemWebproxy = import("./systemWebproxy").SystemWebproxy;
export const SystemWebproxy: typeof import("./systemWebproxy").SystemWebproxy = null as any;
utilities.lazyLoad(exports, ["SystemWebproxy"], () => require("./systemWebproxy"));

export { SystemWorkflowApprovalmatrixArgs, SystemWorkflowApprovalmatrixState } from "./systemWorkflowApprovalmatrix";
export type SystemWorkflowApprovalmatrix = import("./systemWorkflowApprovalmatrix").SystemWorkflowApprovalmatrix;
export const SystemWorkflowApprovalmatrix: typeof import("./systemWorkflowApprovalmatrix").SystemWorkflowApprovalmatrix = null as any;
utilities.lazyLoad(exports, ["SystemWorkflowApprovalmatrix"], () => require("./systemWorkflowApprovalmatrix"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortianalyzer:index/dvmCmdAddDevice:DvmCmdAddDevice":
                return new DvmCmdAddDevice(name, <any>undefined, { urn })
            case "fortianalyzer:index/dvmCmdDelDevice:DvmCmdDelDevice":
                return new DvmCmdDelDevice(name, <any>undefined, { urn })
            case "fortianalyzer:index/dvmdbAdom:DvmdbAdom":
                return new DvmdbAdom(name, <any>undefined, { urn })
            case "fortianalyzer:index/dvmdbGroup:DvmdbGroup":
                return new DvmdbGroup(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateAnalyzerVirusreport:FmupdateAnalyzerVirusreport":
                return new FmupdateAnalyzerVirusreport(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateAvipsAdvancedlog:FmupdateAvipsAdvancedlog":
                return new FmupdateAvipsAdvancedlog(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateAvipsWebproxy:FmupdateAvipsWebproxy":
                return new FmupdateAvipsWebproxy(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateCustomurllist:FmupdateCustomurllist":
                return new FmupdateCustomurllist(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateDiskquota:FmupdateDiskquota":
                return new FmupdateDiskquota(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFctservices:FmupdateFctservices":
                return new FmupdateFctservices(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFdssetting:FmupdateFdssetting":
                return new FmupdateFdssetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFdssettingPushoverride:FmupdateFdssettingPushoverride":
                return new FmupdateFdssettingPushoverride(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFdssettingPushoverridetoclient:FmupdateFdssettingPushoverridetoclient":
                return new FmupdateFdssettingPushoverridetoclient(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFdssettingServeroverride:FmupdateFdssettingServeroverride":
                return new FmupdateFdssettingServeroverride(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFdssettingUpdateschedule:FmupdateFdssettingUpdateschedule":
                return new FmupdateFdssettingUpdateschedule(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFwmsetting:FmupdateFwmsetting":
                return new FmupdateFwmsetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateFwmsettingUpgradetimeout:FmupdateFwmsettingUpgradetimeout":
                return new FmupdateFwmsettingUpgradetimeout(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateMultilayer:FmupdateMultilayer":
                return new FmupdateMultilayer(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdatePublicnetwork:FmupdatePublicnetwork":
                return new FmupdatePublicnetwork(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateServeraccesspriorities:FmupdateServeraccesspriorities":
                return new FmupdateServeraccesspriorities(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateServeroverridestatus:FmupdateServeroverridestatus":
                return new FmupdateServeroverridestatus(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateService:FmupdateService":
                return new FmupdateService(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateWebspamFgdsetting:FmupdateWebspamFgdsetting":
                return new FmupdateWebspamFgdsetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/fmupdateWebspamWebproxy:FmupdateWebspamWebproxy":
                return new FmupdateWebspamWebproxy(name, <any>undefined, { urn })
            case "fortianalyzer:index/jsonGenericApi:JsonGenericApi":
                return new JsonGenericApi(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminGroup:SystemAdminGroup":
                return new SystemAdminGroup(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminLdap:SystemAdminLdap":
                return new SystemAdminLdap(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminProfile:SystemAdminProfile":
                return new SystemAdminProfile(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminRadius:SystemAdminRadius":
                return new SystemAdminRadius(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminSetting:SystemAdminSetting":
                return new SystemAdminSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminTacacs:SystemAdminTacacs":
                return new SystemAdminTacacs(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAdminUser:SystemAdminUser":
                return new SystemAdminUser(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAlertconsole:SystemAlertconsole":
                return new SystemAlertconsole(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAlertemail:SystemAlertemail":
                return new SystemAlertemail(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAlertevent:SystemAlertevent":
                return new SystemAlertevent(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAutodelete:SystemAutodelete":
                return new SystemAutodelete(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAutodeleteDlpfilesautodeletion:SystemAutodeleteDlpfilesautodeletion":
                return new SystemAutodeleteDlpfilesautodeletion(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAutodeleteLogautodeletion:SystemAutodeleteLogautodeletion":
                return new SystemAutodeleteLogautodeletion(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAutodeleteQuarantinefilesautodeletion:SystemAutodeleteQuarantinefilesautodeletion":
                return new SystemAutodeleteQuarantinefilesautodeletion(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemAutodeleteReportautodeletion:SystemAutodeleteReportautodeletion":
                return new SystemAutodeleteReportautodeletion(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemBackupAllsettings:SystemBackupAllsettings":
                return new SystemBackupAllsettings(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCentralmanagement:SystemCentralmanagement":
                return new SystemCentralmanagement(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCertificateCa:SystemCertificateCa":
                return new SystemCertificateCa(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCertificateCrl:SystemCertificateCrl":
                return new SystemCertificateCrl(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCertificateLocal:SystemCertificateLocal":
                return new SystemCertificateLocal(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCertificateOftp:SystemCertificateOftp":
                return new SystemCertificateOftp(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCertificateRemote:SystemCertificateRemote":
                return new SystemCertificateRemote(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCertificateSsh:SystemCertificateSsh":
                return new SystemCertificateSsh(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemConnector:SystemConnector":
                return new SystemConnector(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCsf:SystemCsf":
                return new SystemCsf(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCsfFabricconnector:SystemCsfFabricconnector":
                return new SystemCsfFabricconnector(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemCsfTrustedlist:SystemCsfTrustedlist":
                return new SystemCsfTrustedlist(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemDns:SystemDns":
                return new SystemDns(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemDocker:SystemDocker":
                return new SystemDocker(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemFips:SystemFips":
                return new SystemFips(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemFortiviewAutocache:SystemFortiviewAutocache":
                return new SystemFortiviewAutocache(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemFortiviewSetting:SystemFortiviewSetting":
                return new SystemFortiviewSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemGlobal:SystemGlobal":
                return new SystemGlobal(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemGlobalSslciphersuites:SystemGlobalSslciphersuites":
                return new SystemGlobalSslciphersuites(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemGuiact:SystemGuiact":
                return new SystemGuiact(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemHa:SystemHa":
                return new SystemHa(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemHaPeer:SystemHaPeer":
                return new SystemHaPeer(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemHaPrivatepeer:SystemHaPrivatepeer":
                return new SystemHaPrivatepeer(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemHaVip:SystemHaVip":
                return new SystemHaVip(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemInterface:SystemInterface":
                return new SystemInterface(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocalinpolicy6:SystemLocalinpolicy6":
                return new SystemLocalinpolicy6(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocalinpolicy:SystemLocalinpolicy":
                return new SystemLocalinpolicy(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogDiskFilter:SystemLocallogDiskFilter":
                return new SystemLocallogDiskFilter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogDiskSetting:SystemLocallogDiskSetting":
                return new SystemLocallogDiskSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogFortianalyzer2Filter:SystemLocallogFortianalyzer2Filter":
                return new SystemLocallogFortianalyzer2Filter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogFortianalyzer2Setting:SystemLocallogFortianalyzer2Setting":
                return new SystemLocallogFortianalyzer2Setting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogFortianalyzer3Filter:SystemLocallogFortianalyzer3Filter":
                return new SystemLocallogFortianalyzer3Filter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogFortianalyzer3Setting:SystemLocallogFortianalyzer3Setting":
                return new SystemLocallogFortianalyzer3Setting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogFortianalyzerFilter:SystemLocallogFortianalyzerFilter":
                return new SystemLocallogFortianalyzerFilter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogFortianalyzerSetting:SystemLocallogFortianalyzerSetting":
                return new SystemLocallogFortianalyzerSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogMemoryFilter:SystemLocallogMemoryFilter":
                return new SystemLocallogMemoryFilter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogMemorySetting:SystemLocallogMemorySetting":
                return new SystemLocallogMemorySetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSetting:SystemLocallogSetting":
                return new SystemLocallogSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSyslogd2Filter:SystemLocallogSyslogd2Filter":
                return new SystemLocallogSyslogd2Filter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSyslogd2Setting:SystemLocallogSyslogd2Setting":
                return new SystemLocallogSyslogd2Setting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSyslogd3Filter:SystemLocallogSyslogd3Filter":
                return new SystemLocallogSyslogd3Filter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSyslogd3Setting:SystemLocallogSyslogd3Setting":
                return new SystemLocallogSyslogd3Setting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSyslogdFilter:SystemLocallogSyslogdFilter":
                return new SystemLocallogSyslogdFilter(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLocallogSyslogdSetting:SystemLocallogSyslogdSetting":
                return new SystemLocallogSyslogdSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogAlert:SystemLogAlert":
                return new SystemLogAlert(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogDevicedisable:SystemLogDevicedisable":
                return new SystemLogDevicedisable(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogFospolicystats:SystemLogFospolicystats":
                return new SystemLogFospolicystats(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogInterfacestats:SystemLogInterfacestats":
                return new SystemLogInterfacestats(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogIoc:SystemLogIoc":
                return new SystemLogIoc(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogMaildomain:SystemLogMaildomain":
                return new SystemLogMaildomain(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogPcapfile:SystemLogPcapfile":
                return new SystemLogPcapfile(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogRatelimit:SystemLogRatelimit":
                return new SystemLogRatelimit(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogRatelimitDevice:SystemLogRatelimitDevice":
                return new SystemLogRatelimitDevice(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogRatelimitRatelimits:SystemLogRatelimitRatelimits":
                return new SystemLogRatelimitRatelimits(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogSettings:SystemLogSettings":
                return new SystemLogSettings(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogSettingsRollinganalyzer:SystemLogSettingsRollinganalyzer":
                return new SystemLogSettingsRollinganalyzer(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogSettingsRollinglocal:SystemLogSettingsRollinglocal":
                return new SystemLogSettingsRollinglocal(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogSettingsRollingregular:SystemLogSettingsRollingregular":
                return new SystemLogSettingsRollingregular(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogTopology:SystemLogTopology":
                return new SystemLogTopology(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogUeba:SystemLogUeba":
                return new SystemLogUeba(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogfetchClientprofile:SystemLogfetchClientprofile":
                return new SystemLogfetchClientprofile(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogfetchServersettings:SystemLogfetchServersettings":
                return new SystemLogfetchServersettings(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogforward:SystemLogforward":
                return new SystemLogforward(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemLogforwardservice:SystemLogforwardservice":
                return new SystemLogforwardservice(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemMail:SystemMail":
                return new SystemMail(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemMetadataAdmins:SystemMetadataAdmins":
                return new SystemMetadataAdmins(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemNtp:SystemNtp":
                return new SystemNtp(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemNtpNtpserver:SystemNtpNtpserver":
                return new SystemNtpNtpserver(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemPasswordpolicy:SystemPasswordpolicy":
                return new SystemPasswordpolicy(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemReportAutocache:SystemReportAutocache":
                return new SystemReportAutocache(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemReportEstbrowsetime:SystemReportEstbrowsetime":
                return new SystemReportEstbrowsetime(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemReportSetting:SystemReportSetting":
                return new SystemReportSetting(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemRoute6:SystemRoute6":
                return new SystemRoute6(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemRoute:SystemRoute":
                return new SystemRoute(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSaml:SystemSaml":
                return new SystemSaml(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSamlFabricidp:SystemSamlFabricidp":
                return new SystemSamlFabricidp(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSamlServiceproviders:SystemSamlServiceproviders":
                return new SystemSamlServiceproviders(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSniffer:SystemSniffer":
                return new SystemSniffer(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSnmpCommunity:SystemSnmpCommunity":
                return new SystemSnmpCommunity(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSnmpSysinfo:SystemSnmpSysinfo":
                return new SystemSnmpSysinfo(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSnmpUser:SystemSnmpUser":
                return new SystemSnmpUser(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSocfabric:SystemSocfabric":
                return new SystemSocfabric(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSocfabricTrustedlist:SystemSocfabricTrustedlist":
                return new SystemSocfabricTrustedlist(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSql:SystemSql":
                return new SystemSql(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSqlCustomindex:SystemSqlCustomindex":
                return new SystemSqlCustomindex(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSqlCustomskipidx:SystemSqlCustomskipidx":
                return new SystemSqlCustomskipidx(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSqlTsindexfield:SystemSqlTsindexfield":
                return new SystemSqlTsindexfield(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemSyslog:SystemSyslog":
                return new SystemSyslog(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemWebproxy:SystemWebproxy":
                return new SystemWebproxy(name, <any>undefined, { urn })
            case "fortianalyzer:index/systemWorkflowApprovalmatrix:SystemWorkflowApprovalmatrix":
                return new SystemWorkflowApprovalmatrix(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortianalyzer", "index/dvmCmdAddDevice", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/dvmCmdDelDevice", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/dvmdbAdom", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/dvmdbGroup", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateAnalyzerVirusreport", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateAvipsAdvancedlog", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateAvipsWebproxy", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateCustomurllist", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateDiskquota", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFctservices", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFdssetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFdssettingPushoverride", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFdssettingPushoverridetoclient", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFdssettingServeroverride", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFdssettingUpdateschedule", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFwmsetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateFwmsettingUpgradetimeout", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateMultilayer", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdatePublicnetwork", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateServeraccesspriorities", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateServeroverridestatus", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateService", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateWebspamFgdsetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/fmupdateWebspamWebproxy", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/jsonGenericApi", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminGroup", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminLdap", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminProfile", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminRadius", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminTacacs", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAdminUser", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAlertconsole", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAlertemail", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAlertevent", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAutodelete", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAutodeleteDlpfilesautodeletion", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAutodeleteLogautodeletion", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAutodeleteQuarantinefilesautodeletion", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemAutodeleteReportautodeletion", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemBackupAllsettings", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCentralmanagement", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCertificateCa", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCertificateCrl", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCertificateLocal", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCertificateOftp", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCertificateRemote", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCertificateSsh", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemConnector", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCsf", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCsfFabricconnector", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemCsfTrustedlist", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemDns", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemDocker", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemFips", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemFortiviewAutocache", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemFortiviewSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemGlobal", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemGlobalSslciphersuites", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemGuiact", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemHa", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemHaPeer", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemHaPrivatepeer", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemHaVip", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemInterface", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocalinpolicy", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocalinpolicy6", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogDiskFilter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogDiskSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogFortianalyzer2Filter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogFortianalyzer2Setting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogFortianalyzer3Filter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogFortianalyzer3Setting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogFortianalyzerFilter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogFortianalyzerSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogMemoryFilter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogMemorySetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSyslogd2Filter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSyslogd2Setting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSyslogd3Filter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSyslogd3Setting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSyslogdFilter", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLocallogSyslogdSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogAlert", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogDevicedisable", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogFospolicystats", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogInterfacestats", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogIoc", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogMaildomain", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogPcapfile", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogRatelimit", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogRatelimitDevice", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogRatelimitRatelimits", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogSettings", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogSettingsRollinganalyzer", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogSettingsRollinglocal", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogSettingsRollingregular", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogTopology", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogUeba", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogfetchClientprofile", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogfetchServersettings", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogforward", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemLogforwardservice", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemMail", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemMetadataAdmins", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemNtp", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemNtpNtpserver", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemPasswordpolicy", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemReportAutocache", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemReportEstbrowsetime", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemReportSetting", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemRoute", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemRoute6", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSaml", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSamlFabricidp", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSamlServiceproviders", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSniffer", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSnmpCommunity", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSnmpSysinfo", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSnmpUser", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSocfabric", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSocfabricTrustedlist", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSql", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSqlCustomindex", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSqlCustomskipidx", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSqlTsindexfield", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemSyslog", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemWebproxy", _module)
pulumi.runtime.registerResourceModule("fortianalyzer", "index/systemWorkflowApprovalmatrix", _module)
pulumi.runtime.registerResourcePackage("fortianalyzer", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortianalyzer") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
